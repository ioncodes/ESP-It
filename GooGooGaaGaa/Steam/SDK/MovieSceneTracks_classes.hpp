#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MovieSceneTracks

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "MovieScene_structs.hpp"
#include "MovieScene_classes.hpp"
#include "MovieSceneTracks_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Constraints_structs.hpp"


namespace SDK
{

// Class MovieSceneTracks.MovieSceneTransformOrigin
// 0x0000 (0x0028 - 0x0028)
class IMovieSceneTransformOrigin final : public IInterface
{
public:
	struct FTransform BP_GetTransformOrigin() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneTransformOrigin">();
	}
	static class IMovieSceneTransformOrigin* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMovieSceneTransformOrigin>();
	}
};
static_assert(alignof(IMovieSceneTransformOrigin) == 0x000008, "Wrong alignment on IMovieSceneTransformOrigin");
static_assert(sizeof(IMovieSceneTransformOrigin) == 0x000028, "Wrong size on IMovieSceneTransformOrigin");

// Class MovieSceneTracks.MovieSceneConsoleVariableTrackInterface
// 0x0000 (0x0028 - 0x0028)
class IMovieSceneConsoleVariableTrackInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneConsoleVariableTrackInterface">();
	}
	static class IMovieSceneConsoleVariableTrackInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMovieSceneConsoleVariableTrackInterface>();
	}
};
static_assert(alignof(IMovieSceneConsoleVariableTrackInterface) == 0x000008, "Wrong alignment on IMovieSceneConsoleVariableTrackInterface");
static_assert(sizeof(IMovieSceneConsoleVariableTrackInterface) == 0x000028, "Wrong size on IMovieSceneConsoleVariableTrackInterface");

// Class MovieSceneTracks.MovieSceneDecomposerTestObject
// 0x0008 (0x0030 - 0x0028)
class UMovieSceneDecomposerTestObject final : public UObject
{
public:
	float                                         FloatProperty;                                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneDecomposerTestObject">();
	}
	static class UMovieSceneDecomposerTestObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneDecomposerTestObject>();
	}
};
static_assert(alignof(UMovieSceneDecomposerTestObject) == 0x000008, "Wrong alignment on UMovieSceneDecomposerTestObject");
static_assert(sizeof(UMovieSceneDecomposerTestObject) == 0x000030, "Wrong size on UMovieSceneDecomposerTestObject");
static_assert(offsetof(UMovieSceneDecomposerTestObject, FloatProperty) == 0x000028, "Member 'UMovieSceneDecomposerTestObject::FloatProperty' has a wrong offset!");

// Class MovieSceneTracks.MovieScenePartialEvaluationTestObject
// 0x0020 (0x0048 - 0x0028)
class UMovieScenePartialEvaluationTestObject final : public UObject
{
public:
	float                                         FloatProperty;                                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                VectorProperty;                                    // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScenePartialEvaluationTestObject">();
	}
	static class UMovieScenePartialEvaluationTestObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScenePartialEvaluationTestObject>();
	}
};
static_assert(alignof(UMovieScenePartialEvaluationTestObject) == 0x000008, "Wrong alignment on UMovieScenePartialEvaluationTestObject");
static_assert(sizeof(UMovieScenePartialEvaluationTestObject) == 0x000048, "Wrong size on UMovieScenePartialEvaluationTestObject");
static_assert(offsetof(UMovieScenePartialEvaluationTestObject, FloatProperty) == 0x000028, "Member 'UMovieScenePartialEvaluationTestObject::FloatProperty' has a wrong offset!");
static_assert(offsetof(UMovieScenePartialEvaluationTestObject, VectorProperty) == 0x000030, "Member 'UMovieScenePartialEvaluationTestObject::VectorProperty' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneTestSequence
// 0x0028 (0x0090 - 0x0068)
class UMovieSceneTestSequence final : public UMovieSceneSequence
{
public:
	class UMovieScene*                            MovieScene;                                        // 0x0068(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        BoundObjects;                                      // 0x0070(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<struct FGuid>                          BindingGuids;                                      // 0x0080(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneTestSequence">();
	}
	static class UMovieSceneTestSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneTestSequence>();
	}
};
static_assert(alignof(UMovieSceneTestSequence) == 0x000008, "Wrong alignment on UMovieSceneTestSequence");
static_assert(sizeof(UMovieSceneTestSequence) == 0x000090, "Wrong size on UMovieSceneTestSequence");
static_assert(offsetof(UMovieSceneTestSequence, MovieScene) == 0x000068, "Member 'UMovieSceneTestSequence::MovieScene' has a wrong offset!");
static_assert(offsetof(UMovieSceneTestSequence, BoundObjects) == 0x000070, "Member 'UMovieSceneTestSequence::BoundObjects' has a wrong offset!");
static_assert(offsetof(UMovieSceneTestSequence, BindingGuids) == 0x000080, "Member 'UMovieSceneTestSequence::BindingGuids' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneDoublePerlinNoiseChannelContainer
// 0x0068 (0x00C0 - 0x0058)
class UMovieSceneDoublePerlinNoiseChannelContainer final : public UMovieSceneChannelOverrideContainer
{
public:
	struct FMovieSceneDoublePerlinNoiseChannel    PerlinNoiseChannel;                                // 0x0058(0x0068)(Edit, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneDoublePerlinNoiseChannelContainer">();
	}
	static class UMovieSceneDoublePerlinNoiseChannelContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneDoublePerlinNoiseChannelContainer>();
	}
};
static_assert(alignof(UMovieSceneDoublePerlinNoiseChannelContainer) == 0x000008, "Wrong alignment on UMovieSceneDoublePerlinNoiseChannelContainer");
static_assert(sizeof(UMovieSceneDoublePerlinNoiseChannelContainer) == 0x0000C0, "Wrong size on UMovieSceneDoublePerlinNoiseChannelContainer");
static_assert(offsetof(UMovieSceneDoublePerlinNoiseChannelContainer, PerlinNoiseChannel) == 0x000058, "Member 'UMovieSceneDoublePerlinNoiseChannelContainer::PerlinNoiseChannel' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneFloatPerlinNoiseChannelContainer
// 0x0068 (0x00C0 - 0x0058)
class UMovieSceneFloatPerlinNoiseChannelContainer final : public UMovieSceneChannelOverrideContainer
{
public:
	struct FMovieSceneFloatPerlinNoiseChannel     PerlinNoiseChannel;                                // 0x0058(0x0068)(Edit, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneFloatPerlinNoiseChannelContainer">();
	}
	static class UMovieSceneFloatPerlinNoiseChannelContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneFloatPerlinNoiseChannelContainer>();
	}
};
static_assert(alignof(UMovieSceneFloatPerlinNoiseChannelContainer) == 0x000008, "Wrong alignment on UMovieSceneFloatPerlinNoiseChannelContainer");
static_assert(sizeof(UMovieSceneFloatPerlinNoiseChannelContainer) == 0x0000C0, "Wrong size on UMovieSceneFloatPerlinNoiseChannelContainer");
static_assert(offsetof(UMovieSceneFloatPerlinNoiseChannelContainer, PerlinNoiseChannel) == 0x000058, "Member 'UMovieSceneFloatPerlinNoiseChannelContainer::PerlinNoiseChannel' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneInterrogatedPropertyInstantiatorSystem
// 0x01B0 (0x01F0 - 0x0040)
class UMovieSceneInterrogatedPropertyInstantiatorSystem final : public UMovieSceneEntityInstantiatorSystem
{
public:
	uint8                                         Pad_40[0x1B0];                                     // 0x0040(0x01B0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneInterrogatedPropertyInstantiatorSystem">();
	}
	static class UMovieSceneInterrogatedPropertyInstantiatorSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneInterrogatedPropertyInstantiatorSystem>();
	}
};
static_assert(alignof(UMovieSceneInterrogatedPropertyInstantiatorSystem) == 0x000008, "Wrong alignment on UMovieSceneInterrogatedPropertyInstantiatorSystem");
static_assert(sizeof(UMovieSceneInterrogatedPropertyInstantiatorSystem) == 0x0001F0, "Wrong size on UMovieSceneInterrogatedPropertyInstantiatorSystem");

// Class MovieSceneTracks.MovieScene3DConstraintSection
// 0x0028 (0x0118 - 0x00F0)
class UMovieScene3DConstraintSection : public UMovieSceneSection
{
public:
	struct FGuid                                  ConstraintID;                                      // 0x00F0(0x0010)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMovieSceneObjectBindingID             ConstraintBindingID;                               // 0x0100(0x0018)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetConstraintBindingID(const struct FMovieSceneObjectBindingID& InConstraintBindingID);

	const struct FMovieSceneObjectBindingID GetConstraintBindingID() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScene3DConstraintSection">();
	}
	static class UMovieScene3DConstraintSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScene3DConstraintSection>();
	}
};
static_assert(alignof(UMovieScene3DConstraintSection) == 0x000008, "Wrong alignment on UMovieScene3DConstraintSection");
static_assert(sizeof(UMovieScene3DConstraintSection) == 0x000118, "Wrong size on UMovieScene3DConstraintSection");
static_assert(offsetof(UMovieScene3DConstraintSection, ConstraintID) == 0x0000F0, "Member 'UMovieScene3DConstraintSection::ConstraintID' has a wrong offset!");
static_assert(offsetof(UMovieScene3DConstraintSection, ConstraintBindingID) == 0x000100, "Member 'UMovieScene3DConstraintSection::ConstraintBindingID' has a wrong offset!");

// Class MovieSceneTracks.MovieScene3DAttachSection
// 0x0020 (0x0138 - 0x0118)
class UMovieScene3DAttachSection final : public UMovieScene3DConstraintSection
{
public:
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachSocketName;                                  // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachComponentName;                               // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachmentRule                               AttachmentLocationRule;                            // 0x0130(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachmentRule                               AttachmentRotationRule;                            // 0x0131(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachmentRule                               AttachmentScaleRule;                               // 0x0132(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDetachmentRule                               DetachmentLocationRule;                            // 0x0133(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDetachmentRule                               DetachmentRotationRule;                            // 0x0134(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDetachmentRule                               DetachmentScaleRule;                               // 0x0135(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_136[0x2];                                      // 0x0136(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScene3DAttachSection">();
	}
	static class UMovieScene3DAttachSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScene3DAttachSection>();
	}
};
static_assert(alignof(UMovieScene3DAttachSection) == 0x000008, "Wrong alignment on UMovieScene3DAttachSection");
static_assert(sizeof(UMovieScene3DAttachSection) == 0x000138, "Wrong size on UMovieScene3DAttachSection");
static_assert(offsetof(UMovieScene3DAttachSection, AttachSocketName) == 0x000120, "Member 'UMovieScene3DAttachSection::AttachSocketName' has a wrong offset!");
static_assert(offsetof(UMovieScene3DAttachSection, AttachComponentName) == 0x000128, "Member 'UMovieScene3DAttachSection::AttachComponentName' has a wrong offset!");
static_assert(offsetof(UMovieScene3DAttachSection, AttachmentLocationRule) == 0x000130, "Member 'UMovieScene3DAttachSection::AttachmentLocationRule' has a wrong offset!");
static_assert(offsetof(UMovieScene3DAttachSection, AttachmentRotationRule) == 0x000131, "Member 'UMovieScene3DAttachSection::AttachmentRotationRule' has a wrong offset!");
static_assert(offsetof(UMovieScene3DAttachSection, AttachmentScaleRule) == 0x000132, "Member 'UMovieScene3DAttachSection::AttachmentScaleRule' has a wrong offset!");
static_assert(offsetof(UMovieScene3DAttachSection, DetachmentLocationRule) == 0x000133, "Member 'UMovieScene3DAttachSection::DetachmentLocationRule' has a wrong offset!");
static_assert(offsetof(UMovieScene3DAttachSection, DetachmentRotationRule) == 0x000134, "Member 'UMovieScene3DAttachSection::DetachmentRotationRule' has a wrong offset!");
static_assert(offsetof(UMovieScene3DAttachSection, DetachmentScaleRule) == 0x000135, "Member 'UMovieScene3DAttachSection::DetachmentScaleRule' has a wrong offset!");

// Class MovieSceneTracks.MovieScene3DPathSection
// 0x0118 (0x0230 - 0x0118)
class UMovieScene3DPathSection final : public UMovieScene3DConstraintSection
{
public:
	struct FMovieSceneFloatChannel                TimingCurve;                                       // 0x0118(0x0110)(NativeAccessSpecifierPublic)
	EMovieScene3DPathSection_Axis                 FrontAxisEnum;                                     // 0x0228(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovieScene3DPathSection_Axis                 UpAxisEnum;                                        // 0x0229(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22A[0x2];                                      // 0x022A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bFollow : 1;                                       // 0x022C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bReverse : 1;                                      // 0x022C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bForceUpright : 1;                                 // 0x022C(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_22D[0x3];                                      // 0x022D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScene3DPathSection">();
	}
	static class UMovieScene3DPathSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScene3DPathSection>();
	}
};
static_assert(alignof(UMovieScene3DPathSection) == 0x000008, "Wrong alignment on UMovieScene3DPathSection");
static_assert(sizeof(UMovieScene3DPathSection) == 0x000230, "Wrong size on UMovieScene3DPathSection");
static_assert(offsetof(UMovieScene3DPathSection, TimingCurve) == 0x000118, "Member 'UMovieScene3DPathSection::TimingCurve' has a wrong offset!");
static_assert(offsetof(UMovieScene3DPathSection, FrontAxisEnum) == 0x000228, "Member 'UMovieScene3DPathSection::FrontAxisEnum' has a wrong offset!");
static_assert(offsetof(UMovieScene3DPathSection, UpAxisEnum) == 0x000229, "Member 'UMovieScene3DPathSection::UpAxisEnum' has a wrong offset!");

// Class MovieSceneTracks.MovieScene3DTransformSectionConstraints
// 0x0010 (0x0038 - 0x0028)
class UMovieScene3DTransformSectionConstraints final : public UObject
{
public:
	TArray<struct FConstraintAndActiveChannel>    ConstraintsChannels;                               // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScene3DTransformSectionConstraints">();
	}
	static class UMovieScene3DTransformSectionConstraints* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScene3DTransformSectionConstraints>();
	}
};
static_assert(alignof(UMovieScene3DTransformSectionConstraints) == 0x000008, "Wrong alignment on UMovieScene3DTransformSectionConstraints");
static_assert(sizeof(UMovieScene3DTransformSectionConstraints) == 0x000038, "Wrong size on UMovieScene3DTransformSectionConstraints");
static_assert(offsetof(UMovieScene3DTransformSectionConstraints, ConstraintsChannels) == 0x000028, "Member 'UMovieScene3DTransformSectionConstraints::ConstraintsChannels' has a wrong offset!");

// Class MovieSceneTracks.MovieScene3DTransformSection
// 0x0B48 (0x0C38 - 0x00F0)
class UMovieScene3DTransformSection final : public UMovieSceneSection
{
public:
	uint8                                         Pad_F0[0x40];                                      // 0x00F0(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneTransformMask               TransformMask;                                     // 0x0130(0x0004)(NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneDoubleChannel               Translation[0x3];                                  // 0x0138(0x0118)(NativeAccessSpecifierPrivate)
	struct FMovieSceneDoubleChannel               Rotation[0x3];                                     // 0x0480(0x0118)(NativeAccessSpecifierPrivate)
	struct FMovieSceneDoubleChannel               Scale[0x3];                                        // 0x07C8(0x0118)(NativeAccessSpecifierPrivate)
	struct FMovieSceneFloatChannel                ManualWeight;                                      // 0x0B10(0x0110)(NativeAccessSpecifierPrivate)
	class UMovieSceneSectionChannelOverrideRegistry* OverrideRegistry;                                  // 0x0C20(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMovieScene3DTransformSectionConstraints* Constraints;                                       // 0x0C28(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bUseQuaternionInterpolation;                       // 0x0C30(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C31[0x7];                                      // 0x0C31(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScene3DTransformSection">();
	}
	static class UMovieScene3DTransformSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScene3DTransformSection>();
	}
};
static_assert(alignof(UMovieScene3DTransformSection) == 0x000008, "Wrong alignment on UMovieScene3DTransformSection");
static_assert(sizeof(UMovieScene3DTransformSection) == 0x000C38, "Wrong size on UMovieScene3DTransformSection");
static_assert(offsetof(UMovieScene3DTransformSection, TransformMask) == 0x000130, "Member 'UMovieScene3DTransformSection::TransformMask' has a wrong offset!");
static_assert(offsetof(UMovieScene3DTransformSection, Translation) == 0x000138, "Member 'UMovieScene3DTransformSection::Translation' has a wrong offset!");
static_assert(offsetof(UMovieScene3DTransformSection, Rotation) == 0x000480, "Member 'UMovieScene3DTransformSection::Rotation' has a wrong offset!");
static_assert(offsetof(UMovieScene3DTransformSection, Scale) == 0x0007C8, "Member 'UMovieScene3DTransformSection::Scale' has a wrong offset!");
static_assert(offsetof(UMovieScene3DTransformSection, ManualWeight) == 0x000B10, "Member 'UMovieScene3DTransformSection::ManualWeight' has a wrong offset!");
static_assert(offsetof(UMovieScene3DTransformSection, OverrideRegistry) == 0x000C20, "Member 'UMovieScene3DTransformSection::OverrideRegistry' has a wrong offset!");
static_assert(offsetof(UMovieScene3DTransformSection, Constraints) == 0x000C28, "Member 'UMovieScene3DTransformSection::Constraints' has a wrong offset!");
static_assert(offsetof(UMovieScene3DTransformSection, bUseQuaternionInterpolation) == 0x000C30, "Member 'UMovieScene3DTransformSection::bUseQuaternionInterpolation' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneActorReferenceSection
// 0x01B0 (0x02A0 - 0x00F0)
class UMovieSceneActorReferenceSection final : public UMovieSceneSection
{
public:
	struct FMovieSceneActorReferenceData          ActorReferenceData;                                // 0x00F0(0x0120)(NativeAccessSpecifierPrivate)
	struct FIntegralCurve                         ActorGuidIndexCurve;                               // 0x0210(0x0080)(Deprecated, NativeAccessSpecifierPrivate)
	TArray<class FString>                         ActorGuidStrings;                                  // 0x0290(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneActorReferenceSection">();
	}
	static class UMovieSceneActorReferenceSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneActorReferenceSection>();
	}
};
static_assert(alignof(UMovieSceneActorReferenceSection) == 0x000008, "Wrong alignment on UMovieSceneActorReferenceSection");
static_assert(sizeof(UMovieSceneActorReferenceSection) == 0x0002A0, "Wrong size on UMovieSceneActorReferenceSection");
static_assert(offsetof(UMovieSceneActorReferenceSection, ActorReferenceData) == 0x0000F0, "Member 'UMovieSceneActorReferenceSection::ActorReferenceData' has a wrong offset!");
static_assert(offsetof(UMovieSceneActorReferenceSection, ActorGuidIndexCurve) == 0x000210, "Member 'UMovieSceneActorReferenceSection::ActorGuidIndexCurve' has a wrong offset!");
static_assert(offsetof(UMovieSceneActorReferenceSection, ActorGuidStrings) == 0x000290, "Member 'UMovieSceneActorReferenceSection::ActorGuidStrings' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneAudioSection
// 0x0538 (0x0628 - 0x00F0)
class UMovieSceneAudioSection final : public UMovieSceneSection
{
public:
	uint8                                         Pad_F0[0x8];                                       // 0x00F0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Sound;                                             // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FFrameNumber                           StartFrameOffset;                                  // 0x0100(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         StartOffset;                                       // 0x0104(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AudioStartTime;                                    // 0x0108(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AudioDilationFactor;                               // 0x010C(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AudioVolume;                                       // 0x0110(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneFloatChannel                SoundVolume;                                       // 0x0118(0x0110)(NativeAccessSpecifierPrivate)
	struct FMovieSceneFloatChannel                PitchMultiplier;                                   // 0x0228(0x0110)(NativeAccessSpecifierPrivate)
	TMap<class FName, struct FMovieSceneFloatChannel> Inputs_Float;                                      // 0x0338(0x0050)(NativeAccessSpecifierPrivate)
	TMap<class FName, struct FMovieSceneStringChannel> Inputs_String;                                     // 0x0388(0x0050)(NativeAccessSpecifierPrivate)
	TMap<class FName, struct FMovieSceneBoolChannel> Inputs_Bool;                                       // 0x03D8(0x0050)(NativeAccessSpecifierPrivate)
	TMap<class FName, struct FMovieSceneIntegerChannel> Inputs_Int;                                        // 0x0428(0x0050)(NativeAccessSpecifierPrivate)
	TMap<class FName, struct FMovieSceneAudioTriggerChannel> Inputs_Trigger;                                    // 0x0478(0x0050)(NativeAccessSpecifierPrivate)
	struct FMovieSceneActorReferenceData          AttachActorData;                                   // 0x04C8(0x0120)(NativeAccessSpecifierPrivate)
	bool                                          bLooping;                                          // 0x05E8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bSuppressSubtitles;                                // 0x05E9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bOverrideAttenuation;                              // 0x05EA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5EB[0x5];                                      // 0x05EB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      AttenuationSettings;                               // 0x05F0(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TDelegate<void(TArray<struct FSubtitleCue>& Subtitles, float CueDuration)> OnQueueSubtitles;                                  // 0x05F8(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_             OnAudioFinished;                                   // 0x0608(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_             OnAudioPlaybackPercent;                            // 0x0618(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPrivate)

public:
	void SetAttenuationSettings(class USoundAttenuation* InAttenuationSettings);
	void SetLooping(bool bInLooping);
	void SetOverrideAttenuation(bool bInOverrideAttenuation);
	void SetSound(class USoundBase* InSound);
	void SetStartOffset(const struct FFrameNumber& InStartOffset);
	void SetSuppressSubtitles(bool bInSuppressSubtitles);

	class USoundAttenuation* GetAttenuationSettings() const;
	bool GetLooping() const;
	bool GetOverrideAttenuation() const;
	class USoundBase* GetSound() const;
	struct FFrameNumber GetStartOffset() const;
	bool GetSuppressSubtitles() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneAudioSection">();
	}
	static class UMovieSceneAudioSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneAudioSection>();
	}
};
static_assert(alignof(UMovieSceneAudioSection) == 0x000008, "Wrong alignment on UMovieSceneAudioSection");
static_assert(sizeof(UMovieSceneAudioSection) == 0x000628, "Wrong size on UMovieSceneAudioSection");
static_assert(offsetof(UMovieSceneAudioSection, Sound) == 0x0000F8, "Member 'UMovieSceneAudioSection::Sound' has a wrong offset!");
static_assert(offsetof(UMovieSceneAudioSection, StartFrameOffset) == 0x000100, "Member 'UMovieSceneAudioSection::StartFrameOffset' has a wrong offset!");
static_assert(offsetof(UMovieSceneAudioSection, StartOffset) == 0x000104, "Member 'UMovieSceneAudioSection::StartOffset' has a wrong offset!");
static_assert(offsetof(UMovieSceneAudioSection, AudioStartTime) == 0x000108, "Member 'UMovieSceneAudioSection::AudioStartTime' has a wrong offset!");
static_assert(offsetof(UMovieSceneAudioSection, AudioDilationFactor) == 0x00010C, "Member 'UMovieSceneAudioSection::AudioDilationFactor' has a wrong offset!");
static_assert(offsetof(UMovieSceneAudioSection, AudioVolume) == 0x000110, "Member 'UMovieSceneAudioSection::AudioVolume' has a wrong offset!");
static_assert(offsetof(UMovieSceneAudioSection, SoundVolume) == 0x000118, "Member 'UMovieSceneAudioSection::SoundVolume' has a wrong offset!");
static_assert(offsetof(UMovieSceneAudioSection, PitchMultiplier) == 0x000228, "Member 'UMovieSceneAudioSection::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(UMovieSceneAudioSection, Inputs_Float) == 0x000338, "Member 'UMovieSceneAudioSection::Inputs_Float' has a wrong offset!");
static_assert(offsetof(UMovieSceneAudioSection, Inputs_String) == 0x000388, "Member 'UMovieSceneAudioSection::Inputs_String' has a wrong offset!");
static_assert(offsetof(UMovieSceneAudioSection, Inputs_Bool) == 0x0003D8, "Member 'UMovieSceneAudioSection::Inputs_Bool' has a wrong offset!");
static_assert(offsetof(UMovieSceneAudioSection, Inputs_Int) == 0x000428, "Member 'UMovieSceneAudioSection::Inputs_Int' has a wrong offset!");
static_assert(offsetof(UMovieSceneAudioSection, Inputs_Trigger) == 0x000478, "Member 'UMovieSceneAudioSection::Inputs_Trigger' has a wrong offset!");
static_assert(offsetof(UMovieSceneAudioSection, AttachActorData) == 0x0004C8, "Member 'UMovieSceneAudioSection::AttachActorData' has a wrong offset!");
static_assert(offsetof(UMovieSceneAudioSection, bLooping) == 0x0005E8, "Member 'UMovieSceneAudioSection::bLooping' has a wrong offset!");
static_assert(offsetof(UMovieSceneAudioSection, bSuppressSubtitles) == 0x0005E9, "Member 'UMovieSceneAudioSection::bSuppressSubtitles' has a wrong offset!");
static_assert(offsetof(UMovieSceneAudioSection, bOverrideAttenuation) == 0x0005EA, "Member 'UMovieSceneAudioSection::bOverrideAttenuation' has a wrong offset!");
static_assert(offsetof(UMovieSceneAudioSection, AttenuationSettings) == 0x0005F0, "Member 'UMovieSceneAudioSection::AttenuationSettings' has a wrong offset!");
static_assert(offsetof(UMovieSceneAudioSection, OnQueueSubtitles) == 0x0005F8, "Member 'UMovieSceneAudioSection::OnQueueSubtitles' has a wrong offset!");
static_assert(offsetof(UMovieSceneAudioSection, OnAudioFinished) == 0x000608, "Member 'UMovieSceneAudioSection::OnAudioFinished' has a wrong offset!");
static_assert(offsetof(UMovieSceneAudioSection, OnAudioPlaybackPercent) == 0x000618, "Member 'UMovieSceneAudioSection::OnAudioPlaybackPercent' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneBaseCacheSection
// 0x0008 (0x00F8 - 0x00F0)
class UMovieSceneBaseCacheSection : public UMovieSceneSection
{
public:
	uint8                                         Pad_F0[0x8];                                       // 0x00F0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneBaseCacheSection">();
	}
	static class UMovieSceneBaseCacheSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneBaseCacheSection>();
	}
};
static_assert(alignof(UMovieSceneBaseCacheSection) == 0x000008, "Wrong alignment on UMovieSceneBaseCacheSection");
static_assert(sizeof(UMovieSceneBaseCacheSection) == 0x0000F8, "Wrong size on UMovieSceneBaseCacheSection");

// Class MovieSceneTracks.MovieSceneByteSection
// 0x0110 (0x0200 - 0x00F0)
class UMovieSceneByteSection final : public UMovieSceneSection
{
public:
	uint8                                         Pad_F0[0x8];                                       // 0x00F0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneByteChannel                 ByteCurve;                                         // 0x00F8(0x0108)(NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneByteSection">();
	}
	static class UMovieSceneByteSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneByteSection>();
	}
};
static_assert(alignof(UMovieSceneByteSection) == 0x000008, "Wrong alignment on UMovieSceneByteSection");
static_assert(sizeof(UMovieSceneByteSection) == 0x000200, "Wrong size on UMovieSceneByteSection");
static_assert(offsetof(UMovieSceneByteSection, ByteCurve) == 0x0000F8, "Member 'UMovieSceneByteSection::ByteCurve' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneCameraCutSection
// 0x00B0 (0x01A0 - 0x00F0)
class UMovieSceneCameraCutSection final : public UMovieSceneSection
{
public:
	uint8                                         Pad_F0[0x8];                                       // 0x00F0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bLockPreviousCamera;                               // 0x00F8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  CameraGuid;                                        // 0x00FC(0x0010)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FMovieSceneObjectBindingID             CameraBindingID;                                   // 0x010C(0x0018)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_124[0xC];                                      // 0x0124(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InitialCameraCutTransform;                         // 0x0130(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bHasInitialCameraCutTransform;                     // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_191[0xF];                                      // 0x0191(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetCameraBindingID(const struct FMovieSceneObjectBindingID& InCameraBindingID);

	const struct FMovieSceneObjectBindingID GetCameraBindingID() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneCameraCutSection">();
	}
	static class UMovieSceneCameraCutSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneCameraCutSection>();
	}
};
static_assert(alignof(UMovieSceneCameraCutSection) == 0x000010, "Wrong alignment on UMovieSceneCameraCutSection");
static_assert(sizeof(UMovieSceneCameraCutSection) == 0x0001A0, "Wrong size on UMovieSceneCameraCutSection");
static_assert(offsetof(UMovieSceneCameraCutSection, bLockPreviousCamera) == 0x0000F8, "Member 'UMovieSceneCameraCutSection::bLockPreviousCamera' has a wrong offset!");
static_assert(offsetof(UMovieSceneCameraCutSection, CameraGuid) == 0x0000FC, "Member 'UMovieSceneCameraCutSection::CameraGuid' has a wrong offset!");
static_assert(offsetof(UMovieSceneCameraCutSection, CameraBindingID) == 0x00010C, "Member 'UMovieSceneCameraCutSection::CameraBindingID' has a wrong offset!");
static_assert(offsetof(UMovieSceneCameraCutSection, InitialCameraCutTransform) == 0x000130, "Member 'UMovieSceneCameraCutSection::InitialCameraCutTransform' has a wrong offset!");
static_assert(offsetof(UMovieSceneCameraCutSection, bHasInitialCameraCutTransform) == 0x000190, "Member 'UMovieSceneCameraCutSection::bHasInitialCameraCutTransform' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneCameraShakeSection
// 0x0058 (0x0148 - 0x00F0)
class UMovieSceneCameraShakeSection final : public UMovieSceneSection
{
public:
	uint8                                         Pad_F0[0x8];                                       // 0x00F0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneCameraShakeSectionData      ShakeData;                                         // 0x00F8(0x0028)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UCameraShakeBase>           ShakeClass;                                        // 0x0120(0x0008)(ZeroConstructor, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayScale;                                         // 0x0128(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECameraShakePlaySpace                         PlaySpace;                                         // 0x012C(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12D[0x3];                                      // 0x012D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               UserDefinedPlaySpace;                              // 0x0130(0x0018)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneCameraShakeSection">();
	}
	static class UMovieSceneCameraShakeSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneCameraShakeSection>();
	}
};
static_assert(alignof(UMovieSceneCameraShakeSection) == 0x000008, "Wrong alignment on UMovieSceneCameraShakeSection");
static_assert(sizeof(UMovieSceneCameraShakeSection) == 0x000148, "Wrong size on UMovieSceneCameraShakeSection");
static_assert(offsetof(UMovieSceneCameraShakeSection, ShakeData) == 0x0000F8, "Member 'UMovieSceneCameraShakeSection::ShakeData' has a wrong offset!");
static_assert(offsetof(UMovieSceneCameraShakeSection, ShakeClass) == 0x000120, "Member 'UMovieSceneCameraShakeSection::ShakeClass' has a wrong offset!");
static_assert(offsetof(UMovieSceneCameraShakeSection, PlayScale) == 0x000128, "Member 'UMovieSceneCameraShakeSection::PlayScale' has a wrong offset!");
static_assert(offsetof(UMovieSceneCameraShakeSection, PlaySpace) == 0x00012C, "Member 'UMovieSceneCameraShakeSection::PlaySpace' has a wrong offset!");
static_assert(offsetof(UMovieSceneCameraShakeSection, UserDefinedPlaySpace) == 0x000130, "Member 'UMovieSceneCameraShakeSection::UserDefinedPlaySpace' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneCameraShakeSourceShakeSection
// 0x0030 (0x0120 - 0x00F0)
class UMovieSceneCameraShakeSourceShakeSection final : public UMovieSceneSection
{
public:
	uint8                                         Pad_F0[0x8];                                       // 0x00F0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneCameraShakeSectionData      ShakeData;                                         // 0x00F8(0x0028)(Edit, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneCameraShakeSourceShakeSection">();
	}
	static class UMovieSceneCameraShakeSourceShakeSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneCameraShakeSourceShakeSection>();
	}
};
static_assert(alignof(UMovieSceneCameraShakeSourceShakeSection) == 0x000008, "Wrong alignment on UMovieSceneCameraShakeSourceShakeSection");
static_assert(sizeof(UMovieSceneCameraShakeSourceShakeSection) == 0x000120, "Wrong size on UMovieSceneCameraShakeSourceShakeSection");
static_assert(offsetof(UMovieSceneCameraShakeSourceShakeSection, ShakeData) == 0x0000F8, "Member 'UMovieSceneCameraShakeSourceShakeSection::ShakeData' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneCameraShakeSourceTriggerSection
// 0x0100 (0x01F0 - 0x00F0)
class UMovieSceneCameraShakeSourceTriggerSection final : public UMovieSceneSection
{
public:
	uint8                                         Pad_F0[0x8];                                       // 0x00F0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneCameraShakeSourceTriggerChannel Channel;                                           // 0x00F8(0x00F8)(NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneCameraShakeSourceTriggerSection">();
	}
	static class UMovieSceneCameraShakeSourceTriggerSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneCameraShakeSourceTriggerSection>();
	}
};
static_assert(alignof(UMovieSceneCameraShakeSourceTriggerSection) == 0x000008, "Wrong alignment on UMovieSceneCameraShakeSourceTriggerSection");
static_assert(sizeof(UMovieSceneCameraShakeSourceTriggerSection) == 0x0001F0, "Wrong size on UMovieSceneCameraShakeSourceTriggerSection");
static_assert(offsetof(UMovieSceneCameraShakeSourceTriggerSection, Channel) == 0x0000F8, "Member 'UMovieSceneCameraShakeSourceTriggerSection::Channel' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneCinematicShotSection
// 0x0020 (0x0158 - 0x0138)
class UMovieSceneCinematicShotSection final : public UMovieSceneSubSection
{
public:
	class FString                                 ShotDisplayName;                                   // 0x0138(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FText                                   DisplayName;                                       // 0x0148(0x0010)(Deprecated, NativeAccessSpecifierPrivate)

public:
	void SetShotDisplayName(const class FString& InShotDisplayName);

	class FString GetShotDisplayName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneCinematicShotSection">();
	}
	static class UMovieSceneCinematicShotSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneCinematicShotSection>();
	}
};
static_assert(alignof(UMovieSceneCinematicShotSection) == 0x000008, "Wrong alignment on UMovieSceneCinematicShotSection");
static_assert(sizeof(UMovieSceneCinematicShotSection) == 0x000158, "Wrong size on UMovieSceneCinematicShotSection");
static_assert(offsetof(UMovieSceneCinematicShotSection, ShotDisplayName) == 0x000138, "Member 'UMovieSceneCinematicShotSection::ShotDisplayName' has a wrong offset!");
static_assert(offsetof(UMovieSceneCinematicShotSection, DisplayName) == 0x000148, "Member 'UMovieSceneCinematicShotSection::DisplayName' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneColorSection
// 0x0448 (0x0538 - 0x00F0)
class UMovieSceneColorSection final : public UMovieSceneSection
{
public:
	uint8                                         Pad_F0[0x8];                                       // 0x00F0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneFloatChannel                RedCurve;                                          // 0x00F8(0x0110)(NativeAccessSpecifierPrivate)
	struct FMovieSceneFloatChannel                GreenCurve;                                        // 0x0208(0x0110)(NativeAccessSpecifierPrivate)
	struct FMovieSceneFloatChannel                BlueCurve;                                         // 0x0318(0x0110)(NativeAccessSpecifierPrivate)
	struct FMovieSceneFloatChannel                AlphaCurve;                                        // 0x0428(0x0110)(NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneColorSection">();
	}
	static class UMovieSceneColorSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneColorSection>();
	}
};
static_assert(alignof(UMovieSceneColorSection) == 0x000008, "Wrong alignment on UMovieSceneColorSection");
static_assert(sizeof(UMovieSceneColorSection) == 0x000538, "Wrong size on UMovieSceneColorSection");
static_assert(offsetof(UMovieSceneColorSection, RedCurve) == 0x0000F8, "Member 'UMovieSceneColorSection::RedCurve' has a wrong offset!");
static_assert(offsetof(UMovieSceneColorSection, GreenCurve) == 0x000208, "Member 'UMovieSceneColorSection::GreenCurve' has a wrong offset!");
static_assert(offsetof(UMovieSceneColorSection, BlueCurve) == 0x000318, "Member 'UMovieSceneColorSection::BlueCurve' has a wrong offset!");
static_assert(offsetof(UMovieSceneColorSection, AlphaCurve) == 0x000428, "Member 'UMovieSceneColorSection::AlphaCurve' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneComponentMaterialParameterSection
// 0x0028 (0x0118 - 0x00F0)
class UMovieSceneComponentMaterialParameterSection final : public UMovieSceneSection
{
public:
	uint8                                         Pad_F0[0x8];                                       // 0x00F0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FScalarMaterialParameterInfoAndCurve> ScalarParameterInfosAndCurves;                     // 0x00F8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FColorMaterialParameterInfoAndCurves> ColorParameterInfosAndCurves;                      // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	void AddColorParameterKey(const struct FMaterialParameterInfo& InParameterInfo, const struct FFrameNumber& InTime, const struct FLinearColor& InValue, const class FString& InLayerName, const class FString& InAssetName);
	void AddScalarParameterKey(const struct FMaterialParameterInfo& InParameterInfo, const struct FFrameNumber& InTime, float InValue, const class FString& InLayerName, const class FString& InAssetName);
	bool RemoveColorParameter(const struct FMaterialParameterInfo& InParameterInfo);
	bool RemoveScalarParameter(const struct FMaterialParameterInfo& InParameterInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneComponentMaterialParameterSection">();
	}
	static class UMovieSceneComponentMaterialParameterSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneComponentMaterialParameterSection>();
	}
};
static_assert(alignof(UMovieSceneComponentMaterialParameterSection) == 0x000008, "Wrong alignment on UMovieSceneComponentMaterialParameterSection");
static_assert(sizeof(UMovieSceneComponentMaterialParameterSection) == 0x000118, "Wrong size on UMovieSceneComponentMaterialParameterSection");
static_assert(offsetof(UMovieSceneComponentMaterialParameterSection, ScalarParameterInfosAndCurves) == 0x0000F8, "Member 'UMovieSceneComponentMaterialParameterSection::ScalarParameterInfosAndCurves' has a wrong offset!");
static_assert(offsetof(UMovieSceneComponentMaterialParameterSection, ColorParameterInfosAndCurves) == 0x000108, "Member 'UMovieSceneComponentMaterialParameterSection::ColorParameterInfosAndCurves' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneConstrainedSection
// 0x0000 (0x0028 - 0x0028)
class IMovieSceneConstrainedSection final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneConstrainedSection">();
	}
	static class IMovieSceneConstrainedSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMovieSceneConstrainedSection>();
	}
};
static_assert(alignof(IMovieSceneConstrainedSection) == 0x000008, "Wrong alignment on IMovieSceneConstrainedSection");
static_assert(sizeof(IMovieSceneConstrainedSection) == 0x000028, "Wrong size on IMovieSceneConstrainedSection");

// Class MovieSceneTracks.MovieSceneParameterSection
// 0x0068 (0x0158 - 0x00F0)
class UMovieSceneParameterSection : public UMovieSceneSection
{
public:
	uint8                                         Pad_F0[0x8];                                       // 0x00F0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBoolParameterNameAndCurve>     BoolParameterNamesAndCurves;                       // 0x00F8(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FScalarParameterNameAndCurve>   ScalarParameterNamesAndCurves;                     // 0x0108(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FVector2DParameterNameAndCurves> Vector2DParameterNamesAndCurves;                   // 0x0118(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FVectorParameterNameAndCurves>  VectorParameterNamesAndCurves;                     // 0x0128(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FColorParameterNameAndCurves>   ColorParameterNamesAndCurves;                      // 0x0138(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FTransformParameterNameAndCurves> TransformParameterNamesAndCurves;                  // 0x0148(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	void AddBoolParameterKey(class FName InParameterName, const struct FFrameNumber& InTime, bool InValue);
	void AddColorParameterKey(class FName InParameterName, const struct FFrameNumber& InTime, const struct FLinearColor& InValue);
	void AddScalarParameterKey(class FName InParameterName, const struct FFrameNumber& InTime, float InValue);
	void AddTransformParameterKey(class FName InParameterName, const struct FFrameNumber& InTime, const struct FTransform& InValue);
	void AddVector2DParameterKey(class FName InParameterName, const struct FFrameNumber& InTime, const struct FVector2D& InValue);
	void AddVectorParameterKey(class FName InParameterName, const struct FFrameNumber& InTime, const struct FVector& InValue);
	bool RemoveBoolParameter(class FName InParameterName);
	bool RemoveColorParameter(class FName InParameterName);
	bool RemoveScalarParameter(class FName InParameterName);
	bool RemoveTransformParameter(class FName InParameterName);
	bool RemoveVector2DParameter(class FName InParameterName);
	bool RemoveVectorParameter(class FName InParameterName);

	void GetParameterNames(TSet<class FName>* ParameterNames) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneParameterSection">();
	}
	static class UMovieSceneParameterSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneParameterSection>();
	}
};
static_assert(alignof(UMovieSceneParameterSection) == 0x000008, "Wrong alignment on UMovieSceneParameterSection");
static_assert(sizeof(UMovieSceneParameterSection) == 0x000158, "Wrong size on UMovieSceneParameterSection");
static_assert(offsetof(UMovieSceneParameterSection, BoolParameterNamesAndCurves) == 0x0000F8, "Member 'UMovieSceneParameterSection::BoolParameterNamesAndCurves' has a wrong offset!");
static_assert(offsetof(UMovieSceneParameterSection, ScalarParameterNamesAndCurves) == 0x000108, "Member 'UMovieSceneParameterSection::ScalarParameterNamesAndCurves' has a wrong offset!");
static_assert(offsetof(UMovieSceneParameterSection, Vector2DParameterNamesAndCurves) == 0x000118, "Member 'UMovieSceneParameterSection::Vector2DParameterNamesAndCurves' has a wrong offset!");
static_assert(offsetof(UMovieSceneParameterSection, VectorParameterNamesAndCurves) == 0x000128, "Member 'UMovieSceneParameterSection::VectorParameterNamesAndCurves' has a wrong offset!");
static_assert(offsetof(UMovieSceneParameterSection, ColorParameterNamesAndCurves) == 0x000138, "Member 'UMovieSceneParameterSection::ColorParameterNamesAndCurves' has a wrong offset!");
static_assert(offsetof(UMovieSceneParameterSection, TransformParameterNamesAndCurves) == 0x000148, "Member 'UMovieSceneParameterSection::TransformParameterNamesAndCurves' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneCustomPrimitiveDataSection
// 0x0000 (0x0158 - 0x0158)
class UMovieSceneCustomPrimitiveDataSection final : public UMovieSceneParameterSection
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneCustomPrimitiveDataSection">();
	}
	static class UMovieSceneCustomPrimitiveDataSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneCustomPrimitiveDataSection>();
	}
};
static_assert(alignof(UMovieSceneCustomPrimitiveDataSection) == 0x000008, "Wrong alignment on UMovieSceneCustomPrimitiveDataSection");
static_assert(sizeof(UMovieSceneCustomPrimitiveDataSection) == 0x000158, "Wrong size on UMovieSceneCustomPrimitiveDataSection");

// Class MovieSceneTracks.MovieSceneCVarSection
// 0x0068 (0x0158 - 0x00F0)
class UMovieSceneCVarSection final : public UMovieSceneSection
{
public:
	uint8                                         Pad_F0[0x8];                                       // 0x00F0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMovieSceneConsoleVariableCollection> ConsoleVariableCollections;                        // 0x00F8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FMovieSceneCVarOverrides               ConsoleVariables;                                  // 0x0108(0x0050)(Edit, NativeAccessSpecifierPublic)

public:
	void SetFromString(const class FString& InString);

	class FString GetString() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneCVarSection">();
	}
	static class UMovieSceneCVarSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneCVarSection>();
	}
};
static_assert(alignof(UMovieSceneCVarSection) == 0x000008, "Wrong alignment on UMovieSceneCVarSection");
static_assert(sizeof(UMovieSceneCVarSection) == 0x000158, "Wrong size on UMovieSceneCVarSection");
static_assert(offsetof(UMovieSceneCVarSection, ConsoleVariableCollections) == 0x0000F8, "Member 'UMovieSceneCVarSection::ConsoleVariableCollections' has a wrong offset!");
static_assert(offsetof(UMovieSceneCVarSection, ConsoleVariables) == 0x000108, "Member 'UMovieSceneCVarSection::ConsoleVariables' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneDataLayerSection
// 0x0030 (0x0120 - 0x00F0)
class UMovieSceneDataLayerSection final : public UMovieSceneSection
{
public:
	uint8                                         Pad_F0[0x8];                                       // 0x00F0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FActorDataLayer>                DataLayers;                                        // 0x00F8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class UDataLayerAsset*>                DataLayerAssets;                                   // 0x0108(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	EDataLayerRuntimeState                        DesiredState;                                      // 0x0118(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EDataLayerRuntimeState                        PrerollState;                                      // 0x0119(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bFlushOnActivated;                                 // 0x011A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bFlushOnUnload;                                    // 0x011B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bPerformGCOnUnload;                                // 0x011C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_11D[0x3];                                      // 0x011D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetDataLayerAssets(const TArray<class UDataLayerAsset*>& InDataLayerAssets);
	void SetDataLayers(const TArray<struct FActorDataLayer>& InDataLayers);
	void SetDesiredState(EDataLayerRuntimeState InDesiredState);
	void SetFlushOnActivated(bool bFlushOnActivated_0);
	void SetFlushOnUnload(bool bFlushOnUnload_0);
	void SetPerformGCOnUnload(bool bPerformGCOnUnload_0);
	void SetPrerollState(EDataLayerRuntimeState InPrerollState);

	const TArray<class UDataLayerAsset*> GetDataLayerAssets() const;
	const TArray<struct FActorDataLayer> GetDataLayers() const;
	EDataLayerRuntimeState GetDesiredState() const;
	bool GetFlushOnActivated() const;
	bool GetFlushOnUnload() const;
	bool GetPerformGCOnUnload() const;
	EDataLayerRuntimeState GetPrerollState() const;
	bool HasPreRoll() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneDataLayerSection">();
	}
	static class UMovieSceneDataLayerSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneDataLayerSection>();
	}
};
static_assert(alignof(UMovieSceneDataLayerSection) == 0x000008, "Wrong alignment on UMovieSceneDataLayerSection");
static_assert(sizeof(UMovieSceneDataLayerSection) == 0x000120, "Wrong size on UMovieSceneDataLayerSection");
static_assert(offsetof(UMovieSceneDataLayerSection, DataLayers) == 0x0000F8, "Member 'UMovieSceneDataLayerSection::DataLayers' has a wrong offset!");
static_assert(offsetof(UMovieSceneDataLayerSection, DataLayerAssets) == 0x000108, "Member 'UMovieSceneDataLayerSection::DataLayerAssets' has a wrong offset!");
static_assert(offsetof(UMovieSceneDataLayerSection, DesiredState) == 0x000118, "Member 'UMovieSceneDataLayerSection::DesiredState' has a wrong offset!");
static_assert(offsetof(UMovieSceneDataLayerSection, PrerollState) == 0x000119, "Member 'UMovieSceneDataLayerSection::PrerollState' has a wrong offset!");
static_assert(offsetof(UMovieSceneDataLayerSection, bFlushOnActivated) == 0x00011A, "Member 'UMovieSceneDataLayerSection::bFlushOnActivated' has a wrong offset!");
static_assert(offsetof(UMovieSceneDataLayerSection, bFlushOnUnload) == 0x00011B, "Member 'UMovieSceneDataLayerSection::bFlushOnUnload' has a wrong offset!");
static_assert(offsetof(UMovieSceneDataLayerSection, bPerformGCOnUnload) == 0x00011C, "Member 'UMovieSceneDataLayerSection::bPerformGCOnUnload' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneDoubleSection
// 0x0120 (0x0210 - 0x00F0)
class UMovieSceneDoubleSection final : public UMovieSceneSection
{
public:
	uint8                                         Pad_F0[0x8];                                       // 0x00F0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneDoubleChannel               DoubleCurve;                                       // 0x00F8(0x0118)(Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneDoubleSection">();
	}
	static class UMovieSceneDoubleSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneDoubleSection>();
	}
};
static_assert(alignof(UMovieSceneDoubleSection) == 0x000008, "Wrong alignment on UMovieSceneDoubleSection");
static_assert(sizeof(UMovieSceneDoubleSection) == 0x000210, "Wrong size on UMovieSceneDoubleSection");
static_assert(offsetof(UMovieSceneDoubleSection, DoubleCurve) == 0x0000F8, "Member 'UMovieSceneDoubleSection::DoubleCurve' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneEnumSection
// 0x0110 (0x0200 - 0x00F0)
class UMovieSceneEnumSection final : public UMovieSceneSection
{
public:
	uint8                                         Pad_F0[0x8];                                       // 0x00F0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneByteChannel                 EnumCurve;                                         // 0x00F8(0x0108)(NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneEnumSection">();
	}
	static class UMovieSceneEnumSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneEnumSection>();
	}
};
static_assert(alignof(UMovieSceneEnumSection) == 0x000008, "Wrong alignment on UMovieSceneEnumSection");
static_assert(sizeof(UMovieSceneEnumSection) == 0x000200, "Wrong size on UMovieSceneEnumSection");
static_assert(offsetof(UMovieSceneEnumSection, EnumCurve) == 0x0000F8, "Member 'UMovieSceneEnumSection::EnumCurve' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneEventSectionBase
// 0x0000 (0x00F0 - 0x00F0)
class UMovieSceneEventSectionBase : public UMovieSceneSection
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneEventSectionBase">();
	}
	static class UMovieSceneEventSectionBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneEventSectionBase>();
	}
};
static_assert(alignof(UMovieSceneEventSectionBase) == 0x000008, "Wrong alignment on UMovieSceneEventSectionBase");
static_assert(sizeof(UMovieSceneEventSectionBase) == 0x0000F0, "Wrong size on UMovieSceneEventSectionBase");

// Class MovieSceneTracks.MovieSceneEventRepeaterSection
// 0x0030 (0x0120 - 0x00F0)
class UMovieSceneEventRepeaterSection final : public UMovieSceneEventSectionBase
{
public:
	uint8                                         Pad_F0[0x8];                                       // 0x00F0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneEvent                       Event;                                             // 0x00F8(0x0028)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneEventRepeaterSection">();
	}
	static class UMovieSceneEventRepeaterSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneEventRepeaterSection>();
	}
};
static_assert(alignof(UMovieSceneEventRepeaterSection) == 0x000008, "Wrong alignment on UMovieSceneEventRepeaterSection");
static_assert(sizeof(UMovieSceneEventRepeaterSection) == 0x000120, "Wrong size on UMovieSceneEventRepeaterSection");
static_assert(offsetof(UMovieSceneEventRepeaterSection, Event) == 0x0000F8, "Member 'UMovieSceneEventRepeaterSection::Event' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneEventSection
// 0x0170 (0x0260 - 0x00F0)
class UMovieSceneEventSection final : public UMovieSceneSection
{
public:
	struct FNameCurve                             Events;                                            // 0x00F0(0x0078)(Deprecated, NativeAccessSpecifierPrivate)
	struct FMovieSceneEventSectionData            EventData;                                         // 0x0168(0x00F8)(NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneEventSection">();
	}
	static class UMovieSceneEventSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneEventSection>();
	}
};
static_assert(alignof(UMovieSceneEventSection) == 0x000008, "Wrong alignment on UMovieSceneEventSection");
static_assert(sizeof(UMovieSceneEventSection) == 0x000260, "Wrong size on UMovieSceneEventSection");
static_assert(offsetof(UMovieSceneEventSection, Events) == 0x0000F0, "Member 'UMovieSceneEventSection::Events' has a wrong offset!");
static_assert(offsetof(UMovieSceneEventSection, EventData) == 0x000168, "Member 'UMovieSceneEventSection::EventData' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneEventTriggerSection
// 0x0100 (0x01F0 - 0x00F0)
class UMovieSceneEventTriggerSection final : public UMovieSceneEventSectionBase
{
public:
	uint8                                         Pad_F0[0x8];                                       // 0x00F0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneEventChannel                EventChannel;                                      // 0x00F8(0x00F8)(NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneEventTriggerSection">();
	}
	static class UMovieSceneEventTriggerSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneEventTriggerSection>();
	}
};
static_assert(alignof(UMovieSceneEventTriggerSection) == 0x000008, "Wrong alignment on UMovieSceneEventTriggerSection");
static_assert(sizeof(UMovieSceneEventTriggerSection) == 0x0001F0, "Wrong size on UMovieSceneEventTriggerSection");
static_assert(offsetof(UMovieSceneEventTriggerSection, EventChannel) == 0x0000F8, "Member 'UMovieSceneEventTriggerSection::EventChannel' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneFadeSection
// 0x0130 (0x0220 - 0x00F0)
class UMovieSceneFadeSection final : public UMovieSceneSection
{
public:
	uint8                                         Pad_F0[0x8];                                       // 0x00F0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneFloatChannel                FloatCurve;                                        // 0x00F8(0x0110)(NativeAccessSpecifierPublic)
	struct FLinearColor                           FadeColor;                                         // 0x0208(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bFadeAudio : 1;                                    // 0x0218(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_219[0x7];                                      // 0x0219(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneFadeSection">();
	}
	static class UMovieSceneFadeSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneFadeSection>();
	}
};
static_assert(alignof(UMovieSceneFadeSection) == 0x000008, "Wrong alignment on UMovieSceneFadeSection");
static_assert(sizeof(UMovieSceneFadeSection) == 0x000220, "Wrong size on UMovieSceneFadeSection");
static_assert(offsetof(UMovieSceneFadeSection, FloatCurve) == 0x0000F8, "Member 'UMovieSceneFadeSection::FloatCurve' has a wrong offset!");
static_assert(offsetof(UMovieSceneFadeSection, FadeColor) == 0x000208, "Member 'UMovieSceneFadeSection::FadeColor' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneFloatSection
// 0x0128 (0x0218 - 0x00F0)
class UMovieSceneFloatSection final : public UMovieSceneSection
{
public:
	uint8                                         Pad_F0[0x10];                                      // 0x00F0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneFloatChannel                FloatCurve;                                        // 0x0100(0x0110)(Protected, NativeAccessSpecifierProtected)
	class UMovieSceneSectionChannelOverrideRegistry* OverrideRegistry;                                  // 0x0210(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneFloatSection">();
	}
	static class UMovieSceneFloatSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneFloatSection>();
	}
};
static_assert(alignof(UMovieSceneFloatSection) == 0x000008, "Wrong alignment on UMovieSceneFloatSection");
static_assert(sizeof(UMovieSceneFloatSection) == 0x000218, "Wrong size on UMovieSceneFloatSection");
static_assert(offsetof(UMovieSceneFloatSection, FloatCurve) == 0x000100, "Member 'UMovieSceneFloatSection::FloatCurve' has a wrong offset!");
static_assert(offsetof(UMovieSceneFloatSection, OverrideRegistry) == 0x000210, "Member 'UMovieSceneFloatSection::OverrideRegistry' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneIntegerSection
// 0x0110 (0x0200 - 0x00F0)
class UMovieSceneIntegerSection final : public UMovieSceneSection
{
public:
	uint8                                         Pad_F0[0x8];                                       // 0x00F0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneIntegerChannel              IntegerCurve;                                      // 0x00F8(0x0108)(NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneIntegerSection">();
	}
	static class UMovieSceneIntegerSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneIntegerSection>();
	}
};
static_assert(alignof(UMovieSceneIntegerSection) == 0x000008, "Wrong alignment on UMovieSceneIntegerSection");
static_assert(sizeof(UMovieSceneIntegerSection) == 0x000200, "Wrong size on UMovieSceneIntegerSection");
static_assert(offsetof(UMovieSceneIntegerSection, IntegerCurve) == 0x0000F8, "Member 'UMovieSceneIntegerSection::IntegerCurve' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneLevelVisibilitySection
// 0x0020 (0x0110 - 0x00F0)
class UMovieSceneLevelVisibilitySection final : public UMovieSceneSection
{
public:
	uint8                                         Pad_F0[0x8];                                       // 0x00F0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	ELevelVisibility                              Visibility;                                        // 0x00F8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           LevelNames;                                        // 0x0100(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	void SetLevelNames(const TArray<class FName>& InLevelNames);
	void SetVisibility(ELevelVisibility InVisibility);

	const TArray<class FName> GetLevelNames() const;
	ELevelVisibility GetVisibility() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneLevelVisibilitySection">();
	}
	static class UMovieSceneLevelVisibilitySection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneLevelVisibilitySection>();
	}
};
static_assert(alignof(UMovieSceneLevelVisibilitySection) == 0x000008, "Wrong alignment on UMovieSceneLevelVisibilitySection");
static_assert(sizeof(UMovieSceneLevelVisibilitySection) == 0x000110, "Wrong size on UMovieSceneLevelVisibilitySection");
static_assert(offsetof(UMovieSceneLevelVisibilitySection, Visibility) == 0x0000F8, "Member 'UMovieSceneLevelVisibilitySection::Visibility' has a wrong offset!");
static_assert(offsetof(UMovieSceneLevelVisibilitySection, LevelNames) == 0x000100, "Member 'UMovieSceneLevelVisibilitySection::LevelNames' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneObjectPropertySection
// 0x0138 (0x0228 - 0x00F0)
class UMovieSceneObjectPropertySection final : public UMovieSceneSection
{
public:
	uint8                                         Pad_F0[0x8];                                       // 0x00F0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneObjectPathChannel           ObjectChannel;                                     // 0x00F8(0x0130)(NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneObjectPropertySection">();
	}
	static class UMovieSceneObjectPropertySection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneObjectPropertySection>();
	}
};
static_assert(alignof(UMovieSceneObjectPropertySection) == 0x000008, "Wrong alignment on UMovieSceneObjectPropertySection");
static_assert(sizeof(UMovieSceneObjectPropertySection) == 0x000228, "Wrong size on UMovieSceneObjectPropertySection");
static_assert(offsetof(UMovieSceneObjectPropertySection, ObjectChannel) == 0x0000F8, "Member 'UMovieSceneObjectPropertySection::ObjectChannel' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneParameterSectionExtender
// 0x0000 (0x0028 - 0x0028)
class IMovieSceneParameterSectionExtender final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneParameterSectionExtender">();
	}
	static class IMovieSceneParameterSectionExtender* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMovieSceneParameterSectionExtender>();
	}
};
static_assert(alignof(IMovieSceneParameterSectionExtender) == 0x000008, "Wrong alignment on IMovieSceneParameterSectionExtender");
static_assert(sizeof(IMovieSceneParameterSectionExtender) == 0x000028, "Wrong size on IMovieSceneParameterSectionExtender");

// Class MovieSceneTracks.MovieSceneParticleSection
// 0x0108 (0x01F8 - 0x00F0)
class UMovieSceneParticleSection final : public UMovieSceneSection
{
public:
	struct FMovieSceneParticleChannel             ParticleKeys;                                      // 0x00F0(0x0108)(NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneParticleSection">();
	}
	static class UMovieSceneParticleSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneParticleSection>();
	}
};
static_assert(alignof(UMovieSceneParticleSection) == 0x000008, "Wrong alignment on UMovieSceneParticleSection");
static_assert(sizeof(UMovieSceneParticleSection) == 0x0001F8, "Wrong size on UMovieSceneParticleSection");
static_assert(offsetof(UMovieSceneParticleSection, ParticleKeys) == 0x0000F0, "Member 'UMovieSceneParticleSection::ParticleKeys' has a wrong offset!");

// Class MovieSceneTracks.MovieScenePrimitiveMaterialSection
// 0x0138 (0x0228 - 0x00F0)
class UMovieScenePrimitiveMaterialSection final : public UMovieSceneSection
{
public:
	uint8                                         Pad_F0[0x8];                                       // 0x00F0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneObjectPathChannel           MaterialChannel;                                   // 0x00F8(0x0130)(NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScenePrimitiveMaterialSection">();
	}
	static class UMovieScenePrimitiveMaterialSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScenePrimitiveMaterialSection>();
	}
};
static_assert(alignof(UMovieScenePrimitiveMaterialSection) == 0x000008, "Wrong alignment on UMovieScenePrimitiveMaterialSection");
static_assert(sizeof(UMovieScenePrimitiveMaterialSection) == 0x000228, "Wrong size on UMovieScenePrimitiveMaterialSection");
static_assert(offsetof(UMovieScenePrimitiveMaterialSection, MaterialChannel) == 0x0000F8, "Member 'UMovieScenePrimitiveMaterialSection::MaterialChannel' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneSkeletalAnimationSection
// 0x0270 (0x0360 - 0x00F0)
class alignas(0x10) UMovieSceneSkeletalAnimationSection final : public UMovieSceneSection
{
public:
	uint8                                         Pad_F0[0x8];                                       // 0x00F0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneSkeletalAnimationParams     Params_0;                                          // 0x00F8(0x0150)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UAnimSequence*                          AnimSequence;                                      // 0x0248(0x0008)(ZeroConstructor, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAnimSequenceBase*                      Animation;                                         // 0x0250(0x0008)(ZeroConstructor, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         StartOffset;                                       // 0x0258(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EndOffset;                                         // 0x025C(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PlayRate;                                          // 0x0260(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bReverse : 1;                                      // 0x0264(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_265[0x3];                                      // 0x0265(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SlotName;                                          // 0x0268(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                StartLocationOffset;                               // 0x0270(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               StartRotationOffset;                               // 0x0288(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bMatchWithPrevious;                                // 0x02A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A1[0x3];                                      // 0x02A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MatchedBoneName;                                   // 0x02A4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AC[0x4];                                      // 0x02AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                MatchedLocationOffset;                             // 0x02B0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               MatchedRotationOffset;                             // 0x02C8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bMatchTranslation;                                 // 0x02E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchIncludeZHeight;                              // 0x02E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchRotationYaw;                                 // 0x02E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchRotationPitch;                               // 0x02E3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchRotationRoll;                                // 0x02E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E5[0x7B];                                     // 0x02E5(0x007B)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneSkeletalAnimationSection">();
	}
	static class UMovieSceneSkeletalAnimationSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneSkeletalAnimationSection>();
	}
};
static_assert(alignof(UMovieSceneSkeletalAnimationSection) == 0x000010, "Wrong alignment on UMovieSceneSkeletalAnimationSection");
static_assert(sizeof(UMovieSceneSkeletalAnimationSection) == 0x000360, "Wrong size on UMovieSceneSkeletalAnimationSection");
static_assert(offsetof(UMovieSceneSkeletalAnimationSection, Params_0) == 0x0000F8, "Member 'UMovieSceneSkeletalAnimationSection::Params_0' has a wrong offset!");
static_assert(offsetof(UMovieSceneSkeletalAnimationSection, AnimSequence) == 0x000248, "Member 'UMovieSceneSkeletalAnimationSection::AnimSequence' has a wrong offset!");
static_assert(offsetof(UMovieSceneSkeletalAnimationSection, Animation) == 0x000250, "Member 'UMovieSceneSkeletalAnimationSection::Animation' has a wrong offset!");
static_assert(offsetof(UMovieSceneSkeletalAnimationSection, StartOffset) == 0x000258, "Member 'UMovieSceneSkeletalAnimationSection::StartOffset' has a wrong offset!");
static_assert(offsetof(UMovieSceneSkeletalAnimationSection, EndOffset) == 0x00025C, "Member 'UMovieSceneSkeletalAnimationSection::EndOffset' has a wrong offset!");
static_assert(offsetof(UMovieSceneSkeletalAnimationSection, PlayRate) == 0x000260, "Member 'UMovieSceneSkeletalAnimationSection::PlayRate' has a wrong offset!");
static_assert(offsetof(UMovieSceneSkeletalAnimationSection, SlotName) == 0x000268, "Member 'UMovieSceneSkeletalAnimationSection::SlotName' has a wrong offset!");
static_assert(offsetof(UMovieSceneSkeletalAnimationSection, StartLocationOffset) == 0x000270, "Member 'UMovieSceneSkeletalAnimationSection::StartLocationOffset' has a wrong offset!");
static_assert(offsetof(UMovieSceneSkeletalAnimationSection, StartRotationOffset) == 0x000288, "Member 'UMovieSceneSkeletalAnimationSection::StartRotationOffset' has a wrong offset!");
static_assert(offsetof(UMovieSceneSkeletalAnimationSection, bMatchWithPrevious) == 0x0002A0, "Member 'UMovieSceneSkeletalAnimationSection::bMatchWithPrevious' has a wrong offset!");
static_assert(offsetof(UMovieSceneSkeletalAnimationSection, MatchedBoneName) == 0x0002A4, "Member 'UMovieSceneSkeletalAnimationSection::MatchedBoneName' has a wrong offset!");
static_assert(offsetof(UMovieSceneSkeletalAnimationSection, MatchedLocationOffset) == 0x0002B0, "Member 'UMovieSceneSkeletalAnimationSection::MatchedLocationOffset' has a wrong offset!");
static_assert(offsetof(UMovieSceneSkeletalAnimationSection, MatchedRotationOffset) == 0x0002C8, "Member 'UMovieSceneSkeletalAnimationSection::MatchedRotationOffset' has a wrong offset!");
static_assert(offsetof(UMovieSceneSkeletalAnimationSection, bMatchTranslation) == 0x0002E0, "Member 'UMovieSceneSkeletalAnimationSection::bMatchTranslation' has a wrong offset!");
static_assert(offsetof(UMovieSceneSkeletalAnimationSection, bMatchIncludeZHeight) == 0x0002E1, "Member 'UMovieSceneSkeletalAnimationSection::bMatchIncludeZHeight' has a wrong offset!");
static_assert(offsetof(UMovieSceneSkeletalAnimationSection, bMatchRotationYaw) == 0x0002E2, "Member 'UMovieSceneSkeletalAnimationSection::bMatchRotationYaw' has a wrong offset!");
static_assert(offsetof(UMovieSceneSkeletalAnimationSection, bMatchRotationPitch) == 0x0002E3, "Member 'UMovieSceneSkeletalAnimationSection::bMatchRotationPitch' has a wrong offset!");
static_assert(offsetof(UMovieSceneSkeletalAnimationSection, bMatchRotationRoll) == 0x0002E4, "Member 'UMovieSceneSkeletalAnimationSection::bMatchRotationRoll' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneSlomoSection
// 0x0118 (0x0208 - 0x00F0)
class UMovieSceneSlomoSection final : public UMovieSceneSection
{
public:
	uint8                                         Pad_F0[0x8];                                       // 0x00F0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneFloatChannel                FloatCurve;                                        // 0x00F8(0x0110)(NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneSlomoSection">();
	}
	static class UMovieSceneSlomoSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneSlomoSection>();
	}
};
static_assert(alignof(UMovieSceneSlomoSection) == 0x000008, "Wrong alignment on UMovieSceneSlomoSection");
static_assert(sizeof(UMovieSceneSlomoSection) == 0x000208, "Wrong size on UMovieSceneSlomoSection");
static_assert(offsetof(UMovieSceneSlomoSection, FloatCurve) == 0x0000F8, "Member 'UMovieSceneSlomoSection::FloatCurve' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneStringSection
// 0x0118 (0x0208 - 0x00F0)
class UMovieSceneStringSection final : public UMovieSceneSection
{
public:
	uint8                                         Pad_F0[0x8];                                       // 0x00F0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneStringChannel               StringCurve;                                       // 0x00F8(0x0110)(NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneStringSection">();
	}
	static class UMovieSceneStringSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneStringSection>();
	}
};
static_assert(alignof(UMovieSceneStringSection) == 0x000008, "Wrong alignment on UMovieSceneStringSection");
static_assert(sizeof(UMovieSceneStringSection) == 0x000208, "Wrong size on UMovieSceneStringSection");
static_assert(offsetof(UMovieSceneStringSection, StringCurve) == 0x0000F8, "Member 'UMovieSceneStringSection::StringCurve' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneFloatVectorSection
// 0x0450 (0x0540 - 0x00F0)
class UMovieSceneFloatVectorSection final : public UMovieSceneSection
{
public:
	uint8                                         Pad_F0[0x8];                                       // 0x00F0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneFloatChannel                Curves[0x4];                                       // 0x00F8(0x0110)(NativeAccessSpecifierPrivate)
	int32                                         ChannelsUsed;                                      // 0x0538(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_53C[0x4];                                      // 0x053C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneFloatVectorSection">();
	}
	static class UMovieSceneFloatVectorSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneFloatVectorSection>();
	}
};
static_assert(alignof(UMovieSceneFloatVectorSection) == 0x000008, "Wrong alignment on UMovieSceneFloatVectorSection");
static_assert(sizeof(UMovieSceneFloatVectorSection) == 0x000540, "Wrong size on UMovieSceneFloatVectorSection");
static_assert(offsetof(UMovieSceneFloatVectorSection, Curves) == 0x0000F8, "Member 'UMovieSceneFloatVectorSection::Curves' has a wrong offset!");
static_assert(offsetof(UMovieSceneFloatVectorSection, ChannelsUsed) == 0x000538, "Member 'UMovieSceneFloatVectorSection::ChannelsUsed' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneDoubleVectorSection
// 0x0470 (0x0560 - 0x00F0)
class UMovieSceneDoubleVectorSection final : public UMovieSceneSection
{
public:
	uint8                                         Pad_F0[0x8];                                       // 0x00F0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneDoubleChannel               Curves[0x4];                                       // 0x00F8(0x0118)(NativeAccessSpecifierPrivate)
	int32                                         ChannelsUsed;                                      // 0x0558(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_55C[0x4];                                      // 0x055C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneDoubleVectorSection">();
	}
	static class UMovieSceneDoubleVectorSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneDoubleVectorSection>();
	}
};
static_assert(alignof(UMovieSceneDoubleVectorSection) == 0x000008, "Wrong alignment on UMovieSceneDoubleVectorSection");
static_assert(sizeof(UMovieSceneDoubleVectorSection) == 0x000560, "Wrong size on UMovieSceneDoubleVectorSection");
static_assert(offsetof(UMovieSceneDoubleVectorSection, Curves) == 0x0000F8, "Member 'UMovieSceneDoubleVectorSection::Curves' has a wrong offset!");
static_assert(offsetof(UMovieSceneDoubleVectorSection, ChannelsUsed) == 0x000558, "Member 'UMovieSceneDoubleVectorSection::ChannelsUsed' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneVisibilitySection
// 0x0008 (0x0208 - 0x0200)
class UMovieSceneVisibilitySection final : public UMovieSceneBoolSection
{
public:
	uint8                                         Pad_200[0x8];                                      // 0x0200(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneVisibilitySection">();
	}
	static class UMovieSceneVisibilitySection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneVisibilitySection>();
	}
};
static_assert(alignof(UMovieSceneVisibilitySection) == 0x000008, "Wrong alignment on UMovieSceneVisibilitySection");
static_assert(sizeof(UMovieSceneVisibilitySection) == 0x000208, "Wrong size on UMovieSceneVisibilitySection");

// Class MovieSceneTracks.BoolChannelEvaluatorSystem
// 0x0000 (0x0040 - 0x0040)
class UBoolChannelEvaluatorSystem final : public UMovieSceneEntitySystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BoolChannelEvaluatorSystem">();
	}
	static class UBoolChannelEvaluatorSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBoolChannelEvaluatorSystem>();
	}
};
static_assert(alignof(UBoolChannelEvaluatorSystem) == 0x000008, "Wrong alignment on UBoolChannelEvaluatorSystem");
static_assert(sizeof(UBoolChannelEvaluatorSystem) == 0x000040, "Wrong size on UBoolChannelEvaluatorSystem");

// Class MovieSceneTracks.ByteChannelEvaluatorSystem
// 0x0000 (0x0040 - 0x0040)
class UByteChannelEvaluatorSystem final : public UMovieSceneEntitySystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ByteChannelEvaluatorSystem">();
	}
	static class UByteChannelEvaluatorSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UByteChannelEvaluatorSystem>();
	}
};
static_assert(alignof(UByteChannelEvaluatorSystem) == 0x000008, "Wrong alignment on UByteChannelEvaluatorSystem");
static_assert(sizeof(UByteChannelEvaluatorSystem) == 0x000040, "Wrong size on UByteChannelEvaluatorSystem");

// Class MovieSceneTracks.DoubleChannelEvaluatorSystem
// 0x0000 (0x0040 - 0x0040)
class UDoubleChannelEvaluatorSystem final : public UMovieSceneEntitySystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DoubleChannelEvaluatorSystem">();
	}
	static class UDoubleChannelEvaluatorSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDoubleChannelEvaluatorSystem>();
	}
};
static_assert(alignof(UDoubleChannelEvaluatorSystem) == 0x000008, "Wrong alignment on UDoubleChannelEvaluatorSystem");
static_assert(sizeof(UDoubleChannelEvaluatorSystem) == 0x000040, "Wrong size on UDoubleChannelEvaluatorSystem");

// Class MovieSceneTracks.DoublePerlinNoiseChannelEvaluatorSystem
// 0x0000 (0x0040 - 0x0040)
class UDoublePerlinNoiseChannelEvaluatorSystem final : public UMovieSceneEntitySystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DoublePerlinNoiseChannelEvaluatorSystem">();
	}
	static class UDoublePerlinNoiseChannelEvaluatorSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDoublePerlinNoiseChannelEvaluatorSystem>();
	}
};
static_assert(alignof(UDoublePerlinNoiseChannelEvaluatorSystem) == 0x000008, "Wrong alignment on UDoublePerlinNoiseChannelEvaluatorSystem");
static_assert(sizeof(UDoublePerlinNoiseChannelEvaluatorSystem) == 0x000040, "Wrong size on UDoublePerlinNoiseChannelEvaluatorSystem");

// Class MovieSceneTracks.FloatChannelEvaluatorSystem
// 0x0000 (0x0040 - 0x0040)
class UFloatChannelEvaluatorSystem final : public UMovieSceneEntitySystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FloatChannelEvaluatorSystem">();
	}
	static class UFloatChannelEvaluatorSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFloatChannelEvaluatorSystem>();
	}
};
static_assert(alignof(UFloatChannelEvaluatorSystem) == 0x000008, "Wrong alignment on UFloatChannelEvaluatorSystem");
static_assert(sizeof(UFloatChannelEvaluatorSystem) == 0x000040, "Wrong size on UFloatChannelEvaluatorSystem");

// Class MovieSceneTracks.FloatPerlinNoiseChannelEvaluatorSystem
// 0x0000 (0x0040 - 0x0040)
class UFloatPerlinNoiseChannelEvaluatorSystem final : public UMovieSceneEntitySystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FloatPerlinNoiseChannelEvaluatorSystem">();
	}
	static class UFloatPerlinNoiseChannelEvaluatorSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFloatPerlinNoiseChannelEvaluatorSystem>();
	}
};
static_assert(alignof(UFloatPerlinNoiseChannelEvaluatorSystem) == 0x000008, "Wrong alignment on UFloatPerlinNoiseChannelEvaluatorSystem");
static_assert(sizeof(UFloatPerlinNoiseChannelEvaluatorSystem) == 0x000040, "Wrong size on UFloatPerlinNoiseChannelEvaluatorSystem");

// Class MovieSceneTracks.IntegerChannelEvaluatorSystem
// 0x0000 (0x0040 - 0x0040)
class UIntegerChannelEvaluatorSystem final : public UMovieSceneEntitySystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IntegerChannelEvaluatorSystem">();
	}
	static class UIntegerChannelEvaluatorSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIntegerChannelEvaluatorSystem>();
	}
};
static_assert(alignof(UIntegerChannelEvaluatorSystem) == 0x000008, "Wrong alignment on UIntegerChannelEvaluatorSystem");
static_assert(sizeof(UIntegerChannelEvaluatorSystem) == 0x000040, "Wrong size on UIntegerChannelEvaluatorSystem");

// Class MovieSceneTracks.MovieScenePropertySystem
// 0x0018 (0x0058 - 0x0040)
class UMovieScenePropertySystem : public UMovieSceneEntitySystem
{
public:
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMovieScenePropertyInstantiatorSystem*  InstantiatorSystem;                                // 0x0048(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_50[0x8];                                       // 0x0050(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScenePropertySystem">();
	}
	static class UMovieScenePropertySystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScenePropertySystem>();
	}
};
static_assert(alignof(UMovieScenePropertySystem) == 0x000008, "Wrong alignment on UMovieScenePropertySystem");
static_assert(sizeof(UMovieScenePropertySystem) == 0x000058, "Wrong size on UMovieScenePropertySystem");
static_assert(offsetof(UMovieScenePropertySystem, InstantiatorSystem) == 0x000048, "Member 'UMovieScenePropertySystem::InstantiatorSystem' has a wrong offset!");

// Class MovieSceneTracks.MovieScene3DTransformPropertySystem
// 0x0000 (0x0058 - 0x0058)
class UMovieScene3DTransformPropertySystem final : public UMovieScenePropertySystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScene3DTransformPropertySystem">();
	}
	static class UMovieScene3DTransformPropertySystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScene3DTransformPropertySystem>();
	}
};
static_assert(alignof(UMovieScene3DTransformPropertySystem) == 0x000008, "Wrong alignment on UMovieScene3DTransformPropertySystem");
static_assert(sizeof(UMovieScene3DTransformPropertySystem) == 0x000058, "Wrong size on UMovieScene3DTransformPropertySystem");

// Class MovieSceneTracks.MovieSceneAudioSystem
// 0x00B0 (0x00F0 - 0x0040)
class UMovieSceneAudioSystem final : public UMovieSceneEntitySystem
{
public:
	uint8                                         Pad_40[0xB0];                                      // 0x0040(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneAudioSystem">();
	}
	static class UMovieSceneAudioSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneAudioSystem>();
	}
};
static_assert(alignof(UMovieSceneAudioSystem) == 0x000008, "Wrong alignment on UMovieSceneAudioSystem");
static_assert(sizeof(UMovieSceneAudioSystem) == 0x0000F0, "Wrong size on UMovieSceneAudioSystem");

// Class MovieSceneTracks.MovieSceneBaseValueEvaluatorSystem
// 0x0000 (0x0040 - 0x0040)
class UMovieSceneBaseValueEvaluatorSystem final : public UMovieSceneEntitySystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneBaseValueEvaluatorSystem">();
	}
	static class UMovieSceneBaseValueEvaluatorSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneBaseValueEvaluatorSystem>();
	}
};
static_assert(alignof(UMovieSceneBaseValueEvaluatorSystem) == 0x000008, "Wrong alignment on UMovieSceneBaseValueEvaluatorSystem");
static_assert(sizeof(UMovieSceneBaseValueEvaluatorSystem) == 0x000040, "Wrong size on UMovieSceneBaseValueEvaluatorSystem");

// Class MovieSceneTracks.MovieSceneBoolPropertySystem
// 0x0000 (0x0058 - 0x0058)
class UMovieSceneBoolPropertySystem final : public UMovieScenePropertySystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneBoolPropertySystem">();
	}
	static class UMovieSceneBoolPropertySystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneBoolPropertySystem>();
	}
};
static_assert(alignof(UMovieSceneBoolPropertySystem) == 0x000008, "Wrong alignment on UMovieSceneBoolPropertySystem");
static_assert(sizeof(UMovieSceneBoolPropertySystem) == 0x000058, "Wrong size on UMovieSceneBoolPropertySystem");

// Class MovieSceneTracks.MovieSceneBytePropertySystem
// 0x0000 (0x0058 - 0x0058)
class UMovieSceneBytePropertySystem final : public UMovieScenePropertySystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneBytePropertySystem">();
	}
	static class UMovieSceneBytePropertySystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneBytePropertySystem>();
	}
};
static_assert(alignof(UMovieSceneBytePropertySystem) == 0x000008, "Wrong alignment on UMovieSceneBytePropertySystem");
static_assert(sizeof(UMovieSceneBytePropertySystem) == 0x000058, "Wrong size on UMovieSceneBytePropertySystem");

// Class MovieSceneTracks.MovieSceneCameraShakeInstantiatorSystem
// 0x0080 (0x00C0 - 0x0040)
class UMovieSceneCameraShakeInstantiatorSystem final : public UMovieSceneEntitySystem
{
public:
	uint8                                         Pad_40[0x80];                                      // 0x0040(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneCameraShakeInstantiatorSystem">();
	}
	static class UMovieSceneCameraShakeInstantiatorSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneCameraShakeInstantiatorSystem>();
	}
};
static_assert(alignof(UMovieSceneCameraShakeInstantiatorSystem) == 0x000008, "Wrong alignment on UMovieSceneCameraShakeInstantiatorSystem");
static_assert(sizeof(UMovieSceneCameraShakeInstantiatorSystem) == 0x0000C0, "Wrong size on UMovieSceneCameraShakeInstantiatorSystem");

// Class MovieSceneTracks.MovieSceneCameraShakeEvaluatorSystem
// 0x0000 (0x0040 - 0x0040)
class UMovieSceneCameraShakeEvaluatorSystem final : public UMovieSceneEntitySystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneCameraShakeEvaluatorSystem">();
	}
	static class UMovieSceneCameraShakeEvaluatorSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneCameraShakeEvaluatorSystem>();
	}
};
static_assert(alignof(UMovieSceneCameraShakeEvaluatorSystem) == 0x000008, "Wrong alignment on UMovieSceneCameraShakeEvaluatorSystem");
static_assert(sizeof(UMovieSceneCameraShakeEvaluatorSystem) == 0x000040, "Wrong size on UMovieSceneCameraShakeEvaluatorSystem");

// Class MovieSceneTracks.MovieSceneColorPropertySystem
// 0x0000 (0x0058 - 0x0058)
class UMovieSceneColorPropertySystem final : public UMovieScenePropertySystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneColorPropertySystem">();
	}
	static class UMovieSceneColorPropertySystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneColorPropertySystem>();
	}
};
static_assert(alignof(UMovieSceneColorPropertySystem) == 0x000008, "Wrong alignment on UMovieSceneColorPropertySystem");
static_assert(sizeof(UMovieSceneColorPropertySystem) == 0x000058, "Wrong size on UMovieSceneColorPropertySystem");

// Class MovieSceneTracks.MovieSceneComponentAttachmentInvalidatorSystem
// 0x0000 (0x0040 - 0x0040)
class UMovieSceneComponentAttachmentInvalidatorSystem final : public UMovieSceneEntityInstantiatorSystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneComponentAttachmentInvalidatorSystem">();
	}
	static class UMovieSceneComponentAttachmentInvalidatorSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneComponentAttachmentInvalidatorSystem>();
	}
};
static_assert(alignof(UMovieSceneComponentAttachmentInvalidatorSystem) == 0x000008, "Wrong alignment on UMovieSceneComponentAttachmentInvalidatorSystem");
static_assert(sizeof(UMovieSceneComponentAttachmentInvalidatorSystem) == 0x000040, "Wrong size on UMovieSceneComponentAttachmentInvalidatorSystem");

// Class MovieSceneTracks.MovieSceneComponentAttachmentSystem
// 0x0190 (0x01D0 - 0x0040)
class UMovieSceneComponentAttachmentSystem final : public UMovieSceneEntityInstantiatorSystem
{
public:
	uint8                                         Pad_40[0x190];                                     // 0x0040(0x0190)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneComponentAttachmentSystem">();
	}
	static class UMovieSceneComponentAttachmentSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneComponentAttachmentSystem>();
	}
};
static_assert(alignof(UMovieSceneComponentAttachmentSystem) == 0x000008, "Wrong alignment on UMovieSceneComponentAttachmentSystem");
static_assert(sizeof(UMovieSceneComponentAttachmentSystem) == 0x0001D0, "Wrong size on UMovieSceneComponentAttachmentSystem");

// Class MovieSceneTracks.MovieSceneComponentMaterialSystem
// 0x0168 (0x01A8 - 0x0040)
class UMovieSceneComponentMaterialSystem final : public UMovieSceneEntitySystem
{
public:
	uint8                                         Pad_40[0x168];                                     // 0x0040(0x0168)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneComponentMaterialSystem">();
	}
	static class UMovieSceneComponentMaterialSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneComponentMaterialSystem>();
	}
};
static_assert(alignof(UMovieSceneComponentMaterialSystem) == 0x000008, "Wrong alignment on UMovieSceneComponentMaterialSystem");
static_assert(sizeof(UMovieSceneComponentMaterialSystem) == 0x0001A8, "Wrong size on UMovieSceneComponentMaterialSystem");

// Class MovieSceneTracks.MovieSceneComponentMobilitySystem
// 0x01F0 (0x0230 - 0x0040)
class UMovieSceneComponentMobilitySystem final : public UMovieSceneEntityInstantiatorSystem
{
public:
	uint8                                         Pad_40[0x1F0];                                     // 0x0040(0x01F0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneComponentMobilitySystem">();
	}
	static class UMovieSceneComponentMobilitySystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneComponentMobilitySystem>();
	}
};
static_assert(alignof(UMovieSceneComponentMobilitySystem) == 0x000008, "Wrong alignment on UMovieSceneComponentMobilitySystem");
static_assert(sizeof(UMovieSceneComponentMobilitySystem) == 0x000230, "Wrong size on UMovieSceneComponentMobilitySystem");

// Class MovieSceneTracks.MovieSceneComponentTransformSystem
// 0x0000 (0x0058 - 0x0058)
class UMovieSceneComponentTransformSystem final : public UMovieScenePropertySystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneComponentTransformSystem">();
	}
	static class UMovieSceneComponentTransformSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneComponentTransformSystem>();
	}
};
static_assert(alignof(UMovieSceneComponentTransformSystem) == 0x000008, "Wrong alignment on UMovieSceneComponentTransformSystem");
static_assert(sizeof(UMovieSceneComponentTransformSystem) == 0x000058, "Wrong size on UMovieSceneComponentTransformSystem");

// Class MovieSceneTracks.MovieSceneConstraintSystem
// 0x0010 (0x0050 - 0x0040)
class UMovieSceneConstraintSystem final : public UMovieSceneEntitySystem
{
public:
	uint8                                         Pad_40[0x10];                                      // 0x0040(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneConstraintSystem">();
	}
	static class UMovieSceneConstraintSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneConstraintSystem>();
	}
};
static_assert(alignof(UMovieSceneConstraintSystem) == 0x000008, "Wrong alignment on UMovieSceneConstraintSystem");
static_assert(sizeof(UMovieSceneConstraintSystem) == 0x000050, "Wrong size on UMovieSceneConstraintSystem");

// Class MovieSceneTracks.MovieSceneCustomPrimitiveDataSystem
// 0x0190 (0x01D0 - 0x0040)
class UMovieSceneCustomPrimitiveDataSystem final : public UMovieSceneEntitySystem
{
public:
	uint8                                         Pad_40[0x188];                                     // 0x0040(0x0188)(Fixing Size After Last Property [ Dumper-7 ])
	class UMovieScenePiecewiseDoubleBlenderSystem* DoubleBlenderSystem;                               // 0x01C8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneCustomPrimitiveDataSystem">();
	}
	static class UMovieSceneCustomPrimitiveDataSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneCustomPrimitiveDataSystem>();
	}
};
static_assert(alignof(UMovieSceneCustomPrimitiveDataSystem) == 0x000008, "Wrong alignment on UMovieSceneCustomPrimitiveDataSystem");
static_assert(sizeof(UMovieSceneCustomPrimitiveDataSystem) == 0x0001D0, "Wrong size on UMovieSceneCustomPrimitiveDataSystem");
static_assert(offsetof(UMovieSceneCustomPrimitiveDataSystem, DoubleBlenderSystem) == 0x0001C8, "Member 'UMovieSceneCustomPrimitiveDataSystem::DoubleBlenderSystem' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneDataLayerSystem
// 0x0090 (0x00D0 - 0x0040)
class UMovieSceneDataLayerSystem final : public UMovieSceneEntitySystem
{
public:
	uint8                                         Pad_40[0x90];                                      // 0x0040(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneDataLayerSystem">();
	}
	static class UMovieSceneDataLayerSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneDataLayerSystem>();
	}
};
static_assert(alignof(UMovieSceneDataLayerSystem) == 0x000008, "Wrong alignment on UMovieSceneDataLayerSystem");
static_assert(sizeof(UMovieSceneDataLayerSystem) == 0x0000D0, "Wrong size on UMovieSceneDataLayerSystem");

// Class MovieSceneTracks.MovieSceneDeferredComponentMovementSystem
// 0x0018 (0x0058 - 0x0040)
class UMovieSceneDeferredComponentMovementSystem final : public UMovieSceneEntitySystem
{
public:
	uint8                                         Pad_40[0x18];                                      // 0x0040(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneDeferredComponentMovementSystem">();
	}
	static class UMovieSceneDeferredComponentMovementSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneDeferredComponentMovementSystem>();
	}
};
static_assert(alignof(UMovieSceneDeferredComponentMovementSystem) == 0x000008, "Wrong alignment on UMovieSceneDeferredComponentMovementSystem");
static_assert(sizeof(UMovieSceneDeferredComponentMovementSystem) == 0x000058, "Wrong size on UMovieSceneDeferredComponentMovementSystem");

// Class MovieSceneTracks.MovieSceneDoublePropertySystem
// 0x0000 (0x0058 - 0x0058)
class UMovieSceneDoublePropertySystem final : public UMovieScenePropertySystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneDoublePropertySystem">();
	}
	static class UMovieSceneDoublePropertySystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneDoublePropertySystem>();
	}
};
static_assert(alignof(UMovieSceneDoublePropertySystem) == 0x000008, "Wrong alignment on UMovieSceneDoublePropertySystem");
static_assert(sizeof(UMovieSceneDoublePropertySystem) == 0x000058, "Wrong size on UMovieSceneDoublePropertySystem");

// Class MovieSceneTracks.MovieSceneEnumPropertySystem
// 0x0000 (0x0058 - 0x0058)
class UMovieSceneEnumPropertySystem final : public UMovieScenePropertySystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneEnumPropertySystem">();
	}
	static class UMovieSceneEnumPropertySystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneEnumPropertySystem>();
	}
};
static_assert(alignof(UMovieSceneEnumPropertySystem) == 0x000008, "Wrong alignment on UMovieSceneEnumPropertySystem");
static_assert(sizeof(UMovieSceneEnumPropertySystem) == 0x000058, "Wrong size on UMovieSceneEnumPropertySystem");

// Class MovieSceneTracks.MovieSceneEulerTransformPropertySystem
// 0x0000 (0x0058 - 0x0058)
class UMovieSceneEulerTransformPropertySystem final : public UMovieScenePropertySystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneEulerTransformPropertySystem">();
	}
	static class UMovieSceneEulerTransformPropertySystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneEulerTransformPropertySystem>();
	}
};
static_assert(alignof(UMovieSceneEulerTransformPropertySystem) == 0x000008, "Wrong alignment on UMovieSceneEulerTransformPropertySystem");
static_assert(sizeof(UMovieSceneEulerTransformPropertySystem) == 0x000058, "Wrong size on UMovieSceneEulerTransformPropertySystem");

// Class MovieSceneTracks.MovieSceneEventSystem
// 0x0050 (0x0090 - 0x0040)
class UMovieSceneEventSystem : public UMovieSceneEntitySystem
{
public:
	uint8                                         Pad_40[0x50];                                      // 0x0040(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneEventSystem">();
	}
	static class UMovieSceneEventSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneEventSystem>();
	}
};
static_assert(alignof(UMovieSceneEventSystem) == 0x000008, "Wrong alignment on UMovieSceneEventSystem");
static_assert(sizeof(UMovieSceneEventSystem) == 0x000090, "Wrong size on UMovieSceneEventSystem");

// Class MovieSceneTracks.MovieScenePreSpawnEventSystem
// 0x0000 (0x0090 - 0x0090)
class UMovieScenePreSpawnEventSystem final : public UMovieSceneEventSystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScenePreSpawnEventSystem">();
	}
	static class UMovieScenePreSpawnEventSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScenePreSpawnEventSystem>();
	}
};
static_assert(alignof(UMovieScenePreSpawnEventSystem) == 0x000008, "Wrong alignment on UMovieScenePreSpawnEventSystem");
static_assert(sizeof(UMovieScenePreSpawnEventSystem) == 0x000090, "Wrong size on UMovieScenePreSpawnEventSystem");

// Class MovieSceneTracks.MovieScenePostSpawnEventSystem
// 0x0000 (0x0090 - 0x0090)
class UMovieScenePostSpawnEventSystem final : public UMovieSceneEventSystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScenePostSpawnEventSystem">();
	}
	static class UMovieScenePostSpawnEventSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScenePostSpawnEventSystem>();
	}
};
static_assert(alignof(UMovieScenePostSpawnEventSystem) == 0x000008, "Wrong alignment on UMovieScenePostSpawnEventSystem");
static_assert(sizeof(UMovieScenePostSpawnEventSystem) == 0x000090, "Wrong size on UMovieScenePostSpawnEventSystem");

// Class MovieSceneTracks.MovieScenePostEvalEventSystem
// 0x0000 (0x0090 - 0x0090)
class UMovieScenePostEvalEventSystem final : public UMovieSceneEventSystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScenePostEvalEventSystem">();
	}
	static class UMovieScenePostEvalEventSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScenePostEvalEventSystem>();
	}
};
static_assert(alignof(UMovieScenePostEvalEventSystem) == 0x000008, "Wrong alignment on UMovieScenePostEvalEventSystem");
static_assert(sizeof(UMovieScenePostEvalEventSystem) == 0x000090, "Wrong size on UMovieScenePostEvalEventSystem");

// Class MovieSceneTracks.MovieSceneFadeSystem
// 0x0010 (0x0050 - 0x0040)
class UMovieSceneFadeSystem final : public UMovieSceneEntitySystem
{
public:
	uint8                                         Pad_40[0x10];                                      // 0x0040(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneFadeSystem">();
	}
	static class UMovieSceneFadeSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneFadeSystem>();
	}
};
static_assert(alignof(UMovieSceneFadeSystem) == 0x000008, "Wrong alignment on UMovieSceneFadeSystem");
static_assert(sizeof(UMovieSceneFadeSystem) == 0x000050, "Wrong size on UMovieSceneFadeSystem");

// Class MovieSceneTracks.MovieSceneFloatPropertySystem
// 0x0000 (0x0058 - 0x0058)
class UMovieSceneFloatPropertySystem final : public UMovieScenePropertySystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneFloatPropertySystem">();
	}
	static class UMovieSceneFloatPropertySystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneFloatPropertySystem>();
	}
};
static_assert(alignof(UMovieSceneFloatPropertySystem) == 0x000008, "Wrong alignment on UMovieSceneFloatPropertySystem");
static_assert(sizeof(UMovieSceneFloatPropertySystem) == 0x000058, "Wrong size on UMovieSceneFloatPropertySystem");

// Class MovieSceneTracks.MovieSceneHierarchicalBiasSystem
// 0x0000 (0x0040 - 0x0040)
class UMovieSceneHierarchicalBiasSystem final : public UMovieSceneEntityInstantiatorSystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneHierarchicalBiasSystem">();
	}
	static class UMovieSceneHierarchicalBiasSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneHierarchicalBiasSystem>();
	}
};
static_assert(alignof(UMovieSceneHierarchicalBiasSystem) == 0x000008, "Wrong alignment on UMovieSceneHierarchicalBiasSystem");
static_assert(sizeof(UMovieSceneHierarchicalBiasSystem) == 0x000040, "Wrong size on UMovieSceneHierarchicalBiasSystem");

// Class MovieSceneTracks.MovieSceneInitialValueSystem
// 0x0000 (0x0040 - 0x0040)
class UMovieSceneInitialValueSystem final : public UMovieSceneEntityInstantiatorSystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneInitialValueSystem">();
	}
	static class UMovieSceneInitialValueSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneInitialValueSystem>();
	}
};
static_assert(alignof(UMovieSceneInitialValueSystem) == 0x000008, "Wrong alignment on UMovieSceneInitialValueSystem");
static_assert(sizeof(UMovieSceneInitialValueSystem) == 0x000040, "Wrong size on UMovieSceneInitialValueSystem");

// Class MovieSceneTracks.MovieSceneIntegerPropertySystem
// 0x0000 (0x0058 - 0x0058)
class UMovieSceneIntegerPropertySystem final : public UMovieScenePropertySystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneIntegerPropertySystem">();
	}
	static class UMovieSceneIntegerPropertySystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneIntegerPropertySystem>();
	}
};
static_assert(alignof(UMovieSceneIntegerPropertySystem) == 0x000008, "Wrong alignment on UMovieSceneIntegerPropertySystem");
static_assert(sizeof(UMovieSceneIntegerPropertySystem) == 0x000058, "Wrong size on UMovieSceneIntegerPropertySystem");

// Class MovieSceneTracks.MovieSceneLevelVisibilitySystem
// 0x0168 (0x01A8 - 0x0040)
class UMovieSceneLevelVisibilitySystem final : public UMovieSceneEntitySystem
{
public:
	uint8                                         Pad_40[0x168];                                     // 0x0040(0x0168)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneLevelVisibilitySystem">();
	}
	static class UMovieSceneLevelVisibilitySystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneLevelVisibilitySystem>();
	}
};
static_assert(alignof(UMovieSceneLevelVisibilitySystem) == 0x000008, "Wrong alignment on UMovieSceneLevelVisibilitySystem");
static_assert(sizeof(UMovieSceneLevelVisibilitySystem) == 0x0001A8, "Wrong size on UMovieSceneLevelVisibilitySystem");

// Class MovieSceneTracks.MovieSceneMaterialParameterCollectionSystem
// 0x0020 (0x0060 - 0x0040)
class UMovieSceneMaterialParameterCollectionSystem final : public UMovieSceneEntitySystem
{
public:
	uint8                                         Pad_40[0x20];                                      // 0x0040(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneMaterialParameterCollectionSystem">();
	}
	static class UMovieSceneMaterialParameterCollectionSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneMaterialParameterCollectionSystem>();
	}
};
static_assert(alignof(UMovieSceneMaterialParameterCollectionSystem) == 0x000008, "Wrong alignment on UMovieSceneMaterialParameterCollectionSystem");
static_assert(sizeof(UMovieSceneMaterialParameterCollectionSystem) == 0x000060, "Wrong size on UMovieSceneMaterialParameterCollectionSystem");

// Class MovieSceneTracks.MovieSceneMaterialParameterInstantiatorSystem
// 0x0318 (0x0358 - 0x0040)
class UMovieSceneMaterialParameterInstantiatorSystem final : public UMovieSceneEntityInstantiatorSystem
{
public:
	uint8                                         Pad_40[0x310];                                     // 0x0040(0x0310)(Fixing Size After Last Property [ Dumper-7 ])
	class UMovieScenePiecewiseDoubleBlenderSystem* DoubleBlenderSystem;                               // 0x0350(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneMaterialParameterInstantiatorSystem">();
	}
	static class UMovieSceneMaterialParameterInstantiatorSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneMaterialParameterInstantiatorSystem>();
	}
};
static_assert(alignof(UMovieSceneMaterialParameterInstantiatorSystem) == 0x000008, "Wrong alignment on UMovieSceneMaterialParameterInstantiatorSystem");
static_assert(sizeof(UMovieSceneMaterialParameterInstantiatorSystem) == 0x000358, "Wrong size on UMovieSceneMaterialParameterInstantiatorSystem");
static_assert(offsetof(UMovieSceneMaterialParameterInstantiatorSystem, DoubleBlenderSystem) == 0x000350, "Member 'UMovieSceneMaterialParameterInstantiatorSystem::DoubleBlenderSystem' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneMaterialParameterEvaluationSystem
// 0x0000 (0x0040 - 0x0040)
class UMovieSceneMaterialParameterEvaluationSystem final : public UMovieSceneEntitySystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneMaterialParameterEvaluationSystem">();
	}
	static class UMovieSceneMaterialParameterEvaluationSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneMaterialParameterEvaluationSystem>();
	}
};
static_assert(alignof(UMovieSceneMaterialParameterEvaluationSystem) == 0x000008, "Wrong alignment on UMovieSceneMaterialParameterEvaluationSystem");
static_assert(sizeof(UMovieSceneMaterialParameterEvaluationSystem) == 0x000040, "Wrong size on UMovieSceneMaterialParameterEvaluationSystem");

// Class MovieSceneTracks.MovieSceneMotionVectorSimulationSystem
// 0x0058 (0x0098 - 0x0040)
class UMovieSceneMotionVectorSimulationSystem final : public UMovieSceneEntitySystem
{
public:
	uint8                                         Pad_40[0x58];                                      // 0x0040(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneMotionVectorSimulationSystem">();
	}
	static class UMovieSceneMotionVectorSimulationSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneMotionVectorSimulationSystem>();
	}
};
static_assert(alignof(UMovieSceneMotionVectorSimulationSystem) == 0x000008, "Wrong alignment on UMovieSceneMotionVectorSimulationSystem");
static_assert(sizeof(UMovieSceneMotionVectorSimulationSystem) == 0x000098, "Wrong size on UMovieSceneMotionVectorSimulationSystem");

// Class MovieSceneTracks.MovieSceneObjectPropertySystem
// 0x0000 (0x0058 - 0x0058)
class UMovieSceneObjectPropertySystem final : public UMovieScenePropertySystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneObjectPropertySystem">();
	}
	static class UMovieSceneObjectPropertySystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneObjectPropertySystem>();
	}
};
static_assert(alignof(UMovieSceneObjectPropertySystem) == 0x000008, "Wrong alignment on UMovieSceneObjectPropertySystem");
static_assert(sizeof(UMovieSceneObjectPropertySystem) == 0x000058, "Wrong size on UMovieSceneObjectPropertySystem");

// Class MovieSceneTracks.MovieScenePiecewiseBoolBlenderSystem
// 0x0028 (0x0090 - 0x0068)
class UMovieScenePiecewiseBoolBlenderSystem final : public UMovieSceneBlenderSystem
{
public:
	uint8                                         Pad_68[0x28];                                      // 0x0068(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScenePiecewiseBoolBlenderSystem">();
	}
	static class UMovieScenePiecewiseBoolBlenderSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScenePiecewiseBoolBlenderSystem>();
	}
};
static_assert(alignof(UMovieScenePiecewiseBoolBlenderSystem) == 0x000008, "Wrong alignment on UMovieScenePiecewiseBoolBlenderSystem");
static_assert(sizeof(UMovieScenePiecewiseBoolBlenderSystem) == 0x000090, "Wrong size on UMovieScenePiecewiseBoolBlenderSystem");

// Class MovieSceneTracks.MovieScenePiecewiseByteBlenderSystem
// 0x0028 (0x0090 - 0x0068)
class UMovieScenePiecewiseByteBlenderSystem final : public UMovieSceneBlenderSystem
{
public:
	uint8                                         Pad_68[0x28];                                      // 0x0068(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScenePiecewiseByteBlenderSystem">();
	}
	static class UMovieScenePiecewiseByteBlenderSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScenePiecewiseByteBlenderSystem>();
	}
};
static_assert(alignof(UMovieScenePiecewiseByteBlenderSystem) == 0x000008, "Wrong alignment on UMovieScenePiecewiseByteBlenderSystem");
static_assert(sizeof(UMovieScenePiecewiseByteBlenderSystem) == 0x000090, "Wrong size on UMovieScenePiecewiseByteBlenderSystem");

// Class MovieSceneTracks.MovieScenePiecewiseDoubleBlenderSystem
// 0x00C8 (0x0130 - 0x0068)
class UMovieScenePiecewiseDoubleBlenderSystem final : public UMovieSceneBlenderSystem
{
public:
	uint8                                         Pad_68[0xC8];                                      // 0x0068(0x00C8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScenePiecewiseDoubleBlenderSystem">();
	}
	static class UMovieScenePiecewiseDoubleBlenderSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScenePiecewiseDoubleBlenderSystem>();
	}
};
static_assert(alignof(UMovieScenePiecewiseDoubleBlenderSystem) == 0x000008, "Wrong alignment on UMovieScenePiecewiseDoubleBlenderSystem");
static_assert(sizeof(UMovieScenePiecewiseDoubleBlenderSystem) == 0x000130, "Wrong size on UMovieScenePiecewiseDoubleBlenderSystem");

// Class MovieSceneTracks.MovieScenePiecewiseEnumBlenderSystem
// 0x0028 (0x0090 - 0x0068)
class UMovieScenePiecewiseEnumBlenderSystem final : public UMovieSceneBlenderSystem
{
public:
	uint8                                         Pad_68[0x28];                                      // 0x0068(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScenePiecewiseEnumBlenderSystem">();
	}
	static class UMovieScenePiecewiseEnumBlenderSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScenePiecewiseEnumBlenderSystem>();
	}
};
static_assert(alignof(UMovieScenePiecewiseEnumBlenderSystem) == 0x000008, "Wrong alignment on UMovieScenePiecewiseEnumBlenderSystem");
static_assert(sizeof(UMovieScenePiecewiseEnumBlenderSystem) == 0x000090, "Wrong size on UMovieScenePiecewiseEnumBlenderSystem");

// Class MovieSceneTracks.MovieScenePiecewiseIntegerBlenderSystem
// 0x0048 (0x00B0 - 0x0068)
class UMovieScenePiecewiseIntegerBlenderSystem final : public UMovieSceneBlenderSystem
{
public:
	uint8                                         Pad_68[0x48];                                      // 0x0068(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScenePiecewiseIntegerBlenderSystem">();
	}
	static class UMovieScenePiecewiseIntegerBlenderSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScenePiecewiseIntegerBlenderSystem>();
	}
};
static_assert(alignof(UMovieScenePiecewiseIntegerBlenderSystem) == 0x000008, "Wrong alignment on UMovieScenePiecewiseIntegerBlenderSystem");
static_assert(sizeof(UMovieScenePiecewiseIntegerBlenderSystem) == 0x0000B0, "Wrong size on UMovieScenePiecewiseIntegerBlenderSystem");

// Class MovieSceneTracks.MovieSceneAsyncAction_SequencePrediction
// 0x0050 (0x0080 - 0x0030)
class UMovieSceneAsyncAction_SequencePrediction final : public UBlueprintAsyncActionBase
{
public:
	FMulticastInlineDelegateProperty_             Result;                                            // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             Failure;                                           // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x10];                                      // 0x0050(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UMovieSceneSequencePlayer*              SequencePlayer;                                    // 0x0060(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USceneComponent*                        SceneComponent;                                    // 0x0068(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_70[0x10];                                      // 0x0070(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMovieSceneAsyncAction_SequencePrediction* PredictLocalTransformAtFrame(class UMovieSceneSequencePlayer* Player, class USceneComponent* TargetComponent, const struct FFrameTime& FrameTime);
	static class UMovieSceneAsyncAction_SequencePrediction* PredictLocalTransformAtTime(class UMovieSceneSequencePlayer* Player, class USceneComponent* TargetComponent, float TimeInSeconds);
	static class UMovieSceneAsyncAction_SequencePrediction* PredictWorldTransformAtFrame(class UMovieSceneSequencePlayer* Player, class USceneComponent* TargetComponent, const struct FFrameTime& FrameTime);
	static class UMovieSceneAsyncAction_SequencePrediction* PredictWorldTransformAtTime(class UMovieSceneSequencePlayer* Player, class USceneComponent* TargetComponent, float TimeInSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneAsyncAction_SequencePrediction">();
	}
	static class UMovieSceneAsyncAction_SequencePrediction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneAsyncAction_SequencePrediction>();
	}
};
static_assert(alignof(UMovieSceneAsyncAction_SequencePrediction) == 0x000008, "Wrong alignment on UMovieSceneAsyncAction_SequencePrediction");
static_assert(sizeof(UMovieSceneAsyncAction_SequencePrediction) == 0x000080, "Wrong size on UMovieSceneAsyncAction_SequencePrediction");
static_assert(offsetof(UMovieSceneAsyncAction_SequencePrediction, Result) == 0x000030, "Member 'UMovieSceneAsyncAction_SequencePrediction::Result' has a wrong offset!");
static_assert(offsetof(UMovieSceneAsyncAction_SequencePrediction, Failure) == 0x000040, "Member 'UMovieSceneAsyncAction_SequencePrediction::Failure' has a wrong offset!");
static_assert(offsetof(UMovieSceneAsyncAction_SequencePrediction, SequencePlayer) == 0x000060, "Member 'UMovieSceneAsyncAction_SequencePrediction::SequencePlayer' has a wrong offset!");
static_assert(offsetof(UMovieSceneAsyncAction_SequencePrediction, SceneComponent) == 0x000068, "Member 'UMovieSceneAsyncAction_SequencePrediction::SceneComponent' has a wrong offset!");

// Class MovieSceneTracks.MovieScenePredictionSystem
// 0x00B0 (0x00F0 - 0x0040)
class UMovieScenePredictionSystem final : public UMovieSceneEntitySystem
{
public:
	uint8                                         Pad_40[0x90];                                      // 0x0040(0x0090)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMovieSceneAsyncAction_SequencePrediction*> PendingPredictions;                                // 0x00D0(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class UMovieSceneAsyncAction_SequencePrediction*> ProcessingPredictions;                             // 0x00E0(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScenePredictionSystem">();
	}
	static class UMovieScenePredictionSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScenePredictionSystem>();
	}
};
static_assert(alignof(UMovieScenePredictionSystem) == 0x000008, "Wrong alignment on UMovieScenePredictionSystem");
static_assert(sizeof(UMovieScenePredictionSystem) == 0x0000F0, "Wrong size on UMovieScenePredictionSystem");
static_assert(offsetof(UMovieScenePredictionSystem, PendingPredictions) == 0x0000D0, "Member 'UMovieScenePredictionSystem::PendingPredictions' has a wrong offset!");
static_assert(offsetof(UMovieScenePredictionSystem, ProcessingPredictions) == 0x0000E0, "Member 'UMovieScenePredictionSystem::ProcessingPredictions' has a wrong offset!");

// Class MovieSceneTracks.MovieScenePropertyInstantiatorSystem
// 0x0190 (0x01D0 - 0x0040)
class UMovieScenePropertyInstantiatorSystem final : public UMovieSceneEntityInstantiatorSystem
{
public:
	uint8                                         Pad_40[0x190];                                     // 0x0040(0x0190)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScenePropertyInstantiatorSystem">();
	}
	static class UMovieScenePropertyInstantiatorSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScenePropertyInstantiatorSystem>();
	}
};
static_assert(alignof(UMovieScenePropertyInstantiatorSystem) == 0x000008, "Wrong alignment on UMovieScenePropertyInstantiatorSystem");
static_assert(sizeof(UMovieScenePropertyInstantiatorSystem) == 0x0001D0, "Wrong size on UMovieScenePropertyInstantiatorSystem");

// Class MovieSceneTracks.MovieSceneQuaternionBlenderSystem
// 0x0060 (0x00C8 - 0x0068)
class UMovieSceneQuaternionBlenderSystem final : public UMovieSceneBlenderSystem
{
public:
	uint8                                         Pad_68[0x60];                                      // 0x0068(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneQuaternionBlenderSystem">();
	}
	static class UMovieSceneQuaternionBlenderSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneQuaternionBlenderSystem>();
	}
};
static_assert(alignof(UMovieSceneQuaternionBlenderSystem) == 0x000008, "Wrong alignment on UMovieSceneQuaternionBlenderSystem");
static_assert(sizeof(UMovieSceneQuaternionBlenderSystem) == 0x0000C8, "Wrong size on UMovieSceneQuaternionBlenderSystem");

// Class MovieSceneTracks.MovieSceneQuaternionInterpolationRotationSystem
// 0x0000 (0x0040 - 0x0040)
class UMovieSceneQuaternionInterpolationRotationSystem final : public UMovieSceneEntitySystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneQuaternionInterpolationRotationSystem">();
	}
	static class UMovieSceneQuaternionInterpolationRotationSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneQuaternionInterpolationRotationSystem>();
	}
};
static_assert(alignof(UMovieSceneQuaternionInterpolationRotationSystem) == 0x000008, "Wrong alignment on UMovieSceneQuaternionInterpolationRotationSystem");
static_assert(sizeof(UMovieSceneQuaternionInterpolationRotationSystem) == 0x000040, "Wrong size on UMovieSceneQuaternionInterpolationRotationSystem");

// Class MovieSceneTracks.MovieSceneSkeletalAnimationSystem
// 0x00A0 (0x00E0 - 0x0040)
class UMovieSceneSkeletalAnimationSystem final : public UMovieSceneEntitySystem
{
public:
	uint8                                         Pad_40[0xA0];                                      // 0x0040(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneSkeletalAnimationSystem">();
	}
	static class UMovieSceneSkeletalAnimationSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneSkeletalAnimationSystem>();
	}
};
static_assert(alignof(UMovieSceneSkeletalAnimationSystem) == 0x000008, "Wrong alignment on UMovieSceneSkeletalAnimationSystem");
static_assert(sizeof(UMovieSceneSkeletalAnimationSystem) == 0x0000E0, "Wrong size on UMovieSceneSkeletalAnimationSystem");

// Class MovieSceneTracks.MovieSceneSlomoSystem
// 0x0018 (0x0058 - 0x0040)
class UMovieSceneSlomoSystem final : public UMovieSceneEntitySystem
{
public:
	uint8                                         Pad_40[0x18];                                      // 0x0040(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneSlomoSystem">();
	}
	static class UMovieSceneSlomoSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneSlomoSystem>();
	}
};
static_assert(alignof(UMovieSceneSlomoSystem) == 0x000008, "Wrong alignment on UMovieSceneSlomoSystem");
static_assert(sizeof(UMovieSceneSlomoSystem) == 0x000058, "Wrong size on UMovieSceneSlomoSystem");

// Class MovieSceneTracks.MovieSceneStringPropertySystem
// 0x0000 (0x0058 - 0x0058)
class UMovieSceneStringPropertySystem final : public UMovieScenePropertySystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneStringPropertySystem">();
	}
	static class UMovieSceneStringPropertySystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneStringPropertySystem>();
	}
};
static_assert(alignof(UMovieSceneStringPropertySystem) == 0x000008, "Wrong alignment on UMovieSceneStringPropertySystem");
static_assert(sizeof(UMovieSceneStringPropertySystem) == 0x000058, "Wrong size on UMovieSceneStringPropertySystem");

// Class MovieSceneTracks.MovieSceneTransformOriginInstantiatorSystem
// 0x0000 (0x0040 - 0x0040)
class UMovieSceneTransformOriginInstantiatorSystem final : public UMovieSceneEntitySystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneTransformOriginInstantiatorSystem">();
	}
	static class UMovieSceneTransformOriginInstantiatorSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneTransformOriginInstantiatorSystem>();
	}
};
static_assert(alignof(UMovieSceneTransformOriginInstantiatorSystem) == 0x000008, "Wrong alignment on UMovieSceneTransformOriginInstantiatorSystem");
static_assert(sizeof(UMovieSceneTransformOriginInstantiatorSystem) == 0x000040, "Wrong size on UMovieSceneTransformOriginInstantiatorSystem");

// Class MovieSceneTracks.MovieSceneTransformOriginSystem
// 0x0038 (0x0078 - 0x0040)
class UMovieSceneTransformOriginSystem final : public UMovieSceneEntitySystem
{
public:
	uint8                                         Pad_40[0x38];                                      // 0x0040(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneTransformOriginSystem">();
	}
	static class UMovieSceneTransformOriginSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneTransformOriginSystem>();
	}
};
static_assert(alignof(UMovieSceneTransformOriginSystem) == 0x000008, "Wrong alignment on UMovieSceneTransformOriginSystem");
static_assert(sizeof(UMovieSceneTransformOriginSystem) == 0x000078, "Wrong size on UMovieSceneTransformOriginSystem");

// Class MovieSceneTracks.MovieSceneFloatVectorPropertySystem
// 0x0000 (0x0058 - 0x0058)
class UMovieSceneFloatVectorPropertySystem final : public UMovieScenePropertySystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneFloatVectorPropertySystem">();
	}
	static class UMovieSceneFloatVectorPropertySystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneFloatVectorPropertySystem>();
	}
};
static_assert(alignof(UMovieSceneFloatVectorPropertySystem) == 0x000008, "Wrong alignment on UMovieSceneFloatVectorPropertySystem");
static_assert(sizeof(UMovieSceneFloatVectorPropertySystem) == 0x000058, "Wrong size on UMovieSceneFloatVectorPropertySystem");

// Class MovieSceneTracks.MovieSceneDoubleVectorPropertySystem
// 0x0000 (0x0058 - 0x0058)
class UMovieSceneDoubleVectorPropertySystem final : public UMovieScenePropertySystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneDoubleVectorPropertySystem">();
	}
	static class UMovieSceneDoubleVectorPropertySystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneDoubleVectorPropertySystem>();
	}
};
static_assert(alignof(UMovieSceneDoubleVectorPropertySystem) == 0x000008, "Wrong alignment on UMovieSceneDoubleVectorPropertySystem");
static_assert(sizeof(UMovieSceneDoubleVectorPropertySystem) == 0x000058, "Wrong size on UMovieSceneDoubleVectorPropertySystem");

// Class MovieSceneTracks.MovieSceneVisibilitySystem
// 0x0010 (0x0050 - 0x0040)
class UMovieSceneVisibilitySystem final : public UMovieSceneEntityInstantiatorSystem
{
public:
	uint8                                         Pad_40[0x10];                                      // 0x0040(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneVisibilitySystem">();
	}
	static class UMovieSceneVisibilitySystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneVisibilitySystem>();
	}
};
static_assert(alignof(UMovieSceneVisibilitySystem) == 0x000008, "Wrong alignment on UMovieSceneVisibilitySystem");
static_assert(sizeof(UMovieSceneVisibilitySystem) == 0x000050, "Wrong size on UMovieSceneVisibilitySystem");

// Class MovieSceneTracks.ObjectPathChannelEvaluatorSystem
// 0x0000 (0x0040 - 0x0040)
class UObjectPathChannelEvaluatorSystem final : public UMovieSceneEntitySystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ObjectPathChannelEvaluatorSystem">();
	}
	static class UObjectPathChannelEvaluatorSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UObjectPathChannelEvaluatorSystem>();
	}
};
static_assert(alignof(UObjectPathChannelEvaluatorSystem) == 0x000008, "Wrong alignment on UObjectPathChannelEvaluatorSystem");
static_assert(sizeof(UObjectPathChannelEvaluatorSystem) == 0x000040, "Wrong size on UObjectPathChannelEvaluatorSystem");

// Class MovieSceneTracks.StringChannelEvaluatorSystem
// 0x0000 (0x0040 - 0x0040)
class UStringChannelEvaluatorSystem final : public UMovieSceneEntitySystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StringChannelEvaluatorSystem">();
	}
	static class UStringChannelEvaluatorSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStringChannelEvaluatorSystem>();
	}
};
static_assert(alignof(UStringChannelEvaluatorSystem) == 0x000008, "Wrong alignment on UStringChannelEvaluatorSystem");
static_assert(sizeof(UStringChannelEvaluatorSystem) == 0x000040, "Wrong size on UStringChannelEvaluatorSystem");

// Class MovieSceneTracks.MovieSceneHierarchicalEasingInstantiatorSystem
// 0x0098 (0x00D8 - 0x0040)
class UMovieSceneHierarchicalEasingInstantiatorSystem final : public UMovieSceneEntityInstantiatorSystem
{
public:
	uint8                                         Pad_40[0x88];                                      // 0x0040(0x0088)(Fixing Size After Last Property [ Dumper-7 ])
	class UWeightAndEasingEvaluatorSystem*        EvaluatorSystem;                                   // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D0[0x8];                                       // 0x00D0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneHierarchicalEasingInstantiatorSystem">();
	}
	static class UMovieSceneHierarchicalEasingInstantiatorSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneHierarchicalEasingInstantiatorSystem>();
	}
};
static_assert(alignof(UMovieSceneHierarchicalEasingInstantiatorSystem) == 0x000008, "Wrong alignment on UMovieSceneHierarchicalEasingInstantiatorSystem");
static_assert(sizeof(UMovieSceneHierarchicalEasingInstantiatorSystem) == 0x0000D8, "Wrong size on UMovieSceneHierarchicalEasingInstantiatorSystem");
static_assert(offsetof(UMovieSceneHierarchicalEasingInstantiatorSystem, EvaluatorSystem) == 0x0000C8, "Member 'UMovieSceneHierarchicalEasingInstantiatorSystem::EvaluatorSystem' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneHierarchicalEasingFinalizationSystem
// 0x0008 (0x0048 - 0x0040)
class UMovieSceneHierarchicalEasingFinalizationSystem final : public UMovieSceneEntityInstantiatorSystem
{
public:
	class UMovieSceneHierarchicalEasingInstantiatorSystem* InstantiatorSystem;                                // 0x0040(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneHierarchicalEasingFinalizationSystem">();
	}
	static class UMovieSceneHierarchicalEasingFinalizationSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneHierarchicalEasingFinalizationSystem>();
	}
};
static_assert(alignof(UMovieSceneHierarchicalEasingFinalizationSystem) == 0x000008, "Wrong alignment on UMovieSceneHierarchicalEasingFinalizationSystem");
static_assert(sizeof(UMovieSceneHierarchicalEasingFinalizationSystem) == 0x000048, "Wrong size on UMovieSceneHierarchicalEasingFinalizationSystem");
static_assert(offsetof(UMovieSceneHierarchicalEasingFinalizationSystem, InstantiatorSystem) == 0x000040, "Member 'UMovieSceneHierarchicalEasingFinalizationSystem::InstantiatorSystem' has a wrong offset!");

// Class MovieSceneTracks.WeightAndEasingEvaluatorSystem
// 0x0018 (0x0058 - 0x0040)
class UWeightAndEasingEvaluatorSystem final : public UMovieSceneEntitySystem
{
public:
	uint8                                         Pad_40[0x18];                                      // 0x0040(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WeightAndEasingEvaluatorSystem">();
	}
	static class UWeightAndEasingEvaluatorSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWeightAndEasingEvaluatorSystem>();
	}
};
static_assert(alignof(UWeightAndEasingEvaluatorSystem) == 0x000008, "Wrong alignment on UWeightAndEasingEvaluatorSystem");
static_assert(sizeof(UWeightAndEasingEvaluatorSystem) == 0x000058, "Wrong size on UWeightAndEasingEvaluatorSystem");

// Class MovieSceneTracks.MovieSceneCameraCutTrackInstance
// 0x0028 (0x0078 - 0x0050)
class UMovieSceneCameraCutTrackInstance final : public UMovieSceneTrackInstance
{
public:
	uint8                                         Pad_50[0x28];                                      // 0x0050(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneCameraCutTrackInstance">();
	}
	static class UMovieSceneCameraCutTrackInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneCameraCutTrackInstance>();
	}
};
static_assert(alignof(UMovieSceneCameraCutTrackInstance) == 0x000008, "Wrong alignment on UMovieSceneCameraCutTrackInstance");
static_assert(sizeof(UMovieSceneCameraCutTrackInstance) == 0x000078, "Wrong size on UMovieSceneCameraCutTrackInstance");

// Class MovieSceneTracks.MovieSceneCVarTrackInstance
// 0x0050 (0x00A0 - 0x0050)
class UMovieSceneCVarTrackInstance final : public UMovieSceneTrackInstance
{
public:
	uint8                                         Pad_50[0x50];                                      // 0x0050(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneCVarTrackInstance">();
	}
	static class UMovieSceneCVarTrackInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneCVarTrackInstance>();
	}
};
static_assert(alignof(UMovieSceneCVarTrackInstance) == 0x000008, "Wrong alignment on UMovieSceneCVarTrackInstance");
static_assert(sizeof(UMovieSceneCVarTrackInstance) == 0x0000A0, "Wrong size on UMovieSceneCVarTrackInstance");

// Class MovieSceneTracks.MovieScene3DConstraintTrack
// 0x0010 (0x00A8 - 0x0098)
class UMovieScene3DConstraintTrack : public UMovieSceneTrack
{
public:
	TArray<class UMovieSceneSection*>             ConstraintSections;                                // 0x0098(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScene3DConstraintTrack">();
	}
	static class UMovieScene3DConstraintTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScene3DConstraintTrack>();
	}
};
static_assert(alignof(UMovieScene3DConstraintTrack) == 0x000008, "Wrong alignment on UMovieScene3DConstraintTrack");
static_assert(sizeof(UMovieScene3DConstraintTrack) == 0x0000A8, "Wrong size on UMovieScene3DConstraintTrack");
static_assert(offsetof(UMovieScene3DConstraintTrack, ConstraintSections) == 0x000098, "Member 'UMovieScene3DConstraintTrack::ConstraintSections' has a wrong offset!");

// Class MovieSceneTracks.MovieScene3DAttachTrack
// 0x0000 (0x00A8 - 0x00A8)
class UMovieScene3DAttachTrack final : public UMovieScene3DConstraintTrack
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScene3DAttachTrack">();
	}
	static class UMovieScene3DAttachTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScene3DAttachTrack>();
	}
};
static_assert(alignof(UMovieScene3DAttachTrack) == 0x000008, "Wrong alignment on UMovieScene3DAttachTrack");
static_assert(sizeof(UMovieScene3DAttachTrack) == 0x0000A8, "Wrong size on UMovieScene3DAttachTrack");

// Class MovieSceneTracks.MovieScene3DPathTrack
// 0x0008 (0x00B0 - 0x00A8)
class UMovieScene3DPathTrack final : public UMovieScene3DConstraintTrack
{
public:
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScene3DPathTrack">();
	}
	static class UMovieScene3DPathTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScene3DPathTrack>();
	}
};
static_assert(alignof(UMovieScene3DPathTrack) == 0x000008, "Wrong alignment on UMovieScene3DPathTrack");
static_assert(sizeof(UMovieScene3DPathTrack) == 0x0000B0, "Wrong size on UMovieScene3DPathTrack");

// Class MovieSceneTracks.MovieScenePropertyTrack
// 0x0030 (0x00C8 - 0x0098)
class UMovieScenePropertyTrack : public UMovieSceneNameableTrack
{
public:
	class UMovieSceneSection*                     SectionToKey;                                      // 0x0098(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FMovieScenePropertyBinding             PropertyBinding;                                   // 0x00A0(0x0014)(NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMovieSceneSection*>             Sections;                                          // 0x00B8(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScenePropertyTrack">();
	}
	static class UMovieScenePropertyTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScenePropertyTrack>();
	}
};
static_assert(alignof(UMovieScenePropertyTrack) == 0x000008, "Wrong alignment on UMovieScenePropertyTrack");
static_assert(sizeof(UMovieScenePropertyTrack) == 0x0000C8, "Wrong size on UMovieScenePropertyTrack");
static_assert(offsetof(UMovieScenePropertyTrack, SectionToKey) == 0x000098, "Member 'UMovieScenePropertyTrack::SectionToKey' has a wrong offset!");
static_assert(offsetof(UMovieScenePropertyTrack, PropertyBinding) == 0x0000A0, "Member 'UMovieScenePropertyTrack::PropertyBinding' has a wrong offset!");
static_assert(offsetof(UMovieScenePropertyTrack, Sections) == 0x0000B8, "Member 'UMovieScenePropertyTrack::Sections' has a wrong offset!");

// Class MovieSceneTracks.MovieScene3DTransformTrack
// 0x0010 (0x00D8 - 0x00C8)
class UMovieScene3DTransformTrack final : public UMovieScenePropertyTrack
{
public:
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMovieSceneBlenderSystem>   BlenderSystemClass;                                // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScene3DTransformTrack">();
	}
	static class UMovieScene3DTransformTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScene3DTransformTrack>();
	}
};
static_assert(alignof(UMovieScene3DTransformTrack) == 0x000008, "Wrong alignment on UMovieScene3DTransformTrack");
static_assert(sizeof(UMovieScene3DTransformTrack) == 0x0000D8, "Wrong size on UMovieScene3DTransformTrack");
static_assert(offsetof(UMovieScene3DTransformTrack, BlenderSystemClass) == 0x0000D0, "Member 'UMovieScene3DTransformTrack::BlenderSystemClass' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneActorReferenceTrack
// 0x0008 (0x00D0 - 0x00C8)
class UMovieSceneActorReferenceTrack final : public UMovieScenePropertyTrack
{
public:
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneActorReferenceTrack">();
	}
	static class UMovieSceneActorReferenceTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneActorReferenceTrack>();
	}
};
static_assert(alignof(UMovieSceneActorReferenceTrack) == 0x000008, "Wrong alignment on UMovieSceneActorReferenceTrack");
static_assert(sizeof(UMovieSceneActorReferenceTrack) == 0x0000D0, "Wrong size on UMovieSceneActorReferenceTrack");

// Class MovieSceneTracks.MovieSceneAudioTrack
// 0x0010 (0x00A8 - 0x0098)
class UMovieSceneAudioTrack final : public UMovieSceneNameableTrack
{
public:
	TArray<class UMovieSceneSection*>             AudioSections;                                     // 0x0098(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneAudioTrack">();
	}
	static class UMovieSceneAudioTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneAudioTrack>();
	}
};
static_assert(alignof(UMovieSceneAudioTrack) == 0x000008, "Wrong alignment on UMovieSceneAudioTrack");
static_assert(sizeof(UMovieSceneAudioTrack) == 0x0000A8, "Wrong size on UMovieSceneAudioTrack");
static_assert(offsetof(UMovieSceneAudioTrack, AudioSections) == 0x000098, "Member 'UMovieSceneAudioTrack::AudioSections' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneBoolTrack
// 0x0008 (0x00D0 - 0x00C8)
class UMovieSceneBoolTrack final : public UMovieScenePropertyTrack
{
public:
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneBoolTrack">();
	}
	static class UMovieSceneBoolTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneBoolTrack>();
	}
};
static_assert(alignof(UMovieSceneBoolTrack) == 0x000008, "Wrong alignment on UMovieSceneBoolTrack");
static_assert(sizeof(UMovieSceneBoolTrack) == 0x0000D0, "Wrong size on UMovieSceneBoolTrack");

// Class MovieSceneTracks.MovieSceneByteTrack
// 0x0008 (0x00D0 - 0x00C8)
class UMovieSceneByteTrack final : public UMovieScenePropertyTrack
{
public:
	class UEnum*                                  Enum;                                              // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneByteTrack">();
	}
	static class UMovieSceneByteTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneByteTrack>();
	}
};
static_assert(alignof(UMovieSceneByteTrack) == 0x000008, "Wrong alignment on UMovieSceneByteTrack");
static_assert(sizeof(UMovieSceneByteTrack) == 0x0000D0, "Wrong size on UMovieSceneByteTrack");
static_assert(offsetof(UMovieSceneByteTrack, Enum) == 0x0000C8, "Member 'UMovieSceneByteTrack::Enum' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneCameraCutTrack
// 0x0020 (0x00B8 - 0x0098)
class UMovieSceneCameraCutTrack final : public UMovieSceneNameableTrack
{
public:
	bool                                          bCanBlend;                                         // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMovieSceneSection*>             Sections;                                          // 0x00A0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	bool                                          bAutoArrangeSections;                              // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneCameraCutTrack">();
	}
	static class UMovieSceneCameraCutTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneCameraCutTrack>();
	}
};
static_assert(alignof(UMovieSceneCameraCutTrack) == 0x000008, "Wrong alignment on UMovieSceneCameraCutTrack");
static_assert(sizeof(UMovieSceneCameraCutTrack) == 0x0000B8, "Wrong size on UMovieSceneCameraCutTrack");
static_assert(offsetof(UMovieSceneCameraCutTrack, bCanBlend) == 0x000098, "Member 'UMovieSceneCameraCutTrack::bCanBlend' has a wrong offset!");
static_assert(offsetof(UMovieSceneCameraCutTrack, Sections) == 0x0000A0, "Member 'UMovieSceneCameraCutTrack::Sections' has a wrong offset!");
static_assert(offsetof(UMovieSceneCameraCutTrack, bAutoArrangeSections) == 0x0000B0, "Member 'UMovieSceneCameraCutTrack::bAutoArrangeSections' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneCameraShakeSourceShakeTrack
// 0x0010 (0x00A8 - 0x0098)
class UMovieSceneCameraShakeSourceShakeTrack final : public UMovieSceneNameableTrack
{
public:
	TArray<class UMovieSceneSection*>             CameraShakeSections;                               // 0x0098(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneCameraShakeSourceShakeTrack">();
	}
	static class UMovieSceneCameraShakeSourceShakeTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneCameraShakeSourceShakeTrack>();
	}
};
static_assert(alignof(UMovieSceneCameraShakeSourceShakeTrack) == 0x000008, "Wrong alignment on UMovieSceneCameraShakeSourceShakeTrack");
static_assert(sizeof(UMovieSceneCameraShakeSourceShakeTrack) == 0x0000A8, "Wrong size on UMovieSceneCameraShakeSourceShakeTrack");
static_assert(offsetof(UMovieSceneCameraShakeSourceShakeTrack, CameraShakeSections) == 0x000098, "Member 'UMovieSceneCameraShakeSourceShakeTrack::CameraShakeSections' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneCameraShakeSourceTriggerTrack
// 0x0010 (0x00A8 - 0x0098)
class UMovieSceneCameraShakeSourceTriggerTrack final : public UMovieSceneTrack
{
public:
	TArray<class UMovieSceneSection*>             Sections;                                          // 0x0098(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneCameraShakeSourceTriggerTrack">();
	}
	static class UMovieSceneCameraShakeSourceTriggerTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneCameraShakeSourceTriggerTrack>();
	}
};
static_assert(alignof(UMovieSceneCameraShakeSourceTriggerTrack) == 0x000008, "Wrong alignment on UMovieSceneCameraShakeSourceTriggerTrack");
static_assert(sizeof(UMovieSceneCameraShakeSourceTriggerTrack) == 0x0000A8, "Wrong size on UMovieSceneCameraShakeSourceTriggerTrack");
static_assert(offsetof(UMovieSceneCameraShakeSourceTriggerTrack, Sections) == 0x000098, "Member 'UMovieSceneCameraShakeSourceTriggerTrack::Sections' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneCameraShakeTrack
// 0x0010 (0x00A8 - 0x0098)
class UMovieSceneCameraShakeTrack final : public UMovieSceneNameableTrack
{
public:
	TArray<class UMovieSceneSection*>             CameraShakeSections;                               // 0x0098(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneCameraShakeTrack">();
	}
	static class UMovieSceneCameraShakeTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneCameraShakeTrack>();
	}
};
static_assert(alignof(UMovieSceneCameraShakeTrack) == 0x000008, "Wrong alignment on UMovieSceneCameraShakeTrack");
static_assert(sizeof(UMovieSceneCameraShakeTrack) == 0x0000A8, "Wrong size on UMovieSceneCameraShakeTrack");
static_assert(offsetof(UMovieSceneCameraShakeTrack, CameraShakeSections) == 0x000098, "Member 'UMovieSceneCameraShakeTrack::CameraShakeSections' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneCinematicShotTrack
// 0x0000 (0x00A8 - 0x00A8)
class UMovieSceneCinematicShotTrack final : public UMovieSceneSubTrack
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneCinematicShotTrack">();
	}
	static class UMovieSceneCinematicShotTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneCinematicShotTrack>();
	}
};
static_assert(alignof(UMovieSceneCinematicShotTrack) == 0x000008, "Wrong alignment on UMovieSceneCinematicShotTrack");
static_assert(sizeof(UMovieSceneCinematicShotTrack) == 0x0000A8, "Wrong size on UMovieSceneCinematicShotTrack");

// Class MovieSceneTracks.MovieSceneColorTrack
// 0x0008 (0x00D0 - 0x00C8)
class UMovieSceneColorTrack final : public UMovieScenePropertyTrack
{
public:
	bool                                          bIsSlateColor;                                     // 0x00C8(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneColorTrack">();
	}
	static class UMovieSceneColorTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneColorTrack>();
	}
};
static_assert(alignof(UMovieSceneColorTrack) == 0x000008, "Wrong alignment on UMovieSceneColorTrack");
static_assert(sizeof(UMovieSceneColorTrack) == 0x0000D0, "Wrong size on UMovieSceneColorTrack");
static_assert(offsetof(UMovieSceneColorTrack, bIsSlateColor) == 0x0000C8, "Member 'UMovieSceneColorTrack::bIsSlateColor' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneCustomPrimitiveDataTrack
// 0x0028 (0x00C0 - 0x0098)
class UMovieSceneCustomPrimitiveDataTrack final : public UMovieSceneNameableTrack
{
public:
	uint8                                         Pad_98[0x10];                                      // 0x0098(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMovieSceneSection*>             Sections;                                          // 0x00A8(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	class UMovieSceneSection*                     SectionToKey;                                      // 0x00B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneCustomPrimitiveDataTrack">();
	}
	static class UMovieSceneCustomPrimitiveDataTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneCustomPrimitiveDataTrack>();
	}
};
static_assert(alignof(UMovieSceneCustomPrimitiveDataTrack) == 0x000008, "Wrong alignment on UMovieSceneCustomPrimitiveDataTrack");
static_assert(sizeof(UMovieSceneCustomPrimitiveDataTrack) == 0x0000C0, "Wrong size on UMovieSceneCustomPrimitiveDataTrack");
static_assert(offsetof(UMovieSceneCustomPrimitiveDataTrack, Sections) == 0x0000A8, "Member 'UMovieSceneCustomPrimitiveDataTrack::Sections' has a wrong offset!");
static_assert(offsetof(UMovieSceneCustomPrimitiveDataTrack, SectionToKey) == 0x0000B8, "Member 'UMovieSceneCustomPrimitiveDataTrack::SectionToKey' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneCVarTrack
// 0x0010 (0x00A8 - 0x0098)
class UMovieSceneCVarTrack final : public UMovieSceneNameableTrack
{
public:
	TArray<class UMovieSceneSection*>             Sections;                                          // 0x0098(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneCVarTrack">();
	}
	static class UMovieSceneCVarTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneCVarTrack>();
	}
};
static_assert(alignof(UMovieSceneCVarTrack) == 0x000008, "Wrong alignment on UMovieSceneCVarTrack");
static_assert(sizeof(UMovieSceneCVarTrack) == 0x0000A8, "Wrong size on UMovieSceneCVarTrack");
static_assert(offsetof(UMovieSceneCVarTrack, Sections) == 0x000098, "Member 'UMovieSceneCVarTrack::Sections' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneDataLayerTrack
// 0x0010 (0x00A8 - 0x0098)
class UMovieSceneDataLayerTrack final : public UMovieSceneNameableTrack
{
public:
	TArray<class UMovieSceneSection*>             Sections;                                          // 0x0098(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneDataLayerTrack">();
	}
	static class UMovieSceneDataLayerTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneDataLayerTrack>();
	}
};
static_assert(alignof(UMovieSceneDataLayerTrack) == 0x000008, "Wrong alignment on UMovieSceneDataLayerTrack");
static_assert(sizeof(UMovieSceneDataLayerTrack) == 0x0000A8, "Wrong size on UMovieSceneDataLayerTrack");
static_assert(offsetof(UMovieSceneDataLayerTrack, Sections) == 0x000098, "Member 'UMovieSceneDataLayerTrack::Sections' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneDoubleTrack
// 0x0000 (0x00C8 - 0x00C8)
class UMovieSceneDoubleTrack final : public UMovieScenePropertyTrack
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneDoubleTrack">();
	}
	static class UMovieSceneDoubleTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneDoubleTrack>();
	}
};
static_assert(alignof(UMovieSceneDoubleTrack) == 0x000008, "Wrong alignment on UMovieSceneDoubleTrack");
static_assert(sizeof(UMovieSceneDoubleTrack) == 0x0000C8, "Wrong size on UMovieSceneDoubleTrack");

// Class MovieSceneTracks.MovieSceneEnumTrack
// 0x0008 (0x00D0 - 0x00C8)
class UMovieSceneEnumTrack final : public UMovieScenePropertyTrack
{
public:
	class UEnum*                                  Enum;                                              // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneEnumTrack">();
	}
	static class UMovieSceneEnumTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneEnumTrack>();
	}
};
static_assert(alignof(UMovieSceneEnumTrack) == 0x000008, "Wrong alignment on UMovieSceneEnumTrack");
static_assert(sizeof(UMovieSceneEnumTrack) == 0x0000D0, "Wrong size on UMovieSceneEnumTrack");
static_assert(offsetof(UMovieSceneEnumTrack, Enum) == 0x0000C8, "Member 'UMovieSceneEnumTrack::Enum' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneEulerTransformTrack
// 0x0000 (0x00C8 - 0x00C8)
class UMovieSceneEulerTransformTrack final : public UMovieScenePropertyTrack
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneEulerTransformTrack">();
	}
	static class UMovieSceneEulerTransformTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneEulerTransformTrack>();
	}
};
static_assert(alignof(UMovieSceneEulerTransformTrack) == 0x000008, "Wrong alignment on UMovieSceneEulerTransformTrack");
static_assert(sizeof(UMovieSceneEulerTransformTrack) == 0x0000C8, "Wrong size on UMovieSceneEulerTransformTrack");

// Class MovieSceneTracks.MovieSceneEventTrack
// 0x0028 (0x00C0 - 0x0098)
class UMovieSceneEventTrack final : public UMovieSceneNameableTrack
{
public:
	uint8                                         Pad_98[0x10];                                      // 0x0098(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bFireEventsWhenForwards : 1;                       // 0x00A8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFireEventsWhenBackwards : 1;                      // 0x00A8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EFireEventsAtPosition                         EventPosition;                                     // 0x00AC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMovieSceneSection*>             Sections;                                          // 0x00B0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneEventTrack">();
	}
	static class UMovieSceneEventTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneEventTrack>();
	}
};
static_assert(alignof(UMovieSceneEventTrack) == 0x000008, "Wrong alignment on UMovieSceneEventTrack");
static_assert(sizeof(UMovieSceneEventTrack) == 0x0000C0, "Wrong size on UMovieSceneEventTrack");
static_assert(offsetof(UMovieSceneEventTrack, EventPosition) == 0x0000AC, "Member 'UMovieSceneEventTrack::EventPosition' has a wrong offset!");
static_assert(offsetof(UMovieSceneEventTrack, Sections) == 0x0000B0, "Member 'UMovieSceneEventTrack::Sections' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneFloatTrack
// 0x0000 (0x00C8 - 0x00C8)
class UMovieSceneFloatTrack : public UMovieScenePropertyTrack
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneFloatTrack">();
	}
	static class UMovieSceneFloatTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneFloatTrack>();
	}
};
static_assert(alignof(UMovieSceneFloatTrack) == 0x000008, "Wrong alignment on UMovieSceneFloatTrack");
static_assert(sizeof(UMovieSceneFloatTrack) == 0x0000C8, "Wrong size on UMovieSceneFloatTrack");

// Class MovieSceneTracks.MovieSceneFadeTrack
// 0x0000 (0x00C8 - 0x00C8)
class UMovieSceneFadeTrack final : public UMovieSceneFloatTrack
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneFadeTrack">();
	}
	static class UMovieSceneFadeTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneFadeTrack>();
	}
};
static_assert(alignof(UMovieSceneFadeTrack) == 0x000008, "Wrong alignment on UMovieSceneFadeTrack");
static_assert(sizeof(UMovieSceneFadeTrack) == 0x0000C8, "Wrong size on UMovieSceneFadeTrack");

// Class MovieSceneTracks.MovieSceneIntegerTrack
// 0x0000 (0x00C8 - 0x00C8)
class UMovieSceneIntegerTrack final : public UMovieScenePropertyTrack
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneIntegerTrack">();
	}
	static class UMovieSceneIntegerTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneIntegerTrack>();
	}
};
static_assert(alignof(UMovieSceneIntegerTrack) == 0x000008, "Wrong alignment on UMovieSceneIntegerTrack");
static_assert(sizeof(UMovieSceneIntegerTrack) == 0x0000C8, "Wrong size on UMovieSceneIntegerTrack");

// Class MovieSceneTracks.MovieSceneLevelVisibilityTrack
// 0x0010 (0x00A8 - 0x0098)
class UMovieSceneLevelVisibilityTrack final : public UMovieSceneNameableTrack
{
public:
	TArray<class UMovieSceneSection*>             Sections;                                          // 0x0098(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneLevelVisibilityTrack">();
	}
	static class UMovieSceneLevelVisibilityTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneLevelVisibilityTrack>();
	}
};
static_assert(alignof(UMovieSceneLevelVisibilityTrack) == 0x000008, "Wrong alignment on UMovieSceneLevelVisibilityTrack");
static_assert(sizeof(UMovieSceneLevelVisibilityTrack) == 0x0000A8, "Wrong size on UMovieSceneLevelVisibilityTrack");
static_assert(offsetof(UMovieSceneLevelVisibilityTrack, Sections) == 0x000098, "Member 'UMovieSceneLevelVisibilityTrack::Sections' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneMaterialTrack
// 0x0018 (0x00B0 - 0x0098)
class UMovieSceneMaterialTrack : public UMovieSceneNameableTrack
{
public:
	TArray<class UMovieSceneSection*>             Sections;                                          // 0x0098(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	class UMovieSceneSection*                     SectionToKey;                                      // 0x00A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneMaterialTrack">();
	}
	static class UMovieSceneMaterialTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneMaterialTrack>();
	}
};
static_assert(alignof(UMovieSceneMaterialTrack) == 0x000008, "Wrong alignment on UMovieSceneMaterialTrack");
static_assert(sizeof(UMovieSceneMaterialTrack) == 0x0000B0, "Wrong size on UMovieSceneMaterialTrack");
static_assert(offsetof(UMovieSceneMaterialTrack, Sections) == 0x000098, "Member 'UMovieSceneMaterialTrack::Sections' has a wrong offset!");
static_assert(offsetof(UMovieSceneMaterialTrack, SectionToKey) == 0x0000A8, "Member 'UMovieSceneMaterialTrack::SectionToKey' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneMaterialParameterCollectionTrack
// 0x0018 (0x00C8 - 0x00B0)
class UMovieSceneMaterialParameterCollectionTrack final : public UMovieSceneMaterialTrack
{
public:
	uint8                                         Pad_B0[0x10];                                      // 0x00B0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialParameterCollection*           MPC;                                               // 0x00C0(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneMaterialParameterCollectionTrack">();
	}
	static class UMovieSceneMaterialParameterCollectionTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneMaterialParameterCollectionTrack>();
	}
};
static_assert(alignof(UMovieSceneMaterialParameterCollectionTrack) == 0x000008, "Wrong alignment on UMovieSceneMaterialParameterCollectionTrack");
static_assert(sizeof(UMovieSceneMaterialParameterCollectionTrack) == 0x0000C8, "Wrong size on UMovieSceneMaterialParameterCollectionTrack");
static_assert(offsetof(UMovieSceneMaterialParameterCollectionTrack, MPC) == 0x0000C0, "Member 'UMovieSceneMaterialParameterCollectionTrack::MPC' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneComponentMaterialTrack
// 0x0020 (0x00D0 - 0x00B0)
class UMovieSceneComponentMaterialTrack final : public UMovieSceneMaterialTrack
{
public:
	uint8                                         Pad_B0[0x10];                                      // 0x00B0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FComponentMaterialInfo                 MaterialInfo;                                      // 0x00C0(0x0010)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneComponentMaterialTrack">();
	}
	static class UMovieSceneComponentMaterialTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneComponentMaterialTrack>();
	}
};
static_assert(alignof(UMovieSceneComponentMaterialTrack) == 0x000008, "Wrong alignment on UMovieSceneComponentMaterialTrack");
static_assert(sizeof(UMovieSceneComponentMaterialTrack) == 0x0000D0, "Wrong size on UMovieSceneComponentMaterialTrack");
static_assert(offsetof(UMovieSceneComponentMaterialTrack, MaterialInfo) == 0x0000C0, "Member 'UMovieSceneComponentMaterialTrack::MaterialInfo' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneObjectPropertyTrack
// 0x0008 (0x00D0 - 0x00C8)
class UMovieSceneObjectPropertyTrack final : public UMovieScenePropertyTrack
{
public:
	TSubclassOf<class UObject>                    PropertyClass;                                     // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneObjectPropertyTrack">();
	}
	static class UMovieSceneObjectPropertyTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneObjectPropertyTrack>();
	}
};
static_assert(alignof(UMovieSceneObjectPropertyTrack) == 0x000008, "Wrong alignment on UMovieSceneObjectPropertyTrack");
static_assert(sizeof(UMovieSceneObjectPropertyTrack) == 0x0000D0, "Wrong size on UMovieSceneObjectPropertyTrack");
static_assert(offsetof(UMovieSceneObjectPropertyTrack, PropertyClass) == 0x0000C8, "Member 'UMovieSceneObjectPropertyTrack::PropertyClass' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneParticleParameterTrack
// 0x0018 (0x00B0 - 0x0098)
class UMovieSceneParticleParameterTrack final : public UMovieSceneNameableTrack
{
public:
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMovieSceneSection*>             Sections;                                          // 0x00A0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneParticleParameterTrack">();
	}
	static class UMovieSceneParticleParameterTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneParticleParameterTrack>();
	}
};
static_assert(alignof(UMovieSceneParticleParameterTrack) == 0x000008, "Wrong alignment on UMovieSceneParticleParameterTrack");
static_assert(sizeof(UMovieSceneParticleParameterTrack) == 0x0000B0, "Wrong size on UMovieSceneParticleParameterTrack");
static_assert(offsetof(UMovieSceneParticleParameterTrack, Sections) == 0x0000A0, "Member 'UMovieSceneParticleParameterTrack::Sections' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneParticleTrack
// 0x0018 (0x00B0 - 0x0098)
class UMovieSceneParticleTrack final : public UMovieSceneNameableTrack
{
public:
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMovieSceneSection*>             ParticleSections;                                  // 0x00A0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneParticleTrack">();
	}
	static class UMovieSceneParticleTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneParticleTrack>();
	}
};
static_assert(alignof(UMovieSceneParticleTrack) == 0x000008, "Wrong alignment on UMovieSceneParticleTrack");
static_assert(sizeof(UMovieSceneParticleTrack) == 0x0000B0, "Wrong size on UMovieSceneParticleTrack");
static_assert(offsetof(UMovieSceneParticleTrack, ParticleSections) == 0x0000A0, "Member 'UMovieSceneParticleTrack::ParticleSections' has a wrong offset!");

// Class MovieSceneTracks.MovieScenePrimitiveMaterialTrack
// 0x0010 (0x00D8 - 0x00C8)
class UMovieScenePrimitiveMaterialTrack final : public UMovieScenePropertyTrack
{
public:
	struct FComponentMaterialInfo                 MaterialInfo;                                      // 0x00C8(0x0010)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScenePrimitiveMaterialTrack">();
	}
	static class UMovieScenePrimitiveMaterialTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScenePrimitiveMaterialTrack>();
	}
};
static_assert(alignof(UMovieScenePrimitiveMaterialTrack) == 0x000008, "Wrong alignment on UMovieScenePrimitiveMaterialTrack");
static_assert(sizeof(UMovieScenePrimitiveMaterialTrack) == 0x0000D8, "Wrong size on UMovieScenePrimitiveMaterialTrack");
static_assert(offsetof(UMovieScenePrimitiveMaterialTrack, MaterialInfo) == 0x0000C8, "Member 'UMovieScenePrimitiveMaterialTrack::MaterialInfo' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneSkeletalAnimationTrack
// 0x00A8 (0x0140 - 0x0098)
class UMovieSceneSkeletalAnimationTrack final : public UMovieSceneNameableTrack
{
public:
	TArray<class UMovieSceneSection*>             AnimationSections;                                 // 0x0098(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bUseLegacySectionIndexBlend;                       // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneSkeletalAnimRootMotionTrackParams RootMotionParams;                                  // 0x00B0(0x0080)(NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bBlendFirstChildOfRoot;                            // 0x0130(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESwapRootBone                                 SwapRootBone;                                      // 0x0131(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_132[0xE];                                      // 0x0132(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetSwapRootBone(ESwapRootBone InValue);

	ESwapRootBone GetSwapRootBone() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneSkeletalAnimationTrack">();
	}
	static class UMovieSceneSkeletalAnimationTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneSkeletalAnimationTrack>();
	}
};
static_assert(alignof(UMovieSceneSkeletalAnimationTrack) == 0x000010, "Wrong alignment on UMovieSceneSkeletalAnimationTrack");
static_assert(sizeof(UMovieSceneSkeletalAnimationTrack) == 0x000140, "Wrong size on UMovieSceneSkeletalAnimationTrack");
static_assert(offsetof(UMovieSceneSkeletalAnimationTrack, AnimationSections) == 0x000098, "Member 'UMovieSceneSkeletalAnimationTrack::AnimationSections' has a wrong offset!");
static_assert(offsetof(UMovieSceneSkeletalAnimationTrack, bUseLegacySectionIndexBlend) == 0x0000A8, "Member 'UMovieSceneSkeletalAnimationTrack::bUseLegacySectionIndexBlend' has a wrong offset!");
static_assert(offsetof(UMovieSceneSkeletalAnimationTrack, RootMotionParams) == 0x0000B0, "Member 'UMovieSceneSkeletalAnimationTrack::RootMotionParams' has a wrong offset!");
static_assert(offsetof(UMovieSceneSkeletalAnimationTrack, bBlendFirstChildOfRoot) == 0x000130, "Member 'UMovieSceneSkeletalAnimationTrack::bBlendFirstChildOfRoot' has a wrong offset!");
static_assert(offsetof(UMovieSceneSkeletalAnimationTrack, SwapRootBone) == 0x000131, "Member 'UMovieSceneSkeletalAnimationTrack::SwapRootBone' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneSlomoTrack
// 0x0000 (0x00C8 - 0x00C8)
class UMovieSceneSlomoTrack final : public UMovieSceneFloatTrack
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneSlomoTrack">();
	}
	static class UMovieSceneSlomoTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneSlomoTrack>();
	}
};
static_assert(alignof(UMovieSceneSlomoTrack) == 0x000008, "Wrong alignment on UMovieSceneSlomoTrack");
static_assert(sizeof(UMovieSceneSlomoTrack) == 0x0000C8, "Wrong size on UMovieSceneSlomoTrack");

// Class MovieSceneTracks.MovieSceneStringTrack
// 0x0000 (0x00C8 - 0x00C8)
class UMovieSceneStringTrack final : public UMovieScenePropertyTrack
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneStringTrack">();
	}
	static class UMovieSceneStringTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneStringTrack>();
	}
};
static_assert(alignof(UMovieSceneStringTrack) == 0x000008, "Wrong alignment on UMovieSceneStringTrack");
static_assert(sizeof(UMovieSceneStringTrack) == 0x0000C8, "Wrong size on UMovieSceneStringTrack");

// Class MovieSceneTracks.MovieSceneTransformTrack
// 0x0000 (0x00C8 - 0x00C8)
class UMovieSceneTransformTrack final : public UMovieScenePropertyTrack
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneTransformTrack">();
	}
	static class UMovieSceneTransformTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneTransformTrack>();
	}
};
static_assert(alignof(UMovieSceneTransformTrack) == 0x000008, "Wrong alignment on UMovieSceneTransformTrack");
static_assert(sizeof(UMovieSceneTransformTrack) == 0x0000C8, "Wrong size on UMovieSceneTransformTrack");

// Class MovieSceneTracks.MovieSceneFloatVectorTrack
// 0x0008 (0x00D0 - 0x00C8)
class UMovieSceneFloatVectorTrack final : public UMovieScenePropertyTrack
{
public:
	int32                                         NumChannelsUsed;                                   // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneFloatVectorTrack">();
	}
	static class UMovieSceneFloatVectorTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneFloatVectorTrack>();
	}
};
static_assert(alignof(UMovieSceneFloatVectorTrack) == 0x000008, "Wrong alignment on UMovieSceneFloatVectorTrack");
static_assert(sizeof(UMovieSceneFloatVectorTrack) == 0x0000D0, "Wrong size on UMovieSceneFloatVectorTrack");
static_assert(offsetof(UMovieSceneFloatVectorTrack, NumChannelsUsed) == 0x0000C8, "Member 'UMovieSceneFloatVectorTrack::NumChannelsUsed' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneDoubleVectorTrack
// 0x0008 (0x00D0 - 0x00C8)
class UMovieSceneDoubleVectorTrack final : public UMovieScenePropertyTrack
{
public:
	int32                                         NumChannelsUsed;                                   // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneDoubleVectorTrack">();
	}
	static class UMovieSceneDoubleVectorTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneDoubleVectorTrack>();
	}
};
static_assert(alignof(UMovieSceneDoubleVectorTrack) == 0x000008, "Wrong alignment on UMovieSceneDoubleVectorTrack");
static_assert(sizeof(UMovieSceneDoubleVectorTrack) == 0x0000D0, "Wrong size on UMovieSceneDoubleVectorTrack");
static_assert(offsetof(UMovieSceneDoubleVectorTrack, NumChannelsUsed) == 0x0000C8, "Member 'UMovieSceneDoubleVectorTrack::NumChannelsUsed' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneVisibilityTrack
// 0x0000 (0x00C8 - 0x00C8)
class UMovieSceneVisibilityTrack final : public UMovieScenePropertyTrack
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneVisibilityTrack">();
	}
	static class UMovieSceneVisibilityTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneVisibilityTrack>();
	}
};
static_assert(alignof(UMovieSceneVisibilityTrack) == 0x000008, "Wrong alignment on UMovieSceneVisibilityTrack");
static_assert(sizeof(UMovieSceneVisibilityTrack) == 0x0000C8, "Wrong size on UMovieSceneVisibilityTrack");

}

