#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PropWitchHuntModule

#include "Basic.hpp"

#include "OnlineSubsystemUtils_structs.hpp"
#include "InputCore_structs.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "PropWitchHuntModule_structs.hpp"
#include "MasterServerPlugin_structs.hpp"
#include "AdvancedSessions_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "NetCore_structs.hpp"


namespace SDK::Params
{

// Function PropWitchHuntModule.BaseManager.Initialize
// 0x0008 (0x0008 - 0x0000)
struct BaseManager_Initialize final
{
public:
	class UGameInstance*                          InGameInstance;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseManager_Initialize) == 0x000008, "Wrong alignment on BaseManager_Initialize");
static_assert(sizeof(BaseManager_Initialize) == 0x000008, "Wrong size on BaseManager_Initialize");
static_assert(offsetof(BaseManager_Initialize, InGameInstance) == 0x000000, "Member 'BaseManager_Initialize::InGameInstance' has a wrong offset!");

// Function PropWitchHuntModule.BaseSkill.CanActivate
// 0x0001 (0x0001 - 0x0000)
struct BaseSkill_CanActivate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseSkill_CanActivate) == 0x000001, "Wrong alignment on BaseSkill_CanActivate");
static_assert(sizeof(BaseSkill_CanActivate) == 0x000001, "Wrong size on BaseSkill_CanActivate");
static_assert(offsetof(BaseSkill_CanActivate, ReturnValue) == 0x000000, "Member 'BaseSkill_CanActivate::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.BaseSkill.SetCurrentCooldown
// 0x0004 (0x0004 - 0x0000)
struct BaseSkill_SetCurrentCooldown final
{
public:
	float                                         NewCooldown;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseSkill_SetCurrentCooldown) == 0x000004, "Wrong alignment on BaseSkill_SetCurrentCooldown");
static_assert(sizeof(BaseSkill_SetCurrentCooldown) == 0x000004, "Wrong size on BaseSkill_SetCurrentCooldown");
static_assert(offsetof(BaseSkill_SetCurrentCooldown, NewCooldown) == 0x000000, "Member 'BaseSkill_SetCurrentCooldown::NewCooldown' has a wrong offset!");

// Function PropWitchHuntModule.BaseSkill.SetCurrentCooldownClient
// 0x0004 (0x0004 - 0x0000)
struct BaseSkill_SetCurrentCooldownClient final
{
public:
	float                                         NewCooldown;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseSkill_SetCurrentCooldownClient) == 0x000004, "Wrong alignment on BaseSkill_SetCurrentCooldownClient");
static_assert(sizeof(BaseSkill_SetCurrentCooldownClient) == 0x000004, "Wrong size on BaseSkill_SetCurrentCooldownClient");
static_assert(offsetof(BaseSkill_SetCurrentCooldownClient, NewCooldown) == 0x000000, "Member 'BaseSkill_SetCurrentCooldownClient::NewCooldown' has a wrong offset!");

// Function PropWitchHuntModule.BaseSkill.SetCurrentCooldownServer
// 0x0004 (0x0004 - 0x0000)
struct BaseSkill_SetCurrentCooldownServer final
{
public:
	float                                         NewCooldown;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseSkill_SetCurrentCooldownServer) == 0x000004, "Wrong alignment on BaseSkill_SetCurrentCooldownServer");
static_assert(sizeof(BaseSkill_SetCurrentCooldownServer) == 0x000004, "Wrong size on BaseSkill_SetCurrentCooldownServer");
static_assert(offsetof(BaseSkill_SetCurrentCooldownServer, NewCooldown) == 0x000000, "Member 'BaseSkill_SetCurrentCooldownServer::NewCooldown' has a wrong offset!");

// Function PropWitchHuntModule.BeaconHostManagerActor.GetBeaconHost
// 0x0008 (0x0008 - 0x0000)
struct BeaconHostManagerActor_GetBeaconHost final
{
public:
	class AWitchItBeaconHostObject*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeaconHostManagerActor_GetBeaconHost) == 0x000008, "Wrong alignment on BeaconHostManagerActor_GetBeaconHost");
static_assert(sizeof(BeaconHostManagerActor_GetBeaconHost) == 0x000008, "Wrong size on BeaconHostManagerActor_GetBeaconHost");
static_assert(offsetof(BeaconHostManagerActor_GetBeaconHost, ReturnValue) == 0x000000, "Member 'BeaconHostManagerActor_GetBeaconHost::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.BeaconHostManagerActor.InitializeBeaconHost
// 0x0001 (0x0001 - 0x0000)
struct BeaconHostManagerActor_InitializeBeaconHost final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeaconHostManagerActor_InitializeBeaconHost) == 0x000001, "Wrong alignment on BeaconHostManagerActor_InitializeBeaconHost");
static_assert(sizeof(BeaconHostManagerActor_InitializeBeaconHost) == 0x000001, "Wrong size on BeaconHostManagerActor_InitializeBeaconHost");
static_assert(offsetof(BeaconHostManagerActor_InitializeBeaconHost, ReturnValue) == 0x000000, "Member 'BeaconHostManagerActor_InitializeBeaconHost::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.BeaconSubsystem.ConnectToHost
// 0x0018 (0x0018 - 0x0000)
struct BeaconSubsystem_ConnectToHost final
{
public:
	class FString                                 HostAddress;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AWitchItBeaconClient*                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeaconSubsystem_ConnectToHost) == 0x000008, "Wrong alignment on BeaconSubsystem_ConnectToHost");
static_assert(sizeof(BeaconSubsystem_ConnectToHost) == 0x000018, "Wrong size on BeaconSubsystem_ConnectToHost");
static_assert(offsetof(BeaconSubsystem_ConnectToHost, HostAddress) == 0x000000, "Member 'BeaconSubsystem_ConnectToHost::HostAddress' has a wrong offset!");
static_assert(offsetof(BeaconSubsystem_ConnectToHost, ReturnValue) == 0x000010, "Member 'BeaconSubsystem_ConnectToHost::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.BitmaskLibrary.ClearBit
// 0x000C (0x000C - 0x0000)
struct BitmaskLibrary_ClearBit final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Pos;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BitmaskLibrary_ClearBit) == 0x000004, "Wrong alignment on BitmaskLibrary_ClearBit");
static_assert(sizeof(BitmaskLibrary_ClearBit) == 0x00000C, "Wrong size on BitmaskLibrary_ClearBit");
static_assert(offsetof(BitmaskLibrary_ClearBit, Value) == 0x000000, "Member 'BitmaskLibrary_ClearBit::Value' has a wrong offset!");
static_assert(offsetof(BitmaskLibrary_ClearBit, Pos) == 0x000004, "Member 'BitmaskLibrary_ClearBit::Pos' has a wrong offset!");
static_assert(offsetof(BitmaskLibrary_ClearBit, ReturnValue) == 0x000008, "Member 'BitmaskLibrary_ClearBit::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.BitmaskLibrary.IsBitSet
// 0x000C (0x000C - 0x0000)
struct BitmaskLibrary_IsBitSet final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Pos;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BitmaskLibrary_IsBitSet) == 0x000004, "Wrong alignment on BitmaskLibrary_IsBitSet");
static_assert(sizeof(BitmaskLibrary_IsBitSet) == 0x00000C, "Wrong size on BitmaskLibrary_IsBitSet");
static_assert(offsetof(BitmaskLibrary_IsBitSet, Value) == 0x000000, "Member 'BitmaskLibrary_IsBitSet::Value' has a wrong offset!");
static_assert(offsetof(BitmaskLibrary_IsBitSet, Pos) == 0x000004, "Member 'BitmaskLibrary_IsBitSet::Pos' has a wrong offset!");
static_assert(offsetof(BitmaskLibrary_IsBitSet, ReturnValue) == 0x000008, "Member 'BitmaskLibrary_IsBitSet::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.BitmaskLibrary.LeftShift
// 0x000C (0x000C - 0x0000)
struct BitmaskLibrary_LeftShift final
{
public:
	int32                                         BaseValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Shift;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BitmaskLibrary_LeftShift) == 0x000004, "Wrong alignment on BitmaskLibrary_LeftShift");
static_assert(sizeof(BitmaskLibrary_LeftShift) == 0x00000C, "Wrong size on BitmaskLibrary_LeftShift");
static_assert(offsetof(BitmaskLibrary_LeftShift, BaseValue) == 0x000000, "Member 'BitmaskLibrary_LeftShift::BaseValue' has a wrong offset!");
static_assert(offsetof(BitmaskLibrary_LeftShift, Shift) == 0x000004, "Member 'BitmaskLibrary_LeftShift::Shift' has a wrong offset!");
static_assert(offsetof(BitmaskLibrary_LeftShift, ReturnValue) == 0x000008, "Member 'BitmaskLibrary_LeftShift::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.BitmaskLibrary.RightShift
// 0x000C (0x000C - 0x0000)
struct BitmaskLibrary_RightShift final
{
public:
	int32                                         BaseValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Shift;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BitmaskLibrary_RightShift) == 0x000004, "Wrong alignment on BitmaskLibrary_RightShift");
static_assert(sizeof(BitmaskLibrary_RightShift) == 0x00000C, "Wrong size on BitmaskLibrary_RightShift");
static_assert(offsetof(BitmaskLibrary_RightShift, BaseValue) == 0x000000, "Member 'BitmaskLibrary_RightShift::BaseValue' has a wrong offset!");
static_assert(offsetof(BitmaskLibrary_RightShift, Shift) == 0x000004, "Member 'BitmaskLibrary_RightShift::Shift' has a wrong offset!");
static_assert(offsetof(BitmaskLibrary_RightShift, ReturnValue) == 0x000008, "Member 'BitmaskLibrary_RightShift::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.BitmaskLibrary.SetBit
// 0x000C (0x000C - 0x0000)
struct BitmaskLibrary_SetBit final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Pos;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BitmaskLibrary_SetBit) == 0x000004, "Wrong alignment on BitmaskLibrary_SetBit");
static_assert(sizeof(BitmaskLibrary_SetBit) == 0x00000C, "Wrong size on BitmaskLibrary_SetBit");
static_assert(offsetof(BitmaskLibrary_SetBit, Value) == 0x000000, "Member 'BitmaskLibrary_SetBit::Value' has a wrong offset!");
static_assert(offsetof(BitmaskLibrary_SetBit, Pos) == 0x000004, "Member 'BitmaskLibrary_SetBit::Pos' has a wrong offset!");
static_assert(offsetof(BitmaskLibrary_SetBit, ReturnValue) == 0x000008, "Member 'BitmaskLibrary_SetBit::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.BitmaskLibrary.ToggleBit
// 0x000C (0x000C - 0x0000)
struct BitmaskLibrary_ToggleBit final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Pos;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BitmaskLibrary_ToggleBit) == 0x000004, "Wrong alignment on BitmaskLibrary_ToggleBit");
static_assert(sizeof(BitmaskLibrary_ToggleBit) == 0x00000C, "Wrong size on BitmaskLibrary_ToggleBit");
static_assert(offsetof(BitmaskLibrary_ToggleBit, Value) == 0x000000, "Member 'BitmaskLibrary_ToggleBit::Value' has a wrong offset!");
static_assert(offsetof(BitmaskLibrary_ToggleBit, Pos) == 0x000004, "Member 'BitmaskLibrary_ToggleBit::Pos' has a wrong offset!");
static_assert(offsetof(BitmaskLibrary_ToggleBit, ReturnValue) == 0x000008, "Member 'BitmaskLibrary_ToggleBit::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.BpAudioSettingsLibrary.LoadSoundVolumes
// 0x0018 (0x0018 - 0x0000)
struct BpAudioSettingsLibrary_LoadSoundVolumes final
{
public:
	float                                         Master;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Sound;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Music;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ambient;                                           // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UserInterface;                                     // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VoiceChat;                                         // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BpAudioSettingsLibrary_LoadSoundVolumes) == 0x000004, "Wrong alignment on BpAudioSettingsLibrary_LoadSoundVolumes");
static_assert(sizeof(BpAudioSettingsLibrary_LoadSoundVolumes) == 0x000018, "Wrong size on BpAudioSettingsLibrary_LoadSoundVolumes");
static_assert(offsetof(BpAudioSettingsLibrary_LoadSoundVolumes, Master) == 0x000000, "Member 'BpAudioSettingsLibrary_LoadSoundVolumes::Master' has a wrong offset!");
static_assert(offsetof(BpAudioSettingsLibrary_LoadSoundVolumes, Sound) == 0x000004, "Member 'BpAudioSettingsLibrary_LoadSoundVolumes::Sound' has a wrong offset!");
static_assert(offsetof(BpAudioSettingsLibrary_LoadSoundVolumes, Music) == 0x000008, "Member 'BpAudioSettingsLibrary_LoadSoundVolumes::Music' has a wrong offset!");
static_assert(offsetof(BpAudioSettingsLibrary_LoadSoundVolumes, Ambient) == 0x00000C, "Member 'BpAudioSettingsLibrary_LoadSoundVolumes::Ambient' has a wrong offset!");
static_assert(offsetof(BpAudioSettingsLibrary_LoadSoundVolumes, UserInterface) == 0x000010, "Member 'BpAudioSettingsLibrary_LoadSoundVolumes::UserInterface' has a wrong offset!");
static_assert(offsetof(BpAudioSettingsLibrary_LoadSoundVolumes, VoiceChat) == 0x000014, "Member 'BpAudioSettingsLibrary_LoadSoundVolumes::VoiceChat' has a wrong offset!");

// Function PropWitchHuntModule.BpAudioSettingsLibrary.SaveSoundVolumes
// 0x0018 (0x0018 - 0x0000)
struct BpAudioSettingsLibrary_SaveSoundVolumes final
{
public:
	float                                         Master;                                            // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Sound;                                             // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Music;                                             // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ambient;                                           // 0x000C(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UserInterface;                                     // 0x0010(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VoiceChat;                                         // 0x0014(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BpAudioSettingsLibrary_SaveSoundVolumes) == 0x000004, "Wrong alignment on BpAudioSettingsLibrary_SaveSoundVolumes");
static_assert(sizeof(BpAudioSettingsLibrary_SaveSoundVolumes) == 0x000018, "Wrong size on BpAudioSettingsLibrary_SaveSoundVolumes");
static_assert(offsetof(BpAudioSettingsLibrary_SaveSoundVolumes, Master) == 0x000000, "Member 'BpAudioSettingsLibrary_SaveSoundVolumes::Master' has a wrong offset!");
static_assert(offsetof(BpAudioSettingsLibrary_SaveSoundVolumes, Sound) == 0x000004, "Member 'BpAudioSettingsLibrary_SaveSoundVolumes::Sound' has a wrong offset!");
static_assert(offsetof(BpAudioSettingsLibrary_SaveSoundVolumes, Music) == 0x000008, "Member 'BpAudioSettingsLibrary_SaveSoundVolumes::Music' has a wrong offset!");
static_assert(offsetof(BpAudioSettingsLibrary_SaveSoundVolumes, Ambient) == 0x00000C, "Member 'BpAudioSettingsLibrary_SaveSoundVolumes::Ambient' has a wrong offset!");
static_assert(offsetof(BpAudioSettingsLibrary_SaveSoundVolumes, UserInterface) == 0x000010, "Member 'BpAudioSettingsLibrary_SaveSoundVolumes::UserInterface' has a wrong offset!");
static_assert(offsetof(BpAudioSettingsLibrary_SaveSoundVolumes, VoiceChat) == 0x000014, "Member 'BpAudioSettingsLibrary_SaveSoundVolumes::VoiceChat' has a wrong offset!");

// Function PropWitchHuntModule.BpInputSettingsLibrary.AddActionKeyBinding
// 0x0028 (0x0028 - 0x0000)
struct BpInputSettingsLibrary_AddActionKeyBinding final
{
public:
	struct FInputActionKeyMapping                 ActionToAdd;                                       // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BpInputSettingsLibrary_AddActionKeyBinding) == 0x000008, "Wrong alignment on BpInputSettingsLibrary_AddActionKeyBinding");
static_assert(sizeof(BpInputSettingsLibrary_AddActionKeyBinding) == 0x000028, "Wrong size on BpInputSettingsLibrary_AddActionKeyBinding");
static_assert(offsetof(BpInputSettingsLibrary_AddActionKeyBinding, ActionToAdd) == 0x000000, "Member 'BpInputSettingsLibrary_AddActionKeyBinding::ActionToAdd' has a wrong offset!");

// Function PropWitchHuntModule.BpInputSettingsLibrary.AddAxisKeyBinding
// 0x0028 (0x0028 - 0x0000)
struct BpInputSettingsLibrary_AddAxisKeyBinding final
{
public:
	struct FInputAxisKeyMapping                   AxisToAdd;                                         // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BpInputSettingsLibrary_AddAxisKeyBinding) == 0x000008, "Wrong alignment on BpInputSettingsLibrary_AddAxisKeyBinding");
static_assert(sizeof(BpInputSettingsLibrary_AddAxisKeyBinding) == 0x000028, "Wrong size on BpInputSettingsLibrary_AddAxisKeyBinding");
static_assert(offsetof(BpInputSettingsLibrary_AddAxisKeyBinding, AxisToAdd) == 0x000000, "Member 'BpInputSettingsLibrary_AddAxisKeyBinding::AxisToAdd' has a wrong offset!");

// Function PropWitchHuntModule.BpInputSettingsLibrary.ChangeActionKeyBinding
// 0x0040 (0x0040 - 0x0000)
struct BpInputSettingsLibrary_ChangeActionKeyBinding final
{
public:
	struct FInputActionKeyMapping                 ActionToChange;                                    // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
	struct FKey                                   NewKey;                                            // 0x0028(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BpInputSettingsLibrary_ChangeActionKeyBinding) == 0x000008, "Wrong alignment on BpInputSettingsLibrary_ChangeActionKeyBinding");
static_assert(sizeof(BpInputSettingsLibrary_ChangeActionKeyBinding) == 0x000040, "Wrong size on BpInputSettingsLibrary_ChangeActionKeyBinding");
static_assert(offsetof(BpInputSettingsLibrary_ChangeActionKeyBinding, ActionToChange) == 0x000000, "Member 'BpInputSettingsLibrary_ChangeActionKeyBinding::ActionToChange' has a wrong offset!");
static_assert(offsetof(BpInputSettingsLibrary_ChangeActionKeyBinding, NewKey) == 0x000028, "Member 'BpInputSettingsLibrary_ChangeActionKeyBinding::NewKey' has a wrong offset!");

// Function PropWitchHuntModule.BpInputSettingsLibrary.ChangeAxisKeyBinding
// 0x0040 (0x0040 - 0x0000)
struct BpInputSettingsLibrary_ChangeAxisKeyBinding final
{
public:
	struct FInputAxisKeyMapping                   AxisToChange;                                      // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
	struct FKey                                   NewKey;                                            // 0x0028(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BpInputSettingsLibrary_ChangeAxisKeyBinding) == 0x000008, "Wrong alignment on BpInputSettingsLibrary_ChangeAxisKeyBinding");
static_assert(sizeof(BpInputSettingsLibrary_ChangeAxisKeyBinding) == 0x000040, "Wrong size on BpInputSettingsLibrary_ChangeAxisKeyBinding");
static_assert(offsetof(BpInputSettingsLibrary_ChangeAxisKeyBinding, AxisToChange) == 0x000000, "Member 'BpInputSettingsLibrary_ChangeAxisKeyBinding::AxisToChange' has a wrong offset!");
static_assert(offsetof(BpInputSettingsLibrary_ChangeAxisKeyBinding, NewKey) == 0x000028, "Member 'BpInputSettingsLibrary_ChangeAxisKeyBinding::NewKey' has a wrong offset!");

// Function PropWitchHuntModule.BpInputSettingsLibrary.GetControllerSensivity
// 0x0004 (0x0004 - 0x0000)
struct BpInputSettingsLibrary_GetControllerSensivity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BpInputSettingsLibrary_GetControllerSensivity) == 0x000004, "Wrong alignment on BpInputSettingsLibrary_GetControllerSensivity");
static_assert(sizeof(BpInputSettingsLibrary_GetControllerSensivity) == 0x000004, "Wrong size on BpInputSettingsLibrary_GetControllerSensivity");
static_assert(offsetof(BpInputSettingsLibrary_GetControllerSensivity, ReturnValue) == 0x000000, "Member 'BpInputSettingsLibrary_GetControllerSensivity::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.BpInputSettingsLibrary.GetGamepadAcceptKey
// 0x0018 (0x0018 - 0x0000)
struct BpInputSettingsLibrary_GetGamepadAcceptKey final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BpInputSettingsLibrary_GetGamepadAcceptKey) == 0x000008, "Wrong alignment on BpInputSettingsLibrary_GetGamepadAcceptKey");
static_assert(sizeof(BpInputSettingsLibrary_GetGamepadAcceptKey) == 0x000018, "Wrong size on BpInputSettingsLibrary_GetGamepadAcceptKey");
static_assert(offsetof(BpInputSettingsLibrary_GetGamepadAcceptKey, ReturnValue) == 0x000000, "Member 'BpInputSettingsLibrary_GetGamepadAcceptKey::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.BpInputSettingsLibrary.GetGamepadBackKey
// 0x0018 (0x0018 - 0x0000)
struct BpInputSettingsLibrary_GetGamepadBackKey final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BpInputSettingsLibrary_GetGamepadBackKey) == 0x000008, "Wrong alignment on BpInputSettingsLibrary_GetGamepadBackKey");
static_assert(sizeof(BpInputSettingsLibrary_GetGamepadBackKey) == 0x000018, "Wrong size on BpInputSettingsLibrary_GetGamepadBackKey");
static_assert(offsetof(BpInputSettingsLibrary_GetGamepadBackKey, ReturnValue) == 0x000000, "Member 'BpInputSettingsLibrary_GetGamepadBackKey::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.BpInputSettingsLibrary.GetInputMode
// 0x0010 (0x0010 - 0x0000)
struct BpInputSettingsLibrary_GetInputMode final
{
public:
	const class APlayerController*                PlayerController;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputMode                                    ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BpInputSettingsLibrary_GetInputMode) == 0x000008, "Wrong alignment on BpInputSettingsLibrary_GetInputMode");
static_assert(sizeof(BpInputSettingsLibrary_GetInputMode) == 0x000010, "Wrong size on BpInputSettingsLibrary_GetInputMode");
static_assert(offsetof(BpInputSettingsLibrary_GetInputMode, PlayerController) == 0x000000, "Member 'BpInputSettingsLibrary_GetInputMode::PlayerController' has a wrong offset!");
static_assert(offsetof(BpInputSettingsLibrary_GetInputMode, ReturnValue) == 0x000008, "Member 'BpInputSettingsLibrary_GetInputMode::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.BpInputSettingsLibrary.GetKeyBindingsForAction
// 0x0018 (0x0018 - 0x0000)
struct BpInputSettingsLibrary_GetKeyBindingsForAction final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FInputActionKeyMapping>         Bindings;                                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BpInputSettingsLibrary_GetKeyBindingsForAction) == 0x000008, "Wrong alignment on BpInputSettingsLibrary_GetKeyBindingsForAction");
static_assert(sizeof(BpInputSettingsLibrary_GetKeyBindingsForAction) == 0x000018, "Wrong size on BpInputSettingsLibrary_GetKeyBindingsForAction");
static_assert(offsetof(BpInputSettingsLibrary_GetKeyBindingsForAction, ActionName) == 0x000000, "Member 'BpInputSettingsLibrary_GetKeyBindingsForAction::ActionName' has a wrong offset!");
static_assert(offsetof(BpInputSettingsLibrary_GetKeyBindingsForAction, Bindings) == 0x000008, "Member 'BpInputSettingsLibrary_GetKeyBindingsForAction::Bindings' has a wrong offset!");

// Function PropWitchHuntModule.BpInputSettingsLibrary.GetKeyBindingsForAxis
// 0x0020 (0x0020 - 0x0000)
struct BpInputSettingsLibrary_GetKeyBindingsForAxis final
{
public:
	class FName                                   AxisName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FInputAxisKeyMapping>           Bindings;                                          // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BpInputSettingsLibrary_GetKeyBindingsForAxis) == 0x000008, "Wrong alignment on BpInputSettingsLibrary_GetKeyBindingsForAxis");
static_assert(sizeof(BpInputSettingsLibrary_GetKeyBindingsForAxis) == 0x000020, "Wrong size on BpInputSettingsLibrary_GetKeyBindingsForAxis");
static_assert(offsetof(BpInputSettingsLibrary_GetKeyBindingsForAxis, AxisName) == 0x000000, "Member 'BpInputSettingsLibrary_GetKeyBindingsForAxis::AxisName' has a wrong offset!");
static_assert(offsetof(BpInputSettingsLibrary_GetKeyBindingsForAxis, Scale) == 0x000008, "Member 'BpInputSettingsLibrary_GetKeyBindingsForAxis::Scale' has a wrong offset!");
static_assert(offsetof(BpInputSettingsLibrary_GetKeyBindingsForAxis, Bindings) == 0x000010, "Member 'BpInputSettingsLibrary_GetKeyBindingsForAxis::Bindings' has a wrong offset!");

// Function PropWitchHuntModule.BpInputSettingsLibrary.GetMouseSensivity
// 0x0004 (0x0004 - 0x0000)
struct BpInputSettingsLibrary_GetMouseSensivity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BpInputSettingsLibrary_GetMouseSensivity) == 0x000004, "Wrong alignment on BpInputSettingsLibrary_GetMouseSensivity");
static_assert(sizeof(BpInputSettingsLibrary_GetMouseSensivity) == 0x000004, "Wrong size on BpInputSettingsLibrary_GetMouseSensivity");
static_assert(offsetof(BpInputSettingsLibrary_GetMouseSensivity, ReturnValue) == 0x000000, "Member 'BpInputSettingsLibrary_GetMouseSensivity::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.BpInputSettingsLibrary.IsControllerYInverted
// 0x0001 (0x0001 - 0x0000)
struct BpInputSettingsLibrary_IsControllerYInverted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BpInputSettingsLibrary_IsControllerYInverted) == 0x000001, "Wrong alignment on BpInputSettingsLibrary_IsControllerYInverted");
static_assert(sizeof(BpInputSettingsLibrary_IsControllerYInverted) == 0x000001, "Wrong size on BpInputSettingsLibrary_IsControllerYInverted");
static_assert(offsetof(BpInputSettingsLibrary_IsControllerYInverted, ReturnValue) == 0x000000, "Member 'BpInputSettingsLibrary_IsControllerYInverted::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.BpInputSettingsLibrary.IsMouseYInverted
// 0x0001 (0x0001 - 0x0000)
struct BpInputSettingsLibrary_IsMouseYInverted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BpInputSettingsLibrary_IsMouseYInverted) == 0x000001, "Wrong alignment on BpInputSettingsLibrary_IsMouseYInverted");
static_assert(sizeof(BpInputSettingsLibrary_IsMouseYInverted) == 0x000001, "Wrong size on BpInputSettingsLibrary_IsMouseYInverted");
static_assert(offsetof(BpInputSettingsLibrary_IsMouseYInverted, ReturnValue) == 0x000000, "Member 'BpInputSettingsLibrary_IsMouseYInverted::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.BpInputSettingsLibrary.LoadInputSettings
// 0x0038 (0x0038 - 0x0000)
struct BpInputSettingsLibrary_LoadInputSettings final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           IgnoreAxisConfigs;                                 // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           IgnoreActionMappings;                              // 0x0018(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           IgnoreAxisMappings;                                // 0x0028(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BpInputSettingsLibrary_LoadInputSettings) == 0x000008, "Wrong alignment on BpInputSettingsLibrary_LoadInputSettings");
static_assert(sizeof(BpInputSettingsLibrary_LoadInputSettings) == 0x000038, "Wrong size on BpInputSettingsLibrary_LoadInputSettings");
static_assert(offsetof(BpInputSettingsLibrary_LoadInputSettings, PlayerController) == 0x000000, "Member 'BpInputSettingsLibrary_LoadInputSettings::PlayerController' has a wrong offset!");
static_assert(offsetof(BpInputSettingsLibrary_LoadInputSettings, IgnoreAxisConfigs) == 0x000008, "Member 'BpInputSettingsLibrary_LoadInputSettings::IgnoreAxisConfigs' has a wrong offset!");
static_assert(offsetof(BpInputSettingsLibrary_LoadInputSettings, IgnoreActionMappings) == 0x000018, "Member 'BpInputSettingsLibrary_LoadInputSettings::IgnoreActionMappings' has a wrong offset!");
static_assert(offsetof(BpInputSettingsLibrary_LoadInputSettings, IgnoreAxisMappings) == 0x000028, "Member 'BpInputSettingsLibrary_LoadInputSettings::IgnoreAxisMappings' has a wrong offset!");

// Function PropWitchHuntModule.BpInputSettingsLibrary.RemoveActionKeyBinding
// 0x0028 (0x0028 - 0x0000)
struct BpInputSettingsLibrary_RemoveActionKeyBinding final
{
public:
	struct FInputActionKeyMapping                 ActionToRemove;                                    // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BpInputSettingsLibrary_RemoveActionKeyBinding) == 0x000008, "Wrong alignment on BpInputSettingsLibrary_RemoveActionKeyBinding");
static_assert(sizeof(BpInputSettingsLibrary_RemoveActionKeyBinding) == 0x000028, "Wrong size on BpInputSettingsLibrary_RemoveActionKeyBinding");
static_assert(offsetof(BpInputSettingsLibrary_RemoveActionKeyBinding, ActionToRemove) == 0x000000, "Member 'BpInputSettingsLibrary_RemoveActionKeyBinding::ActionToRemove' has a wrong offset!");

// Function PropWitchHuntModule.BpInputSettingsLibrary.RemoveAxisKeyBinding
// 0x0028 (0x0028 - 0x0000)
struct BpInputSettingsLibrary_RemoveAxisKeyBinding final
{
public:
	struct FInputAxisKeyMapping                   AxisToRemove;                                      // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BpInputSettingsLibrary_RemoveAxisKeyBinding) == 0x000008, "Wrong alignment on BpInputSettingsLibrary_RemoveAxisKeyBinding");
static_assert(sizeof(BpInputSettingsLibrary_RemoveAxisKeyBinding) == 0x000028, "Wrong size on BpInputSettingsLibrary_RemoveAxisKeyBinding");
static_assert(offsetof(BpInputSettingsLibrary_RemoveAxisKeyBinding, AxisToRemove) == 0x000000, "Member 'BpInputSettingsLibrary_RemoveAxisKeyBinding::AxisToRemove' has a wrong offset!");

// Function PropWitchHuntModule.BpInputSettingsLibrary.SaveInputSettings
// 0x0008 (0x0008 - 0x0000)
struct BpInputSettingsLibrary_SaveInputSettings final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BpInputSettingsLibrary_SaveInputSettings) == 0x000008, "Wrong alignment on BpInputSettingsLibrary_SaveInputSettings");
static_assert(sizeof(BpInputSettingsLibrary_SaveInputSettings) == 0x000008, "Wrong size on BpInputSettingsLibrary_SaveInputSettings");
static_assert(offsetof(BpInputSettingsLibrary_SaveInputSettings, PlayerController) == 0x000000, "Member 'BpInputSettingsLibrary_SaveInputSettings::PlayerController' has a wrong offset!");

// Function PropWitchHuntModule.BpInputSettingsLibrary.SetControllerSensivity
// 0x0004 (0x0004 - 0x0000)
struct BpInputSettingsLibrary_SetControllerSensivity final
{
public:
	float                                         ControllerSensivity;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BpInputSettingsLibrary_SetControllerSensivity) == 0x000004, "Wrong alignment on BpInputSettingsLibrary_SetControllerSensivity");
static_assert(sizeof(BpInputSettingsLibrary_SetControllerSensivity) == 0x000004, "Wrong size on BpInputSettingsLibrary_SetControllerSensivity");
static_assert(offsetof(BpInputSettingsLibrary_SetControllerSensivity, ControllerSensivity) == 0x000000, "Member 'BpInputSettingsLibrary_SetControllerSensivity::ControllerSensivity' has a wrong offset!");

// Function PropWitchHuntModule.BpInputSettingsLibrary.SetMouseSensivity
// 0x0004 (0x0004 - 0x0000)
struct BpInputSettingsLibrary_SetMouseSensivity final
{
public:
	float                                         MouseSensivity;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BpInputSettingsLibrary_SetMouseSensivity) == 0x000004, "Wrong alignment on BpInputSettingsLibrary_SetMouseSensivity");
static_assert(sizeof(BpInputSettingsLibrary_SetMouseSensivity) == 0x000004, "Wrong size on BpInputSettingsLibrary_SetMouseSensivity");
static_assert(offsetof(BpInputSettingsLibrary_SetMouseSensivity, MouseSensivity) == 0x000000, "Member 'BpInputSettingsLibrary_SetMouseSensivity::MouseSensivity' has a wrong offset!");

// Function PropWitchHuntModule.BpVideoSettingsLibrary.ChangeScreenResolution
// 0x0020 (0x0020 - 0x0000)
struct BpVideoSettingsLibrary_ChangeScreenResolution final
{
public:
	struct FSupportedResolution                   Resolution;                                        // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	EWindowMode                                   WindowMode;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BpVideoSettingsLibrary_ChangeScreenResolution) == 0x000008, "Wrong alignment on BpVideoSettingsLibrary_ChangeScreenResolution");
static_assert(sizeof(BpVideoSettingsLibrary_ChangeScreenResolution) == 0x000020, "Wrong size on BpVideoSettingsLibrary_ChangeScreenResolution");
static_assert(offsetof(BpVideoSettingsLibrary_ChangeScreenResolution, Resolution) == 0x000000, "Member 'BpVideoSettingsLibrary_ChangeScreenResolution::Resolution' has a wrong offset!");
static_assert(offsetof(BpVideoSettingsLibrary_ChangeScreenResolution, WindowMode) == 0x000018, "Member 'BpVideoSettingsLibrary_ChangeScreenResolution::WindowMode' has a wrong offset!");

// Function PropWitchHuntModule.BpVideoSettingsLibrary.GetAutoExposureMethod
// 0x0004 (0x0004 - 0x0000)
struct BpVideoSettingsLibrary_GetAutoExposureMethod final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BpVideoSettingsLibrary_GetAutoExposureMethod) == 0x000004, "Wrong alignment on BpVideoSettingsLibrary_GetAutoExposureMethod");
static_assert(sizeof(BpVideoSettingsLibrary_GetAutoExposureMethod) == 0x000004, "Wrong size on BpVideoSettingsLibrary_GetAutoExposureMethod");
static_assert(offsetof(BpVideoSettingsLibrary_GetAutoExposureMethod, ReturnValue) == 0x000000, "Member 'BpVideoSettingsLibrary_GetAutoExposureMethod::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.BpVideoSettingsLibrary.GetGamma
// 0x0004 (0x0004 - 0x0000)
struct BpVideoSettingsLibrary_GetGamma final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BpVideoSettingsLibrary_GetGamma) == 0x000004, "Wrong alignment on BpVideoSettingsLibrary_GetGamma");
static_assert(sizeof(BpVideoSettingsLibrary_GetGamma) == 0x000004, "Wrong size on BpVideoSettingsLibrary_GetGamma");
static_assert(offsetof(BpVideoSettingsLibrary_GetGamma, ReturnValue) == 0x000000, "Member 'BpVideoSettingsLibrary_GetGamma::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.BpVideoSettingsLibrary.GetMotionBlur
// 0x0001 (0x0001 - 0x0000)
struct BpVideoSettingsLibrary_GetMotionBlur final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BpVideoSettingsLibrary_GetMotionBlur) == 0x000001, "Wrong alignment on BpVideoSettingsLibrary_GetMotionBlur");
static_assert(sizeof(BpVideoSettingsLibrary_GetMotionBlur) == 0x000001, "Wrong size on BpVideoSettingsLibrary_GetMotionBlur");
static_assert(offsetof(BpVideoSettingsLibrary_GetMotionBlur, ReturnValue) == 0x000000, "Member 'BpVideoSettingsLibrary_GetMotionBlur::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.BpVideoSettingsLibrary.GetOverallQualitySettings
// 0x0001 (0x0001 - 0x0000)
struct BpVideoSettingsLibrary_GetOverallQualitySettings final
{
public:
	EOverallQualityLevel                          OverallQualityLevel;                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BpVideoSettingsLibrary_GetOverallQualitySettings) == 0x000001, "Wrong alignment on BpVideoSettingsLibrary_GetOverallQualitySettings");
static_assert(sizeof(BpVideoSettingsLibrary_GetOverallQualitySettings) == 0x000001, "Wrong size on BpVideoSettingsLibrary_GetOverallQualitySettings");
static_assert(offsetof(BpVideoSettingsLibrary_GetOverallQualitySettings, OverallQualityLevel) == 0x000000, "Member 'BpVideoSettingsLibrary_GetOverallQualitySettings::OverallQualityLevel' has a wrong offset!");

// Function PropWitchHuntModule.BpVideoSettingsLibrary.GetScreenResolution
// 0x0020 (0x0020 - 0x0000)
struct BpVideoSettingsLibrary_GetScreenResolution final
{
public:
	struct FSupportedResolution                   Resolution;                                        // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	EWindowMode                                   WindowMode;                                        // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BpVideoSettingsLibrary_GetScreenResolution) == 0x000008, "Wrong alignment on BpVideoSettingsLibrary_GetScreenResolution");
static_assert(sizeof(BpVideoSettingsLibrary_GetScreenResolution) == 0x000020, "Wrong size on BpVideoSettingsLibrary_GetScreenResolution");
static_assert(offsetof(BpVideoSettingsLibrary_GetScreenResolution, Resolution) == 0x000000, "Member 'BpVideoSettingsLibrary_GetScreenResolution::Resolution' has a wrong offset!");
static_assert(offsetof(BpVideoSettingsLibrary_GetScreenResolution, WindowMode) == 0x000018, "Member 'BpVideoSettingsLibrary_GetScreenResolution::WindowMode' has a wrong offset!");

// Function PropWitchHuntModule.BpVideoSettingsLibrary.GetSmoothFramerate
// 0x0001 (0x0001 - 0x0000)
struct BpVideoSettingsLibrary_GetSmoothFramerate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BpVideoSettingsLibrary_GetSmoothFramerate) == 0x000001, "Wrong alignment on BpVideoSettingsLibrary_GetSmoothFramerate");
static_assert(sizeof(BpVideoSettingsLibrary_GetSmoothFramerate) == 0x000001, "Wrong size on BpVideoSettingsLibrary_GetSmoothFramerate");
static_assert(offsetof(BpVideoSettingsLibrary_GetSmoothFramerate, ReturnValue) == 0x000000, "Member 'BpVideoSettingsLibrary_GetSmoothFramerate::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.BpVideoSettingsLibrary.GetSupportedScreenResolutions
// 0x0010 (0x0010 - 0x0000)
struct BpVideoSettingsLibrary_GetSupportedScreenResolutions final
{
public:
	TArray<struct FSupportedResolution>           Resolutions;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BpVideoSettingsLibrary_GetSupportedScreenResolutions) == 0x000008, "Wrong alignment on BpVideoSettingsLibrary_GetSupportedScreenResolutions");
static_assert(sizeof(BpVideoSettingsLibrary_GetSupportedScreenResolutions) == 0x000010, "Wrong size on BpVideoSettingsLibrary_GetSupportedScreenResolutions");
static_assert(offsetof(BpVideoSettingsLibrary_GetSupportedScreenResolutions, Resolutions) == 0x000000, "Member 'BpVideoSettingsLibrary_GetSupportedScreenResolutions::Resolutions' has a wrong offset!");

// Function PropWitchHuntModule.BpVideoSettingsLibrary.GetVideoQualitySettings
// 0x001C (0x001C - 0x0000)
struct BpVideoSettingsLibrary_GetVideoQualitySettings final
{
public:
	int32                                         AntiAliasing;                                      // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Effects;                                           // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PostProcess;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Resolution;                                        // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Shadow;                                            // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Texture;                                           // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ViewDistance;                                      // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BpVideoSettingsLibrary_GetVideoQualitySettings) == 0x000004, "Wrong alignment on BpVideoSettingsLibrary_GetVideoQualitySettings");
static_assert(sizeof(BpVideoSettingsLibrary_GetVideoQualitySettings) == 0x00001C, "Wrong size on BpVideoSettingsLibrary_GetVideoQualitySettings");
static_assert(offsetof(BpVideoSettingsLibrary_GetVideoQualitySettings, AntiAliasing) == 0x000000, "Member 'BpVideoSettingsLibrary_GetVideoQualitySettings::AntiAliasing' has a wrong offset!");
static_assert(offsetof(BpVideoSettingsLibrary_GetVideoQualitySettings, Effects) == 0x000004, "Member 'BpVideoSettingsLibrary_GetVideoQualitySettings::Effects' has a wrong offset!");
static_assert(offsetof(BpVideoSettingsLibrary_GetVideoQualitySettings, PostProcess) == 0x000008, "Member 'BpVideoSettingsLibrary_GetVideoQualitySettings::PostProcess' has a wrong offset!");
static_assert(offsetof(BpVideoSettingsLibrary_GetVideoQualitySettings, Resolution) == 0x00000C, "Member 'BpVideoSettingsLibrary_GetVideoQualitySettings::Resolution' has a wrong offset!");
static_assert(offsetof(BpVideoSettingsLibrary_GetVideoQualitySettings, Shadow) == 0x000010, "Member 'BpVideoSettingsLibrary_GetVideoQualitySettings::Shadow' has a wrong offset!");
static_assert(offsetof(BpVideoSettingsLibrary_GetVideoQualitySettings, Texture) == 0x000014, "Member 'BpVideoSettingsLibrary_GetVideoQualitySettings::Texture' has a wrong offset!");
static_assert(offsetof(BpVideoSettingsLibrary_GetVideoQualitySettings, ViewDistance) == 0x000018, "Member 'BpVideoSettingsLibrary_GetVideoQualitySettings::ViewDistance' has a wrong offset!");

// Function PropWitchHuntModule.BpVideoSettingsLibrary.IsVSyncEnabled
// 0x0001 (0x0001 - 0x0000)
struct BpVideoSettingsLibrary_IsVSyncEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BpVideoSettingsLibrary_IsVSyncEnabled) == 0x000001, "Wrong alignment on BpVideoSettingsLibrary_IsVSyncEnabled");
static_assert(sizeof(BpVideoSettingsLibrary_IsVSyncEnabled) == 0x000001, "Wrong size on BpVideoSettingsLibrary_IsVSyncEnabled");
static_assert(offsetof(BpVideoSettingsLibrary_IsVSyncEnabled, ReturnValue) == 0x000000, "Member 'BpVideoSettingsLibrary_IsVSyncEnabled::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.BpVideoSettingsLibrary.SetAutoExposureMethod
// 0x0004 (0x0004 - 0x0000)
struct BpVideoSettingsLibrary_SetAutoExposureMethod final
{
public:
	int32                                         AutoExposureMethod;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BpVideoSettingsLibrary_SetAutoExposureMethod) == 0x000004, "Wrong alignment on BpVideoSettingsLibrary_SetAutoExposureMethod");
static_assert(sizeof(BpVideoSettingsLibrary_SetAutoExposureMethod) == 0x000004, "Wrong size on BpVideoSettingsLibrary_SetAutoExposureMethod");
static_assert(offsetof(BpVideoSettingsLibrary_SetAutoExposureMethod, AutoExposureMethod) == 0x000000, "Member 'BpVideoSettingsLibrary_SetAutoExposureMethod::AutoExposureMethod' has a wrong offset!");

// Function PropWitchHuntModule.BpVideoSettingsLibrary.SetGamma
// 0x0004 (0x0004 - 0x0000)
struct BpVideoSettingsLibrary_SetGamma final
{
public:
	float                                         Gamma;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BpVideoSettingsLibrary_SetGamma) == 0x000004, "Wrong alignment on BpVideoSettingsLibrary_SetGamma");
static_assert(sizeof(BpVideoSettingsLibrary_SetGamma) == 0x000004, "Wrong size on BpVideoSettingsLibrary_SetGamma");
static_assert(offsetof(BpVideoSettingsLibrary_SetGamma, Gamma) == 0x000000, "Member 'BpVideoSettingsLibrary_SetGamma::Gamma' has a wrong offset!");

// Function PropWitchHuntModule.BpVideoSettingsLibrary.SetMotionBlur
// 0x0001 (0x0001 - 0x0000)
struct BpVideoSettingsLibrary_SetMotionBlur final
{
public:
	bool                                          MotionBlur;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BpVideoSettingsLibrary_SetMotionBlur) == 0x000001, "Wrong alignment on BpVideoSettingsLibrary_SetMotionBlur");
static_assert(sizeof(BpVideoSettingsLibrary_SetMotionBlur) == 0x000001, "Wrong size on BpVideoSettingsLibrary_SetMotionBlur");
static_assert(offsetof(BpVideoSettingsLibrary_SetMotionBlur, MotionBlur) == 0x000000, "Member 'BpVideoSettingsLibrary_SetMotionBlur::MotionBlur' has a wrong offset!");

// Function PropWitchHuntModule.BpVideoSettingsLibrary.SetOverallQualitySettings
// 0x0001 (0x0001 - 0x0000)
struct BpVideoSettingsLibrary_SetOverallQualitySettings final
{
public:
	EOverallQualityLevel                          OverallQualityLevel;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BpVideoSettingsLibrary_SetOverallQualitySettings) == 0x000001, "Wrong alignment on BpVideoSettingsLibrary_SetOverallQualitySettings");
static_assert(sizeof(BpVideoSettingsLibrary_SetOverallQualitySettings) == 0x000001, "Wrong size on BpVideoSettingsLibrary_SetOverallQualitySettings");
static_assert(offsetof(BpVideoSettingsLibrary_SetOverallQualitySettings, OverallQualityLevel) == 0x000000, "Member 'BpVideoSettingsLibrary_SetOverallQualitySettings::OverallQualityLevel' has a wrong offset!");

// Function PropWitchHuntModule.BpVideoSettingsLibrary.SetScreenResolution
// 0x0020 (0x0020 - 0x0000)
struct BpVideoSettingsLibrary_SetScreenResolution final
{
public:
	struct FSupportedResolution                   Resolution;                                        // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	EWindowMode                                   WindowMode;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BpVideoSettingsLibrary_SetScreenResolution) == 0x000008, "Wrong alignment on BpVideoSettingsLibrary_SetScreenResolution");
static_assert(sizeof(BpVideoSettingsLibrary_SetScreenResolution) == 0x000020, "Wrong size on BpVideoSettingsLibrary_SetScreenResolution");
static_assert(offsetof(BpVideoSettingsLibrary_SetScreenResolution, Resolution) == 0x000000, "Member 'BpVideoSettingsLibrary_SetScreenResolution::Resolution' has a wrong offset!");
static_assert(offsetof(BpVideoSettingsLibrary_SetScreenResolution, WindowMode) == 0x000018, "Member 'BpVideoSettingsLibrary_SetScreenResolution::WindowMode' has a wrong offset!");

// Function PropWitchHuntModule.BpVideoSettingsLibrary.SetSmoothFramerate
// 0x0001 (0x0001 - 0x0000)
struct BpVideoSettingsLibrary_SetSmoothFramerate final
{
public:
	bool                                          SmoothFramerate;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BpVideoSettingsLibrary_SetSmoothFramerate) == 0x000001, "Wrong alignment on BpVideoSettingsLibrary_SetSmoothFramerate");
static_assert(sizeof(BpVideoSettingsLibrary_SetSmoothFramerate) == 0x000001, "Wrong size on BpVideoSettingsLibrary_SetSmoothFramerate");
static_assert(offsetof(BpVideoSettingsLibrary_SetSmoothFramerate, SmoothFramerate) == 0x000000, "Member 'BpVideoSettingsLibrary_SetSmoothFramerate::SmoothFramerate' has a wrong offset!");

// Function PropWitchHuntModule.BpVideoSettingsLibrary.SetVideoQualitySettings
// 0x001C (0x001C - 0x0000)
struct BpVideoSettingsLibrary_SetVideoQualitySettings final
{
public:
	int32                                         AntiAliasing;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Effects;                                           // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PostProcess;                                       // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Resolution;                                        // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Shadow;                                            // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Texture;                                           // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ViewDistance;                                      // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BpVideoSettingsLibrary_SetVideoQualitySettings) == 0x000004, "Wrong alignment on BpVideoSettingsLibrary_SetVideoQualitySettings");
static_assert(sizeof(BpVideoSettingsLibrary_SetVideoQualitySettings) == 0x00001C, "Wrong size on BpVideoSettingsLibrary_SetVideoQualitySettings");
static_assert(offsetof(BpVideoSettingsLibrary_SetVideoQualitySettings, AntiAliasing) == 0x000000, "Member 'BpVideoSettingsLibrary_SetVideoQualitySettings::AntiAliasing' has a wrong offset!");
static_assert(offsetof(BpVideoSettingsLibrary_SetVideoQualitySettings, Effects) == 0x000004, "Member 'BpVideoSettingsLibrary_SetVideoQualitySettings::Effects' has a wrong offset!");
static_assert(offsetof(BpVideoSettingsLibrary_SetVideoQualitySettings, PostProcess) == 0x000008, "Member 'BpVideoSettingsLibrary_SetVideoQualitySettings::PostProcess' has a wrong offset!");
static_assert(offsetof(BpVideoSettingsLibrary_SetVideoQualitySettings, Resolution) == 0x00000C, "Member 'BpVideoSettingsLibrary_SetVideoQualitySettings::Resolution' has a wrong offset!");
static_assert(offsetof(BpVideoSettingsLibrary_SetVideoQualitySettings, Shadow) == 0x000010, "Member 'BpVideoSettingsLibrary_SetVideoQualitySettings::Shadow' has a wrong offset!");
static_assert(offsetof(BpVideoSettingsLibrary_SetVideoQualitySettings, Texture) == 0x000014, "Member 'BpVideoSettingsLibrary_SetVideoQualitySettings::Texture' has a wrong offset!");
static_assert(offsetof(BpVideoSettingsLibrary_SetVideoQualitySettings, ViewDistance) == 0x000018, "Member 'BpVideoSettingsLibrary_SetVideoQualitySettings::ViewDistance' has a wrong offset!");

// Function PropWitchHuntModule.BpVideoSettingsLibrary.SetVSyncEnabled
// 0x0001 (0x0001 - 0x0000)
struct BpVideoSettingsLibrary_SetVSyncEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BpVideoSettingsLibrary_SetVSyncEnabled) == 0x000001, "Wrong alignment on BpVideoSettingsLibrary_SetVSyncEnabled");
static_assert(sizeof(BpVideoSettingsLibrary_SetVSyncEnabled) == 0x000001, "Wrong size on BpVideoSettingsLibrary_SetVSyncEnabled");
static_assert(offsetof(BpVideoSettingsLibrary_SetVSyncEnabled, Enabled) == 0x000000, "Member 'BpVideoSettingsLibrary_SetVSyncEnabled::Enabled' has a wrong offset!");

// Function PropWitchHuntModule.CommandLineFunctionLibrary.GetValue
// 0x0028 (0x0028 - 0x0000)
struct CommandLineFunctionLibrary_GetValue final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFound;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommandLineFunctionLibrary_GetValue) == 0x000008, "Wrong alignment on CommandLineFunctionLibrary_GetValue");
static_assert(sizeof(CommandLineFunctionLibrary_GetValue) == 0x000028, "Wrong size on CommandLineFunctionLibrary_GetValue");
static_assert(offsetof(CommandLineFunctionLibrary_GetValue, Key) == 0x000000, "Member 'CommandLineFunctionLibrary_GetValue::Key' has a wrong offset!");
static_assert(offsetof(CommandLineFunctionLibrary_GetValue, bFound) == 0x000010, "Member 'CommandLineFunctionLibrary_GetValue::bFound' has a wrong offset!");
static_assert(offsetof(CommandLineFunctionLibrary_GetValue, ReturnValue) == 0x000018, "Member 'CommandLineFunctionLibrary_GetValue::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.CommandLineFunctionLibrary.HasToken
// 0x0018 (0x0018 - 0x0000)
struct CommandLineFunctionLibrary_HasToken final
{
public:
	class FString                                 Token;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CommandLineFunctionLibrary_HasToken) == 0x000008, "Wrong alignment on CommandLineFunctionLibrary_HasToken");
static_assert(sizeof(CommandLineFunctionLibrary_HasToken) == 0x000018, "Wrong size on CommandLineFunctionLibrary_HasToken");
static_assert(offsetof(CommandLineFunctionLibrary_HasToken, Token) == 0x000000, "Member 'CommandLineFunctionLibrary_HasToken::Token' has a wrong offset!");
static_assert(offsetof(CommandLineFunctionLibrary_HasToken, ReturnValue) == 0x000010, "Member 'CommandLineFunctionLibrary_HasToken::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.CustomLogSubsystem.AddLogTarget
// 0x0028 (0x0028 - 0x0000)
struct CustomLogSubsystem_AddLogTarget final
{
public:
	class FString                                 Host;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Tag;                                               // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomLogSubsystem_AddLogTarget) == 0x000008, "Wrong alignment on CustomLogSubsystem_AddLogTarget");
static_assert(sizeof(CustomLogSubsystem_AddLogTarget) == 0x000028, "Wrong size on CustomLogSubsystem_AddLogTarget");
static_assert(offsetof(CustomLogSubsystem_AddLogTarget, Host) == 0x000000, "Member 'CustomLogSubsystem_AddLogTarget::Host' has a wrong offset!");
static_assert(offsetof(CustomLogSubsystem_AddLogTarget, Port) == 0x000010, "Member 'CustomLogSubsystem_AddLogTarget::Port' has a wrong offset!");
static_assert(offsetof(CustomLogSubsystem_AddLogTarget, Tag) == 0x000018, "Member 'CustomLogSubsystem_AddLogTarget::Tag' has a wrong offset!");

// Function PropWitchHuntModule.CustomLogSubsystem.Log
// 0x0018 (0x0018 - 0x0000)
struct CustomLogSubsystem_Log final
{
public:
	class FText                                   TextToLog;                                         // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	class FName                                   Category;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomLogSubsystem_Log) == 0x000008, "Wrong alignment on CustomLogSubsystem_Log");
static_assert(sizeof(CustomLogSubsystem_Log) == 0x000018, "Wrong size on CustomLogSubsystem_Log");
static_assert(offsetof(CustomLogSubsystem_Log, TextToLog) == 0x000000, "Member 'CustomLogSubsystem_Log::TextToLog' has a wrong offset!");
static_assert(offsetof(CustomLogSubsystem_Log, Category) == 0x000010, "Member 'CustomLogSubsystem_Log::Category' has a wrong offset!");

// Function PropWitchHuntModule.CustomLogSubsystem.LogString
// 0x0018 (0x0018 - 0x0000)
struct CustomLogSubsystem_LogString final
{
public:
	class FString                                 StringToLog;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Category;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomLogSubsystem_LogString) == 0x000008, "Wrong alignment on CustomLogSubsystem_LogString");
static_assert(sizeof(CustomLogSubsystem_LogString) == 0x000018, "Wrong size on CustomLogSubsystem_LogString");
static_assert(offsetof(CustomLogSubsystem_LogString, StringToLog) == 0x000000, "Member 'CustomLogSubsystem_LogString::StringToLog' has a wrong offset!");
static_assert(offsetof(CustomLogSubsystem_LogString, Category) == 0x000010, "Member 'CustomLogSubsystem_LogString::Category' has a wrong offset!");

// Function PropWitchHuntModule.DeveloperModeSubsystem.CouldEnableDeveloperMode
// 0x0001 (0x0001 - 0x0000)
struct DeveloperModeSubsystem_CouldEnableDeveloperMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeveloperModeSubsystem_CouldEnableDeveloperMode) == 0x000001, "Wrong alignment on DeveloperModeSubsystem_CouldEnableDeveloperMode");
static_assert(sizeof(DeveloperModeSubsystem_CouldEnableDeveloperMode) == 0x000001, "Wrong size on DeveloperModeSubsystem_CouldEnableDeveloperMode");
static_assert(offsetof(DeveloperModeSubsystem_CouldEnableDeveloperMode, ReturnValue) == 0x000000, "Member 'DeveloperModeSubsystem_CouldEnableDeveloperMode::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.DeveloperModeSubsystem.EnableDeveloperMode
// 0x0001 (0x0001 - 0x0000)
struct DeveloperModeSubsystem_EnableDeveloperMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeveloperModeSubsystem_EnableDeveloperMode) == 0x000001, "Wrong alignment on DeveloperModeSubsystem_EnableDeveloperMode");
static_assert(sizeof(DeveloperModeSubsystem_EnableDeveloperMode) == 0x000001, "Wrong size on DeveloperModeSubsystem_EnableDeveloperMode");
static_assert(offsetof(DeveloperModeSubsystem_EnableDeveloperMode, ReturnValue) == 0x000000, "Member 'DeveloperModeSubsystem_EnableDeveloperMode::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.DeveloperModeSubsystem.GetBoolSetting
// 0x000C (0x000C - 0x0000)
struct DeveloperModeSubsystem_GetBoolSetting final
{
public:
	class FName                                   SettingName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasValue;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DeveloperModeSubsystem_GetBoolSetting) == 0x000004, "Wrong alignment on DeveloperModeSubsystem_GetBoolSetting");
static_assert(sizeof(DeveloperModeSubsystem_GetBoolSetting) == 0x00000C, "Wrong size on DeveloperModeSubsystem_GetBoolSetting");
static_assert(offsetof(DeveloperModeSubsystem_GetBoolSetting, SettingName) == 0x000000, "Member 'DeveloperModeSubsystem_GetBoolSetting::SettingName' has a wrong offset!");
static_assert(offsetof(DeveloperModeSubsystem_GetBoolSetting, bHasValue) == 0x000008, "Member 'DeveloperModeSubsystem_GetBoolSetting::bHasValue' has a wrong offset!");
static_assert(offsetof(DeveloperModeSubsystem_GetBoolSetting, ReturnValue) == 0x000009, "Member 'DeveloperModeSubsystem_GetBoolSetting::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.DeveloperModeSubsystem.GetFloatSetting
// 0x0010 (0x0010 - 0x0000)
struct DeveloperModeSubsystem_GetFloatSetting final
{
public:
	class FName                                   SettingName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasValue;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeveloperModeSubsystem_GetFloatSetting) == 0x000004, "Wrong alignment on DeveloperModeSubsystem_GetFloatSetting");
static_assert(sizeof(DeveloperModeSubsystem_GetFloatSetting) == 0x000010, "Wrong size on DeveloperModeSubsystem_GetFloatSetting");
static_assert(offsetof(DeveloperModeSubsystem_GetFloatSetting, SettingName) == 0x000000, "Member 'DeveloperModeSubsystem_GetFloatSetting::SettingName' has a wrong offset!");
static_assert(offsetof(DeveloperModeSubsystem_GetFloatSetting, bHasValue) == 0x000008, "Member 'DeveloperModeSubsystem_GetFloatSetting::bHasValue' has a wrong offset!");
static_assert(offsetof(DeveloperModeSubsystem_GetFloatSetting, ReturnValue) == 0x00000C, "Member 'DeveloperModeSubsystem_GetFloatSetting::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.DeveloperModeSubsystem.GetInt32Setting
// 0x0010 (0x0010 - 0x0000)
struct DeveloperModeSubsystem_GetInt32Setting final
{
public:
	class FName                                   SettingName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasValue;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeveloperModeSubsystem_GetInt32Setting) == 0x000004, "Wrong alignment on DeveloperModeSubsystem_GetInt32Setting");
static_assert(sizeof(DeveloperModeSubsystem_GetInt32Setting) == 0x000010, "Wrong size on DeveloperModeSubsystem_GetInt32Setting");
static_assert(offsetof(DeveloperModeSubsystem_GetInt32Setting, SettingName) == 0x000000, "Member 'DeveloperModeSubsystem_GetInt32Setting::SettingName' has a wrong offset!");
static_assert(offsetof(DeveloperModeSubsystem_GetInt32Setting, bHasValue) == 0x000008, "Member 'DeveloperModeSubsystem_GetInt32Setting::bHasValue' has a wrong offset!");
static_assert(offsetof(DeveloperModeSubsystem_GetInt32Setting, ReturnValue) == 0x00000C, "Member 'DeveloperModeSubsystem_GetInt32Setting::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.DeveloperModeSubsystem.GetStringSetting
// 0x0020 (0x0020 - 0x0000)
struct DeveloperModeSubsystem_GetStringSetting final
{
public:
	class FName                                   SettingName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasValue;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeveloperModeSubsystem_GetStringSetting) == 0x000008, "Wrong alignment on DeveloperModeSubsystem_GetStringSetting");
static_assert(sizeof(DeveloperModeSubsystem_GetStringSetting) == 0x000020, "Wrong size on DeveloperModeSubsystem_GetStringSetting");
static_assert(offsetof(DeveloperModeSubsystem_GetStringSetting, SettingName) == 0x000000, "Member 'DeveloperModeSubsystem_GetStringSetting::SettingName' has a wrong offset!");
static_assert(offsetof(DeveloperModeSubsystem_GetStringSetting, bHasValue) == 0x000008, "Member 'DeveloperModeSubsystem_GetStringSetting::bHasValue' has a wrong offset!");
static_assert(offsetof(DeveloperModeSubsystem_GetStringSetting, ReturnValue) == 0x000010, "Member 'DeveloperModeSubsystem_GetStringSetting::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.DeveloperModeSubsystem.HasAnySetting
// 0x000C (0x000C - 0x0000)
struct DeveloperModeSubsystem_HasAnySetting final
{
public:
	class FName                                   SettingName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DeveloperModeSubsystem_HasAnySetting) == 0x000004, "Wrong alignment on DeveloperModeSubsystem_HasAnySetting");
static_assert(sizeof(DeveloperModeSubsystem_HasAnySetting) == 0x00000C, "Wrong size on DeveloperModeSubsystem_HasAnySetting");
static_assert(offsetof(DeveloperModeSubsystem_HasAnySetting, SettingName) == 0x000000, "Member 'DeveloperModeSubsystem_HasAnySetting::SettingName' has a wrong offset!");
static_assert(offsetof(DeveloperModeSubsystem_HasAnySetting, ReturnValue) == 0x000008, "Member 'DeveloperModeSubsystem_HasAnySetting::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.DeveloperModeSubsystem.SetBoolSetting
// 0x000C (0x000C - 0x0000)
struct DeveloperModeSubsystem_SetBoolSetting final
{
public:
	class FName                                   SettingName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValue;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DeveloperModeSubsystem_SetBoolSetting) == 0x000004, "Wrong alignment on DeveloperModeSubsystem_SetBoolSetting");
static_assert(sizeof(DeveloperModeSubsystem_SetBoolSetting) == 0x00000C, "Wrong size on DeveloperModeSubsystem_SetBoolSetting");
static_assert(offsetof(DeveloperModeSubsystem_SetBoolSetting, SettingName) == 0x000000, "Member 'DeveloperModeSubsystem_SetBoolSetting::SettingName' has a wrong offset!");
static_assert(offsetof(DeveloperModeSubsystem_SetBoolSetting, bValue) == 0x000008, "Member 'DeveloperModeSubsystem_SetBoolSetting::bValue' has a wrong offset!");

// Function PropWitchHuntModule.DeveloperModeSubsystem.SetFloatSetting
// 0x000C (0x000C - 0x0000)
struct DeveloperModeSubsystem_SetFloatSetting final
{
public:
	class FName                                   SettingName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeveloperModeSubsystem_SetFloatSetting) == 0x000004, "Wrong alignment on DeveloperModeSubsystem_SetFloatSetting");
static_assert(sizeof(DeveloperModeSubsystem_SetFloatSetting) == 0x00000C, "Wrong size on DeveloperModeSubsystem_SetFloatSetting");
static_assert(offsetof(DeveloperModeSubsystem_SetFloatSetting, SettingName) == 0x000000, "Member 'DeveloperModeSubsystem_SetFloatSetting::SettingName' has a wrong offset!");
static_assert(offsetof(DeveloperModeSubsystem_SetFloatSetting, Value) == 0x000008, "Member 'DeveloperModeSubsystem_SetFloatSetting::Value' has a wrong offset!");

// Function PropWitchHuntModule.DeveloperModeSubsystem.SetInt32Setting
// 0x000C (0x000C - 0x0000)
struct DeveloperModeSubsystem_SetInt32Setting final
{
public:
	class FName                                   SettingName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeveloperModeSubsystem_SetInt32Setting) == 0x000004, "Wrong alignment on DeveloperModeSubsystem_SetInt32Setting");
static_assert(sizeof(DeveloperModeSubsystem_SetInt32Setting) == 0x00000C, "Wrong size on DeveloperModeSubsystem_SetInt32Setting");
static_assert(offsetof(DeveloperModeSubsystem_SetInt32Setting, SettingName) == 0x000000, "Member 'DeveloperModeSubsystem_SetInt32Setting::SettingName' has a wrong offset!");
static_assert(offsetof(DeveloperModeSubsystem_SetInt32Setting, Value) == 0x000008, "Member 'DeveloperModeSubsystem_SetInt32Setting::Value' has a wrong offset!");

// Function PropWitchHuntModule.DeveloperModeSubsystem.SetStringSetting
// 0x0018 (0x0018 - 0x0000)
struct DeveloperModeSubsystem_SetStringSetting final
{
public:
	class FName                                   SettingName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeveloperModeSubsystem_SetStringSetting) == 0x000008, "Wrong alignment on DeveloperModeSubsystem_SetStringSetting");
static_assert(sizeof(DeveloperModeSubsystem_SetStringSetting) == 0x000018, "Wrong size on DeveloperModeSubsystem_SetStringSetting");
static_assert(offsetof(DeveloperModeSubsystem_SetStringSetting, SettingName) == 0x000000, "Member 'DeveloperModeSubsystem_SetStringSetting::SettingName' has a wrong offset!");
static_assert(offsetof(DeveloperModeSubsystem_SetStringSetting, Value) == 0x000008, "Member 'DeveloperModeSubsystem_SetStringSetting::Value' has a wrong offset!");

// Function PropWitchHuntModule.DownloadStringCallbackProxy.DownloadString
// 0x0020 (0x0020 - 0x0000)
struct DownloadStringCallbackProxy_DownloadString final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 URL;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDownloadStringCallbackProxy*           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloadStringCallbackProxy_DownloadString) == 0x000008, "Wrong alignment on DownloadStringCallbackProxy_DownloadString");
static_assert(sizeof(DownloadStringCallbackProxy_DownloadString) == 0x000020, "Wrong size on DownloadStringCallbackProxy_DownloadString");
static_assert(offsetof(DownloadStringCallbackProxy_DownloadString, WorldContextObject) == 0x000000, "Member 'DownloadStringCallbackProxy_DownloadString::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DownloadStringCallbackProxy_DownloadString, URL) == 0x000008, "Member 'DownloadStringCallbackProxy_DownloadString::URL' has a wrong offset!");
static_assert(offsetof(DownloadStringCallbackProxy_DownloadString, ReturnValue) == 0x000018, "Member 'DownloadStringCallbackProxy_DownloadString::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.DownloadStringCallbackProxy.UploadString
// 0x0030 (0x0030 - 0x0000)
struct DownloadStringCallbackProxy_UploadString final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 URL;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringToPost;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDownloadStringCallbackProxy*           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloadStringCallbackProxy_UploadString) == 0x000008, "Wrong alignment on DownloadStringCallbackProxy_UploadString");
static_assert(sizeof(DownloadStringCallbackProxy_UploadString) == 0x000030, "Wrong size on DownloadStringCallbackProxy_UploadString");
static_assert(offsetof(DownloadStringCallbackProxy_UploadString, WorldContextObject) == 0x000000, "Member 'DownloadStringCallbackProxy_UploadString::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DownloadStringCallbackProxy_UploadString, URL) == 0x000008, "Member 'DownloadStringCallbackProxy_UploadString::URL' has a wrong offset!");
static_assert(offsetof(DownloadStringCallbackProxy_UploadString, StringToPost) == 0x000018, "Member 'DownloadStringCallbackProxy_UploadString::StringToPost' has a wrong offset!");
static_assert(offsetof(DownloadStringCallbackProxy_UploadString, ReturnValue) == 0x000028, "Member 'DownloadStringCallbackProxy_UploadString::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.DownloadStringCallbackProxy.UploadStringQuery
// 0x0038 (0x0038 - 0x0000)
struct DownloadStringCallbackProxy_UploadStringQuery final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 URL;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringToPost;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QueryID;                                           // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDownloadStringCallbackProxy*           ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloadStringCallbackProxy_UploadStringQuery) == 0x000008, "Wrong alignment on DownloadStringCallbackProxy_UploadStringQuery");
static_assert(sizeof(DownloadStringCallbackProxy_UploadStringQuery) == 0x000038, "Wrong size on DownloadStringCallbackProxy_UploadStringQuery");
static_assert(offsetof(DownloadStringCallbackProxy_UploadStringQuery, WorldContextObject) == 0x000000, "Member 'DownloadStringCallbackProxy_UploadStringQuery::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DownloadStringCallbackProxy_UploadStringQuery, URL) == 0x000008, "Member 'DownloadStringCallbackProxy_UploadStringQuery::URL' has a wrong offset!");
static_assert(offsetof(DownloadStringCallbackProxy_UploadStringQuery, StringToPost) == 0x000018, "Member 'DownloadStringCallbackProxy_UploadStringQuery::StringToPost' has a wrong offset!");
static_assert(offsetof(DownloadStringCallbackProxy_UploadStringQuery, QueryID) == 0x000028, "Member 'DownloadStringCallbackProxy_UploadStringQuery::QueryID' has a wrong offset!");
static_assert(offsetof(DownloadStringCallbackProxy_UploadStringQuery, ReturnValue) == 0x000030, "Member 'DownloadStringCallbackProxy_UploadStringQuery::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.FileHelperBlueprint.GetUnrealPath
// 0x0018 (0x0018 - 0x0000)
struct FileHelperBlueprint_GetUnrealPath final
{
public:
	EUnrealPath                                   UnrealPath;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FileHelperBlueprint_GetUnrealPath) == 0x000008, "Wrong alignment on FileHelperBlueprint_GetUnrealPath");
static_assert(sizeof(FileHelperBlueprint_GetUnrealPath) == 0x000018, "Wrong size on FileHelperBlueprint_GetUnrealPath");
static_assert(offsetof(FileHelperBlueprint_GetUnrealPath, UnrealPath) == 0x000000, "Member 'FileHelperBlueprint_GetUnrealPath::UnrealPath' has a wrong offset!");
static_assert(offsetof(FileHelperBlueprint_GetUnrealPath, ReturnValue) == 0x000008, "Member 'FileHelperBlueprint_GetUnrealPath::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.FriendSubsystem.QueryPresenceForUsers
// 0x0040 (0x0040 - 0x0000)
struct FriendSubsystem_QueryPresenceForUsers final
{
public:
	struct FUniqueNetIdRepl                       LocalUserId;                                       // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FUniqueNetIdRepl>               UserIds;                                           // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendSubsystem_QueryPresenceForUsers) == 0x000008, "Wrong alignment on FriendSubsystem_QueryPresenceForUsers");
static_assert(sizeof(FriendSubsystem_QueryPresenceForUsers) == 0x000040, "Wrong size on FriendSubsystem_QueryPresenceForUsers");
static_assert(offsetof(FriendSubsystem_QueryPresenceForUsers, LocalUserId) == 0x000000, "Member 'FriendSubsystem_QueryPresenceForUsers::LocalUserId' has a wrong offset!");
static_assert(offsetof(FriendSubsystem_QueryPresenceForUsers, UserIds) == 0x000030, "Member 'FriendSubsystem_QueryPresenceForUsers::UserIds' has a wrong offset!");

// Function PropWitchHuntModule.GetAllItemsCallbackProxy.ConsumeItem
// 0x0030 (0x0030 - 0x0000)
struct GetAllItemsCallbackProxy_ConsumeItem final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      PlayerController;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBlueprintOnlineItem                   ItemToConsume;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGetAllItemsCallbackProxy*              ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GetAllItemsCallbackProxy_ConsumeItem) == 0x000008, "Wrong alignment on GetAllItemsCallbackProxy_ConsumeItem");
static_assert(sizeof(GetAllItemsCallbackProxy_ConsumeItem) == 0x000030, "Wrong size on GetAllItemsCallbackProxy_ConsumeItem");
static_assert(offsetof(GetAllItemsCallbackProxy_ConsumeItem, WorldContextObject) == 0x000000, "Member 'GetAllItemsCallbackProxy_ConsumeItem::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GetAllItemsCallbackProxy_ConsumeItem, PlayerController) == 0x000008, "Member 'GetAllItemsCallbackProxy_ConsumeItem::PlayerController' has a wrong offset!");
static_assert(offsetof(GetAllItemsCallbackProxy_ConsumeItem, ItemToConsume) == 0x000010, "Member 'GetAllItemsCallbackProxy_ConsumeItem::ItemToConsume' has a wrong offset!");
static_assert(offsetof(GetAllItemsCallbackProxy_ConsumeItem, Quantity) == 0x000020, "Member 'GetAllItemsCallbackProxy_ConsumeItem::Quantity' has a wrong offset!");
static_assert(offsetof(GetAllItemsCallbackProxy_ConsumeItem, ReturnValue) == 0x000028, "Member 'GetAllItemsCallbackProxy_ConsumeItem::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.GetAllItemsCallbackProxy.ExchangeItems
// 0x0038 (0x0038 - 0x0000)
struct GetAllItemsCallbackProxy_ExchangeItems final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      PlayerController;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 OutDefinitionIds;                                  // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBlueprintOnlineItem>           InItems;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class UGetAllItemsCallbackProxy*              ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GetAllItemsCallbackProxy_ExchangeItems) == 0x000008, "Wrong alignment on GetAllItemsCallbackProxy_ExchangeItems");
static_assert(sizeof(GetAllItemsCallbackProxy_ExchangeItems) == 0x000038, "Wrong size on GetAllItemsCallbackProxy_ExchangeItems");
static_assert(offsetof(GetAllItemsCallbackProxy_ExchangeItems, WorldContextObject) == 0x000000, "Member 'GetAllItemsCallbackProxy_ExchangeItems::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GetAllItemsCallbackProxy_ExchangeItems, PlayerController) == 0x000008, "Member 'GetAllItemsCallbackProxy_ExchangeItems::PlayerController' has a wrong offset!");
static_assert(offsetof(GetAllItemsCallbackProxy_ExchangeItems, OutDefinitionIds) == 0x000010, "Member 'GetAllItemsCallbackProxy_ExchangeItems::OutDefinitionIds' has a wrong offset!");
static_assert(offsetof(GetAllItemsCallbackProxy_ExchangeItems, InItems) == 0x000020, "Member 'GetAllItemsCallbackProxy_ExchangeItems::InItems' has a wrong offset!");
static_assert(offsetof(GetAllItemsCallbackProxy_ExchangeItems, ReturnValue) == 0x000030, "Member 'GetAllItemsCallbackProxy_ExchangeItems::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.GetAllItemsCallbackProxy.GenerateItems
// 0x0028 (0x0028 - 0x0000)
struct GetAllItemsCallbackProxy_GenerateItems final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      PlayerController;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ItemDefinitionIds;                                 // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class UGetAllItemsCallbackProxy*              ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GetAllItemsCallbackProxy_GenerateItems) == 0x000008, "Wrong alignment on GetAllItemsCallbackProxy_GenerateItems");
static_assert(sizeof(GetAllItemsCallbackProxy_GenerateItems) == 0x000028, "Wrong size on GetAllItemsCallbackProxy_GenerateItems");
static_assert(offsetof(GetAllItemsCallbackProxy_GenerateItems, WorldContextObject) == 0x000000, "Member 'GetAllItemsCallbackProxy_GenerateItems::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GetAllItemsCallbackProxy_GenerateItems, PlayerController) == 0x000008, "Member 'GetAllItemsCallbackProxy_GenerateItems::PlayerController' has a wrong offset!");
static_assert(offsetof(GetAllItemsCallbackProxy_GenerateItems, ItemDefinitionIds) == 0x000010, "Member 'GetAllItemsCallbackProxy_GenerateItems::ItemDefinitionIds' has a wrong offset!");
static_assert(offsetof(GetAllItemsCallbackProxy_GenerateItems, ReturnValue) == 0x000020, "Member 'GetAllItemsCallbackProxy_GenerateItems::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.GetAllItemsCallbackProxy.GetAllItems
// 0x0018 (0x0018 - 0x0000)
struct GetAllItemsCallbackProxy_GetAllItems final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      PlayerController;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGetAllItemsCallbackProxy*              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GetAllItemsCallbackProxy_GetAllItems) == 0x000008, "Wrong alignment on GetAllItemsCallbackProxy_GetAllItems");
static_assert(sizeof(GetAllItemsCallbackProxy_GetAllItems) == 0x000018, "Wrong size on GetAllItemsCallbackProxy_GetAllItems");
static_assert(offsetof(GetAllItemsCallbackProxy_GetAllItems, WorldContextObject) == 0x000000, "Member 'GetAllItemsCallbackProxy_GetAllItems::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GetAllItemsCallbackProxy_GetAllItems, PlayerController) == 0x000008, "Member 'GetAllItemsCallbackProxy_GetAllItems::PlayerController' has a wrong offset!");
static_assert(offsetof(GetAllItemsCallbackProxy_GetAllItems, ReturnValue) == 0x000010, "Member 'GetAllItemsCallbackProxy_GetAllItems::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.GetAllItemsCallbackProxy.GetItemDefinitionId
// 0x0018 (0x0018 - 0x0000)
struct GetAllItemsCallbackProxy_GetItemDefinitionId final
{
public:
	struct FBlueprintOnlineItem                   Item;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GetAllItemsCallbackProxy_GetItemDefinitionId) == 0x000008, "Wrong alignment on GetAllItemsCallbackProxy_GetItemDefinitionId");
static_assert(sizeof(GetAllItemsCallbackProxy_GetItemDefinitionId) == 0x000018, "Wrong size on GetAllItemsCallbackProxy_GetItemDefinitionId");
static_assert(offsetof(GetAllItemsCallbackProxy_GetItemDefinitionId, Item) == 0x000000, "Member 'GetAllItemsCallbackProxy_GetItemDefinitionId::Item' has a wrong offset!");
static_assert(offsetof(GetAllItemsCallbackProxy_GetItemDefinitionId, ReturnValue) == 0x000010, "Member 'GetAllItemsCallbackProxy_GetItemDefinitionId::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.GetAllItemsCallbackProxy.GetItemFlags
// 0x0018 (0x0018 - 0x0000)
struct GetAllItemsCallbackProxy_GetItemFlags final
{
public:
	struct FBlueprintOnlineItem                   Item;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GetAllItemsCallbackProxy_GetItemFlags) == 0x000008, "Wrong alignment on GetAllItemsCallbackProxy_GetItemFlags");
static_assert(sizeof(GetAllItemsCallbackProxy_GetItemFlags) == 0x000018, "Wrong size on GetAllItemsCallbackProxy_GetItemFlags");
static_assert(offsetof(GetAllItemsCallbackProxy_GetItemFlags, Item) == 0x000000, "Member 'GetAllItemsCallbackProxy_GetItemFlags::Item' has a wrong offset!");
static_assert(offsetof(GetAllItemsCallbackProxy_GetItemFlags, ReturnValue) == 0x000010, "Member 'GetAllItemsCallbackProxy_GetItemFlags::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.GetAllItemsCallbackProxy.GetItemId
// 0x0020 (0x0020 - 0x0000)
struct GetAllItemsCallbackProxy_GetItemId final
{
public:
	struct FBlueprintOnlineItem                   Item;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GetAllItemsCallbackProxy_GetItemId) == 0x000008, "Wrong alignment on GetAllItemsCallbackProxy_GetItemId");
static_assert(sizeof(GetAllItemsCallbackProxy_GetItemId) == 0x000020, "Wrong size on GetAllItemsCallbackProxy_GetItemId");
static_assert(offsetof(GetAllItemsCallbackProxy_GetItemId, Item) == 0x000000, "Member 'GetAllItemsCallbackProxy_GetItemId::Item' has a wrong offset!");
static_assert(offsetof(GetAllItemsCallbackProxy_GetItemId, ReturnValue) == 0x000010, "Member 'GetAllItemsCallbackProxy_GetItemId::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.GetAllItemsCallbackProxy.GetItemQuantity
// 0x0018 (0x0018 - 0x0000)
struct GetAllItemsCallbackProxy_GetItemQuantity final
{
public:
	struct FBlueprintOnlineItem                   Item;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GetAllItemsCallbackProxy_GetItemQuantity) == 0x000008, "Wrong alignment on GetAllItemsCallbackProxy_GetItemQuantity");
static_assert(sizeof(GetAllItemsCallbackProxy_GetItemQuantity) == 0x000018, "Wrong size on GetAllItemsCallbackProxy_GetItemQuantity");
static_assert(offsetof(GetAllItemsCallbackProxy_GetItemQuantity, Item) == 0x000000, "Member 'GetAllItemsCallbackProxy_GetItemQuantity::Item' has a wrong offset!");
static_assert(offsetof(GetAllItemsCallbackProxy_GetItemQuantity, ReturnValue) == 0x000010, "Member 'GetAllItemsCallbackProxy_GetItemQuantity::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.GetAllItemsCallbackProxy.GrantPromoItems
// 0x0018 (0x0018 - 0x0000)
struct GetAllItemsCallbackProxy_GrantPromoItems final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      PlayerController;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGetAllItemsCallbackProxy*              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GetAllItemsCallbackProxy_GrantPromoItems) == 0x000008, "Wrong alignment on GetAllItemsCallbackProxy_GrantPromoItems");
static_assert(sizeof(GetAllItemsCallbackProxy_GrantPromoItems) == 0x000018, "Wrong size on GetAllItemsCallbackProxy_GrantPromoItems");
static_assert(offsetof(GetAllItemsCallbackProxy_GrantPromoItems, WorldContextObject) == 0x000000, "Member 'GetAllItemsCallbackProxy_GrantPromoItems::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GetAllItemsCallbackProxy_GrantPromoItems, PlayerController) == 0x000008, "Member 'GetAllItemsCallbackProxy_GrantPromoItems::PlayerController' has a wrong offset!");
static_assert(offsetof(GetAllItemsCallbackProxy_GrantPromoItems, ReturnValue) == 0x000010, "Member 'GetAllItemsCallbackProxy_GrantPromoItems::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.GetAllItemsCallbackProxy.SetItemDefinitionId
// 0x0018 (0x0018 - 0x0000)
struct GetAllItemsCallbackProxy_SetItemDefinitionId final
{
public:
	struct FBlueprintOnlineItem                   Item;                                              // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         DefinitionId;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GetAllItemsCallbackProxy_SetItemDefinitionId) == 0x000008, "Wrong alignment on GetAllItemsCallbackProxy_SetItemDefinitionId");
static_assert(sizeof(GetAllItemsCallbackProxy_SetItemDefinitionId) == 0x000018, "Wrong size on GetAllItemsCallbackProxy_SetItemDefinitionId");
static_assert(offsetof(GetAllItemsCallbackProxy_SetItemDefinitionId, Item) == 0x000000, "Member 'GetAllItemsCallbackProxy_SetItemDefinitionId::Item' has a wrong offset!");
static_assert(offsetof(GetAllItemsCallbackProxy_SetItemDefinitionId, DefinitionId) == 0x000010, "Member 'GetAllItemsCallbackProxy_SetItemDefinitionId::DefinitionId' has a wrong offset!");

// Function PropWitchHuntModule.GetAllItemsCallbackProxy.SetItemFlags
// 0x0018 (0x0018 - 0x0000)
struct GetAllItemsCallbackProxy_SetItemFlags final
{
public:
	struct FBlueprintOnlineItem                   Item;                                              // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Flags_0;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GetAllItemsCallbackProxy_SetItemFlags) == 0x000008, "Wrong alignment on GetAllItemsCallbackProxy_SetItemFlags");
static_assert(sizeof(GetAllItemsCallbackProxy_SetItemFlags) == 0x000018, "Wrong size on GetAllItemsCallbackProxy_SetItemFlags");
static_assert(offsetof(GetAllItemsCallbackProxy_SetItemFlags, Item) == 0x000000, "Member 'GetAllItemsCallbackProxy_SetItemFlags::Item' has a wrong offset!");
static_assert(offsetof(GetAllItemsCallbackProxy_SetItemFlags, Flags_0) == 0x000010, "Member 'GetAllItemsCallbackProxy_SetItemFlags::Flags_0' has a wrong offset!");

// Function PropWitchHuntModule.GetAllItemsCallbackProxy.SetItemQuantity
// 0x0018 (0x0018 - 0x0000)
struct GetAllItemsCallbackProxy_SetItemQuantity final
{
public:
	struct FBlueprintOnlineItem                   Item;                                              // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GetAllItemsCallbackProxy_SetItemQuantity) == 0x000008, "Wrong alignment on GetAllItemsCallbackProxy_SetItemQuantity");
static_assert(sizeof(GetAllItemsCallbackProxy_SetItemQuantity) == 0x000018, "Wrong size on GetAllItemsCallbackProxy_SetItemQuantity");
static_assert(offsetof(GetAllItemsCallbackProxy_SetItemQuantity, Item) == 0x000000, "Member 'GetAllItemsCallbackProxy_SetItemQuantity::Item' has a wrong offset!");
static_assert(offsetof(GetAllItemsCallbackProxy_SetItemQuantity, Quantity) == 0x000010, "Member 'GetAllItemsCallbackProxy_SetItemQuantity::Quantity' has a wrong offset!");

// Function PropWitchHuntModule.GetAllItemsCallbackProxy.TriggerItemDrop
// 0x0020 (0x0020 - 0x0000)
struct GetAllItemsCallbackProxy_TriggerItemDrop final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      PlayerController;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemDefinitionId;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGetAllItemsCallbackProxy*              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GetAllItemsCallbackProxy_TriggerItemDrop) == 0x000008, "Wrong alignment on GetAllItemsCallbackProxy_TriggerItemDrop");
static_assert(sizeof(GetAllItemsCallbackProxy_TriggerItemDrop) == 0x000020, "Wrong size on GetAllItemsCallbackProxy_TriggerItemDrop");
static_assert(offsetof(GetAllItemsCallbackProxy_TriggerItemDrop, WorldContextObject) == 0x000000, "Member 'GetAllItemsCallbackProxy_TriggerItemDrop::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GetAllItemsCallbackProxy_TriggerItemDrop, PlayerController) == 0x000008, "Member 'GetAllItemsCallbackProxy_TriggerItemDrop::PlayerController' has a wrong offset!");
static_assert(offsetof(GetAllItemsCallbackProxy_TriggerItemDrop, ItemDefinitionId) == 0x000010, "Member 'GetAllItemsCallbackProxy_TriggerItemDrop::ItemDefinitionId' has a wrong offset!");
static_assert(offsetof(GetAllItemsCallbackProxy_TriggerItemDrop, ReturnValue) == 0x000018, "Member 'GetAllItemsCallbackProxy_TriggerItemDrop::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.GetAllItemsCallbackProxy.RequestInventoryResponse
// 0x0008 (0x0008 - 0x0000)
struct GetAllItemsCallbackProxy_RequestInventoryResponse final
{
public:
	class UVaRestRequestJSON*                     Request;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GetAllItemsCallbackProxy_RequestInventoryResponse) == 0x000008, "Wrong alignment on GetAllItemsCallbackProxy_RequestInventoryResponse");
static_assert(sizeof(GetAllItemsCallbackProxy_RequestInventoryResponse) == 0x000008, "Wrong size on GetAllItemsCallbackProxy_RequestInventoryResponse");
static_assert(offsetof(GetAllItemsCallbackProxy_RequestInventoryResponse, Request) == 0x000000, "Member 'GetAllItemsCallbackProxy_RequestInventoryResponse::Request' has a wrong offset!");

// Function PropWitchHuntModule.GetAllItemsCallbackProxy.RequestItemExchangeResponse
// 0x0008 (0x0008 - 0x0000)
struct GetAllItemsCallbackProxy_RequestItemExchangeResponse final
{
public:
	class UVaRestRequestJSON*                     Request;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GetAllItemsCallbackProxy_RequestItemExchangeResponse) == 0x000008, "Wrong alignment on GetAllItemsCallbackProxy_RequestItemExchangeResponse");
static_assert(sizeof(GetAllItemsCallbackProxy_RequestItemExchangeResponse) == 0x000008, "Wrong size on GetAllItemsCallbackProxy_RequestItemExchangeResponse");
static_assert(offsetof(GetAllItemsCallbackProxy_RequestItemExchangeResponse, Request) == 0x000000, "Member 'GetAllItemsCallbackProxy_RequestItemExchangeResponse::Request' has a wrong offset!");

// Function PropWitchHuntModule.ImageLoader.LoadImageFromDisk
// 0x0020 (0x0020 - 0x0000)
struct ImageLoader_LoadImageFromDisk final
{
public:
	class UObject*                                Outer_0;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ImagePath;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImageLoader_LoadImageFromDisk) == 0x000008, "Wrong alignment on ImageLoader_LoadImageFromDisk");
static_assert(sizeof(ImageLoader_LoadImageFromDisk) == 0x000020, "Wrong size on ImageLoader_LoadImageFromDisk");
static_assert(offsetof(ImageLoader_LoadImageFromDisk, Outer_0) == 0x000000, "Member 'ImageLoader_LoadImageFromDisk::Outer_0' has a wrong offset!");
static_assert(offsetof(ImageLoader_LoadImageFromDisk, ImagePath) == 0x000008, "Member 'ImageLoader_LoadImageFromDisk::ImagePath' has a wrong offset!");
static_assert(offsetof(ImageLoader_LoadImageFromDisk, ReturnValue) == 0x000018, "Member 'ImageLoader_LoadImageFromDisk::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.Integer64Library.ToString
// 0x0018 (0x0018 - 0x0000)
struct Integer64Library_ToString final
{
public:
	int64                                         Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Integer64Library_ToString) == 0x000008, "Wrong alignment on Integer64Library_ToString");
static_assert(sizeof(Integer64Library_ToString) == 0x000018, "Wrong size on Integer64Library_ToString");
static_assert(offsetof(Integer64Library_ToString, Value) == 0x000000, "Member 'Integer64Library_ToString::Value' has a wrong offset!");
static_assert(offsetof(Integer64Library_ToString, ReturnValue) == 0x000008, "Member 'Integer64Library_ToString::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.Logger.LogError
// 0x0010 (0x0010 - 0x0000)
struct Logger_LogError final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Logger_LogError) == 0x000008, "Wrong alignment on Logger_LogError");
static_assert(sizeof(Logger_LogError) == 0x000010, "Wrong size on Logger_LogError");
static_assert(offsetof(Logger_LogError, Text) == 0x000000, "Member 'Logger_LogError::Text' has a wrong offset!");

// Function PropWitchHuntModule.Logger.LogInfo
// 0x0010 (0x0010 - 0x0000)
struct Logger_LogInfo final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Logger_LogInfo) == 0x000008, "Wrong alignment on Logger_LogInfo");
static_assert(sizeof(Logger_LogInfo) == 0x000010, "Wrong size on Logger_LogInfo");
static_assert(offsetof(Logger_LogInfo, Text) == 0x000000, "Member 'Logger_LogInfo::Text' has a wrong offset!");

// Function PropWitchHuntModule.Logger.LogWarning
// 0x0010 (0x0010 - 0x0000)
struct Logger_LogWarning final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Logger_LogWarning) == 0x000008, "Wrong alignment on Logger_LogWarning");
static_assert(sizeof(Logger_LogWarning) == 0x000010, "Wrong size on Logger_LogWarning");
static_assert(offsetof(Logger_LogWarning, Text) == 0x000000, "Member 'Logger_LogWarning::Text' has a wrong offset!");

// Function PropWitchHuntModule.MatchSubsystem.CreateGameMatch
// 0x0010 (0x0010 - 0x0000)
struct MatchSubsystem_CreateGameMatch final
{
public:
	TArray<struct FMatchPlayer>                   Players;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchSubsystem_CreateGameMatch) == 0x000008, "Wrong alignment on MatchSubsystem_CreateGameMatch");
static_assert(sizeof(MatchSubsystem_CreateGameMatch) == 0x000010, "Wrong size on MatchSubsystem_CreateGameMatch");
static_assert(offsetof(MatchSubsystem_CreateGameMatch, Players) == 0x000000, "Member 'MatchSubsystem_CreateGameMatch::Players' has a wrong offset!");

// Function PropWitchHuntModule.MatchSubsystem.JoinPlayerToMatch
// 0x0010 (0x0010 - 0x0000)
struct MatchSubsystem_JoinPlayerToMatch final
{
public:
	TArray<struct FMatchPlayer>                   Players;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchSubsystem_JoinPlayerToMatch) == 0x000008, "Wrong alignment on MatchSubsystem_JoinPlayerToMatch");
static_assert(sizeof(MatchSubsystem_JoinPlayerToMatch) == 0x000010, "Wrong size on MatchSubsystem_JoinPlayerToMatch");
static_assert(offsetof(MatchSubsystem_JoinPlayerToMatch, Players) == 0x000000, "Member 'MatchSubsystem_JoinPlayerToMatch::Players' has a wrong offset!");

// Function PropWitchHuntModule.MatchSubsystem.LeavePlayersFromMatch
// 0x0010 (0x0010 - 0x0000)
struct MatchSubsystem_LeavePlayersFromMatch final
{
public:
	TArray<struct FMatchPlayer>                   Players;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchSubsystem_LeavePlayersFromMatch) == 0x000008, "Wrong alignment on MatchSubsystem_LeavePlayersFromMatch");
static_assert(sizeof(MatchSubsystem_LeavePlayersFromMatch) == 0x000010, "Wrong size on MatchSubsystem_LeavePlayersFromMatch");
static_assert(offsetof(MatchSubsystem_LeavePlayersFromMatch, Players) == 0x000000, "Member 'MatchSubsystem_LeavePlayersFromMatch::Players' has a wrong offset!");

// Function PropWitchHuntModule.MatchSubsystem.OnCreateMatchResponse
// 0x0008 (0x0008 - 0x0000)
struct MatchSubsystem_OnCreateMatchResponse final
{
public:
	class UVaRestRequestJSON*                     Request;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchSubsystem_OnCreateMatchResponse) == 0x000008, "Wrong alignment on MatchSubsystem_OnCreateMatchResponse");
static_assert(sizeof(MatchSubsystem_OnCreateMatchResponse) == 0x000008, "Wrong size on MatchSubsystem_OnCreateMatchResponse");
static_assert(offsetof(MatchSubsystem_OnCreateMatchResponse, Request) == 0x000000, "Member 'MatchSubsystem_OnCreateMatchResponse::Request' has a wrong offset!");

// Function PropWitchHuntModule.MatchSubsystem.OnGetSonyAccessTokenResponse
// 0x0008 (0x0008 - 0x0000)
struct MatchSubsystem_OnGetSonyAccessTokenResponse final
{
public:
	class UVaRestRequestJSON*                     Request;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchSubsystem_OnGetSonyAccessTokenResponse) == 0x000008, "Wrong alignment on MatchSubsystem_OnGetSonyAccessTokenResponse");
static_assert(sizeof(MatchSubsystem_OnGetSonyAccessTokenResponse) == 0x000008, "Wrong size on MatchSubsystem_OnGetSonyAccessTokenResponse");
static_assert(offsetof(MatchSubsystem_OnGetSonyAccessTokenResponse, Request) == 0x000000, "Member 'MatchSubsystem_OnGetSonyAccessTokenResponse::Request' has a wrong offset!");

// Function PropWitchHuntModule.MatchSubsystem.OnJoinMatchResponse
// 0x0008 (0x0008 - 0x0000)
struct MatchSubsystem_OnJoinMatchResponse final
{
public:
	class UVaRestRequestJSON*                     Request;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchSubsystem_OnJoinMatchResponse) == 0x000008, "Wrong alignment on MatchSubsystem_OnJoinMatchResponse");
static_assert(sizeof(MatchSubsystem_OnJoinMatchResponse) == 0x000008, "Wrong size on MatchSubsystem_OnJoinMatchResponse");
static_assert(offsetof(MatchSubsystem_OnJoinMatchResponse, Request) == 0x000000, "Member 'MatchSubsystem_OnJoinMatchResponse::Request' has a wrong offset!");

// Function PropWitchHuntModule.MatchSubsystem.OnLeaveMatchResponse
// 0x0008 (0x0008 - 0x0000)
struct MatchSubsystem_OnLeaveMatchResponse final
{
public:
	class UVaRestRequestJSON*                     Request;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchSubsystem_OnLeaveMatchResponse) == 0x000008, "Wrong alignment on MatchSubsystem_OnLeaveMatchResponse");
static_assert(sizeof(MatchSubsystem_OnLeaveMatchResponse) == 0x000008, "Wrong size on MatchSubsystem_OnLeaveMatchResponse");
static_assert(offsetof(MatchSubsystem_OnLeaveMatchResponse, Request) == 0x000000, "Member 'MatchSubsystem_OnLeaveMatchResponse::Request' has a wrong offset!");

// Function PropWitchHuntModule.MatchSubsystem.OnReportMatchResultsResponse
// 0x0008 (0x0008 - 0x0000)
struct MatchSubsystem_OnReportMatchResultsResponse final
{
public:
	class UVaRestRequestJSON*                     Request;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchSubsystem_OnReportMatchResultsResponse) == 0x000008, "Wrong alignment on MatchSubsystem_OnReportMatchResultsResponse");
static_assert(sizeof(MatchSubsystem_OnReportMatchResultsResponse) == 0x000008, "Wrong size on MatchSubsystem_OnReportMatchResultsResponse");
static_assert(offsetof(MatchSubsystem_OnReportMatchResultsResponse, Request) == 0x000000, "Member 'MatchSubsystem_OnReportMatchResultsResponse::Request' has a wrong offset!");

// Function PropWitchHuntModule.MatchSubsystem.OnUpdateMatchDetailsResponse
// 0x0008 (0x0008 - 0x0000)
struct MatchSubsystem_OnUpdateMatchDetailsResponse final
{
public:
	class UVaRestRequestJSON*                     Request;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchSubsystem_OnUpdateMatchDetailsResponse) == 0x000008, "Wrong alignment on MatchSubsystem_OnUpdateMatchDetailsResponse");
static_assert(sizeof(MatchSubsystem_OnUpdateMatchDetailsResponse) == 0x000008, "Wrong size on MatchSubsystem_OnUpdateMatchDetailsResponse");
static_assert(offsetof(MatchSubsystem_OnUpdateMatchDetailsResponse, Request) == 0x000000, "Member 'MatchSubsystem_OnUpdateMatchDetailsResponse::Request' has a wrong offset!");

// Function PropWitchHuntModule.MatchSubsystem.OnUpdateMatchStatusResponse
// 0x0008 (0x0008 - 0x0000)
struct MatchSubsystem_OnUpdateMatchStatusResponse final
{
public:
	class UVaRestRequestJSON*                     Request;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchSubsystem_OnUpdateMatchStatusResponse) == 0x000008, "Wrong alignment on MatchSubsystem_OnUpdateMatchStatusResponse");
static_assert(sizeof(MatchSubsystem_OnUpdateMatchStatusResponse) == 0x000008, "Wrong size on MatchSubsystem_OnUpdateMatchStatusResponse");
static_assert(offsetof(MatchSubsystem_OnUpdateMatchStatusResponse, Request) == 0x000000, "Member 'MatchSubsystem_OnUpdateMatchStatusResponse::Request' has a wrong offset!");

// Function PropWitchHuntModule.MatchSubsystem.ReportMatchResults
// 0x0010 (0x0010 - 0x0000)
struct MatchSubsystem_ReportMatchResults final
{
public:
	TArray<struct FMatchTeamResult>               Results;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchSubsystem_ReportMatchResults) == 0x000008, "Wrong alignment on MatchSubsystem_ReportMatchResults");
static_assert(sizeof(MatchSubsystem_ReportMatchResults) == 0x000010, "Wrong size on MatchSubsystem_ReportMatchResults");
static_assert(offsetof(MatchSubsystem_ReportMatchResults, Results) == 0x000000, "Member 'MatchSubsystem_ReportMatchResults::Results' has a wrong offset!");

// Function PropWitchHuntModule.MatchSubsystem.UpdateMatchDetails
// 0x0020 (0x0020 - 0x0000)
struct MatchSubsystem_UpdateMatchDetails final
{
public:
	TArray<struct FMatchPlayer>                   Players;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FMatchTeam>                     Teams;                                             // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchSubsystem_UpdateMatchDetails) == 0x000008, "Wrong alignment on MatchSubsystem_UpdateMatchDetails");
static_assert(sizeof(MatchSubsystem_UpdateMatchDetails) == 0x000020, "Wrong size on MatchSubsystem_UpdateMatchDetails");
static_assert(offsetof(MatchSubsystem_UpdateMatchDetails, Players) == 0x000000, "Member 'MatchSubsystem_UpdateMatchDetails::Players' has a wrong offset!");
static_assert(offsetof(MatchSubsystem_UpdateMatchDetails, Teams) == 0x000010, "Member 'MatchSubsystem_UpdateMatchDetails::Teams' has a wrong offset!");

// Function PropWitchHuntModule.MatchSubsystem.UpdateMatchStatus
// 0x0001 (0x0001 - 0x0000)
struct MatchSubsystem_UpdateMatchStatus final
{
public:
	EUpdateMatchStatus                            MatchStatus;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchSubsystem_UpdateMatchStatus) == 0x000001, "Wrong alignment on MatchSubsystem_UpdateMatchStatus");
static_assert(sizeof(MatchSubsystem_UpdateMatchStatus) == 0x000001, "Wrong size on MatchSubsystem_UpdateMatchStatus");
static_assert(offsetof(MatchSubsystem_UpdateMatchStatus, MatchStatus) == 0x000000, "Member 'MatchSubsystem_UpdateMatchStatus::MatchStatus' has a wrong offset!");

// Function PropWitchHuntModule.BeaconPingCallbackProxy.BeaconPingString
// 0x0030 (0x0030 - 0x0000)
struct BeaconPingCallbackProxy_BeaconPingString final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetAddress;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionId;                                         // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBeaconPingCallbackProxy*               ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeaconPingCallbackProxy_BeaconPingString) == 0x000008, "Wrong alignment on BeaconPingCallbackProxy_BeaconPingString");
static_assert(sizeof(BeaconPingCallbackProxy_BeaconPingString) == 0x000030, "Wrong size on BeaconPingCallbackProxy_BeaconPingString");
static_assert(offsetof(BeaconPingCallbackProxy_BeaconPingString, WorldContextObject) == 0x000000, "Member 'BeaconPingCallbackProxy_BeaconPingString::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BeaconPingCallbackProxy_BeaconPingString, TargetAddress) == 0x000008, "Member 'BeaconPingCallbackProxy_BeaconPingString::TargetAddress' has a wrong offset!");
static_assert(offsetof(BeaconPingCallbackProxy_BeaconPingString, SessionId) == 0x000018, "Member 'BeaconPingCallbackProxy_BeaconPingString::SessionId' has a wrong offset!");
static_assert(offsetof(BeaconPingCallbackProxy_BeaconPingString, ReturnValue) == 0x000028, "Member 'BeaconPingCallbackProxy_BeaconPingString::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.OnlineSubsystemLibrary.GetBRGPassword
// 0x0018 (0x0018 - 0x0000)
struct OnlineSubsystemLibrary_GetBRGPassword final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineSubsystemLibrary_GetBRGPassword) == 0x000008, "Wrong alignment on OnlineSubsystemLibrary_GetBRGPassword");
static_assert(sizeof(OnlineSubsystemLibrary_GetBRGPassword) == 0x000018, "Wrong size on OnlineSubsystemLibrary_GetBRGPassword");
static_assert(offsetof(OnlineSubsystemLibrary_GetBRGPassword, WorldContextObject) == 0x000000, "Member 'OnlineSubsystemLibrary_GetBRGPassword::WorldContextObject' has a wrong offset!");
static_assert(offsetof(OnlineSubsystemLibrary_GetBRGPassword, ReturnValue) == 0x000008, "Member 'OnlineSubsystemLibrary_GetBRGPassword::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.OnlineSubsystemLibrary.GetBRGUsername
// 0x0018 (0x0018 - 0x0000)
struct OnlineSubsystemLibrary_GetBRGUsername final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineSubsystemLibrary_GetBRGUsername) == 0x000008, "Wrong alignment on OnlineSubsystemLibrary_GetBRGUsername");
static_assert(sizeof(OnlineSubsystemLibrary_GetBRGUsername) == 0x000018, "Wrong size on OnlineSubsystemLibrary_GetBRGUsername");
static_assert(offsetof(OnlineSubsystemLibrary_GetBRGUsername, WorldContextObject) == 0x000000, "Member 'OnlineSubsystemLibrary_GetBRGUsername::WorldContextObject' has a wrong offset!");
static_assert(offsetof(OnlineSubsystemLibrary_GetBRGUsername, ReturnValue) == 0x000008, "Member 'OnlineSubsystemLibrary_GetBRGUsername::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.OnlineSubsystemLibrary.HasAnyRealOnlineSubsystem
// 0x0001 (0x0001 - 0x0000)
struct OnlineSubsystemLibrary_HasAnyRealOnlineSubsystem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineSubsystemLibrary_HasAnyRealOnlineSubsystem) == 0x000001, "Wrong alignment on OnlineSubsystemLibrary_HasAnyRealOnlineSubsystem");
static_assert(sizeof(OnlineSubsystemLibrary_HasAnyRealOnlineSubsystem) == 0x000001, "Wrong size on OnlineSubsystemLibrary_HasAnyRealOnlineSubsystem");
static_assert(offsetof(OnlineSubsystemLibrary_HasAnyRealOnlineSubsystem, ReturnValue) == 0x000000, "Member 'OnlineSubsystemLibrary_HasAnyRealOnlineSubsystem::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.OnlineSubsystemLibrary.IsPlayerBlocked
// 0x0048 (0x0048 - 0x0000)
struct OnlineSubsystemLibrary_IsPlayerBlocked final
{
public:
	struct FBPUniqueNetId                         LocalPlayerNetId;                                  // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FBPUniqueNetId                         PlayerNetId;                                       // 0x0020(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineSubsystemLibrary_IsPlayerBlocked) == 0x000008, "Wrong alignment on OnlineSubsystemLibrary_IsPlayerBlocked");
static_assert(sizeof(OnlineSubsystemLibrary_IsPlayerBlocked) == 0x000048, "Wrong size on OnlineSubsystemLibrary_IsPlayerBlocked");
static_assert(offsetof(OnlineSubsystemLibrary_IsPlayerBlocked, LocalPlayerNetId) == 0x000000, "Member 'OnlineSubsystemLibrary_IsPlayerBlocked::LocalPlayerNetId' has a wrong offset!");
static_assert(offsetof(OnlineSubsystemLibrary_IsPlayerBlocked, PlayerNetId) == 0x000020, "Member 'OnlineSubsystemLibrary_IsPlayerBlocked::PlayerNetId' has a wrong offset!");
static_assert(offsetof(OnlineSubsystemLibrary_IsPlayerBlocked, ReturnValue) == 0x000040, "Member 'OnlineSubsystemLibrary_IsPlayerBlocked::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.OnlineSubsystemLibrary.UseBRGOnlineSubsystem
// 0x0001 (0x0001 - 0x0000)
struct OnlineSubsystemLibrary_UseBRGOnlineSubsystem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineSubsystemLibrary_UseBRGOnlineSubsystem) == 0x000001, "Wrong alignment on OnlineSubsystemLibrary_UseBRGOnlineSubsystem");
static_assert(sizeof(OnlineSubsystemLibrary_UseBRGOnlineSubsystem) == 0x000001, "Wrong size on OnlineSubsystemLibrary_UseBRGOnlineSubsystem");
static_assert(offsetof(OnlineSubsystemLibrary_UseBRGOnlineSubsystem, ReturnValue) == 0x000000, "Member 'OnlineSubsystemLibrary_UseBRGOnlineSubsystem::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.PhysicalSoundComponent.GetLatestVelocity
// 0x0020 (0x0020 - 0x0000)
struct PhysicalSoundComponent_GetLatestVelocity final
{
public:
	int32                                         TicksToGoBack;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicalSoundComponent_GetLatestVelocity) == 0x000008, "Wrong alignment on PhysicalSoundComponent_GetLatestVelocity");
static_assert(sizeof(PhysicalSoundComponent_GetLatestVelocity) == 0x000020, "Wrong size on PhysicalSoundComponent_GetLatestVelocity");
static_assert(offsetof(PhysicalSoundComponent_GetLatestVelocity, TicksToGoBack) == 0x000000, "Member 'PhysicalSoundComponent_GetLatestVelocity::TicksToGoBack' has a wrong offset!");
static_assert(offsetof(PhysicalSoundComponent_GetLatestVelocity, ReturnValue) == 0x000008, "Member 'PhysicalSoundComponent_GetLatestVelocity::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.PhysicalSoundComponent.OnMeshHit
// 0x0120 (0x0120 - 0x0000)
struct PhysicalSoundComponent_OnMeshHit final
{
public:
	class AActor*                                 SelfActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0028(0x00F8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicalSoundComponent_OnMeshHit) == 0x000008, "Wrong alignment on PhysicalSoundComponent_OnMeshHit");
static_assert(sizeof(PhysicalSoundComponent_OnMeshHit) == 0x000120, "Wrong size on PhysicalSoundComponent_OnMeshHit");
static_assert(offsetof(PhysicalSoundComponent_OnMeshHit, SelfActor) == 0x000000, "Member 'PhysicalSoundComponent_OnMeshHit::SelfActor' has a wrong offset!");
static_assert(offsetof(PhysicalSoundComponent_OnMeshHit, OtherActor) == 0x000008, "Member 'PhysicalSoundComponent_OnMeshHit::OtherActor' has a wrong offset!");
static_assert(offsetof(PhysicalSoundComponent_OnMeshHit, NormalImpulse) == 0x000010, "Member 'PhysicalSoundComponent_OnMeshHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(PhysicalSoundComponent_OnMeshHit, Hit) == 0x000028, "Member 'PhysicalSoundComponent_OnMeshHit::Hit' has a wrong offset!");

// Function PropWitchHuntModule.PhysicalSoundComponent.PlayCollisionSound
// 0x0008 (0x0008 - 0x0000)
struct PhysicalSoundComponent_PlayCollisionSound final
{
public:
	double                                        VolumeMultiplier;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicalSoundComponent_PlayCollisionSound) == 0x000008, "Wrong alignment on PhysicalSoundComponent_PlayCollisionSound");
static_assert(sizeof(PhysicalSoundComponent_PlayCollisionSound) == 0x000008, "Wrong size on PhysicalSoundComponent_PlayCollisionSound");
static_assert(offsetof(PhysicalSoundComponent_PlayCollisionSound, VolumeMultiplier) == 0x000000, "Member 'PhysicalSoundComponent_PlayCollisionSound::VolumeMultiplier' has a wrong offset!");

// Function PropWitchHuntModule.PhysicalSoundComponent.PlaySound
// 0x0028 (0x0028 - 0x0000)
struct PhysicalSoundComponent_PlaySound final
{
public:
	struct FVector                                HitImpactNormal;                                   // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicalSoundComponent_PlaySound) == 0x000008, "Wrong alignment on PhysicalSoundComponent_PlaySound");
static_assert(sizeof(PhysicalSoundComponent_PlaySound) == 0x000028, "Wrong size on PhysicalSoundComponent_PlaySound");
static_assert(offsetof(PhysicalSoundComponent_PlaySound, HitImpactNormal) == 0x000000, "Member 'PhysicalSoundComponent_PlaySound::HitImpactNormal' has a wrong offset!");
static_assert(offsetof(PhysicalSoundComponent_PlaySound, OtherActor) == 0x000018, "Member 'PhysicalSoundComponent_PlaySound::OtherActor' has a wrong offset!");
static_assert(offsetof(PhysicalSoundComponent_PlaySound, ReturnValue) == 0x000020, "Member 'PhysicalSoundComponent_PlaySound::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.PhysicalSoundComponent.ShouldCollisionSoundPlay
// 0x0018 (0x0018 - 0x0000)
struct PhysicalSoundComponent_ShouldCollisionSoundPlay final
{
public:
	double                                        DotProduct;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ClampedVelocity;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicalSoundComponent_ShouldCollisionSoundPlay) == 0x000008, "Wrong alignment on PhysicalSoundComponent_ShouldCollisionSoundPlay");
static_assert(sizeof(PhysicalSoundComponent_ShouldCollisionSoundPlay) == 0x000018, "Wrong size on PhysicalSoundComponent_ShouldCollisionSoundPlay");
static_assert(offsetof(PhysicalSoundComponent_ShouldCollisionSoundPlay, DotProduct) == 0x000000, "Member 'PhysicalSoundComponent_ShouldCollisionSoundPlay::DotProduct' has a wrong offset!");
static_assert(offsetof(PhysicalSoundComponent_ShouldCollisionSoundPlay, ClampedVelocity) == 0x000008, "Member 'PhysicalSoundComponent_ShouldCollisionSoundPlay::ClampedVelocity' has a wrong offset!");
static_assert(offsetof(PhysicalSoundComponent_ShouldCollisionSoundPlay, ReturnValue) == 0x000010, "Member 'PhysicalSoundComponent_ShouldCollisionSoundPlay::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.PhysicalSoundComponent.ShouldSlideSoundPlay
// 0x0018 (0x0018 - 0x0000)
struct PhysicalSoundComponent_ShouldSlideSoundPlay final
{
public:
	double                                        DotProduct;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ClampedVelocity;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicalSoundComponent_ShouldSlideSoundPlay) == 0x000008, "Wrong alignment on PhysicalSoundComponent_ShouldSlideSoundPlay");
static_assert(sizeof(PhysicalSoundComponent_ShouldSlideSoundPlay) == 0x000018, "Wrong size on PhysicalSoundComponent_ShouldSlideSoundPlay");
static_assert(offsetof(PhysicalSoundComponent_ShouldSlideSoundPlay, DotProduct) == 0x000000, "Member 'PhysicalSoundComponent_ShouldSlideSoundPlay::DotProduct' has a wrong offset!");
static_assert(offsetof(PhysicalSoundComponent_ShouldSlideSoundPlay, ClampedVelocity) == 0x000008, "Member 'PhysicalSoundComponent_ShouldSlideSoundPlay::ClampedVelocity' has a wrong offset!");
static_assert(offsetof(PhysicalSoundComponent_ShouldSlideSoundPlay, ReturnValue) == 0x000010, "Member 'PhysicalSoundComponent_ShouldSlideSoundPlay::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.PhysicalSoundComponent.StopSlideSound
// 0x0001 (0x0001 - 0x0000)
struct PhysicalSoundComponent_StopSlideSound final
{
public:
	bool                                          bImmediately;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicalSoundComponent_StopSlideSound) == 0x000001, "Wrong alignment on PhysicalSoundComponent_StopSlideSound");
static_assert(sizeof(PhysicalSoundComponent_StopSlideSound) == 0x000001, "Wrong size on PhysicalSoundComponent_StopSlideSound");
static_assert(offsetof(PhysicalSoundComponent_StopSlideSound, bImmediately) == 0x000000, "Member 'PhysicalSoundComponent_StopSlideSound::bImmediately' has a wrong offset!");

// Function PropWitchHuntModule.PhysicalSoundComponent.UpdateSlideSound
// 0x0008 (0x0008 - 0x0000)
struct PhysicalSoundComponent_UpdateSlideSound final
{
public:
	double                                        DeltaSeconds;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicalSoundComponent_UpdateSlideSound) == 0x000008, "Wrong alignment on PhysicalSoundComponent_UpdateSlideSound");
static_assert(sizeof(PhysicalSoundComponent_UpdateSlideSound) == 0x000008, "Wrong size on PhysicalSoundComponent_UpdateSlideSound");
static_assert(offsetof(PhysicalSoundComponent_UpdateSlideSound, DeltaSeconds) == 0x000000, "Member 'PhysicalSoundComponent_UpdateSlideSound::DeltaSeconds' has a wrong offset!");

// Function PropWitchHuntModule.CallBackProxyPingServer.PingServer
// 0x0018 (0x0018 - 0x0000)
struct CallBackProxyPingServer_PingServer final
{
public:
	class FString                                 ServerAddress;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCallBackProxyPingServer*               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CallBackProxyPingServer_PingServer) == 0x000008, "Wrong alignment on CallBackProxyPingServer_PingServer");
static_assert(sizeof(CallBackProxyPingServer_PingServer) == 0x000018, "Wrong size on CallBackProxyPingServer_PingServer");
static_assert(offsetof(CallBackProxyPingServer_PingServer, ServerAddress) == 0x000000, "Member 'CallBackProxyPingServer_PingServer::ServerAddress' has a wrong offset!");
static_assert(offsetof(CallBackProxyPingServer_PingServer, ReturnValue) == 0x000010, "Member 'CallBackProxyPingServer_PingServer::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.ProjectVersionBlueprint.AddActorComponent
// 0x0018 (0x0018 - 0x0000)
struct ProjectVersionBlueprint_AddActorComponent final
{
public:
	class AActor*                                 OwnerActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 ActorComponentClass;                               // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActorComponent*                        ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectVersionBlueprint_AddActorComponent) == 0x000008, "Wrong alignment on ProjectVersionBlueprint_AddActorComponent");
static_assert(sizeof(ProjectVersionBlueprint_AddActorComponent) == 0x000018, "Wrong size on ProjectVersionBlueprint_AddActorComponent");
static_assert(offsetof(ProjectVersionBlueprint_AddActorComponent, OwnerActor) == 0x000000, "Member 'ProjectVersionBlueprint_AddActorComponent::OwnerActor' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_AddActorComponent, ActorComponentClass) == 0x000008, "Member 'ProjectVersionBlueprint_AddActorComponent::ActorComponentClass' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_AddActorComponent, ReturnValue) == 0x000010, "Member 'ProjectVersionBlueprint_AddActorComponent::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.ProjectVersionBlueprint.BanPlayer
// 0x0020 (0x0020 - 0x0000)
struct ProjectVersionBlueprint_BanPlayer final
{
public:
	class AGameModeBase*                          GameMode;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      BannedPlayer;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   BanReason;                                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectVersionBlueprint_BanPlayer) == 0x000008, "Wrong alignment on ProjectVersionBlueprint_BanPlayer");
static_assert(sizeof(ProjectVersionBlueprint_BanPlayer) == 0x000020, "Wrong size on ProjectVersionBlueprint_BanPlayer");
static_assert(offsetof(ProjectVersionBlueprint_BanPlayer, GameMode) == 0x000000, "Member 'ProjectVersionBlueprint_BanPlayer::GameMode' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_BanPlayer, BannedPlayer) == 0x000008, "Member 'ProjectVersionBlueprint_BanPlayer::BannedPlayer' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_BanPlayer, BanReason) == 0x000010, "Member 'ProjectVersionBlueprint_BanPlayer::BanReason' has a wrong offset!");

// Function PropWitchHuntModule.ProjectVersionBlueprint.ComponentEncroachesGeometry
// 0x0090 (0x0090 - 0x0000)
struct ProjectVersionBlueprint_ComponentEncroachesGeometry final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    PrimitiveComponent;                                // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0070(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0xF];                                       // 0x0081(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProjectVersionBlueprint_ComponentEncroachesGeometry) == 0x000010, "Wrong alignment on ProjectVersionBlueprint_ComponentEncroachesGeometry");
static_assert(sizeof(ProjectVersionBlueprint_ComponentEncroachesGeometry) == 0x000090, "Wrong size on ProjectVersionBlueprint_ComponentEncroachesGeometry");
static_assert(offsetof(ProjectVersionBlueprint_ComponentEncroachesGeometry, Actor) == 0x000000, "Member 'ProjectVersionBlueprint_ComponentEncroachesGeometry::Actor' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_ComponentEncroachesGeometry, PrimitiveComponent) == 0x000008, "Member 'ProjectVersionBlueprint_ComponentEncroachesGeometry::PrimitiveComponent' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_ComponentEncroachesGeometry, Transform) == 0x000010, "Member 'ProjectVersionBlueprint_ComponentEncroachesGeometry::Transform' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_ComponentEncroachesGeometry, IgnoreActors) == 0x000070, "Member 'ProjectVersionBlueprint_ComponentEncroachesGeometry::IgnoreActors' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_ComponentEncroachesGeometry, ReturnValue) == 0x000080, "Member 'ProjectVersionBlueprint_ComponentEncroachesGeometry::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.ProjectVersionBlueprint.GetAllChildBlueprintClasses
// 0x0018 (0x0018 - 0x0000)
struct ProjectVersionBlueprint_GetAllChildBlueprintClasses final
{
public:
	TSubclassOf<class UObject>                    BaseClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UObject>>            Subclasses;                                        // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectVersionBlueprint_GetAllChildBlueprintClasses) == 0x000008, "Wrong alignment on ProjectVersionBlueprint_GetAllChildBlueprintClasses");
static_assert(sizeof(ProjectVersionBlueprint_GetAllChildBlueprintClasses) == 0x000018, "Wrong size on ProjectVersionBlueprint_GetAllChildBlueprintClasses");
static_assert(offsetof(ProjectVersionBlueprint_GetAllChildBlueprintClasses, BaseClass) == 0x000000, "Member 'ProjectVersionBlueprint_GetAllChildBlueprintClasses::BaseClass' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_GetAllChildBlueprintClasses, Subclasses) == 0x000008, "Member 'ProjectVersionBlueprint_GetAllChildBlueprintClasses::Subclasses' has a wrong offset!");

// Function PropWitchHuntModule.ProjectVersionBlueprint.GetClassFName
// 0x0010 (0x0010 - 0x0000)
struct ProjectVersionBlueprint_GetClassFName final
{
public:
	class UClass*                                 blueprintClass;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectVersionBlueprint_GetClassFName) == 0x000008, "Wrong alignment on ProjectVersionBlueprint_GetClassFName");
static_assert(sizeof(ProjectVersionBlueprint_GetClassFName) == 0x000010, "Wrong size on ProjectVersionBlueprint_GetClassFName");
static_assert(offsetof(ProjectVersionBlueprint_GetClassFName, blueprintClass) == 0x000000, "Member 'ProjectVersionBlueprint_GetClassFName::blueprintClass' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_GetClassFName, ReturnValue) == 0x000008, "Member 'ProjectVersionBlueprint_GetClassFName::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.ProjectVersionBlueprint.GetClassObjectPath
// 0x0018 (0x0018 - 0x0000)
struct ProjectVersionBlueprint_GetClassObjectPath final
{
public:
	class UClass*                                 blueprintClass;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectVersionBlueprint_GetClassObjectPath) == 0x000008, "Wrong alignment on ProjectVersionBlueprint_GetClassObjectPath");
static_assert(sizeof(ProjectVersionBlueprint_GetClassObjectPath) == 0x000018, "Wrong size on ProjectVersionBlueprint_GetClassObjectPath");
static_assert(offsetof(ProjectVersionBlueprint_GetClassObjectPath, blueprintClass) == 0x000000, "Member 'ProjectVersionBlueprint_GetClassObjectPath::blueprintClass' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_GetClassObjectPath, ReturnValue) == 0x000008, "Member 'ProjectVersionBlueprint_GetClassObjectPath::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.ProjectVersionBlueprint.GetDefaultObject
// 0x0010 (0x0010 - 0x0000)
struct ProjectVersionBlueprint_GetDefaultObject final
{
public:
	TSubclassOf<class UObject>                    ObjectClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectVersionBlueprint_GetDefaultObject) == 0x000008, "Wrong alignment on ProjectVersionBlueprint_GetDefaultObject");
static_assert(sizeof(ProjectVersionBlueprint_GetDefaultObject) == 0x000010, "Wrong size on ProjectVersionBlueprint_GetDefaultObject");
static_assert(offsetof(ProjectVersionBlueprint_GetDefaultObject, ObjectClass) == 0x000000, "Member 'ProjectVersionBlueprint_GetDefaultObject::ObjectClass' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_GetDefaultObject, ReturnValue) == 0x000008, "Member 'ProjectVersionBlueprint_GetDefaultObject::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.ProjectVersionBlueprint.GetEarliestPurchaseUnixTime
// 0x0018 (0x0018 - 0x0000)
struct ProjectVersionBlueprint_GetEarliestPurchaseUnixTime final
{
public:
	class UGameInstance*                          GameInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectVersionBlueprint_GetEarliestPurchaseUnixTime) == 0x000008, "Wrong alignment on ProjectVersionBlueprint_GetEarliestPurchaseUnixTime");
static_assert(sizeof(ProjectVersionBlueprint_GetEarliestPurchaseUnixTime) == 0x000018, "Wrong size on ProjectVersionBlueprint_GetEarliestPurchaseUnixTime");
static_assert(offsetof(ProjectVersionBlueprint_GetEarliestPurchaseUnixTime, GameInstance) == 0x000000, "Member 'ProjectVersionBlueprint_GetEarliestPurchaseUnixTime::GameInstance' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_GetEarliestPurchaseUnixTime, ReturnValue) == 0x000008, "Member 'ProjectVersionBlueprint_GetEarliestPurchaseUnixTime::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.ProjectVersionBlueprint.GetEngineChangelist
// 0x0004 (0x0004 - 0x0000)
struct ProjectVersionBlueprint_GetEngineChangelist final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectVersionBlueprint_GetEngineChangelist) == 0x000004, "Wrong alignment on ProjectVersionBlueprint_GetEngineChangelist");
static_assert(sizeof(ProjectVersionBlueprint_GetEngineChangelist) == 0x000004, "Wrong size on ProjectVersionBlueprint_GetEngineChangelist");
static_assert(offsetof(ProjectVersionBlueprint_GetEngineChangelist, ReturnValue) == 0x000000, "Member 'ProjectVersionBlueprint_GetEngineChangelist::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.ProjectVersionBlueprint.GetEngineCompatibleChangelist
// 0x0004 (0x0004 - 0x0000)
struct ProjectVersionBlueprint_GetEngineCompatibleChangelist final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectVersionBlueprint_GetEngineCompatibleChangelist) == 0x000004, "Wrong alignment on ProjectVersionBlueprint_GetEngineCompatibleChangelist");
static_assert(sizeof(ProjectVersionBlueprint_GetEngineCompatibleChangelist) == 0x000004, "Wrong size on ProjectVersionBlueprint_GetEngineCompatibleChangelist");
static_assert(offsetof(ProjectVersionBlueprint_GetEngineCompatibleChangelist, ReturnValue) == 0x000000, "Member 'ProjectVersionBlueprint_GetEngineCompatibleChangelist::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.ProjectVersionBlueprint.GetFiles
// 0x0038 (0x0038 - 0x0000)
struct ProjectVersionBlueprint_GetFiles final
{
public:
	TArray<class FString>                         Files;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 RootFolderFullPath;                                // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ext;                                               // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProjectVersionBlueprint_GetFiles) == 0x000008, "Wrong alignment on ProjectVersionBlueprint_GetFiles");
static_assert(sizeof(ProjectVersionBlueprint_GetFiles) == 0x000038, "Wrong size on ProjectVersionBlueprint_GetFiles");
static_assert(offsetof(ProjectVersionBlueprint_GetFiles, Files) == 0x000000, "Member 'ProjectVersionBlueprint_GetFiles::Files' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_GetFiles, RootFolderFullPath) == 0x000010, "Member 'ProjectVersionBlueprint_GetFiles::RootFolderFullPath' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_GetFiles, Ext) == 0x000020, "Member 'ProjectVersionBlueprint_GetFiles::Ext' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_GetFiles, ReturnValue) == 0x000030, "Member 'ProjectVersionBlueprint_GetFiles::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.ProjectVersionBlueprint.GetFirstLocalPlayerController
// 0x0010 (0x0010 - 0x0000)
struct ProjectVersionBlueprint_GetFirstLocalPlayerController final
{
public:
	class UGameInstance*                          GameInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectVersionBlueprint_GetFirstLocalPlayerController) == 0x000008, "Wrong alignment on ProjectVersionBlueprint_GetFirstLocalPlayerController");
static_assert(sizeof(ProjectVersionBlueprint_GetFirstLocalPlayerController) == 0x000010, "Wrong size on ProjectVersionBlueprint_GetFirstLocalPlayerController");
static_assert(offsetof(ProjectVersionBlueprint_GetFirstLocalPlayerController, GameInstance) == 0x000000, "Member 'ProjectVersionBlueprint_GetFirstLocalPlayerController::GameInstance' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_GetFirstLocalPlayerController, ReturnValue) == 0x000008, "Member 'ProjectVersionBlueprint_GetFirstLocalPlayerController::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.ProjectVersionBlueprint.GetItemProperty
// 0x0030 (0x0030 - 0x0000)
struct ProjectVersionBlueprint_GetItemProperty final
{
public:
	class UGameInstance*                          GameInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBlueprintOnlineItem                   Item;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectVersionBlueprint_GetItemProperty) == 0x000008, "Wrong alignment on ProjectVersionBlueprint_GetItemProperty");
static_assert(sizeof(ProjectVersionBlueprint_GetItemProperty) == 0x000030, "Wrong size on ProjectVersionBlueprint_GetItemProperty");
static_assert(offsetof(ProjectVersionBlueprint_GetItemProperty, GameInstance) == 0x000000, "Member 'ProjectVersionBlueprint_GetItemProperty::GameInstance' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_GetItemProperty, Item) == 0x000008, "Member 'ProjectVersionBlueprint_GetItemProperty::Item' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_GetItemProperty, PropertyName) == 0x000018, "Member 'ProjectVersionBlueprint_GetItemProperty::PropertyName' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_GetItemProperty, ReturnValue) == 0x000020, "Member 'ProjectVersionBlueprint_GetItemProperty::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.ProjectVersionBlueprint.GetLaunchPath
// 0x0010 (0x0010 - 0x0000)
struct ProjectVersionBlueprint_GetLaunchPath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectVersionBlueprint_GetLaunchPath) == 0x000008, "Wrong alignment on ProjectVersionBlueprint_GetLaunchPath");
static_assert(sizeof(ProjectVersionBlueprint_GetLaunchPath) == 0x000010, "Wrong size on ProjectVersionBlueprint_GetLaunchPath");
static_assert(offsetof(ProjectVersionBlueprint_GetLaunchPath, ReturnValue) == 0x000000, "Member 'ProjectVersionBlueprint_GetLaunchPath::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.ProjectVersionBlueprint.GetMemoryStats
// 0x0020 (0x0020 - 0x0000)
struct ProjectVersionBlueprint_GetMemoryStats final
{
public:
	float                                         UsedPhysical;                                      // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PeakUsedPhysical;                                  // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UsedVirtual;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PeakUsedVirtual;                                   // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AvailablePhysical;                                 // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AvailableVirtual;                                  // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalPhysical;                                     // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalVirtual;                                      // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectVersionBlueprint_GetMemoryStats) == 0x000004, "Wrong alignment on ProjectVersionBlueprint_GetMemoryStats");
static_assert(sizeof(ProjectVersionBlueprint_GetMemoryStats) == 0x000020, "Wrong size on ProjectVersionBlueprint_GetMemoryStats");
static_assert(offsetof(ProjectVersionBlueprint_GetMemoryStats, UsedPhysical) == 0x000000, "Member 'ProjectVersionBlueprint_GetMemoryStats::UsedPhysical' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_GetMemoryStats, PeakUsedPhysical) == 0x000004, "Member 'ProjectVersionBlueprint_GetMemoryStats::PeakUsedPhysical' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_GetMemoryStats, UsedVirtual) == 0x000008, "Member 'ProjectVersionBlueprint_GetMemoryStats::UsedVirtual' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_GetMemoryStats, PeakUsedVirtual) == 0x00000C, "Member 'ProjectVersionBlueprint_GetMemoryStats::PeakUsedVirtual' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_GetMemoryStats, AvailablePhysical) == 0x000010, "Member 'ProjectVersionBlueprint_GetMemoryStats::AvailablePhysical' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_GetMemoryStats, AvailableVirtual) == 0x000014, "Member 'ProjectVersionBlueprint_GetMemoryStats::AvailableVirtual' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_GetMemoryStats, TotalPhysical) == 0x000018, "Member 'ProjectVersionBlueprint_GetMemoryStats::TotalPhysical' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_GetMemoryStats, TotalVirtual) == 0x00001C, "Member 'ProjectVersionBlueprint_GetMemoryStats::TotalVirtual' has a wrong offset!");

// Function PropWitchHuntModule.ProjectVersionBlueprint.GetProjectVersion
// 0x0010 (0x0010 - 0x0000)
struct ProjectVersionBlueprint_GetProjectVersion final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectVersionBlueprint_GetProjectVersion) == 0x000008, "Wrong alignment on ProjectVersionBlueprint_GetProjectVersion");
static_assert(sizeof(ProjectVersionBlueprint_GetProjectVersion) == 0x000010, "Wrong size on ProjectVersionBlueprint_GetProjectVersion");
static_assert(offsetof(ProjectVersionBlueprint_GetProjectVersion, ReturnValue) == 0x000000, "Member 'ProjectVersionBlueprint_GetProjectVersion::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.ProjectVersionBlueprint.GetSessionOwnersId
// 0x0130 (0x0130 - 0x0000)
struct ProjectVersionBlueprint_GetSessionOwnersId final
{
public:
	struct FBlueprintSessionResult                Result;                                            // 0x0000(0x0120)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0120(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectVersionBlueprint_GetSessionOwnersId) == 0x000008, "Wrong alignment on ProjectVersionBlueprint_GetSessionOwnersId");
static_assert(sizeof(ProjectVersionBlueprint_GetSessionOwnersId) == 0x000130, "Wrong size on ProjectVersionBlueprint_GetSessionOwnersId");
static_assert(offsetof(ProjectVersionBlueprint_GetSessionOwnersId, Result) == 0x000000, "Member 'ProjectVersionBlueprint_GetSessionOwnersId::Result' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_GetSessionOwnersId, ReturnValue) == 0x000120, "Member 'ProjectVersionBlueprint_GetSessionOwnersId::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.ProjectVersionBlueprint.GetUint64SteamIdAsString
// 0x0018 (0x0018 - 0x0000)
struct ProjectVersionBlueprint_GetUint64SteamIdAsString final
{
public:
	class UGameInstance*                          GameInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectVersionBlueprint_GetUint64SteamIdAsString) == 0x000008, "Wrong alignment on ProjectVersionBlueprint_GetUint64SteamIdAsString");
static_assert(sizeof(ProjectVersionBlueprint_GetUint64SteamIdAsString) == 0x000018, "Wrong size on ProjectVersionBlueprint_GetUint64SteamIdAsString");
static_assert(offsetof(ProjectVersionBlueprint_GetUint64SteamIdAsString, GameInstance) == 0x000000, "Member 'ProjectVersionBlueprint_GetUint64SteamIdAsString::GameInstance' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_GetUint64SteamIdAsString, ReturnValue) == 0x000008, "Member 'ProjectVersionBlueprint_GetUint64SteamIdAsString::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.ProjectVersionBlueprint.HasSaveGameAnyBytes
// 0x0018 (0x0018 - 0x0000)
struct ProjectVersionBlueprint_HasSaveGameAnyBytes final
{
public:
	class FString                                 SlotName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserIndex;                                         // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProjectVersionBlueprint_HasSaveGameAnyBytes) == 0x000008, "Wrong alignment on ProjectVersionBlueprint_HasSaveGameAnyBytes");
static_assert(sizeof(ProjectVersionBlueprint_HasSaveGameAnyBytes) == 0x000018, "Wrong size on ProjectVersionBlueprint_HasSaveGameAnyBytes");
static_assert(offsetof(ProjectVersionBlueprint_HasSaveGameAnyBytes, SlotName) == 0x000000, "Member 'ProjectVersionBlueprint_HasSaveGameAnyBytes::SlotName' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_HasSaveGameAnyBytes, UserIndex) == 0x000010, "Member 'ProjectVersionBlueprint_HasSaveGameAnyBytes::UserIndex' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_HasSaveGameAnyBytes, ReturnValue) == 0x000014, "Member 'ProjectVersionBlueprint_HasSaveGameAnyBytes::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.ProjectVersionBlueprint.IsConsoleBuild
// 0x0001 (0x0001 - 0x0000)
struct ProjectVersionBlueprint_IsConsoleBuild final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectVersionBlueprint_IsConsoleBuild) == 0x000001, "Wrong alignment on ProjectVersionBlueprint_IsConsoleBuild");
static_assert(sizeof(ProjectVersionBlueprint_IsConsoleBuild) == 0x000001, "Wrong size on ProjectVersionBlueprint_IsConsoleBuild");
static_assert(offsetof(ProjectVersionBlueprint_IsConsoleBuild, ReturnValue) == 0x000000, "Member 'ProjectVersionBlueprint_IsConsoleBuild::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.ProjectVersionBlueprint.IsEncroachingBlockingGeometry
// 0x0040 (0x0040 - 0x0000)
struct ProjectVersionBlueprint_IsEncroachingBlockingGeometry final
{
public:
	const class AActor*                           TestActor;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TestLocation;                                      // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               TestRotation;                                      // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProjectVersionBlueprint_IsEncroachingBlockingGeometry) == 0x000008, "Wrong alignment on ProjectVersionBlueprint_IsEncroachingBlockingGeometry");
static_assert(sizeof(ProjectVersionBlueprint_IsEncroachingBlockingGeometry) == 0x000040, "Wrong size on ProjectVersionBlueprint_IsEncroachingBlockingGeometry");
static_assert(offsetof(ProjectVersionBlueprint_IsEncroachingBlockingGeometry, TestActor) == 0x000000, "Member 'ProjectVersionBlueprint_IsEncroachingBlockingGeometry::TestActor' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_IsEncroachingBlockingGeometry, TestLocation) == 0x000008, "Member 'ProjectVersionBlueprint_IsEncroachingBlockingGeometry::TestLocation' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_IsEncroachingBlockingGeometry, TestRotation) == 0x000020, "Member 'ProjectVersionBlueprint_IsEncroachingBlockingGeometry::TestRotation' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_IsEncroachingBlockingGeometry, ReturnValue) == 0x000038, "Member 'ProjectVersionBlueprint_IsEncroachingBlockingGeometry::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.ProjectVersionBlueprint.IsEncroachingBlockingGeometryWithAdjustment
// 0x0058 (0x0058 - 0x0000)
struct ProjectVersionBlueprint_IsEncroachingBlockingGeometryWithAdjustment final
{
public:
	const class AActor*                           TestActor;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TestLocation;                                      // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               TestRotation;                                      // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Adjust;                                            // 0x0038(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProjectVersionBlueprint_IsEncroachingBlockingGeometryWithAdjustment) == 0x000008, "Wrong alignment on ProjectVersionBlueprint_IsEncroachingBlockingGeometryWithAdjustment");
static_assert(sizeof(ProjectVersionBlueprint_IsEncroachingBlockingGeometryWithAdjustment) == 0x000058, "Wrong size on ProjectVersionBlueprint_IsEncroachingBlockingGeometryWithAdjustment");
static_assert(offsetof(ProjectVersionBlueprint_IsEncroachingBlockingGeometryWithAdjustment, TestActor) == 0x000000, "Member 'ProjectVersionBlueprint_IsEncroachingBlockingGeometryWithAdjustment::TestActor' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_IsEncroachingBlockingGeometryWithAdjustment, TestLocation) == 0x000008, "Member 'ProjectVersionBlueprint_IsEncroachingBlockingGeometryWithAdjustment::TestLocation' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_IsEncroachingBlockingGeometryWithAdjustment, TestRotation) == 0x000020, "Member 'ProjectVersionBlueprint_IsEncroachingBlockingGeometryWithAdjustment::TestRotation' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_IsEncroachingBlockingGeometryWithAdjustment, Adjust) == 0x000038, "Member 'ProjectVersionBlueprint_IsEncroachingBlockingGeometryWithAdjustment::Adjust' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_IsEncroachingBlockingGeometryWithAdjustment, ReturnValue) == 0x000050, "Member 'ProjectVersionBlueprint_IsEncroachingBlockingGeometryWithAdjustment::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.ProjectVersionBlueprint.IsLevelInitializedForActor
// 0x0018 (0x0018 - 0x0000)
struct ProjectVersionBlueprint_IsLevelInitializedForActor final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           PlayerState;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProjectVersionBlueprint_IsLevelInitializedForActor) == 0x000008, "Wrong alignment on ProjectVersionBlueprint_IsLevelInitializedForActor");
static_assert(sizeof(ProjectVersionBlueprint_IsLevelInitializedForActor) == 0x000018, "Wrong size on ProjectVersionBlueprint_IsLevelInitializedForActor");
static_assert(offsetof(ProjectVersionBlueprint_IsLevelInitializedForActor, InActor) == 0x000000, "Member 'ProjectVersionBlueprint_IsLevelInitializedForActor::InActor' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_IsLevelInitializedForActor, PlayerState) == 0x000008, "Member 'ProjectVersionBlueprint_IsLevelInitializedForActor::PlayerState' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_IsLevelInitializedForActor, ReturnValue) == 0x000010, "Member 'ProjectVersionBlueprint_IsLevelInitializedForActor::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.ProjectVersionBlueprint.IsLinuxBuild
// 0x0001 (0x0001 - 0x0000)
struct ProjectVersionBlueprint_IsLinuxBuild final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectVersionBlueprint_IsLinuxBuild) == 0x000001, "Wrong alignment on ProjectVersionBlueprint_IsLinuxBuild");
static_assert(sizeof(ProjectVersionBlueprint_IsLinuxBuild) == 0x000001, "Wrong size on ProjectVersionBlueprint_IsLinuxBuild");
static_assert(offsetof(ProjectVersionBlueprint_IsLinuxBuild, ReturnValue) == 0x000000, "Member 'ProjectVersionBlueprint_IsLinuxBuild::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.ProjectVersionBlueprint.IsPendingKill
// 0x0010 (0x0010 - 0x0000)
struct ProjectVersionBlueprint_IsPendingKill final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProjectVersionBlueprint_IsPendingKill) == 0x000008, "Wrong alignment on ProjectVersionBlueprint_IsPendingKill");
static_assert(sizeof(ProjectVersionBlueprint_IsPendingKill) == 0x000010, "Wrong size on ProjectVersionBlueprint_IsPendingKill");
static_assert(offsetof(ProjectVersionBlueprint_IsPendingKill, Object) == 0x000000, "Member 'ProjectVersionBlueprint_IsPendingKill::Object' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_IsPendingKill, ReturnValue) == 0x000008, "Member 'ProjectVersionBlueprint_IsPendingKill::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.ProjectVersionBlueprint.IsPS4Build
// 0x0001 (0x0001 - 0x0000)
struct ProjectVersionBlueprint_IsPS4Build final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectVersionBlueprint_IsPS4Build) == 0x000001, "Wrong alignment on ProjectVersionBlueprint_IsPS4Build");
static_assert(sizeof(ProjectVersionBlueprint_IsPS4Build) == 0x000001, "Wrong size on ProjectVersionBlueprint_IsPS4Build");
static_assert(offsetof(ProjectVersionBlueprint_IsPS4Build, ReturnValue) == 0x000000, "Member 'ProjectVersionBlueprint_IsPS4Build::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.ProjectVersionBlueprint.IsSessionDedicatedServer
// 0x0128 (0x0128 - 0x0000)
struct ProjectVersionBlueprint_IsSessionDedicatedServer final
{
public:
	struct FBlueprintSessionResult                Result;                                            // 0x0000(0x0120)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0120(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProjectVersionBlueprint_IsSessionDedicatedServer) == 0x000008, "Wrong alignment on ProjectVersionBlueprint_IsSessionDedicatedServer");
static_assert(sizeof(ProjectVersionBlueprint_IsSessionDedicatedServer) == 0x000128, "Wrong size on ProjectVersionBlueprint_IsSessionDedicatedServer");
static_assert(offsetof(ProjectVersionBlueprint_IsSessionDedicatedServer, Result) == 0x000000, "Member 'ProjectVersionBlueprint_IsSessionDedicatedServer::Result' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_IsSessionDedicatedServer, ReturnValue) == 0x000120, "Member 'ProjectVersionBlueprint_IsSessionDedicatedServer::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.ProjectVersionBlueprint.IsSwitchBuild
// 0x0001 (0x0001 - 0x0000)
struct ProjectVersionBlueprint_IsSwitchBuild final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectVersionBlueprint_IsSwitchBuild) == 0x000001, "Wrong alignment on ProjectVersionBlueprint_IsSwitchBuild");
static_assert(sizeof(ProjectVersionBlueprint_IsSwitchBuild) == 0x000001, "Wrong size on ProjectVersionBlueprint_IsSwitchBuild");
static_assert(offsetof(ProjectVersionBlueprint_IsSwitchBuild, ReturnValue) == 0x000000, "Member 'ProjectVersionBlueprint_IsSwitchBuild::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.ProjectVersionBlueprint.IsWindowsBuild
// 0x0001 (0x0001 - 0x0000)
struct ProjectVersionBlueprint_IsWindowsBuild final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectVersionBlueprint_IsWindowsBuild) == 0x000001, "Wrong alignment on ProjectVersionBlueprint_IsWindowsBuild");
static_assert(sizeof(ProjectVersionBlueprint_IsWindowsBuild) == 0x000001, "Wrong size on ProjectVersionBlueprint_IsWindowsBuild");
static_assert(offsetof(ProjectVersionBlueprint_IsWindowsBuild, ReturnValue) == 0x000000, "Member 'ProjectVersionBlueprint_IsWindowsBuild::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.ProjectVersionBlueprint.IsXboxBuild
// 0x0001 (0x0001 - 0x0000)
struct ProjectVersionBlueprint_IsXboxBuild final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectVersionBlueprint_IsXboxBuild) == 0x000001, "Wrong alignment on ProjectVersionBlueprint_IsXboxBuild");
static_assert(sizeof(ProjectVersionBlueprint_IsXboxBuild) == 0x000001, "Wrong size on ProjectVersionBlueprint_IsXboxBuild");
static_assert(offsetof(ProjectVersionBlueprint_IsXboxBuild, ReturnValue) == 0x000000, "Member 'ProjectVersionBlueprint_IsXboxBuild::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.ProjectVersionBlueprint.KickPlayer
// 0x0020 (0x0020 - 0x0000)
struct ProjectVersionBlueprint_KickPlayer final
{
public:
	class AGameModeBase*                          GameMode;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      KickedPlayer;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   KickReason;                                        // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectVersionBlueprint_KickPlayer) == 0x000008, "Wrong alignment on ProjectVersionBlueprint_KickPlayer");
static_assert(sizeof(ProjectVersionBlueprint_KickPlayer) == 0x000020, "Wrong size on ProjectVersionBlueprint_KickPlayer");
static_assert(offsetof(ProjectVersionBlueprint_KickPlayer, GameMode) == 0x000000, "Member 'ProjectVersionBlueprint_KickPlayer::GameMode' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_KickPlayer, KickedPlayer) == 0x000008, "Member 'ProjectVersionBlueprint_KickPlayer::KickedPlayer' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_KickPlayer, KickReason) == 0x000010, "Member 'ProjectVersionBlueprint_KickPlayer::KickReason' has a wrong offset!");

// Function PropWitchHuntModule.ProjectVersionBlueprint.LoadGameFromFile
// 0x0020 (0x0020 - 0x0000)
struct ProjectVersionBlueprint_LoadGameFromFile final
{
public:
	class FString                                 AbsoluteFileName;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserIndex;                                         // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USaveGame*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectVersionBlueprint_LoadGameFromFile) == 0x000008, "Wrong alignment on ProjectVersionBlueprint_LoadGameFromFile");
static_assert(sizeof(ProjectVersionBlueprint_LoadGameFromFile) == 0x000020, "Wrong size on ProjectVersionBlueprint_LoadGameFromFile");
static_assert(offsetof(ProjectVersionBlueprint_LoadGameFromFile, AbsoluteFileName) == 0x000000, "Member 'ProjectVersionBlueprint_LoadGameFromFile::AbsoluteFileName' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_LoadGameFromFile, UserIndex) == 0x000010, "Member 'ProjectVersionBlueprint_LoadGameFromFile::UserIndex' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_LoadGameFromFile, ReturnValue) == 0x000018, "Member 'ProjectVersionBlueprint_LoadGameFromFile::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.ProjectVersionBlueprint.LoadItemDefinitions
// 0x0010 (0x0010 - 0x0000)
struct ProjectVersionBlueprint_LoadItemDefinitions final
{
public:
	class UGameInstance*                          GameInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProjectVersionBlueprint_LoadItemDefinitions) == 0x000008, "Wrong alignment on ProjectVersionBlueprint_LoadItemDefinitions");
static_assert(sizeof(ProjectVersionBlueprint_LoadItemDefinitions) == 0x000010, "Wrong size on ProjectVersionBlueprint_LoadItemDefinitions");
static_assert(offsetof(ProjectVersionBlueprint_LoadItemDefinitions, GameInstance) == 0x000000, "Member 'ProjectVersionBlueprint_LoadItemDefinitions::GameInstance' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_LoadItemDefinitions, ReturnValue) == 0x000008, "Member 'ProjectVersionBlueprint_LoadItemDefinitions::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.ProjectVersionBlueprint.LoadPropLayoutFromFile
// 0x0078 (0x0078 - 0x0000)
struct ProjectVersionBlueprint_LoadPropLayoutFromFile final
{
public:
	class FString                                 AbsoluteFileName;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPropToSave>                    PropsToLoad;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 WorkshopID;                                        // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPlaceableStaticToSave>         PlaceableStaticsToLoad;                            // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPlaceableLightToSave>          PlaceableLightsToLoad;                             // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSwitchToSave>                  SwitchesToLoad;                                    // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPrefabToSave>                  PrefabsToLoad;                                     // 0x0060(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProjectVersionBlueprint_LoadPropLayoutFromFile) == 0x000008, "Wrong alignment on ProjectVersionBlueprint_LoadPropLayoutFromFile");
static_assert(sizeof(ProjectVersionBlueprint_LoadPropLayoutFromFile) == 0x000078, "Wrong size on ProjectVersionBlueprint_LoadPropLayoutFromFile");
static_assert(offsetof(ProjectVersionBlueprint_LoadPropLayoutFromFile, AbsoluteFileName) == 0x000000, "Member 'ProjectVersionBlueprint_LoadPropLayoutFromFile::AbsoluteFileName' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_LoadPropLayoutFromFile, PropsToLoad) == 0x000010, "Member 'ProjectVersionBlueprint_LoadPropLayoutFromFile::PropsToLoad' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_LoadPropLayoutFromFile, WorkshopID) == 0x000020, "Member 'ProjectVersionBlueprint_LoadPropLayoutFromFile::WorkshopID' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_LoadPropLayoutFromFile, PlaceableStaticsToLoad) == 0x000030, "Member 'ProjectVersionBlueprint_LoadPropLayoutFromFile::PlaceableStaticsToLoad' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_LoadPropLayoutFromFile, PlaceableLightsToLoad) == 0x000040, "Member 'ProjectVersionBlueprint_LoadPropLayoutFromFile::PlaceableLightsToLoad' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_LoadPropLayoutFromFile, SwitchesToLoad) == 0x000050, "Member 'ProjectVersionBlueprint_LoadPropLayoutFromFile::SwitchesToLoad' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_LoadPropLayoutFromFile, PrefabsToLoad) == 0x000060, "Member 'ProjectVersionBlueprint_LoadPropLayoutFromFile::PrefabsToLoad' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_LoadPropLayoutFromFile, ReturnValue) == 0x000070, "Member 'ProjectVersionBlueprint_LoadPropLayoutFromFile::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.ProjectVersionBlueprint.LoadPropLayoutFromFileCompressed
// 0x0078 (0x0078 - 0x0000)
struct ProjectVersionBlueprint_LoadPropLayoutFromFileCompressed final
{
public:
	class FString                                 AbsoluteFileName;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPropToSave>                    PropsToLoad;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 WorkshopID;                                        // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPlaceableStaticToSave>         PlaceableStaticsToLoad;                            // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPlaceableLightToSave>          PlaceableLightsToLoad;                             // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSwitchToSave>                  SwitchesToLoad;                                    // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPrefabToSave>                  PrefabsToLoad;                                     // 0x0060(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProjectVersionBlueprint_LoadPropLayoutFromFileCompressed) == 0x000008, "Wrong alignment on ProjectVersionBlueprint_LoadPropLayoutFromFileCompressed");
static_assert(sizeof(ProjectVersionBlueprint_LoadPropLayoutFromFileCompressed) == 0x000078, "Wrong size on ProjectVersionBlueprint_LoadPropLayoutFromFileCompressed");
static_assert(offsetof(ProjectVersionBlueprint_LoadPropLayoutFromFileCompressed, AbsoluteFileName) == 0x000000, "Member 'ProjectVersionBlueprint_LoadPropLayoutFromFileCompressed::AbsoluteFileName' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_LoadPropLayoutFromFileCompressed, PropsToLoad) == 0x000010, "Member 'ProjectVersionBlueprint_LoadPropLayoutFromFileCompressed::PropsToLoad' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_LoadPropLayoutFromFileCompressed, WorkshopID) == 0x000020, "Member 'ProjectVersionBlueprint_LoadPropLayoutFromFileCompressed::WorkshopID' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_LoadPropLayoutFromFileCompressed, PlaceableStaticsToLoad) == 0x000030, "Member 'ProjectVersionBlueprint_LoadPropLayoutFromFileCompressed::PlaceableStaticsToLoad' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_LoadPropLayoutFromFileCompressed, PlaceableLightsToLoad) == 0x000040, "Member 'ProjectVersionBlueprint_LoadPropLayoutFromFileCompressed::PlaceableLightsToLoad' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_LoadPropLayoutFromFileCompressed, SwitchesToLoad) == 0x000050, "Member 'ProjectVersionBlueprint_LoadPropLayoutFromFileCompressed::SwitchesToLoad' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_LoadPropLayoutFromFileCompressed, PrefabsToLoad) == 0x000060, "Member 'ProjectVersionBlueprint_LoadPropLayoutFromFileCompressed::PrefabsToLoad' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_LoadPropLayoutFromFileCompressed, ReturnValue) == 0x000070, "Member 'ProjectVersionBlueprint_LoadPropLayoutFromFileCompressed::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.ProjectVersionBlueprint.OpenStorePage
// 0x0018 (0x0018 - 0x0000)
struct ProjectVersionBlueprint_OpenStorePage final
{
public:
	class UGameInstance*                          GameInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool PurchaseMade)>            Delegate;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectVersionBlueprint_OpenStorePage) == 0x000008, "Wrong alignment on ProjectVersionBlueprint_OpenStorePage");
static_assert(sizeof(ProjectVersionBlueprint_OpenStorePage) == 0x000018, "Wrong size on ProjectVersionBlueprint_OpenStorePage");
static_assert(offsetof(ProjectVersionBlueprint_OpenStorePage, GameInstance) == 0x000000, "Member 'ProjectVersionBlueprint_OpenStorePage::GameInstance' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_OpenStorePage, Delegate) == 0x000008, "Member 'ProjectVersionBlueprint_OpenStorePage::Delegate' has a wrong offset!");

// Function PropWitchHuntModule.ProjectVersionBlueprint.PlayReplay
// 0x0018 (0x0018 - 0x0000)
struct ProjectVersionBlueprint_PlayReplay final
{
public:
	class UGameInstance*                          GameInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectVersionBlueprint_PlayReplay) == 0x000008, "Wrong alignment on ProjectVersionBlueprint_PlayReplay");
static_assert(sizeof(ProjectVersionBlueprint_PlayReplay) == 0x000018, "Wrong size on ProjectVersionBlueprint_PlayReplay");
static_assert(offsetof(ProjectVersionBlueprint_PlayReplay, GameInstance) == 0x000000, "Member 'ProjectVersionBlueprint_PlayReplay::GameInstance' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_PlayReplay, Name_0) == 0x000008, "Member 'ProjectVersionBlueprint_PlayReplay::Name_0' has a wrong offset!");

// Function PropWitchHuntModule.ProjectVersionBlueprint.ReadStringFromFile
// 0x0028 (0x0028 - 0x0000)
struct ProjectVersionBlueprint_ReadStringFromFile final
{
public:
	class FString                                 Result;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FullFilePath;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProjectVersionBlueprint_ReadStringFromFile) == 0x000008, "Wrong alignment on ProjectVersionBlueprint_ReadStringFromFile");
static_assert(sizeof(ProjectVersionBlueprint_ReadStringFromFile) == 0x000028, "Wrong size on ProjectVersionBlueprint_ReadStringFromFile");
static_assert(offsetof(ProjectVersionBlueprint_ReadStringFromFile, Result) == 0x000000, "Member 'ProjectVersionBlueprint_ReadStringFromFile::Result' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_ReadStringFromFile, FullFilePath) == 0x000010, "Member 'ProjectVersionBlueprint_ReadStringFromFile::FullFilePath' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_ReadStringFromFile, ReturnValue) == 0x000020, "Member 'ProjectVersionBlueprint_ReadStringFromFile::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.ProjectVersionBlueprint.RecordReplay
// 0x0028 (0x0028 - 0x0000)
struct ProjectVersionBlueprint_RecordReplay final
{
public:
	class UGameInstance*                          GameInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FriendlyName;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectVersionBlueprint_RecordReplay) == 0x000008, "Wrong alignment on ProjectVersionBlueprint_RecordReplay");
static_assert(sizeof(ProjectVersionBlueprint_RecordReplay) == 0x000028, "Wrong size on ProjectVersionBlueprint_RecordReplay");
static_assert(offsetof(ProjectVersionBlueprint_RecordReplay, GameInstance) == 0x000000, "Member 'ProjectVersionBlueprint_RecordReplay::GameInstance' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_RecordReplay, Name_0) == 0x000008, "Member 'ProjectVersionBlueprint_RecordReplay::Name_0' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_RecordReplay, FriendlyName) == 0x000018, "Member 'ProjectVersionBlueprint_RecordReplay::FriendlyName' has a wrong offset!");

// Function PropWitchHuntModule.ProjectVersionBlueprint.SaveGameToFile
// 0x0020 (0x0020 - 0x0000)
struct ProjectVersionBlueprint_SaveGameToFile final
{
public:
	class USaveGame*                              SaveGameObject;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AbsoluteFileName;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserIndex;                                         // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProjectVersionBlueprint_SaveGameToFile) == 0x000008, "Wrong alignment on ProjectVersionBlueprint_SaveGameToFile");
static_assert(sizeof(ProjectVersionBlueprint_SaveGameToFile) == 0x000020, "Wrong size on ProjectVersionBlueprint_SaveGameToFile");
static_assert(offsetof(ProjectVersionBlueprint_SaveGameToFile, SaveGameObject) == 0x000000, "Member 'ProjectVersionBlueprint_SaveGameToFile::SaveGameObject' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_SaveGameToFile, AbsoluteFileName) == 0x000008, "Member 'ProjectVersionBlueprint_SaveGameToFile::AbsoluteFileName' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_SaveGameToFile, UserIndex) == 0x000018, "Member 'ProjectVersionBlueprint_SaveGameToFile::UserIndex' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_SaveGameToFile, ReturnValue) == 0x00001C, "Member 'ProjectVersionBlueprint_SaveGameToFile::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.ProjectVersionBlueprint.SavePropLayoutToFile
// 0x0078 (0x0078 - 0x0000)
struct ProjectVersionBlueprint_SavePropLayoutToFile final
{
public:
	class FString                                 AbsoluteFileName;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPropToSave>                    PropsToSave;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 WorkshopID;                                        // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPlaceableStaticToSave>         PlaceableStaticsToSave;                            // 0x0030(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPlaceableLightToSave>          PlaceableLightsToSave;                             // 0x0040(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSwitchToSave>                  SwitchesToSave;                                    // 0x0050(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPrefabToSave>                  PrefabsToSave;                                     // 0x0060(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProjectVersionBlueprint_SavePropLayoutToFile) == 0x000008, "Wrong alignment on ProjectVersionBlueprint_SavePropLayoutToFile");
static_assert(sizeof(ProjectVersionBlueprint_SavePropLayoutToFile) == 0x000078, "Wrong size on ProjectVersionBlueprint_SavePropLayoutToFile");
static_assert(offsetof(ProjectVersionBlueprint_SavePropLayoutToFile, AbsoluteFileName) == 0x000000, "Member 'ProjectVersionBlueprint_SavePropLayoutToFile::AbsoluteFileName' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_SavePropLayoutToFile, PropsToSave) == 0x000010, "Member 'ProjectVersionBlueprint_SavePropLayoutToFile::PropsToSave' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_SavePropLayoutToFile, WorkshopID) == 0x000020, "Member 'ProjectVersionBlueprint_SavePropLayoutToFile::WorkshopID' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_SavePropLayoutToFile, PlaceableStaticsToSave) == 0x000030, "Member 'ProjectVersionBlueprint_SavePropLayoutToFile::PlaceableStaticsToSave' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_SavePropLayoutToFile, PlaceableLightsToSave) == 0x000040, "Member 'ProjectVersionBlueprint_SavePropLayoutToFile::PlaceableLightsToSave' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_SavePropLayoutToFile, SwitchesToSave) == 0x000050, "Member 'ProjectVersionBlueprint_SavePropLayoutToFile::SwitchesToSave' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_SavePropLayoutToFile, PrefabsToSave) == 0x000060, "Member 'ProjectVersionBlueprint_SavePropLayoutToFile::PrefabsToSave' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_SavePropLayoutToFile, ReturnValue) == 0x000070, "Member 'ProjectVersionBlueprint_SavePropLayoutToFile::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.ProjectVersionBlueprint.SavePropLayoutToFileCompressed
// 0x0078 (0x0078 - 0x0000)
struct ProjectVersionBlueprint_SavePropLayoutToFileCompressed final
{
public:
	class FString                                 AbsoluteFileName;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPropToSave>                    PropsToSave;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 WorkshopID;                                        // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPlaceableStaticToSave>         PlaceableStaticsToSave;                            // 0x0030(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPlaceableLightToSave>          PlaceableLightsToSave;                             // 0x0040(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSwitchToSave>                  SwitchesToSave;                                    // 0x0050(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPrefabToSave>                  PrefabsToSave;                                     // 0x0060(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProjectVersionBlueprint_SavePropLayoutToFileCompressed) == 0x000008, "Wrong alignment on ProjectVersionBlueprint_SavePropLayoutToFileCompressed");
static_assert(sizeof(ProjectVersionBlueprint_SavePropLayoutToFileCompressed) == 0x000078, "Wrong size on ProjectVersionBlueprint_SavePropLayoutToFileCompressed");
static_assert(offsetof(ProjectVersionBlueprint_SavePropLayoutToFileCompressed, AbsoluteFileName) == 0x000000, "Member 'ProjectVersionBlueprint_SavePropLayoutToFileCompressed::AbsoluteFileName' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_SavePropLayoutToFileCompressed, PropsToSave) == 0x000010, "Member 'ProjectVersionBlueprint_SavePropLayoutToFileCompressed::PropsToSave' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_SavePropLayoutToFileCompressed, WorkshopID) == 0x000020, "Member 'ProjectVersionBlueprint_SavePropLayoutToFileCompressed::WorkshopID' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_SavePropLayoutToFileCompressed, PlaceableStaticsToSave) == 0x000030, "Member 'ProjectVersionBlueprint_SavePropLayoutToFileCompressed::PlaceableStaticsToSave' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_SavePropLayoutToFileCompressed, PlaceableLightsToSave) == 0x000040, "Member 'ProjectVersionBlueprint_SavePropLayoutToFileCompressed::PlaceableLightsToSave' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_SavePropLayoutToFileCompressed, SwitchesToSave) == 0x000050, "Member 'ProjectVersionBlueprint_SavePropLayoutToFileCompressed::SwitchesToSave' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_SavePropLayoutToFileCompressed, PrefabsToSave) == 0x000060, "Member 'ProjectVersionBlueprint_SavePropLayoutToFileCompressed::PrefabsToSave' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_SavePropLayoutToFileCompressed, ReturnValue) == 0x000070, "Member 'ProjectVersionBlueprint_SavePropLayoutToFileCompressed::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.ProjectVersionBlueprint.SetCCDEnabled
// 0x0010 (0x0010 - 0x0000)
struct ProjectVersionBlueprint_SetCCDEnabled final
{
public:
	class UPrimitiveComponent*                    PrimitiveComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProjectVersionBlueprint_SetCCDEnabled) == 0x000008, "Wrong alignment on ProjectVersionBlueprint_SetCCDEnabled");
static_assert(sizeof(ProjectVersionBlueprint_SetCCDEnabled) == 0x000010, "Wrong size on ProjectVersionBlueprint_SetCCDEnabled");
static_assert(offsetof(ProjectVersionBlueprint_SetCCDEnabled, PrimitiveComponent) == 0x000000, "Member 'ProjectVersionBlueprint_SetCCDEnabled::PrimitiveComponent' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_SetCCDEnabled, Enabled) == 0x000008, "Member 'ProjectVersionBlueprint_SetCCDEnabled::Enabled' has a wrong offset!");

// Function PropWitchHuntModule.ProjectVersionBlueprint.SetHiddenShadow
// 0x0010 (0x0010 - 0x0000)
struct ProjectVersionBlueprint_SetHiddenShadow final
{
public:
	class UPrimitiveComponent*                    PrimitiveComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProjectVersionBlueprint_SetHiddenShadow) == 0x000008, "Wrong alignment on ProjectVersionBlueprint_SetHiddenShadow");
static_assert(sizeof(ProjectVersionBlueprint_SetHiddenShadow) == 0x000010, "Wrong size on ProjectVersionBlueprint_SetHiddenShadow");
static_assert(offsetof(ProjectVersionBlueprint_SetHiddenShadow, PrimitiveComponent) == 0x000000, "Member 'ProjectVersionBlueprint_SetHiddenShadow::PrimitiveComponent' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_SetHiddenShadow, Enabled) == 0x000008, "Member 'ProjectVersionBlueprint_SetHiddenShadow::Enabled' has a wrong offset!");

// Function PropWitchHuntModule.ProjectVersionBlueprint.SetSelfShadowOnly
// 0x0010 (0x0010 - 0x0000)
struct ProjectVersionBlueprint_SetSelfShadowOnly final
{
public:
	class UPrimitiveComponent*                    PrimitiveComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProjectVersionBlueprint_SetSelfShadowOnly) == 0x000008, "Wrong alignment on ProjectVersionBlueprint_SetSelfShadowOnly");
static_assert(sizeof(ProjectVersionBlueprint_SetSelfShadowOnly) == 0x000010, "Wrong size on ProjectVersionBlueprint_SetSelfShadowOnly");
static_assert(offsetof(ProjectVersionBlueprint_SetSelfShadowOnly, PrimitiveComponent) == 0x000000, "Member 'ProjectVersionBlueprint_SetSelfShadowOnly::PrimitiveComponent' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_SetSelfShadowOnly, Enabled) == 0x000008, "Member 'ProjectVersionBlueprint_SetSelfShadowOnly::Enabled' has a wrong offset!");

// Function PropWitchHuntModule.ProjectVersionBlueprint.SetWorldGravity
// 0x0010 (0x0010 - 0x0000)
struct ProjectVersionBlueprint_SetWorldGravity final
{
public:
	class UGameInstance*                          GameInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Gravity;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProjectVersionBlueprint_SetWorldGravity) == 0x000008, "Wrong alignment on ProjectVersionBlueprint_SetWorldGravity");
static_assert(sizeof(ProjectVersionBlueprint_SetWorldGravity) == 0x000010, "Wrong size on ProjectVersionBlueprint_SetWorldGravity");
static_assert(offsetof(ProjectVersionBlueprint_SetWorldGravity, GameInstance) == 0x000000, "Member 'ProjectVersionBlueprint_SetWorldGravity::GameInstance' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_SetWorldGravity, Gravity) == 0x000008, "Member 'ProjectVersionBlueprint_SetWorldGravity::Gravity' has a wrong offset!");

// Function PropWitchHuntModule.ProjectVersionBlueprint.SpawnActorByWorldContextObject
// 0x0080 (0x0080 - 0x0000)
struct ProjectVersionBlueprint_SpawnActorByWorldContextObject final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 Class_0;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpawnActorCollisionHandlingMethod            CollisionHandling;                                 // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectVersionBlueprint_SpawnActorByWorldContextObject) == 0x000010, "Wrong alignment on ProjectVersionBlueprint_SpawnActorByWorldContextObject");
static_assert(sizeof(ProjectVersionBlueprint_SpawnActorByWorldContextObject) == 0x000080, "Wrong size on ProjectVersionBlueprint_SpawnActorByWorldContextObject");
static_assert(offsetof(ProjectVersionBlueprint_SpawnActorByWorldContextObject, WorldContextObject) == 0x000000, "Member 'ProjectVersionBlueprint_SpawnActorByWorldContextObject::WorldContextObject' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_SpawnActorByWorldContextObject, Class_0) == 0x000008, "Member 'ProjectVersionBlueprint_SpawnActorByWorldContextObject::Class_0' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_SpawnActorByWorldContextObject, Transform) == 0x000010, "Member 'ProjectVersionBlueprint_SpawnActorByWorldContextObject::Transform' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_SpawnActorByWorldContextObject, CollisionHandling) == 0x000070, "Member 'ProjectVersionBlueprint_SpawnActorByWorldContextObject::CollisionHandling' has a wrong offset!");
static_assert(offsetof(ProjectVersionBlueprint_SpawnActorByWorldContextObject, ReturnValue) == 0x000078, "Member 'ProjectVersionBlueprint_SpawnActorByWorldContextObject::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.RealTimeClock.GetCurrentDateAndTime
// 0x0008 (0x0008 - 0x0000)
struct RealTimeClock_GetCurrentDateAndTime final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeClock_GetCurrentDateAndTime) == 0x000008, "Wrong alignment on RealTimeClock_GetCurrentDateAndTime");
static_assert(sizeof(RealTimeClock_GetCurrentDateAndTime) == 0x000008, "Wrong size on RealTimeClock_GetCurrentDateAndTime");
static_assert(offsetof(RealTimeClock_GetCurrentDateAndTime, ReturnValue) == 0x000000, "Member 'RealTimeClock_GetCurrentDateAndTime::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.RealTimeClock.GetCurrentTime
// 0x0008 (0x0008 - 0x0000)
struct RealTimeClock_GetCurrentTime final
{
public:
	struct FTimespan                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeClock_GetCurrentTime) == 0x000008, "Wrong alignment on RealTimeClock_GetCurrentTime");
static_assert(sizeof(RealTimeClock_GetCurrentTime) == 0x000008, "Wrong size on RealTimeClock_GetCurrentTime");
static_assert(offsetof(RealTimeClock_GetCurrentTime, ReturnValue) == 0x000000, "Member 'RealTimeClock_GetCurrentTime::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.RealTimeClock.GetCurrentTimeInHours
// 0x0004 (0x0004 - 0x0000)
struct RealTimeClock_GetCurrentTimeInHours final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeClock_GetCurrentTimeInHours) == 0x000004, "Wrong alignment on RealTimeClock_GetCurrentTimeInHours");
static_assert(sizeof(RealTimeClock_GetCurrentTimeInHours) == 0x000004, "Wrong size on RealTimeClock_GetCurrentTimeInHours");
static_assert(offsetof(RealTimeClock_GetCurrentTimeInHours, ReturnValue) == 0x000000, "Member 'RealTimeClock_GetCurrentTimeInHours::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.RealTimeClock.GetCurrentTimeInMilliseconds
// 0x0004 (0x0004 - 0x0000)
struct RealTimeClock_GetCurrentTimeInMilliseconds final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeClock_GetCurrentTimeInMilliseconds) == 0x000004, "Wrong alignment on RealTimeClock_GetCurrentTimeInMilliseconds");
static_assert(sizeof(RealTimeClock_GetCurrentTimeInMilliseconds) == 0x000004, "Wrong size on RealTimeClock_GetCurrentTimeInMilliseconds");
static_assert(offsetof(RealTimeClock_GetCurrentTimeInMilliseconds, ReturnValue) == 0x000000, "Member 'RealTimeClock_GetCurrentTimeInMilliseconds::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.RealTimeClock.GetCurrentTimeInMinutes
// 0x0004 (0x0004 - 0x0000)
struct RealTimeClock_GetCurrentTimeInMinutes final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeClock_GetCurrentTimeInMinutes) == 0x000004, "Wrong alignment on RealTimeClock_GetCurrentTimeInMinutes");
static_assert(sizeof(RealTimeClock_GetCurrentTimeInMinutes) == 0x000004, "Wrong size on RealTimeClock_GetCurrentTimeInMinutes");
static_assert(offsetof(RealTimeClock_GetCurrentTimeInMinutes, ReturnValue) == 0x000000, "Member 'RealTimeClock_GetCurrentTimeInMinutes::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.RealTimeClock.GetCurrentTimeInSeconds
// 0x0004 (0x0004 - 0x0000)
struct RealTimeClock_GetCurrentTimeInSeconds final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeClock_GetCurrentTimeInSeconds) == 0x000004, "Wrong alignment on RealTimeClock_GetCurrentTimeInSeconds");
static_assert(sizeof(RealTimeClock_GetCurrentTimeInSeconds) == 0x000004, "Wrong size on RealTimeClock_GetCurrentTimeInSeconds");
static_assert(offsetof(RealTimeClock_GetCurrentTimeInSeconds, ReturnValue) == 0x000000, "Member 'RealTimeClock_GetCurrentTimeInSeconds::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.RealTimeClock.GetCurrentTimeInTicks
// 0x0004 (0x0004 - 0x0000)
struct RealTimeClock_GetCurrentTimeInTicks final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeClock_GetCurrentTimeInTicks) == 0x000004, "Wrong alignment on RealTimeClock_GetCurrentTimeInTicks");
static_assert(sizeof(RealTimeClock_GetCurrentTimeInTicks) == 0x000004, "Wrong size on RealTimeClock_GetCurrentTimeInTicks");
static_assert(offsetof(RealTimeClock_GetCurrentTimeInTicks, ReturnValue) == 0x000000, "Member 'RealTimeClock_GetCurrentTimeInTicks::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.RealTimeClock.GetCurrentUtcDateAndTime
// 0x0010 (0x0010 - 0x0000)
struct RealTimeClock_GetCurrentUtcDateAndTime final
{
public:
	int32                                         MyTimezone;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeClock_GetCurrentUtcDateAndTime) == 0x000008, "Wrong alignment on RealTimeClock_GetCurrentUtcDateAndTime");
static_assert(sizeof(RealTimeClock_GetCurrentUtcDateAndTime) == 0x000010, "Wrong size on RealTimeClock_GetCurrentUtcDateAndTime");
static_assert(offsetof(RealTimeClock_GetCurrentUtcDateAndTime, MyTimezone) == 0x000000, "Member 'RealTimeClock_GetCurrentUtcDateAndTime::MyTimezone' has a wrong offset!");
static_assert(offsetof(RealTimeClock_GetCurrentUtcDateAndTime, ReturnValue) == 0x000008, "Member 'RealTimeClock_GetCurrentUtcDateAndTime::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.RealTimeClock.GetCurrentUtcTime
// 0x0010 (0x0010 - 0x0000)
struct RealTimeClock_GetCurrentUtcTime final
{
public:
	int32                                         MyTimezone;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeClock_GetCurrentUtcTime) == 0x000008, "Wrong alignment on RealTimeClock_GetCurrentUtcTime");
static_assert(sizeof(RealTimeClock_GetCurrentUtcTime) == 0x000010, "Wrong size on RealTimeClock_GetCurrentUtcTime");
static_assert(offsetof(RealTimeClock_GetCurrentUtcTime, MyTimezone) == 0x000000, "Member 'RealTimeClock_GetCurrentUtcTime::MyTimezone' has a wrong offset!");
static_assert(offsetof(RealTimeClock_GetCurrentUtcTime, ReturnValue) == 0x000008, "Member 'RealTimeClock_GetCurrentUtcTime::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.RealTimeClock.GetCurrentUtcTimeInSeconds
// 0x0008 (0x0008 - 0x0000)
struct RealTimeClock_GetCurrentUtcTimeInSeconds final
{
public:
	int32                                         MyTimezone;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeClock_GetCurrentUtcTimeInSeconds) == 0x000004, "Wrong alignment on RealTimeClock_GetCurrentUtcTimeInSeconds");
static_assert(sizeof(RealTimeClock_GetCurrentUtcTimeInSeconds) == 0x000008, "Wrong size on RealTimeClock_GetCurrentUtcTimeInSeconds");
static_assert(offsetof(RealTimeClock_GetCurrentUtcTimeInSeconds, MyTimezone) == 0x000000, "Member 'RealTimeClock_GetCurrentUtcTimeInSeconds::MyTimezone' has a wrong offset!");
static_assert(offsetof(RealTimeClock_GetCurrentUtcTimeInSeconds, ReturnValue) == 0x000004, "Member 'RealTimeClock_GetCurrentUtcTimeInSeconds::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.ReplayWorldSubsystem.PlayReplay
// 0x0010 (0x0010 - 0x0000)
struct ReplayWorldSubsystem_PlayReplay final
{
public:
	class FString                                 ReplayName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReplayWorldSubsystem_PlayReplay) == 0x000008, "Wrong alignment on ReplayWorldSubsystem_PlayReplay");
static_assert(sizeof(ReplayWorldSubsystem_PlayReplay) == 0x000010, "Wrong size on ReplayWorldSubsystem_PlayReplay");
static_assert(offsetof(ReplayWorldSubsystem_PlayReplay, ReplayName) == 0x000000, "Member 'ReplayWorldSubsystem_PlayReplay::ReplayName' has a wrong offset!");

// Function PropWitchHuntModule.ReplayWorldSubsystem.StartRecordingReplay
// 0x0020 (0x0020 - 0x0000)
struct ReplayWorldSubsystem_StartRecordingReplay final
{
public:
	class FString                                 ReplayName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FriendlyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReplayWorldSubsystem_StartRecordingReplay) == 0x000008, "Wrong alignment on ReplayWorldSubsystem_StartRecordingReplay");
static_assert(sizeof(ReplayWorldSubsystem_StartRecordingReplay) == 0x000020, "Wrong size on ReplayWorldSubsystem_StartRecordingReplay");
static_assert(offsetof(ReplayWorldSubsystem_StartRecordingReplay, ReplayName) == 0x000000, "Member 'ReplayWorldSubsystem_StartRecordingReplay::ReplayName' has a wrong offset!");
static_assert(offsetof(ReplayWorldSubsystem_StartRecordingReplay, FriendlyName) == 0x000010, "Member 'ReplayWorldSubsystem_StartRecordingReplay::FriendlyName' has a wrong offset!");

// Function PropWitchHuntModule.SessionSubsystem.GetActiveGameSession
// 0x0128 (0x0128 - 0x0000)
struct SessionSubsystem_GetActiveGameSession final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBlueprintSessionResult                ReturnValue;                                       // 0x0008(0x0120)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SessionSubsystem_GetActiveGameSession) == 0x000008, "Wrong alignment on SessionSubsystem_GetActiveGameSession");
static_assert(sizeof(SessionSubsystem_GetActiveGameSession) == 0x000128, "Wrong size on SessionSubsystem_GetActiveGameSession");
static_assert(offsetof(SessionSubsystem_GetActiveGameSession, WorldContextObject) == 0x000000, "Member 'SessionSubsystem_GetActiveGameSession::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SessionSubsystem_GetActiveGameSession, ReturnValue) == 0x000008, "Member 'SessionSubsystem_GetActiveGameSession::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.SkillParameters.GetFormattedTooltip
// 0x0010 (0x0010 - 0x0000)
struct SkillParameters_GetFormattedTooltip final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillParameters_GetFormattedTooltip) == 0x000008, "Wrong alignment on SkillParameters_GetFormattedTooltip");
static_assert(sizeof(SkillParameters_GetFormattedTooltip) == 0x000010, "Wrong size on SkillParameters_GetFormattedTooltip");
static_assert(offsetof(SkillParameters_GetFormattedTooltip, ReturnValue) == 0x000000, "Member 'SkillParameters_GetFormattedTooltip::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.StartupSubsystem.CompleteStartupPhase
// 0x0008 (0x0008 - 0x0000)
struct StartupSubsystem_CompleteStartupPhase final
{
public:
	class FName                                   Phase;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StartupSubsystem_CompleteStartupPhase) == 0x000004, "Wrong alignment on StartupSubsystem_CompleteStartupPhase");
static_assert(sizeof(StartupSubsystem_CompleteStartupPhase) == 0x000008, "Wrong size on StartupSubsystem_CompleteStartupPhase");
static_assert(offsetof(StartupSubsystem_CompleteStartupPhase, Phase) == 0x000000, "Member 'StartupSubsystem_CompleteStartupPhase::Phase' has a wrong offset!");

// Function PropWitchHuntModule.StartupSubsystem.RegisterStartupPhase
// 0x0008 (0x0008 - 0x0000)
struct StartupSubsystem_RegisterStartupPhase final
{
public:
	class FName                                   Phase;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StartupSubsystem_RegisterStartupPhase) == 0x000004, "Wrong alignment on StartupSubsystem_RegisterStartupPhase");
static_assert(sizeof(StartupSubsystem_RegisterStartupPhase) == 0x000008, "Wrong size on StartupSubsystem_RegisterStartupPhase");
static_assert(offsetof(StartupSubsystem_RegisterStartupPhase, Phase) == 0x000000, "Member 'StartupSubsystem_RegisterStartupPhase::Phase' has a wrong offset!");

// Function PropWitchHuntModule.StaticMeshProp.HandleCanJump
// 0x0020 (0x0020 - 0x0000)
struct StaticMeshProp_HandleCanJump final
{
public:
	struct FVector                                HitNormal;                                         // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Slope;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaticMeshProp_HandleCanJump) == 0x000008, "Wrong alignment on StaticMeshProp_HandleCanJump");
static_assert(sizeof(StaticMeshProp_HandleCanJump) == 0x000020, "Wrong size on StaticMeshProp_HandleCanJump");
static_assert(offsetof(StaticMeshProp_HandleCanJump, HitNormal) == 0x000000, "Member 'StaticMeshProp_HandleCanJump::HitNormal' has a wrong offset!");
static_assert(offsetof(StaticMeshProp_HandleCanJump, Slope) == 0x000018, "Member 'StaticMeshProp_HandleCanJump::Slope' has a wrong offset!");

// Function PropWitchHuntModule.StaticMeshProp.SetActorSubComponentsTickState
// 0x0001 (0x0001 - 0x0000)
struct StaticMeshProp_SetActorSubComponentsTickState final
{
public:
	bool                                          bTickEnabled;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaticMeshProp_SetActorSubComponentsTickState) == 0x000001, "Wrong alignment on StaticMeshProp_SetActorSubComponentsTickState");
static_assert(sizeof(StaticMeshProp_SetActorSubComponentsTickState) == 0x000001, "Wrong size on StaticMeshProp_SetActorSubComponentsTickState");
static_assert(offsetof(StaticMeshProp_SetActorSubComponentsTickState, bTickEnabled) == 0x000000, "Member 'StaticMeshProp_SetActorSubComponentsTickState::bTickEnabled' has a wrong offset!");

// Function PropWitchHuntModule.StructDataLibrary.ApplyParameterRules
// 0x0018 (0x0018 - 0x0000)
struct StructDataLibrary_ApplyParameterRules final
{
public:
	class UObject*                                Parameter;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FUIParam>                       UIParam;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(StructDataLibrary_ApplyParameterRules) == 0x000008, "Wrong alignment on StructDataLibrary_ApplyParameterRules");
static_assert(sizeof(StructDataLibrary_ApplyParameterRules) == 0x000018, "Wrong size on StructDataLibrary_ApplyParameterRules");
static_assert(offsetof(StructDataLibrary_ApplyParameterRules, Parameter) == 0x000000, "Member 'StructDataLibrary_ApplyParameterRules::Parameter' has a wrong offset!");
static_assert(offsetof(StructDataLibrary_ApplyParameterRules, UIParam) == 0x000008, "Member 'StructDataLibrary_ApplyParameterRules::UIParam' has a wrong offset!");

// Function PropWitchHuntModule.StructDataLibrary.AreParametersEqual
// 0x0018 (0x0018 - 0x0000)
struct StructDataLibrary_AreParametersEqual final
{
public:
	class UObject*                                FirstParameter;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                SecondParameter;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StructDataLibrary_AreParametersEqual) == 0x000008, "Wrong alignment on StructDataLibrary_AreParametersEqual");
static_assert(sizeof(StructDataLibrary_AreParametersEqual) == 0x000018, "Wrong size on StructDataLibrary_AreParametersEqual");
static_assert(offsetof(StructDataLibrary_AreParametersEqual, FirstParameter) == 0x000000, "Member 'StructDataLibrary_AreParametersEqual::FirstParameter' has a wrong offset!");
static_assert(offsetof(StructDataLibrary_AreParametersEqual, SecondParameter) == 0x000008, "Member 'StructDataLibrary_AreParametersEqual::SecondParameter' has a wrong offset!");
static_assert(offsetof(StructDataLibrary_AreParametersEqual, ReturnValue) == 0x000010, "Member 'StructDataLibrary_AreParametersEqual::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.StructDataLibrary.GetParameterValue
// 0x0028 (0x0028 - 0x0000)
struct StructDataLibrary_GetParameterValue final
{
public:
	class UObject*                                Parameter;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUIParam                               ReturnValue;                                       // 0x0010(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StructDataLibrary_GetParameterValue) == 0x000008, "Wrong alignment on StructDataLibrary_GetParameterValue");
static_assert(sizeof(StructDataLibrary_GetParameterValue) == 0x000028, "Wrong size on StructDataLibrary_GetParameterValue");
static_assert(offsetof(StructDataLibrary_GetParameterValue, Parameter) == 0x000000, "Member 'StructDataLibrary_GetParameterValue::Parameter' has a wrong offset!");
static_assert(offsetof(StructDataLibrary_GetParameterValue, ParameterName) == 0x000008, "Member 'StructDataLibrary_GetParameterValue::ParameterName' has a wrong offset!");
static_assert(offsetof(StructDataLibrary_GetParameterValue, ReturnValue) == 0x000010, "Member 'StructDataLibrary_GetParameterValue::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.StructDataLibrary.GetUIParameters
// 0x0020 (0x0020 - 0x0000)
struct StructDataLibrary_GetUIParameters final
{
public:
	class UObject*                                Parameter;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             UIData;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FUIParameterData>               ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StructDataLibrary_GetUIParameters) == 0x000008, "Wrong alignment on StructDataLibrary_GetUIParameters");
static_assert(sizeof(StructDataLibrary_GetUIParameters) == 0x000020, "Wrong size on StructDataLibrary_GetUIParameters");
static_assert(offsetof(StructDataLibrary_GetUIParameters, Parameter) == 0x000000, "Member 'StructDataLibrary_GetUIParameters::Parameter' has a wrong offset!");
static_assert(offsetof(StructDataLibrary_GetUIParameters, UIData) == 0x000008, "Member 'StructDataLibrary_GetUIParameters::UIData' has a wrong offset!");
static_assert(offsetof(StructDataLibrary_GetUIParameters, ReturnValue) == 0x000010, "Member 'StructDataLibrary_GetUIParameters::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.TickableBaseManager.BPTick
// 0x0004 (0x0004 - 0x0000)
struct TickableBaseManager_BPTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TickableBaseManager_BPTick) == 0x000004, "Wrong alignment on TickableBaseManager_BPTick");
static_assert(sizeof(TickableBaseManager_BPTick) == 0x000004, "Wrong size on TickableBaseManager_BPTick");
static_assert(offsetof(TickableBaseManager_BPTick, DeltaTime) == 0x000000, "Member 'TickableBaseManager_BPTick::DeltaTime' has a wrong offset!");

// DelegateFunction PropWitchHuntModule.TljhUserControllerSystem.ActiveUserInfoUpdatedSignature__DelegateSignature
// 0x00E0 (0x00E0 - 0x0000)
struct TljhUserControllerSystem_ActiveUserInfoUpdatedSignature__DelegateSignature final
{
public:
	struct FSlateBrush                            IconBrush;                                         // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 DisplayString;                                     // 0x00D0(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TljhUserControllerSystem_ActiveUserInfoUpdatedSignature__DelegateSignature) == 0x000010, "Wrong alignment on TljhUserControllerSystem_ActiveUserInfoUpdatedSignature__DelegateSignature");
static_assert(sizeof(TljhUserControllerSystem_ActiveUserInfoUpdatedSignature__DelegateSignature) == 0x0000E0, "Wrong size on TljhUserControllerSystem_ActiveUserInfoUpdatedSignature__DelegateSignature");
static_assert(offsetof(TljhUserControllerSystem_ActiveUserInfoUpdatedSignature__DelegateSignature, IconBrush) == 0x000000, "Member 'TljhUserControllerSystem_ActiveUserInfoUpdatedSignature__DelegateSignature::IconBrush' has a wrong offset!");
static_assert(offsetof(TljhUserControllerSystem_ActiveUserInfoUpdatedSignature__DelegateSignature, DisplayString) == 0x0000D0, "Member 'TljhUserControllerSystem_ActiveUserInfoUpdatedSignature__DelegateSignature::DisplayString' has a wrong offset!");

// Function PropWitchHuntModule.TljhUserControllerSystem.Initialize
// 0x0008 (0x0008 - 0x0000)
struct TljhUserControllerSystem_Initialize final
{
public:
	class UGameInstance*                          GameInstance_0;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TljhUserControllerSystem_Initialize) == 0x000008, "Wrong alignment on TljhUserControllerSystem_Initialize");
static_assert(sizeof(TljhUserControllerSystem_Initialize) == 0x000008, "Wrong size on TljhUserControllerSystem_Initialize");
static_assert(offsetof(TljhUserControllerSystem_Initialize, GameInstance_0) == 0x000000, "Member 'TljhUserControllerSystem_Initialize::GameInstance_0' has a wrong offset!");

// DelegateFunction PropWitchHuntModule.TljhUserControllerSystem.OnInputChangedSignature__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct TljhUserControllerSystem_OnInputChangedSignature__DelegateSignature final
{
public:
	bool                                          bIsGamepad;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TljhUserControllerSystem_OnInputChangedSignature__DelegateSignature) == 0x000001, "Wrong alignment on TljhUserControllerSystem_OnInputChangedSignature__DelegateSignature");
static_assert(sizeof(TljhUserControllerSystem_OnInputChangedSignature__DelegateSignature) == 0x000001, "Wrong size on TljhUserControllerSystem_OnInputChangedSignature__DelegateSignature");
static_assert(offsetof(TljhUserControllerSystem_OnInputChangedSignature__DelegateSignature, bIsGamepad) == 0x000000, "Member 'TljhUserControllerSystem_OnInputChangedSignature__DelegateSignature::bIsGamepad' has a wrong offset!");

// DelegateFunction PropWitchHuntModule.TljhUserControllerSystem.OnPushToTalkChangedSignature__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct TljhUserControllerSystem_OnPushToTalkChangedSignature__DelegateSignature final
{
public:
	bool                                          bIsTalking;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TljhUserControllerSystem_OnPushToTalkChangedSignature__DelegateSignature) == 0x000001, "Wrong alignment on TljhUserControllerSystem_OnPushToTalkChangedSignature__DelegateSignature");
static_assert(sizeof(TljhUserControllerSystem_OnPushToTalkChangedSignature__DelegateSignature) == 0x000001, "Wrong size on TljhUserControllerSystem_OnPushToTalkChangedSignature__DelegateSignature");
static_assert(offsetof(TljhUserControllerSystem_OnPushToTalkChangedSignature__DelegateSignature, bIsTalking) == 0x000000, "Member 'TljhUserControllerSystem_OnPushToTalkChangedSignature__DelegateSignature::bIsTalking' has a wrong offset!");

// Function PropWitchHuntModule.TljhUserControllerSystem.OpenAccountPicker_BP
// 0x0001 (0x0001 - 0x0000)
struct TljhUserControllerSystem_OpenAccountPicker_BP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TljhUserControllerSystem_OpenAccountPicker_BP) == 0x000001, "Wrong alignment on TljhUserControllerSystem_OpenAccountPicker_BP");
static_assert(sizeof(TljhUserControllerSystem_OpenAccountPicker_BP) == 0x000001, "Wrong size on TljhUserControllerSystem_OpenAccountPicker_BP");
static_assert(offsetof(TljhUserControllerSystem_OpenAccountPicker_BP, ReturnValue) == 0x000000, "Member 'TljhUserControllerSystem_OpenAccountPicker_BP::ReturnValue' has a wrong offset!");

// DelegateFunction PropWitchHuntModule.TljhUserControllerSystem.ShowUserReestablishMessageSignature__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct TljhUserControllerSystem_ShowUserReestablishMessageSignature__DelegateSignature final
{
public:
	EEstablishUserReason                          EstablishUserReason;                               // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TljhUserControllerSystem_ShowUserReestablishMessageSignature__DelegateSignature) == 0x000001, "Wrong alignment on TljhUserControllerSystem_ShowUserReestablishMessageSignature__DelegateSignature");
static_assert(sizeof(TljhUserControllerSystem_ShowUserReestablishMessageSignature__DelegateSignature) == 0x000001, "Wrong size on TljhUserControllerSystem_ShowUserReestablishMessageSignature__DelegateSignature");
static_assert(offsetof(TljhUserControllerSystem_ShowUserReestablishMessageSignature__DelegateSignature, EstablishUserReason) == 0x000000, "Member 'TljhUserControllerSystem_ShowUserReestablishMessageSignature__DelegateSignature::EstablishUserReason' has a wrong offset!");

// Function PropWitchHuntModule.TljhUserControllerSystem.GetActiveUserDisplayInfo
// 0x00F0 (0x00F0 - 0x0000)
struct TljhUserControllerSystem_GetActiveUserDisplayInfo final
{
public:
	bool                                          Supported;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            Icon;                                              // 0x0010(0x00D0)(Parm, OutParm, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x00E0(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TljhUserControllerSystem_GetActiveUserDisplayInfo) == 0x000010, "Wrong alignment on TljhUserControllerSystem_GetActiveUserDisplayInfo");
static_assert(sizeof(TljhUserControllerSystem_GetActiveUserDisplayInfo) == 0x0000F0, "Wrong size on TljhUserControllerSystem_GetActiveUserDisplayInfo");
static_assert(offsetof(TljhUserControllerSystem_GetActiveUserDisplayInfo, Supported) == 0x000000, "Member 'TljhUserControllerSystem_GetActiveUserDisplayInfo::Supported' has a wrong offset!");
static_assert(offsetof(TljhUserControllerSystem_GetActiveUserDisplayInfo, Icon) == 0x000010, "Member 'TljhUserControllerSystem_GetActiveUserDisplayInfo::Icon' has a wrong offset!");
static_assert(offsetof(TljhUserControllerSystem_GetActiveUserDisplayInfo, DisplayName) == 0x0000E0, "Member 'TljhUserControllerSystem_GetActiveUserDisplayInfo::DisplayName' has a wrong offset!");

// Function PropWitchHuntModule.TljhUserControllerSystem.HasEstablishedInitialUser
// 0x0001 (0x0001 - 0x0000)
struct TljhUserControllerSystem_HasEstablishedInitialUser final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TljhUserControllerSystem_HasEstablishedInitialUser) == 0x000001, "Wrong alignment on TljhUserControllerSystem_HasEstablishedInitialUser");
static_assert(sizeof(TljhUserControllerSystem_HasEstablishedInitialUser) == 0x000001, "Wrong size on TljhUserControllerSystem_HasEstablishedInitialUser");
static_assert(offsetof(TljhUserControllerSystem_HasEstablishedInitialUser, ReturnValue) == 0x000000, "Member 'TljhUserControllerSystem_HasEstablishedInitialUser::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.TljhUserControllerSystem.IsAccountPickerSupported
// 0x0001 (0x0001 - 0x0000)
struct TljhUserControllerSystem_IsAccountPickerSupported final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TljhUserControllerSystem_IsAccountPickerSupported) == 0x000001, "Wrong alignment on TljhUserControllerSystem_IsAccountPickerSupported");
static_assert(sizeof(TljhUserControllerSystem_IsAccountPickerSupported) == 0x000001, "Wrong size on TljhUserControllerSystem_IsAccountPickerSupported");
static_assert(offsetof(TljhUserControllerSystem_IsAccountPickerSupported, ReturnValue) == 0x000000, "Member 'TljhUserControllerSystem_IsAccountPickerSupported::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.CreateUGCItemCallbackProxy.CreateWorkshopItem
// 0x0010 (0x0010 - 0x0000)
struct CreateUGCItemCallbackProxy_CreateWorkshopItem final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCreateUGCItemCallbackProxy*            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CreateUGCItemCallbackProxy_CreateWorkshopItem) == 0x000008, "Wrong alignment on CreateUGCItemCallbackProxy_CreateWorkshopItem");
static_assert(sizeof(CreateUGCItemCallbackProxy_CreateWorkshopItem) == 0x000010, "Wrong size on CreateUGCItemCallbackProxy_CreateWorkshopItem");
static_assert(offsetof(CreateUGCItemCallbackProxy_CreateWorkshopItem, WorldContextObject) == 0x000000, "Member 'CreateUGCItemCallbackProxy_CreateWorkshopItem::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CreateUGCItemCallbackProxy_CreateWorkshopItem, ReturnValue) == 0x000008, "Member 'CreateUGCItemCallbackProxy_CreateWorkshopItem::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.UpdateUGCItemCallbackProxy.UpdateWorkshopItem
// 0x00F0 (0x00F0 - 0x0000)
struct UpdateUGCItemCallbackProxy_UpdateWorkshopItem final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ItemIdToUpdate;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ChangeNote;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MetaData;                                          // 0x0050(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUGCItemVisibility                            Visibility;                                        // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Tags;                                              // 0x0068(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            KeyValueTags;                                      // 0x0078(0x0050)(Parm, NativeAccessSpecifierPublic)
	class FString                                 ContentFolder;                                     // 0x00C8(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PreviewFile;                                       // 0x00D8(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUpdateUGCItemCallbackProxy*            ReturnValue;                                       // 0x00E8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UpdateUGCItemCallbackProxy_UpdateWorkshopItem) == 0x000008, "Wrong alignment on UpdateUGCItemCallbackProxy_UpdateWorkshopItem");
static_assert(sizeof(UpdateUGCItemCallbackProxy_UpdateWorkshopItem) == 0x0000F0, "Wrong size on UpdateUGCItemCallbackProxy_UpdateWorkshopItem");
static_assert(offsetof(UpdateUGCItemCallbackProxy_UpdateWorkshopItem, WorldContextObject) == 0x000000, "Member 'UpdateUGCItemCallbackProxy_UpdateWorkshopItem::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UpdateUGCItemCallbackProxy_UpdateWorkshopItem, ItemIdToUpdate) == 0x000008, "Member 'UpdateUGCItemCallbackProxy_UpdateWorkshopItem::ItemIdToUpdate' has a wrong offset!");
static_assert(offsetof(UpdateUGCItemCallbackProxy_UpdateWorkshopItem, ChangeNote) == 0x000010, "Member 'UpdateUGCItemCallbackProxy_UpdateWorkshopItem::ChangeNote' has a wrong offset!");
static_assert(offsetof(UpdateUGCItemCallbackProxy_UpdateWorkshopItem, Title) == 0x000020, "Member 'UpdateUGCItemCallbackProxy_UpdateWorkshopItem::Title' has a wrong offset!");
static_assert(offsetof(UpdateUGCItemCallbackProxy_UpdateWorkshopItem, Description) == 0x000030, "Member 'UpdateUGCItemCallbackProxy_UpdateWorkshopItem::Description' has a wrong offset!");
static_assert(offsetof(UpdateUGCItemCallbackProxy_UpdateWorkshopItem, Language) == 0x000040, "Member 'UpdateUGCItemCallbackProxy_UpdateWorkshopItem::Language' has a wrong offset!");
static_assert(offsetof(UpdateUGCItemCallbackProxy_UpdateWorkshopItem, MetaData) == 0x000050, "Member 'UpdateUGCItemCallbackProxy_UpdateWorkshopItem::MetaData' has a wrong offset!");
static_assert(offsetof(UpdateUGCItemCallbackProxy_UpdateWorkshopItem, Visibility) == 0x000060, "Member 'UpdateUGCItemCallbackProxy_UpdateWorkshopItem::Visibility' has a wrong offset!");
static_assert(offsetof(UpdateUGCItemCallbackProxy_UpdateWorkshopItem, Tags) == 0x000068, "Member 'UpdateUGCItemCallbackProxy_UpdateWorkshopItem::Tags' has a wrong offset!");
static_assert(offsetof(UpdateUGCItemCallbackProxy_UpdateWorkshopItem, KeyValueTags) == 0x000078, "Member 'UpdateUGCItemCallbackProxy_UpdateWorkshopItem::KeyValueTags' has a wrong offset!");
static_assert(offsetof(UpdateUGCItemCallbackProxy_UpdateWorkshopItem, ContentFolder) == 0x0000C8, "Member 'UpdateUGCItemCallbackProxy_UpdateWorkshopItem::ContentFolder' has a wrong offset!");
static_assert(offsetof(UpdateUGCItemCallbackProxy_UpdateWorkshopItem, PreviewFile) == 0x0000D8, "Member 'UpdateUGCItemCallbackProxy_UpdateWorkshopItem::PreviewFile' has a wrong offset!");
static_assert(offsetof(UpdateUGCItemCallbackProxy_UpdateWorkshopItem, ReturnValue) == 0x0000E8, "Member 'UpdateUGCItemCallbackProxy_UpdateWorkshopItem::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.WindForceComponent.SetMesh
// 0x0008 (0x0008 - 0x0000)
struct WindForceComponent_SetMesh final
{
public:
	class UMeshComponent*                         MeshComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WindForceComponent_SetMesh) == 0x000008, "Wrong alignment on WindForceComponent_SetMesh");
static_assert(sizeof(WindForceComponent_SetMesh) == 0x000008, "Wrong size on WindForceComponent_SetMesh");
static_assert(offsetof(WindForceComponent_SetMesh, MeshComponent) == 0x000000, "Member 'WindForceComponent_SetMesh::MeshComponent' has a wrong offset!");

// Function PropWitchHuntModule.WitchItGameInstance.AddPlayerLookupEntry
// 0x0058 (0x0058 - 0x0000)
struct WitchItGameInstance_AddPlayerLookupEntry final
{
public:
	struct FUniqueNetIdRepl                       UniqueNetId;                                       // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NativePlatformId;                                  // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NativePlatform;                                    // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WitchItGameInstance_AddPlayerLookupEntry) == 0x000008, "Wrong alignment on WitchItGameInstance_AddPlayerLookupEntry");
static_assert(sizeof(WitchItGameInstance_AddPlayerLookupEntry) == 0x000058, "Wrong size on WitchItGameInstance_AddPlayerLookupEntry");
static_assert(offsetof(WitchItGameInstance_AddPlayerLookupEntry, UniqueNetId) == 0x000000, "Member 'WitchItGameInstance_AddPlayerLookupEntry::UniqueNetId' has a wrong offset!");
static_assert(offsetof(WitchItGameInstance_AddPlayerLookupEntry, NativePlatformId) == 0x000030, "Member 'WitchItGameInstance_AddPlayerLookupEntry::NativePlatformId' has a wrong offset!");
static_assert(offsetof(WitchItGameInstance_AddPlayerLookupEntry, NativePlatform) == 0x000040, "Member 'WitchItGameInstance_AddPlayerLookupEntry::NativePlatform' has a wrong offset!");
static_assert(offsetof(WitchItGameInstance_AddPlayerLookupEntry, ReturnValue) == 0x000050, "Member 'WitchItGameInstance_AddPlayerLookupEntry::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.WitchItGameInstance.BeginLoadingScreen
// 0x0010 (0x0010 - 0x0000)
struct WitchItGameInstance_BeginLoadingScreen final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WitchItGameInstance_BeginLoadingScreen) == 0x000008, "Wrong alignment on WitchItGameInstance_BeginLoadingScreen");
static_assert(sizeof(WitchItGameInstance_BeginLoadingScreen) == 0x000010, "Wrong size on WitchItGameInstance_BeginLoadingScreen");
static_assert(offsetof(WitchItGameInstance_BeginLoadingScreen, String) == 0x000000, "Member 'WitchItGameInstance_BeginLoadingScreen::String' has a wrong offset!");

// Function PropWitchHuntModule.WitchItGameInstance.EndLoadingScreen
// 0x0008 (0x0008 - 0x0000)
struct WitchItGameInstance_EndLoadingScreen final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WitchItGameInstance_EndLoadingScreen) == 0x000008, "Wrong alignment on WitchItGameInstance_EndLoadingScreen");
static_assert(sizeof(WitchItGameInstance_EndLoadingScreen) == 0x000008, "Wrong size on WitchItGameInstance_EndLoadingScreen");
static_assert(offsetof(WitchItGameInstance_EndLoadingScreen, World) == 0x000000, "Member 'WitchItGameInstance_EndLoadingScreen::World' has a wrong offset!");

// Function PropWitchHuntModule.WitchItGameInstance.OnNetworkFailure
// 0x0020 (0x0020 - 0x0000)
struct WitchItGameInstance_OnNetworkFailure final
{
public:
	ENetworkFailure                               FailureType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorText;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsServer;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WitchItGameInstance_OnNetworkFailure) == 0x000008, "Wrong alignment on WitchItGameInstance_OnNetworkFailure");
static_assert(sizeof(WitchItGameInstance_OnNetworkFailure) == 0x000020, "Wrong size on WitchItGameInstance_OnNetworkFailure");
static_assert(offsetof(WitchItGameInstance_OnNetworkFailure, FailureType) == 0x000000, "Member 'WitchItGameInstance_OnNetworkFailure::FailureType' has a wrong offset!");
static_assert(offsetof(WitchItGameInstance_OnNetworkFailure, ErrorText) == 0x000008, "Member 'WitchItGameInstance_OnNetworkFailure::ErrorText' has a wrong offset!");
static_assert(offsetof(WitchItGameInstance_OnNetworkFailure, IsServer) == 0x000018, "Member 'WitchItGameInstance_OnNetworkFailure::IsServer' has a wrong offset!");

// Function PropWitchHuntModule.WitchItGameInstance.RemovePlayerLookupEntry
// 0x0038 (0x0038 - 0x0000)
struct WitchItGameInstance_RemovePlayerLookupEntry final
{
public:
	struct FUniqueNetIdRepl                       UniqueNetId;                                       // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WitchItGameInstance_RemovePlayerLookupEntry) == 0x000008, "Wrong alignment on WitchItGameInstance_RemovePlayerLookupEntry");
static_assert(sizeof(WitchItGameInstance_RemovePlayerLookupEntry) == 0x000038, "Wrong size on WitchItGameInstance_RemovePlayerLookupEntry");
static_assert(offsetof(WitchItGameInstance_RemovePlayerLookupEntry, UniqueNetId) == 0x000000, "Member 'WitchItGameInstance_RemovePlayerLookupEntry::UniqueNetId' has a wrong offset!");
static_assert(offsetof(WitchItGameInstance_RemovePlayerLookupEntry, ReturnValue) == 0x000030, "Member 'WitchItGameInstance_RemovePlayerLookupEntry::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.WitchItGameInstance.SetSuspendInBackground
// 0x0001 (0x0001 - 0x0000)
struct WitchItGameInstance_SetSuspendInBackground final
{
public:
	bool                                          ShouldSuspend;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WitchItGameInstance_SetSuspendInBackground) == 0x000001, "Wrong alignment on WitchItGameInstance_SetSuspendInBackground");
static_assert(sizeof(WitchItGameInstance_SetSuspendInBackground) == 0x000001, "Wrong size on WitchItGameInstance_SetSuspendInBackground");
static_assert(offsetof(WitchItGameInstance_SetSuspendInBackground, ShouldSuspend) == 0x000000, "Member 'WitchItGameInstance_SetSuspendInBackground::ShouldSuspend' has a wrong offset!");

// Function PropWitchHuntModule.WitchItGameInstance.GetNativePlatformInfo
// 0x0058 (0x0058 - 0x0000)
struct WitchItGameInstance_GetNativePlatformInfo final
{
public:
	struct FUniqueNetIdRepl                       UniqueNetId;                                       // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NativePlatformId;                                  // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NativePlatform;                                    // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WitchItGameInstance_GetNativePlatformInfo) == 0x000008, "Wrong alignment on WitchItGameInstance_GetNativePlatformInfo");
static_assert(sizeof(WitchItGameInstance_GetNativePlatformInfo) == 0x000058, "Wrong size on WitchItGameInstance_GetNativePlatformInfo");
static_assert(offsetof(WitchItGameInstance_GetNativePlatformInfo, UniqueNetId) == 0x000000, "Member 'WitchItGameInstance_GetNativePlatformInfo::UniqueNetId' has a wrong offset!");
static_assert(offsetof(WitchItGameInstance_GetNativePlatformInfo, NativePlatformId) == 0x000030, "Member 'WitchItGameInstance_GetNativePlatformInfo::NativePlatformId' has a wrong offset!");
static_assert(offsetof(WitchItGameInstance_GetNativePlatformInfo, NativePlatform) == 0x000040, "Member 'WitchItGameInstance_GetNativePlatformInfo::NativePlatform' has a wrong offset!");
static_assert(offsetof(WitchItGameInstance_GetNativePlatformInfo, ReturnValue) == 0x000050, "Member 'WitchItGameInstance_GetNativePlatformInfo::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.WitchItGameState.GetEngineMaxTickRate
// 0x0004 (0x0004 - 0x0000)
struct WitchItGameState_GetEngineMaxTickRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WitchItGameState_GetEngineMaxTickRate) == 0x000004, "Wrong alignment on WitchItGameState_GetEngineMaxTickRate");
static_assert(sizeof(WitchItGameState_GetEngineMaxTickRate) == 0x000004, "Wrong size on WitchItGameState_GetEngineMaxTickRate");
static_assert(offsetof(WitchItGameState_GetEngineMaxTickRate, ReturnValue) == 0x000000, "Member 'WitchItGameState_GetEngineMaxTickRate::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.WitchItGameState.SetMaxNetTickRate
// 0x0004 (0x0004 - 0x0000)
struct WitchItGameState_SetMaxNetTickRate final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WitchItGameState_SetMaxNetTickRate) == 0x000004, "Wrong alignment on WitchItGameState_SetMaxNetTickRate");
static_assert(sizeof(WitchItGameState_SetMaxNetTickRate) == 0x000004, "Wrong size on WitchItGameState_SetMaxNetTickRate");
static_assert(offsetof(WitchItGameState_SetMaxNetTickRate, NewValue) == 0x000000, "Member 'WitchItGameState_SetMaxNetTickRate::NewValue' has a wrong offset!");

// Function PropWitchHuntModule.WitchItGameState.SetNetServerMaxTickRate
// 0x0004 (0x0004 - 0x0000)
struct WitchItGameState_SetNetServerMaxTickRate final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WitchItGameState_SetNetServerMaxTickRate) == 0x000004, "Wrong alignment on WitchItGameState_SetNetServerMaxTickRate");
static_assert(sizeof(WitchItGameState_SetNetServerMaxTickRate) == 0x000004, "Wrong size on WitchItGameState_SetNetServerMaxTickRate");
static_assert(offsetof(WitchItGameState_SetNetServerMaxTickRate, NewValue) == 0x000000, "Member 'WitchItGameState_SetNetServerMaxTickRate::NewValue' has a wrong offset!");

// Function PropWitchHuntModule.WitchItPlayerController.ApplyPropTransforms
// 0x0030 (0x0030 - 0x0000)
struct WitchItPlayerController_ApplyPropTransforms final
{
public:
	TArray<class AActor*>                         RefList;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FVector3f>                      Locations;                                         // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FVector3f>                      Rotations;                                         // 0x0020(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WitchItPlayerController_ApplyPropTransforms) == 0x000008, "Wrong alignment on WitchItPlayerController_ApplyPropTransforms");
static_assert(sizeof(WitchItPlayerController_ApplyPropTransforms) == 0x000030, "Wrong size on WitchItPlayerController_ApplyPropTransforms");
static_assert(offsetof(WitchItPlayerController_ApplyPropTransforms, RefList) == 0x000000, "Member 'WitchItPlayerController_ApplyPropTransforms::RefList' has a wrong offset!");
static_assert(offsetof(WitchItPlayerController_ApplyPropTransforms, Locations) == 0x000010, "Member 'WitchItPlayerController_ApplyPropTransforms::Locations' has a wrong offset!");
static_assert(offsetof(WitchItPlayerController_ApplyPropTransforms, Rotations) == 0x000020, "Member 'WitchItPlayerController_ApplyPropTransforms::Rotations' has a wrong offset!");

// Function PropWitchHuntModule.WitchItPlayerState.PostOnRepPlayerName
// 0x0010 (0x0010 - 0x0000)
struct WitchItPlayerState_PostOnRepPlayerName final
{
public:
	class FString                                 NewPlayerName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WitchItPlayerState_PostOnRepPlayerName) == 0x000008, "Wrong alignment on WitchItPlayerState_PostOnRepPlayerName");
static_assert(sizeof(WitchItPlayerState_PostOnRepPlayerName) == 0x000010, "Wrong size on WitchItPlayerState_PostOnRepPlayerName");
static_assert(offsetof(WitchItPlayerState_PostOnRepPlayerName, NewPlayerName) == 0x000000, "Member 'WitchItPlayerState_PostOnRepPlayerName::NewPlayerName' has a wrong offset!");

// Function PropWitchHuntModule.WitchItPlayerState.SetSafePlayerName
// 0x0010 (0x0010 - 0x0000)
struct WitchItPlayerState_SetSafePlayerName final
{
public:
	class FString                                 SafePlayerName;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WitchItPlayerState_SetSafePlayerName) == 0x000008, "Wrong alignment on WitchItPlayerState_SetSafePlayerName");
static_assert(sizeof(WitchItPlayerState_SetSafePlayerName) == 0x000010, "Wrong size on WitchItPlayerState_SetSafePlayerName");
static_assert(offsetof(WitchItPlayerState_SetSafePlayerName, SafePlayerName) == 0x000000, "Member 'WitchItPlayerState_SetSafePlayerName::SafePlayerName' has a wrong offset!");

// Function PropWitchHuntModule.CallbackProxyCreateWorkshopItemBRG.Workshop_CreateItem
// 0x00D8 (0x00D8 - 0x0000)
struct CallbackProxyCreateWorkshopItemBRG_Workshop_CreateItem final
{
public:
	struct FWorkshopUpdateDetails                 ItemDetails;                                       // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UCallbackProxyCreateWorkshopItemBRG*    ReturnValue;                                       // 0x00D0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CallbackProxyCreateWorkshopItemBRG_Workshop_CreateItem) == 0x000008, "Wrong alignment on CallbackProxyCreateWorkshopItemBRG_Workshop_CreateItem");
static_assert(sizeof(CallbackProxyCreateWorkshopItemBRG_Workshop_CreateItem) == 0x0000D8, "Wrong size on CallbackProxyCreateWorkshopItemBRG_Workshop_CreateItem");
static_assert(offsetof(CallbackProxyCreateWorkshopItemBRG_Workshop_CreateItem, ItemDetails) == 0x000000, "Member 'CallbackProxyCreateWorkshopItemBRG_Workshop_CreateItem::ItemDetails' has a wrong offset!");
static_assert(offsetof(CallbackProxyCreateWorkshopItemBRG_Workshop_CreateItem, ReturnValue) == 0x0000D0, "Member 'CallbackProxyCreateWorkshopItemBRG_Workshop_CreateItem::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.CallbackProxyUpdateWorkshopItemBRG.Workshop_UpdateItem
// 0x00F0 (0x00F0 - 0x0000)
struct CallbackProxyUpdateWorkshopItemBRG_Workshop_UpdateItem final
{
public:
	struct FUGCItemId                             ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FWorkshopUpdateDetails                 UpdateDetails;                                     // 0x0008(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FUGCUpdateHandle& UpdateHandle)> OnUpdateStarted;                                   // 0x00D8(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCallbackProxyUpdateWorkshopItemBRG*    ReturnValue;                                       // 0x00E8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CallbackProxyUpdateWorkshopItemBRG_Workshop_UpdateItem) == 0x000008, "Wrong alignment on CallbackProxyUpdateWorkshopItemBRG_Workshop_UpdateItem");
static_assert(sizeof(CallbackProxyUpdateWorkshopItemBRG_Workshop_UpdateItem) == 0x0000F0, "Wrong size on CallbackProxyUpdateWorkshopItemBRG_Workshop_UpdateItem");
static_assert(offsetof(CallbackProxyUpdateWorkshopItemBRG_Workshop_UpdateItem, ItemId) == 0x000000, "Member 'CallbackProxyUpdateWorkshopItemBRG_Workshop_UpdateItem::ItemId' has a wrong offset!");
static_assert(offsetof(CallbackProxyUpdateWorkshopItemBRG_Workshop_UpdateItem, UpdateDetails) == 0x000008, "Member 'CallbackProxyUpdateWorkshopItemBRG_Workshop_UpdateItem::UpdateDetails' has a wrong offset!");
static_assert(offsetof(CallbackProxyUpdateWorkshopItemBRG_Workshop_UpdateItem, OnUpdateStarted) == 0x0000D8, "Member 'CallbackProxyUpdateWorkshopItemBRG_Workshop_UpdateItem::OnUpdateStarted' has a wrong offset!");
static_assert(offsetof(CallbackProxyUpdateWorkshopItemBRG_Workshop_UpdateItem, ReturnValue) == 0x0000E8, "Member 'CallbackProxyUpdateWorkshopItemBRG_Workshop_UpdateItem::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.CallbackProxyQueryWorkshopForItemDetailsBRG.Workshop_QueryForItemDetails
// 0x0040 (0x0040 - 0x0000)
struct CallbackProxyQueryWorkshopForItemDetailsBRG_Workshop_QueryForItemDetails final
{
public:
	struct FUGCQueryParameterDetails              Parameter;                                         // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UCallbackProxyQueryWorkshopForItemDetailsBRG* ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CallbackProxyQueryWorkshopForItemDetailsBRG_Workshop_QueryForItemDetails) == 0x000008, "Wrong alignment on CallbackProxyQueryWorkshopForItemDetailsBRG_Workshop_QueryForItemDetails");
static_assert(sizeof(CallbackProxyQueryWorkshopForItemDetailsBRG_Workshop_QueryForItemDetails) == 0x000040, "Wrong size on CallbackProxyQueryWorkshopForItemDetailsBRG_Workshop_QueryForItemDetails");
static_assert(offsetof(CallbackProxyQueryWorkshopForItemDetailsBRG_Workshop_QueryForItemDetails, Parameter) == 0x000000, "Member 'CallbackProxyQueryWorkshopForItemDetailsBRG_Workshop_QueryForItemDetails::Parameter' has a wrong offset!");
static_assert(offsetof(CallbackProxyQueryWorkshopForItemDetailsBRG_Workshop_QueryForItemDetails, ReturnValue) == 0x000038, "Member 'CallbackProxyQueryWorkshopForItemDetailsBRG_Workshop_QueryForItemDetails::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.WorkshopGeneralLibrary.BreakUInt64BRG
// 0x0010 (0x0010 - 0x0000)
struct WorkshopGeneralLibrary_BreakUInt64BRG final
{
public:
	struct FUInt64BRG                             InVal;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         OutVal;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WorkshopGeneralLibrary_BreakUInt64BRG) == 0x000008, "Wrong alignment on WorkshopGeneralLibrary_BreakUInt64BRG");
static_assert(sizeof(WorkshopGeneralLibrary_BreakUInt64BRG) == 0x000010, "Wrong size on WorkshopGeneralLibrary_BreakUInt64BRG");
static_assert(offsetof(WorkshopGeneralLibrary_BreakUInt64BRG, InVal) == 0x000000, "Member 'WorkshopGeneralLibrary_BreakUInt64BRG::InVal' has a wrong offset!");
static_assert(offsetof(WorkshopGeneralLibrary_BreakUInt64BRG, OutVal) == 0x000008, "Member 'WorkshopGeneralLibrary_BreakUInt64BRG::OutVal' has a wrong offset!");
static_assert(offsetof(WorkshopGeneralLibrary_BreakUInt64BRG, ReturnValue) == 0x00000C, "Member 'WorkshopGeneralLibrary_BreakUInt64BRG::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.WorkshopGeneralLibrary.FromString_UInt64BRG
// 0x0018 (0x0018 - 0x0000)
struct WorkshopGeneralLibrary_FromString_UInt64BRG final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUInt64BRG                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorkshopGeneralLibrary_FromString_UInt64BRG) == 0x000008, "Wrong alignment on WorkshopGeneralLibrary_FromString_UInt64BRG");
static_assert(sizeof(WorkshopGeneralLibrary_FromString_UInt64BRG) == 0x000018, "Wrong size on WorkshopGeneralLibrary_FromString_UInt64BRG");
static_assert(offsetof(WorkshopGeneralLibrary_FromString_UInt64BRG, Value) == 0x000000, "Member 'WorkshopGeneralLibrary_FromString_UInt64BRG::Value' has a wrong offset!");
static_assert(offsetof(WorkshopGeneralLibrary_FromString_UInt64BRG, ReturnValue) == 0x000010, "Member 'WorkshopGeneralLibrary_FromString_UInt64BRG::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.WorkshopGeneralLibrary.ToString_UInt64BRG
// 0x0018 (0x0018 - 0x0000)
struct WorkshopGeneralLibrary_ToString_UInt64BRG final
{
public:
	struct FUInt64BRG                             Value;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorkshopGeneralLibrary_ToString_UInt64BRG) == 0x000008, "Wrong alignment on WorkshopGeneralLibrary_ToString_UInt64BRG");
static_assert(sizeof(WorkshopGeneralLibrary_ToString_UInt64BRG) == 0x000018, "Wrong size on WorkshopGeneralLibrary_ToString_UInt64BRG");
static_assert(offsetof(WorkshopGeneralLibrary_ToString_UInt64BRG, Value) == 0x000000, "Member 'WorkshopGeneralLibrary_ToString_UInt64BRG::Value' has a wrong offset!");
static_assert(offsetof(WorkshopGeneralLibrary_ToString_UInt64BRG, ReturnValue) == 0x000008, "Member 'WorkshopGeneralLibrary_ToString_UInt64BRG::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.WorkshopLibrary.MakeWorkshopUpdateDetails
// 0x0198 (0x0198 - 0x0000)
struct WorkshopLibrary_MakeWorkshopUpdateDetails final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UpdateNotice;                                      // 0x0020(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MetaData;                                          // 0x0030(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FKeyValuePairBRG>               KeyValueTags;                                      // 0x0050(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ContentDirectory;                                  // 0x0060(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PreviewImage;                                      // 0x0070(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         AdditionalImages;                                  // 0x0080(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         YoutubeVideoIDs;                                   // 0x0090(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         KeysOfKeyValueTagsToRemove;                        // 0x00A0(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 IndexOfPreviewToRemove;                            // 0x00B0(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	ESupportedLanguages                           UpdateLanguage;                                    // 0x00C0(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemVisibility                               Visibility;                                        // 0x00C1(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C2[0x6];                                       // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWorkshopUpdateDetails                 ReturnValue;                                       // 0x00C8(0x00D0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorkshopLibrary_MakeWorkshopUpdateDetails) == 0x000008, "Wrong alignment on WorkshopLibrary_MakeWorkshopUpdateDetails");
static_assert(sizeof(WorkshopLibrary_MakeWorkshopUpdateDetails) == 0x000198, "Wrong size on WorkshopLibrary_MakeWorkshopUpdateDetails");
static_assert(offsetof(WorkshopLibrary_MakeWorkshopUpdateDetails, Title) == 0x000000, "Member 'WorkshopLibrary_MakeWorkshopUpdateDetails::Title' has a wrong offset!");
static_assert(offsetof(WorkshopLibrary_MakeWorkshopUpdateDetails, Description) == 0x000010, "Member 'WorkshopLibrary_MakeWorkshopUpdateDetails::Description' has a wrong offset!");
static_assert(offsetof(WorkshopLibrary_MakeWorkshopUpdateDetails, UpdateNotice) == 0x000020, "Member 'WorkshopLibrary_MakeWorkshopUpdateDetails::UpdateNotice' has a wrong offset!");
static_assert(offsetof(WorkshopLibrary_MakeWorkshopUpdateDetails, MetaData) == 0x000030, "Member 'WorkshopLibrary_MakeWorkshopUpdateDetails::MetaData' has a wrong offset!");
static_assert(offsetof(WorkshopLibrary_MakeWorkshopUpdateDetails, Tags) == 0x000040, "Member 'WorkshopLibrary_MakeWorkshopUpdateDetails::Tags' has a wrong offset!");
static_assert(offsetof(WorkshopLibrary_MakeWorkshopUpdateDetails, KeyValueTags) == 0x000050, "Member 'WorkshopLibrary_MakeWorkshopUpdateDetails::KeyValueTags' has a wrong offset!");
static_assert(offsetof(WorkshopLibrary_MakeWorkshopUpdateDetails, ContentDirectory) == 0x000060, "Member 'WorkshopLibrary_MakeWorkshopUpdateDetails::ContentDirectory' has a wrong offset!");
static_assert(offsetof(WorkshopLibrary_MakeWorkshopUpdateDetails, PreviewImage) == 0x000070, "Member 'WorkshopLibrary_MakeWorkshopUpdateDetails::PreviewImage' has a wrong offset!");
static_assert(offsetof(WorkshopLibrary_MakeWorkshopUpdateDetails, AdditionalImages) == 0x000080, "Member 'WorkshopLibrary_MakeWorkshopUpdateDetails::AdditionalImages' has a wrong offset!");
static_assert(offsetof(WorkshopLibrary_MakeWorkshopUpdateDetails, YoutubeVideoIDs) == 0x000090, "Member 'WorkshopLibrary_MakeWorkshopUpdateDetails::YoutubeVideoIDs' has a wrong offset!");
static_assert(offsetof(WorkshopLibrary_MakeWorkshopUpdateDetails, KeysOfKeyValueTagsToRemove) == 0x0000A0, "Member 'WorkshopLibrary_MakeWorkshopUpdateDetails::KeysOfKeyValueTagsToRemove' has a wrong offset!");
static_assert(offsetof(WorkshopLibrary_MakeWorkshopUpdateDetails, IndexOfPreviewToRemove) == 0x0000B0, "Member 'WorkshopLibrary_MakeWorkshopUpdateDetails::IndexOfPreviewToRemove' has a wrong offset!");
static_assert(offsetof(WorkshopLibrary_MakeWorkshopUpdateDetails, UpdateLanguage) == 0x0000C0, "Member 'WorkshopLibrary_MakeWorkshopUpdateDetails::UpdateLanguage' has a wrong offset!");
static_assert(offsetof(WorkshopLibrary_MakeWorkshopUpdateDetails, Visibility) == 0x0000C1, "Member 'WorkshopLibrary_MakeWorkshopUpdateDetails::Visibility' has a wrong offset!");
static_assert(offsetof(WorkshopLibrary_MakeWorkshopUpdateDetails, ReturnValue) == 0x0000C8, "Member 'WorkshopLibrary_MakeWorkshopUpdateDetails::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.WorkshopLibrary.Workshop_GetItemInstallInfo
// 0x0038 (0x0038 - 0x0000)
struct WorkshopLibrary_Workshop_GetItemInstallInfo final
{
public:
	struct FUGCItemId                             ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FWorkshopItemInstallInfo               Info;                                              // 0x0008(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	EResultBRGBP                                  ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WorkshopLibrary_Workshop_GetItemInstallInfo) == 0x000008, "Wrong alignment on WorkshopLibrary_Workshop_GetItemInstallInfo");
static_assert(sizeof(WorkshopLibrary_Workshop_GetItemInstallInfo) == 0x000038, "Wrong size on WorkshopLibrary_Workshop_GetItemInstallInfo");
static_assert(offsetof(WorkshopLibrary_Workshop_GetItemInstallInfo, ItemId) == 0x000000, "Member 'WorkshopLibrary_Workshop_GetItemInstallInfo::ItemId' has a wrong offset!");
static_assert(offsetof(WorkshopLibrary_Workshop_GetItemInstallInfo, Info) == 0x000008, "Member 'WorkshopLibrary_Workshop_GetItemInstallInfo::Info' has a wrong offset!");
static_assert(offsetof(WorkshopLibrary_Workshop_GetItemInstallInfo, ReturnValue) == 0x000030, "Member 'WorkshopLibrary_Workshop_GetItemInstallInfo::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.WorkshopLibrary.Workshop_GetNumSubscribedItems
// 0x0004 (0x0004 - 0x0000)
struct WorkshopLibrary_Workshop_GetNumSubscribedItems final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorkshopLibrary_Workshop_GetNumSubscribedItems) == 0x000004, "Wrong alignment on WorkshopLibrary_Workshop_GetNumSubscribedItems");
static_assert(sizeof(WorkshopLibrary_Workshop_GetNumSubscribedItems) == 0x000004, "Wrong size on WorkshopLibrary_Workshop_GetNumSubscribedItems");
static_assert(offsetof(WorkshopLibrary_Workshop_GetNumSubscribedItems, ReturnValue) == 0x000000, "Member 'WorkshopLibrary_Workshop_GetNumSubscribedItems::ReturnValue' has a wrong offset!");

// Function PropWitchHuntModule.WorkshopLibrary.Workshop_GetSubscribedItems
// 0x0018 (0x0018 - 0x0000)
struct WorkshopLibrary_Workshop_GetSubscribedItems final
{
public:
	int32                                         MaxNumItemsToReturn;                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FUGCItemId>                     OutItems;                                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorkshopLibrary_Workshop_GetSubscribedItems) == 0x000008, "Wrong alignment on WorkshopLibrary_Workshop_GetSubscribedItems");
static_assert(sizeof(WorkshopLibrary_Workshop_GetSubscribedItems) == 0x000018, "Wrong size on WorkshopLibrary_Workshop_GetSubscribedItems");
static_assert(offsetof(WorkshopLibrary_Workshop_GetSubscribedItems, MaxNumItemsToReturn) == 0x000000, "Member 'WorkshopLibrary_Workshop_GetSubscribedItems::MaxNumItemsToReturn' has a wrong offset!");
static_assert(offsetof(WorkshopLibrary_Workshop_GetSubscribedItems, OutItems) == 0x000008, "Member 'WorkshopLibrary_Workshop_GetSubscribedItems::OutItems' has a wrong offset!");

}

