#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlaceableActor

#include "Basic.hpp"

#include "E_PropCategory_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "EHighlightChannel_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlaceableActor.BP_PlaceableActor_C
// 0x0090 (0x0320 - 0x0290)
class ABP_PlaceableActor_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FText                                   Name_0;                                            // 0x02A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   Description;                                       // 0x02B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Placable;                                          // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPreview;                                         // 0x02C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_2C2[0x6];                                      // 0x02C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           SelectingPlayerState;                              // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          SelectedForEditing;                                // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHighlighted;                                     // 0x02D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D2[0x6];                                      // 0x02D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Icon;                                              // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        IconRotation;                                      // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_PropCategory                                PropCategory;                                      // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E9[0x7];                                      // 0x02E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                IconOffset;                                        // 0x02F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Zoom;                                              // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxSize;                                           // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RenderIcon;                                        // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UpdateIcon;                                        // 0x0319(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsScalable;                                        // 0x031A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void SelectForEditing(class APlayerState* EditingPlayerState);
	void UnselectFromEditing();
	void UserConstructionScript();
	void RefreshHighlight(bool* Highlightable);
	void SetHighlight(bool Highlighted, bool* ForcedBoolean);
	void SetHighlightChannelImplementation(EHighlightChannel Channel);
	void SetHighlightChannel(EHighlightChannel Channel);
	void ExecuteUbergraph_BP_PlaceableActor(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlaceableActor_C">();
	}
	static class ABP_PlaceableActor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PlaceableActor_C>();
	}
};
static_assert(alignof(ABP_PlaceableActor_C) == 0x000008, "Wrong alignment on ABP_PlaceableActor_C");
static_assert(sizeof(ABP_PlaceableActor_C) == 0x000320, "Wrong size on ABP_PlaceableActor_C");
static_assert(offsetof(ABP_PlaceableActor_C, UberGraphFrame) == 0x000290, "Member 'ABP_PlaceableActor_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_PlaceableActor_C, DefaultSceneRoot) == 0x000298, "Member 'ABP_PlaceableActor_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_PlaceableActor_C, Name_0) == 0x0002A0, "Member 'ABP_PlaceableActor_C::Name_0' has a wrong offset!");
static_assert(offsetof(ABP_PlaceableActor_C, Description) == 0x0002B0, "Member 'ABP_PlaceableActor_C::Description' has a wrong offset!");
static_assert(offsetof(ABP_PlaceableActor_C, Placable) == 0x0002C0, "Member 'ABP_PlaceableActor_C::Placable' has a wrong offset!");
static_assert(offsetof(ABP_PlaceableActor_C, IsPreview) == 0x0002C1, "Member 'ABP_PlaceableActor_C::IsPreview' has a wrong offset!");
static_assert(offsetof(ABP_PlaceableActor_C, SelectingPlayerState) == 0x0002C8, "Member 'ABP_PlaceableActor_C::SelectingPlayerState' has a wrong offset!");
static_assert(offsetof(ABP_PlaceableActor_C, SelectedForEditing) == 0x0002D0, "Member 'ABP_PlaceableActor_C::SelectedForEditing' has a wrong offset!");
static_assert(offsetof(ABP_PlaceableActor_C, IsHighlighted) == 0x0002D1, "Member 'ABP_PlaceableActor_C::IsHighlighted' has a wrong offset!");
static_assert(offsetof(ABP_PlaceableActor_C, Icon) == 0x0002D8, "Member 'ABP_PlaceableActor_C::Icon' has a wrong offset!");
static_assert(offsetof(ABP_PlaceableActor_C, IconRotation) == 0x0002E0, "Member 'ABP_PlaceableActor_C::IconRotation' has a wrong offset!");
static_assert(offsetof(ABP_PlaceableActor_C, PropCategory) == 0x0002E8, "Member 'ABP_PlaceableActor_C::PropCategory' has a wrong offset!");
static_assert(offsetof(ABP_PlaceableActor_C, IconOffset) == 0x0002F0, "Member 'ABP_PlaceableActor_C::IconOffset' has a wrong offset!");
static_assert(offsetof(ABP_PlaceableActor_C, Zoom) == 0x000308, "Member 'ABP_PlaceableActor_C::Zoom' has a wrong offset!");
static_assert(offsetof(ABP_PlaceableActor_C, MaxSize) == 0x000310, "Member 'ABP_PlaceableActor_C::MaxSize' has a wrong offset!");
static_assert(offsetof(ABP_PlaceableActor_C, RenderIcon) == 0x000318, "Member 'ABP_PlaceableActor_C::RenderIcon' has a wrong offset!");
static_assert(offsetof(ABP_PlaceableActor_C, UpdateIcon) == 0x000319, "Member 'ABP_PlaceableActor_C::UpdateIcon' has a wrong offset!");
static_assert(offsetof(ABP_PlaceableActor_C, IsScalable) == 0x00031A, "Member 'ABP_PlaceableActor_C::IsScalable' has a wrong offset!");

}

