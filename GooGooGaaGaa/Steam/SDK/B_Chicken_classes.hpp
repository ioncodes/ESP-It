#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_Chicken

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_Chicken.B_Chicken_C
// 0x00E8 (0x0378 - 0x0290)
class AB_Chicken_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNiagaraComponent*                      NS_ChickenAlarm;                                   // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_FeatherTrail;                                   // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   VisualSphere;                                      // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SK_SantaHut;                                       // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        IdleAudio;                                         // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        ArlamAudio;                                        // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Chicken;                                           // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Capsule;                                           // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         SonarScale_Opacity_8B4380034962B088C4663FA768FB4097; // 0x02E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SonarScale_Scale_8B4380034962B088C4663FA768FB4097; // 0x02E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            SonarScale__Direction_8B4380034962B088C4663FA768FB4097; // 0x02E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E9[0x7];                                      // 0x02E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     SonarScale;                                        // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OverlappedWitchesCount;                            // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FC[0x4];                                      // 0x02FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               SonarMat;                                          // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class AController*>                    RevealedWitchControllers;                          // 0x0308(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          TeleportOnCooldown;                                // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_319[0x7];                                      // 0x0319(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CurrentLifeTime;                                   // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TimerIncrement;                                    // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PitchMultiplier;                                   // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InitialSpeed;                                      // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        OriginalScale;                                     // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        OriginalDetectionScale;                            // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OutOfPool;                                         // 0x0350(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_351[0x7];                                      // 0x0351(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DefaultCenterOfMassOffset;                         // 0x0358(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnalbeSantaHat;                                    // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CanTeleport(bool* CanTeleport_0);
	void GetRippleEffect(class UNiagaraSystem** RippleEffectNiagara);
	void GetSplashEffect(class UNiagaraSystem** SplashEffectNiagara);
	void GetRippleScale(struct FVector* Scale);
	void GetSplashScale(struct FVector* Scale);
	void GetSplashSound(class USoundCue** Sound);
	double GetPitch();
	double GetCheckRadius();
	double GetScale();
	void SetSizeRadiusAndPitch();
	void UpdateVelocity();
	void TearDown();
	void TearUp(const struct FTransform& SpawnTransform, class AActor* Owner_0, class APawn* Instigator_0);
	void IncrementLifeTime();
	void RemoveWitch();
	void AddWitch();
	void IsActorEvil(class AActor* Actor, bool* IsEvil);
	void UserConstructionScript();
	void SonarScale__FinishedFunc();
	void SonarScale__UpdateFunc();
	void PostProccedTeleport();
	void ReceiveBeginPlay();
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void ProceedTeleport();
	void BndEvt__Capsule_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void TearDownPoolObject();
	void TearDownMulti();
	void TearUpPoolObject(const struct FTransform& SpawnTransform, class AActor* Owner_0, class APawn* Instigator_0);
	void TearUpMulti(const struct FTransform& SpawnTransform, class AActor* Owner_0, class APawn* Instigator_0);
	void PlayDestroyEffectsMulti();
	void ExecuteUbergraph_B_Chicken(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_Chicken_C">();
	}
	static class AB_Chicken_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_Chicken_C>();
	}
};
static_assert(alignof(AB_Chicken_C) == 0x000008, "Wrong alignment on AB_Chicken_C");
static_assert(sizeof(AB_Chicken_C) == 0x000378, "Wrong size on AB_Chicken_C");
static_assert(offsetof(AB_Chicken_C, UberGraphFrame) == 0x000290, "Member 'AB_Chicken_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AB_Chicken_C, NS_ChickenAlarm) == 0x000298, "Member 'AB_Chicken_C::NS_ChickenAlarm' has a wrong offset!");
static_assert(offsetof(AB_Chicken_C, NS_FeatherTrail) == 0x0002A0, "Member 'AB_Chicken_C::NS_FeatherTrail' has a wrong offset!");
static_assert(offsetof(AB_Chicken_C, VisualSphere) == 0x0002A8, "Member 'AB_Chicken_C::VisualSphere' has a wrong offset!");
static_assert(offsetof(AB_Chicken_C, SK_SantaHut) == 0x0002B0, "Member 'AB_Chicken_C::SK_SantaHut' has a wrong offset!");
static_assert(offsetof(AB_Chicken_C, IdleAudio) == 0x0002B8, "Member 'AB_Chicken_C::IdleAudio' has a wrong offset!");
static_assert(offsetof(AB_Chicken_C, Sphere) == 0x0002C0, "Member 'AB_Chicken_C::Sphere' has a wrong offset!");
static_assert(offsetof(AB_Chicken_C, ArlamAudio) == 0x0002C8, "Member 'AB_Chicken_C::ArlamAudio' has a wrong offset!");
static_assert(offsetof(AB_Chicken_C, Chicken) == 0x0002D0, "Member 'AB_Chicken_C::Chicken' has a wrong offset!");
static_assert(offsetof(AB_Chicken_C, Capsule) == 0x0002D8, "Member 'AB_Chicken_C::Capsule' has a wrong offset!");
static_assert(offsetof(AB_Chicken_C, SonarScale_Opacity_8B4380034962B088C4663FA768FB4097) == 0x0002E0, "Member 'AB_Chicken_C::SonarScale_Opacity_8B4380034962B088C4663FA768FB4097' has a wrong offset!");
static_assert(offsetof(AB_Chicken_C, SonarScale_Scale_8B4380034962B088C4663FA768FB4097) == 0x0002E4, "Member 'AB_Chicken_C::SonarScale_Scale_8B4380034962B088C4663FA768FB4097' has a wrong offset!");
static_assert(offsetof(AB_Chicken_C, SonarScale__Direction_8B4380034962B088C4663FA768FB4097) == 0x0002E8, "Member 'AB_Chicken_C::SonarScale__Direction_8B4380034962B088C4663FA768FB4097' has a wrong offset!");
static_assert(offsetof(AB_Chicken_C, SonarScale) == 0x0002F0, "Member 'AB_Chicken_C::SonarScale' has a wrong offset!");
static_assert(offsetof(AB_Chicken_C, OverlappedWitchesCount) == 0x0002F8, "Member 'AB_Chicken_C::OverlappedWitchesCount' has a wrong offset!");
static_assert(offsetof(AB_Chicken_C, SonarMat) == 0x000300, "Member 'AB_Chicken_C::SonarMat' has a wrong offset!");
static_assert(offsetof(AB_Chicken_C, RevealedWitchControllers) == 0x000308, "Member 'AB_Chicken_C::RevealedWitchControllers' has a wrong offset!");
static_assert(offsetof(AB_Chicken_C, TeleportOnCooldown) == 0x000318, "Member 'AB_Chicken_C::TeleportOnCooldown' has a wrong offset!");
static_assert(offsetof(AB_Chicken_C, CurrentLifeTime) == 0x000320, "Member 'AB_Chicken_C::CurrentLifeTime' has a wrong offset!");
static_assert(offsetof(AB_Chicken_C, TimerIncrement) == 0x000328, "Member 'AB_Chicken_C::TimerIncrement' has a wrong offset!");
static_assert(offsetof(AB_Chicken_C, PitchMultiplier) == 0x000330, "Member 'AB_Chicken_C::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(AB_Chicken_C, InitialSpeed) == 0x000338, "Member 'AB_Chicken_C::InitialSpeed' has a wrong offset!");
static_assert(offsetof(AB_Chicken_C, OriginalScale) == 0x000340, "Member 'AB_Chicken_C::OriginalScale' has a wrong offset!");
static_assert(offsetof(AB_Chicken_C, OriginalDetectionScale) == 0x000348, "Member 'AB_Chicken_C::OriginalDetectionScale' has a wrong offset!");
static_assert(offsetof(AB_Chicken_C, OutOfPool) == 0x000350, "Member 'AB_Chicken_C::OutOfPool' has a wrong offset!");
static_assert(offsetof(AB_Chicken_C, DefaultCenterOfMassOffset) == 0x000358, "Member 'AB_Chicken_C::DefaultCenterOfMassOffset' has a wrong offset!");
static_assert(offsetof(AB_Chicken_C, EnalbeSantaHat) == 0x000370, "Member 'AB_Chicken_C::EnalbeSantaHat' has a wrong offset!");

}

