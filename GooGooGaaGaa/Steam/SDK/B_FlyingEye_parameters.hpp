#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_FlyingEye

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function B_FlyingEye.B_FlyingEye_C.BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x0118 (0x0118 - 0x0000)
struct B_FlyingEye_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(B_FlyingEye_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on B_FlyingEye_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(B_FlyingEye_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000118, "Wrong size on B_FlyingEye_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(B_FlyingEye_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'B_FlyingEye_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'B_FlyingEye_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'B_FlyingEye_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'B_FlyingEye_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'B_FlyingEye_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'B_FlyingEye_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function B_FlyingEye.B_FlyingEye_C.DestroyEye
// 0x0028 (0x0028 - 0x0000)
struct B_FlyingEye_C_DestroyEye final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_Witch_C*                             K2Node_DynamicCast_AsB_Witch;                      // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PropPawnPhysics_C*                   K2Node_DynamicCast_AsB_Prop_Pawn_Physics;          // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_FlyingEye_C_DestroyEye) == 0x000008, "Wrong alignment on B_FlyingEye_C_DestroyEye");
static_assert(sizeof(B_FlyingEye_C_DestroyEye) == 0x000028, "Wrong size on B_FlyingEye_C_DestroyEye");
static_assert(offsetof(B_FlyingEye_C_DestroyEye, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'B_FlyingEye_C_DestroyEye::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_DestroyEye, K2Node_DynamicCast_AsB_Witch) == 0x000008, "Member 'B_FlyingEye_C_DestroyEye::K2Node_DynamicCast_AsB_Witch' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_DestroyEye, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'B_FlyingEye_C_DestroyEye::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_DestroyEye, K2Node_DynamicCast_AsB_Prop_Pawn_Physics) == 0x000018, "Member 'B_FlyingEye_C_DestroyEye::K2Node_DynamicCast_AsB_Prop_Pawn_Physics' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_DestroyEye, K2Node_DynamicCast_bSuccess_1) == 0x000020, "Member 'B_FlyingEye_C_DestroyEye::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_DestroyEye, CallFunc_IsValid_ReturnValue_1) == 0x000021, "Member 'B_FlyingEye_C_DestroyEye::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function B_FlyingEye.B_FlyingEye_C.ExecuteUbergraph_B_FlyingEye
// 0x02E8 (0x02E8 - 0x0000)
struct B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_SkillParametersSubsystem_C*          CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AActor* DestroyedActor)> K2Node_CreateDelegate_OutputDelegate;              // 0x0030(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AController*                            CallFunc_GetInstigatorController_ReturnValue;      // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetControlRotation_ReturnValue;           // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_1;               // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_VectorVector_ReturnValue;        // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B[0x1];                                       // 0x006B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class AActor* DamagedActor, float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x006C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetInstigatorController_ReturnValue_1;    // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_DamagedActor;                   // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Damage;                         // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UDamageType*                      K2Node_CustomEvent_DamageType;                     // 0x00A0(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AController*                            K2Node_CustomEvent_InstigatedBy;                   // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_DamageCauser;                   // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_Damage;                               // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UDamageType*                      K2Node_Event_DamageType;                           // 0x00C0(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AController*                            K2Node_Event_InstigatedBy;                         // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_DamageCauser;                         // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_2;               // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_DestroyedActor;                 // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PropPawnPhysics_C*                   K2Node_DynamicCast_AsB_Prop_Pawn_Physics;          // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue_1;      // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F3[0x5];                                       // 0x00F3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetInstigatorController_ReturnValue_2;    // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AController*                            CallFunc_GetInstigatorController_ReturnValue_3;    // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocalPlayerController_ReturnValue;      // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x010A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10B[0x5];                                      // 0x010B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetInstigatorController_ReturnValue_4;    // 0x0110(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      K2Node_DynamicCast_AsPlayer_Controller;            // 0x0118(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetInstigatorController_ReturnValue_5;    // 0x0128(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetInstigatorController_ReturnValue_6;    // 0x0138(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AController*                            CallFunc_GetInstigatorController_ReturnValue_7;    // 0x0140(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      K2Node_DynamicCast_AsPlayer_Controller_1;          // 0x0150(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue_1;                 // 0x0160(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AController*                            CallFunc_GetInstigatorController_ReturnValue_8;    // 0x0168(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0170(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetInstigatorController_ReturnValue_9;    // 0x0180(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State_1;             // 0x0188(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_191[0x7];                                      // 0x0191(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0198(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x01A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x01A8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x01B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B5[0x3];                                      // 0x01B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x01B8(0x00F8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x02B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ClassClass_ReturnValue;        // 0x02B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ClassClass_ReturnValue_1;      // 0x02B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue;               // 0x02BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BB[0x5];                                      // 0x02BB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x02C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x02D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x02D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DA[0x6];                                      // 0x02DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      CallFunc_SpawnSystemAtLocation_ReturnValue;        // 0x02E0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye) == 0x000008, "Wrong alignment on B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye");
static_assert(sizeof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye) == 0x0002E8, "Wrong size on B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, EntryPoint) == 0x000000, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::EntryPoint' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000008, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, CallFunc_HasAuthority_ReturnValue) == 0x000010, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000018, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, K2Node_CreateDelegate_OutputDelegate) == 0x000030, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, CallFunc_GetInstigatorController_ReturnValue) == 0x000040, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::CallFunc_GetInstigatorController_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, K2Node_Event_DeltaSeconds) == 0x000048, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, CallFunc_IsValid_ReturnValue) == 0x00004C, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, CallFunc_GetControlRotation_ReturnValue) == 0x000050, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::CallFunc_GetControlRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, CallFunc_K2_SetActorRotation_ReturnValue) == 0x000068, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, CallFunc_HasAuthority_ReturnValue_1) == 0x000069, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::CallFunc_HasAuthority_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, CallFunc_NotEqual_VectorVector_ReturnValue) == 0x00006A, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::CallFunc_NotEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, K2Node_CreateDelegate_OutputDelegate_1) == 0x00006C, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, CallFunc_GetInstigatorController_ReturnValue_1) == 0x000080, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::CallFunc_GetInstigatorController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, CallFunc_K2_GetPawn_ReturnValue) == 0x000088, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, K2Node_CustomEvent_DamagedActor) == 0x000090, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::K2Node_CustomEvent_DamagedActor' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, K2Node_CustomEvent_Damage) == 0x000098, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::K2Node_CustomEvent_Damage' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, K2Node_CustomEvent_DamageType) == 0x0000A0, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::K2Node_CustomEvent_DamageType' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, K2Node_CustomEvent_InstigatedBy) == 0x0000A8, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::K2Node_CustomEvent_InstigatedBy' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, K2Node_CustomEvent_DamageCauser) == 0x0000B0, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::K2Node_CustomEvent_DamageCauser' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x0000B8, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, K2Node_Event_Damage) == 0x0000BC, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::K2Node_Event_Damage' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, K2Node_Event_DamageType) == 0x0000C0, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::K2Node_Event_DamageType' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, K2Node_Event_InstigatedBy) == 0x0000C8, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::K2Node_Event_InstigatedBy' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, K2Node_Event_DamageCauser) == 0x0000D0, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::K2Node_Event_DamageCauser' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, CallFunc_HasAuthority_ReturnValue_2) == 0x0000D8, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::CallFunc_HasAuthority_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, K2Node_CustomEvent_DestroyedActor) == 0x0000E0, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::K2Node_CustomEvent_DestroyedActor' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, K2Node_DynamicCast_AsB_Prop_Pawn_Physics) == 0x0000E8, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::K2Node_DynamicCast_AsB_Prop_Pawn_Physics' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, K2Node_DynamicCast_bSuccess) == 0x0000F0, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, CallFunc_NotEqual_ObjectObject_ReturnValue_1) == 0x0000F1, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::CallFunc_NotEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, CallFunc_IsValid_ReturnValue_1) == 0x0000F2, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, CallFunc_GetInstigatorController_ReturnValue_2) == 0x0000F8, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::CallFunc_GetInstigatorController_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, CallFunc_GetInstigatorController_ReturnValue_3) == 0x000100, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::CallFunc_GetInstigatorController_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, CallFunc_IsValid_ReturnValue_2) == 0x000108, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, CallFunc_IsLocalPlayerController_ReturnValue) == 0x000109, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::CallFunc_IsLocalPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, CallFunc_BooleanAND_ReturnValue) == 0x00010A, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, CallFunc_GetInstigatorController_ReturnValue_4) == 0x000110, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::CallFunc_GetInstigatorController_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, K2Node_DynamicCast_AsPlayer_Controller) == 0x000118, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::K2Node_DynamicCast_AsPlayer_Controller' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, K2Node_DynamicCast_bSuccess_1) == 0x000120, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, CallFunc_GetInstigatorController_ReturnValue_5) == 0x000128, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::CallFunc_GetInstigatorController_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, CallFunc_IsValid_ReturnValue_3) == 0x000130, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, CallFunc_GetInstigatorController_ReturnValue_6) == 0x000138, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::CallFunc_GetInstigatorController_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, CallFunc_GetInstigatorController_ReturnValue_7) == 0x000140, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::CallFunc_GetInstigatorController_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, CallFunc_IsValid_ReturnValue_4) == 0x000148, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, K2Node_DynamicCast_AsPlayer_Controller_1) == 0x000150, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::K2Node_DynamicCast_AsPlayer_Controller_1' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, K2Node_DynamicCast_bSuccess_2) == 0x000158, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, CallFunc_K2_GetPawn_ReturnValue_1) == 0x000160, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::CallFunc_K2_GetPawn_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, CallFunc_GetInstigatorController_ReturnValue_8) == 0x000168, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::CallFunc_GetInstigatorController_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, K2Node_DynamicCast_AsB_Player_State) == 0x000170, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, K2Node_DynamicCast_bSuccess_3) == 0x000178, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, CallFunc_GetInstigatorController_ReturnValue_9) == 0x000180, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::CallFunc_GetInstigatorController_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, K2Node_DynamicCast_AsB_Player_State_1) == 0x000188, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::K2Node_DynamicCast_AsB_Player_State_1' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, K2Node_DynamicCast_bSuccess_4) == 0x000190, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000198, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, K2Node_ComponentBoundEvent_OtherActor) == 0x0001A0, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, K2Node_ComponentBoundEvent_OtherComp) == 0x0001A8, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x0001B0, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, K2Node_ComponentBoundEvent_bFromSweep) == 0x0001B4, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, K2Node_ComponentBoundEvent_SweepResult) == 0x0001B8, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, CallFunc_GetObjectClass_ReturnValue) == 0x0002B0, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, CallFunc_EqualEqual_ClassClass_ReturnValue) == 0x0002B8, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::CallFunc_EqualEqual_ClassClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, CallFunc_EqualEqual_ClassClass_ReturnValue_1) == 0x0002B9, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::CallFunc_EqualEqual_ClassClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, CallFunc_ClassIsChildOf_ReturnValue) == 0x0002BA, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::CallFunc_ClassIsChildOf_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0002C0, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, CallFunc_BooleanOR_ReturnValue) == 0x0002D8, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, CallFunc_BooleanOR_ReturnValue_1) == 0x0002D9, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye, CallFunc_SpawnSystemAtLocation_ReturnValue) == 0x0002E0, "Member 'B_FlyingEye_C_ExecuteUbergraph_B_FlyingEye::CallFunc_SpawnSystemAtLocation_ReturnValue' has a wrong offset!");

// Function B_FlyingEye.B_FlyingEye_C.InitializeRules
// 0x0018 (0x0018 - 0x0000)
struct B_FlyingEye_C_InitializeRules final
{
public:
	class UB_SkillParametersSubsystem_C*          CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_MaxSpeed_ImplicitCast;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_Deceleration_ImplicitCast;      // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_Acceleration_ImplicitCast;      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_FlyingEye_C_InitializeRules) == 0x000008, "Wrong alignment on B_FlyingEye_C_InitializeRules");
static_assert(sizeof(B_FlyingEye_C_InitializeRules) == 0x000018, "Wrong size on B_FlyingEye_C_InitializeRules");
static_assert(offsetof(B_FlyingEye_C_InitializeRules, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000000, "Member 'B_FlyingEye_C_InitializeRules::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_InitializeRules, K2Node_VariableSet_MaxSpeed_ImplicitCast) == 0x000008, "Member 'B_FlyingEye_C_InitializeRules::K2Node_VariableSet_MaxSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_InitializeRules, K2Node_VariableSet_Deceleration_ImplicitCast) == 0x00000C, "Member 'B_FlyingEye_C_InitializeRules::K2Node_VariableSet_Deceleration_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_InitializeRules, K2Node_VariableSet_Acceleration_ImplicitCast) == 0x000010, "Member 'B_FlyingEye_C_InitializeRules::K2Node_VariableSet_Acceleration_ImplicitCast' has a wrong offset!");

// Function B_FlyingEye.B_FlyingEye_C.OnOwnerDestroyed
// 0x0008 (0x0008 - 0x0000)
struct B_FlyingEye_C_OnOwnerDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_FlyingEye_C_OnOwnerDestroyed) == 0x000008, "Wrong alignment on B_FlyingEye_C_OnOwnerDestroyed");
static_assert(sizeof(B_FlyingEye_C_OnOwnerDestroyed) == 0x000008, "Wrong size on B_FlyingEye_C_OnOwnerDestroyed");
static_assert(offsetof(B_FlyingEye_C_OnOwnerDestroyed, DestroyedActor) == 0x000000, "Member 'B_FlyingEye_C_OnOwnerDestroyed::DestroyedActor' has a wrong offset!");

// Function B_FlyingEye.B_FlyingEye_C.OnOwnerTakeAnyDamageEvent
// 0x0028 (0x0028 - 0x0000)
struct B_FlyingEye_C_OnOwnerTakeAnyDamageEvent final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UDamageType*                      DamageType;                                        // 0x0010(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AController*                            InstigatedBy;                                      // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 DamageCauser;                                      // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_FlyingEye_C_OnOwnerTakeAnyDamageEvent) == 0x000008, "Wrong alignment on B_FlyingEye_C_OnOwnerTakeAnyDamageEvent");
static_assert(sizeof(B_FlyingEye_C_OnOwnerTakeAnyDamageEvent) == 0x000028, "Wrong size on B_FlyingEye_C_OnOwnerTakeAnyDamageEvent");
static_assert(offsetof(B_FlyingEye_C_OnOwnerTakeAnyDamageEvent, DamagedActor) == 0x000000, "Member 'B_FlyingEye_C_OnOwnerTakeAnyDamageEvent::DamagedActor' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_OnOwnerTakeAnyDamageEvent, Damage) == 0x000008, "Member 'B_FlyingEye_C_OnOwnerTakeAnyDamageEvent::Damage' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_OnOwnerTakeAnyDamageEvent, DamageType) == 0x000010, "Member 'B_FlyingEye_C_OnOwnerTakeAnyDamageEvent::DamageType' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_OnOwnerTakeAnyDamageEvent, InstigatedBy) == 0x000018, "Member 'B_FlyingEye_C_OnOwnerTakeAnyDamageEvent::InstigatedBy' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_OnOwnerTakeAnyDamageEvent, DamageCauser) == 0x000020, "Member 'B_FlyingEye_C_OnOwnerTakeAnyDamageEvent::DamageCauser' has a wrong offset!");

// Function B_FlyingEye.B_FlyingEye_C.ReceiveAnyDamage
// 0x0020 (0x0020 - 0x0000)
struct B_FlyingEye_C_ReceiveAnyDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UDamageType*                      DamageType;                                        // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_FlyingEye_C_ReceiveAnyDamage) == 0x000008, "Wrong alignment on B_FlyingEye_C_ReceiveAnyDamage");
static_assert(sizeof(B_FlyingEye_C_ReceiveAnyDamage) == 0x000020, "Wrong size on B_FlyingEye_C_ReceiveAnyDamage");
static_assert(offsetof(B_FlyingEye_C_ReceiveAnyDamage, Damage) == 0x000000, "Member 'B_FlyingEye_C_ReceiveAnyDamage::Damage' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ReceiveAnyDamage, DamageType) == 0x000008, "Member 'B_FlyingEye_C_ReceiveAnyDamage::DamageType' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ReceiveAnyDamage, InstigatedBy) == 0x000010, "Member 'B_FlyingEye_C_ReceiveAnyDamage::InstigatedBy' has a wrong offset!");
static_assert(offsetof(B_FlyingEye_C_ReceiveAnyDamage, DamageCauser) == 0x000018, "Member 'B_FlyingEye_C_ReceiveAnyDamage::DamageCauser' has a wrong offset!");

// Function B_FlyingEye.B_FlyingEye_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct B_FlyingEye_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_FlyingEye_C_ReceiveTick) == 0x000004, "Wrong alignment on B_FlyingEye_C_ReceiveTick");
static_assert(sizeof(B_FlyingEye_C_ReceiveTick) == 0x000004, "Wrong size on B_FlyingEye_C_ReceiveTick");
static_assert(offsetof(B_FlyingEye_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'B_FlyingEye_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

}

