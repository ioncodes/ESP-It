#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_PlayerState

#include "Basic.hpp"

#include "B_PlayerState_classes.hpp"
#include "B_PlayerState_parameters.hpp"


namespace SDK
{

// Function B_PlayerState.B_PlayerState_C.GetHunterMovementSkill
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)

class UClass* AB_PlayerState_C::GetHunterMovementSkill()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "GetHunterMovementSkill");

	Params::B_PlayerState_C_GetHunterMovementSkill Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_PlayerState.B_PlayerState_C.GetHunterUtilitySkill
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)

class UClass* AB_PlayerState_C::GetHunterUtilitySkill()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "GetHunterUtilitySkill");

	Params::B_PlayerState_C_GetHunterUtilitySkill Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_PlayerState.B_PlayerState_C.GetWitchMovementSkill
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)

class UClass* AB_PlayerState_C::GetWitchMovementSkill()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "GetWitchMovementSkill");

	Params::B_PlayerState_C_GetWitchMovementSkill Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_PlayerState.B_PlayerState_C.GetWitchUtilitySkill
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)

class UClass* AB_PlayerState_C::GetWitchUtilitySkill()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "GetWitchUtilitySkill");

	Params::B_PlayerState_C_GetWitchUtilitySkill Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_PlayerState.B_PlayerState_C.SetHunterMovementSkill
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Skill                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_PlayerState_C::SetHunterMovementSkill(class UClass* Skill)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "SetHunterMovementSkill");

	Params::B_PlayerState_C_SetHunterMovementSkill Parms{};

	Parms.Skill = Skill;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerState.B_PlayerState_C.SetHunterUtilitySkill
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Skill                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_PlayerState_C::SetHunterUtilitySkill(class UClass* Skill)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "SetHunterUtilitySkill");

	Params::B_PlayerState_C_SetHunterUtilitySkill Parms{};

	Parms.Skill = Skill;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerState.B_PlayerState_C.SetWitchMovementSkill
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Skill                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_PlayerState_C::SetWitchMovementSkill(class UClass* Skill)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "SetWitchMovementSkill");

	Params::B_PlayerState_C_SetWitchMovementSkill Parms{};

	Parms.Skill = Skill;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerState.B_PlayerState_C.SetWitchUtilitySkill
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Skill                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_PlayerState_C::SetWitchUtilitySkill(class UClass* Skill)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "SetWitchUtilitySkill");

	Params::B_PlayerState_C_SetWitchUtilitySkill Parms{};

	Parms.Skill = Skill;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerState.B_PlayerState_C.OnRep_PlayerIconAssetId
// (HasDefaults, BlueprintCallable, BlueprintEvent)

void AB_PlayerState_C::OnRep_PlayerIconAssetId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "OnRep_PlayerIconAssetId");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerState.B_PlayerState_C.HandleGrantedExtraItems
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FSGrantedItem>            GrantedItems                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AB_PlayerState_C::HandleGrantedExtraItems(TArray<struct FSGrantedItem>& GrantedItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "HandleGrantedExtraItems");

	Params::B_PlayerState_C_HandleGrantedExtraItems Parms{};

	Parms.GrantedItems = std::move(GrantedItems);

	UObject::ProcessEvent(Func, &Parms);

	GrantedItems = std::move(Parms.GrantedItems);
}


// Function B_PlayerState.B_PlayerState_C.IsLocalReady
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsLocalReady_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerState_C::IsLocalReady(bool* IsLocalReady_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "IsLocalReady");

	Params::B_PlayerState_C_IsLocalReady Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsLocalReady_0 != nullptr)
		*IsLocalReady_0 = Parms.IsLocalReady_0;
}


// Function B_PlayerState.B_PlayerState_C.HandleIsReady
// (Public, BlueprintCallable, BlueprintEvent)

void AB_PlayerState_C::HandleIsReady()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "HandleIsReady");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerState.B_PlayerState_C.IsObjectiveGameMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool AB_PlayerState_C::IsObjectiveGameMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "IsObjectiveGameMode");

	Params::B_PlayerState_C_IsObjectiveGameMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_PlayerState.B_PlayerState_C.GetSelectedSkillForTeam
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// ETeamID                                 Team_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ESkillCategory                          SkillCategory                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           Skill                                                  (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_PlayerState_C::GetSelectedSkillForTeam(ETeamID Team_0, ESkillCategory SkillCategory, class UClass** Skill)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "GetSelectedSkillForTeam");

	Params::B_PlayerState_C_GetSelectedSkillForTeam Parms{};

	Parms.Team_0 = Team_0;
	Parms.SkillCategory = SkillCategory;

	UObject::ProcessEvent(Func, &Parms);

	if (Skill != nullptr)
		*Skill = Parms.Skill;
}


// Function B_PlayerState.B_PlayerState_C.HandleGrantXP
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   TotalXP_0                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TimeXP                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   WinBonusXP_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CatchXP_0                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   LastWitchXP_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerState_C::HandleGrantXP(int32 TotalXP_0, int32 TimeXP, int32 WinBonusXP_0, int32 CatchXP_0, int32 LastWitchXP_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "HandleGrantXP");

	Params::B_PlayerState_C_HandleGrantXP Parms{};

	Parms.TotalXP_0 = TotalXP_0;
	Parms.TimeXP = TimeXP;
	Parms.WinBonusXP_0 = WinBonusXP_0;
	Parms.CatchXP_0 = CatchXP_0;
	Parms.LastWitchXP_0 = LastWitchXP_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerState.B_PlayerState_C.GetFirstActiveBuff
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UClass*                           Buff                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AB_Buff_C*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)

class AB_Buff_C* AB_PlayerState_C::GetFirstActiveBuff(class UClass* Buff)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "GetFirstActiveBuff");

	Params::B_PlayerState_C_GetFirstActiveBuff Parms{};

	Parms.Buff = Buff;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_PlayerState.B_PlayerState_C.IsBuffAlreadyActive
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UClass*                           Buff                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool AB_PlayerState_C::IsBuffAlreadyActive(class UClass* Buff)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "IsBuffAlreadyActive");

	Params::B_PlayerState_C_IsBuffAlreadyActive Parms{};

	Parms.Buff = Buff;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_PlayerState.B_PlayerState_C.HandleGrantedCauldronItems
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FSGrantedItem>            GrantedItems                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AB_PlayerState_C::HandleGrantedCauldronItems(TArray<struct FSGrantedItem>& GrantedItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "HandleGrantedCauldronItems");

	Params::B_PlayerState_C_HandleGrantedCauldronItems Parms{};

	Parms.GrantedItems = std::move(GrantedItems);

	UObject::ProcessEvent(Func, &Parms);

	GrantedItems = std::move(Parms.GrantedItems);
}


// Function B_PlayerState.B_PlayerState_C.StartSavingServerStats
// (Public, BlueprintCallable, BlueprintEvent)

void AB_PlayerState_C::StartSavingServerStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "StartSavingServerStats");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerState.B_PlayerState_C.StartLoadingServerStats
// (Public, BlueprintCallable, BlueprintEvent)

void AB_PlayerState_C::StartLoadingServerStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "StartLoadingServerStats");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerState.B_PlayerState_C.CheckServerStatsSaved
// (Public, BlueprintCallable, BlueprintEvent)

void AB_PlayerState_C::CheckServerStatsSaved()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "CheckServerStatsSaved");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerState.B_PlayerState_C.Check Server Stats Initialization
// (Public, BlueprintCallable, BlueprintEvent)

void AB_PlayerState_C::Check_Server_Stats_Initialization()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "Check Server Stats Initialization");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerState.B_PlayerState_C.ProceedIdleKick
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AB_PlayerState_C::ProceedIdleKick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "ProceedIdleKick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerState.B_PlayerState_C.OnRep_Team
// (HasDefaults, BlueprintCallable, BlueprintEvent)

void AB_PlayerState_C::OnRep_Team()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "OnRep_Team");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerState.B_PlayerState_C.ResetKickVoteState
// (Public, BlueprintCallable, BlueprintEvent)

void AB_PlayerState_C::ResetKickVoteState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "ResetKickVoteState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerState.B_PlayerState_C.StartKickVote
// (Public, BlueprintCallable, BlueprintEvent)

void AB_PlayerState_C::StartKickVote()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "StartKickVote");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerState.B_PlayerState_C.GetSelectedSkill
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// ESkillCategory                          SkillCategory                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           Skill                                                  (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_PlayerState_C::GetSelectedSkill(ESkillCategory SkillCategory, class UClass** Skill)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "GetSelectedSkill");

	Params::B_PlayerState_C_GetSelectedSkill Parms{};

	Parms.SkillCategory = SkillCategory;

	UObject::ProcessEvent(Func, &Parms);

	if (Skill != nullptr)
		*Skill = Parms.Skill;
}


// Function B_PlayerState.B_PlayerState_C.OnRep_SelectedTeam
// (BlueprintCallable, BlueprintEvent)

void AB_PlayerState_C::OnRep_SelectedTeam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "OnRep_SelectedTeam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerState.B_PlayerState_C.OnRep_IsReady
// (BlueprintCallable, BlueprintEvent)

void AB_PlayerState_C::OnRep_IsReady()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "OnRep_IsReady");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerState.B_PlayerState_C.OnMessageProcessed_703E44154BB0099B9D98CAA5EE6DF034
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bSuccess                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           SanitizedMessage                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AB_PlayerState_C::OnMessageProcessed_703E44154BB0099B9D98CAA5EE6DF034(bool bSuccess, const class FString& SanitizedMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "OnMessageProcessed_703E44154BB0099B9D98CAA5EE6DF034");

	Params::B_PlayerState_C_OnMessageProcessed_703E44154BB0099B9D98CAA5EE6DF034 Parms{};

	Parms.bSuccess = bSuccess;
	Parms.SanitizedMessage = std::move(SanitizedMessage);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerState.B_PlayerState_C.OnCallFailed_703E44154BB0099B9D98CAA5EE6DF034
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bSuccess                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           SanitizedMessage                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AB_PlayerState_C::OnCallFailed_703E44154BB0099B9D98CAA5EE6DF034(bool bSuccess, const class FString& SanitizedMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "OnCallFailed_703E44154BB0099B9D98CAA5EE6DF034");

	Params::B_PlayerState_C_OnCallFailed_703E44154BB0099B9D98CAA5EE6DF034 Parms{};

	Parms.bSuccess = bSuccess;
	Parms.SanitizedMessage = std::move(SanitizedMessage);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerState.B_PlayerState_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AB_PlayerState_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerState.B_PlayerState_C.AddPropChecked
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           DamageType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_PlayerState_C::AddPropChecked(class AActor* Actor, double Damage, class UClass* DamageType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "AddPropChecked");

	Params::B_PlayerState_C_AddPropChecked Parms{};

	Parms.Actor = Actor;
	Parms.Damage = Damage;
	Parms.DamageType = DamageType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerState.B_PlayerState_C.AddPropCheckedOwningClient
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_PlayerState_C::AddPropCheckedOwningClient(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "AddPropCheckedOwningClient");

	Params::B_PlayerState_C_AddPropCheckedOwningClient Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerState.B_PlayerState_C.GrantExp
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   TotalAmount                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TimeExp                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   WinBonusXP_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CatchXP_0                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   LastWitchXP_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerState_C::GrantExp(int32 TotalAmount, int32 TimeExp, int32 WinBonusXP_0, int32 CatchXP_0, int32 LastWitchXP_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "GrantExp");

	Params::B_PlayerState_C_GrantExp Parms{};

	Parms.TotalAmount = TotalAmount;
	Parms.TimeExp = TimeExp;
	Parms.WinBonusXP_0 = WinBonusXP_0;
	Parms.CatchXP_0 = CatchXP_0;
	Parms.LastWitchXP_0 = LastWitchXP_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerState.B_PlayerState_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerState_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "ReceiveTick");

	Params::B_PlayerState_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerState.B_PlayerState_C.ReplicateIconAndLevel
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Level                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PrestigeLevel_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FPrimaryAssetId                  SkinIcon                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FSSelectedSkills                 StandardSkills                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FSSelectedSkills                 ObjectiveSkills                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_PlayerState_C::ReplicateIconAndLevel(int32 Level, int32 PrestigeLevel_0, const struct FPrimaryAssetId& SkinIcon, const struct FSSelectedSkills& StandardSkills, const struct FSSelectedSkills& ObjectiveSkills)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "ReplicateIconAndLevel");

	Params::B_PlayerState_C_ReplicateIconAndLevel Parms{};

	Parms.Level = Level;
	Parms.PrestigeLevel_0 = PrestigeLevel_0;
	Parms.SkinIcon = std::move(SkinIcon);
	Parms.StandardSkills = std::move(StandardSkills);
	Parms.ObjectiveSkills = std::move(ObjectiveSkills);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerState.B_PlayerState_C.GrantCauldronItems
// (Net, NetReliable, HasOutParams, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FSGrantedItem>            GrantedItems                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AB_PlayerState_C::GrantCauldronItems(const TArray<struct FSGrantedItem>& GrantedItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "GrantCauldronItems");

	Params::B_PlayerState_C_GrantCauldronItems Parms{};

	Parms.GrantedItems = std::move(GrantedItems);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerState.B_PlayerState_C.GrantDropExp
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   StartAmount                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MaxAmount                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerState_C::GrantDropExp(int32 StartAmount, int32 MaxAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "GrantDropExp");

	Params::B_PlayerState_C_GrantDropExp Parms{};

	Parms.StartAmount = StartAmount;
	Parms.MaxAmount = MaxAmount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerState.B_PlayerState_C.AddBuff
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Buff                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_PlayerState_C::AddBuff(class UClass* Buff)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "AddBuff");

	Params::B_PlayerState_C_AddBuff Parms{};

	Parms.Buff = Buff;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerState.B_PlayerState_C.RemoveAllBuffs
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void AB_PlayerState_C::RemoveAllBuffs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "RemoveAllBuffs");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerState.B_PlayerState_C.GrantExtraItems
// (Net, NetReliable, HasOutParams, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FSGrantedItem>            GrantedItems                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AB_PlayerState_C::GrantExtraItems(const TArray<struct FSGrantedItem>& GrantedItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "GrantExtraItems");

	Params::B_PlayerState_C_GrantExtraItems Parms{};

	Parms.GrantedItems = std::move(GrantedItems);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerState.B_PlayerState_C.SetPlayerData
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Level                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PrestigeLevel_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           Icon                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FSSelectedSkills                 StandardSkills                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FSSelectedSkills                 ObjectiveSkills                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_PlayerState_C::SetPlayerData(int32 Level, int32 PrestigeLevel_0, class UClass* Icon, const struct FSSelectedSkills& StandardSkills, const struct FSSelectedSkills& ObjectiveSkills)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "SetPlayerData");

	Params::B_PlayerState_C_SetPlayerData Parms{};

	Parms.Level = Level;
	Parms.PrestigeLevel_0 = PrestigeLevel_0;
	Parms.Icon = Icon;
	Parms.StandardSkills = std::move(StandardSkills);
	Parms.ObjectiveSkills = std::move(ObjectiveSkills);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerState.B_PlayerState_C.SERVER_SetIsTalking
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIsTalking_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerState_C::SERVER_SetIsTalking(bool bIsTalking_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "SERVER_SetIsTalking");

	Params::B_PlayerState_C_SERVER_SetIsTalking Parms{};

	Parms.bIsTalking_0 = bIsTalking_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerState.B_PlayerState_C.SetPrestigeLevelOwningClient
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PrestigeLevel_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PrestigeExperience                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerState_C::SetPrestigeLevelOwningClient(int32 PrestigeLevel_0, int32 PrestigeExperience)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "SetPrestigeLevelOwningClient");

	Params::B_PlayerState_C_SetPrestigeLevelOwningClient Parms{};

	Parms.PrestigeLevel_0 = PrestigeLevel_0;
	Parms.PrestigeExperience = PrestigeExperience;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerState.B_PlayerState_C.RequestUserAccountId
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ProductUserId_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           AccountType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           NativePlatformId                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AB_PlayerState_C::RequestUserAccountId(const class FString& ProductUserId_0, const class FString& AccountType, const class FString& NativePlatformId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "RequestUserAccountId");

	Params::B_PlayerState_C_RequestUserAccountId Parms{};

	Parms.ProductUserId_0 = std::move(ProductUserId_0);
	Parms.AccountType = std::move(AccountType);
	Parms.NativePlatformId = std::move(NativePlatformId);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerState.B_PlayerState_C.PostOnRepPlayerName
// (Event, Public, BlueprintEvent)
// Parameters:
// class FString                           NewPlayerName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AB_PlayerState_C::PostOnRepPlayerName(const class FString& NewPlayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "PostOnRepPlayerName");

	Params::B_PlayerState_C_PostOnRepPlayerName Parms{};

	Parms.NewPlayerName = std::move(NewPlayerName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerState.B_PlayerState_C.OnPropChecked__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AB_PlayerState_C*                 Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Prop                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           DamageType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_PlayerState_C::OnPropChecked__DelegateSignature(class AB_PlayerState_C* Player, class AActor* Prop, double Damage, class UClass* DamageType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "OnPropChecked__DelegateSignature");

	Params::B_PlayerState_C_OnPropChecked__DelegateSignature Parms{};

	Parms.Player = Player;
	Parms.Prop = Prop;
	Parms.Damage = Damage;
	Parms.DamageType = DamageType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerState.B_PlayerState_C.ExecuteUbergraph_B_PlayerState
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerState_C::ExecuteUbergraph_B_PlayerState(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "ExecuteUbergraph_B_PlayerState");

	Params::B_PlayerState_C_ExecuteUbergraph_B_PlayerState Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerState.B_PlayerState_C.GetProductUserId
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FString                           ProductUserId_0                                        (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PlatformType_0                                         (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void AB_PlayerState_C::GetProductUserId(class FString* ProductUserId_0, class FString* PlatformType_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "GetProductUserId");

	Params::B_PlayerState_C_GetProductUserId Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ProductUserId_0 != nullptr)
		*ProductUserId_0 = std::move(Parms.ProductUserId_0);

	if (PlatformType_0 != nullptr)
		*PlatformType_0 = std::move(Parms.PlatformType_0);
}


// Function B_PlayerState.B_PlayerState_C.GetNativeOnlineSystemName
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    UseRedpointSystem                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Out                                                    (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PlatformType_0                                         (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void AB_PlayerState_C::GetNativeOnlineSystemName(bool UseRedpointSystem, class FString* Out, class FString* PlatformType_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerState_C", "GetNativeOnlineSystemName");

	Params::B_PlayerState_C_GetNativeOnlineSystemName Parms{};

	Parms.UseRedpointSystem = UseRedpointSystem;

	UObject::ProcessEvent(Func, &Parms);

	if (Out != nullptr)
		*Out = std::move(Parms.Out);

	if (PlatformType_0 != nullptr)
		*PlatformType_0 = std::move(Parms.PlatformType_0);
}

}

