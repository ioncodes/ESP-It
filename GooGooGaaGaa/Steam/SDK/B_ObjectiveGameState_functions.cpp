#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_ObjectiveGameState

#include "Basic.hpp"

#include "B_ObjectiveGameState_classes.hpp"
#include "B_ObjectiveGameState_parameters.hpp"


namespace SDK
{

// Function B_ObjectiveGameState.B_ObjectiveGameState_C.OnMaxLivesChanged__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void AB_ObjectiveGameState_C::OnMaxLivesChanged__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_ObjectiveGameState_C", "OnMaxLivesChanged__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_ObjectiveGameState.B_ObjectiveGameState_C.OnPropMovedToReviveCircle__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                PlayerController                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_ObjectiveGameState_C::OnPropMovedToReviveCircle__DelegateSignature(class APlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_ObjectiveGameState_C", "OnPropMovedToReviveCircle__DelegateSignature");

	Params::B_ObjectiveGameState_C_OnPropMovedToReviveCircle__DelegateSignature Parms{};

	Parms.PlayerController = PlayerController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_ObjectiveGameState.B_ObjectiveGameState_C.OnOverTimeStarted__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           WantedPropClass                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_ObjectiveGameState_C::OnOverTimeStarted__DelegateSignature(class UClass* WantedPropClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_ObjectiveGameState_C", "OnOverTimeStarted__DelegateSignature");

	Params::B_ObjectiveGameState_C_OnOverTimeStarted__DelegateSignature Parms{};

	Parms.WantedPropClass = WantedPropClass;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_ObjectiveGameState.B_ObjectiveGameState_C.OnRevivePossible__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerState*                     KilledPlayer                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_ObjectiveGameState_C::OnRevivePossible__DelegateSignature(class APlayerState* KilledPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_ObjectiveGameState_C", "OnRevivePossible__DelegateSignature");

	Params::B_ObjectiveGameState_C_OnRevivePossible__DelegateSignature Parms{};

	Parms.KilledPlayer = KilledPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_ObjectiveGameState.B_ObjectiveGameState_C.OnCauldronFilled__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void AB_ObjectiveGameState_C::OnCauldronFilled__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_ObjectiveGameState_C", "OnCauldronFilled__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_ObjectiveGameState.B_ObjectiveGameState_C.OnPropMovedToInactiveCauldron__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                PlayerController                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_ObjectiveGameState_C::OnPropMovedToInactiveCauldron__DelegateSignature(class APlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_ObjectiveGameState_C", "OnPropMovedToInactiveCauldron__DelegateSignature");

	Params::B_ObjectiveGameState_C_OnPropMovedToInactiveCauldron__DelegateSignature Parms{};

	Parms.PlayerController = PlayerController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_ObjectiveGameState.B_ObjectiveGameState_C.AddRoundStatesMulti
// (Net, NetReliable, NetMulticast, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           Playtime                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<int32>                           TotalCauldronsFilled                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<int32>                           WitchLivesLeft                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<ETeamID>                         WinnerTeam_0                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<int32>                           Wins                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AB_ObjectiveGameState_C::AddRoundStatesMulti(const TArray<int32>& Playtime, const TArray<int32>& TotalCauldronsFilled, TArray<int32>& WitchLivesLeft, const TArray<ETeamID>& WinnerTeam_0, const TArray<int32>& Wins)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_ObjectiveGameState_C", "AddRoundStatesMulti");

	Params::B_ObjectiveGameState_C_AddRoundStatesMulti Parms{};

	Parms.Playtime = std::move(Playtime);
	Parms.TotalCauldronsFilled = std::move(TotalCauldronsFilled);
	Parms.WitchLivesLeft = std::move(WitchLivesLeft);
	Parms.WinnerTeam_0 = std::move(WinnerTeam_0);
	Parms.Wins = std::move(Wins);

	UObject::ProcessEvent(Func, &Parms);

	WitchLivesLeft = std::move(Parms.WitchLivesLeft);
}


// Function B_ObjectiveGameState.B_ObjectiveGameState_C.BindHelpTextEvents
// (Public, BlueprintCallable, BlueprintEvent)

void AB_ObjectiveGameState_C::BindHelpTextEvents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_ObjectiveGameState_C", "BindHelpTextEvents");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_ObjectiveGameState.B_ObjectiveGameState_C.ExecuteUbergraph_B_ObjectiveGameState
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_ObjectiveGameState_C::ExecuteUbergraph_B_ObjectiveGameState(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_ObjectiveGameState_C", "ExecuteUbergraph_B_ObjectiveGameState");

	Params::B_ObjectiveGameState_C_ExecuteUbergraph_B_ObjectiveGameState Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_ObjectiveGameState.B_ObjectiveGameState_C.GeneratePropArrays
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AB_ObjectiveGameState_C::GeneratePropArrays()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_ObjectiveGameState_C", "GeneratePropArrays");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_ObjectiveGameState.B_ObjectiveGameState_C.HandleAddRoundStates
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           Playtime                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<int32>                           TotalCauldronsFilled                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<int32>                           WitchLivesLeft                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<ETeamID>                         WinnerTeam_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<int32>                           Wins                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AB_ObjectiveGameState_C::HandleAddRoundStates(TArray<int32>& Playtime, TArray<int32>& TotalCauldronsFilled, TArray<int32>& WitchLivesLeft, TArray<ETeamID>& WinnerTeam_0, TArray<int32>& Wins)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_ObjectiveGameState_C", "HandleAddRoundStates");

	Params::B_ObjectiveGameState_C_HandleAddRoundStates Parms{};

	Parms.Playtime = std::move(Playtime);
	Parms.TotalCauldronsFilled = std::move(TotalCauldronsFilled);
	Parms.WitchLivesLeft = std::move(WitchLivesLeft);
	Parms.WinnerTeam_0 = std::move(WinnerTeam_0);
	Parms.Wins = std::move(Wins);

	UObject::ProcessEvent(Func, &Parms);

	Playtime = std::move(Parms.Playtime);
	TotalCauldronsFilled = std::move(Parms.TotalCauldronsFilled);
	WitchLivesLeft = std::move(Parms.WitchLivesLeft);
	WinnerTeam_0 = std::move(Parms.WinnerTeam_0);
	Wins = std::move(Parms.Wins);
}


// Function B_ObjectiveGameState.B_ObjectiveGameState_C.LoadPropsAndCauldrons
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AB_ObjectiveGameState_C::LoadPropsAndCauldrons()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_ObjectiveGameState_C", "LoadPropsAndCauldrons");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_ObjectiveGameState.B_ObjectiveGameState_C.LoadPropsAndCauldronsMulti
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void AB_ObjectiveGameState_C::LoadPropsAndCauldronsMulti()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_ObjectiveGameState_C", "LoadPropsAndCauldronsMulti");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_ObjectiveGameState.B_ObjectiveGameState_C.ObjectiveHelp
// (BlueprintCallable, BlueprintEvent)

void AB_ObjectiveGameState_C::ObjectiveHelp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_ObjectiveGameState_C", "ObjectiveHelp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_ObjectiveGameState.B_ObjectiveGameState_C.OnCauldronFilledMulti
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void AB_ObjectiveGameState_C::OnCauldronFilledMulti()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_ObjectiveGameState_C", "OnCauldronFilledMulti");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_ObjectiveGameState.B_ObjectiveGameState_C.OnGameStarted__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void AB_ObjectiveGameState_C::OnGameStarted__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_ObjectiveGameState_C", "OnGameStarted__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_ObjectiveGameState.B_ObjectiveGameState_C.OnGameStartedMulti
// (BlueprintCallable, BlueprintEvent)

void AB_ObjectiveGameState_C::OnGameStartedMulti()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_ObjectiveGameState_C", "OnGameStartedMulti");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_ObjectiveGameState.B_ObjectiveGameState_C.OnMatchStarted_0__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void AB_ObjectiveGameState_C::OnMatchStarted_0__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_ObjectiveGameState_C", "OnMatchStarted_0__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_ObjectiveGameState.B_ObjectiveGameState_C.OnMatchStartedMulti
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void AB_ObjectiveGameState_C::OnMatchStartedMulti()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_ObjectiveGameState_C", "OnMatchStartedMulti");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_ObjectiveGameState.B_ObjectiveGameState_C.OnOverTimeStartedMulti
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           WantedPropClass                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_ObjectiveGameState_C::OnOverTimeStartedMulti(class UClass* WantedPropClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_ObjectiveGameState_C", "OnOverTimeStartedMulti");

	Params::B_ObjectiveGameState_C_OnOverTimeStartedMulti Parms{};

	Parms.WantedPropClass = WantedPropClass;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_ObjectiveGameState.B_ObjectiveGameState_C.OnPropMovedToInactiveCauldron_Event
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                PlayerController                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_ObjectiveGameState_C::OnPropMovedToInactiveCauldron_Event(class APlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_ObjectiveGameState_C", "OnPropMovedToInactiveCauldron_Event");

	Params::B_ObjectiveGameState_C_OnPropMovedToInactiveCauldron_Event Parms{};

	Parms.PlayerController = PlayerController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_ObjectiveGameState.B_ObjectiveGameState_C.OnPropMovedToReviveCircle_Event
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                PlayerController                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_ObjectiveGameState_C::OnPropMovedToReviveCircle_Event(class APlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_ObjectiveGameState_C", "OnPropMovedToReviveCircle_Event");

	Params::B_ObjectiveGameState_C_OnPropMovedToReviveCircle_Event Parms{};

	Parms.PlayerController = PlayerController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_ObjectiveGameState.B_ObjectiveGameState_C.OnRep_MaxLives
// (BlueprintCallable, BlueprintEvent)

void AB_ObjectiveGameState_C::OnRep_MaxLives()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_ObjectiveGameState_C", "OnRep_MaxLives");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_ObjectiveGameState.B_ObjectiveGameState_C.OnRevivePossibleMulti
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerState*                     KilledPlayer                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_ObjectiveGameState_C::OnRevivePossibleMulti(class APlayerState* KilledPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_ObjectiveGameState_C", "OnRevivePossibleMulti");

	Params::B_ObjectiveGameState_C_OnRevivePossibleMulti Parms{};

	Parms.KilledPlayer = KilledPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_ObjectiveGameState.B_ObjectiveGameState_C.OnTransformedIntoWantedProp__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void AB_ObjectiveGameState_C::OnTransformedIntoWantedProp__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_ObjectiveGameState_C", "OnTransformedIntoWantedProp__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_ObjectiveGameState.B_ObjectiveGameState_C.OnTransformedIntoWantedProp_Event
// (BlueprintCallable, BlueprintEvent)

void AB_ObjectiveGameState_C::OnTransformedIntoWantedProp_Event()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_ObjectiveGameState_C", "OnTransformedIntoWantedProp_Event");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_ObjectiveGameState.B_ObjectiveGameState_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AB_ObjectiveGameState_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_ObjectiveGameState_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_ObjectiveGameState.B_ObjectiveGameState_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_ObjectiveGameState_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_ObjectiveGameState_C", "ReceiveTick");

	Params::B_ObjectiveGameState_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_ObjectiveGameState.B_ObjectiveGameState_C.ResetHelpTextsServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AB_ObjectiveGameState_C::ResetHelpTextsServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_ObjectiveGameState_C", "ResetHelpTextsServer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_ObjectiveGameState.B_ObjectiveGameState_C.ResetObjectiveHelp
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void AB_ObjectiveGameState_C::ResetObjectiveHelp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_ObjectiveGameState_C", "ResetObjectiveHelp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_ObjectiveGameState.B_ObjectiveGameState_C.ResetOverTimeHelp
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void AB_ObjectiveGameState_C::ResetOverTimeHelp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_ObjectiveGameState_C", "ResetOverTimeHelp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_ObjectiveGameState.B_ObjectiveGameState_C.ResetReviveHelpMulti
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void AB_ObjectiveGameState_C::ResetReviveHelpMulti()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_ObjectiveGameState_C", "ResetReviveHelpMulti");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_ObjectiveGameState.B_ObjectiveGameState_C.ResetReviveHelpServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AB_ObjectiveGameState_C::ResetReviveHelpServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_ObjectiveGameState_C", "ResetReviveHelpServer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_ObjectiveGameState.B_ObjectiveGameState_C.SetMatchGUIDMulti
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Guid                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AB_ObjectiveGameState_C::SetMatchGUIDMulti(const class FString& Guid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_ObjectiveGameState_C", "SetMatchGUIDMulti");

	Params::B_ObjectiveGameState_C_SetMatchGUIDMulti Parms{};

	Parms.Guid = std::move(Guid);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_ObjectiveGameState.B_ObjectiveGameState_C.ShouldTeamVoiceBeEnabled
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool AB_ObjectiveGameState_C::ShouldTeamVoiceBeEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_ObjectiveGameState_C", "ShouldTeamVoiceBeEnabled");

	Params::B_ObjectiveGameState_C_ShouldTeamVoiceBeEnabled Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_ObjectiveGameState.B_ObjectiveGameState_C.ShowResult
// (Public, BlueprintCallable, BlueprintEvent)

void AB_ObjectiveGameState_C::ShowResult()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_ObjectiveGameState_C", "ShowResult");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_ObjectiveGameState.B_ObjectiveGameState_C.TeamCheck
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class APlayerState*                     PlayerStateA                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APlayerState*                     PlayerStateB                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    bSameTeam                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_ObjectiveGameState_C::TeamCheck(class APlayerState* PlayerStateA, class APlayerState* PlayerStateB, bool* bSameTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_ObjectiveGameState_C", "TeamCheck");

	Params::B_ObjectiveGameState_C_TeamCheck Parms{};

	Parms.PlayerStateA = PlayerStateA;
	Parms.PlayerStateB = PlayerStateB;

	UObject::ProcessEvent(Func, &Parms);

	if (bSameTeam != nullptr)
		*bSameTeam = Parms.bSameTeam;
}

}

