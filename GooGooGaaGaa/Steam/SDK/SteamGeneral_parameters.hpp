#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SteamGeneral

#include "Basic.hpp"

#include "SteamGeneral_structs.hpp"


namespace SDK::Params
{

// Function SteamGeneral.SteamGeneralLibrary.BreakUInt32
// 0x000C (0x000C - 0x0000)
struct SteamGeneralLibrary_BreakUInt32 final
{
public:
	struct FUInt32                                InVal;                                             // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         OutVal;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamGeneralLibrary_BreakUInt32) == 0x000004, "Wrong alignment on SteamGeneralLibrary_BreakUInt32");
static_assert(sizeof(SteamGeneralLibrary_BreakUInt32) == 0x00000C, "Wrong size on SteamGeneralLibrary_BreakUInt32");
static_assert(offsetof(SteamGeneralLibrary_BreakUInt32, InVal) == 0x000000, "Member 'SteamGeneralLibrary_BreakUInt32::InVal' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_BreakUInt32, OutVal) == 0x000004, "Member 'SteamGeneralLibrary_BreakUInt32::OutVal' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_BreakUInt32, ReturnValue) == 0x000008, "Member 'SteamGeneralLibrary_BreakUInt32::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.BreakUInt64
// 0x0010 (0x0010 - 0x0000)
struct SteamGeneralLibrary_BreakUInt64 final
{
public:
	struct FUInt64                                InVal;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         OutVal;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamGeneralLibrary_BreakUInt64) == 0x000008, "Wrong alignment on SteamGeneralLibrary_BreakUInt64");
static_assert(sizeof(SteamGeneralLibrary_BreakUInt64) == 0x000010, "Wrong size on SteamGeneralLibrary_BreakUInt64");
static_assert(offsetof(SteamGeneralLibrary_BreakUInt64, InVal) == 0x000000, "Member 'SteamGeneralLibrary_BreakUInt64::InVal' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_BreakUInt64, OutVal) == 0x000008, "Member 'SteamGeneralLibrary_BreakUInt64::OutVal' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_BreakUInt64, ReturnValue) == 0x00000C, "Member 'SteamGeneralLibrary_BreakUInt64::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.Equal_SteamAppId
// 0x000C (0x000C - 0x0000)
struct SteamGeneralLibrary_Equal_SteamAppId final
{
public:
	struct FSteamAppId                            A;                                                 // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamAppId                            B;                                                 // 0x0004(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamGeneralLibrary_Equal_SteamAppId) == 0x000004, "Wrong alignment on SteamGeneralLibrary_Equal_SteamAppId");
static_assert(sizeof(SteamGeneralLibrary_Equal_SteamAppId) == 0x00000C, "Wrong size on SteamGeneralLibrary_Equal_SteamAppId");
static_assert(offsetof(SteamGeneralLibrary_Equal_SteamAppId, A) == 0x000000, "Member 'SteamGeneralLibrary_Equal_SteamAppId::A' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_Equal_SteamAppId, B) == 0x000004, "Member 'SteamGeneralLibrary_Equal_SteamAppId::B' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_Equal_SteamAppId, ReturnValue) == 0x000008, "Member 'SteamGeneralLibrary_Equal_SteamAppId::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.Equal_SteamDepotId
// 0x000C (0x000C - 0x0000)
struct SteamGeneralLibrary_Equal_SteamDepotId final
{
public:
	struct FSteamDepotId                          A;                                                 // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamDepotId                          B;                                                 // 0x0004(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamGeneralLibrary_Equal_SteamDepotId) == 0x000004, "Wrong alignment on SteamGeneralLibrary_Equal_SteamDepotId");
static_assert(sizeof(SteamGeneralLibrary_Equal_SteamDepotId) == 0x00000C, "Wrong size on SteamGeneralLibrary_Equal_SteamDepotId");
static_assert(offsetof(SteamGeneralLibrary_Equal_SteamDepotId, A) == 0x000000, "Member 'SteamGeneralLibrary_Equal_SteamDepotId::A' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_Equal_SteamDepotId, B) == 0x000004, "Member 'SteamGeneralLibrary_Equal_SteamDepotId::B' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_Equal_SteamDepotId, ReturnValue) == 0x000008, "Member 'SteamGeneralLibrary_Equal_SteamDepotId::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.Equal_SteamItemId
// 0x0018 (0x0018 - 0x0000)
struct SteamGeneralLibrary_Equal_SteamItemId final
{
public:
	struct FSteamUGCItemId                        A;                                                 // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamUGCItemId                        B;                                                 // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamGeneralLibrary_Equal_SteamItemId) == 0x000008, "Wrong alignment on SteamGeneralLibrary_Equal_SteamItemId");
static_assert(sizeof(SteamGeneralLibrary_Equal_SteamItemId) == 0x000018, "Wrong size on SteamGeneralLibrary_Equal_SteamItemId");
static_assert(offsetof(SteamGeneralLibrary_Equal_SteamItemId, A) == 0x000000, "Member 'SteamGeneralLibrary_Equal_SteamItemId::A' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_Equal_SteamItemId, B) == 0x000008, "Member 'SteamGeneralLibrary_Equal_SteamItemId::B' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_Equal_SteamItemId, ReturnValue) == 0x000010, "Member 'SteamGeneralLibrary_Equal_SteamItemId::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.Equal_UInt32
// 0x000C (0x000C - 0x0000)
struct SteamGeneralLibrary_Equal_UInt32 final
{
public:
	struct FUInt32                                A;                                                 // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FUInt32                                B;                                                 // 0x0004(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamGeneralLibrary_Equal_UInt32) == 0x000004, "Wrong alignment on SteamGeneralLibrary_Equal_UInt32");
static_assert(sizeof(SteamGeneralLibrary_Equal_UInt32) == 0x00000C, "Wrong size on SteamGeneralLibrary_Equal_UInt32");
static_assert(offsetof(SteamGeneralLibrary_Equal_UInt32, A) == 0x000000, "Member 'SteamGeneralLibrary_Equal_UInt32::A' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_Equal_UInt32, B) == 0x000004, "Member 'SteamGeneralLibrary_Equal_UInt32::B' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_Equal_UInt32, ReturnValue) == 0x000008, "Member 'SteamGeneralLibrary_Equal_UInt32::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.Equal_UInt64
// 0x0018 (0x0018 - 0x0000)
struct SteamGeneralLibrary_Equal_UInt64 final
{
public:
	struct FUInt64                                A;                                                 // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FUInt64                                B;                                                 // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamGeneralLibrary_Equal_UInt64) == 0x000008, "Wrong alignment on SteamGeneralLibrary_Equal_UInt64");
static_assert(sizeof(SteamGeneralLibrary_Equal_UInt64) == 0x000018, "Wrong size on SteamGeneralLibrary_Equal_UInt64");
static_assert(offsetof(SteamGeneralLibrary_Equal_UInt64, A) == 0x000000, "Member 'SteamGeneralLibrary_Equal_UInt64::A' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_Equal_UInt64, B) == 0x000008, "Member 'SteamGeneralLibrary_Equal_UInt64::B' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_Equal_UInt64, ReturnValue) == 0x000010, "Member 'SteamGeneralLibrary_Equal_UInt64::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.FromString_UInt32
// 0x0018 (0x0018 - 0x0000)
struct SteamGeneralLibrary_FromString_UInt32 final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUInt32                                ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamGeneralLibrary_FromString_UInt32) == 0x000008, "Wrong alignment on SteamGeneralLibrary_FromString_UInt32");
static_assert(sizeof(SteamGeneralLibrary_FromString_UInt32) == 0x000018, "Wrong size on SteamGeneralLibrary_FromString_UInt32");
static_assert(offsetof(SteamGeneralLibrary_FromString_UInt32, Value) == 0x000000, "Member 'SteamGeneralLibrary_FromString_UInt32::Value' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_FromString_UInt32, ReturnValue) == 0x000010, "Member 'SteamGeneralLibrary_FromString_UInt32::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.FromString_UInt64
// 0x0018 (0x0018 - 0x0000)
struct SteamGeneralLibrary_FromString_UInt64 final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUInt64                                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGeneralLibrary_FromString_UInt64) == 0x000008, "Wrong alignment on SteamGeneralLibrary_FromString_UInt64");
static_assert(sizeof(SteamGeneralLibrary_FromString_UInt64) == 0x000018, "Wrong size on SteamGeneralLibrary_FromString_UInt64");
static_assert(offsetof(SteamGeneralLibrary_FromString_UInt64, Value) == 0x000000, "Member 'SteamGeneralLibrary_FromString_UInt64::Value' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_FromString_UInt64, ReturnValue) == 0x000010, "Member 'SteamGeneralLibrary_FromString_UInt64::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.GetSteamAppId
// 0x0004 (0x0004 - 0x0000)
struct SteamGeneralLibrary_GetSteamAppId final
{
public:
	struct FSteamAppId                            ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGeneralLibrary_GetSteamAppId) == 0x000004, "Wrong alignment on SteamGeneralLibrary_GetSteamAppId");
static_assert(sizeof(SteamGeneralLibrary_GetSteamAppId) == 0x000004, "Wrong size on SteamGeneralLibrary_GetSteamAppId");
static_assert(offsetof(SteamGeneralLibrary_GetSteamAppId, ReturnValue) == 0x000000, "Member 'SteamGeneralLibrary_GetSteamAppId::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.IsSteamInitialized
// 0x0001 (0x0001 - 0x0000)
struct SteamGeneralLibrary_IsSteamInitialized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGeneralLibrary_IsSteamInitialized) == 0x000001, "Wrong alignment on SteamGeneralLibrary_IsSteamInitialized");
static_assert(sizeof(SteamGeneralLibrary_IsSteamInitialized) == 0x000001, "Wrong size on SteamGeneralLibrary_IsSteamInitialized");
static_assert(offsetof(SteamGeneralLibrary_IsSteamInitialized, ReturnValue) == 0x000000, "Member 'SteamGeneralLibrary_IsSteamInitialized::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.NotEqual_SteamAppId
// 0x000C (0x000C - 0x0000)
struct SteamGeneralLibrary_NotEqual_SteamAppId final
{
public:
	struct FSteamAppId                            A;                                                 // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamAppId                            B;                                                 // 0x0004(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamGeneralLibrary_NotEqual_SteamAppId) == 0x000004, "Wrong alignment on SteamGeneralLibrary_NotEqual_SteamAppId");
static_assert(sizeof(SteamGeneralLibrary_NotEqual_SteamAppId) == 0x00000C, "Wrong size on SteamGeneralLibrary_NotEqual_SteamAppId");
static_assert(offsetof(SteamGeneralLibrary_NotEqual_SteamAppId, A) == 0x000000, "Member 'SteamGeneralLibrary_NotEqual_SteamAppId::A' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_NotEqual_SteamAppId, B) == 0x000004, "Member 'SteamGeneralLibrary_NotEqual_SteamAppId::B' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_NotEqual_SteamAppId, ReturnValue) == 0x000008, "Member 'SteamGeneralLibrary_NotEqual_SteamAppId::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.NotEqual_SteamDepotId
// 0x000C (0x000C - 0x0000)
struct SteamGeneralLibrary_NotEqual_SteamDepotId final
{
public:
	struct FSteamDepotId                          A;                                                 // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamDepotId                          B;                                                 // 0x0004(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamGeneralLibrary_NotEqual_SteamDepotId) == 0x000004, "Wrong alignment on SteamGeneralLibrary_NotEqual_SteamDepotId");
static_assert(sizeof(SteamGeneralLibrary_NotEqual_SteamDepotId) == 0x00000C, "Wrong size on SteamGeneralLibrary_NotEqual_SteamDepotId");
static_assert(offsetof(SteamGeneralLibrary_NotEqual_SteamDepotId, A) == 0x000000, "Member 'SteamGeneralLibrary_NotEqual_SteamDepotId::A' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_NotEqual_SteamDepotId, B) == 0x000004, "Member 'SteamGeneralLibrary_NotEqual_SteamDepotId::B' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_NotEqual_SteamDepotId, ReturnValue) == 0x000008, "Member 'SteamGeneralLibrary_NotEqual_SteamDepotId::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.NotEqual_SteamItemId
// 0x0018 (0x0018 - 0x0000)
struct SteamGeneralLibrary_NotEqual_SteamItemId final
{
public:
	struct FSteamUGCItemId                        A;                                                 // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamUGCItemId                        B;                                                 // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamGeneralLibrary_NotEqual_SteamItemId) == 0x000008, "Wrong alignment on SteamGeneralLibrary_NotEqual_SteamItemId");
static_assert(sizeof(SteamGeneralLibrary_NotEqual_SteamItemId) == 0x000018, "Wrong size on SteamGeneralLibrary_NotEqual_SteamItemId");
static_assert(offsetof(SteamGeneralLibrary_NotEqual_SteamItemId, A) == 0x000000, "Member 'SteamGeneralLibrary_NotEqual_SteamItemId::A' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_NotEqual_SteamItemId, B) == 0x000008, "Member 'SteamGeneralLibrary_NotEqual_SteamItemId::B' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_NotEqual_SteamItemId, ReturnValue) == 0x000010, "Member 'SteamGeneralLibrary_NotEqual_SteamItemId::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.NotEqual_UInt32
// 0x000C (0x000C - 0x0000)
struct SteamGeneralLibrary_NotEqual_UInt32 final
{
public:
	struct FUInt32                                A;                                                 // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FUInt32                                B;                                                 // 0x0004(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamGeneralLibrary_NotEqual_UInt32) == 0x000004, "Wrong alignment on SteamGeneralLibrary_NotEqual_UInt32");
static_assert(sizeof(SteamGeneralLibrary_NotEqual_UInt32) == 0x00000C, "Wrong size on SteamGeneralLibrary_NotEqual_UInt32");
static_assert(offsetof(SteamGeneralLibrary_NotEqual_UInt32, A) == 0x000000, "Member 'SteamGeneralLibrary_NotEqual_UInt32::A' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_NotEqual_UInt32, B) == 0x000004, "Member 'SteamGeneralLibrary_NotEqual_UInt32::B' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_NotEqual_UInt32, ReturnValue) == 0x000008, "Member 'SteamGeneralLibrary_NotEqual_UInt32::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.NotEqual_UInt64
// 0x0018 (0x0018 - 0x0000)
struct SteamGeneralLibrary_NotEqual_UInt64 final
{
public:
	struct FUInt64                                A;                                                 // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FUInt64                                B;                                                 // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamGeneralLibrary_NotEqual_UInt64) == 0x000008, "Wrong alignment on SteamGeneralLibrary_NotEqual_UInt64");
static_assert(sizeof(SteamGeneralLibrary_NotEqual_UInt64) == 0x000018, "Wrong size on SteamGeneralLibrary_NotEqual_UInt64");
static_assert(offsetof(SteamGeneralLibrary_NotEqual_UInt64, A) == 0x000000, "Member 'SteamGeneralLibrary_NotEqual_UInt64::A' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_NotEqual_UInt64, B) == 0x000008, "Member 'SteamGeneralLibrary_NotEqual_UInt64::B' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_NotEqual_UInt64, ReturnValue) == 0x000010, "Member 'SteamGeneralLibrary_NotEqual_UInt64::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.SteamAppIdArray_AddUnique
// 0x0018 (0x0018 - 0x0000)
struct SteamGeneralLibrary_SteamAppIdArray_AddUnique final
{
public:
	TArray<struct FSteamAppId>                    Values;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSteamAppId                            Value;                                             // 0x0010(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGeneralLibrary_SteamAppIdArray_AddUnique) == 0x000008, "Wrong alignment on SteamGeneralLibrary_SteamAppIdArray_AddUnique");
static_assert(sizeof(SteamGeneralLibrary_SteamAppIdArray_AddUnique) == 0x000018, "Wrong size on SteamGeneralLibrary_SteamAppIdArray_AddUnique");
static_assert(offsetof(SteamGeneralLibrary_SteamAppIdArray_AddUnique, Values) == 0x000000, "Member 'SteamGeneralLibrary_SteamAppIdArray_AddUnique::Values' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_SteamAppIdArray_AddUnique, Value) == 0x000010, "Member 'SteamGeneralLibrary_SteamAppIdArray_AddUnique::Value' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_SteamAppIdArray_AddUnique, ReturnValue) == 0x000014, "Member 'SteamGeneralLibrary_SteamAppIdArray_AddUnique::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.SteamAppIdArray_Contains
// 0x0018 (0x0018 - 0x0000)
struct SteamGeneralLibrary_SteamAppIdArray_Contains final
{
public:
	TArray<struct FSteamAppId>                    Values;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSteamAppId                            Value;                                             // 0x0010(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamGeneralLibrary_SteamAppIdArray_Contains) == 0x000008, "Wrong alignment on SteamGeneralLibrary_SteamAppIdArray_Contains");
static_assert(sizeof(SteamGeneralLibrary_SteamAppIdArray_Contains) == 0x000018, "Wrong size on SteamGeneralLibrary_SteamAppIdArray_Contains");
static_assert(offsetof(SteamGeneralLibrary_SteamAppIdArray_Contains, Values) == 0x000000, "Member 'SteamGeneralLibrary_SteamAppIdArray_Contains::Values' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_SteamAppIdArray_Contains, Value) == 0x000010, "Member 'SteamGeneralLibrary_SteamAppIdArray_Contains::Value' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_SteamAppIdArray_Contains, ReturnValue) == 0x000014, "Member 'SteamGeneralLibrary_SteamAppIdArray_Contains::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.SteamAppIdArray_Find
// 0x0018 (0x0018 - 0x0000)
struct SteamGeneralLibrary_SteamAppIdArray_Find final
{
public:
	TArray<struct FSteamAppId>                    Values;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSteamAppId                            Value;                                             // 0x0010(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGeneralLibrary_SteamAppIdArray_Find) == 0x000008, "Wrong alignment on SteamGeneralLibrary_SteamAppIdArray_Find");
static_assert(sizeof(SteamGeneralLibrary_SteamAppIdArray_Find) == 0x000018, "Wrong size on SteamGeneralLibrary_SteamAppIdArray_Find");
static_assert(offsetof(SteamGeneralLibrary_SteamAppIdArray_Find, Values) == 0x000000, "Member 'SteamGeneralLibrary_SteamAppIdArray_Find::Values' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_SteamAppIdArray_Find, Value) == 0x000010, "Member 'SteamGeneralLibrary_SteamAppIdArray_Find::Value' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_SteamAppIdArray_Find, ReturnValue) == 0x000014, "Member 'SteamGeneralLibrary_SteamAppIdArray_Find::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.SteamAppIdArray_Remove
// 0x0018 (0x0018 - 0x0000)
struct SteamGeneralLibrary_SteamAppIdArray_Remove final
{
public:
	TArray<struct FSteamAppId>                    Values;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSteamAppId                            Value;                                             // 0x0010(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGeneralLibrary_SteamAppIdArray_Remove) == 0x000008, "Wrong alignment on SteamGeneralLibrary_SteamAppIdArray_Remove");
static_assert(sizeof(SteamGeneralLibrary_SteamAppIdArray_Remove) == 0x000018, "Wrong size on SteamGeneralLibrary_SteamAppIdArray_Remove");
static_assert(offsetof(SteamGeneralLibrary_SteamAppIdArray_Remove, Values) == 0x000000, "Member 'SteamGeneralLibrary_SteamAppIdArray_Remove::Values' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_SteamAppIdArray_Remove, Value) == 0x000010, "Member 'SteamGeneralLibrary_SteamAppIdArray_Remove::Value' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_SteamAppIdArray_Remove, ReturnValue) == 0x000014, "Member 'SteamGeneralLibrary_SteamAppIdArray_Remove::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.SteamConvertLanguageToLanguageCode
// 0x0018 (0x0018 - 0x0000)
struct SteamGeneralLibrary_SteamConvertLanguageToLanguageCode final
{
public:
	ESteamSupportedLanguages                      Language;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGeneralLibrary_SteamConvertLanguageToLanguageCode) == 0x000008, "Wrong alignment on SteamGeneralLibrary_SteamConvertLanguageToLanguageCode");
static_assert(sizeof(SteamGeneralLibrary_SteamConvertLanguageToLanguageCode) == 0x000018, "Wrong size on SteamGeneralLibrary_SteamConvertLanguageToLanguageCode");
static_assert(offsetof(SteamGeneralLibrary_SteamConvertLanguageToLanguageCode, Language) == 0x000000, "Member 'SteamGeneralLibrary_SteamConvertLanguageToLanguageCode::Language' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_SteamConvertLanguageToLanguageCode, ReturnValue) == 0x000008, "Member 'SteamGeneralLibrary_SteamConvertLanguageToLanguageCode::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.SteamDelegate_OnGameOverlayActivated_Bind
// 0x0014 (0x0014 - 0x0000)
struct SteamGeneralLibrary_SteamDelegate_OnGameOverlayActivated_Bind final
{
public:
	TDelegate<void(bool bActive)>                 DelegateToCall;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamGeneralLibrary_SteamDelegate_OnGameOverlayActivated_Bind) == 0x000004, "Wrong alignment on SteamGeneralLibrary_SteamDelegate_OnGameOverlayActivated_Bind");
static_assert(sizeof(SteamGeneralLibrary_SteamDelegate_OnGameOverlayActivated_Bind) == 0x000014, "Wrong size on SteamGeneralLibrary_SteamDelegate_OnGameOverlayActivated_Bind");
static_assert(offsetof(SteamGeneralLibrary_SteamDelegate_OnGameOverlayActivated_Bind, DelegateToCall) == 0x000000, "Member 'SteamGeneralLibrary_SteamDelegate_OnGameOverlayActivated_Bind::DelegateToCall' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_SteamDelegate_OnGameOverlayActivated_Bind, ReturnValue) == 0x000010, "Member 'SteamGeneralLibrary_SteamDelegate_OnGameOverlayActivated_Bind::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.SteamDelegate_OnGameOverlayActivated_Unbind
// 0x0014 (0x0014 - 0x0000)
struct SteamGeneralLibrary_SteamDelegate_OnGameOverlayActivated_Unbind final
{
public:
	TDelegate<void(bool bActive)>                 DelegateToCall;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamGeneralLibrary_SteamDelegate_OnGameOverlayActivated_Unbind) == 0x000004, "Wrong alignment on SteamGeneralLibrary_SteamDelegate_OnGameOverlayActivated_Unbind");
static_assert(sizeof(SteamGeneralLibrary_SteamDelegate_OnGameOverlayActivated_Unbind) == 0x000014, "Wrong size on SteamGeneralLibrary_SteamDelegate_OnGameOverlayActivated_Unbind");
static_assert(offsetof(SteamGeneralLibrary_SteamDelegate_OnGameOverlayActivated_Unbind, DelegateToCall) == 0x000000, "Member 'SteamGeneralLibrary_SteamDelegate_OnGameOverlayActivated_Unbind::DelegateToCall' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_SteamDelegate_OnGameOverlayActivated_Unbind, ReturnValue) == 0x000010, "Member 'SteamGeneralLibrary_SteamDelegate_OnGameOverlayActivated_Unbind::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.SteamDepotIdArray_AddUnique
// 0x0018 (0x0018 - 0x0000)
struct SteamGeneralLibrary_SteamDepotIdArray_AddUnique final
{
public:
	TArray<struct FSteamDepotId>                  Values;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSteamDepotId                          Value;                                             // 0x0010(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGeneralLibrary_SteamDepotIdArray_AddUnique) == 0x000008, "Wrong alignment on SteamGeneralLibrary_SteamDepotIdArray_AddUnique");
static_assert(sizeof(SteamGeneralLibrary_SteamDepotIdArray_AddUnique) == 0x000018, "Wrong size on SteamGeneralLibrary_SteamDepotIdArray_AddUnique");
static_assert(offsetof(SteamGeneralLibrary_SteamDepotIdArray_AddUnique, Values) == 0x000000, "Member 'SteamGeneralLibrary_SteamDepotIdArray_AddUnique::Values' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_SteamDepotIdArray_AddUnique, Value) == 0x000010, "Member 'SteamGeneralLibrary_SteamDepotIdArray_AddUnique::Value' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_SteamDepotIdArray_AddUnique, ReturnValue) == 0x000014, "Member 'SteamGeneralLibrary_SteamDepotIdArray_AddUnique::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.SteamDepotIdArray_Contains
// 0x0018 (0x0018 - 0x0000)
struct SteamGeneralLibrary_SteamDepotIdArray_Contains final
{
public:
	TArray<struct FSteamDepotId>                  Values;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSteamDepotId                          Value;                                             // 0x0010(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamGeneralLibrary_SteamDepotIdArray_Contains) == 0x000008, "Wrong alignment on SteamGeneralLibrary_SteamDepotIdArray_Contains");
static_assert(sizeof(SteamGeneralLibrary_SteamDepotIdArray_Contains) == 0x000018, "Wrong size on SteamGeneralLibrary_SteamDepotIdArray_Contains");
static_assert(offsetof(SteamGeneralLibrary_SteamDepotIdArray_Contains, Values) == 0x000000, "Member 'SteamGeneralLibrary_SteamDepotIdArray_Contains::Values' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_SteamDepotIdArray_Contains, Value) == 0x000010, "Member 'SteamGeneralLibrary_SteamDepotIdArray_Contains::Value' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_SteamDepotIdArray_Contains, ReturnValue) == 0x000014, "Member 'SteamGeneralLibrary_SteamDepotIdArray_Contains::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.SteamDepotIdArray_Find
// 0x0018 (0x0018 - 0x0000)
struct SteamGeneralLibrary_SteamDepotIdArray_Find final
{
public:
	TArray<struct FSteamDepotId>                  Values;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSteamDepotId                          Value;                                             // 0x0010(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGeneralLibrary_SteamDepotIdArray_Find) == 0x000008, "Wrong alignment on SteamGeneralLibrary_SteamDepotIdArray_Find");
static_assert(sizeof(SteamGeneralLibrary_SteamDepotIdArray_Find) == 0x000018, "Wrong size on SteamGeneralLibrary_SteamDepotIdArray_Find");
static_assert(offsetof(SteamGeneralLibrary_SteamDepotIdArray_Find, Values) == 0x000000, "Member 'SteamGeneralLibrary_SteamDepotIdArray_Find::Values' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_SteamDepotIdArray_Find, Value) == 0x000010, "Member 'SteamGeneralLibrary_SteamDepotIdArray_Find::Value' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_SteamDepotIdArray_Find, ReturnValue) == 0x000014, "Member 'SteamGeneralLibrary_SteamDepotIdArray_Find::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.SteamDepotIdArray_Remove
// 0x0018 (0x0018 - 0x0000)
struct SteamGeneralLibrary_SteamDepotIdArray_Remove final
{
public:
	TArray<struct FSteamDepotId>                  Values;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSteamDepotId                          Value;                                             // 0x0010(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGeneralLibrary_SteamDepotIdArray_Remove) == 0x000008, "Wrong alignment on SteamGeneralLibrary_SteamDepotIdArray_Remove");
static_assert(sizeof(SteamGeneralLibrary_SteamDepotIdArray_Remove) == 0x000018, "Wrong size on SteamGeneralLibrary_SteamDepotIdArray_Remove");
static_assert(offsetof(SteamGeneralLibrary_SteamDepotIdArray_Remove, Values) == 0x000000, "Member 'SteamGeneralLibrary_SteamDepotIdArray_Remove::Values' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_SteamDepotIdArray_Remove, Value) == 0x000010, "Member 'SteamGeneralLibrary_SteamDepotIdArray_Remove::Value' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_SteamDepotIdArray_Remove, ReturnValue) == 0x000014, "Member 'SteamGeneralLibrary_SteamDepotIdArray_Remove::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.SteamGeneral_ActivateGameOverlayToWebPage
// 0x0018 (0x0018 - 0x0000)
struct SteamGeneralLibrary_SteamGeneral_ActivateGameOverlayToWebPage final
{
public:
	class FString                                 Webpage;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamGeneralLibrary_SteamGeneral_ActivateGameOverlayToWebPage) == 0x000008, "Wrong alignment on SteamGeneralLibrary_SteamGeneral_ActivateGameOverlayToWebPage");
static_assert(sizeof(SteamGeneralLibrary_SteamGeneral_ActivateGameOverlayToWebPage) == 0x000018, "Wrong size on SteamGeneralLibrary_SteamGeneral_ActivateGameOverlayToWebPage");
static_assert(offsetof(SteamGeneralLibrary_SteamGeneral_ActivateGameOverlayToWebPage, Webpage) == 0x000000, "Member 'SteamGeneralLibrary_SteamGeneral_ActivateGameOverlayToWebPage::Webpage' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_SteamGeneral_ActivateGameOverlayToWebPage, ReturnValue) == 0x000010, "Member 'SteamGeneralLibrary_SteamGeneral_ActivateGameOverlayToWebPage::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.SteamGeneral_GetFriendName
// 0x0018 (0x0018 - 0x0000)
struct SteamGeneralLibrary_SteamGeneral_GetFriendName final
{
public:
	struct FUInt64                                SteamUserId;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGeneralLibrary_SteamGeneral_GetFriendName) == 0x000008, "Wrong alignment on SteamGeneralLibrary_SteamGeneral_GetFriendName");
static_assert(sizeof(SteamGeneralLibrary_SteamGeneral_GetFriendName) == 0x000018, "Wrong size on SteamGeneralLibrary_SteamGeneral_GetFriendName");
static_assert(offsetof(SteamGeneralLibrary_SteamGeneral_GetFriendName, SteamUserId) == 0x000000, "Member 'SteamGeneralLibrary_SteamGeneral_GetFriendName::SteamUserId' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_SteamGeneral_GetFriendName, ReturnValue) == 0x000008, "Member 'SteamGeneralLibrary_SteamGeneral_GetFriendName::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.SteamGeneral_GetFriendState
// 0x0010 (0x0010 - 0x0000)
struct SteamGeneralLibrary_SteamGeneral_GetFriendState final
{
public:
	struct FUInt64                                SteamUserId;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EPersonaStateBP                               ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamGeneralLibrary_SteamGeneral_GetFriendState) == 0x000008, "Wrong alignment on SteamGeneralLibrary_SteamGeneral_GetFriendState");
static_assert(sizeof(SteamGeneralLibrary_SteamGeneral_GetFriendState) == 0x000010, "Wrong size on SteamGeneralLibrary_SteamGeneral_GetFriendState");
static_assert(offsetof(SteamGeneralLibrary_SteamGeneral_GetFriendState, SteamUserId) == 0x000000, "Member 'SteamGeneralLibrary_SteamGeneral_GetFriendState::SteamUserId' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_SteamGeneral_GetFriendState, ReturnValue) == 0x000008, "Member 'SteamGeneralLibrary_SteamGeneral_GetFriendState::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.SteamGeneral_GetUserName
// 0x0010 (0x0010 - 0x0000)
struct SteamGeneralLibrary_SteamGeneral_GetUserName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGeneralLibrary_SteamGeneral_GetUserName) == 0x000008, "Wrong alignment on SteamGeneralLibrary_SteamGeneral_GetUserName");
static_assert(sizeof(SteamGeneralLibrary_SteamGeneral_GetUserName) == 0x000010, "Wrong size on SteamGeneralLibrary_SteamGeneral_GetUserName");
static_assert(offsetof(SteamGeneralLibrary_SteamGeneral_GetUserName, ReturnValue) == 0x000000, "Member 'SteamGeneralLibrary_SteamGeneral_GetUserName::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.SteamGeneral_GetUserState
// 0x0001 (0x0001 - 0x0000)
struct SteamGeneralLibrary_SteamGeneral_GetUserState final
{
public:
	EPersonaStateBP                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGeneralLibrary_SteamGeneral_GetUserState) == 0x000001, "Wrong alignment on SteamGeneralLibrary_SteamGeneral_GetUserState");
static_assert(sizeof(SteamGeneralLibrary_SteamGeneral_GetUserState) == 0x000001, "Wrong size on SteamGeneralLibrary_SteamGeneral_GetUserState");
static_assert(offsetof(SteamGeneralLibrary_SteamGeneral_GetUserState, ReturnValue) == 0x000000, "Member 'SteamGeneralLibrary_SteamGeneral_GetUserState::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.SteamQueryHandle_IsValid
// 0x0010 (0x0010 - 0x0000)
struct SteamGeneralLibrary_SteamQueryHandle_IsValid final
{
public:
	struct FSteamUGCQueryHandle                   Handle;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamGeneralLibrary_SteamQueryHandle_IsValid) == 0x000008, "Wrong alignment on SteamGeneralLibrary_SteamQueryHandle_IsValid");
static_assert(sizeof(SteamGeneralLibrary_SteamQueryHandle_IsValid) == 0x000010, "Wrong size on SteamGeneralLibrary_SteamQueryHandle_IsValid");
static_assert(offsetof(SteamGeneralLibrary_SteamQueryHandle_IsValid, Handle) == 0x000000, "Member 'SteamGeneralLibrary_SteamQueryHandle_IsValid::Handle' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_SteamQueryHandle_IsValid, ReturnValue) == 0x000008, "Member 'SteamGeneralLibrary_SteamQueryHandle_IsValid::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.SteamUGCHandle_IsValid
// 0x0010 (0x0010 - 0x0000)
struct SteamGeneralLibrary_SteamUGCHandle_IsValid final
{
public:
	struct FSteamUGCHandle                        Handle;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamGeneralLibrary_SteamUGCHandle_IsValid) == 0x000008, "Wrong alignment on SteamGeneralLibrary_SteamUGCHandle_IsValid");
static_assert(sizeof(SteamGeneralLibrary_SteamUGCHandle_IsValid) == 0x000010, "Wrong size on SteamGeneralLibrary_SteamUGCHandle_IsValid");
static_assert(offsetof(SteamGeneralLibrary_SteamUGCHandle_IsValid, Handle) == 0x000000, "Member 'SteamGeneralLibrary_SteamUGCHandle_IsValid::Handle' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_SteamUGCHandle_IsValid, ReturnValue) == 0x000008, "Member 'SteamGeneralLibrary_SteamUGCHandle_IsValid::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.SteamUGCItemIdArray_AddUnique
// 0x0020 (0x0020 - 0x0000)
struct SteamGeneralLibrary_SteamUGCItemIdArray_AddUnique final
{
public:
	TArray<struct FSteamUGCItemId>                Values;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSteamUGCItemId                        Value;                                             // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamGeneralLibrary_SteamUGCItemIdArray_AddUnique) == 0x000008, "Wrong alignment on SteamGeneralLibrary_SteamUGCItemIdArray_AddUnique");
static_assert(sizeof(SteamGeneralLibrary_SteamUGCItemIdArray_AddUnique) == 0x000020, "Wrong size on SteamGeneralLibrary_SteamUGCItemIdArray_AddUnique");
static_assert(offsetof(SteamGeneralLibrary_SteamUGCItemIdArray_AddUnique, Values) == 0x000000, "Member 'SteamGeneralLibrary_SteamUGCItemIdArray_AddUnique::Values' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_SteamUGCItemIdArray_AddUnique, Value) == 0x000010, "Member 'SteamGeneralLibrary_SteamUGCItemIdArray_AddUnique::Value' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_SteamUGCItemIdArray_AddUnique, ReturnValue) == 0x000018, "Member 'SteamGeneralLibrary_SteamUGCItemIdArray_AddUnique::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.SteamUGCItemIdArray_Contains
// 0x0020 (0x0020 - 0x0000)
struct SteamGeneralLibrary_SteamUGCItemIdArray_Contains final
{
public:
	TArray<struct FSteamUGCItemId>                Values;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSteamUGCItemId                        Value;                                             // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamGeneralLibrary_SteamUGCItemIdArray_Contains) == 0x000008, "Wrong alignment on SteamGeneralLibrary_SteamUGCItemIdArray_Contains");
static_assert(sizeof(SteamGeneralLibrary_SteamUGCItemIdArray_Contains) == 0x000020, "Wrong size on SteamGeneralLibrary_SteamUGCItemIdArray_Contains");
static_assert(offsetof(SteamGeneralLibrary_SteamUGCItemIdArray_Contains, Values) == 0x000000, "Member 'SteamGeneralLibrary_SteamUGCItemIdArray_Contains::Values' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_SteamUGCItemIdArray_Contains, Value) == 0x000010, "Member 'SteamGeneralLibrary_SteamUGCItemIdArray_Contains::Value' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_SteamUGCItemIdArray_Contains, ReturnValue) == 0x000018, "Member 'SteamGeneralLibrary_SteamUGCItemIdArray_Contains::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.SteamUGCItemIdArray_Find
// 0x0020 (0x0020 - 0x0000)
struct SteamGeneralLibrary_SteamUGCItemIdArray_Find final
{
public:
	TArray<struct FSteamUGCItemId>                Values;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSteamUGCItemId                        Value;                                             // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamGeneralLibrary_SteamUGCItemIdArray_Find) == 0x000008, "Wrong alignment on SteamGeneralLibrary_SteamUGCItemIdArray_Find");
static_assert(sizeof(SteamGeneralLibrary_SteamUGCItemIdArray_Find) == 0x000020, "Wrong size on SteamGeneralLibrary_SteamUGCItemIdArray_Find");
static_assert(offsetof(SteamGeneralLibrary_SteamUGCItemIdArray_Find, Values) == 0x000000, "Member 'SteamGeneralLibrary_SteamUGCItemIdArray_Find::Values' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_SteamUGCItemIdArray_Find, Value) == 0x000010, "Member 'SteamGeneralLibrary_SteamUGCItemIdArray_Find::Value' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_SteamUGCItemIdArray_Find, ReturnValue) == 0x000018, "Member 'SteamGeneralLibrary_SteamUGCItemIdArray_Find::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.SteamUGCItemIdArray_Remove
// 0x0020 (0x0020 - 0x0000)
struct SteamGeneralLibrary_SteamUGCItemIdArray_Remove final
{
public:
	TArray<struct FSteamUGCItemId>                Values;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSteamUGCItemId                        Value;                                             // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamGeneralLibrary_SteamUGCItemIdArray_Remove) == 0x000008, "Wrong alignment on SteamGeneralLibrary_SteamUGCItemIdArray_Remove");
static_assert(sizeof(SteamGeneralLibrary_SteamUGCItemIdArray_Remove) == 0x000020, "Wrong size on SteamGeneralLibrary_SteamUGCItemIdArray_Remove");
static_assert(offsetof(SteamGeneralLibrary_SteamUGCItemIdArray_Remove, Values) == 0x000000, "Member 'SteamGeneralLibrary_SteamUGCItemIdArray_Remove::Values' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_SteamUGCItemIdArray_Remove, Value) == 0x000010, "Member 'SteamGeneralLibrary_SteamUGCItemIdArray_Remove::Value' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_SteamUGCItemIdArray_Remove, ReturnValue) == 0x000018, "Member 'SteamGeneralLibrary_SteamUGCItemIdArray_Remove::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.SteamUpdateHandle_IsValid
// 0x0010 (0x0010 - 0x0000)
struct SteamGeneralLibrary_SteamUpdateHandle_IsValid final
{
public:
	struct FSteamUGCUpdateHandle                  Handle;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamGeneralLibrary_SteamUpdateHandle_IsValid) == 0x000008, "Wrong alignment on SteamGeneralLibrary_SteamUpdateHandle_IsValid");
static_assert(sizeof(SteamGeneralLibrary_SteamUpdateHandle_IsValid) == 0x000010, "Wrong size on SteamGeneralLibrary_SteamUpdateHandle_IsValid");
static_assert(offsetof(SteamGeneralLibrary_SteamUpdateHandle_IsValid, Handle) == 0x000000, "Member 'SteamGeneralLibrary_SteamUpdateHandle_IsValid::Handle' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_SteamUpdateHandle_IsValid, ReturnValue) == 0x000008, "Member 'SteamGeneralLibrary_SteamUpdateHandle_IsValid::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.ToString_SteamAppId
// 0x0018 (0x0018 - 0x0000)
struct SteamGeneralLibrary_ToString_SteamAppId final
{
public:
	struct FSteamAppId                            ID;                                                // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGeneralLibrary_ToString_SteamAppId) == 0x000008, "Wrong alignment on SteamGeneralLibrary_ToString_SteamAppId");
static_assert(sizeof(SteamGeneralLibrary_ToString_SteamAppId) == 0x000018, "Wrong size on SteamGeneralLibrary_ToString_SteamAppId");
static_assert(offsetof(SteamGeneralLibrary_ToString_SteamAppId, ID) == 0x000000, "Member 'SteamGeneralLibrary_ToString_SteamAppId::ID' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_ToString_SteamAppId, ReturnValue) == 0x000008, "Member 'SteamGeneralLibrary_ToString_SteamAppId::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.ToString_SteamDepotId
// 0x0018 (0x0018 - 0x0000)
struct SteamGeneralLibrary_ToString_SteamDepotId final
{
public:
	struct FSteamDepotId                          ID;                                                // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGeneralLibrary_ToString_SteamDepotId) == 0x000008, "Wrong alignment on SteamGeneralLibrary_ToString_SteamDepotId");
static_assert(sizeof(SteamGeneralLibrary_ToString_SteamDepotId) == 0x000018, "Wrong size on SteamGeneralLibrary_ToString_SteamDepotId");
static_assert(offsetof(SteamGeneralLibrary_ToString_SteamDepotId, ID) == 0x000000, "Member 'SteamGeneralLibrary_ToString_SteamDepotId::ID' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_ToString_SteamDepotId, ReturnValue) == 0x000008, "Member 'SteamGeneralLibrary_ToString_SteamDepotId::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.ToString_SteamItemId
// 0x0018 (0x0018 - 0x0000)
struct SteamGeneralLibrary_ToString_SteamItemId final
{
public:
	struct FSteamUGCItemId                        ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGeneralLibrary_ToString_SteamItemId) == 0x000008, "Wrong alignment on SteamGeneralLibrary_ToString_SteamItemId");
static_assert(sizeof(SteamGeneralLibrary_ToString_SteamItemId) == 0x000018, "Wrong size on SteamGeneralLibrary_ToString_SteamItemId");
static_assert(offsetof(SteamGeneralLibrary_ToString_SteamItemId, ID) == 0x000000, "Member 'SteamGeneralLibrary_ToString_SteamItemId::ID' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_ToString_SteamItemId, ReturnValue) == 0x000008, "Member 'SteamGeneralLibrary_ToString_SteamItemId::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.ToString_UInt32
// 0x0018 (0x0018 - 0x0000)
struct SteamGeneralLibrary_ToString_UInt32 final
{
public:
	struct FUInt32                                Value;                                             // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGeneralLibrary_ToString_UInt32) == 0x000008, "Wrong alignment on SteamGeneralLibrary_ToString_UInt32");
static_assert(sizeof(SteamGeneralLibrary_ToString_UInt32) == 0x000018, "Wrong size on SteamGeneralLibrary_ToString_UInt32");
static_assert(offsetof(SteamGeneralLibrary_ToString_UInt32, Value) == 0x000000, "Member 'SteamGeneralLibrary_ToString_UInt32::Value' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_ToString_UInt32, ReturnValue) == 0x000008, "Member 'SteamGeneralLibrary_ToString_UInt32::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.ToString_UInt64
// 0x0018 (0x0018 - 0x0000)
struct SteamGeneralLibrary_ToString_UInt64 final
{
public:
	struct FUInt64                                Value;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGeneralLibrary_ToString_UInt64) == 0x000008, "Wrong alignment on SteamGeneralLibrary_ToString_UInt64");
static_assert(sizeof(SteamGeneralLibrary_ToString_UInt64) == 0x000018, "Wrong size on SteamGeneralLibrary_ToString_UInt64");
static_assert(offsetof(SteamGeneralLibrary_ToString_UInt64, Value) == 0x000000, "Member 'SteamGeneralLibrary_ToString_UInt64::Value' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_ToString_UInt64, ReturnValue) == 0x000008, "Member 'SteamGeneralLibrary_ToString_UInt64::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.Uint32Array_AddUnique
// 0x0018 (0x0018 - 0x0000)
struct SteamGeneralLibrary_Uint32Array_AddUnique final
{
public:
	TArray<struct FUInt32>                        Values;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FUInt32                                Value;                                             // 0x0010(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGeneralLibrary_Uint32Array_AddUnique) == 0x000008, "Wrong alignment on SteamGeneralLibrary_Uint32Array_AddUnique");
static_assert(sizeof(SteamGeneralLibrary_Uint32Array_AddUnique) == 0x000018, "Wrong size on SteamGeneralLibrary_Uint32Array_AddUnique");
static_assert(offsetof(SteamGeneralLibrary_Uint32Array_AddUnique, Values) == 0x000000, "Member 'SteamGeneralLibrary_Uint32Array_AddUnique::Values' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_Uint32Array_AddUnique, Value) == 0x000010, "Member 'SteamGeneralLibrary_Uint32Array_AddUnique::Value' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_Uint32Array_AddUnique, ReturnValue) == 0x000014, "Member 'SteamGeneralLibrary_Uint32Array_AddUnique::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.Uint32Array_Contains
// 0x0018 (0x0018 - 0x0000)
struct SteamGeneralLibrary_Uint32Array_Contains final
{
public:
	TArray<struct FUInt32>                        Values;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FUInt32                                Value;                                             // 0x0010(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamGeneralLibrary_Uint32Array_Contains) == 0x000008, "Wrong alignment on SteamGeneralLibrary_Uint32Array_Contains");
static_assert(sizeof(SteamGeneralLibrary_Uint32Array_Contains) == 0x000018, "Wrong size on SteamGeneralLibrary_Uint32Array_Contains");
static_assert(offsetof(SteamGeneralLibrary_Uint32Array_Contains, Values) == 0x000000, "Member 'SteamGeneralLibrary_Uint32Array_Contains::Values' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_Uint32Array_Contains, Value) == 0x000010, "Member 'SteamGeneralLibrary_Uint32Array_Contains::Value' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_Uint32Array_Contains, ReturnValue) == 0x000014, "Member 'SteamGeneralLibrary_Uint32Array_Contains::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.Uint32Array_Find
// 0x0018 (0x0018 - 0x0000)
struct SteamGeneralLibrary_Uint32Array_Find final
{
public:
	TArray<struct FUInt32>                        Values;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FUInt32                                Value;                                             // 0x0010(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGeneralLibrary_Uint32Array_Find) == 0x000008, "Wrong alignment on SteamGeneralLibrary_Uint32Array_Find");
static_assert(sizeof(SteamGeneralLibrary_Uint32Array_Find) == 0x000018, "Wrong size on SteamGeneralLibrary_Uint32Array_Find");
static_assert(offsetof(SteamGeneralLibrary_Uint32Array_Find, Values) == 0x000000, "Member 'SteamGeneralLibrary_Uint32Array_Find::Values' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_Uint32Array_Find, Value) == 0x000010, "Member 'SteamGeneralLibrary_Uint32Array_Find::Value' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_Uint32Array_Find, ReturnValue) == 0x000014, "Member 'SteamGeneralLibrary_Uint32Array_Find::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.Uint32Array_Remove
// 0x0018 (0x0018 - 0x0000)
struct SteamGeneralLibrary_Uint32Array_Remove final
{
public:
	TArray<struct FUInt32>                        Values;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FUInt32                                Value;                                             // 0x0010(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGeneralLibrary_Uint32Array_Remove) == 0x000008, "Wrong alignment on SteamGeneralLibrary_Uint32Array_Remove");
static_assert(sizeof(SteamGeneralLibrary_Uint32Array_Remove) == 0x000018, "Wrong size on SteamGeneralLibrary_Uint32Array_Remove");
static_assert(offsetof(SteamGeneralLibrary_Uint32Array_Remove, Values) == 0x000000, "Member 'SteamGeneralLibrary_Uint32Array_Remove::Values' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_Uint32Array_Remove, Value) == 0x000010, "Member 'SteamGeneralLibrary_Uint32Array_Remove::Value' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_Uint32Array_Remove, ReturnValue) == 0x000014, "Member 'SteamGeneralLibrary_Uint32Array_Remove::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.Uint64Array_AddUnique
// 0x0020 (0x0020 - 0x0000)
struct SteamGeneralLibrary_Uint64Array_AddUnique final
{
public:
	TArray<struct FUInt64>                        Values;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FUInt64                                Value;                                             // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamGeneralLibrary_Uint64Array_AddUnique) == 0x000008, "Wrong alignment on SteamGeneralLibrary_Uint64Array_AddUnique");
static_assert(sizeof(SteamGeneralLibrary_Uint64Array_AddUnique) == 0x000020, "Wrong size on SteamGeneralLibrary_Uint64Array_AddUnique");
static_assert(offsetof(SteamGeneralLibrary_Uint64Array_AddUnique, Values) == 0x000000, "Member 'SteamGeneralLibrary_Uint64Array_AddUnique::Values' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_Uint64Array_AddUnique, Value) == 0x000010, "Member 'SteamGeneralLibrary_Uint64Array_AddUnique::Value' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_Uint64Array_AddUnique, ReturnValue) == 0x000018, "Member 'SteamGeneralLibrary_Uint64Array_AddUnique::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.Uint64Array_Contains
// 0x0020 (0x0020 - 0x0000)
struct SteamGeneralLibrary_Uint64Array_Contains final
{
public:
	TArray<struct FUInt64>                        Values;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FUInt64                                Value;                                             // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamGeneralLibrary_Uint64Array_Contains) == 0x000008, "Wrong alignment on SteamGeneralLibrary_Uint64Array_Contains");
static_assert(sizeof(SteamGeneralLibrary_Uint64Array_Contains) == 0x000020, "Wrong size on SteamGeneralLibrary_Uint64Array_Contains");
static_assert(offsetof(SteamGeneralLibrary_Uint64Array_Contains, Values) == 0x000000, "Member 'SteamGeneralLibrary_Uint64Array_Contains::Values' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_Uint64Array_Contains, Value) == 0x000010, "Member 'SteamGeneralLibrary_Uint64Array_Contains::Value' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_Uint64Array_Contains, ReturnValue) == 0x000018, "Member 'SteamGeneralLibrary_Uint64Array_Contains::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.Uint64Array_Find
// 0x0020 (0x0020 - 0x0000)
struct SteamGeneralLibrary_Uint64Array_Find final
{
public:
	TArray<struct FUInt64>                        Values;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FUInt64                                Value;                                             // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamGeneralLibrary_Uint64Array_Find) == 0x000008, "Wrong alignment on SteamGeneralLibrary_Uint64Array_Find");
static_assert(sizeof(SteamGeneralLibrary_Uint64Array_Find) == 0x000020, "Wrong size on SteamGeneralLibrary_Uint64Array_Find");
static_assert(offsetof(SteamGeneralLibrary_Uint64Array_Find, Values) == 0x000000, "Member 'SteamGeneralLibrary_Uint64Array_Find::Values' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_Uint64Array_Find, Value) == 0x000010, "Member 'SteamGeneralLibrary_Uint64Array_Find::Value' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_Uint64Array_Find, ReturnValue) == 0x000018, "Member 'SteamGeneralLibrary_Uint64Array_Find::ReturnValue' has a wrong offset!");

// Function SteamGeneral.SteamGeneralLibrary.Uint64Array_Remove
// 0x0020 (0x0020 - 0x0000)
struct SteamGeneralLibrary_Uint64Array_Remove final
{
public:
	TArray<struct FUInt64>                        Values;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FUInt64                                Value;                                             // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamGeneralLibrary_Uint64Array_Remove) == 0x000008, "Wrong alignment on SteamGeneralLibrary_Uint64Array_Remove");
static_assert(sizeof(SteamGeneralLibrary_Uint64Array_Remove) == 0x000020, "Wrong size on SteamGeneralLibrary_Uint64Array_Remove");
static_assert(offsetof(SteamGeneralLibrary_Uint64Array_Remove, Values) == 0x000000, "Member 'SteamGeneralLibrary_Uint64Array_Remove::Values' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_Uint64Array_Remove, Value) == 0x000010, "Member 'SteamGeneralLibrary_Uint64Array_Remove::Value' has a wrong offset!");
static_assert(offsetof(SteamGeneralLibrary_Uint64Array_Remove, ReturnValue) == 0x000018, "Member 'SteamGeneralLibrary_Uint64Array_Remove::ReturnValue' has a wrong offset!");

}

