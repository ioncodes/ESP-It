#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_PlayerController

#include "Basic.hpp"

#include "B_PlayerController_classes.hpp"
#include "B_PlayerController_parameters.hpp"


namespace SDK
{

// Function B_PlayerController.B_PlayerController_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "ReceiveTick");

	Params::B_PlayerController_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.ExecuteUbergraph_B_PlayerController
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::ExecuteUbergraph_B_PlayerController(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "ExecuteUbergraph_B_PlayerController");

	Params::B_PlayerController_C_ExecuteUbergraph_B_PlayerController Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.CollectLocalAchievement
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AchievementID                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::CollectLocalAchievement(class FName AchievementID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "CollectLocalAchievement");

	Params::B_PlayerController_C_CollectLocalAchievement Parms{};

	Parms.AchievementID = AchievementID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.CheckForDormant
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AB_PlayerController_C::CheckForDormant()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "CheckForDormant");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerController.B_PlayerController_C.CheckForTickingComps
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AB_PlayerController_C::CheckForTickingComps()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "CheckForTickingComps");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerController.B_PlayerController_C.CheckForSleepingProps
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AB_PlayerController_C::CheckForSleepingProps()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "CheckForSleepingProps");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerController.B_PlayerController_C.SetScopeMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Active                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::SetScopeMode(bool Active)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "SetScopeMode");

	Params::B_PlayerController_C_SetScopeMode Parms{};

	Parms.Active = Active;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.TickScopeMode
// (Public, BlueprintCallable, BlueprintEvent)

void AB_PlayerController_C::TickScopeMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "TickScopeMode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerController.B_PlayerController_C.AddNewPropToCollection
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PropID                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CategoryCount                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SetCount                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TotalCategory                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TotalSet                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::AddNewPropToCollection(int32 PropID, int32 CategoryCount, int32 SetCount, int32 TotalCategory, int32 TotalSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "AddNewPropToCollection");

	Params::B_PlayerController_C_AddNewPropToCollection Parms{};

	Parms.PropID = PropID;
	Parms.CategoryCount = CategoryCount;
	Parms.SetCount = SetCount;
	Parms.TotalCategory = TotalCategory;
	Parms.TotalSet = TotalSet;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.HandleStatChangeNotificationReceived
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EStatChangeReason                       Reason                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           StatApiName                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int64                                   NewValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::HandleStatChangeNotificationReceived(EStatChangeReason Reason, const class FString& StatApiName, int64 NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "HandleStatChangeNotificationReceived");

	Params::B_PlayerController_C_HandleStatChangeNotificationReceived Parms{};

	Parms.Reason = Reason;
	Parms.StatApiName = std::move(StatApiName);
	Parms.NewValue = NewValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.CreateItemPopupWidget
// (Public, BlueprintCallable, BlueprintEvent)

void AB_PlayerController_C::CreateItemPopupWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "CreateItemPopupWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerController.B_PlayerController_C.QuestUpdated
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FClientQuest                     Quest                                                  (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AB_PlayerController_C::QuestUpdated(const struct FClientQuest& Quest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "QuestUpdated");

	Params::B_PlayerController_C_QuestUpdated Parms{};

	Parms.Quest = std::move(Quest);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.RefreshPawn
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AB_PlayerController_C::RefreshPawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "RefreshPawn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerController.B_PlayerController_C.ConditionalShowSvnVersionWarning
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ServerVersion                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ClientVersion                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::ConditionalShowSvnVersionWarning(int32 ServerVersion, int32 ClientVersion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "ConditionalShowSvnVersionWarning");

	Params::B_PlayerController_C_ConditionalShowSvnVersionWarning Parms{};

	Parms.ServerVersion = ServerVersion;
	Parms.ClientVersion = ClientVersion;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.SelectPlayerTeam
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// ETeamID                                 SelectedTeam                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::SelectPlayerTeam(ETeamID SelectedTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "SelectPlayerTeam");

	Params::B_PlayerController_C_SelectPlayerTeam Parms{};

	Parms.SelectedTeam = SelectedTeam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.TickTournamentInitialization
// (Public, BlueprintCallable, BlueprintEvent)

void AB_PlayerController_C::TickTournamentInitialization()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "TickTournamentInitialization");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerController.B_PlayerController_C.TypeChatMessage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EChatType                               ChatType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::TypeChatMessage(EChatType ChatType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "TypeChatMessage");

	Params::B_PlayerController_C_TypeChatMessage Parms{};

	Parms.ChatType = ChatType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.GetPlayerControllerThirdPersonTraceDirection
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Range                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Start                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          End                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::GetPlayerControllerThirdPersonTraceDirection(double Range, struct FVector* Start, struct FVector* End)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "GetPlayerControllerThirdPersonTraceDirection");

	Params::B_PlayerController_C_GetPlayerControllerThirdPersonTraceDirection Parms{};

	Parms.Range = Range;

	UObject::ProcessEvent(Func, &Parms);

	if (Start != nullptr)
		*Start = std::move(Parms.Start);

	if (End != nullptr)
		*End = std::move(Parms.End);
}


// Function B_PlayerController.B_PlayerController_C.GetCurrentControlledWitchPawn
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class APawn*                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)

class APawn* AB_PlayerController_C::GetCurrentControlledWitchPawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "GetCurrentControlledWitchPawn");

	Params::B_PlayerController_C_GetCurrentControlledWitchPawn Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_PlayerController.B_PlayerController_C.GetControlRotationForMovementInput
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

struct FRotator AB_PlayerController_C::GetControlRotationForMovementInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "GetControlRotationForMovementInput");

	Params::B_PlayerController_C_GetControlRotationForMovementInput Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_PlayerController.B_PlayerController_C.IsUsingPlayerControllerMovementInput
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool AB_PlayerController_C::IsUsingPlayerControllerMovementInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "IsUsingPlayerControllerMovementInput");

	Params::B_PlayerController_C_IsUsingPlayerControllerMovementInput Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_PlayerController.B_PlayerController_C.HandleMoveUp
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::HandleMoveUp(double AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "HandleMoveUp");

	Params::B_PlayerController_C_HandleMoveUp Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.HandleMoveRight
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::HandleMoveRight(double AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "HandleMoveRight");

	Params::B_PlayerController_C_HandleMoveRight Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.HandleMoveForward
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::HandleMoveForward(double AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "HandleMoveForward");

	Params::B_PlayerController_C_HandleMoveForward Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.ReplicateAxisVector
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          NewForwardVector                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          NewRightVector                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          NewUpVector                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::ReplicateAxisVector(const struct FVector& NewForwardVector, const struct FVector& NewRightVector, const struct FVector& NewUpVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "ReplicateAxisVector");

	Params::B_PlayerController_C_ReplicateAxisVector Parms{};

	Parms.NewForwardVector = std::move(NewForwardVector);
	Parms.NewRightVector = std::move(NewRightVector);
	Parms.NewUpVector = std::move(NewUpVector);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.TickVisuals
// (Public, BlueprintCallable, BlueprintEvent)

void AB_PlayerController_C::TickVisuals()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "TickVisuals");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerController.B_PlayerController_C.RemoveAllReplicationProps
// (Public, BlueprintCallable, BlueprintEvent)

void AB_PlayerController_C::RemoveAllReplicationProps()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "RemoveAllReplicationProps");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerController.B_PlayerController_C.TickCollectedPropsForScale
// (Public, BlueprintCallable, BlueprintEvent)

void AB_PlayerController_C::TickCollectedPropsForScale()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "TickCollectedPropsForScale");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerController.B_PlayerController_C.VoteForKickFunc
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Kick                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::VoteForKickFunc(bool Kick)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "VoteForKickFunc");

	Params::B_PlayerController_C_VoteForKickFunc Parms{};

	Parms.Kick = Kick;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.StartKickVoteServerFunc
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerState*                     PlayerToKick                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FText                             ReasonToKick                                           (BlueprintVisible, BlueprintReadOnly, Parm)

void AB_PlayerController_C::StartKickVoteServerFunc(class APlayerState* PlayerToKick, const class FText& ReasonToKick)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "StartKickVoteServerFunc");

	Params::B_PlayerController_C_StartKickVoteServerFunc Parms{};

	Parms.PlayerToKick = PlayerToKick;
	Parms.ReasonToKick = std::move(ReasonToKick);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.SendChatMessageServerFunc
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EChatType                               ChatType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             InText                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AB_PlayerController_C::SendChatMessageServerFunc(EChatType ChatType, const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "SendChatMessageServerFunc");

	Params::B_PlayerController_C_SendChatMessageServerFunc Parms{};

	Parms.ChatType = ChatType;
	Parms.InText = std::move(InText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.CreateAndSendServerInfo
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AB_PlayerController_C::CreateAndSendServerInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "CreateAndSendServerInfo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerController.B_PlayerController_C.GetSkillWithName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           ClassName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// ESkillCategory                          Skill_Category                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           Skill                                                  (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::GetSkillWithName(const class FString& ClassName, ESkillCategory Skill_Category, class UClass** Skill)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "GetSkillWithName");

	Params::B_PlayerController_C_GetSkillWithName Parms{};

	Parms.ClassName = std::move(ClassName);
	Parms.Skill_Category = Skill_Category;

	UObject::ProcessEvent(Func, &Parms);

	if (Skill != nullptr)
		*Skill = Parms.Skill;
}


// Function B_PlayerController.B_PlayerController_C.TestRemoveItem
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AB_PlayerController_C::TestRemoveItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "TestRemoveItem");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerController.B_PlayerController_C.TestOutputCraftedItems
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FBlueprintOnlineItem>     Incrediants                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FBlueprintOnlineItem>     CraftedItems                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AB_PlayerController_C::TestOutputCraftedItems(TArray<struct FBlueprintOnlineItem>& Incrediants, TArray<struct FBlueprintOnlineItem>& CraftedItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "TestOutputCraftedItems");

	Params::B_PlayerController_C_TestOutputCraftedItems Parms{};

	Parms.Incrediants = std::move(Incrediants);
	Parms.CraftedItems = std::move(CraftedItems);

	UObject::ProcessEvent(Func, &Parms);

	Incrediants = std::move(Parms.Incrediants);
	CraftedItems = std::move(Parms.CraftedItems);
}


// Function B_PlayerController.B_PlayerController_C.TestExchangeCommonItem
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FBlueprintOnlineItem>     AllItems                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FBlueprintOnlineItem>     Incredients                                            (Parm, OutParm)

void AB_PlayerController_C::TestExchangeCommonItem(TArray<struct FBlueprintOnlineItem>& AllItems, TArray<struct FBlueprintOnlineItem>* Incredients)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "TestExchangeCommonItem");

	Params::B_PlayerController_C_TestExchangeCommonItem Parms{};

	Parms.AllItems = std::move(AllItems);

	UObject::ProcessEvent(Func, &Parms);

	AllItems = std::move(Parms.AllItems);

	if (Incredients != nullptr)
		*Incredients = std::move(Parms.Incredients);
}


// Function B_PlayerController.B_PlayerController_C.RefreshJiggleProps
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AB_PlayerController_C::RefreshJiggleProps()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "RefreshJiggleProps");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerController.B_PlayerController_C.TickCollectedPropsForWake
// (Public, BlueprintCallable, BlueprintEvent)

void AB_PlayerController_C::TickCollectedPropsForWake()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "TickCollectedPropsForWake");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerController.B_PlayerController_C.TryResetIdleTime
// (Public, BlueprintCallable, BlueprintEvent)

void AB_PlayerController_C::TryResetIdleTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "TryResetIdleTime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerController.B_PlayerController_C.TickPlayerStateInitialization
// (Public, BlueprintCallable, BlueprintEvent)

void AB_PlayerController_C::TickPlayerStateInitialization()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "TickPlayerStateInitialization");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerController.B_PlayerController_C.ShowPlayerListMenu
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    WasRelease                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::ShowPlayerListMenu(bool WasRelease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "ShowPlayerListMenu");

	Params::B_PlayerController_C_ShowPlayerListMenu Parms{};

	Parms.WasRelease = WasRelease;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.TickCollectedPropsForSleep
// (Public, BlueprintCallable, BlueprintEvent)

void AB_PlayerController_C::TickCollectedPropsForSleep()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "TickCollectedPropsForSleep");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerController.B_PlayerController_C.AddChatMessagesSent
// (Public, BlueprintCallable, BlueprintEvent)

void AB_PlayerController_C::AddChatMessagesSent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "AddChatMessagesSent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerController.B_PlayerController_C.UpdateChatBlocking
// (Public, BlueprintCallable, BlueprintEvent)

void AB_PlayerController_C::UpdateChatBlocking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "UpdateChatBlocking");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerController.B_PlayerController_C.UpdateChatViolation
// (Public, BlueprintCallable, BlueprintEvent)

void AB_PlayerController_C::UpdateChatViolation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "UpdateChatViolation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerController.B_PlayerController_C.UpdateChatMessagesPerSecond
// (Public, BlueprintCallable, BlueprintEvent)

void AB_PlayerController_C::UpdateChatMessagesPerSecond()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "UpdateChatMessagesPerSecond");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerController.B_PlayerController_C.MaxChatMessagesPerSecondSent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool AB_PlayerController_C::MaxChatMessagesPerSecondSent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "MaxChatMessagesPerSecondSent");

	Params::B_PlayerController_C_MaxChatMessagesPerSecondSent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_PlayerController.B_PlayerController_C.InpActEvt_Alt_M_K2Node_InputKeyEvent_5
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AB_PlayerController_C::InpActEvt_Alt_M_K2Node_InputKeyEvent_5(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "InpActEvt_Alt_M_K2Node_InputKeyEvent_5");

	Params::B_PlayerController_C_InpActEvt_Alt_M_K2Node_InputKeyEvent_5 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.InpActEvt_Alt_V_K2Node_InputKeyEvent_4
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AB_PlayerController_C::InpActEvt_Alt_V_K2Node_InputKeyEvent_4(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "InpActEvt_Alt_V_K2Node_InputKeyEvent_4");

	Params::B_PlayerController_C_InpActEvt_Alt_V_K2Node_InputKeyEvent_4 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.OnFailure_8EEBFB5E40DA48B300341CB094C09B40
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FBlueprintOnlineItem>     Items                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AB_PlayerController_C::OnFailure_8EEBFB5E40DA48B300341CB094C09B40(const TArray<struct FBlueprintOnlineItem>& Items)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "OnFailure_8EEBFB5E40DA48B300341CB094C09B40");

	Params::B_PlayerController_C_OnFailure_8EEBFB5E40DA48B300341CB094C09B40 Parms{};

	Parms.Items = std::move(Items);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.OnSuccess_8EEBFB5E40DA48B300341CB094C09B40
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FBlueprintOnlineItem>     Items                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AB_PlayerController_C::OnSuccess_8EEBFB5E40DA48B300341CB094C09B40(const TArray<struct FBlueprintOnlineItem>& Items)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "OnSuccess_8EEBFB5E40DA48B300341CB094C09B40");

	Params::B_PlayerController_C_OnSuccess_8EEBFB5E40DA48B300341CB094C09B40 Parms{};

	Parms.Items = std::move(Items);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.OnFailure_E115D7FB4CB46569B723769816421735
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FBlueprintOnlineItem>     Items                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AB_PlayerController_C::OnFailure_E115D7FB4CB46569B723769816421735(const TArray<struct FBlueprintOnlineItem>& Items)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "OnFailure_E115D7FB4CB46569B723769816421735");

	Params::B_PlayerController_C_OnFailure_E115D7FB4CB46569B723769816421735 Parms{};

	Parms.Items = std::move(Items);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.OnSuccess_E115D7FB4CB46569B723769816421735
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FBlueprintOnlineItem>     Items                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AB_PlayerController_C::OnSuccess_E115D7FB4CB46569B723769816421735(const TArray<struct FBlueprintOnlineItem>& Items)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "OnSuccess_E115D7FB4CB46569B723769816421735");

	Params::B_PlayerController_C_OnSuccess_E115D7FB4CB46569B723769816421735 Parms{};

	Parms.Items = std::move(Items);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.InpActEvt_Five_K2Node_InputKeyEvent_3
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AB_PlayerController_C::InpActEvt_Five_K2Node_InputKeyEvent_3(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "InpActEvt_Five_K2Node_InputKeyEvent_3");

	Params::B_PlayerController_C_InpActEvt_Five_K2Node_InputKeyEvent_3 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.InpActEvt_Menu_K2Node_InputActionEvent_15
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AB_PlayerController_C::InpActEvt_Menu_K2Node_InputActionEvent_15(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "InpActEvt_Menu_K2Node_InputActionEvent_15");

	Params::B_PlayerController_C_InpActEvt_Menu_K2Node_InputActionEvent_15 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.InpActEvt_HideUserInterface_K2Node_InputActionEvent_14
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AB_PlayerController_C::InpActEvt_HideUserInterface_K2Node_InputActionEvent_14(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "InpActEvt_HideUserInterface_K2Node_InputActionEvent_14");

	Params::B_PlayerController_C_InpActEvt_HideUserInterface_K2Node_InputActionEvent_14 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.InpActEvt_PlayerList_K2Node_InputActionEvent_13
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AB_PlayerController_C::InpActEvt_PlayerList_K2Node_InputActionEvent_13(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "InpActEvt_PlayerList_K2Node_InputActionEvent_13");

	Params::B_PlayerController_C_InpActEvt_PlayerList_K2Node_InputActionEvent_13 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.InpActEvt_PlayerList_K2Node_InputActionEvent_12
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AB_PlayerController_C::InpActEvt_PlayerList_K2Node_InputActionEvent_12(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "InpActEvt_PlayerList_K2Node_InputActionEvent_12");

	Params::B_PlayerController_C_InpActEvt_PlayerList_K2Node_InputActionEvent_12 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.InpActEvt_TakeScreenshoot_K2Node_InputActionEvent_11
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AB_PlayerController_C::InpActEvt_TakeScreenshoot_K2Node_InputActionEvent_11(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "InpActEvt_TakeScreenshoot_K2Node_InputActionEvent_11");

	Params::B_PlayerController_C_InpActEvt_TakeScreenshoot_K2Node_InputActionEvent_11 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.InpActEvt_ToggleHelp_K2Node_InputActionEvent_10
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AB_PlayerController_C::InpActEvt_ToggleHelp_K2Node_InputActionEvent_10(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "InpActEvt_ToggleHelp_K2Node_InputActionEvent_10");

	Params::B_PlayerController_C_InpActEvt_ToggleHelp_K2Node_InputActionEvent_10 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.InpActEvt_TypeChatMessage_K2Node_InputActionEvent_9
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AB_PlayerController_C::InpActEvt_TypeChatMessage_K2Node_InputActionEvent_9(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "InpActEvt_TypeChatMessage_K2Node_InputActionEvent_9");

	Params::B_PlayerController_C_InpActEvt_TypeChatMessage_K2Node_InputActionEvent_9 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.InpActEvt_F4_K2Node_InputKeyEvent_2
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AB_PlayerController_C::InpActEvt_F4_K2Node_InputKeyEvent_2(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "InpActEvt_F4_K2Node_InputKeyEvent_2");

	Params::B_PlayerController_C_InpActEvt_F4_K2Node_InputKeyEvent_2 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.InpActEvt_F5_K2Node_InputKeyEvent_1
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AB_PlayerController_C::InpActEvt_F5_K2Node_InputKeyEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "InpActEvt_F5_K2Node_InputKeyEvent_1");

	Params::B_PlayerController_C_InpActEvt_F5_K2Node_InputKeyEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.InpActEvt_TypeTeamChatMessage_K2Node_InputActionEvent_8
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AB_PlayerController_C::InpActEvt_TypeTeamChatMessage_K2Node_InputActionEvent_8(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "InpActEvt_TypeTeamChatMessage_K2Node_InputActionEvent_8");

	Params::B_PlayerController_C_InpActEvt_TypeTeamChatMessage_K2Node_InputActionEvent_8 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.InpActEvt_ChatScrollUp_K2Node_InputActionEvent_7
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AB_PlayerController_C::InpActEvt_ChatScrollUp_K2Node_InputActionEvent_7(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "InpActEvt_ChatScrollUp_K2Node_InputActionEvent_7");

	Params::B_PlayerController_C_InpActEvt_ChatScrollUp_K2Node_InputActionEvent_7 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.InpActEvt_ChatScrollDown_K2Node_InputActionEvent_6
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AB_PlayerController_C::InpActEvt_ChatScrollDown_K2Node_InputActionEvent_6(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "InpActEvt_ChatScrollDown_K2Node_InputActionEvent_6");

	Params::B_PlayerController_C_InpActEvt_ChatScrollDown_K2Node_InputActionEvent_6 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.InpActEvt_Jump_K2Node_InputActionEvent_5
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AB_PlayerController_C::InpActEvt_Jump_K2Node_InputActionEvent_5(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "InpActEvt_Jump_K2Node_InputActionEvent_5");

	Params::B_PlayerController_C_InpActEvt_Jump_K2Node_InputActionEvent_5 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.InpActEvt_Jump_K2Node_InputActionEvent_4
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AB_PlayerController_C::InpActEvt_Jump_K2Node_InputActionEvent_4(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "InpActEvt_Jump_K2Node_InputActionEvent_4");

	Params::B_PlayerController_C_InpActEvt_Jump_K2Node_InputActionEvent_4 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.InpActEvt_Crouch_K2Node_InputActionEvent_3
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AB_PlayerController_C::InpActEvt_Crouch_K2Node_InputActionEvent_3(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "InpActEvt_Crouch_K2Node_InputActionEvent_3");

	Params::B_PlayerController_C_InpActEvt_Crouch_K2Node_InputActionEvent_3 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.InpActEvt_Crouch_K2Node_InputActionEvent_2
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AB_PlayerController_C::InpActEvt_Crouch_K2Node_InputActionEvent_2(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "InpActEvt_Crouch_K2Node_InputActionEvent_2");

	Params::B_PlayerController_C_InpActEvt_Crouch_K2Node_InputActionEvent_2 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.InpActEvt_AnyKey_K2Node_InputKeyEvent_0
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AB_PlayerController_C::InpActEvt_AnyKey_K2Node_InputKeyEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "InpActEvt_AnyKey_K2Node_InputKeyEvent_0");

	Params::B_PlayerController_C_InpActEvt_AnyKey_K2Node_InputKeyEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.InpActEvt_ActivateScopeMode_K2Node_InputActionEvent_1
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AB_PlayerController_C::InpActEvt_ActivateScopeMode_K2Node_InputActionEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "InpActEvt_ActivateScopeMode_K2Node_InputActionEvent_1");

	Params::B_PlayerController_C_InpActEvt_ActivateScopeMode_K2Node_InputActionEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.InpActEvt_ActivateScopeMode_K2Node_InputActionEvent_0
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AB_PlayerController_C::InpActEvt_ActivateScopeMode_K2Node_InputActionEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "InpActEvt_ActivateScopeMode_K2Node_InputActionEvent_0");

	Params::B_PlayerController_C_InpActEvt_ActivateScopeMode_K2Node_InputActionEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.OnMessageProcessed_0FC174CF4F2A67E518FD869CEBC63EA6
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bSuccess                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           SanitizedMessage                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AB_PlayerController_C::OnMessageProcessed_0FC174CF4F2A67E518FD869CEBC63EA6(bool bSuccess, const class FString& SanitizedMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "OnMessageProcessed_0FC174CF4F2A67E518FD869CEBC63EA6");

	Params::B_PlayerController_C_OnMessageProcessed_0FC174CF4F2A67E518FD869CEBC63EA6 Parms{};

	Parms.bSuccess = bSuccess;
	Parms.SanitizedMessage = std::move(SanitizedMessage);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.OnCallFailed_0FC174CF4F2A67E518FD869CEBC63EA6
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bSuccess                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           SanitizedMessage                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AB_PlayerController_C::OnCallFailed_0FC174CF4F2A67E518FD869CEBC63EA6(bool bSuccess, const class FString& SanitizedMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "OnCallFailed_0FC174CF4F2A67E518FD869CEBC63EA6");

	Params::B_PlayerController_C_OnCallFailed_0FC174CF4F2A67E518FD869CEBC63EA6 Parms{};

	Parms.bSuccess = bSuccess;
	Parms.SanitizedMessage = std::move(SanitizedMessage);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.RequestGSStats
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AB_PlayerController_C::RequestGSStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "RequestGSStats");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerController.B_PlayerController_C.GetGSStat
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AB_PlayerController_C::GetGSStat()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "GetGSStat");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerController.B_PlayerController_C.TravelToMap
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           MapName                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AB_PlayerController_C::TravelToMap(const class FString& MapName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "TravelToMap");

	Params::B_PlayerController_C_TravelToMap Parms{};

	Parms.MapName = std::move(MapName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.GrantItemServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::GrantItemServer(int32 Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "GrantItemServer");

	Params::B_PlayerController_C_GrantItemServer Parms{};

	Parms.Item = Item;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.GrantDropExpServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Exp                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::GrantDropExpServer(int32 Exp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "GrantDropExpServer");

	Params::B_PlayerController_C_GrantDropExpServer Parms{};

	Parms.Exp = Exp;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.ShowDropExpClient
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CurrentExp                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MaxExp                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::ShowDropExpClient(int32 CurrentExp, int32 MaxExp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "ShowDropExpClient");

	Params::B_PlayerController_C_ShowDropExpClient Parms{};

	Parms.CurrentExp = CurrentExp;
	Parms.MaxExp = MaxExp;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.ShowDropExpServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AB_PlayerController_C::ShowDropExpServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "ShowDropExpServer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerController.B_PlayerController_C.JumpAllWitches
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AB_PlayerController_C::JumpAllWitches()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "JumpAllWitches");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerController.B_PlayerController_C.ToggleJiggleMode
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Force                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::ToggleJiggleMode(int32 Force)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "ToggleJiggleMode");

	Params::B_PlayerController_C_ToggleJiggleMode Parms{};

	Parms.Force = Force;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.ExecuteConsoleCommandFromClient
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Command                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AB_PlayerController_C::ExecuteConsoleCommandFromClient(const class FString& Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "ExecuteConsoleCommandFromClient");

	Params::B_PlayerController_C_ExecuteConsoleCommandFromClient Parms{};

	Parms.Command = std::move(Command);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.GrantPrestigeExp
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Exp                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::GrantPrestigeExp(int32 Exp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "GrantPrestigeExp");

	Params::B_PlayerController_C_GrantPrestigeExp Parms{};

	Parms.Exp = Exp;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.ShowPrestigeExpServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AB_PlayerController_C::ShowPrestigeExpServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "ShowPrestigeExpServer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerController.B_PlayerController_C.SetReadyServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    WantsToSpectate                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Ready                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::SetReadyServer(bool WantsToSpectate, bool Ready)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "SetReadyServer");

	Params::B_PlayerController_C_SetReadyServer Parms{};

	Parms.WantsToSpectate = WantsToSpectate;
	Parms.Ready = Ready;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.SendChatMessageServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             ChatMessage                                            (BlueprintVisible, BlueprintReadOnly, Parm)
// EChatType                               ChatType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::SendChatMessageServer(const class FText& ChatMessage, EChatType ChatType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "SendChatMessageServer");

	Params::B_PlayerController_C_SendChatMessageServer Parms{};

	Parms.ChatMessage = std::move(ChatMessage);
	Parms.ChatType = ChatType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AB_PlayerController_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerController.B_PlayerController_C.SelectHunterSkill
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Skill                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// ESkillCategory                          SkillCategory                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::SelectHunterSkill(class UClass* Skill, ESkillCategory SkillCategory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "SelectHunterSkill");

	Params::B_PlayerController_C_SelectHunterSkill Parms{};

	Parms.Skill = Skill;
	Parms.SkillCategory = SkillCategory;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.PutPropsToSleep
// (Net, NetReliable, HasOutParams, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   Actors                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FVector>                  SleepLocation                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FRotator>                 SleepRotation                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AB_PlayerController_C::PutPropsToSleep(const TArray<class AActor*>& Actors, const TArray<struct FVector>& SleepLocation, const TArray<struct FRotator>& SleepRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "PutPropsToSleep");

	Params::B_PlayerController_C_PutPropsToSleep Parms{};

	Parms.Actors = std::move(Actors);
	Parms.SleepLocation = std::move(SleepLocation);
	Parms.SleepRotation = std::move(SleepRotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.CollectSleepProp
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::CollectSleepProp(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "CollectSleepProp");

	Params::B_PlayerController_C_CollectSleepProp Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.SelectWitchSkill
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Skill                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// ESkillCategory                          SkillCategory                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::SelectWitchSkill(class UClass* Skill, ESkillCategory SkillCategory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "SelectWitchSkill");

	Params::B_PlayerController_C_SelectWitchSkill Parms{};

	Parms.Skill = Skill;
	Parms.SkillCategory = SkillCategory;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.StartKickVote
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerState*                     PlayerToKick                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FText                             Reason                                                 (BlueprintVisible, BlueprintReadOnly, Parm)

void AB_PlayerController_C::StartKickVote(class APlayerState* PlayerToKick, const class FText& Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "StartKickVote");

	Params::B_PlayerController_C_StartKickVote Parms{};

	Parms.PlayerToKick = PlayerToKick;
	Parms.Reason = std::move(Reason);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.VoteForKick
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Kick                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::VoteForKick(bool Kick)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "VoteForKick");

	Params::B_PlayerController_C_VoteForKick Parms{};

	Parms.Kick = Kick;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.SendWaitForNextKick
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::SendWaitForNextKick(int32 WaitTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "SendWaitForNextKick");

	Params::B_PlayerController_C_SendWaitForNextKick Parms{};

	Parms.WaitTime = WaitTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.NotifyIdleKickOwningClient
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void AB_PlayerController_C::NotifyIdleKickOwningClient()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "NotifyIdleKickOwningClient");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerController.B_PlayerController_C.PutPropsToSleepSuccess
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AB_PlayerController_C::PutPropsToSleepSuccess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "PutPropsToSleepSuccess");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerController.B_PlayerController_C.PutPropsToSleepFailedUnkownProp
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AB_PlayerController_C::PutPropsToSleepFailedUnkownProp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "PutPropsToSleepFailedUnkownProp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerController.B_PlayerController_C.CollectWakeProp
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::CollectWakeProp(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "CollectWakeProp");

	Params::B_PlayerController_C_CollectWakeProp Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.PutPropsToWake
// (Net, NetReliable, HasOutParams, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   Actors                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AB_PlayerController_C::PutPropsToWake(const TArray<class AActor*>& Actors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "PutPropsToWake");

	Params::B_PlayerController_C_PutPropsToWake Parms{};

	Parms.Actors = std::move(Actors);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.PutPropsToWakeSuccess
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AB_PlayerController_C::PutPropsToWakeSuccess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "PutPropsToWakeSuccess");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerController.B_PlayerController_C.PutPropsToWakeFailedUnkownProp
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AB_PlayerController_C::PutPropsToWakeFailedUnkownProp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "PutPropsToWakeFailedUnkownProp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerController.B_PlayerController_C.AddNewPropToCollectionClient
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PropID                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CountCategory                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CountSet                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TotalCategory                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TotalSet                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::AddNewPropToCollectionClient(int32 PropID, int32 CountCategory, int32 CountSet, int32 TotalCategory, int32 TotalSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "AddNewPropToCollectionClient");

	Params::B_PlayerController_C_AddNewPropToCollectionClient Parms{};

	Parms.PropID = PropID;
	Parms.CountCategory = CountCategory;
	Parms.CountSet = CountSet;
	Parms.TotalCategory = TotalCategory;
	Parms.TotalSet = TotalSet;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.RequestServerInfoServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AB_PlayerController_C::RequestServerInfoServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "RequestServerInfoServer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerController.B_PlayerController_C.RequestServerInfoClient
// (Net, NetReliable, HasOutParams, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FS_ServerStat>            ServerStats                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AB_PlayerController_C::RequestServerInfoClient(const TArray<struct FS_ServerStat>& ServerStats)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "RequestServerInfoClient");

	Params::B_PlayerController_C_RequestServerInfoClient Parms{};

	Parms.ServerStats = std::move(ServerStats);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.VoteMap
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::VoteMap(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "VoteMap");

	Params::B_PlayerController_C_VoteMap Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.ReportPlayerServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerState*                     PlayerToReport                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   ReasonIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::ReportPlayerServer(class APlayerState* PlayerToReport, int32 ReasonIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "ReportPlayerServer");

	Params::B_PlayerController_C_ReportPlayerServer Parms{};

	Parms.PlayerToReport = PlayerToReport;
	Parms.ReasonIndex = ReasonIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.ReportPlayerClient
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerState*                     ReportedPlayerState                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::ReportPlayerClient(class APlayerState* ReportedPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "ReportPlayerClient");

	Params::B_PlayerController_C_ReportPlayerClient Parms{};

	Parms.ReportedPlayerState = ReportedPlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.SetReady
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    WantsToSpectate                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Ready                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::SetReady(bool WantsToSpectate, bool Ready)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "SetReady");

	Params::B_PlayerController_C_SetReady Parms{};

	Parms.WantsToSpectate = WantsToSpectate;
	Parms.Ready = Ready;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.PlayHitmarker
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void AB_PlayerController_C::PlayHitmarker()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "PlayHitmarker");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerController.B_PlayerController_C.UpdatePropScales
// (Net, NetReliable, HasOutParams, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   Actors                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FVector>                  Scales                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<bool>                            StartAwakes                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<bool>                            Freezes                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AB_PlayerController_C::UpdatePropScales(const TArray<class AActor*>& Actors, const TArray<struct FVector>& Scales, const TArray<bool>& StartAwakes, const TArray<bool>& Freezes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "UpdatePropScales");

	Params::B_PlayerController_C_UpdatePropScales Parms{};

	Parms.Actors = std::move(Actors);
	Parms.Scales = std::move(Scales);
	Parms.StartAwakes = std::move(StartAwakes);
	Parms.Freezes = std::move(Freezes);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.CollectScaleProp
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::CollectScaleProp(const class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "CollectScaleProp");

	Params::B_PlayerController_C_CollectScaleProp Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.ScalePropsUnkownProp
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AB_PlayerController_C::ScalePropsUnkownProp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "ScalePropsUnkownProp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerController.B_PlayerController_C.ScalePropsSuccess
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AB_PlayerController_C::ScalePropsSuccess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "ScalePropsSuccess");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerController.B_PlayerController_C.InpAxisEvt_MoveForward_K2Node_InputAxisEvent_2
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::InpAxisEvt_MoveForward_K2Node_InputAxisEvent_2(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "InpAxisEvt_MoveForward_K2Node_InputAxisEvent_2");

	Params::B_PlayerController_C_InpAxisEvt_MoveForward_K2Node_InputAxisEvent_2 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.InpAxisEvt_MoveRight_K2Node_InputAxisEvent_3
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::InpAxisEvt_MoveRight_K2Node_InputAxisEvent_3(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "InpAxisEvt_MoveRight_K2Node_InputAxisEvent_3");

	Params::B_PlayerController_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_3 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.ServerSetCurrentAxisVector
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::ServerSetCurrentAxisVector(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "ServerSetCurrentAxisVector");

	Params::B_PlayerController_C_ServerSetCurrentAxisVector Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.InpAxisEvt_MoveUp_K2Node_InputAxisEvent_0
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::InpAxisEvt_MoveUp_K2Node_InputAxisEvent_0(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "InpAxisEvt_MoveUp_K2Node_InputAxisEvent_0");

	Params::B_PlayerController_C_InpAxisEvt_MoveUp_K2Node_InputAxisEvent_0 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.ServerJump
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AB_PlayerController_C::ServerJump()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "ServerJump");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerController.B_PlayerController_C.InitializeTournamentPlayers
// (Net, NetReliable, HasOutParams, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FString>                   PlayerIds                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FS_TournamentPlayer>      TournamentPlayers                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AB_PlayerController_C::InitializeTournamentPlayers(const TArray<class FString>& PlayerIds, const TArray<struct FS_TournamentPlayer>& TournamentPlayers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "InitializeTournamentPlayers");

	Params::B_PlayerController_C_InitializeTournamentPlayers Parms{};

	Parms.PlayerIds = std::move(PlayerIds);
	Parms.TournamentPlayers = std::move(TournamentPlayers);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.RequestTournamentPlayers
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AB_PlayerController_C::RequestTournamentPlayers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "RequestTournamentPlayers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerController.B_PlayerController_C.InpAxisKeyEvt_MouseWheelAxis_K2Node_InputAxisKeyEvent_0
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::InpAxisKeyEvt_MouseWheelAxis_K2Node_InputAxisKeyEvent_0(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "InpAxisKeyEvt_MouseWheelAxis_K2Node_InputAxisKeyEvent_0");

	Params::B_PlayerController_C_InpAxisKeyEvt_MouseWheelAxis_K2Node_InputAxisKeyEvent_0 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.ClientSetRevisionNumber
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   RevisionNumber                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::ClientSetRevisionNumber(int32 RevisionNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "ClientSetRevisionNumber");

	Params::B_PlayerController_C_ClientSetRevisionNumber Parms{};

	Parms.RevisionNumber = RevisionNumber;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.SelectPlayerTeamServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// ETeamID                                 SelectedTeam                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::SelectPlayerTeamServer(ETeamID SelectedTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "SelectPlayerTeamServer");

	Params::B_PlayerController_C_SelectPlayerTeamServer Parms{};

	Parms.SelectedTeam = SelectedTeam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.ClientSetWasKicked
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void AB_PlayerController_C::ClientSetWasKicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "ClientSetWasKicked");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerController.B_PlayerController_C.ClientSetServerDevMode
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsRunningInDevMode                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::ClientSetServerDevMode(bool IsRunningInDevMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "ClientSetServerDevMode");

	Params::B_PlayerController_C_ClientSetServerDevMode Parms{};

	Parms.IsRunningInDevMode = IsRunningInDevMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.CreateHUDExtension
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ExtensionName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           ExtensionClass                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::CreateHUDExtension(class FName ExtensionName, class UClass* ExtensionClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "CreateHUDExtension");

	Params::B_PlayerController_C_CreateHUDExtension Parms{};

	Parms.ExtensionName = ExtensionName;
	Parms.ExtensionClass = ExtensionClass;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.UpdateHUDExtensionFloat
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ExtensionName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ParameterName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ParameterValue                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::UpdateHUDExtensionFloat(class FName ExtensionName, class FName ParameterName, double ParameterValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "UpdateHUDExtensionFloat");

	Params::B_PlayerController_C_UpdateHUDExtensionFloat Parms{};

	Parms.ExtensionName = ExtensionName;
	Parms.ParameterName = ParameterName;
	Parms.ParameterValue = ParameterValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.DestroyHUDExtension
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ExtensionName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::DestroyHUDExtension(class FName ExtensionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "DestroyHUDExtension");

	Params::B_PlayerController_C_DestroyHUDExtension Parms{};

	Parms.ExtensionName = ExtensionName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.UpdateHUDExtensionInt
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ExtensionName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ParameterName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ParameterValue                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::UpdateHUDExtensionInt(class FName ExtensionName, class FName ParameterName, int32 ParameterValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "UpdateHUDExtensionInt");

	Params::B_PlayerController_C_UpdateHUDExtensionInt Parms{};

	Parms.ExtensionName = ExtensionName;
	Parms.ParameterName = ParameterName;
	Parms.ParameterValue = ParameterValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.UpdateHUDExtensionText
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ExtensionName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ParameterName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             ParameterValue                                         (BlueprintVisible, BlueprintReadOnly, Parm)

void AB_PlayerController_C::UpdateHUDExtensionText(class FName ExtensionName, class FName ParameterName, const class FText& ParameterValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "UpdateHUDExtensionText");

	Params::B_PlayerController_C_UpdateHUDExtensionText Parms{};

	Parms.ExtensionName = ExtensionName;
	Parms.ParameterName = ParameterName;
	Parms.ParameterValue = std::move(ParameterValue);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.RefreshPawnServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    FromWardrobe                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::RefreshPawnServer(bool FromWardrobe)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "RefreshPawnServer");

	Params::B_PlayerController_C_RefreshPawnServer Parms{};

	Parms.FromWardrobe = FromWardrobe;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.ToggleRefreshPawnInputClient
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InputEnabled                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_Wardrobe_C*                   Wardrobe                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::ToggleRefreshPawnInputClient(bool InputEnabled, class ABP_Wardrobe_C* Wardrobe)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "ToggleRefreshPawnInputClient");

	Params::B_PlayerController_C_ToggleRefreshPawnInputClient Parms{};

	Parms.InputEnabled = InputEnabled;
	Parms.Wardrobe = Wardrobe;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.ServerHandleLastHit
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AB_PlayerController_C::ServerHandleLastHit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "ServerHandleLastHit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerController.B_PlayerController_C.UnregisterLocalEvents
// (BlueprintCallable, BlueprintEvent)

void AB_PlayerController_C::UnregisterLocalEvents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "UnregisterLocalEvents");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerController.B_PlayerController_C.RegisterLocalEvents
// (BlueprintCallable, BlueprintEvent)

void AB_PlayerController_C::RegisterLocalEvents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "RegisterLocalEvents");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerController.B_PlayerController_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "ReceiveEndPlay");

	Params::B_PlayerController_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.HandleShowLocalMessage
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Message                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AB_PlayerController_C::HandleShowLocalMessage(const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "HandleShowLocalMessage");

	Params::B_PlayerController_C_HandleShowLocalMessage Parms{};

	Parms.Message = std::move(Message);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.HandleDisconnectFromGameCommand
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Code                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Message                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AB_PlayerController_C::HandleDisconnectFromGameCommand(int32 Code, const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "HandleDisconnectFromGameCommand");

	Params::B_PlayerController_C_HandleDisconnectFromGameCommand Parms{};

	Parms.Code = Code;
	Parms.Message = std::move(Message);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerController.B_PlayerController_C.SendSanitizedPlayerJoinedMessageToAll
// (BlueprintCallable, BlueprintEvent)

void AB_PlayerController_C::SendSanitizedPlayerJoinedMessageToAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "SendSanitizedPlayerJoinedMessageToAll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerController.B_PlayerController_C.ServerHandlePostLogin
// (BlueprintCallable, BlueprintEvent)

void AB_PlayerController_C::ServerHandlePostLogin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "ServerHandlePostLogin");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerController.B_PlayerController_C.ShouldShowSvnWarning
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   ServerVersion                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ClientVersion                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PlayerController_C::ShouldShowSvnWarning(int32 ServerVersion, int32 ClientVersion, bool* Result) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerController_C", "ShouldShowSvnWarning");

	Params::B_PlayerController_C_ShouldShowSvnWarning Parms{};

	Parms.ServerVersion = ServerVersion;
	Parms.ClientVersion = ClientVersion;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}

}

