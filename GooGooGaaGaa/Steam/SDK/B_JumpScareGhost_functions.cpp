#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_JumpScareGhost

#include "Basic.hpp"

#include "B_JumpScareGhost_classes.hpp"
#include "B_JumpScareGhost_parameters.hpp"


namespace SDK
{

// Function B_JumpScareGhost.B_JumpScareGhost_C.BndEvt__SphereCollision_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void AB_JumpScareGhost_C::BndEvt__SphereCollision_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_JumpScareGhost_C", "BndEvt__SphereCollision_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");

	Params::B_JumpScareGhost_C_BndEvt__SphereCollision_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_JumpScareGhost.B_JumpScareGhost_C.CanTeleport
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CanTeleport_0                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_JumpScareGhost_C::CanTeleport(bool* CanTeleport_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_JumpScareGhost_C", "CanTeleport");

	Params::B_JumpScareGhost_C_CanTeleport Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CanTeleport_0 != nullptr)
		*CanTeleport_0 = Parms.CanTeleport_0;
}


// Function B_JumpScareGhost.B_JumpScareGhost_C.ExecuteUbergraph_B_JumpScareGhost
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_JumpScareGhost_C::ExecuteUbergraph_B_JumpScareGhost(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_JumpScareGhost_C", "ExecuteUbergraph_B_JumpScareGhost");

	Params::B_JumpScareGhost_C_ExecuteUbergraph_B_JumpScareGhost Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_JumpScareGhost.B_JumpScareGhost_C.HandleOverlap
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Overlapping_Actor                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_JumpScareGhost_C::HandleOverlap(class UObject* Overlapping_Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_JumpScareGhost_C", "HandleOverlap");

	Params::B_JumpScareGhost_C_HandleOverlap Parms{};

	Parms.Overlapping_Actor = Overlapping_Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_JumpScareGhost.B_JumpScareGhost_C.InitializeRules
// (Public, BlueprintCallable, BlueprintEvent)

void AB_JumpScareGhost_C::InitializeRules()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_JumpScareGhost_C", "InitializeRules");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_JumpScareGhost.B_JumpScareGhost_C.PostProccedTeleport
// (Public, BlueprintCallable, BlueprintEvent)

void AB_JumpScareGhost_C::PostProccedTeleport()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_JumpScareGhost_C", "PostProccedTeleport");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_JumpScareGhost.B_JumpScareGhost_C.ProceedTeleport
// (Public, BlueprintCallable, BlueprintEvent)

void AB_JumpScareGhost_C::ProceedTeleport()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_JumpScareGhost_C", "ProceedTeleport");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_JumpScareGhost.B_JumpScareGhost_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AB_JumpScareGhost_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_JumpScareGhost_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_JumpScareGhost.B_JumpScareGhost_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_JumpScareGhost_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_JumpScareGhost_C", "ReceiveTick");

	Params::B_JumpScareGhost_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_JumpScareGhost.B_JumpScareGhost_C.SetLuaqVisibilityForHunters
// (Protected, BlueprintCallable, BlueprintEvent)

void AB_JumpScareGhost_C::SetLuaqVisibilityForHunters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_JumpScareGhost_C", "SetLuaqVisibilityForHunters");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_JumpScareGhost.B_JumpScareGhost_C.TearDown
// (Public, BlueprintCallable, BlueprintEvent)

void AB_JumpScareGhost_C::TearDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_JumpScareGhost_C", "TearDown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_JumpScareGhost.B_JumpScareGhost_C.TearUp
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Owner_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            Instigator_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_JumpScareGhost_C::TearUp(const struct FTransform& SpawnTransform, class AActor* Owner_0, class APawn* Instigator_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_JumpScareGhost_C", "TearUp");

	Params::B_JumpScareGhost_C_TearUp Parms{};

	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.Owner_0 = Owner_0;
	Parms.Instigator_0 = Instigator_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_JumpScareGhost.B_JumpScareGhost_C.UpdateScaleVelocityAndBlindDuration
// (Protected, BlueprintCallable, BlueprintEvent)

void AB_JumpScareGhost_C::UpdateScaleVelocityAndBlindDuration()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_JumpScareGhost_C", "UpdateScaleVelocityAndBlindDuration");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_JumpScareGhost.B_JumpScareGhost_C.UpdateVelocityVector
// (Protected, BlueprintCallable, BlueprintEvent)

void AB_JumpScareGhost_C::UpdateVelocityVector()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_JumpScareGhost_C", "UpdateVelocityVector");

	UObject::ProcessEvent(Func, nullptr);
}

}

