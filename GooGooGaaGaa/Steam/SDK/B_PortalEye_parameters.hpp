#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_PortalEye

#include "Basic.hpp"

#include "InputCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function B_PortalEye.B_PortalEye_C.ExecuteUbergraph_B_PortalEye
// 0x0218 (0x0218 - 0x0000)
struct B_PortalEye_C_ExecuteUbergraph_B_PortalEye final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            K2Node_Event_OldController;                        // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_1;                     // 0x0010(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key;                       // 0x0028(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable;                              // 0x0040(0x0018)(HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue_5;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue_4;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorRightVector_ReturnValue;          // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_ImpostorHUD_C*                      K2Node_DynamicCast_AsWB_Impostor_HUD;              // 0x00B8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   Temp_struct_Variable_1;                            // 0x00C8(0x0018)(HasGetValueTypeHash)
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_2;                     // 0x00E8(0x0018)(HasGetValueTypeHash)
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue_1;       // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue_3;                 // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue_2;                 // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue_1;                 // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue;                   // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_4;      // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_5;      // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue_2;       // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_3;                     // 0x0150(0x0018)(HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_6;      // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue_3;       // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17C[0x4];                                      // 0x017C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_7;      // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorUpVector_ReturnValue;             // 0x0188(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            K2Node_Event_NewController;                        // 0x01A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class AB_ImpostorWitchPortal_C*>       CallFunc_GetAllActorsOfClass_OutActors;            // 0x01A8(0x0010)(ReferenceParm)
	class AB_ImpostorWitchPortal_C*               CallFunc_Array_Get_Item;                           // 0x01B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UActorComponent*                        CallFunc_AddActorComponent_ReturnValue;            // 0x01C0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UB_BaseSkill_C*                         K2Node_DynamicCast_AsB_Base_Skill;                 // 0x01C8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D1[0x3];                                      // 0x01D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x01D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1DA[0x6];                                      // 0x01DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1;   // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_AddControllerYawInput_Val_ImplicitCast;   // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_AddControllerPitchInput_Val_ImplicitCast; // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast_2;   // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast_3;   // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_AddControllerYawInput_Val_ImplicitCast_1; // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_AddControllerPitchInput_Val_ImplicitCast_1; // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_AddMovementInput_ScaleValue_ImplicitCast; // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye) == 0x000008, "Wrong alignment on B_PortalEye_C_ExecuteUbergraph_B_PortalEye");
static_assert(sizeof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye) == 0x000218, "Wrong size on B_PortalEye_C_ExecuteUbergraph_B_PortalEye");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, EntryPoint) == 0x000000, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::EntryPoint' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, K2Node_Event_OldController) == 0x000008, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::K2Node_Event_OldController' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, K2Node_InputActionEvent_Key_1) == 0x000010, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::K2Node_InputActionEvent_Key_1' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, K2Node_InputActionEvent_Key) == 0x000028, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::K2Node_InputActionEvent_Key' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, Temp_struct_Variable) == 0x000040, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, Temp_int_Array_Index_Variable) == 0x000058, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, K2Node_InputAxisEvent_AxisValue_5) == 0x00005C, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::K2Node_InputAxisEvent_AxisValue_5' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, K2Node_InputAxisEvent_AxisValue_4) == 0x000060, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::K2Node_InputAxisEvent_AxisValue_4' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, CallFunc_GetActorForwardVector_ReturnValue) == 0x000068, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, CallFunc_GetActorRightVector_ReturnValue) == 0x000080, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::CallFunc_GetActorRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, Temp_int_Loop_Counter_Variable) == 0x000098, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, CallFunc_GetGameInstance_ReturnValue) == 0x0000A0, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, K2Node_DynamicCast_AsB_Game_Instance) == 0x0000A8, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, K2Node_DynamicCast_bSuccess) == 0x0000B0, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, CallFunc_Add_IntInt_ReturnValue) == 0x0000B4, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, K2Node_DynamicCast_AsWB_Impostor_HUD) == 0x0000B8, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::K2Node_DynamicCast_AsWB_Impostor_HUD' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, K2Node_DynamicCast_bSuccess_1) == 0x0000C0, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, Temp_struct_Variable_1) == 0x0000C8, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x0000E0, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, K2Node_InputActionEvent_Key_2) == 0x0000E8, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::K2Node_InputActionEvent_Key_2' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, CallFunc_GetWorldDeltaSeconds_ReturnValue_1) == 0x000100, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::CallFunc_GetWorldDeltaSeconds_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, K2Node_InputAxisEvent_AxisValue_3) == 0x000108, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::K2Node_InputAxisEvent_AxisValue_3' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, K2Node_InputAxisEvent_AxisValue_2) == 0x00010C, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::K2Node_InputAxisEvent_AxisValue_2' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000110, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000118, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000120, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x000128, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, K2Node_InputAxisEvent_AxisValue_1) == 0x000130, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::K2Node_InputAxisEvent_AxisValue_1' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, K2Node_InputAxisEvent_AxisValue) == 0x000134, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::K2Node_InputAxisEvent_AxisValue' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, CallFunc_Multiply_DoubleDouble_ReturnValue_4) == 0x000138, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::CallFunc_Multiply_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, CallFunc_Multiply_DoubleDouble_ReturnValue_5) == 0x000140, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::CallFunc_Multiply_DoubleDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, CallFunc_GetWorldDeltaSeconds_ReturnValue_2) == 0x000148, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::CallFunc_GetWorldDeltaSeconds_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, K2Node_InputActionEvent_Key_3) == 0x000150, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::K2Node_InputActionEvent_Key_3' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, CallFunc_Multiply_DoubleDouble_ReturnValue_6) == 0x000168, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::CallFunc_Multiply_DoubleDouble_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, CallFunc_GetWorldDeltaSeconds_ReturnValue_3) == 0x000170, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::CallFunc_GetWorldDeltaSeconds_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, K2Node_Event_DeltaSeconds) == 0x000178, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, CallFunc_Multiply_DoubleDouble_ReturnValue_7) == 0x000180, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::CallFunc_Multiply_DoubleDouble_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, CallFunc_GetActorUpVector_ReturnValue) == 0x000188, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::CallFunc_GetActorUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, K2Node_Event_NewController) == 0x0001A0, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::K2Node_Event_NewController' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, CallFunc_GetAllActorsOfClass_OutActors) == 0x0001A8, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, CallFunc_Array_Get_Item) == 0x0001B8, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, CallFunc_AddActorComponent_ReturnValue) == 0x0001C0, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::CallFunc_AddActorComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, K2Node_DynamicCast_AsB_Base_Skill) == 0x0001C8, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::K2Node_DynamicCast_AsB_Base_Skill' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, K2Node_DynamicCast_bSuccess_2) == 0x0001D0, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, CallFunc_Array_Length_ReturnValue) == 0x0001D4, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, CallFunc_Less_IntInt_ReturnValue) == 0x0001D8, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, CallFunc_IsLocallyControlled_ReturnValue) == 0x0001D9, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x0001E0, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1) == 0x0001E8, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, CallFunc_AddControllerYawInput_Val_ImplicitCast) == 0x0001F0, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::CallFunc_AddControllerYawInput_Val_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, CallFunc_AddControllerPitchInput_Val_ImplicitCast) == 0x0001F4, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::CallFunc_AddControllerPitchInput_Val_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, CallFunc_Multiply_DoubleDouble_A_ImplicitCast_2) == 0x0001F8, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::CallFunc_Multiply_DoubleDouble_A_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, CallFunc_Multiply_DoubleDouble_A_ImplicitCast_3) == 0x000200, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::CallFunc_Multiply_DoubleDouble_A_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, CallFunc_AddControllerYawInput_Val_ImplicitCast_1) == 0x000208, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::CallFunc_AddControllerYawInput_Val_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, CallFunc_AddControllerPitchInput_Val_ImplicitCast_1) == 0x00020C, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::CallFunc_AddControllerPitchInput_Val_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(B_PortalEye_C_ExecuteUbergraph_B_PortalEye, CallFunc_AddMovementInput_ScaleValue_ImplicitCast) == 0x000210, "Member 'B_PortalEye_C_ExecuteUbergraph_B_PortalEye::CallFunc_AddMovementInput_ScaleValue_ImplicitCast' has a wrong offset!");

// Function B_PortalEye.B_PortalEye_C.InpActEvt_Crouch_K2Node_InputActionEvent_0
// 0x0018 (0x0018 - 0x0000)
struct B_PortalEye_C_InpActEvt_Crouch_K2Node_InputActionEvent_0 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(B_PortalEye_C_InpActEvt_Crouch_K2Node_InputActionEvent_0) == 0x000008, "Wrong alignment on B_PortalEye_C_InpActEvt_Crouch_K2Node_InputActionEvent_0");
static_assert(sizeof(B_PortalEye_C_InpActEvt_Crouch_K2Node_InputActionEvent_0) == 0x000018, "Wrong size on B_PortalEye_C_InpActEvt_Crouch_K2Node_InputActionEvent_0");
static_assert(offsetof(B_PortalEye_C_InpActEvt_Crouch_K2Node_InputActionEvent_0, Key) == 0x000000, "Member 'B_PortalEye_C_InpActEvt_Crouch_K2Node_InputActionEvent_0::Key' has a wrong offset!");

// Function B_PortalEye.B_PortalEye_C.InpActEvt_Crouch_K2Node_InputActionEvent_1
// 0x0018 (0x0018 - 0x0000)
struct B_PortalEye_C_InpActEvt_Crouch_K2Node_InputActionEvent_1 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(B_PortalEye_C_InpActEvt_Crouch_K2Node_InputActionEvent_1) == 0x000008, "Wrong alignment on B_PortalEye_C_InpActEvt_Crouch_K2Node_InputActionEvent_1");
static_assert(sizeof(B_PortalEye_C_InpActEvt_Crouch_K2Node_InputActionEvent_1) == 0x000018, "Wrong size on B_PortalEye_C_InpActEvt_Crouch_K2Node_InputActionEvent_1");
static_assert(offsetof(B_PortalEye_C_InpActEvt_Crouch_K2Node_InputActionEvent_1, Key) == 0x000000, "Member 'B_PortalEye_C_InpActEvt_Crouch_K2Node_InputActionEvent_1::Key' has a wrong offset!");

// Function B_PortalEye.B_PortalEye_C.InpActEvt_Jump_K2Node_InputActionEvent_2
// 0x0018 (0x0018 - 0x0000)
struct B_PortalEye_C_InpActEvt_Jump_K2Node_InputActionEvent_2 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(B_PortalEye_C_InpActEvt_Jump_K2Node_InputActionEvent_2) == 0x000008, "Wrong alignment on B_PortalEye_C_InpActEvt_Jump_K2Node_InputActionEvent_2");
static_assert(sizeof(B_PortalEye_C_InpActEvt_Jump_K2Node_InputActionEvent_2) == 0x000018, "Wrong size on B_PortalEye_C_InpActEvt_Jump_K2Node_InputActionEvent_2");
static_assert(offsetof(B_PortalEye_C_InpActEvt_Jump_K2Node_InputActionEvent_2, Key) == 0x000000, "Member 'B_PortalEye_C_InpActEvt_Jump_K2Node_InputActionEvent_2::Key' has a wrong offset!");

// Function B_PortalEye.B_PortalEye_C.InpActEvt_Jump_K2Node_InputActionEvent_3
// 0x0018 (0x0018 - 0x0000)
struct B_PortalEye_C_InpActEvt_Jump_K2Node_InputActionEvent_3 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(B_PortalEye_C_InpActEvt_Jump_K2Node_InputActionEvent_3) == 0x000008, "Wrong alignment on B_PortalEye_C_InpActEvt_Jump_K2Node_InputActionEvent_3");
static_assert(sizeof(B_PortalEye_C_InpActEvt_Jump_K2Node_InputActionEvent_3) == 0x000018, "Wrong size on B_PortalEye_C_InpActEvt_Jump_K2Node_InputActionEvent_3");
static_assert(offsetof(B_PortalEye_C_InpActEvt_Jump_K2Node_InputActionEvent_3, Key) == 0x000000, "Member 'B_PortalEye_C_InpActEvt_Jump_K2Node_InputActionEvent_3::Key' has a wrong offset!");

// Function B_PortalEye.B_PortalEye_C.InpAxisEvt_LookUp_K2Node_InputAxisEvent_172
// 0x0004 (0x0004 - 0x0000)
struct B_PortalEye_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_172 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_PortalEye_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_172) == 0x000004, "Wrong alignment on B_PortalEye_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_172");
static_assert(sizeof(B_PortalEye_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_172) == 0x000004, "Wrong size on B_PortalEye_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_172");
static_assert(offsetof(B_PortalEye_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_172, AxisValue) == 0x000000, "Member 'B_PortalEye_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_172::AxisValue' has a wrong offset!");

// Function B_PortalEye.B_PortalEye_C.InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_11
// 0x0004 (0x0004 - 0x0000)
struct B_PortalEye_C_InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_11 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_PortalEye_C_InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_11) == 0x000004, "Wrong alignment on B_PortalEye_C_InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_11");
static_assert(sizeof(B_PortalEye_C_InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_11) == 0x000004, "Wrong size on B_PortalEye_C_InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_11");
static_assert(offsetof(B_PortalEye_C_InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_11, AxisValue) == 0x000000, "Member 'B_PortalEye_C_InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_11::AxisValue' has a wrong offset!");

// Function B_PortalEye.B_PortalEye_C.InpAxisEvt_MoveForward_K2Node_InputAxisEvent_181
// 0x0004 (0x0004 - 0x0000)
struct B_PortalEye_C_InpAxisEvt_MoveForward_K2Node_InputAxisEvent_181 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_PortalEye_C_InpAxisEvt_MoveForward_K2Node_InputAxisEvent_181) == 0x000004, "Wrong alignment on B_PortalEye_C_InpAxisEvt_MoveForward_K2Node_InputAxisEvent_181");
static_assert(sizeof(B_PortalEye_C_InpAxisEvt_MoveForward_K2Node_InputAxisEvent_181) == 0x000004, "Wrong size on B_PortalEye_C_InpAxisEvt_MoveForward_K2Node_InputAxisEvent_181");
static_assert(offsetof(B_PortalEye_C_InpAxisEvt_MoveForward_K2Node_InputAxisEvent_181, AxisValue) == 0x000000, "Member 'B_PortalEye_C_InpAxisEvt_MoveForward_K2Node_InputAxisEvent_181::AxisValue' has a wrong offset!");

// Function B_PortalEye.B_PortalEye_C.InpAxisEvt_MoveRight_K2Node_InputAxisEvent_192
// 0x0004 (0x0004 - 0x0000)
struct B_PortalEye_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_192 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_PortalEye_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_192) == 0x000004, "Wrong alignment on B_PortalEye_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_192");
static_assert(sizeof(B_PortalEye_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_192) == 0x000004, "Wrong size on B_PortalEye_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_192");
static_assert(offsetof(B_PortalEye_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_192, AxisValue) == 0x000000, "Member 'B_PortalEye_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_192::AxisValue' has a wrong offset!");

// Function B_PortalEye.B_PortalEye_C.InpAxisEvt_Turn_K2Node_InputAxisEvent_157
// 0x0004 (0x0004 - 0x0000)
struct B_PortalEye_C_InpAxisEvt_Turn_K2Node_InputAxisEvent_157 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_PortalEye_C_InpAxisEvt_Turn_K2Node_InputAxisEvent_157) == 0x000004, "Wrong alignment on B_PortalEye_C_InpAxisEvt_Turn_K2Node_InputAxisEvent_157");
static_assert(sizeof(B_PortalEye_C_InpAxisEvt_Turn_K2Node_InputAxisEvent_157) == 0x000004, "Wrong size on B_PortalEye_C_InpAxisEvt_Turn_K2Node_InputAxisEvent_157");
static_assert(offsetof(B_PortalEye_C_InpAxisEvt_Turn_K2Node_InputAxisEvent_157, AxisValue) == 0x000000, "Member 'B_PortalEye_C_InpAxisEvt_Turn_K2Node_InputAxisEvent_157::AxisValue' has a wrong offset!");

// Function B_PortalEye.B_PortalEye_C.InpAxisEvt_TurnRate_K2Node_InputAxisEvent_1
// 0x0004 (0x0004 - 0x0000)
struct B_PortalEye_C_InpAxisEvt_TurnRate_K2Node_InputAxisEvent_1 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_PortalEye_C_InpAxisEvt_TurnRate_K2Node_InputAxisEvent_1) == 0x000004, "Wrong alignment on B_PortalEye_C_InpAxisEvt_TurnRate_K2Node_InputAxisEvent_1");
static_assert(sizeof(B_PortalEye_C_InpAxisEvt_TurnRate_K2Node_InputAxisEvent_1) == 0x000004, "Wrong size on B_PortalEye_C_InpAxisEvt_TurnRate_K2Node_InputAxisEvent_1");
static_assert(offsetof(B_PortalEye_C_InpAxisEvt_TurnRate_K2Node_InputAxisEvent_1, AxisValue) == 0x000000, "Member 'B_PortalEye_C_InpAxisEvt_TurnRate_K2Node_InputAxisEvent_1::AxisValue' has a wrong offset!");

// Function B_PortalEye.B_PortalEye_C.ReceivePossessed
// 0x0008 (0x0008 - 0x0000)
struct B_PortalEye_C_ReceivePossessed final
{
public:
	class AController*                            NewController;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_PortalEye_C_ReceivePossessed) == 0x000008, "Wrong alignment on B_PortalEye_C_ReceivePossessed");
static_assert(sizeof(B_PortalEye_C_ReceivePossessed) == 0x000008, "Wrong size on B_PortalEye_C_ReceivePossessed");
static_assert(offsetof(B_PortalEye_C_ReceivePossessed, NewController) == 0x000000, "Member 'B_PortalEye_C_ReceivePossessed::NewController' has a wrong offset!");

// Function B_PortalEye.B_PortalEye_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct B_PortalEye_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_PortalEye_C_ReceiveTick) == 0x000004, "Wrong alignment on B_PortalEye_C_ReceiveTick");
static_assert(sizeof(B_PortalEye_C_ReceiveTick) == 0x000004, "Wrong size on B_PortalEye_C_ReceiveTick");
static_assert(offsetof(B_PortalEye_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'B_PortalEye_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function B_PortalEye.B_PortalEye_C.ReceiveUnpossessed
// 0x0008 (0x0008 - 0x0000)
struct B_PortalEye_C_ReceiveUnpossessed final
{
public:
	class AController*                            OldController;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_PortalEye_C_ReceiveUnpossessed) == 0x000008, "Wrong alignment on B_PortalEye_C_ReceiveUnpossessed");
static_assert(sizeof(B_PortalEye_C_ReceiveUnpossessed) == 0x000008, "Wrong size on B_PortalEye_C_ReceiveUnpossessed");
static_assert(offsetof(B_PortalEye_C_ReceiveUnpossessed, OldController) == 0x000000, "Member 'B_PortalEye_C_ReceiveUnpossessed::OldController' has a wrong offset!");

}

