#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_TournamentManager

#include "Basic.hpp"

#include "S_TournamentPlayer_structs.hpp"
#include "AdvancedSessions_structs.hpp"


namespace SDK::Params
{

// Function B_TournamentManager.B_TournamentManager_C.AddScorePoints
// 0x0070 (0x0070 - 0x0000)
struct B_TournamentManager_C_AddScorePoints final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Score;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_TournamentPlayer_C*                  TournamentPlayer;                                  // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 CurrentNetId;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	struct FBPUniqueNetId                         CallFunc_GetUniqueNetIDFromPlayerState_UniqueNetId; // 0x0028(0x0020)()
	class FString                                 CallFunc_UniqueNetIdToString_String;               // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_TournamentPlayer_C*                  CallFunc_Map_Find_Value;                           // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_TournamentManager_C_AddScorePoints) == 0x000008, "Wrong alignment on B_TournamentManager_C_AddScorePoints");
static_assert(sizeof(B_TournamentManager_C_AddScorePoints) == 0x000070, "Wrong size on B_TournamentManager_C_AddScorePoints");
static_assert(offsetof(B_TournamentManager_C_AddScorePoints, PlayerState) == 0x000000, "Member 'B_TournamentManager_C_AddScorePoints::PlayerState' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_AddScorePoints, Score) == 0x000008, "Member 'B_TournamentManager_C_AddScorePoints::Score' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_AddScorePoints, TournamentPlayer) == 0x000010, "Member 'B_TournamentManager_C_AddScorePoints::TournamentPlayer' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_AddScorePoints, CurrentNetId) == 0x000018, "Member 'B_TournamentManager_C_AddScorePoints::CurrentNetId' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_AddScorePoints, CallFunc_GetUniqueNetIDFromPlayerState_UniqueNetId) == 0x000028, "Member 'B_TournamentManager_C_AddScorePoints::CallFunc_GetUniqueNetIDFromPlayerState_UniqueNetId' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_AddScorePoints, CallFunc_UniqueNetIdToString_String) == 0x000048, "Member 'B_TournamentManager_C_AddScorePoints::CallFunc_UniqueNetIdToString_String' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_AddScorePoints, CallFunc_Add_IntInt_ReturnValue) == 0x000058, "Member 'B_TournamentManager_C_AddScorePoints::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_AddScorePoints, CallFunc_Map_Find_Value) == 0x000060, "Member 'B_TournamentManager_C_AddScorePoints::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_AddScorePoints, CallFunc_Map_Find_ReturnValue) == 0x000068, "Member 'B_TournamentManager_C_AddScorePoints::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function B_TournamentManager.B_TournamentManager_C.AllocatePlayersForThisRound
// 0x00A8 (0x00A8 - 0x0000)
struct B_TournamentManager_C_AllocatePlayersForThisRound final
{
public:
	TArray<class APlayerState*>                   PlayerStates;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UB_TournamentPlayer_C*                  CurrentTournamentPlayer;                           // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 CurrentNetId;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class APlayerState*                           CurrentPlayerState;                                // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_TournamentPlayer_C*                  CallFunc_Map_Find_Value;                           // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBPUniqueNetId                         CallFunc_GetUniqueNetIDFromPlayerState_UniqueNetId; // 0x0050(0x0020)()
	class FString                                 CallFunc_UniqueNetIdToString_String;               // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UB_TournamentPlayer_C*                  CallFunc_CreateObject_Object;                      // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Contains_ReturnValue;                 // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8A[0x6];                                       // 0x008A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           CallFunc_Array_Get_Item;                           // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_TournamentManager_C_AllocatePlayersForThisRound) == 0x000008, "Wrong alignment on B_TournamentManager_C_AllocatePlayersForThisRound");
static_assert(sizeof(B_TournamentManager_C_AllocatePlayersForThisRound) == 0x0000A8, "Wrong size on B_TournamentManager_C_AllocatePlayersForThisRound");
static_assert(offsetof(B_TournamentManager_C_AllocatePlayersForThisRound, PlayerStates) == 0x000000, "Member 'B_TournamentManager_C_AllocatePlayersForThisRound::PlayerStates' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_AllocatePlayersForThisRound, CurrentTournamentPlayer) == 0x000010, "Member 'B_TournamentManager_C_AllocatePlayersForThisRound::CurrentTournamentPlayer' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_AllocatePlayersForThisRound, CurrentNetId) == 0x000018, "Member 'B_TournamentManager_C_AllocatePlayersForThisRound::CurrentNetId' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_AllocatePlayersForThisRound, CurrentPlayerState) == 0x000028, "Member 'B_TournamentManager_C_AllocatePlayersForThisRound::CurrentPlayerState' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_AllocatePlayersForThisRound, Temp_int_Array_Index_Variable) == 0x000030, "Member 'B_TournamentManager_C_AllocatePlayersForThisRound::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_AllocatePlayersForThisRound, Temp_int_Loop_Counter_Variable) == 0x000034, "Member 'B_TournamentManager_C_AllocatePlayersForThisRound::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_AllocatePlayersForThisRound, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'B_TournamentManager_C_AllocatePlayersForThisRound::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_AllocatePlayersForThisRound, CallFunc_Map_Find_Value) == 0x000040, "Member 'B_TournamentManager_C_AllocatePlayersForThisRound::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_AllocatePlayersForThisRound, CallFunc_Map_Find_ReturnValue) == 0x000048, "Member 'B_TournamentManager_C_AllocatePlayersForThisRound::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_AllocatePlayersForThisRound, CallFunc_GetUniqueNetIDFromPlayerState_UniqueNetId) == 0x000050, "Member 'B_TournamentManager_C_AllocatePlayersForThisRound::CallFunc_GetUniqueNetIDFromPlayerState_UniqueNetId' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_AllocatePlayersForThisRound, CallFunc_UniqueNetIdToString_String) == 0x000070, "Member 'B_TournamentManager_C_AllocatePlayersForThisRound::CallFunc_UniqueNetIdToString_String' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_AllocatePlayersForThisRound, CallFunc_CreateObject_Object) == 0x000080, "Member 'B_TournamentManager_C_AllocatePlayersForThisRound::CallFunc_CreateObject_Object' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_AllocatePlayersForThisRound, CallFunc_Map_Contains_ReturnValue) == 0x000088, "Member 'B_TournamentManager_C_AllocatePlayersForThisRound::CallFunc_Map_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_AllocatePlayersForThisRound, CallFunc_Not_PreBool_ReturnValue) == 0x000089, "Member 'B_TournamentManager_C_AllocatePlayersForThisRound::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_AllocatePlayersForThisRound, CallFunc_Array_Get_Item) == 0x000090, "Member 'B_TournamentManager_C_AllocatePlayersForThisRound::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_AllocatePlayersForThisRound, CallFunc_Array_Length_ReturnValue) == 0x000098, "Member 'B_TournamentManager_C_AllocatePlayersForThisRound::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_AllocatePlayersForThisRound, CallFunc_Less_IntInt_ReturnValue) == 0x00009C, "Member 'B_TournamentManager_C_AllocatePlayersForThisRound::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_AllocatePlayersForThisRound, CallFunc_Array_Add_ReturnValue) == 0x0000A0, "Member 'B_TournamentManager_C_AllocatePlayersForThisRound::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function B_TournamentManager.B_TournamentManager_C.GetHuntersToSpawn
// 0x0108 (0x0108 - 0x0000)
struct B_TournamentManager_C_GetHuntersToSpawn final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APlayerState*>                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm)
	TArray<class FString>                         EllectedTests;                                     // 0x0018(0x0010)(Parm, OutParm)
	TArray<class FString>                         Test;                                              // 0x0028(0x0010)(Edit, BlueprintVisible)
	class UB_TournamentPlayer_C*                  CurrentTournamentPlayer;                           // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 CurrentNetId;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	TArray<class APlayerState*>                   EllectedPlayers;                                   // 0x0050(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         LowestRoundNumber;                                 // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HighestRoundNumber;                                // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A[0x2];                                       // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UB_TournamentPlayer_C*                  CallFunc_Map_Find_Value;                           // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AB[0x1];                                       // 0x00AB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Array_Get_Item;                           // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CA[0x2];                                       // 0x00CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D2[0x2];                                       // 0x00D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Array_Get_Item_1;                         // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_TournamentPlayer_C*                  CallFunc_Map_Find_Value_1;                         // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_1;                   // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Max_ReturnValue;                          // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Min_ReturnValue;                          // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_TournamentManager_C_GetHuntersToSpawn) == 0x000008, "Wrong alignment on B_TournamentManager_C_GetHuntersToSpawn");
static_assert(sizeof(B_TournamentManager_C_GetHuntersToSpawn) == 0x000108, "Wrong size on B_TournamentManager_C_GetHuntersToSpawn");
static_assert(offsetof(B_TournamentManager_C_GetHuntersToSpawn, Amount) == 0x000000, "Member 'B_TournamentManager_C_GetHuntersToSpawn::Amount' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetHuntersToSpawn, ReturnValue) == 0x000008, "Member 'B_TournamentManager_C_GetHuntersToSpawn::ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetHuntersToSpawn, EllectedTests) == 0x000018, "Member 'B_TournamentManager_C_GetHuntersToSpawn::EllectedTests' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetHuntersToSpawn, Test) == 0x000028, "Member 'B_TournamentManager_C_GetHuntersToSpawn::Test' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetHuntersToSpawn, CurrentTournamentPlayer) == 0x000038, "Member 'B_TournamentManager_C_GetHuntersToSpawn::CurrentTournamentPlayer' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetHuntersToSpawn, CurrentNetId) == 0x000040, "Member 'B_TournamentManager_C_GetHuntersToSpawn::CurrentNetId' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetHuntersToSpawn, EllectedPlayers) == 0x000050, "Member 'B_TournamentManager_C_GetHuntersToSpawn::EllectedPlayers' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetHuntersToSpawn, LowestRoundNumber) == 0x000060, "Member 'B_TournamentManager_C_GetHuntersToSpawn::LowestRoundNumber' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetHuntersToSpawn, HighestRoundNumber) == 0x000064, "Member 'B_TournamentManager_C_GetHuntersToSpawn::HighestRoundNumber' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetHuntersToSpawn, Temp_bool_True_if_break_was_hit_Variable) == 0x000068, "Member 'B_TournamentManager_C_GetHuntersToSpawn::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetHuntersToSpawn, CallFunc_Not_PreBool_ReturnValue) == 0x000069, "Member 'B_TournamentManager_C_GetHuntersToSpawn::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetHuntersToSpawn, Temp_int_Loop_Counter_Variable) == 0x00006C, "Member 'B_TournamentManager_C_GetHuntersToSpawn::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetHuntersToSpawn, CallFunc_Add_IntInt_ReturnValue) == 0x000070, "Member 'B_TournamentManager_C_GetHuntersToSpawn::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetHuntersToSpawn, Temp_int_Array_Index_Variable) == 0x000074, "Member 'B_TournamentManager_C_GetHuntersToSpawn::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetHuntersToSpawn, Temp_int_Loop_Counter_Variable_1) == 0x000078, "Member 'B_TournamentManager_C_GetHuntersToSpawn::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetHuntersToSpawn, CallFunc_Add_IntInt_ReturnValue_1) == 0x00007C, "Member 'B_TournamentManager_C_GetHuntersToSpawn::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetHuntersToSpawn, Temp_int_Variable) == 0x000080, "Member 'B_TournamentManager_C_GetHuntersToSpawn::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetHuntersToSpawn, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000084, "Member 'B_TournamentManager_C_GetHuntersToSpawn::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetHuntersToSpawn, CallFunc_Add_IntInt_ReturnValue_2) == 0x000088, "Member 'B_TournamentManager_C_GetHuntersToSpawn::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetHuntersToSpawn, CallFunc_Array_Add_ReturnValue) == 0x00008C, "Member 'B_TournamentManager_C_GetHuntersToSpawn::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetHuntersToSpawn, Temp_int_Variable_1) == 0x000090, "Member 'B_TournamentManager_C_GetHuntersToSpawn::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetHuntersToSpawn, CallFunc_Add_IntInt_ReturnValue_3) == 0x000094, "Member 'B_TournamentManager_C_GetHuntersToSpawn::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetHuntersToSpawn, CallFunc_Map_Find_Value) == 0x000098, "Member 'B_TournamentManager_C_GetHuntersToSpawn::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetHuntersToSpawn, CallFunc_Map_Find_ReturnValue) == 0x0000A0, "Member 'B_TournamentManager_C_GetHuntersToSpawn::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetHuntersToSpawn, Temp_int_Array_Index_Variable_1) == 0x0000A4, "Member 'B_TournamentManager_C_GetHuntersToSpawn::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetHuntersToSpawn, CallFunc_Array_Contains_ReturnValue) == 0x0000A8, "Member 'B_TournamentManager_C_GetHuntersToSpawn::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetHuntersToSpawn, CallFunc_Not_PreBool_ReturnValue_1) == 0x0000A9, "Member 'B_TournamentManager_C_GetHuntersToSpawn::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetHuntersToSpawn, CallFunc_Less_IntInt_ReturnValue) == 0x0000AA, "Member 'B_TournamentManager_C_GetHuntersToSpawn::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetHuntersToSpawn, CallFunc_Array_Add_ReturnValue_1) == 0x0000AC, "Member 'B_TournamentManager_C_GetHuntersToSpawn::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetHuntersToSpawn, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0000B0, "Member 'B_TournamentManager_C_GetHuntersToSpawn::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetHuntersToSpawn, CallFunc_Array_Get_Item) == 0x0000B8, "Member 'B_TournamentManager_C_GetHuntersToSpawn::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetHuntersToSpawn, CallFunc_BooleanOR_ReturnValue) == 0x0000C8, "Member 'B_TournamentManager_C_GetHuntersToSpawn::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetHuntersToSpawn, CallFunc_BooleanAND_ReturnValue) == 0x0000C9, "Member 'B_TournamentManager_C_GetHuntersToSpawn::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetHuntersToSpawn, CallFunc_Array_Length_ReturnValue) == 0x0000CC, "Member 'B_TournamentManager_C_GetHuntersToSpawn::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetHuntersToSpawn, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000D0, "Member 'B_TournamentManager_C_GetHuntersToSpawn::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetHuntersToSpawn, CallFunc_BooleanAND_ReturnValue_1) == 0x0000D1, "Member 'B_TournamentManager_C_GetHuntersToSpawn::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetHuntersToSpawn, CallFunc_Array_Length_ReturnValue_1) == 0x0000D4, "Member 'B_TournamentManager_C_GetHuntersToSpawn::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetHuntersToSpawn, CallFunc_Array_Get_Item_1) == 0x0000D8, "Member 'B_TournamentManager_C_GetHuntersToSpawn::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetHuntersToSpawn, CallFunc_Less_IntInt_ReturnValue_2) == 0x0000E8, "Member 'B_TournamentManager_C_GetHuntersToSpawn::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetHuntersToSpawn, CallFunc_Map_Find_Value_1) == 0x0000F0, "Member 'B_TournamentManager_C_GetHuntersToSpawn::CallFunc_Map_Find_Value_1' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetHuntersToSpawn, CallFunc_Map_Find_ReturnValue_1) == 0x0000F8, "Member 'B_TournamentManager_C_GetHuntersToSpawn::CallFunc_Map_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetHuntersToSpawn, CallFunc_Max_ReturnValue) == 0x0000FC, "Member 'B_TournamentManager_C_GetHuntersToSpawn::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetHuntersToSpawn, CallFunc_Min_ReturnValue) == 0x000100, "Member 'B_TournamentManager_C_GetHuntersToSpawn::CallFunc_Min_ReturnValue' has a wrong offset!");

// Function B_TournamentManager.B_TournamentManager_C.GetTournamentPlayers
// 0x0020 (0x0020 - 0x0000)
struct B_TournamentManager_C_GetTournamentPlayers final
{
public:
	TArray<class UB_TournamentPlayer_C*>          ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
	TArray<class UB_TournamentPlayer_C*>          CallFunc_Map_Values_Values;                        // 0x0010(0x0010)(ReferenceParm)
};
static_assert(alignof(B_TournamentManager_C_GetTournamentPlayers) == 0x000008, "Wrong alignment on B_TournamentManager_C_GetTournamentPlayers");
static_assert(sizeof(B_TournamentManager_C_GetTournamentPlayers) == 0x000020, "Wrong size on B_TournamentManager_C_GetTournamentPlayers");
static_assert(offsetof(B_TournamentManager_C_GetTournamentPlayers, ReturnValue) == 0x000000, "Member 'B_TournamentManager_C_GetTournamentPlayers::ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetTournamentPlayers, CallFunc_Map_Values_Values) == 0x000010, "Member 'B_TournamentManager_C_GetTournamentPlayers::CallFunc_Map_Values_Values' has a wrong offset!");

// Function B_TournamentManager.B_TournamentManager_C.GetTournamentPlayersStruct
// 0x00D0 (0x00D0 - 0x0000)
struct B_TournamentManager_C_GetTournamentPlayersStruct final
{
public:
	TArray<class FString>                         PlayerIds;                                         // 0x0000(0x0010)(Parm, OutParm)
	TArray<struct FS_TournamentPlayer>            TournamentPlayers;                                 // 0x0010(0x0010)(Parm, OutParm)
	TArray<struct FS_TournamentPlayer>            ReturnTournamentPlayers;                           // 0x0020(0x0010)(Edit, BlueprintVisible)
	TArray<class FString>                         ReturnPlayerIds;                                   // 0x0030(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         CallFunc_Map_Keys_Keys;                            // 0x0050(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Array_Get_Item;                           // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_TournamentPlayer_C*                  CallFunc_Map_Find_Value;                           // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_TournamentPlayer                    CallFunc_GetStruct_ReturnValue;                    // 0x0090(0x0038)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_TournamentManager_C_GetTournamentPlayersStruct) == 0x000008, "Wrong alignment on B_TournamentManager_C_GetTournamentPlayersStruct");
static_assert(sizeof(B_TournamentManager_C_GetTournamentPlayersStruct) == 0x0000D0, "Wrong size on B_TournamentManager_C_GetTournamentPlayersStruct");
static_assert(offsetof(B_TournamentManager_C_GetTournamentPlayersStruct, PlayerIds) == 0x000000, "Member 'B_TournamentManager_C_GetTournamentPlayersStruct::PlayerIds' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetTournamentPlayersStruct, TournamentPlayers) == 0x000010, "Member 'B_TournamentManager_C_GetTournamentPlayersStruct::TournamentPlayers' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetTournamentPlayersStruct, ReturnTournamentPlayers) == 0x000020, "Member 'B_TournamentManager_C_GetTournamentPlayersStruct::ReturnTournamentPlayers' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetTournamentPlayersStruct, ReturnPlayerIds) == 0x000030, "Member 'B_TournamentManager_C_GetTournamentPlayersStruct::ReturnPlayerIds' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetTournamentPlayersStruct, Temp_int_Array_Index_Variable) == 0x000040, "Member 'B_TournamentManager_C_GetTournamentPlayersStruct::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetTournamentPlayersStruct, Temp_int_Loop_Counter_Variable) == 0x000044, "Member 'B_TournamentManager_C_GetTournamentPlayersStruct::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetTournamentPlayersStruct, CallFunc_Add_IntInt_ReturnValue) == 0x000048, "Member 'B_TournamentManager_C_GetTournamentPlayersStruct::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetTournamentPlayersStruct, CallFunc_Map_Keys_Keys) == 0x000050, "Member 'B_TournamentManager_C_GetTournamentPlayersStruct::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetTournamentPlayersStruct, CallFunc_Array_Length_ReturnValue) == 0x000060, "Member 'B_TournamentManager_C_GetTournamentPlayersStruct::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetTournamentPlayersStruct, CallFunc_Array_Get_Item) == 0x000068, "Member 'B_TournamentManager_C_GetTournamentPlayersStruct::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetTournamentPlayersStruct, CallFunc_Less_IntInt_ReturnValue) == 0x000078, "Member 'B_TournamentManager_C_GetTournamentPlayersStruct::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetTournamentPlayersStruct, CallFunc_Map_Find_Value) == 0x000080, "Member 'B_TournamentManager_C_GetTournamentPlayersStruct::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetTournamentPlayersStruct, CallFunc_Map_Find_ReturnValue) == 0x000088, "Member 'B_TournamentManager_C_GetTournamentPlayersStruct::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetTournamentPlayersStruct, CallFunc_GetStruct_ReturnValue) == 0x000090, "Member 'B_TournamentManager_C_GetTournamentPlayersStruct::CallFunc_GetStruct_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetTournamentPlayersStruct, CallFunc_Array_Add_ReturnValue) == 0x0000C8, "Member 'B_TournamentManager_C_GetTournamentPlayersStruct::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_GetTournamentPlayersStruct, CallFunc_Array_Add_ReturnValue_1) == 0x0000CC, "Member 'B_TournamentManager_C_GetTournamentPlayersStruct::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");

// Function B_TournamentManager.B_TournamentManager_C.ScoreUpdated__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct B_TournamentManager_C_ScoreUpdated__DelegateSignature final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         NewScore;                                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_TournamentManager_C_ScoreUpdated__DelegateSignature) == 0x000008, "Wrong alignment on B_TournamentManager_C_ScoreUpdated__DelegateSignature");
static_assert(sizeof(B_TournamentManager_C_ScoreUpdated__DelegateSignature) == 0x000018, "Wrong size on B_TournamentManager_C_ScoreUpdated__DelegateSignature");
static_assert(offsetof(B_TournamentManager_C_ScoreUpdated__DelegateSignature, PlayerId) == 0x000000, "Member 'B_TournamentManager_C_ScoreUpdated__DelegateSignature::PlayerId' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_ScoreUpdated__DelegateSignature, NewScore) == 0x000010, "Member 'B_TournamentManager_C_ScoreUpdated__DelegateSignature::NewScore' has a wrong offset!");

// Function B_TournamentManager.B_TournamentManager_C.StartTestTournament
// 0x0028 (0x0028 - 0x0000)
struct B_TournamentManager_C_StartTestTournament final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APlayerState*>                   EllectedPlayers;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class FString>                         NewLocalVar_0;                                     // 0x0018(0x0010)(Edit, BlueprintVisible)
};
static_assert(alignof(B_TournamentManager_C_StartTestTournament) == 0x000008, "Wrong alignment on B_TournamentManager_C_StartTestTournament");
static_assert(sizeof(B_TournamentManager_C_StartTestTournament) == 0x000028, "Wrong size on B_TournamentManager_C_StartTestTournament");
static_assert(offsetof(B_TournamentManager_C_StartTestTournament, Amount) == 0x000000, "Member 'B_TournamentManager_C_StartTestTournament::Amount' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_StartTestTournament, EllectedPlayers) == 0x000008, "Member 'B_TournamentManager_C_StartTestTournament::EllectedPlayers' has a wrong offset!");
static_assert(offsetof(B_TournamentManager_C_StartTestTournament, NewLocalVar_0) == 0x000018, "Member 'B_TournamentManager_C_StartTestTournament::NewLocalVar_0' has a wrong offset!");

}

