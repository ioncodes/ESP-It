#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_WitchHuntFunctionLibrary

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ETeamID_structs.hpp"
#include "EHighlightChannel_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_WitchHuntFunctionLibrary.B_WitchHuntFunctionLibrary_C
// 0x0000 (0x0028 - 0x0028)
class UB_WitchHuntFunctionLibrary_C final : public UBlueprintFunctionLibrary
{
public:
	static void GetPlatformLogo(const class FString& PlatformName, class UObject* __WorldContext, class UTexture2D** PlatformLogo);
	static bool HasWitchInvisiblePowerup(class AActor* Actor, class UObject* __WorldContext);
	static class APawn* GetActorFromWitchAsPawn(class AActor* Actor, class UObject* __WorldContext);
	static bool IsActorFromWitch(class AActor* Actor, class UObject* __WorldContext);
	static void WakeUpSurroundingProps(class UStaticMeshComponent* Mesh, class UObject* __WorldContext);
	static void GetTabToSideOfCurrent(class UWidgetSwitcher* Switcher, bool ToTheRight, class UObject* __WorldContext, class UWidget** RightTab);
	static void SetUpGamepadWidgetNavigation(TArray<class UUserWidget*>& UIElements, class UUserWidget* UpEscapeElement, class UUserWidget* DownEscapeElement, class UObject* __WorldContext);
	static void SetNewPlayerPosForResize(class AActor* Actor, double NewScale, class UObject* __WorldContext);
	static void Show_Creative_Spectator_Names(class UObject* __WorldContext);
	static void ConvertSecondsToMinutesAndSeconds(int32 InSeconds, class UObject* __WorldContext, class FString* MinutesString, class FString* SecondsString);
	static class AActor* GetPlayerStartToSpawnAtAndOccupyIt(ETeamID Team, class UClass* WitchPlayerStartClass, class UClass* AlternativeWitchPlayerStartClass, class UClass* HunterPlayerStartClass, class UClass* AlternativeHunterPlayerStartClass, class UObject* __WorldContext, struct FVector* SpawningOffset);
	static void GetPlayerStarts(class UClass* PlayerStartClass, class UObject* __WorldContext, TArray<class AActor*>* PlayerStarts, TArray<class AActor*>* UnoccupiedPlayerStarts, bool* HasPlayerStartsOnMap);
	static void ObjectiveSpectatorHud(class APawn* SelfRef, class UObject* __WorldContext);
	static void SpectatorWitchHighlight(class APawn*& SelfRef, class UObject* __WorldContext);
	static void GetPlayerOrBotName(class APlayerState* PlayerState, class UObject* __WorldContext, class FString* Name_0);
	static void AddToSnowList(class AActor* Actor, class UObject* __WorldContext);
	static bool ShouldShowWitchOutlines(class UObject* __WorldContext);
	static bool ShouldShowHunterOutlines(class UObject* __WorldContext);
	static void EnableOutliningFor(class APawn* Pawn, class APawn* SelfRef, class UObject* __WorldContext);
	static void OutlineTrace(class APawn* SelfRef, class APawn* Target, class UObject* __WorldContext, bool* bVisible);
	static bool IsInOutlineRangeTo(class APawn* Pawn, class APawn* SelfRef, class UObject* __WorldContext);
	static void TransformTrace(class APawn* Pawn, double Range, class UObject* __WorldContext, class AActor** Prop, struct FVector* HitLocation);
	static void PossessTrace(class APawn* Pawn, double Range, class UObject* __WorldContext, class AActor** Prop, bool* bHitSomething);
	static void SetHighlightChannel(class UPrimitiveComponent* Target, EHighlightChannel Channel, class UObject* __WorldContext);
	static bool IsPossessSelected(class APawn* Pawn, class UObject* __WorldContext);
	static void GetRandomNumbers(int32 CounterNumbers, int32 ExclusiveMaxNumber, TArray<int32>& ExcludingNumbers, class UObject* __WorldContext, TArray<int32>* Numbers);
	static void GetWitchPlayerController(class AActor* WitchActor, class UObject* __WorldContext, class APlayerController** PlayerController);
	static void GetMinimumDistanceToActors(TArray<class AActor*>& Actors, const struct FVector& Location, class UObject* __WorldContext, double* MinimumDistance);
	static void GetMinimumDistanceToActorClasses(class UClass* ActorClass, const struct FVector& Location, class UObject* __WorldContext, double* MinimumDistance);
	static void TickIceCharacterMovement(class UCharacterMovementComponent* MoveComp, bool bIsInSlipperyWater, class UObject* __WorldContext);
	static void UnhighlightAll(class UObject* __WorldContext);
	static void UnhighlightHunters(class UObject* __WorldContext);
	static void UnhighlightWitches(class UObject* __WorldContext);
	static void UnhighlightWitchesAsProps(class UObject* __WorldContext);
	static void GetWitchActor(class AActor* Actor, class UObject* __WorldContext, class AActor** ReturnActor);
	static void SpectatorHud(class APawn* SelfRef, class UObject* __WorldContext);
	static void Hunter_Highlights(class APawn* SelfRef, class UObject* __WorldContext);
	static void HighlightHunters(bool HideNames, bool bOutline, class APawn*& SelfRef, class UObject* __WorldContext);
	static void HighlightWitches(bool HideNames, bool bOutline, class APawn*& SelfRef, class UObject* __WorldContext);
	static void HighlightWitchesAsProps(class UObject* __WorldContext);
	static void WitchHud(class AActor* TargetProp, class APawn* SelfRef, double Range, bool AllowTransformHighlight, class UObject* __WorldContext, class AActor** OutTargetProp);

	void AreAnyRulesCurrentlyEnabled(class UObject* __WorldContext, bool* UsingCustomRules);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_WitchHuntFunctionLibrary_C">();
	}
	static class UB_WitchHuntFunctionLibrary_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UB_WitchHuntFunctionLibrary_C>();
	}
};
static_assert(alignof(UB_WitchHuntFunctionLibrary_C) == 0x000008, "Wrong alignment on UB_WitchHuntFunctionLibrary_C");
static_assert(sizeof(UB_WitchHuntFunctionLibrary_C) == 0x000028, "Wrong size on UB_WitchHuntFunctionLibrary_C");

}

