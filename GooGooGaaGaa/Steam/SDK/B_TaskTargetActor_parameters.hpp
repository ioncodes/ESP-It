#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_TaskTargetActor

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function B_TaskTargetActor.B_TaskTargetActor_C.Act
// 0x0020 (0x0020 - 0x0000)
struct B_TaskTargetActor_C_Act final
{
public:
	int32                                         Temp_int_Variable;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_CollectTask_C*                       K2Node_DynamicCast_AsB_Collect_Task;               // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_TaskTargetActor_C_Act) == 0x000008, "Wrong alignment on B_TaskTargetActor_C_Act");
static_assert(sizeof(B_TaskTargetActor_C_Act) == 0x000020, "Wrong size on B_TaskTargetActor_C_Act");
static_assert(offsetof(B_TaskTargetActor_C_Act, Temp_int_Variable) == 0x000000, "Member 'B_TaskTargetActor_C_Act::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(B_TaskTargetActor_C_Act, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'B_TaskTargetActor_C_Act::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TaskTargetActor_C_Act, K2Node_DynamicCast_AsB_Collect_Task) == 0x000010, "Member 'B_TaskTargetActor_C_Act::K2Node_DynamicCast_AsB_Collect_Task' has a wrong offset!");
static_assert(offsetof(B_TaskTargetActor_C_Act, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'B_TaskTargetActor_C_Act::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_TaskTargetActor_C_Act, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'B_TaskTargetActor_C_Act::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function B_TaskTargetActor.B_TaskTargetActor_C.PickMesh
// 0x0018 (0x0018 - 0x0000)
struct B_TaskTargetActor_C_PickMesh final
{
public:
	class UStaticMesh*                            Static_Mesh;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerFromStream_ReturnValue;      // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_TaskTargetActor_C_PickMesh) == 0x000008, "Wrong alignment on B_TaskTargetActor_C_PickMesh");
static_assert(sizeof(B_TaskTargetActor_C_PickMesh) == 0x000018, "Wrong size on B_TaskTargetActor_C_PickMesh");
static_assert(offsetof(B_TaskTargetActor_C_PickMesh, Static_Mesh) == 0x000000, "Member 'B_TaskTargetActor_C_PickMesh::Static_Mesh' has a wrong offset!");
static_assert(offsetof(B_TaskTargetActor_C_PickMesh, CallFunc_Array_Length_ReturnValue) == 0x000008, "Member 'B_TaskTargetActor_C_PickMesh::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TaskTargetActor_C_PickMesh, CallFunc_RandomIntegerFromStream_ReturnValue) == 0x00000C, "Member 'B_TaskTargetActor_C_PickMesh::CallFunc_RandomIntegerFromStream_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TaskTargetActor_C_PickMesh, CallFunc_Array_Get_Item) == 0x000010, "Member 'B_TaskTargetActor_C_PickMesh::CallFunc_Array_Get_Item' has a wrong offset!");

// Function B_TaskTargetActor.B_TaskTargetActor_C.React
// 0x0002 (0x0002 - 0x0000)
struct B_TaskTargetActor_C_React final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_TaskTargetActor_C_React) == 0x000001, "Wrong alignment on B_TaskTargetActor_C_React");
static_assert(sizeof(B_TaskTargetActor_C_React) == 0x000002, "Wrong size on B_TaskTargetActor_C_React");
static_assert(offsetof(B_TaskTargetActor_C_React, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'B_TaskTargetActor_C_React::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TaskTargetActor_C_React, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'B_TaskTargetActor_C_React::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function B_TaskTargetActor.B_TaskTargetActor_C.RemoveHighlight
// 0x0001 (0x0001 - 0x0000)
struct B_TaskTargetActor_C_RemoveHighlight final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_TaskTargetActor_C_RemoveHighlight) == 0x000001, "Wrong alignment on B_TaskTargetActor_C_RemoveHighlight");
static_assert(sizeof(B_TaskTargetActor_C_RemoveHighlight) == 0x000001, "Wrong size on B_TaskTargetActor_C_RemoveHighlight");
static_assert(offsetof(B_TaskTargetActor_C_RemoveHighlight, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'B_TaskTargetActor_C_RemoveHighlight::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function B_TaskTargetActor.B_TaskTargetActor_C.Highlight
// 0x0001 (0x0001 - 0x0000)
struct B_TaskTargetActor_C_Highlight final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_TaskTargetActor_C_Highlight) == 0x000001, "Wrong alignment on B_TaskTargetActor_C_Highlight");
static_assert(sizeof(B_TaskTargetActor_C_Highlight) == 0x000001, "Wrong size on B_TaskTargetActor_C_Highlight");
static_assert(offsetof(B_TaskTargetActor_C_Highlight, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'B_TaskTargetActor_C_Highlight::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function B_TaskTargetActor.B_TaskTargetActor_C.UpdateRotation
// 0x0058 (0x0058 - 0x0000)
struct B_TaskTargetActor_C_UpdateRotation final
{
public:
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Random_OutItem;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Random_OutIndex;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_TaskTargetActor_C_UpdateRotation) == 0x000008, "Wrong alignment on B_TaskTargetActor_C_UpdateRotation");
static_assert(sizeof(B_TaskTargetActor_C_UpdateRotation) == 0x000058, "Wrong size on B_TaskTargetActor_C_UpdateRotation");
static_assert(offsetof(B_TaskTargetActor_C_UpdateRotation, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000000, "Member 'B_TaskTargetActor_C_UpdateRotation::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TaskTargetActor_C_UpdateRotation, CallFunc_BreakRotator_Roll) == 0x000018, "Member 'B_TaskTargetActor_C_UpdateRotation::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(B_TaskTargetActor_C_UpdateRotation, CallFunc_BreakRotator_Pitch) == 0x00001C, "Member 'B_TaskTargetActor_C_UpdateRotation::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(B_TaskTargetActor_C_UpdateRotation, CallFunc_BreakRotator_Yaw) == 0x000020, "Member 'B_TaskTargetActor_C_UpdateRotation::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(B_TaskTargetActor_C_UpdateRotation, CallFunc_Array_Random_OutItem) == 0x000024, "Member 'B_TaskTargetActor_C_UpdateRotation::CallFunc_Array_Random_OutItem' has a wrong offset!");
static_assert(offsetof(B_TaskTargetActor_C_UpdateRotation, CallFunc_Array_Random_OutIndex) == 0x000028, "Member 'B_TaskTargetActor_C_UpdateRotation::CallFunc_Array_Random_OutIndex' has a wrong offset!");
static_assert(offsetof(B_TaskTargetActor_C_UpdateRotation, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000030, "Member 'B_TaskTargetActor_C_UpdateRotation::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TaskTargetActor_C_UpdateRotation, CallFunc_MakeRotator_ReturnValue) == 0x000038, "Member 'B_TaskTargetActor_C_UpdateRotation::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TaskTargetActor_C_UpdateRotation, CallFunc_K2_SetActorRotation_ReturnValue) == 0x000050, "Member 'B_TaskTargetActor_C_UpdateRotation::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TaskTargetActor_C_UpdateRotation, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x000054, "Member 'B_TaskTargetActor_C_UpdateRotation::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");

// Function B_TaskTargetActor.B_TaskTargetActor_C.UpdateMesh
// 0x0050 (0x0050 - 0x0000)
struct B_TaskTargetActor_C_UpdateMesh final
{
public:
	TArray<class UStaticMeshComponent*>           MeshesToChange;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	class UStaticMesh*                            Mesh_Model;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            CallFunc_PickMesh_Static_Mesh;                     // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class UStaticMeshComponent*>           CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0040(0x0010)(ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(B_TaskTargetActor_C_UpdateMesh) == 0x000008, "Wrong alignment on B_TaskTargetActor_C_UpdateMesh");
static_assert(sizeof(B_TaskTargetActor_C_UpdateMesh) == 0x000050, "Wrong size on B_TaskTargetActor_C_UpdateMesh");
static_assert(offsetof(B_TaskTargetActor_C_UpdateMesh, MeshesToChange) == 0x000000, "Member 'B_TaskTargetActor_C_UpdateMesh::MeshesToChange' has a wrong offset!");
static_assert(offsetof(B_TaskTargetActor_C_UpdateMesh, Mesh_Model) == 0x000010, "Member 'B_TaskTargetActor_C_UpdateMesh::Mesh_Model' has a wrong offset!");
static_assert(offsetof(B_TaskTargetActor_C_UpdateMesh, Temp_int_Array_Index_Variable) == 0x000018, "Member 'B_TaskTargetActor_C_UpdateMesh::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_TaskTargetActor_C_UpdateMesh, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'B_TaskTargetActor_C_UpdateMesh::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_TaskTargetActor_C_UpdateMesh, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'B_TaskTargetActor_C_UpdateMesh::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TaskTargetActor_C_UpdateMesh, CallFunc_Array_Get_Item) == 0x000028, "Member 'B_TaskTargetActor_C_UpdateMesh::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_TaskTargetActor_C_UpdateMesh, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'B_TaskTargetActor_C_UpdateMesh::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TaskTargetActor_C_UpdateMesh, CallFunc_SetStaticMesh_ReturnValue) == 0x000034, "Member 'B_TaskTargetActor_C_UpdateMesh::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TaskTargetActor_C_UpdateMesh, CallFunc_Less_IntInt_ReturnValue) == 0x000035, "Member 'B_TaskTargetActor_C_UpdateMesh::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TaskTargetActor_C_UpdateMesh, CallFunc_PickMesh_Static_Mesh) == 0x000038, "Member 'B_TaskTargetActor_C_UpdateMesh::CallFunc_PickMesh_Static_Mesh' has a wrong offset!");
static_assert(offsetof(B_TaskTargetActor_C_UpdateMesh, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000040, "Member 'B_TaskTargetActor_C_UpdateMesh::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");

// Function B_TaskTargetActor.B_TaskTargetActor_C.ExecuteUbergraph_B_TaskTargetActor
// 0x0004 (0x0004 - 0x0000)
struct B_TaskTargetActor_C_ExecuteUbergraph_B_TaskTargetActor final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_TaskTargetActor_C_ExecuteUbergraph_B_TaskTargetActor) == 0x000004, "Wrong alignment on B_TaskTargetActor_C_ExecuteUbergraph_B_TaskTargetActor");
static_assert(sizeof(B_TaskTargetActor_C_ExecuteUbergraph_B_TaskTargetActor) == 0x000004, "Wrong size on B_TaskTargetActor_C_ExecuteUbergraph_B_TaskTargetActor");
static_assert(offsetof(B_TaskTargetActor_C_ExecuteUbergraph_B_TaskTargetActor, EntryPoint) == 0x000000, "Member 'B_TaskTargetActor_C_ExecuteUbergraph_B_TaskTargetActor::EntryPoint' has a wrong offset!");

}

