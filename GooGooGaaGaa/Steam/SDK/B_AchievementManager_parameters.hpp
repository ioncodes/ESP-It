#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_AchievementManager

#include "Basic.hpp"

#include "SMapData_structs.hpp"
#include "E_Achievements_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function B_AchievementManager.B_AchievementManager_C.Achievement Is Not Owned
// 0x0028 (0x0028 - 0x0000)
struct B_AchievementManager_C_Achievement_Is_Not_Owned final
{
public:
	class AB_PlayerState_C*                       PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsNotOwned;                                        // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_NewStatsAndAchievementsManager_C*    CallFunc_GetStatsAndAchievementsManager_Result;    // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetGSAchievement_HasAchievement;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetGSAchievement_Result;                  // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_AchievementManager_C_Achievement_Is_Not_Owned) == 0x000008, "Wrong alignment on B_AchievementManager_C_Achievement_Is_Not_Owned");
static_assert(sizeof(B_AchievementManager_C_Achievement_Is_Not_Owned) == 0x000028, "Wrong size on B_AchievementManager_C_Achievement_Is_Not_Owned");
static_assert(offsetof(B_AchievementManager_C_Achievement_Is_Not_Owned, PlayerState) == 0x000000, "Member 'B_AchievementManager_C_Achievement_Is_Not_Owned::PlayerState' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Achievement_Is_Not_Owned, Name_0) == 0x000008, "Member 'B_AchievementManager_C_Achievement_Is_Not_Owned::Name_0' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Achievement_Is_Not_Owned, IsNotOwned) == 0x000010, "Member 'B_AchievementManager_C_Achievement_Is_Not_Owned::IsNotOwned' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Achievement_Is_Not_Owned, CallFunc_GetStatsAndAchievementsManager_Result) == 0x000018, "Member 'B_AchievementManager_C_Achievement_Is_Not_Owned::CallFunc_GetStatsAndAchievementsManager_Result' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Achievement_Is_Not_Owned, CallFunc_GetGSAchievement_HasAchievement) == 0x000020, "Member 'B_AchievementManager_C_Achievement_Is_Not_Owned::CallFunc_GetGSAchievement_HasAchievement' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Achievement_Is_Not_Owned, CallFunc_GetGSAchievement_Result) == 0x000021, "Member 'B_AchievementManager_C_Achievement_Is_Not_Owned::CallFunc_GetGSAchievement_Result' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Achievement_Is_Not_Owned, CallFunc_Not_PreBool_ReturnValue) == 0x000022, "Member 'B_AchievementManager_C_Achievement_Is_Not_Owned::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function B_AchievementManager.B_AchievementManager_C.Activate Achievement
// 0x0028 (0x0028 - 0x0000)
struct B_AchievementManager_C_Activate_Achievement final
{
public:
	class AB_PlayerState_C*                       PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	E_Achievements                                AchievementType;                                   // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_Achievement_C*                       Achievement;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_Achievement_C*                       CallFunc_Get_Player_Achievement_Achievement;       // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Get_Player_Achievement_Success;           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_AchievementManager_C_Activate_Achievement) == 0x000008, "Wrong alignment on B_AchievementManager_C_Activate_Achievement");
static_assert(sizeof(B_AchievementManager_C_Activate_Achievement) == 0x000028, "Wrong size on B_AchievementManager_C_Activate_Achievement");
static_assert(offsetof(B_AchievementManager_C_Activate_Achievement, PlayerState) == 0x000000, "Member 'B_AchievementManager_C_Activate_Achievement::PlayerState' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Activate_Achievement, AchievementType) == 0x000008, "Member 'B_AchievementManager_C_Activate_Achievement::AchievementType' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Activate_Achievement, Achievement) == 0x000010, "Member 'B_AchievementManager_C_Activate_Achievement::Achievement' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Activate_Achievement, CallFunc_Get_Player_Achievement_Achievement) == 0x000018, "Member 'B_AchievementManager_C_Activate_Achievement::CallFunc_Get_Player_Achievement_Achievement' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Activate_Achievement, CallFunc_Get_Player_Achievement_Success) == 0x000020, "Member 'B_AchievementManager_C_Activate_Achievement::CallFunc_Get_Player_Achievement_Success' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Activate_Achievement, CallFunc_Not_PreBool_ReturnValue) == 0x000021, "Member 'B_AchievementManager_C_Activate_Achievement::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function B_AchievementManager.B_AchievementManager_C.Activate By Id
// 0x0028 (0x0028 - 0x0000)
struct B_AchievementManager_C_Activate_By_Id final
{
public:
	class AB_PlayerState_C*                       PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	E_Achievements                                Achievement_Type;                                  // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PropID;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UB_Achievement_C*                       Achievement;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_Achievement_C*                       CallFunc_Get_Player_Achievement_Achievement;       // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Get_Player_Achievement_Success;           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Test_Prop_Id_Validity_IdIsValid;          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_AchievementManager_C_Activate_By_Id) == 0x000008, "Wrong alignment on B_AchievementManager_C_Activate_By_Id");
static_assert(sizeof(B_AchievementManager_C_Activate_By_Id) == 0x000028, "Wrong size on B_AchievementManager_C_Activate_By_Id");
static_assert(offsetof(B_AchievementManager_C_Activate_By_Id, PlayerState) == 0x000000, "Member 'B_AchievementManager_C_Activate_By_Id::PlayerState' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Activate_By_Id, Achievement_Type) == 0x000008, "Member 'B_AchievementManager_C_Activate_By_Id::Achievement_Type' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Activate_By_Id, PropID) == 0x00000C, "Member 'B_AchievementManager_C_Activate_By_Id::PropID' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Activate_By_Id, Achievement) == 0x000010, "Member 'B_AchievementManager_C_Activate_By_Id::Achievement' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Activate_By_Id, CallFunc_Get_Player_Achievement_Achievement) == 0x000018, "Member 'B_AchievementManager_C_Activate_By_Id::CallFunc_Get_Player_Achievement_Achievement' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Activate_By_Id, CallFunc_Get_Player_Achievement_Success) == 0x000020, "Member 'B_AchievementManager_C_Activate_By_Id::CallFunc_Get_Player_Achievement_Success' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Activate_By_Id, CallFunc_Test_Prop_Id_Validity_IdIsValid) == 0x000021, "Member 'B_AchievementManager_C_Activate_By_Id::CallFunc_Test_Prop_Id_Validity_IdIsValid' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Activate_By_Id, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000022, "Member 'B_AchievementManager_C_Activate_By_Id::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");

// Function B_AchievementManager.B_AchievementManager_C.Check Achievement Validity
// 0x0038 (0x0038 - 0x0000)
struct B_AchievementManager_C_Check_Achievement_Validity final
{
public:
	class AB_PlayerState_C*                       PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_Achievement_C*                       Achievement;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          IsValid;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Valid;                                             // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_GameMode_C*                          CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Achievement_Is_Not_Owned_IsNotOwned;      // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_AchievementManager_C_Check_Achievement_Validity) == 0x000008, "Wrong alignment on B_AchievementManager_C_Check_Achievement_Validity");
static_assert(sizeof(B_AchievementManager_C_Check_Achievement_Validity) == 0x000038, "Wrong size on B_AchievementManager_C_Check_Achievement_Validity");
static_assert(offsetof(B_AchievementManager_C_Check_Achievement_Validity, PlayerState) == 0x000000, "Member 'B_AchievementManager_C_Check_Achievement_Validity::PlayerState' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Check_Achievement_Validity, Achievement) == 0x000008, "Member 'B_AchievementManager_C_Check_Achievement_Validity::Achievement' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Check_Achievement_Validity, IsValid) == 0x000010, "Member 'B_AchievementManager_C_Check_Achievement_Validity::IsValid' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Check_Achievement_Validity, Valid) == 0x000011, "Member 'B_AchievementManager_C_Check_Achievement_Validity::Valid' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Check_Achievement_Validity, Temp_int_Array_Index_Variable) == 0x000014, "Member 'B_AchievementManager_C_Check_Achievement_Validity::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Check_Achievement_Validity, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'B_AchievementManager_C_Check_Achievement_Validity::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Check_Achievement_Validity, CallFunc_Array_Get_Item) == 0x000020, "Member 'B_AchievementManager_C_Check_Achievement_Validity::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Check_Achievement_Validity, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'B_AchievementManager_C_Check_Achievement_Validity::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Check_Achievement_Validity, CallFunc_Less_IntInt_ReturnValue) == 0x00002C, "Member 'B_AchievementManager_C_Check_Achievement_Validity::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Check_Achievement_Validity, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'B_AchievementManager_C_Check_Achievement_Validity::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Check_Achievement_Validity, CallFunc_Achievement_Is_Not_Owned_IsNotOwned) == 0x000034, "Member 'B_AchievementManager_C_Check_Achievement_Validity::CallFunc_Achievement_Is_Not_Owned_IsNotOwned' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Check_Achievement_Validity, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000035, "Member 'B_AchievementManager_C_Check_Achievement_Validity::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");

// Function B_AchievementManager.B_AchievementManager_C.Check Prop Achievements
// 0x0028 (0x0028 - 0x0000)
struct B_AchievementManager_C_Check_Prop_Achievements final
{
public:
	int32                                         PropID;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       PlayerState;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_SeekGameState_C*                     SeekGameState;                                     // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       ControllingPlayer;                                 // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentPropId;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_AchievementManager_C_Check_Prop_Achievements) == 0x000008, "Wrong alignment on B_AchievementManager_C_Check_Prop_Achievements");
static_assert(sizeof(B_AchievementManager_C_Check_Prop_Achievements) == 0x000028, "Wrong size on B_AchievementManager_C_Check_Prop_Achievements");
static_assert(offsetof(B_AchievementManager_C_Check_Prop_Achievements, PropID) == 0x000000, "Member 'B_AchievementManager_C_Check_Prop_Achievements::PropID' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Check_Prop_Achievements, PlayerState) == 0x000008, "Member 'B_AchievementManager_C_Check_Prop_Achievements::PlayerState' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Check_Prop_Achievements, SeekGameState) == 0x000010, "Member 'B_AchievementManager_C_Check_Prop_Achievements::SeekGameState' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Check_Prop_Achievements, ControllingPlayer) == 0x000018, "Member 'B_AchievementManager_C_Check_Prop_Achievements::ControllingPlayer' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Check_Prop_Achievements, CurrentPropId) == 0x000020, "Member 'B_AchievementManager_C_Check_Prop_Achievements::CurrentPropId' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Check_Prop_Achievements, K2Node_SwitchEnum_CmpSuccess) == 0x000024, "Member 'B_AchievementManager_C_Check_Prop_Achievements::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function B_AchievementManager.B_AchievementManager_C.CheckDefaultNrOfActivePlayers
// 0x001C (0x001C - 0x0000)
struct B_AchievementManager_C_CheckDefaultNrOfActivePlayers final
{
public:
	bool                                          Sufficient_Players;                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount; // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetHuntersCount_HuntersCount;             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetWitchesCount_WitchesCount;             // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_1;             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_AchievementManager_C_CheckDefaultNrOfActivePlayers) == 0x000004, "Wrong alignment on B_AchievementManager_C_CheckDefaultNrOfActivePlayers");
static_assert(sizeof(B_AchievementManager_C_CheckDefaultNrOfActivePlayers) == 0x00001C, "Wrong size on B_AchievementManager_C_CheckDefaultNrOfActivePlayers");
static_assert(offsetof(B_AchievementManager_C_CheckDefaultNrOfActivePlayers, Sufficient_Players) == 0x000000, "Member 'B_AchievementManager_C_CheckDefaultNrOfActivePlayers::Sufficient_Players' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_CheckDefaultNrOfActivePlayers, CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount) == 0x000004, "Member 'B_AchievementManager_C_CheckDefaultNrOfActivePlayers::CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_CheckDefaultNrOfActivePlayers, CallFunc_GetHuntersCount_HuntersCount) == 0x000008, "Member 'B_AchievementManager_C_CheckDefaultNrOfActivePlayers::CallFunc_GetHuntersCount_HuntersCount' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_CheckDefaultNrOfActivePlayers, CallFunc_GetWitchesCount_WitchesCount) == 0x000009, "Member 'B_AchievementManager_C_CheckDefaultNrOfActivePlayers::CallFunc_GetWitchesCount_WitchesCount' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_CheckDefaultNrOfActivePlayers, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00000C, "Member 'B_AchievementManager_C_CheckDefaultNrOfActivePlayers::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_CheckDefaultNrOfActivePlayers, CallFunc_Conv_ByteToInt_ReturnValue_1) == 0x000010, "Member 'B_AchievementManager_C_CheckDefaultNrOfActivePlayers::CallFunc_Conv_ByteToInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_CheckDefaultNrOfActivePlayers, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'B_AchievementManager_C_CheckDefaultNrOfActivePlayers::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_CheckDefaultNrOfActivePlayers, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000018, "Member 'B_AchievementManager_C_CheckDefaultNrOfActivePlayers::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function B_AchievementManager.B_AchievementManager_C.CheckNrOfActivePlayers
// 0x0010 (0x0010 - 0x0000)
struct B_AchievementManager_C_CheckNrOfActivePlayers final
{
public:
	bool                                          Sufficient_Players;                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount; // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumberOfActivePlayers_ActiveCount;     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_AchievementManager_C_CheckNrOfActivePlayers) == 0x000004, "Wrong alignment on B_AchievementManager_C_CheckNrOfActivePlayers");
static_assert(sizeof(B_AchievementManager_C_CheckNrOfActivePlayers) == 0x000010, "Wrong size on B_AchievementManager_C_CheckNrOfActivePlayers");
static_assert(offsetof(B_AchievementManager_C_CheckNrOfActivePlayers, Sufficient_Players) == 0x000000, "Member 'B_AchievementManager_C_CheckNrOfActivePlayers::Sufficient_Players' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_CheckNrOfActivePlayers, CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount) == 0x000004, "Member 'B_AchievementManager_C_CheckNrOfActivePlayers::CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_CheckNrOfActivePlayers, CallFunc_GetNumberOfActivePlayers_ActiveCount) == 0x000008, "Member 'B_AchievementManager_C_CheckNrOfActivePlayers::CallFunc_GetNumberOfActivePlayers_ActiveCount' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_CheckNrOfActivePlayers, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00000C, "Member 'B_AchievementManager_C_CheckNrOfActivePlayers::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function B_AchievementManager.B_AchievementManager_C.Create New Achievement Instance
// 0x0028 (0x0028 - 0x0000)
struct B_AchievementManager_C_Create_New_Achievement_Instance final
{
public:
	class UB_Achievement_C*                       Model;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_Achievement_C*                       Achievement;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_Achievement_C*                       TempAchievement;                                   // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_Achievement_C*                       CallFunc_CreateObject_Object;                      // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_AchievementManager_C_Create_New_Achievement_Instance) == 0x000008, "Wrong alignment on B_AchievementManager_C_Create_New_Achievement_Instance");
static_assert(sizeof(B_AchievementManager_C_Create_New_Achievement_Instance) == 0x000028, "Wrong size on B_AchievementManager_C_Create_New_Achievement_Instance");
static_assert(offsetof(B_AchievementManager_C_Create_New_Achievement_Instance, Model) == 0x000000, "Member 'B_AchievementManager_C_Create_New_Achievement_Instance::Model' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Create_New_Achievement_Instance, Achievement) == 0x000008, "Member 'B_AchievementManager_C_Create_New_Achievement_Instance::Achievement' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Create_New_Achievement_Instance, Success) == 0x000010, "Member 'B_AchievementManager_C_Create_New_Achievement_Instance::Success' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Create_New_Achievement_Instance, TempAchievement) == 0x000018, "Member 'B_AchievementManager_C_Create_New_Achievement_Instance::TempAchievement' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Create_New_Achievement_Instance, CallFunc_CreateObject_Object) == 0x000020, "Member 'B_AchievementManager_C_Create_New_Achievement_Instance::CallFunc_CreateObject_Object' has a wrong offset!");

// Function B_AchievementManager.B_AchievementManager_C.Deactivate Achievement
// 0x0028 (0x0028 - 0x0000)
struct B_AchievementManager_C_Deactivate_Achievement final
{
public:
	class AB_PlayerState_C*                       PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	E_Achievements                                AchievementType;                                   // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_Achievement_C*                       Achievement;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_Achievement_C*                       CallFunc_Get_Player_Achievement_Achievement;       // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Get_Player_Achievement_Success;           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_AchievementManager_C_Deactivate_Achievement) == 0x000008, "Wrong alignment on B_AchievementManager_C_Deactivate_Achievement");
static_assert(sizeof(B_AchievementManager_C_Deactivate_Achievement) == 0x000028, "Wrong size on B_AchievementManager_C_Deactivate_Achievement");
static_assert(offsetof(B_AchievementManager_C_Deactivate_Achievement, PlayerState) == 0x000000, "Member 'B_AchievementManager_C_Deactivate_Achievement::PlayerState' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Deactivate_Achievement, AchievementType) == 0x000008, "Member 'B_AchievementManager_C_Deactivate_Achievement::AchievementType' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Deactivate_Achievement, Achievement) == 0x000010, "Member 'B_AchievementManager_C_Deactivate_Achievement::Achievement' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Deactivate_Achievement, CallFunc_Get_Player_Achievement_Achievement) == 0x000018, "Member 'B_AchievementManager_C_Deactivate_Achievement::CallFunc_Get_Player_Achievement_Achievement' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Deactivate_Achievement, CallFunc_Get_Player_Achievement_Success) == 0x000020, "Member 'B_AchievementManager_C_Deactivate_Achievement::CallFunc_Get_Player_Achievement_Success' has a wrong offset!");

// Function B_AchievementManager.B_AchievementManager_C.ExecuteUbergraph_B_AchievementManager
// 0x00C8 (0x00C8 - 0x0000)
struct B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount; // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UB_Achievement_C*                       CallFunc_CreateObject_Object;                      // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_Achievement_C*                       CallFunc_CreateObject_Object_1;                    // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_Achievement_C*                       CallFunc_CreateObject_Object_2;                    // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_Achievement_C*                       CallFunc_CreateObject_Object_3;                    // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_Achievement_C*                       CallFunc_CreateObject_Object_4;                    // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_Achievement_C*                       CallFunc_CreateObject_Object_5;                    // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_Achievement_C*                       CallFunc_CreateObject_Object_6;                    // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_Achievement_C*                       CallFunc_CreateObject_Object_7;                    // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_Achievement_C*                       CallFunc_CreateObject_Object_8;                    // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_Achievement_C*                       CallFunc_CreateObject_Object_9;                    // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_Achievement_C*                       CallFunc_CreateObject_Object_10;                   // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_Achievement_C*                       CallFunc_CreateObject_Object_11;                   // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_Achievement_C*                       CallFunc_CreateObject_Object_12;                   // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_Achievement_C*                       CallFunc_CreateObject_Object_13;                   // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_CustomEvent_GameInstance;                   // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameMode_C*                          K2Node_CustomEvent_GameMode;                       // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_Achievement_C*                       CallFunc_CreateObject_Object_14;                   // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount_1; // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount_2; // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount_3; // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount_4; // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount_5; // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount_6; // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount_7; // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount_8; // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount_9; // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount_10; // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount_11; // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount_12; // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount_13; // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount_14; // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager) == 0x000008, "Wrong alignment on B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager");
static_assert(sizeof(B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager) == 0x0000C8, "Wrong size on B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager");
static_assert(offsetof(B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager, EntryPoint) == 0x000000, "Member 'B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager::EntryPoint' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager, CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount) == 0x000004, "Member 'B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager::CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager, CallFunc_CreateObject_Object) == 0x000008, "Member 'B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager::CallFunc_CreateObject_Object' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager, CallFunc_CreateObject_Object_1) == 0x000010, "Member 'B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager::CallFunc_CreateObject_Object_1' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager, CallFunc_CreateObject_Object_2) == 0x000018, "Member 'B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager::CallFunc_CreateObject_Object_2' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager, CallFunc_CreateObject_Object_3) == 0x000020, "Member 'B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager::CallFunc_CreateObject_Object_3' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager, CallFunc_CreateObject_Object_4) == 0x000028, "Member 'B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager::CallFunc_CreateObject_Object_4' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager, CallFunc_CreateObject_Object_5) == 0x000030, "Member 'B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager::CallFunc_CreateObject_Object_5' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager, CallFunc_CreateObject_Object_6) == 0x000038, "Member 'B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager::CallFunc_CreateObject_Object_6' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager, CallFunc_CreateObject_Object_7) == 0x000040, "Member 'B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager::CallFunc_CreateObject_Object_7' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager, CallFunc_CreateObject_Object_8) == 0x000048, "Member 'B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager::CallFunc_CreateObject_Object_8' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager, CallFunc_CreateObject_Object_9) == 0x000050, "Member 'B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager::CallFunc_CreateObject_Object_9' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager, CallFunc_CreateObject_Object_10) == 0x000058, "Member 'B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager::CallFunc_CreateObject_Object_10' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager, CallFunc_CreateObject_Object_11) == 0x000060, "Member 'B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager::CallFunc_CreateObject_Object_11' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager, CallFunc_CreateObject_Object_12) == 0x000068, "Member 'B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager::CallFunc_CreateObject_Object_12' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager, CallFunc_CreateObject_Object_13) == 0x000070, "Member 'B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager::CallFunc_CreateObject_Object_13' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager, K2Node_CustomEvent_GameInstance) == 0x000078, "Member 'B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager::K2Node_CustomEvent_GameInstance' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager, K2Node_CustomEvent_GameMode) == 0x000080, "Member 'B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager::K2Node_CustomEvent_GameMode' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager, CallFunc_CreateObject_Object_14) == 0x000088, "Member 'B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager::CallFunc_CreateObject_Object_14' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager, CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount_1) == 0x000090, "Member 'B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager::CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount_1' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager, CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount_2) == 0x000094, "Member 'B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager::CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount_2' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager, CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount_3) == 0x000098, "Member 'B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager::CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount_3' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager, CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount_4) == 0x00009C, "Member 'B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager::CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount_4' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager, CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount_5) == 0x0000A0, "Member 'B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager::CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount_5' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager, CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount_6) == 0x0000A4, "Member 'B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager::CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount_6' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager, CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount_7) == 0x0000A8, "Member 'B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager::CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount_7' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager, CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount_8) == 0x0000AC, "Member 'B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager::CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount_8' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager, CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount_9) == 0x0000B0, "Member 'B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager::CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount_9' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager, CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount_10) == 0x0000B4, "Member 'B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager::CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount_10' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager, CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount_11) == 0x0000B8, "Member 'B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager::CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount_11' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager, CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount_12) == 0x0000BC, "Member 'B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager::CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount_12' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager, CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount_13) == 0x0000C0, "Member 'B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager::CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount_13' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager, CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount_14) == 0x0000C4, "Member 'B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager::CallFunc_GetDefaultCompletionRequiredAmountOfPlayers_DefaultRequiredAmount_14' has a wrong offset!");

// Function B_AchievementManager.B_AchievementManager_C.Get AchBarrelRoll Ids
// 0x0058 (0x0058 - 0x0000)
struct B_AchievementManager_C_Get_AchBarrelRoll_Ids final
{
public:
	TArray<int32>                                 IDs;                                               // 0x0000(0x0010)(Parm, OutParm)
	class AB_SokeBarrel_C*                        CallFunc_CreateObject_Object;                      // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_BarrelGunpowder_C*                   CallFunc_CreateObject_Object_1;                    // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GurkenBarrel_C*                      CallFunc_CreateObject_Object_2;                    // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_BarrelBig_C*                         CallFunc_CreateObject_Object_3;                    // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_BarrelFruit_C*                       CallFunc_CreateObject_Object_4;                    // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_Barrel02_C*                          CallFunc_CreateObject_Object_5;                    // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_Barrel_C*                            CallFunc_CreateObject_Object_6;                    // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x0048(0x0010)(ReferenceParm)
};
static_assert(alignof(B_AchievementManager_C_Get_AchBarrelRoll_Ids) == 0x000008, "Wrong alignment on B_AchievementManager_C_Get_AchBarrelRoll_Ids");
static_assert(sizeof(B_AchievementManager_C_Get_AchBarrelRoll_Ids) == 0x000058, "Wrong size on B_AchievementManager_C_Get_AchBarrelRoll_Ids");
static_assert(offsetof(B_AchievementManager_C_Get_AchBarrelRoll_Ids, IDs) == 0x000000, "Member 'B_AchievementManager_C_Get_AchBarrelRoll_Ids::IDs' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_AchBarrelRoll_Ids, CallFunc_CreateObject_Object) == 0x000010, "Member 'B_AchievementManager_C_Get_AchBarrelRoll_Ids::CallFunc_CreateObject_Object' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_AchBarrelRoll_Ids, CallFunc_CreateObject_Object_1) == 0x000018, "Member 'B_AchievementManager_C_Get_AchBarrelRoll_Ids::CallFunc_CreateObject_Object_1' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_AchBarrelRoll_Ids, CallFunc_CreateObject_Object_2) == 0x000020, "Member 'B_AchievementManager_C_Get_AchBarrelRoll_Ids::CallFunc_CreateObject_Object_2' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_AchBarrelRoll_Ids, CallFunc_CreateObject_Object_3) == 0x000028, "Member 'B_AchievementManager_C_Get_AchBarrelRoll_Ids::CallFunc_CreateObject_Object_3' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_AchBarrelRoll_Ids, CallFunc_CreateObject_Object_4) == 0x000030, "Member 'B_AchievementManager_C_Get_AchBarrelRoll_Ids::CallFunc_CreateObject_Object_4' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_AchBarrelRoll_Ids, CallFunc_CreateObject_Object_5) == 0x000038, "Member 'B_AchievementManager_C_Get_AchBarrelRoll_Ids::CallFunc_CreateObject_Object_5' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_AchBarrelRoll_Ids, CallFunc_CreateObject_Object_6) == 0x000040, "Member 'B_AchievementManager_C_Get_AchBarrelRoll_Ids::CallFunc_CreateObject_Object_6' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_AchBarrelRoll_Ids, K2Node_MakeArray_Array) == 0x000048, "Member 'B_AchievementManager_C_Get_AchBarrelRoll_Ids::K2Node_MakeArray_Array' has a wrong offset!");

// Function B_AchievementManager.B_AchievementManager_C.Get AchBig Ids
// 0x0048 (0x0048 - 0x0000)
struct B_AchievementManager_C_Get_AchBig_Ids final
{
public:
	TArray<int32>                                 IDs;                                               // 0x0000(0x0010)(Parm, OutParm)
	class AB_Pyramid_C*                           CallFunc_CreateObject_Object;                      // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_StoneBall_C*                         CallFunc_CreateObject_Object_1;                    // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_BillboardTWWCliff_C*                 CallFunc_CreateObject_Object_2;                    // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_HouseSnow_C*                         CallFunc_CreateObject_Object_3;                    // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_House_C*                             CallFunc_CreateObject_Object_4;                    // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x0038(0x0010)(ReferenceParm)
};
static_assert(alignof(B_AchievementManager_C_Get_AchBig_Ids) == 0x000008, "Wrong alignment on B_AchievementManager_C_Get_AchBig_Ids");
static_assert(sizeof(B_AchievementManager_C_Get_AchBig_Ids) == 0x000048, "Wrong size on B_AchievementManager_C_Get_AchBig_Ids");
static_assert(offsetof(B_AchievementManager_C_Get_AchBig_Ids, IDs) == 0x000000, "Member 'B_AchievementManager_C_Get_AchBig_Ids::IDs' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_AchBig_Ids, CallFunc_CreateObject_Object) == 0x000010, "Member 'B_AchievementManager_C_Get_AchBig_Ids::CallFunc_CreateObject_Object' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_AchBig_Ids, CallFunc_CreateObject_Object_1) == 0x000018, "Member 'B_AchievementManager_C_Get_AchBig_Ids::CallFunc_CreateObject_Object_1' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_AchBig_Ids, CallFunc_CreateObject_Object_2) == 0x000020, "Member 'B_AchievementManager_C_Get_AchBig_Ids::CallFunc_CreateObject_Object_2' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_AchBig_Ids, CallFunc_CreateObject_Object_3) == 0x000028, "Member 'B_AchievementManager_C_Get_AchBig_Ids::CallFunc_CreateObject_Object_3' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_AchBig_Ids, CallFunc_CreateObject_Object_4) == 0x000030, "Member 'B_AchievementManager_C_Get_AchBig_Ids::CallFunc_CreateObject_Object_4' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_AchBig_Ids, K2Node_MakeArray_Array) == 0x000038, "Member 'B_AchievementManager_C_Get_AchBig_Ids::K2Node_MakeArray_Array' has a wrong offset!");

// Function B_AchievementManager.B_AchievementManager_C.Get AchFruitSalad Ids
// 0x0098 (0x0098 - 0x0000)
struct B_AchievementManager_C_Get_AchFruitSalad_Ids final
{
public:
	TArray<int32>                                 IDs;                                               // 0x0000(0x0010)(Parm, OutParm)
	class AB_FruitApe_C*                          CallFunc_CreateObject_Object;                      // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_BloodOrange_C*                       CallFunc_CreateObject_Object_1;                    // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_BananaGreen_C*                       CallFunc_CreateObject_Object_2;                    // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_Banana_C*                            CallFunc_CreateObject_Object_3;                    // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_BloodOrangeSlice_C*                  CallFunc_CreateObject_Object_4;                    // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_MelonSlice_C*                        CallFunc_CreateObject_Object_5;                    // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_MelonSliceBite_C*                    CallFunc_CreateObject_Object_6;                    // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_Melon_C*                             CallFunc_CreateObject_Object_7;                    // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_CocoNutRawHalf_C*                    CallFunc_CreateObject_Object_8;                    // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_CocoNutRaw_C*                        CallFunc_CreateObject_Object_9;                    // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_CocoNutHalf_C*                       CallFunc_CreateObject_Object_10;                   // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_CocoNut_C*                           CallFunc_CreateObject_Object_11;                   // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_Mango_C*                             CallFunc_CreateObject_Object_12;                   // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_Bananas_C*                           CallFunc_CreateObject_Object_13;                   // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_Ananas_C*                            CallFunc_CreateObject_Object_14;                   // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x0088(0x0010)(ReferenceParm)
};
static_assert(alignof(B_AchievementManager_C_Get_AchFruitSalad_Ids) == 0x000008, "Wrong alignment on B_AchievementManager_C_Get_AchFruitSalad_Ids");
static_assert(sizeof(B_AchievementManager_C_Get_AchFruitSalad_Ids) == 0x000098, "Wrong size on B_AchievementManager_C_Get_AchFruitSalad_Ids");
static_assert(offsetof(B_AchievementManager_C_Get_AchFruitSalad_Ids, IDs) == 0x000000, "Member 'B_AchievementManager_C_Get_AchFruitSalad_Ids::IDs' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_AchFruitSalad_Ids, CallFunc_CreateObject_Object) == 0x000010, "Member 'B_AchievementManager_C_Get_AchFruitSalad_Ids::CallFunc_CreateObject_Object' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_AchFruitSalad_Ids, CallFunc_CreateObject_Object_1) == 0x000018, "Member 'B_AchievementManager_C_Get_AchFruitSalad_Ids::CallFunc_CreateObject_Object_1' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_AchFruitSalad_Ids, CallFunc_CreateObject_Object_2) == 0x000020, "Member 'B_AchievementManager_C_Get_AchFruitSalad_Ids::CallFunc_CreateObject_Object_2' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_AchFruitSalad_Ids, CallFunc_CreateObject_Object_3) == 0x000028, "Member 'B_AchievementManager_C_Get_AchFruitSalad_Ids::CallFunc_CreateObject_Object_3' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_AchFruitSalad_Ids, CallFunc_CreateObject_Object_4) == 0x000030, "Member 'B_AchievementManager_C_Get_AchFruitSalad_Ids::CallFunc_CreateObject_Object_4' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_AchFruitSalad_Ids, CallFunc_CreateObject_Object_5) == 0x000038, "Member 'B_AchievementManager_C_Get_AchFruitSalad_Ids::CallFunc_CreateObject_Object_5' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_AchFruitSalad_Ids, CallFunc_CreateObject_Object_6) == 0x000040, "Member 'B_AchievementManager_C_Get_AchFruitSalad_Ids::CallFunc_CreateObject_Object_6' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_AchFruitSalad_Ids, CallFunc_CreateObject_Object_7) == 0x000048, "Member 'B_AchievementManager_C_Get_AchFruitSalad_Ids::CallFunc_CreateObject_Object_7' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_AchFruitSalad_Ids, CallFunc_CreateObject_Object_8) == 0x000050, "Member 'B_AchievementManager_C_Get_AchFruitSalad_Ids::CallFunc_CreateObject_Object_8' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_AchFruitSalad_Ids, CallFunc_CreateObject_Object_9) == 0x000058, "Member 'B_AchievementManager_C_Get_AchFruitSalad_Ids::CallFunc_CreateObject_Object_9' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_AchFruitSalad_Ids, CallFunc_CreateObject_Object_10) == 0x000060, "Member 'B_AchievementManager_C_Get_AchFruitSalad_Ids::CallFunc_CreateObject_Object_10' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_AchFruitSalad_Ids, CallFunc_CreateObject_Object_11) == 0x000068, "Member 'B_AchievementManager_C_Get_AchFruitSalad_Ids::CallFunc_CreateObject_Object_11' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_AchFruitSalad_Ids, CallFunc_CreateObject_Object_12) == 0x000070, "Member 'B_AchievementManager_C_Get_AchFruitSalad_Ids::CallFunc_CreateObject_Object_12' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_AchFruitSalad_Ids, CallFunc_CreateObject_Object_13) == 0x000078, "Member 'B_AchievementManager_C_Get_AchFruitSalad_Ids::CallFunc_CreateObject_Object_13' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_AchFruitSalad_Ids, CallFunc_CreateObject_Object_14) == 0x000080, "Member 'B_AchievementManager_C_Get_AchFruitSalad_Ids::CallFunc_CreateObject_Object_14' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_AchFruitSalad_Ids, K2Node_MakeArray_Array) == 0x000088, "Member 'B_AchievementManager_C_Get_AchFruitSalad_Ids::K2Node_MakeArray_Array' has a wrong offset!");

// Function B_AchievementManager.B_AchievementManager_C.Get Achievement Key
// 0x0050 (0x0050 - 0x0000)
struct B_AchievementManager_C_Get_Achievement_Key final
{
public:
	class UB_Achievement_C*                       Achievement;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	E_Achievements                                Key;                                               // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<E_Achievements>                        CallFunc_Map_Keys_Keys;                            // 0x0018(0x0010)(ReferenceParm)
	TArray<class FName>                           CallFunc_Map_Values_Values;                        // 0x0028(0x0010)(ReferenceParm)
	E_Achievements                                CallFunc_Array_Get_Item;                           // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Array_Get_Item_1;                         // 0x003C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_AchievementManager_C_Get_Achievement_Key) == 0x000008, "Wrong alignment on B_AchievementManager_C_Get_Achievement_Key");
static_assert(sizeof(B_AchievementManager_C_Get_Achievement_Key) == 0x000050, "Wrong size on B_AchievementManager_C_Get_Achievement_Key");
static_assert(offsetof(B_AchievementManager_C_Get_Achievement_Key, Achievement) == 0x000000, "Member 'B_AchievementManager_C_Get_Achievement_Key::Achievement' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_Achievement_Key, Key) == 0x000008, "Member 'B_AchievementManager_C_Get_Achievement_Key::Key' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_Achievement_Key, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'B_AchievementManager_C_Get_Achievement_Key::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_Achievement_Key, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'B_AchievementManager_C_Get_Achievement_Key::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_Achievement_Key, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'B_AchievementManager_C_Get_Achievement_Key::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_Achievement_Key, CallFunc_Map_Keys_Keys) == 0x000018, "Member 'B_AchievementManager_C_Get_Achievement_Key::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_Achievement_Key, CallFunc_Map_Values_Values) == 0x000028, "Member 'B_AchievementManager_C_Get_Achievement_Key::CallFunc_Map_Values_Values' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_Achievement_Key, CallFunc_Array_Get_Item) == 0x000038, "Member 'B_AchievementManager_C_Get_Achievement_Key::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_Achievement_Key, CallFunc_Array_Get_Item_1) == 0x00003C, "Member 'B_AchievementManager_C_Get_Achievement_Key::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_Achievement_Key, CallFunc_Array_Length_ReturnValue) == 0x000044, "Member 'B_AchievementManager_C_Get_Achievement_Key::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_Achievement_Key, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'B_AchievementManager_C_Get_Achievement_Key::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_Achievement_Key, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000049, "Member 'B_AchievementManager_C_Get_Achievement_Key::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");

// Function B_AchievementManager.B_AchievementManager_C.Get AchPhoto Ids
// 0x0028 (0x0028 - 0x0000)
struct B_AchievementManager_C_Get_AchPhoto_Ids final
{
public:
	TArray<int32>                                 IDs;                                               // 0x0000(0x0010)(Parm, OutParm)
	class AB_Camera_C*                            CallFunc_CreateObject_Object;                      // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x0018(0x0010)(ReferenceParm)
};
static_assert(alignof(B_AchievementManager_C_Get_AchPhoto_Ids) == 0x000008, "Wrong alignment on B_AchievementManager_C_Get_AchPhoto_Ids");
static_assert(sizeof(B_AchievementManager_C_Get_AchPhoto_Ids) == 0x000028, "Wrong size on B_AchievementManager_C_Get_AchPhoto_Ids");
static_assert(offsetof(B_AchievementManager_C_Get_AchPhoto_Ids, IDs) == 0x000000, "Member 'B_AchievementManager_C_Get_AchPhoto_Ids::IDs' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_AchPhoto_Ids, CallFunc_CreateObject_Object) == 0x000010, "Member 'B_AchievementManager_C_Get_AchPhoto_Ids::CallFunc_CreateObject_Object' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_AchPhoto_Ids, K2Node_MakeArray_Array) == 0x000018, "Member 'B_AchievementManager_C_Get_AchPhoto_Ids::K2Node_MakeArray_Array' has a wrong offset!");

// Function B_AchievementManager.B_AchievementManager_C.Get Divider
// 0x0020 (0x0020 - 0x0000)
struct B_AchievementManager_C_Get_Divider final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Divider;                                           // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TempDivider;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_AchievementManager_C_Get_Divider) == 0x000004, "Wrong alignment on B_AchievementManager_C_Get_Divider");
static_assert(sizeof(B_AchievementManager_C_Get_Divider) == 0x000020, "Wrong size on B_AchievementManager_C_Get_Divider");
static_assert(offsetof(B_AchievementManager_C_Get_Divider, Index_0) == 0x000000, "Member 'B_AchievementManager_C_Get_Divider::Index_0' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_Divider, Divider) == 0x000004, "Member 'B_AchievementManager_C_Get_Divider::Divider' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_Divider, TempDivider) == 0x000008, "Member 'B_AchievementManager_C_Get_Divider::TempDivider' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_Divider, Temp_int_Variable) == 0x00000C, "Member 'B_AchievementManager_C_Get_Divider::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_Divider, CallFunc_Divide_IntInt_ReturnValue) == 0x000010, "Member 'B_AchievementManager_C_Get_Divider::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_Divider, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'B_AchievementManager_C_Get_Divider::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_Divider, CallFunc_Percent_IntInt_ReturnValue) == 0x000018, "Member 'B_AchievementManager_C_Get_Divider::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_Divider, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00001C, "Member 'B_AchievementManager_C_Get_Divider::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");

// Function B_AchievementManager.B_AchievementManager_C.Get Player Achievement
// 0x0058 (0x0058 - 0x0000)
struct B_AchievementManager_C_Get_Player_Achievement final
{
public:
	class AB_PlayerState_C*                       PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	E_Achievements                                Achievement_Type;                                  // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_Achievement_C*                       Achievement;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Found;                                             // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_Achievement_C*                       Match;                                             // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Map_Find_Value;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UB_Achievement_C*                       CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_AchievementManager_C_Get_Player_Achievement) == 0x000008, "Wrong alignment on B_AchievementManager_C_Get_Player_Achievement");
static_assert(sizeof(B_AchievementManager_C_Get_Player_Achievement) == 0x000058, "Wrong size on B_AchievementManager_C_Get_Player_Achievement");
static_assert(offsetof(B_AchievementManager_C_Get_Player_Achievement, PlayerState) == 0x000000, "Member 'B_AchievementManager_C_Get_Player_Achievement::PlayerState' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_Player_Achievement, Achievement_Type) == 0x000008, "Member 'B_AchievementManager_C_Get_Player_Achievement::Achievement_Type' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_Player_Achievement, Achievement) == 0x000010, "Member 'B_AchievementManager_C_Get_Player_Achievement::Achievement' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_Player_Achievement, Success) == 0x000018, "Member 'B_AchievementManager_C_Get_Player_Achievement::Success' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_Player_Achievement, Found) == 0x000019, "Member 'B_AchievementManager_C_Get_Player_Achievement::Found' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_Player_Achievement, Match) == 0x000020, "Member 'B_AchievementManager_C_Get_Player_Achievement::Match' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_Player_Achievement, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'B_AchievementManager_C_Get_Player_Achievement::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_Player_Achievement, Temp_bool_True_if_break_was_hit_Variable) == 0x000029, "Member 'B_AchievementManager_C_Get_Player_Achievement::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_Player_Achievement, CallFunc_Not_PreBool_ReturnValue) == 0x00002A, "Member 'B_AchievementManager_C_Get_Player_Achievement::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_Player_Achievement, Temp_int_Array_Index_Variable) == 0x00002C, "Member 'B_AchievementManager_C_Get_Player_Achievement::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_Player_Achievement, Temp_int_Loop_Counter_Variable) == 0x000030, "Member 'B_AchievementManager_C_Get_Player_Achievement::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_Player_Achievement, CallFunc_Add_IntInt_ReturnValue) == 0x000034, "Member 'B_AchievementManager_C_Get_Player_Achievement::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_Player_Achievement, CallFunc_Map_Find_Value) == 0x000038, "Member 'B_AchievementManager_C_Get_Player_Achievement::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_Player_Achievement, CallFunc_Map_Find_ReturnValue) == 0x000040, "Member 'B_AchievementManager_C_Get_Player_Achievement::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_Player_Achievement, CallFunc_Array_Length_ReturnValue) == 0x000044, "Member 'B_AchievementManager_C_Get_Player_Achievement::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_Player_Achievement, CallFunc_Array_Get_Item) == 0x000048, "Member 'B_AchievementManager_C_Get_Player_Achievement::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_Player_Achievement, CallFunc_Less_IntInt_ReturnValue) == 0x000050, "Member 'B_AchievementManager_C_Get_Player_Achievement::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_Player_Achievement, CallFunc_IsValid_ReturnValue_1) == 0x000051, "Member 'B_AchievementManager_C_Get_Player_Achievement::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_Player_Achievement, CallFunc_BooleanAND_ReturnValue) == 0x000052, "Member 'B_AchievementManager_C_Get_Player_Achievement::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Get_Player_Achievement, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000053, "Member 'B_AchievementManager_C_Get_Player_Achievement::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");

// Function B_AchievementManager.B_AchievementManager_C.Give Achievement
// 0x0178 (0x0178 - 0x0000)
struct B_AchievementManager_C_Give_Achievement final
{
public:
	class AB_PlayerState_C*                       PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	E_Achievements                                Achievement_Type;                                  // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Name_0;                                            // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCustomLogSubsystem*                    CallFunc_GetEngineSubsystem_ReturnValue;           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetProductUserId_ProductUserId;           // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetProductUserId_PlatformType;            // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue_1;          // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UB_NewStatsAndAchievementsManager_C*    CallFunc_GetStatsAndAchievementsManager_Result;    // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WithEditor_ReturnValue;                   // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckNrOfActivePlayers_Sufficient_Players; // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetGSAchievement_Result;                  // 0x00DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DB[0x5];                                       // 0x00DB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_Achievement_C*                       CallFunc_Get_Player_Achievement_Achievement;       // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Get_Player_Achievement_Success;           // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetPlayerName_ReturnValue;                // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_String__CombineStrings_Multi_ReturnValue; // 0x0118(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_String__CombineStrings_Multi_ReturnValue_1; // 0x0128(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_String__CombineStrings_Multi_ReturnValue_2; // 0x0138(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_String__CombineStrings_Multi_ReturnValue_3; // 0x0148(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_String__CombineStrings_Multi_ReturnValue_4; // 0x0158(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Map_Find_Value;                           // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_AchievementManager_C_Give_Achievement) == 0x000008, "Wrong alignment on B_AchievementManager_C_Give_Achievement");
static_assert(sizeof(B_AchievementManager_C_Give_Achievement) == 0x000178, "Wrong size on B_AchievementManager_C_Give_Achievement");
static_assert(offsetof(B_AchievementManager_C_Give_Achievement, PlayerState) == 0x000000, "Member 'B_AchievementManager_C_Give_Achievement::PlayerState' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Give_Achievement, Achievement_Type) == 0x000008, "Member 'B_AchievementManager_C_Give_Achievement::Achievement_Type' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Give_Achievement, Name_0) == 0x00000C, "Member 'B_AchievementManager_C_Give_Achievement::Name_0' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Give_Achievement, CallFunc_GetEngineSubsystem_ReturnValue) == 0x000018, "Member 'B_AchievementManager_C_Give_Achievement::CallFunc_GetEngineSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Give_Achievement, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000020, "Member 'B_AchievementManager_C_Give_Achievement::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Give_Achievement, CallFunc_GetProductUserId_ProductUserId) == 0x000030, "Member 'B_AchievementManager_C_Give_Achievement::CallFunc_GetProductUserId_ProductUserId' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Give_Achievement, CallFunc_GetProductUserId_PlatformType) == 0x000040, "Member 'B_AchievementManager_C_Give_Achievement::CallFunc_GetProductUserId_PlatformType' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Give_Achievement, CallFunc_Concat_StrStr_ReturnValue) == 0x000050, "Member 'B_AchievementManager_C_Give_Achievement::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Give_Achievement, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000060, "Member 'B_AchievementManager_C_Give_Achievement::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Give_Achievement, CallFunc_Conv_IntToString_ReturnValue) == 0x000070, "Member 'B_AchievementManager_C_Give_Achievement::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Give_Achievement, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000080, "Member 'B_AchievementManager_C_Give_Achievement::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Give_Achievement, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000090, "Member 'B_AchievementManager_C_Give_Achievement::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Give_Achievement, CallFunc_Conv_NameToString_ReturnValue) == 0x0000A0, "Member 'B_AchievementManager_C_Give_Achievement::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Give_Achievement, CallFunc_Concat_StrStr_ReturnValue_4) == 0x0000B0, "Member 'B_AchievementManager_C_Give_Achievement::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Give_Achievement, CallFunc_Conv_NameToString_ReturnValue_1) == 0x0000C0, "Member 'B_AchievementManager_C_Give_Achievement::CallFunc_Conv_NameToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Give_Achievement, CallFunc_GetStatsAndAchievementsManager_Result) == 0x0000D0, "Member 'B_AchievementManager_C_Give_Achievement::CallFunc_GetStatsAndAchievementsManager_Result' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Give_Achievement, CallFunc_WithEditor_ReturnValue) == 0x0000D8, "Member 'B_AchievementManager_C_Give_Achievement::CallFunc_WithEditor_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Give_Achievement, CallFunc_CheckNrOfActivePlayers_Sufficient_Players) == 0x0000D9, "Member 'B_AchievementManager_C_Give_Achievement::CallFunc_CheckNrOfActivePlayers_Sufficient_Players' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Give_Achievement, CallFunc_SetGSAchievement_Result) == 0x0000DA, "Member 'B_AchievementManager_C_Give_Achievement::CallFunc_SetGSAchievement_Result' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Give_Achievement, CallFunc_Get_Player_Achievement_Achievement) == 0x0000E0, "Member 'B_AchievementManager_C_Give_Achievement::CallFunc_Get_Player_Achievement_Achievement' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Give_Achievement, CallFunc_Get_Player_Achievement_Success) == 0x0000E8, "Member 'B_AchievementManager_C_Give_Achievement::CallFunc_Get_Player_Achievement_Success' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Give_Achievement, CallFunc_GetDisplayName_ReturnValue) == 0x0000F0, "Member 'B_AchievementManager_C_Give_Achievement::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Give_Achievement, CallFunc_Array_RemoveItem_ReturnValue) == 0x000100, "Member 'B_AchievementManager_C_Give_Achievement::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Give_Achievement, CallFunc_GetPlayerName_ReturnValue) == 0x000108, "Member 'B_AchievementManager_C_Give_Achievement::CallFunc_GetPlayerName_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Give_Achievement, CallFunc_String__CombineStrings_Multi_ReturnValue) == 0x000118, "Member 'B_AchievementManager_C_Give_Achievement::CallFunc_String__CombineStrings_Multi_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Give_Achievement, CallFunc_String__CombineStrings_Multi_ReturnValue_1) == 0x000128, "Member 'B_AchievementManager_C_Give_Achievement::CallFunc_String__CombineStrings_Multi_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Give_Achievement, CallFunc_String__CombineStrings_Multi_ReturnValue_2) == 0x000138, "Member 'B_AchievementManager_C_Give_Achievement::CallFunc_String__CombineStrings_Multi_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Give_Achievement, CallFunc_String__CombineStrings_Multi_ReturnValue_3) == 0x000148, "Member 'B_AchievementManager_C_Give_Achievement::CallFunc_String__CombineStrings_Multi_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Give_Achievement, CallFunc_String__CombineStrings_Multi_ReturnValue_4) == 0x000158, "Member 'B_AchievementManager_C_Give_Achievement::CallFunc_String__CombineStrings_Multi_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Give_Achievement, CallFunc_Map_Find_Value) == 0x000168, "Member 'B_AchievementManager_C_Give_Achievement::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Give_Achievement, CallFunc_Map_Find_ReturnValue) == 0x000170, "Member 'B_AchievementManager_C_Give_Achievement::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function B_AchievementManager.B_AchievementManager_C.Initialize GS
// 0x0030 (0x0030 - 0x0000)
struct B_AchievementManager_C_Initialize_GS final
{
public:
	class AB_PlayerState_C*                       Player_State;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_Achievement_C*                       Achievement;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UB_Achievement_C*                       CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Check_Achievement_Validity_IsValid;       // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_AchievementManager_C_Initialize_GS) == 0x000008, "Wrong alignment on B_AchievementManager_C_Initialize_GS");
static_assert(sizeof(B_AchievementManager_C_Initialize_GS) == 0x000030, "Wrong size on B_AchievementManager_C_Initialize_GS");
static_assert(offsetof(B_AchievementManager_C_Initialize_GS, Player_State) == 0x000000, "Member 'B_AchievementManager_C_Initialize_GS::Player_State' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Initialize_GS, Achievement) == 0x000008, "Member 'B_AchievementManager_C_Initialize_GS::Achievement' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Initialize_GS, Temp_int_Array_Index_Variable) == 0x000010, "Member 'B_AchievementManager_C_Initialize_GS::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Initialize_GS, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'B_AchievementManager_C_Initialize_GS::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Initialize_GS, CallFunc_Array_Get_Item) == 0x000018, "Member 'B_AchievementManager_C_Initialize_GS::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Initialize_GS, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'B_AchievementManager_C_Initialize_GS::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Initialize_GS, CallFunc_Less_IntInt_ReturnValue) == 0x000024, "Member 'B_AchievementManager_C_Initialize_GS::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Initialize_GS, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'B_AchievementManager_C_Initialize_GS::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Initialize_GS, CallFunc_Array_RemoveItem_ReturnValue) == 0x00002C, "Member 'B_AchievementManager_C_Initialize_GS::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Initialize_GS, CallFunc_Check_Achievement_Validity_IsValid) == 0x00002D, "Member 'B_AchievementManager_C_Initialize_GS::CallFunc_Check_Achievement_Validity_IsValid' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Initialize_GS, CallFunc_Not_PreBool_ReturnValue) == 0x00002E, "Member 'B_AchievementManager_C_Initialize_GS::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function B_AchievementManager.B_AchievementManager_C.Initialize Player Achievement List
// 0x0038 (0x0038 - 0x0000)
struct B_AchievementManager_C_Initialize_Player_Achievement_List final
{
public:
	class AB_PlayerState_C*                       PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_Achievement_C*                       CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_Achievement_C*                       CallFunc_Create_New_Achievement_Instance_Achievement; // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Create_New_Achievement_Instance_Success;  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_AchievementManager_C_Initialize_Player_Achievement_List) == 0x000008, "Wrong alignment on B_AchievementManager_C_Initialize_Player_Achievement_List");
static_assert(sizeof(B_AchievementManager_C_Initialize_Player_Achievement_List) == 0x000038, "Wrong size on B_AchievementManager_C_Initialize_Player_Achievement_List");
static_assert(offsetof(B_AchievementManager_C_Initialize_Player_Achievement_List, PlayerState) == 0x000000, "Member 'B_AchievementManager_C_Initialize_Player_Achievement_List::PlayerState' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Initialize_Player_Achievement_List, Temp_int_Array_Index_Variable) == 0x000008, "Member 'B_AchievementManager_C_Initialize_Player_Achievement_List::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Initialize_Player_Achievement_List, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'B_AchievementManager_C_Initialize_Player_Achievement_List::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Initialize_Player_Achievement_List, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'B_AchievementManager_C_Initialize_Player_Achievement_List::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Initialize_Player_Achievement_List, CallFunc_Array_Get_Item) == 0x000018, "Member 'B_AchievementManager_C_Initialize_Player_Achievement_List::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Initialize_Player_Achievement_List, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'B_AchievementManager_C_Initialize_Player_Achievement_List::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Initialize_Player_Achievement_List, CallFunc_Create_New_Achievement_Instance_Achievement) == 0x000028, "Member 'B_AchievementManager_C_Initialize_Player_Achievement_List::CallFunc_Create_New_Achievement_Instance_Achievement' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Initialize_Player_Achievement_List, CallFunc_Create_New_Achievement_Instance_Success) == 0x000030, "Member 'B_AchievementManager_C_Initialize_Player_Achievement_List::CallFunc_Create_New_Achievement_Instance_Success' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Initialize_Player_Achievement_List, CallFunc_Less_IntInt_ReturnValue) == 0x000031, "Member 'B_AchievementManager_C_Initialize_Player_Achievement_List::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Initialize_Player_Achievement_List, CallFunc_Array_Add_ReturnValue) == 0x000034, "Member 'B_AchievementManager_C_Initialize_Player_Achievement_List::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function B_AchievementManager.B_AchievementManager_C.Reset Or Disable Prop Achievements
// 0x0020 (0x0020 - 0x0000)
struct B_AchievementManager_C_Reset_Or_Disable_Prop_Achievements final
{
public:
	int32                                         PropID;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       PlayerState;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_SeekGameState_C*                     SeekGameState;                                     // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Test_Prop_Id_Validity_IdIsValid;          // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Test_Prop_Id_Validity_IdIsValid_1;        // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Test_Prop_Id_Validity_IdIsValid_2;        // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_AchievementManager_C_Reset_Or_Disable_Prop_Achievements) == 0x000008, "Wrong alignment on B_AchievementManager_C_Reset_Or_Disable_Prop_Achievements");
static_assert(sizeof(B_AchievementManager_C_Reset_Or_Disable_Prop_Achievements) == 0x000020, "Wrong size on B_AchievementManager_C_Reset_Or_Disable_Prop_Achievements");
static_assert(offsetof(B_AchievementManager_C_Reset_Or_Disable_Prop_Achievements, PropID) == 0x000000, "Member 'B_AchievementManager_C_Reset_Or_Disable_Prop_Achievements::PropID' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Reset_Or_Disable_Prop_Achievements, PlayerState) == 0x000008, "Member 'B_AchievementManager_C_Reset_Or_Disable_Prop_Achievements::PlayerState' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Reset_Or_Disable_Prop_Achievements, SeekGameState) == 0x000010, "Member 'B_AchievementManager_C_Reset_Or_Disable_Prop_Achievements::SeekGameState' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Reset_Or_Disable_Prop_Achievements, K2Node_SwitchEnum_CmpSuccess) == 0x000018, "Member 'B_AchievementManager_C_Reset_Or_Disable_Prop_Achievements::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Reset_Or_Disable_Prop_Achievements, CallFunc_Test_Prop_Id_Validity_IdIsValid) == 0x000019, "Member 'B_AchievementManager_C_Reset_Or_Disable_Prop_Achievements::CallFunc_Test_Prop_Id_Validity_IdIsValid' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Reset_Or_Disable_Prop_Achievements, CallFunc_Not_PreBool_ReturnValue) == 0x00001A, "Member 'B_AchievementManager_C_Reset_Or_Disable_Prop_Achievements::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Reset_Or_Disable_Prop_Achievements, CallFunc_Test_Prop_Id_Validity_IdIsValid_1) == 0x00001B, "Member 'B_AchievementManager_C_Reset_Or_Disable_Prop_Achievements::CallFunc_Test_Prop_Id_Validity_IdIsValid_1' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Reset_Or_Disable_Prop_Achievements, CallFunc_Test_Prop_Id_Validity_IdIsValid_2) == 0x00001C, "Member 'B_AchievementManager_C_Reset_Or_Disable_Prop_Achievements::CallFunc_Test_Prop_Id_Validity_IdIsValid_2' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Reset_Or_Disable_Prop_Achievements, CallFunc_Not_PreBool_ReturnValue_1) == 0x00001D, "Member 'B_AchievementManager_C_Reset_Or_Disable_Prop_Achievements::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Reset_Or_Disable_Prop_Achievements, CallFunc_Not_PreBool_ReturnValue_2) == 0x00001E, "Member 'B_AchievementManager_C_Reset_Or_Disable_Prop_Achievements::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");

// Function B_AchievementManager.B_AchievementManager_C.Set Achievement Conversion Map
// 0x0050 (0x0050 - 0x0000)
struct B_AchievementManager_C_Set_Achievement_Conversion_Map final
{
public:
	TMap<E_Achievements, class UB_Achievement_C*> K2Node_MakeMap_Map;                                // 0x0000(0x0050)()
};
static_assert(alignof(B_AchievementManager_C_Set_Achievement_Conversion_Map) == 0x000008, "Wrong alignment on B_AchievementManager_C_Set_Achievement_Conversion_Map");
static_assert(sizeof(B_AchievementManager_C_Set_Achievement_Conversion_Map) == 0x000050, "Wrong size on B_AchievementManager_C_Set_Achievement_Conversion_Map");
static_assert(offsetof(B_AchievementManager_C_Set_Achievement_Conversion_Map, K2Node_MakeMap_Map) == 0x000000, "Member 'B_AchievementManager_C_Set_Achievement_Conversion_Map::K2Node_MakeMap_Map' has a wrong offset!");

// Function B_AchievementManager.B_AchievementManager_C.Set Individual Achievement Content
// 0x0090 (0x0090 - 0x0000)
struct B_AchievementManager_C_Set_Individual_Achievement_Content final
{
public:
	class UB_Achievement_C*                       Achievement;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	E_Achievements                                Achievement_Type;                                  // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Starts_Active;                                     // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Requires_Player_Survival;                          // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Mobification;                                      // 0x000B(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Hide_and_Seek;                                     // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Hunt_a_Hag;                                        // 0x000D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Fill_the_Pot;                                      // 0x000E(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Target_Value;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Required_Player_Amount;                            // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 CallFunc_Get_AchPhoto_Ids_Ids;                     // 0x0018(0x0010)(ReferenceParm)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Map_Find_Value;                           // 0x002C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AB_GameMode_C*>                  CallFunc_Get_Valid_Game_Modes_Valid_Game_Modes;    // 0x0040(0x0010)(ReferenceParm)
	TArray<int32>                                 CallFunc_Get_AchBig_Ids_Ids;                       // 0x0050(0x0010)(ReferenceParm)
	TArray<int32>                                 CallFunc_Get_AchBarrelRoll_Ids_Ids;                // 0x0060(0x0010)(ReferenceParm)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_2;    // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_Get_AchFruitSalad_Ids_Ids;                // 0x0078(0x0010)(ReferenceParm)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_3;    // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_AchievementManager_C_Set_Individual_Achievement_Content) == 0x000008, "Wrong alignment on B_AchievementManager_C_Set_Individual_Achievement_Content");
static_assert(sizeof(B_AchievementManager_C_Set_Individual_Achievement_Content) == 0x000090, "Wrong size on B_AchievementManager_C_Set_Individual_Achievement_Content");
static_assert(offsetof(B_AchievementManager_C_Set_Individual_Achievement_Content, Achievement) == 0x000000, "Member 'B_AchievementManager_C_Set_Individual_Achievement_Content::Achievement' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Set_Individual_Achievement_Content, Achievement_Type) == 0x000008, "Member 'B_AchievementManager_C_Set_Individual_Achievement_Content::Achievement_Type' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Set_Individual_Achievement_Content, Starts_Active) == 0x000009, "Member 'B_AchievementManager_C_Set_Individual_Achievement_Content::Starts_Active' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Set_Individual_Achievement_Content, Requires_Player_Survival) == 0x00000A, "Member 'B_AchievementManager_C_Set_Individual_Achievement_Content::Requires_Player_Survival' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Set_Individual_Achievement_Content, Mobification) == 0x00000B, "Member 'B_AchievementManager_C_Set_Individual_Achievement_Content::Mobification' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Set_Individual_Achievement_Content, Hide_and_Seek) == 0x00000C, "Member 'B_AchievementManager_C_Set_Individual_Achievement_Content::Hide_and_Seek' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Set_Individual_Achievement_Content, Hunt_a_Hag) == 0x00000D, "Member 'B_AchievementManager_C_Set_Individual_Achievement_Content::Hunt_a_Hag' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Set_Individual_Achievement_Content, Fill_the_Pot) == 0x00000E, "Member 'B_AchievementManager_C_Set_Individual_Achievement_Content::Fill_the_Pot' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Set_Individual_Achievement_Content, Target_Value) == 0x000010, "Member 'B_AchievementManager_C_Set_Individual_Achievement_Content::Target_Value' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Set_Individual_Achievement_Content, Required_Player_Amount) == 0x000014, "Member 'B_AchievementManager_C_Set_Individual_Achievement_Content::Required_Player_Amount' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Set_Individual_Achievement_Content, CallFunc_Get_AchPhoto_Ids_Ids) == 0x000018, "Member 'B_AchievementManager_C_Set_Individual_Achievement_Content::CallFunc_Get_AchPhoto_Ids_Ids' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Set_Individual_Achievement_Content, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000028, "Member 'B_AchievementManager_C_Set_Individual_Achievement_Content::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Set_Individual_Achievement_Content, CallFunc_Map_Find_Value) == 0x00002C, "Member 'B_AchievementManager_C_Set_Individual_Achievement_Content::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Set_Individual_Achievement_Content, CallFunc_Map_Find_ReturnValue) == 0x000034, "Member 'B_AchievementManager_C_Set_Individual_Achievement_Content::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Set_Individual_Achievement_Content, CallFunc_Array_Add_ReturnValue) == 0x000038, "Member 'B_AchievementManager_C_Set_Individual_Achievement_Content::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Set_Individual_Achievement_Content, CallFunc_Get_Valid_Game_Modes_Valid_Game_Modes) == 0x000040, "Member 'B_AchievementManager_C_Set_Individual_Achievement_Content::CallFunc_Get_Valid_Game_Modes_Valid_Game_Modes' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Set_Individual_Achievement_Content, CallFunc_Get_AchBig_Ids_Ids) == 0x000050, "Member 'B_AchievementManager_C_Set_Individual_Achievement_Content::CallFunc_Get_AchBig_Ids_Ids' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Set_Individual_Achievement_Content, CallFunc_Get_AchBarrelRoll_Ids_Ids) == 0x000060, "Member 'B_AchievementManager_C_Set_Individual_Achievement_Content::CallFunc_Get_AchBarrelRoll_Ids_Ids' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Set_Individual_Achievement_Content, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x000070, "Member 'B_AchievementManager_C_Set_Individual_Achievement_Content::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Set_Individual_Achievement_Content, CallFunc_EqualEqual_ObjectObject_ReturnValue_2) == 0x000071, "Member 'B_AchievementManager_C_Set_Individual_Achievement_Content::CallFunc_EqualEqual_ObjectObject_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Set_Individual_Achievement_Content, CallFunc_Get_AchFruitSalad_Ids_Ids) == 0x000078, "Member 'B_AchievementManager_C_Set_Individual_Achievement_Content::CallFunc_Get_AchFruitSalad_Ids_Ids' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Set_Individual_Achievement_Content, CallFunc_EqualEqual_ObjectObject_ReturnValue_3) == 0x000088, "Member 'B_AchievementManager_C_Set_Individual_Achievement_Content::CallFunc_EqualEqual_ObjectObject_ReturnValue_3' has a wrong offset!");

// Function B_AchievementManager.B_AchievementManager_C.Set Level Name List
// 0x0098 (0x0098 - 0x0000)
struct B_AchievementManager_C_Set_Level_Name_List final
{
public:
	class FString                                 Map_Name;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSMapData>                      CallFunc_GetOfficialMaps_OfficialMaps;             // 0x0020(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSMapData                              CallFunc_Array_Get_Item;                           // 0x0038(0x0040)(HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetLevelNameFromFileName_MapName;         // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_AchievementManager_C_Set_Level_Name_List) == 0x000008, "Wrong alignment on B_AchievementManager_C_Set_Level_Name_List");
static_assert(sizeof(B_AchievementManager_C_Set_Level_Name_List) == 0x000098, "Wrong size on B_AchievementManager_C_Set_Level_Name_List");
static_assert(offsetof(B_AchievementManager_C_Set_Level_Name_List, Map_Name) == 0x000000, "Member 'B_AchievementManager_C_Set_Level_Name_List::Map_Name' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Set_Level_Name_List, Temp_int_Array_Index_Variable) == 0x000010, "Member 'B_AchievementManager_C_Set_Level_Name_List::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Set_Level_Name_List, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'B_AchievementManager_C_Set_Level_Name_List::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Set_Level_Name_List, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'B_AchievementManager_C_Set_Level_Name_List::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Set_Level_Name_List, CallFunc_GetOfficialMaps_OfficialMaps) == 0x000020, "Member 'B_AchievementManager_C_Set_Level_Name_List::CallFunc_GetOfficialMaps_OfficialMaps' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Set_Level_Name_List, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'B_AchievementManager_C_Set_Level_Name_List::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Set_Level_Name_List, CallFunc_Array_Get_Item) == 0x000038, "Member 'B_AchievementManager_C_Set_Level_Name_List::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Set_Level_Name_List, CallFunc_Less_IntInt_ReturnValue) == 0x000078, "Member 'B_AchievementManager_C_Set_Level_Name_List::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Set_Level_Name_List, CallFunc_GetLevelNameFromFileName_MapName) == 0x000080, "Member 'B_AchievementManager_C_Set_Level_Name_List::CallFunc_GetLevelNameFromFileName_MapName' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Set_Level_Name_List, CallFunc_Array_Add_ReturnValue) == 0x000090, "Member 'B_AchievementManager_C_Set_Level_Name_List::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function B_AchievementManager.B_AchievementManager_C.Set Name Conversion Map
// 0x0050 (0x0050 - 0x0000)
struct B_AchievementManager_C_Set_Name_Conversion_Map final
{
public:
	TMap<E_Achievements, class FName>             K2Node_MakeMap_Map;                                // 0x0000(0x0050)()
};
static_assert(alignof(B_AchievementManager_C_Set_Name_Conversion_Map) == 0x000008, "Wrong alignment on B_AchievementManager_C_Set_Name_Conversion_Map");
static_assert(sizeof(B_AchievementManager_C_Set_Name_Conversion_Map) == 0x000050, "Wrong size on B_AchievementManager_C_Set_Name_Conversion_Map");
static_assert(offsetof(B_AchievementManager_C_Set_Name_Conversion_Map, K2Node_MakeMap_Map) == 0x000000, "Member 'B_AchievementManager_C_Set_Name_Conversion_Map::K2Node_MakeMap_Map' has a wrong offset!");

// Function B_AchievementManager.B_AchievementManager_C.Set Valid Game Modes
// 0x0048 (0x0048 - 0x0000)
struct B_AchievementManager_C_Set_Valid_Game_Modes final
{
public:
	class UB_Achievement_C*                       Achievement;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Mobification;                                      // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Hide_and_Seek;                                     // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Hunt_a_Hag;                                        // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Fill_the_Pot;                                      // 0x000B(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_ObjectiveGameMode_C*                 CallFunc_CreateObject_Object;                      // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_HuntAHagGameMode_C*                  CallFunc_CreateObject_Object_1;                    // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_HideAndSeekGameMode_C*               CallFunc_CreateObject_Object_2;                    // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AB_MobificationGameMode_C*              CallFunc_CreateObject_Object_3;                    // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_3;                  // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_AchievementManager_C_Set_Valid_Game_Modes) == 0x000008, "Wrong alignment on B_AchievementManager_C_Set_Valid_Game_Modes");
static_assert(sizeof(B_AchievementManager_C_Set_Valid_Game_Modes) == 0x000048, "Wrong size on B_AchievementManager_C_Set_Valid_Game_Modes");
static_assert(offsetof(B_AchievementManager_C_Set_Valid_Game_Modes, Achievement) == 0x000000, "Member 'B_AchievementManager_C_Set_Valid_Game_Modes::Achievement' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Set_Valid_Game_Modes, Mobification) == 0x000008, "Member 'B_AchievementManager_C_Set_Valid_Game_Modes::Mobification' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Set_Valid_Game_Modes, Hide_and_Seek) == 0x000009, "Member 'B_AchievementManager_C_Set_Valid_Game_Modes::Hide_and_Seek' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Set_Valid_Game_Modes, Hunt_a_Hag) == 0x00000A, "Member 'B_AchievementManager_C_Set_Valid_Game_Modes::Hunt_a_Hag' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Set_Valid_Game_Modes, Fill_the_Pot) == 0x00000B, "Member 'B_AchievementManager_C_Set_Valid_Game_Modes::Fill_the_Pot' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Set_Valid_Game_Modes, CallFunc_CreateObject_Object) == 0x000010, "Member 'B_AchievementManager_C_Set_Valid_Game_Modes::CallFunc_CreateObject_Object' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Set_Valid_Game_Modes, CallFunc_Array_Add_ReturnValue) == 0x000018, "Member 'B_AchievementManager_C_Set_Valid_Game_Modes::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Set_Valid_Game_Modes, CallFunc_CreateObject_Object_1) == 0x000020, "Member 'B_AchievementManager_C_Set_Valid_Game_Modes::CallFunc_CreateObject_Object_1' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Set_Valid_Game_Modes, CallFunc_CreateObject_Object_2) == 0x000028, "Member 'B_AchievementManager_C_Set_Valid_Game_Modes::CallFunc_CreateObject_Object_2' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Set_Valid_Game_Modes, CallFunc_Array_Add_ReturnValue_1) == 0x000030, "Member 'B_AchievementManager_C_Set_Valid_Game_Modes::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Set_Valid_Game_Modes, CallFunc_Array_Add_ReturnValue_2) == 0x000034, "Member 'B_AchievementManager_C_Set_Valid_Game_Modes::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Set_Valid_Game_Modes, CallFunc_CreateObject_Object_3) == 0x000038, "Member 'B_AchievementManager_C_Set_Valid_Game_Modes::CallFunc_CreateObject_Object_3' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Set_Valid_Game_Modes, CallFunc_Array_Add_ReturnValue_3) == 0x000040, "Member 'B_AchievementManager_C_Set_Valid_Game_Modes::CallFunc_Array_Add_ReturnValue_3' has a wrong offset!");

// Function B_AchievementManager.B_AchievementManager_C.SetAchievementContent
// 0x0010 (0x0010 - 0x0000)
struct B_AchievementManager_C_SetAchievementContent final
{
public:
	class UB_GameInstance_C*                      GameInstance_0;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameMode_C*                          GameMode_0;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_AchievementManager_C_SetAchievementContent) == 0x000008, "Wrong alignment on B_AchievementManager_C_SetAchievementContent");
static_assert(sizeof(B_AchievementManager_C_SetAchievementContent) == 0x000010, "Wrong size on B_AchievementManager_C_SetAchievementContent");
static_assert(offsetof(B_AchievementManager_C_SetAchievementContent, GameInstance_0) == 0x000000, "Member 'B_AchievementManager_C_SetAchievementContent::GameInstance_0' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_SetAchievementContent, GameMode_0) == 0x000008, "Member 'B_AchievementManager_C_SetAchievementContent::GameMode_0' has a wrong offset!");

// Function B_AchievementManager.B_AchievementManager_C.Test AchFruitSalad Ids
// 0x0028 (0x0028 - 0x0000)
struct B_AchievementManager_C_Test_AchFruitSalad_Ids final
{
public:
	int32                                         PropID;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_Achievement_C*                       Achievement;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Give_Achievement;                                  // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Test_Prop_Id_Validity_IdIsValid;          // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_AchievementManager_C_Test_AchFruitSalad_Ids) == 0x000008, "Wrong alignment on B_AchievementManager_C_Test_AchFruitSalad_Ids");
static_assert(sizeof(B_AchievementManager_C_Test_AchFruitSalad_Ids) == 0x000028, "Wrong size on B_AchievementManager_C_Test_AchFruitSalad_Ids");
static_assert(offsetof(B_AchievementManager_C_Test_AchFruitSalad_Ids, PropID) == 0x000000, "Member 'B_AchievementManager_C_Test_AchFruitSalad_Ids::PropID' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_AchFruitSalad_Ids, Achievement) == 0x000008, "Member 'B_AchievementManager_C_Test_AchFruitSalad_Ids::Achievement' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_AchFruitSalad_Ids, Give_Achievement) == 0x000010, "Member 'B_AchievementManager_C_Test_AchFruitSalad_Ids::Give_Achievement' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_AchFruitSalad_Ids, CallFunc_Test_Prop_Id_Validity_IdIsValid) == 0x000011, "Member 'B_AchievementManager_C_Test_AchFruitSalad_Ids::CallFunc_Test_Prop_Id_Validity_IdIsValid' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_AchFruitSalad_Ids, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'B_AchievementManager_C_Test_AchFruitSalad_Ids::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_AchFruitSalad_Ids, CallFunc_Subtract_IntInt_ReturnValue) == 0x000018, "Member 'B_AchievementManager_C_Test_AchFruitSalad_Ids::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_AchFruitSalad_Ids, CallFunc_Array_Length_ReturnValue_1) == 0x00001C, "Member 'B_AchievementManager_C_Test_AchFruitSalad_Ids::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_AchFruitSalad_Ids, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000020, "Member 'B_AchievementManager_C_Test_AchFruitSalad_Ids::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_AchFruitSalad_Ids, CallFunc_Array_RemoveItem_ReturnValue) == 0x000021, "Member 'B_AchievementManager_C_Test_AchFruitSalad_Ids::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");

// Function B_AchievementManager.B_AchievementManager_C.Test Amount Of Won Maps
// 0x0088 (0x0088 - 0x0000)
struct B_AchievementManager_C_Test_Amount_Of_Won_Maps final
{
public:
	int32                                         AllMapsCode;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GiveAchievement;                                   // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WonMaps;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NeccessaryDigits;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         IntToCharArray;                                    // 0x0010(0x0010)(Edit, BlueprintVisible)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         CallFunc_GetCharacterArrayFromString_ReturnValue;  // 0x0038(0x0010)(ReferenceParm)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Array_Get_Item;                           // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_StringToInt_ReturnValue;             // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_2;          // 0x0083(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0085(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_AchievementManager_C_Test_Amount_Of_Won_Maps) == 0x000008, "Wrong alignment on B_AchievementManager_C_Test_Amount_Of_Won_Maps");
static_assert(sizeof(B_AchievementManager_C_Test_Amount_Of_Won_Maps) == 0x000088, "Wrong size on B_AchievementManager_C_Test_Amount_Of_Won_Maps");
static_assert(offsetof(B_AchievementManager_C_Test_Amount_Of_Won_Maps, AllMapsCode) == 0x000000, "Member 'B_AchievementManager_C_Test_Amount_Of_Won_Maps::AllMapsCode' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Amount_Of_Won_Maps, GiveAchievement) == 0x000004, "Member 'B_AchievementManager_C_Test_Amount_Of_Won_Maps::GiveAchievement' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Amount_Of_Won_Maps, WonMaps) == 0x000008, "Member 'B_AchievementManager_C_Test_Amount_Of_Won_Maps::WonMaps' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Amount_Of_Won_Maps, NeccessaryDigits) == 0x00000C, "Member 'B_AchievementManager_C_Test_Amount_Of_Won_Maps::NeccessaryDigits' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Amount_Of_Won_Maps, IntToCharArray) == 0x000010, "Member 'B_AchievementManager_C_Test_Amount_Of_Won_Maps::IntToCharArray' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Amount_Of_Won_Maps, CallFunc_Conv_IntToString_ReturnValue) == 0x000020, "Member 'B_AchievementManager_C_Test_Amount_Of_Won_Maps::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Amount_Of_Won_Maps, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'B_AchievementManager_C_Test_Amount_Of_Won_Maps::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Amount_Of_Won_Maps, CallFunc_GetCharacterArrayFromString_ReturnValue) == 0x000038, "Member 'B_AchievementManager_C_Test_Amount_Of_Won_Maps::CallFunc_GetCharacterArrayFromString_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Amount_Of_Won_Maps, Temp_int_Loop_Counter_Variable) == 0x000048, "Member 'B_AchievementManager_C_Test_Amount_Of_Won_Maps::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Amount_Of_Won_Maps, CallFunc_Add_IntInt_ReturnValue) == 0x00004C, "Member 'B_AchievementManager_C_Test_Amount_Of_Won_Maps::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Amount_Of_Won_Maps, Temp_int_Array_Index_Variable) == 0x000050, "Member 'B_AchievementManager_C_Test_Amount_Of_Won_Maps::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Amount_Of_Won_Maps, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000054, "Member 'B_AchievementManager_C_Test_Amount_Of_Won_Maps::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Amount_Of_Won_Maps, CallFunc_Add_IntInt_ReturnValue_1) == 0x000058, "Member 'B_AchievementManager_C_Test_Amount_Of_Won_Maps::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Amount_Of_Won_Maps, Temp_int_Variable) == 0x00005C, "Member 'B_AchievementManager_C_Test_Amount_Of_Won_Maps::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Amount_Of_Won_Maps, CallFunc_Add_IntInt_ReturnValue_2) == 0x000060, "Member 'B_AchievementManager_C_Test_Amount_Of_Won_Maps::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Amount_Of_Won_Maps, CallFunc_Array_Get_Item) == 0x000068, "Member 'B_AchievementManager_C_Test_Amount_Of_Won_Maps::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Amount_Of_Won_Maps, CallFunc_Array_Length_ReturnValue_1) == 0x000078, "Member 'B_AchievementManager_C_Test_Amount_Of_Won_Maps::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Amount_Of_Won_Maps, CallFunc_Conv_StringToInt_ReturnValue) == 0x00007C, "Member 'B_AchievementManager_C_Test_Amount_Of_Won_Maps::CallFunc_Conv_StringToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Amount_Of_Won_Maps, CallFunc_Less_IntInt_ReturnValue) == 0x000080, "Member 'B_AchievementManager_C_Test_Amount_Of_Won_Maps::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Amount_Of_Won_Maps, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000081, "Member 'B_AchievementManager_C_Test_Amount_Of_Won_Maps::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Amount_Of_Won_Maps, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000082, "Member 'B_AchievementManager_C_Test_Amount_Of_Won_Maps::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Amount_Of_Won_Maps, CallFunc_EqualEqual_IntInt_ReturnValue_2) == 0x000083, "Member 'B_AchievementManager_C_Test_Amount_Of_Won_Maps::CallFunc_EqualEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Amount_Of_Won_Maps, CallFunc_BooleanOR_ReturnValue) == 0x000084, "Member 'B_AchievementManager_C_Test_Amount_Of_Won_Maps::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Amount_Of_Won_Maps, CallFunc_Greater_IntInt_ReturnValue) == 0x000085, "Member 'B_AchievementManager_C_Test_Amount_Of_Won_Maps::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function B_AchievementManager.B_AchievementManager_C.Test Hunter Catch in Air
// 0x0098 (0x0098 - 0x0000)
struct B_AchievementManager_C_Test_Hunter_Catch_in_Air final
{
public:
	struct FDateTime                              StartInAir;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              EndInAir;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       PlayerState;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_Achievement_C*                       Achievement;                                       // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Give_Achievement;                                  // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DateTimeDateTime_ReturnValue;     // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              CallFunc_Subtract_DateTimeDateTime_ReturnValue;    // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakTimespan_Days;                       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakTimespan_Hours;                      // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakTimespan_Minutes;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakTimespan_Seconds;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakTimespan_Milliseconds;               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DateTimeDateTime_ReturnValue;        // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_String__CombineStrings_Multi_ReturnValue; // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_AchievementManager_C_Test_Hunter_Catch_in_Air) == 0x000008, "Wrong alignment on B_AchievementManager_C_Test_Hunter_Catch_in_Air");
static_assert(sizeof(B_AchievementManager_C_Test_Hunter_Catch_in_Air) == 0x000098, "Wrong size on B_AchievementManager_C_Test_Hunter_Catch_in_Air");
static_assert(offsetof(B_AchievementManager_C_Test_Hunter_Catch_in_Air, StartInAir) == 0x000000, "Member 'B_AchievementManager_C_Test_Hunter_Catch_in_Air::StartInAir' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Hunter_Catch_in_Air, EndInAir) == 0x000008, "Member 'B_AchievementManager_C_Test_Hunter_Catch_in_Air::EndInAir' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Hunter_Catch_in_Air, PlayerState) == 0x000010, "Member 'B_AchievementManager_C_Test_Hunter_Catch_in_Air::PlayerState' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Hunter_Catch_in_Air, Achievement) == 0x000018, "Member 'B_AchievementManager_C_Test_Hunter_Catch_in_Air::Achievement' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Hunter_Catch_in_Air, Give_Achievement) == 0x000020, "Member 'B_AchievementManager_C_Test_Hunter_Catch_in_Air::Give_Achievement' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Hunter_Catch_in_Air, CallFunc_Greater_DateTimeDateTime_ReturnValue) == 0x000021, "Member 'B_AchievementManager_C_Test_Hunter_Catch_in_Air::CallFunc_Greater_DateTimeDateTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Hunter_Catch_in_Air, CallFunc_Subtract_DateTimeDateTime_ReturnValue) == 0x000028, "Member 'B_AchievementManager_C_Test_Hunter_Catch_in_Air::CallFunc_Subtract_DateTimeDateTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Hunter_Catch_in_Air, CallFunc_BreakTimespan_Days) == 0x000030, "Member 'B_AchievementManager_C_Test_Hunter_Catch_in_Air::CallFunc_BreakTimespan_Days' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Hunter_Catch_in_Air, CallFunc_BreakTimespan_Hours) == 0x000034, "Member 'B_AchievementManager_C_Test_Hunter_Catch_in_Air::CallFunc_BreakTimespan_Hours' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Hunter_Catch_in_Air, CallFunc_BreakTimespan_Minutes) == 0x000038, "Member 'B_AchievementManager_C_Test_Hunter_Catch_in_Air::CallFunc_BreakTimespan_Minutes' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Hunter_Catch_in_Air, CallFunc_BreakTimespan_Seconds) == 0x00003C, "Member 'B_AchievementManager_C_Test_Hunter_Catch_in_Air::CallFunc_BreakTimespan_Seconds' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Hunter_Catch_in_Air, CallFunc_BreakTimespan_Milliseconds) == 0x000040, "Member 'B_AchievementManager_C_Test_Hunter_Catch_in_Air::CallFunc_BreakTimespan_Milliseconds' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Hunter_Catch_in_Air, CallFunc_Less_DateTimeDateTime_ReturnValue) == 0x000044, "Member 'B_AchievementManager_C_Test_Hunter_Catch_in_Air::CallFunc_Less_DateTimeDateTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Hunter_Catch_in_Air, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000048, "Member 'B_AchievementManager_C_Test_Hunter_Catch_in_Air::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Hunter_Catch_in_Air, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000050, "Member 'B_AchievementManager_C_Test_Hunter_Catch_in_Air::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Hunter_Catch_in_Air, CallFunc_FTrunc_ReturnValue) == 0x000058, "Member 'B_AchievementManager_C_Test_Hunter_Catch_in_Air::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Hunter_Catch_in_Air, CallFunc_Add_IntInt_ReturnValue) == 0x00005C, "Member 'B_AchievementManager_C_Test_Hunter_Catch_in_Air::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Hunter_Catch_in_Air, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000060, "Member 'B_AchievementManager_C_Test_Hunter_Catch_in_Air::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Hunter_Catch_in_Air, CallFunc_Conv_IntToString_ReturnValue) == 0x000068, "Member 'B_AchievementManager_C_Test_Hunter_Catch_in_Air::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Hunter_Catch_in_Air, CallFunc_BooleanAND_ReturnValue) == 0x000078, "Member 'B_AchievementManager_C_Test_Hunter_Catch_in_Air::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Hunter_Catch_in_Air, CallFunc_String__CombineStrings_Multi_ReturnValue) == 0x000080, "Member 'B_AchievementManager_C_Test_Hunter_Catch_in_Air::CallFunc_String__CombineStrings_Multi_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Hunter_Catch_in_Air, CallFunc_BooleanAND_ReturnValue_1) == 0x000090, "Member 'B_AchievementManager_C_Test_Hunter_Catch_in_Air::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function B_AchievementManager.B_AchievementManager_C.Test Luaq Statue Photo
// 0x0028 (0x0028 - 0x0000)
struct B_AchievementManager_C_Test_Luaq_Statue_Photo final
{
public:
	class AActor*                                 PhotoTarget_0;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       Player_State;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_Achievement_C*                       Achievement;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Give_Achievement;                                  // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Test_Match_Value_Give_Achievement;        // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_AchievementManager_C_Test_Luaq_Statue_Photo) == 0x000008, "Wrong alignment on B_AchievementManager_C_Test_Luaq_Statue_Photo");
static_assert(sizeof(B_AchievementManager_C_Test_Luaq_Statue_Photo) == 0x000028, "Wrong size on B_AchievementManager_C_Test_Luaq_Statue_Photo");
static_assert(offsetof(B_AchievementManager_C_Test_Luaq_Statue_Photo, PhotoTarget_0) == 0x000000, "Member 'B_AchievementManager_C_Test_Luaq_Statue_Photo::PhotoTarget_0' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Luaq_Statue_Photo, Player_State) == 0x000008, "Member 'B_AchievementManager_C_Test_Luaq_Statue_Photo::Player_State' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Luaq_Statue_Photo, Achievement) == 0x000010, "Member 'B_AchievementManager_C_Test_Luaq_Statue_Photo::Achievement' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Luaq_Statue_Photo, Give_Achievement) == 0x000018, "Member 'B_AchievementManager_C_Test_Luaq_Statue_Photo::Give_Achievement' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Luaq_Statue_Photo, CallFunc_Array_Add_ReturnValue) == 0x00001C, "Member 'B_AchievementManager_C_Test_Luaq_Statue_Photo::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Luaq_Statue_Photo, CallFunc_Array_Contains_ReturnValue) == 0x000020, "Member 'B_AchievementManager_C_Test_Luaq_Statue_Photo::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Luaq_Statue_Photo, CallFunc_Not_PreBool_ReturnValue) == 0x000021, "Member 'B_AchievementManager_C_Test_Luaq_Statue_Photo::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Luaq_Statue_Photo, CallFunc_Test_Match_Value_Give_Achievement) == 0x000022, "Member 'B_AchievementManager_C_Test_Luaq_Statue_Photo::CallFunc_Test_Match_Value_Give_Achievement' has a wrong offset!");

// Function B_AchievementManager.B_AchievementManager_C.Test Match Value
// 0x0018 (0x0018 - 0x0000)
struct B_AchievementManager_C_Test_Match_Value final
{
public:
	class UB_Achievement_C*                       Achievement;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Give_Achievement;                                  // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_AchievementManager_C_Test_Match_Value) == 0x000008, "Wrong alignment on B_AchievementManager_C_Test_Match_Value");
static_assert(sizeof(B_AchievementManager_C_Test_Match_Value) == 0x000018, "Wrong size on B_AchievementManager_C_Test_Match_Value");
static_assert(offsetof(B_AchievementManager_C_Test_Match_Value, Achievement) == 0x000000, "Member 'B_AchievementManager_C_Test_Match_Value::Achievement' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Match_Value, Give_Achievement) == 0x000008, "Member 'B_AchievementManager_C_Test_Match_Value::Give_Achievement' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Match_Value, Temp_int_Variable) == 0x00000C, "Member 'B_AchievementManager_C_Test_Match_Value::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Match_Value, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000010, "Member 'B_AchievementManager_C_Test_Match_Value::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Match_Value, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'B_AchievementManager_C_Test_Match_Value::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function B_AchievementManager.B_AchievementManager_C.Test Non-Survival Achievement
// 0x0068 (0x0068 - 0x0000)
struct B_AchievementManager_C_Test_NonMinusSurvival_Achievement final
{
public:
	E_Achievements                                AchievementType;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       PlayerState;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         PropID;                                            // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TravelDistance;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ControlledProp;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              StartHunterInAir;                                  // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              EndHunterInAir;                                    // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 PhotoTarget_0;                                     // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          GiveAchievement;                                   // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_Achievement_C*                       Achievement;                                       // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Test_Match_Value_Give_Achievement;        // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Test_Hunter_Catch_in_Air_Give_Achievement; // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_Achievement_C*                       CallFunc_Get_Player_Achievement_Achievement;       // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Get_Player_Achievement_Success;           // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Test_AchFruitSalad_Ids_Give_Achievement;  // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Test_Match_Value_Give_Achievement_1;      // 0x0063(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Test_Luaq_Statue_Photo_Give_Achievement;  // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Test_Travel_Distance_GiveAchievement;     // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0066(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_AchievementManager_C_Test_NonMinusSurvival_Achievement) == 0x000008, "Wrong alignment on B_AchievementManager_C_Test_NonMinusSurvival_Achievement");
static_assert(sizeof(B_AchievementManager_C_Test_NonMinusSurvival_Achievement) == 0x000068, "Wrong size on B_AchievementManager_C_Test_NonMinusSurvival_Achievement");
static_assert(offsetof(B_AchievementManager_C_Test_NonMinusSurvival_Achievement, AchievementType) == 0x000000, "Member 'B_AchievementManager_C_Test_NonMinusSurvival_Achievement::AchievementType' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_NonMinusSurvival_Achievement, PlayerState) == 0x000008, "Member 'B_AchievementManager_C_Test_NonMinusSurvival_Achievement::PlayerState' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_NonMinusSurvival_Achievement, PropID) == 0x000010, "Member 'B_AchievementManager_C_Test_NonMinusSurvival_Achievement::PropID' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_NonMinusSurvival_Achievement, TravelDistance) == 0x000018, "Member 'B_AchievementManager_C_Test_NonMinusSurvival_Achievement::TravelDistance' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_NonMinusSurvival_Achievement, ControlledProp) == 0x000020, "Member 'B_AchievementManager_C_Test_NonMinusSurvival_Achievement::ControlledProp' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_NonMinusSurvival_Achievement, StartHunterInAir) == 0x000028, "Member 'B_AchievementManager_C_Test_NonMinusSurvival_Achievement::StartHunterInAir' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_NonMinusSurvival_Achievement, EndHunterInAir) == 0x000030, "Member 'B_AchievementManager_C_Test_NonMinusSurvival_Achievement::EndHunterInAir' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_NonMinusSurvival_Achievement, PhotoTarget_0) == 0x000038, "Member 'B_AchievementManager_C_Test_NonMinusSurvival_Achievement::PhotoTarget_0' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_NonMinusSurvival_Achievement, GiveAchievement) == 0x000040, "Member 'B_AchievementManager_C_Test_NonMinusSurvival_Achievement::GiveAchievement' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_NonMinusSurvival_Achievement, Achievement) == 0x000048, "Member 'B_AchievementManager_C_Test_NonMinusSurvival_Achievement::Achievement' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_NonMinusSurvival_Achievement, CallFunc_Test_Match_Value_Give_Achievement) == 0x000050, "Member 'B_AchievementManager_C_Test_NonMinusSurvival_Achievement::CallFunc_Test_Match_Value_Give_Achievement' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_NonMinusSurvival_Achievement, CallFunc_Not_PreBool_ReturnValue) == 0x000051, "Member 'B_AchievementManager_C_Test_NonMinusSurvival_Achievement::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_NonMinusSurvival_Achievement, CallFunc_IsValid_ReturnValue) == 0x000052, "Member 'B_AchievementManager_C_Test_NonMinusSurvival_Achievement::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_NonMinusSurvival_Achievement, CallFunc_Test_Hunter_Catch_in_Air_Give_Achievement) == 0x000053, "Member 'B_AchievementManager_C_Test_NonMinusSurvival_Achievement::CallFunc_Test_Hunter_Catch_in_Air_Give_Achievement' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_NonMinusSurvival_Achievement, CallFunc_Get_Player_Achievement_Achievement) == 0x000058, "Member 'B_AchievementManager_C_Test_NonMinusSurvival_Achievement::CallFunc_Get_Player_Achievement_Achievement' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_NonMinusSurvival_Achievement, CallFunc_Get_Player_Achievement_Success) == 0x000060, "Member 'B_AchievementManager_C_Test_NonMinusSurvival_Achievement::CallFunc_Get_Player_Achievement_Success' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_NonMinusSurvival_Achievement, CallFunc_BooleanAND_ReturnValue) == 0x000061, "Member 'B_AchievementManager_C_Test_NonMinusSurvival_Achievement::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_NonMinusSurvival_Achievement, CallFunc_Test_AchFruitSalad_Ids_Give_Achievement) == 0x000062, "Member 'B_AchievementManager_C_Test_NonMinusSurvival_Achievement::CallFunc_Test_AchFruitSalad_Ids_Give_Achievement' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_NonMinusSurvival_Achievement, CallFunc_Test_Match_Value_Give_Achievement_1) == 0x000063, "Member 'B_AchievementManager_C_Test_NonMinusSurvival_Achievement::CallFunc_Test_Match_Value_Give_Achievement_1' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_NonMinusSurvival_Achievement, CallFunc_Test_Luaq_Statue_Photo_Give_Achievement) == 0x000064, "Member 'B_AchievementManager_C_Test_NonMinusSurvival_Achievement::CallFunc_Test_Luaq_Statue_Photo_Give_Achievement' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_NonMinusSurvival_Achievement, CallFunc_Test_Travel_Distance_GiveAchievement) == 0x000065, "Member 'B_AchievementManager_C_Test_NonMinusSurvival_Achievement::CallFunc_Test_Travel_Distance_GiveAchievement' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_NonMinusSurvival_Achievement, K2Node_SwitchEnum_CmpSuccess) == 0x000066, "Member 'B_AchievementManager_C_Test_NonMinusSurvival_Achievement::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function B_AchievementManager.B_AchievementManager_C.Test Survival Achievement
// 0x0018 (0x0018 - 0x0000)
struct B_AchievementManager_C_Test_Survival_Achievement final
{
public:
	class AB_PlayerState_C*                       PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_Achievement_C*                       Achievement;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Achievements                                CallFunc_Get_Achievement_Key_Key;                  // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_AchievementManager_C_Test_Survival_Achievement) == 0x000008, "Wrong alignment on B_AchievementManager_C_Test_Survival_Achievement");
static_assert(sizeof(B_AchievementManager_C_Test_Survival_Achievement) == 0x000018, "Wrong size on B_AchievementManager_C_Test_Survival_Achievement");
static_assert(offsetof(B_AchievementManager_C_Test_Survival_Achievement, PlayerState) == 0x000000, "Member 'B_AchievementManager_C_Test_Survival_Achievement::PlayerState' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Survival_Achievement, Achievement) == 0x000008, "Member 'B_AchievementManager_C_Test_Survival_Achievement::Achievement' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Survival_Achievement, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'B_AchievementManager_C_Test_Survival_Achievement::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Survival_Achievement, CallFunc_Not_PreBool_ReturnValue) == 0x000011, "Member 'B_AchievementManager_C_Test_Survival_Achievement::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Survival_Achievement, K2Node_SwitchEnum_CmpSuccess) == 0x000012, "Member 'B_AchievementManager_C_Test_Survival_Achievement::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Survival_Achievement, CallFunc_Get_Achievement_Key_Key) == 0x000013, "Member 'B_AchievementManager_C_Test_Survival_Achievement::CallFunc_Get_Achievement_Key_Key' has a wrong offset!");

// Function B_AchievementManager.B_AchievementManager_C.Test Travel Distance
// 0x02B0 (0x02B0 - 0x0000)
struct B_AchievementManager_C_Test_Travel_Distance final
{
public:
	class UB_Achievement_C*                       Achievement;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        NewTravelDistance;                                 // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Barrel;                                            // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          GiveAchievement;                                   // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_NegateRotator_ReturnValue;                // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0040(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_String__CombineStrings_Multi_ReturnValue; // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_String__CombineStrings_Multi_ReturnValue_1; // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x00F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_108[0x8];                                      // 0x0108(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x0110(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_ComposeTransforms_ReturnValue;            // 0x0170(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D1[0x7];                                      // 0x01D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x01D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x01F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0208(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22C[0x4];                                      // 0x022C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0240(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25C[0x4];                                      // 0x025C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector_X;                            // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0278(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_27C[0x4];                                      // 0x027C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0288(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_289[0x7];                                      // 0x0289(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_MakeVector_X_ImplicitCast;                // 0x0290(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeVector_Y_ImplicitCast;                // 0x0298(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x02A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_AchievementManager_C_Test_Travel_Distance) == 0x000010, "Wrong alignment on B_AchievementManager_C_Test_Travel_Distance");
static_assert(sizeof(B_AchievementManager_C_Test_Travel_Distance) == 0x0002B0, "Wrong size on B_AchievementManager_C_Test_Travel_Distance");
static_assert(offsetof(B_AchievementManager_C_Test_Travel_Distance, Achievement) == 0x000000, "Member 'B_AchievementManager_C_Test_Travel_Distance::Achievement' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Travel_Distance, NewTravelDistance) == 0x000008, "Member 'B_AchievementManager_C_Test_Travel_Distance::NewTravelDistance' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Travel_Distance, Barrel) == 0x000010, "Member 'B_AchievementManager_C_Test_Travel_Distance::Barrel' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Travel_Distance, GiveAchievement) == 0x000018, "Member 'B_AchievementManager_C_Test_Travel_Distance::GiveAchievement' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Travel_Distance, CallFunc_NegateRotator_ReturnValue) == 0x000020, "Member 'B_AchievementManager_C_Test_Travel_Distance::CallFunc_NegateRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Travel_Distance, CallFunc_MakeTransform_ReturnValue) == 0x000040, "Member 'B_AchievementManager_C_Test_Travel_Distance::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Travel_Distance, CallFunc_Percent_IntInt_ReturnValue) == 0x0000A0, "Member 'B_AchievementManager_C_Test_Travel_Distance::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Travel_Distance, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0000A4, "Member 'B_AchievementManager_C_Test_Travel_Distance::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Travel_Distance, CallFunc_Conv_NameToString_ReturnValue) == 0x0000A8, "Member 'B_AchievementManager_C_Test_Travel_Distance::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Travel_Distance, CallFunc_String__CombineStrings_Multi_ReturnValue) == 0x0000B8, "Member 'B_AchievementManager_C_Test_Travel_Distance::CallFunc_String__CombineStrings_Multi_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Travel_Distance, CallFunc_Conv_IntToString_ReturnValue) == 0x0000C8, "Member 'B_AchievementManager_C_Test_Travel_Distance::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Travel_Distance, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0000D8, "Member 'B_AchievementManager_C_Test_Travel_Distance::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Travel_Distance, CallFunc_String__CombineStrings_Multi_ReturnValue_1) == 0x0000E0, "Member 'B_AchievementManager_C_Test_Travel_Distance::CallFunc_String__CombineStrings_Multi_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Travel_Distance, CallFunc_K2_GetActorRotation_ReturnValue) == 0x0000F0, "Member 'B_AchievementManager_C_Test_Travel_Distance::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Travel_Distance, CallFunc_MakeTransform_ReturnValue_1) == 0x000110, "Member 'B_AchievementManager_C_Test_Travel_Distance::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Travel_Distance, CallFunc_ComposeTransforms_ReturnValue) == 0x000170, "Member 'B_AchievementManager_C_Test_Travel_Distance::CallFunc_ComposeTransforms_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Travel_Distance, CallFunc_EqualEqual_NameName_ReturnValue) == 0x0001D0, "Member 'B_AchievementManager_C_Test_Travel_Distance::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Travel_Distance, CallFunc_BreakTransform_Location) == 0x0001D8, "Member 'B_AchievementManager_C_Test_Travel_Distance::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Travel_Distance, CallFunc_BreakTransform_Rotation) == 0x0001F0, "Member 'B_AchievementManager_C_Test_Travel_Distance::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Travel_Distance, CallFunc_BreakTransform_Scale) == 0x000208, "Member 'B_AchievementManager_C_Test_Travel_Distance::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Travel_Distance, CallFunc_BreakRotator_Roll) == 0x000220, "Member 'B_AchievementManager_C_Test_Travel_Distance::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Travel_Distance, CallFunc_BreakRotator_Pitch) == 0x000224, "Member 'B_AchievementManager_C_Test_Travel_Distance::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Travel_Distance, CallFunc_BreakRotator_Yaw) == 0x000228, "Member 'B_AchievementManager_C_Test_Travel_Distance::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Travel_Distance, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000230, "Member 'B_AchievementManager_C_Test_Travel_Distance::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Travel_Distance, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000238, "Member 'B_AchievementManager_C_Test_Travel_Distance::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Travel_Distance, CallFunc_MakeVector_ReturnValue) == 0x000240, "Member 'B_AchievementManager_C_Test_Travel_Distance::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Travel_Distance, CallFunc_FTrunc_ReturnValue) == 0x000258, "Member 'B_AchievementManager_C_Test_Travel_Distance::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Travel_Distance, CallFunc_BreakVector_X) == 0x000260, "Member 'B_AchievementManager_C_Test_Travel_Distance::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Travel_Distance, CallFunc_BreakVector_Y) == 0x000268, "Member 'B_AchievementManager_C_Test_Travel_Distance::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Travel_Distance, CallFunc_BreakVector_Z) == 0x000270, "Member 'B_AchievementManager_C_Test_Travel_Distance::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Travel_Distance, CallFunc_Add_IntInt_ReturnValue) == 0x000278, "Member 'B_AchievementManager_C_Test_Travel_Distance::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Travel_Distance, CallFunc_Abs_ReturnValue) == 0x000280, "Member 'B_AchievementManager_C_Test_Travel_Distance::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Travel_Distance, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000288, "Member 'B_AchievementManager_C_Test_Travel_Distance::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Travel_Distance, CallFunc_MakeVector_X_ImplicitCast) == 0x000290, "Member 'B_AchievementManager_C_Test_Travel_Distance::CallFunc_MakeVector_X_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Travel_Distance, CallFunc_MakeVector_Y_ImplicitCast) == 0x000298, "Member 'B_AchievementManager_C_Test_Travel_Distance::CallFunc_MakeVector_Y_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Test_Travel_Distance, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x0002A0, "Member 'B_AchievementManager_C_Test_Travel_Distance::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function B_AchievementManager.B_AchievementManager_C.Update Map Stat
// 0x00B8 (0x00B8 - 0x0000)
struct B_AchievementManager_C_Update_Map_Stat final
{
public:
	class FString                                 Current_Level;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       Player_State;                                      // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Index_0;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MapCode;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NewDigitEntry;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Divider;                                           // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AllMapsCode;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OldDigitEntry;                                     // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   StatName;                                          // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Test_Amount_Of_Won_Maps_GiveAchievement;  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Get_Divider_Divider;                      // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_NewStatsAndAchievementsManager_C*    CallFunc_GetStatsAndAchievementsManager_Result;    // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_NewStatsAndAchievementsManager_C*    CallFunc_GetStatsAndAchievementsManager_Result_1;  // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetGSStat_Result;                         // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetGSStat_ReturnValue;                    // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CallFunc_GetGSStat_ResultValue;                    // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetGSStat_ResultWasFound;                 // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckNrOfActivePlayers_Sufficient_Players; // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A[0x2];                                       // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_Int64ToInt_ReturnValue;              // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue_1;                 // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Achievements                                Temp_byte_Variable;                                // 0x0085(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_86[0x2];                                       // 0x0086(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Map_Find_Value;                           // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Achievement_Is_Not_Owned_IsNotOwned;      // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_92[0x2];                                       // 0x0092(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9A[0x2];                                       // 0x009A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Multiply_IntInt_ReturnValue_1;            // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_AchievementManager_C_Update_Map_Stat) == 0x000008, "Wrong alignment on B_AchievementManager_C_Update_Map_Stat");
static_assert(sizeof(B_AchievementManager_C_Update_Map_Stat) == 0x0000B8, "Wrong size on B_AchievementManager_C_Update_Map_Stat");
static_assert(offsetof(B_AchievementManager_C_Update_Map_Stat, Current_Level) == 0x000000, "Member 'B_AchievementManager_C_Update_Map_Stat::Current_Level' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Map_Stat, Player_State) == 0x000010, "Member 'B_AchievementManager_C_Update_Map_Stat::Player_State' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Map_Stat, Index_0) == 0x000018, "Member 'B_AchievementManager_C_Update_Map_Stat::Index_0' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Map_Stat, MapCode) == 0x00001C, "Member 'B_AchievementManager_C_Update_Map_Stat::MapCode' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Map_Stat, NewDigitEntry) == 0x000020, "Member 'B_AchievementManager_C_Update_Map_Stat::NewDigitEntry' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Map_Stat, Divider) == 0x000024, "Member 'B_AchievementManager_C_Update_Map_Stat::Divider' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Map_Stat, AllMapsCode) == 0x000028, "Member 'B_AchievementManager_C_Update_Map_Stat::AllMapsCode' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Map_Stat, OldDigitEntry) == 0x00002C, "Member 'B_AchievementManager_C_Update_Map_Stat::OldDigitEntry' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Map_Stat, StatName) == 0x000030, "Member 'B_AchievementManager_C_Update_Map_Stat::StatName' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Map_Stat, CallFunc_Test_Amount_Of_Won_Maps_GiveAchievement) == 0x000038, "Member 'B_AchievementManager_C_Update_Map_Stat::CallFunc_Test_Amount_Of_Won_Maps_GiveAchievement' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Map_Stat, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000040, "Member 'B_AchievementManager_C_Update_Map_Stat::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Map_Stat, CallFunc_Get_Divider_Divider) == 0x000048, "Member 'B_AchievementManager_C_Update_Map_Stat::CallFunc_Get_Divider_Divider' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Map_Stat, CallFunc_Array_Find_ReturnValue) == 0x00004C, "Member 'B_AchievementManager_C_Update_Map_Stat::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Map_Stat, CallFunc_Less_IntInt_ReturnValue) == 0x000050, "Member 'B_AchievementManager_C_Update_Map_Stat::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Map_Stat, CallFunc_GetStatsAndAchievementsManager_Result) == 0x000058, "Member 'B_AchievementManager_C_Update_Map_Stat::CallFunc_GetStatsAndAchievementsManager_Result' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Map_Stat, CallFunc_GetStatsAndAchievementsManager_Result_1) == 0x000060, "Member 'B_AchievementManager_C_Update_Map_Stat::CallFunc_GetStatsAndAchievementsManager_Result_1' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Map_Stat, CallFunc_SetGSStat_Result) == 0x000068, "Member 'B_AchievementManager_C_Update_Map_Stat::CallFunc_SetGSStat_Result' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Map_Stat, CallFunc_SetGSStat_ReturnValue) == 0x000069, "Member 'B_AchievementManager_C_Update_Map_Stat::CallFunc_SetGSStat_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Map_Stat, CallFunc_GetGSStat_ResultValue) == 0x000070, "Member 'B_AchievementManager_C_Update_Map_Stat::CallFunc_GetGSStat_ResultValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Map_Stat, CallFunc_GetGSStat_ResultWasFound) == 0x000078, "Member 'B_AchievementManager_C_Update_Map_Stat::CallFunc_GetGSStat_ResultWasFound' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Map_Stat, CallFunc_CheckNrOfActivePlayers_Sufficient_Players) == 0x000079, "Member 'B_AchievementManager_C_Update_Map_Stat::CallFunc_CheckNrOfActivePlayers_Sufficient_Players' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Map_Stat, CallFunc_Conv_Int64ToInt_ReturnValue) == 0x00007C, "Member 'B_AchievementManager_C_Update_Map_Stat::CallFunc_Conv_Int64ToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Map_Stat, CallFunc_Array_Find_ReturnValue_1) == 0x000080, "Member 'B_AchievementManager_C_Update_Map_Stat::CallFunc_Array_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Map_Stat, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000084, "Member 'B_AchievementManager_C_Update_Map_Stat::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Map_Stat, Temp_byte_Variable) == 0x000085, "Member 'B_AchievementManager_C_Update_Map_Stat::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Map_Stat, CallFunc_Map_Find_Value) == 0x000088, "Member 'B_AchievementManager_C_Update_Map_Stat::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Map_Stat, CallFunc_Map_Find_ReturnValue) == 0x000090, "Member 'B_AchievementManager_C_Update_Map_Stat::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Map_Stat, CallFunc_Achievement_Is_Not_Owned_IsNotOwned) == 0x000091, "Member 'B_AchievementManager_C_Update_Map_Stat::CallFunc_Achievement_Is_Not_Owned_IsNotOwned' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Map_Stat, CallFunc_Multiply_IntInt_ReturnValue) == 0x000094, "Member 'B_AchievementManager_C_Update_Map_Stat::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Map_Stat, CallFunc_BooleanAND_ReturnValue) == 0x000098, "Member 'B_AchievementManager_C_Update_Map_Stat::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Map_Stat, CallFunc_BooleanAND_ReturnValue_1) == 0x000099, "Member 'B_AchievementManager_C_Update_Map_Stat::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Map_Stat, CallFunc_Multiply_IntInt_ReturnValue_1) == 0x00009C, "Member 'B_AchievementManager_C_Update_Map_Stat::CallFunc_Multiply_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Map_Stat, CallFunc_Subtract_IntInt_ReturnValue) == 0x0000A0, "Member 'B_AchievementManager_C_Update_Map_Stat::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Map_Stat, CallFunc_Add_IntInt_ReturnValue) == 0x0000A4, "Member 'B_AchievementManager_C_Update_Map_Stat::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Map_Stat, K2Node_SwitchInteger_CmpSuccess) == 0x0000A8, "Member 'B_AchievementManager_C_Update_Map_Stat::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Map_Stat, CallFunc_Divide_IntInt_ReturnValue) == 0x0000AC, "Member 'B_AchievementManager_C_Update_Map_Stat::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Map_Stat, CallFunc_Percent_IntInt_ReturnValue) == 0x0000B0, "Member 'B_AchievementManager_C_Update_Map_Stat::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");

// Function B_AchievementManager.B_AchievementManager_C.Update Pickup Stat
// 0x0050 (0x0050 - 0x0000)
struct B_AchievementManager_C_Update_Pickup_Stat final
{
public:
	class AB_PlayerState_C*                       PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         TempStat;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   StatName;                                          // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckNrOfActivePlayers_Sufficient_Players; // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_NewStatsAndAchievementsManager_C*    CallFunc_GetStatsAndAchievementsManager_Result;    // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_NewStatsAndAchievementsManager_C*    CallFunc_GetStatsAndAchievementsManager_Result_1;  // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int64                                         CallFunc_GetGSStat_ResultValue;                    // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetGSStat_ResultWasFound;                 // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_Int64ToInt_ReturnValue;              // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Achievement_Is_Not_Owned_IsNotOwned;      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetGSStat_Result;                         // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetGSStat_ReturnValue;                    // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_AchievementManager_C_Update_Pickup_Stat) == 0x000008, "Wrong alignment on B_AchievementManager_C_Update_Pickup_Stat");
static_assert(sizeof(B_AchievementManager_C_Update_Pickup_Stat) == 0x000050, "Wrong size on B_AchievementManager_C_Update_Pickup_Stat");
static_assert(offsetof(B_AchievementManager_C_Update_Pickup_Stat, PlayerState) == 0x000000, "Member 'B_AchievementManager_C_Update_Pickup_Stat::PlayerState' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Pickup_Stat, TempStat) == 0x000008, "Member 'B_AchievementManager_C_Update_Pickup_Stat::TempStat' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Pickup_Stat, StatName) == 0x00000C, "Member 'B_AchievementManager_C_Update_Pickup_Stat::StatName' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Pickup_Stat, Temp_int_Variable) == 0x000014, "Member 'B_AchievementManager_C_Update_Pickup_Stat::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Pickup_Stat, CallFunc_CheckNrOfActivePlayers_Sufficient_Players) == 0x000018, "Member 'B_AchievementManager_C_Update_Pickup_Stat::CallFunc_CheckNrOfActivePlayers_Sufficient_Players' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Pickup_Stat, CallFunc_GetStatsAndAchievementsManager_Result) == 0x000020, "Member 'B_AchievementManager_C_Update_Pickup_Stat::CallFunc_GetStatsAndAchievementsManager_Result' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Pickup_Stat, CallFunc_GetStatsAndAchievementsManager_Result_1) == 0x000028, "Member 'B_AchievementManager_C_Update_Pickup_Stat::CallFunc_GetStatsAndAchievementsManager_Result_1' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Pickup_Stat, CallFunc_GetGSStat_ResultValue) == 0x000030, "Member 'B_AchievementManager_C_Update_Pickup_Stat::CallFunc_GetGSStat_ResultValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Pickup_Stat, CallFunc_GetGSStat_ResultWasFound) == 0x000038, "Member 'B_AchievementManager_C_Update_Pickup_Stat::CallFunc_GetGSStat_ResultWasFound' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Pickup_Stat, CallFunc_Conv_Int64ToInt_ReturnValue) == 0x00003C, "Member 'B_AchievementManager_C_Update_Pickup_Stat::CallFunc_Conv_Int64ToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Pickup_Stat, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000040, "Member 'B_AchievementManager_C_Update_Pickup_Stat::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Pickup_Stat, CallFunc_Achievement_Is_Not_Owned_IsNotOwned) == 0x000048, "Member 'B_AchievementManager_C_Update_Pickup_Stat::CallFunc_Achievement_Is_Not_Owned_IsNotOwned' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Pickup_Stat, CallFunc_BooleanAND_ReturnValue) == 0x000049, "Member 'B_AchievementManager_C_Update_Pickup_Stat::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Pickup_Stat, CallFunc_SetGSStat_Result) == 0x00004A, "Member 'B_AchievementManager_C_Update_Pickup_Stat::CallFunc_SetGSStat_Result' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Pickup_Stat, CallFunc_SetGSStat_ReturnValue) == 0x00004B, "Member 'B_AchievementManager_C_Update_Pickup_Stat::CallFunc_SetGSStat_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_Update_Pickup_Stat, CallFunc_Add_IntInt_ReturnValue) == 0x00004C, "Member 'B_AchievementManager_C_Update_Pickup_Stat::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function B_AchievementManager.B_AchievementManager_C.GetDefaultCompletionRequiredAmountOfPlayers
// 0x0018 (0x0018 - 0x0000)
struct B_AchievementManager_C_GetDefaultCompletionRequiredAmountOfPlayers final
{
public:
	int32                                         DefaultRequiredAmount;                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDeveloperModeSubsystem*                CallFunc_GetEngineSubsystem_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_AchievementManager_C_GetDefaultCompletionRequiredAmountOfPlayers) == 0x000008, "Wrong alignment on B_AchievementManager_C_GetDefaultCompletionRequiredAmountOfPlayers");
static_assert(sizeof(B_AchievementManager_C_GetDefaultCompletionRequiredAmountOfPlayers) == 0x000018, "Wrong size on B_AchievementManager_C_GetDefaultCompletionRequiredAmountOfPlayers");
static_assert(offsetof(B_AchievementManager_C_GetDefaultCompletionRequiredAmountOfPlayers, DefaultRequiredAmount) == 0x000000, "Member 'B_AchievementManager_C_GetDefaultCompletionRequiredAmountOfPlayers::DefaultRequiredAmount' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_GetDefaultCompletionRequiredAmountOfPlayers, CallFunc_GetEngineSubsystem_ReturnValue) == 0x000008, "Member 'B_AchievementManager_C_GetDefaultCompletionRequiredAmountOfPlayers::CallFunc_GetEngineSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_AchievementManager_C_GetDefaultCompletionRequiredAmountOfPlayers, CallFunc_SelectInt_ReturnValue) == 0x000010, "Member 'B_AchievementManager_C_GetDefaultCompletionRequiredAmountOfPlayers::CallFunc_SelectInt_ReturnValue' has a wrong offset!");

// Function B_AchievementManager.B_AchievementManager_C.GetStatsAndAchievementsManager
// 0x0008 (0x0008 - 0x0000)
struct B_AchievementManager_C_GetStatsAndAchievementsManager final
{
public:
	class UB_NewStatsAndAchievementsManager_C*    Result;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_AchievementManager_C_GetStatsAndAchievementsManager) == 0x000008, "Wrong alignment on B_AchievementManager_C_GetStatsAndAchievementsManager");
static_assert(sizeof(B_AchievementManager_C_GetStatsAndAchievementsManager) == 0x000008, "Wrong size on B_AchievementManager_C_GetStatsAndAchievementsManager");
static_assert(offsetof(B_AchievementManager_C_GetStatsAndAchievementsManager, Result) == 0x000000, "Member 'B_AchievementManager_C_GetStatsAndAchievementsManager::Result' has a wrong offset!");

}

