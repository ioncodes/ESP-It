#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_NewStatsAndAchievementsManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "OnlineSubsystemBlueprints_structs.hpp"
#include "PropWitchHuntModule_classes.hpp"
#include "LowEntryJson_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_NewStatsAndAchievementsManager.B_NewStatsAndAchievementsManager_C
// 0x0078 (0x00A8 - 0x0030)
class UB_NewStatsAndAchievementsManager_C final : public UBaseManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0030(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UB_StatAndAchievementsCache_C*          Cache;                                             // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UB_NewMasterServerManager_C*            NewMasterServerManager;                            // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UB_GSStatAndAchievementsCache_C*        GSCache;                                           // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnDidLoadOnlineStats;                              // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnDidLoadGSOnlineStats;                            // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnDidStoreOnlineStats;                             // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnDidStoreGSOnlineStats;                           // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UVaRestRequestJSON*                     TempRequest;                                       // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UVaRestRequestJSON*                     TempRequest_0;                                     // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          AchievementQueryComplete;                          // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BuildStatsArrayJsonString(TArray<struct FS_Stat>& StatArray, const class FString& ProductUserId, class FString* ResultString);
	void CheckForLocalAchievements(bool Success);
	void ExecuteUbergraph_B_NewStatsAndAchievementsManager(int32 EntryPoint);
	void Initialize(class UGameInstance* InGameInstance);
	void OnAchievementsWritten_09B1DE3C4AB63DE6D5699081A96B7BC6(const struct FUniqueNetIdRepl& Param1, bool Param2);
	void OnCallFailed_09B1DE3C4AB63DE6D5699081A96B7BC6(const struct FUniqueNetIdRepl& Param1, bool Param2);
	void OnCallFailed_ACE32C7C4B817E82DE83FBB67CBB66BD(const struct FUniqueNetIdRepl& LocalUserId, bool bWasSuccessful);
	void OnDidLoadGSOnlineStats__DelegateSignature(bool Success, const class FString& ProductUserId);
	void OnDidLoadOnlineStats__DelegateSignature(bool Success);
	void OnDidStoreGSOnlineStats__DelegateSignature(bool Success, const class FString& ProductUserId);
	void OnDidStoreOnlineStats__DelegateSignature(bool Success);
	void OnQueryAchievementsComplete_ACE32C7C4B817E82DE83FBB67CBB66BD(const struct FUniqueNetIdRepl& LocalUserId, bool bWasSuccessful);
	void OnReceiveGSStatsFailure(class UVaRestRequestJSON* Response);
	void OnReceiveGSStatsResponse(class UVaRestRequestJSON* Response);
	void OnReceiveStatsFailure(class UVaRestRequestJSON* Response);
	void OnReceiveStatsResponse(class UVaRestRequestJSON* Response);
	void OnReceiveStoreGSStatsComplete(class UVaRestRequestJSON* Response);
	void OnReceiveStoreGSStatsFailure(class UVaRestRequestJSON* Response);
	void OnReceiveStoreStatsComplete(class UVaRestRequestJSON* Response);
	void ParseGSStatsAndAchievementsFromResponse(class UVaRestRequestJSON* Response, bool* Success, class FString* ProductUserId);
	void ParseStatsAndAchievementsFromResponse(class UVaRestRequestJSON* Response, bool* Success);
	void ParseSuccessAndRequestedProductUserId(class UVaRestRequestJSON* Response, bool* Success, class FString* ProductUserId);
	void RequestGSOnlineStats(class AB_PlayerState_C* PlayerState);
	void RequestOnlineStats();
	void Reset_All_Online_Stats(bool AchievementsToo);
	void SetGSAchievement(class APlayerState* PlayerState, class FName Name_0, bool* Result);
	bool SetGSStat(class FName StatName, int64 SetValue, class APlayerState* PlayerState, bool* Result);
	void SetStat(class FName StatName, int64 Value, bool* Result);
	void StoreGSOnlineStats(class AB_PlayerState_C* PlayerState);
	void StoreOnlineStats();
	void SynchronizeLocalAchievements();
	void WriteLocalAchievements(const TArray<class FName>& AchievementIds);

	void GetAchievementStatus(class FName StatName, bool* bIsCompleted, struct FDateTime* CompletionDateTime, bool* bIsHidden) const;
	void GetGSAchievement(class FName Name_0, class APlayerState* PlayerState, bool* HasAchievement, bool* Result) const;
	void GetGSStat(class FName StatName, class APlayerState* PlayerState, int64* ResultValue, bool* ResultWasFound) const;
	void GetStat(class FName StatName, int64* ResultValue, bool* ResultWasFound) const;
	void IsAchievementVisible(class FName StatName, bool* bIsVisible) const;
	void OverrideServerLevel(int64* Value, bool* WasFound) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_NewStatsAndAchievementsManager_C">();
	}
	static class UB_NewStatsAndAchievementsManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UB_NewStatsAndAchievementsManager_C>();
	}
};
static_assert(alignof(UB_NewStatsAndAchievementsManager_C) == 0x000008, "Wrong alignment on UB_NewStatsAndAchievementsManager_C");
static_assert(sizeof(UB_NewStatsAndAchievementsManager_C) == 0x0000A8, "Wrong size on UB_NewStatsAndAchievementsManager_C");
static_assert(offsetof(UB_NewStatsAndAchievementsManager_C, UberGraphFrame) == 0x000030, "Member 'UB_NewStatsAndAchievementsManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UB_NewStatsAndAchievementsManager_C, Cache) == 0x000038, "Member 'UB_NewStatsAndAchievementsManager_C::Cache' has a wrong offset!");
static_assert(offsetof(UB_NewStatsAndAchievementsManager_C, NewMasterServerManager) == 0x000040, "Member 'UB_NewStatsAndAchievementsManager_C::NewMasterServerManager' has a wrong offset!");
static_assert(offsetof(UB_NewStatsAndAchievementsManager_C, GSCache) == 0x000048, "Member 'UB_NewStatsAndAchievementsManager_C::GSCache' has a wrong offset!");
static_assert(offsetof(UB_NewStatsAndAchievementsManager_C, OnDidLoadOnlineStats) == 0x000050, "Member 'UB_NewStatsAndAchievementsManager_C::OnDidLoadOnlineStats' has a wrong offset!");
static_assert(offsetof(UB_NewStatsAndAchievementsManager_C, OnDidLoadGSOnlineStats) == 0x000060, "Member 'UB_NewStatsAndAchievementsManager_C::OnDidLoadGSOnlineStats' has a wrong offset!");
static_assert(offsetof(UB_NewStatsAndAchievementsManager_C, OnDidStoreOnlineStats) == 0x000070, "Member 'UB_NewStatsAndAchievementsManager_C::OnDidStoreOnlineStats' has a wrong offset!");
static_assert(offsetof(UB_NewStatsAndAchievementsManager_C, OnDidStoreGSOnlineStats) == 0x000080, "Member 'UB_NewStatsAndAchievementsManager_C::OnDidStoreGSOnlineStats' has a wrong offset!");
static_assert(offsetof(UB_NewStatsAndAchievementsManager_C, TempRequest) == 0x000090, "Member 'UB_NewStatsAndAchievementsManager_C::TempRequest' has a wrong offset!");
static_assert(offsetof(UB_NewStatsAndAchievementsManager_C, TempRequest_0) == 0x000098, "Member 'UB_NewStatsAndAchievementsManager_C::TempRequest_0' has a wrong offset!");
static_assert(offsetof(UB_NewStatsAndAchievementsManager_C, AchievementQueryComplete) == 0x0000A0, "Member 'UB_NewStatsAndAchievementsManager_C::AchievementQueryComplete' has a wrong offset!");

}

