#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlaceableLight

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_PlaceableLight.BP_PlaceableLight_C.ChangeBrightness
// 0x0050 (0x0050 - 0x0000)
struct BP_PlaceableLight_C_ChangeBrightness final
{
public:
	double                                        AddValue;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlaceableLight_C_ChangeBrightness) == 0x000008, "Wrong alignment on BP_PlaceableLight_C_ChangeBrightness");
static_assert(sizeof(BP_PlaceableLight_C_ChangeBrightness) == 0x000050, "Wrong size on BP_PlaceableLight_C_ChangeBrightness");
static_assert(offsetof(BP_PlaceableLight_C_ChangeBrightness, AddValue) == 0x000000, "Member 'BP_PlaceableLight_C_ChangeBrightness::AddValue' has a wrong offset!");
static_assert(offsetof(BP_PlaceableLight_C_ChangeBrightness, CallFunc_Normal_ReturnValue) == 0x000008, "Member 'BP_PlaceableLight_C_ChangeBrightness::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlaceableLight_C_ChangeBrightness, CallFunc_VSize_ReturnValue) == 0x000020, "Member 'BP_PlaceableLight_C_ChangeBrightness::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlaceableLight_C_ChangeBrightness, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000028, "Member 'BP_PlaceableLight_C_ChangeBrightness::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlaceableLight_C_ChangeBrightness, CallFunc_FClamp_ReturnValue) == 0x000030, "Member 'BP_PlaceableLight_C_ChangeBrightness::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlaceableLight_C_ChangeBrightness, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000038, "Member 'BP_PlaceableLight_C_ChangeBrightness::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");

// Function BP_PlaceableLight.BP_PlaceableLight_C.ChangeColor
// 0x0060 (0x0060 - 0x0000)
struct BP_PlaceableLight_C_ChangeColor final
{
public:
	double                                        Brigthness;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Subtract_ByteByte_ReturnValue;            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Add_ByteByte_ReturnValue;                 // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlaceableLight_C_ChangeColor) == 0x000008, "Wrong alignment on BP_PlaceableLight_C_ChangeColor");
static_assert(sizeof(BP_PlaceableLight_C_ChangeColor) == 0x000060, "Wrong size on BP_PlaceableLight_C_ChangeColor");
static_assert(offsetof(BP_PlaceableLight_C_ChangeColor, Brigthness) == 0x000000, "Member 'BP_PlaceableLight_C_ChangeColor::Brigthness' has a wrong offset!");
static_assert(offsetof(BP_PlaceableLight_C_ChangeColor, CallFunc_MakeLiteralByte_ReturnValue) == 0x000008, "Member 'BP_PlaceableLight_C_ChangeColor::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlaceableLight_C_ChangeColor, CallFunc_VSize_ReturnValue) == 0x000010, "Member 'BP_PlaceableLight_C_ChangeColor::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlaceableLight_C_ChangeColor, CallFunc_Subtract_ByteByte_ReturnValue) == 0x000018, "Member 'BP_PlaceableLight_C_ChangeColor::CallFunc_Subtract_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlaceableLight_C_ChangeColor, CallFunc_Normal_ReturnValue) == 0x000020, "Member 'BP_PlaceableLight_C_ChangeColor::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlaceableLight_C_ChangeColor, K2Node_SwitchEnum_CmpSuccess) == 0x000038, "Member 'BP_PlaceableLight_C_ChangeColor::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlaceableLight_C_ChangeColor, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000040, "Member 'BP_PlaceableLight_C_ChangeColor::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlaceableLight_C_ChangeColor, CallFunc_Add_ByteByte_ReturnValue) == 0x000058, "Member 'BP_PlaceableLight_C_ChangeColor::CallFunc_Add_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlaceableLight_C_ChangeColor, CallFunc_GetValidValue_ReturnValue) == 0x000059, "Member 'BP_PlaceableLight_C_ChangeColor::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlaceableLight_C_ChangeColor, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00005A, "Member 'BP_PlaceableLight_C_ChangeColor::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_PlaceableLight.BP_PlaceableLight_C.ExecuteUbergraph_BP_PlaceableLight
// 0x0040 (0x0040 - 0x0000)
struct BP_PlaceableLight_C_ExecuteUbergraph_BP_PlaceableLight final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(bool HasPlayTestStarted)>      K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_CreativeGameState_C*                 K2Node_DynamicCast_AsB_Creative_Game_State;        // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlaceableLight_C_ExecuteUbergraph_BP_PlaceableLight) == 0x000008, "Wrong alignment on BP_PlaceableLight_C_ExecuteUbergraph_BP_PlaceableLight");
static_assert(sizeof(BP_PlaceableLight_C_ExecuteUbergraph_BP_PlaceableLight) == 0x000040, "Wrong size on BP_PlaceableLight_C_ExecuteUbergraph_BP_PlaceableLight");
static_assert(offsetof(BP_PlaceableLight_C_ExecuteUbergraph_BP_PlaceableLight, EntryPoint) == 0x000000, "Member 'BP_PlaceableLight_C_ExecuteUbergraph_BP_PlaceableLight::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_PlaceableLight_C_ExecuteUbergraph_BP_PlaceableLight, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'BP_PlaceableLight_C_ExecuteUbergraph_BP_PlaceableLight::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_PlaceableLight_C_ExecuteUbergraph_BP_PlaceableLight, CallFunc_GetGameState_ReturnValue) == 0x000018, "Member 'BP_PlaceableLight_C_ExecuteUbergraph_BP_PlaceableLight::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlaceableLight_C_ExecuteUbergraph_BP_PlaceableLight, K2Node_DynamicCast_AsB_Game_State) == 0x000020, "Member 'BP_PlaceableLight_C_ExecuteUbergraph_BP_PlaceableLight::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(BP_PlaceableLight_C_ExecuteUbergraph_BP_PlaceableLight, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_PlaceableLight_C_ExecuteUbergraph_BP_PlaceableLight::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlaceableLight_C_ExecuteUbergraph_BP_PlaceableLight, K2Node_DynamicCast_AsB_Creative_Game_State) == 0x000030, "Member 'BP_PlaceableLight_C_ExecuteUbergraph_BP_PlaceableLight::K2Node_DynamicCast_AsB_Creative_Game_State' has a wrong offset!");
static_assert(offsetof(BP_PlaceableLight_C_ExecuteUbergraph_BP_PlaceableLight, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'BP_PlaceableLight_C_ExecuteUbergraph_BP_PlaceableLight::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PlaceableLight_C_ExecuteUbergraph_BP_PlaceableLight, K2Node_Event_DeltaSeconds) == 0x00003C, "Member 'BP_PlaceableLight_C_ExecuteUbergraph_BP_PlaceableLight::K2Node_Event_DeltaSeconds' has a wrong offset!");

// Function BP_PlaceableLight.BP_PlaceableLight_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_PlaceableLight_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlaceableLight_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_PlaceableLight_C_ReceiveTick");
static_assert(sizeof(BP_PlaceableLight_C_ReceiveTick) == 0x000004, "Wrong size on BP_PlaceableLight_C_ReceiveTick");
static_assert(offsetof(BP_PlaceableLight_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_PlaceableLight_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_PlaceableLight.BP_PlaceableLight_C.SetColor
// 0x0040 (0x0040 - 0x0000)
struct BP_PlaceableLight_C_SetColor final
{
public:
	struct FLinearColor                           Color_0;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeVector_X_ImplicitCast;                // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeVector_Y_ImplicitCast;                // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeVector_Z_ImplicitCast;                // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlaceableLight_C_SetColor) == 0x000008, "Wrong alignment on BP_PlaceableLight_C_SetColor");
static_assert(sizeof(BP_PlaceableLight_C_SetColor) == 0x000040, "Wrong size on BP_PlaceableLight_C_SetColor");
static_assert(offsetof(BP_PlaceableLight_C_SetColor, Color_0) == 0x000000, "Member 'BP_PlaceableLight_C_SetColor::Color_0' has a wrong offset!");
static_assert(offsetof(BP_PlaceableLight_C_SetColor, CallFunc_MakeVector_ReturnValue) == 0x000010, "Member 'BP_PlaceableLight_C_SetColor::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlaceableLight_C_SetColor, CallFunc_MakeVector_X_ImplicitCast) == 0x000028, "Member 'BP_PlaceableLight_C_SetColor::CallFunc_MakeVector_X_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_PlaceableLight_C_SetColor, CallFunc_MakeVector_Y_ImplicitCast) == 0x000030, "Member 'BP_PlaceableLight_C_SetColor::CallFunc_MakeVector_Y_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_PlaceableLight_C_SetColor, CallFunc_MakeVector_Z_ImplicitCast) == 0x000038, "Member 'BP_PlaceableLight_C_SetColor::CallFunc_MakeVector_Z_ImplicitCast' has a wrong offset!");

// Function BP_PlaceableLight.BP_PlaceableLight_C.TurnIntoPointLighForPlayTest
// 0x0001 (0x0001 - 0x0000)
struct BP_PlaceableLight_C_TurnIntoPointLighForPlayTest final
{
public:
	bool                                          HasPlayTestStarted;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlaceableLight_C_TurnIntoPointLighForPlayTest) == 0x000001, "Wrong alignment on BP_PlaceableLight_C_TurnIntoPointLighForPlayTest");
static_assert(sizeof(BP_PlaceableLight_C_TurnIntoPointLighForPlayTest) == 0x000001, "Wrong size on BP_PlaceableLight_C_TurnIntoPointLighForPlayTest");
static_assert(offsetof(BP_PlaceableLight_C_TurnIntoPointLighForPlayTest, HasPlayTestStarted) == 0x000000, "Member 'BP_PlaceableLight_C_TurnIntoPointLighForPlayTest::HasPlayTestStarted' has a wrong offset!");

// Function BP_PlaceableLight.BP_PlaceableLight_C.UpdateLightValues
// 0x00C0 (0x00C0 - 0x0000)
struct BP_PlaceableLight_C_UpdateLightValues final
{
public:
	float                                         Temp_real_Variable;                                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x003C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetActorScale3D_ReturnValue;              // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSizeSquared_ReturnValue;                 // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_MakeStruct_R_ImplicitCast;                  // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_G_ImplicitCast;                  // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_B_ImplicitCast;                  // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetAttenuationRadius_NewRadius_ImplicitCast; // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Option_1_ImplicitCast;               // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlaceableLight_C_UpdateLightValues) == 0x000008, "Wrong alignment on BP_PlaceableLight_C_UpdateLightValues");
static_assert(sizeof(BP_PlaceableLight_C_UpdateLightValues) == 0x0000C0, "Wrong size on BP_PlaceableLight_C_UpdateLightValues");
static_assert(offsetof(BP_PlaceableLight_C_UpdateLightValues, Temp_real_Variable) == 0x000000, "Member 'BP_PlaceableLight_C_UpdateLightValues::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlaceableLight_C_UpdateLightValues, Temp_bool_Variable) == 0x000004, "Member 'BP_PlaceableLight_C_UpdateLightValues::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlaceableLight_C_UpdateLightValues, CallFunc_Normal_ReturnValue) == 0x000008, "Member 'BP_PlaceableLight_C_UpdateLightValues::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlaceableLight_C_UpdateLightValues, CallFunc_BreakVector_X) == 0x000020, "Member 'BP_PlaceableLight_C_UpdateLightValues::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_PlaceableLight_C_UpdateLightValues, CallFunc_BreakVector_Y) == 0x000028, "Member 'BP_PlaceableLight_C_UpdateLightValues::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_PlaceableLight_C_UpdateLightValues, CallFunc_BreakVector_Z) == 0x000030, "Member 'BP_PlaceableLight_C_UpdateLightValues::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_PlaceableLight_C_UpdateLightValues, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'BP_PlaceableLight_C_UpdateLightValues::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlaceableLight_C_UpdateLightValues, K2Node_MakeStruct_LinearColor) == 0x00003C, "Member 'BP_PlaceableLight_C_UpdateLightValues::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(BP_PlaceableLight_C_UpdateLightValues, CallFunc_GetActorScale3D_ReturnValue) == 0x000050, "Member 'BP_PlaceableLight_C_UpdateLightValues::CallFunc_GetActorScale3D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlaceableLight_C_UpdateLightValues, CallFunc_BreakVector_X_1) == 0x000068, "Member 'BP_PlaceableLight_C_UpdateLightValues::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_PlaceableLight_C_UpdateLightValues, CallFunc_BreakVector_Y_1) == 0x000070, "Member 'BP_PlaceableLight_C_UpdateLightValues::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_PlaceableLight_C_UpdateLightValues, CallFunc_BreakVector_Z_1) == 0x000078, "Member 'BP_PlaceableLight_C_UpdateLightValues::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_PlaceableLight_C_UpdateLightValues, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000080, "Member 'BP_PlaceableLight_C_UpdateLightValues::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlaceableLight_C_UpdateLightValues, CallFunc_VSizeSquared_ReturnValue) == 0x000088, "Member 'BP_PlaceableLight_C_UpdateLightValues::CallFunc_VSizeSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlaceableLight_C_UpdateLightValues, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000090, "Member 'BP_PlaceableLight_C_UpdateLightValues::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlaceableLight_C_UpdateLightValues, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000098, "Member 'BP_PlaceableLight_C_UpdateLightValues::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlaceableLight_C_UpdateLightValues, K2Node_Select_Default) == 0x0000A0, "Member 'BP_PlaceableLight_C_UpdateLightValues::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PlaceableLight_C_UpdateLightValues, CallFunc_IsValid_ReturnValue_1) == 0x0000A4, "Member 'BP_PlaceableLight_C_UpdateLightValues::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlaceableLight_C_UpdateLightValues, K2Node_MakeStruct_R_ImplicitCast) == 0x0000A8, "Member 'BP_PlaceableLight_C_UpdateLightValues::K2Node_MakeStruct_R_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_PlaceableLight_C_UpdateLightValues, K2Node_MakeStruct_G_ImplicitCast) == 0x0000AC, "Member 'BP_PlaceableLight_C_UpdateLightValues::K2Node_MakeStruct_G_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_PlaceableLight_C_UpdateLightValues, K2Node_MakeStruct_B_ImplicitCast) == 0x0000B0, "Member 'BP_PlaceableLight_C_UpdateLightValues::K2Node_MakeStruct_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_PlaceableLight_C_UpdateLightValues, CallFunc_SetAttenuationRadius_NewRadius_ImplicitCast) == 0x0000B4, "Member 'BP_PlaceableLight_C_UpdateLightValues::CallFunc_SetAttenuationRadius_NewRadius_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_PlaceableLight_C_UpdateLightValues, K2Node_Select_Option_1_ImplicitCast) == 0x0000B8, "Member 'BP_PlaceableLight_C_UpdateLightValues::K2Node_Select_Option_1_ImplicitCast' has a wrong offset!");

}

