#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_MutedPlayersSave

#include "Basic.hpp"

#include "B_MutedPlayersSave_classes.hpp"
#include "B_MutedPlayersSave_parameters.hpp"


namespace SDK
{

// Function B_MutedPlayersSave.B_MutedPlayersSave_C.BlockPlayer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           PlayerPUID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UB_MutedPlayersSave_C::BlockPlayer(const class FString& PlayerPUID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MutedPlayersSave_C", "BlockPlayer");

	Params::B_MutedPlayersSave_C_BlockPlayer Parms{};

	Parms.PlayerPUID = std::move(PlayerPUID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_MutedPlayersSave.B_MutedPlayersSave_C.IsPlayerBlocked
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           PlayerPUID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    IsBlocked                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_MutedPlayersSave_C::IsPlayerBlocked(const class FString& PlayerPUID, bool* IsBlocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MutedPlayersSave_C", "IsPlayerBlocked");

	Params::B_MutedPlayersSave_C_IsPlayerBlocked Parms{};

	Parms.PlayerPUID = std::move(PlayerPUID);

	UObject::ProcessEvent(Func, &Parms);

	if (IsBlocked != nullptr)
		*IsBlocked = Parms.IsBlocked;
}


// Function B_MutedPlayersSave.B_MutedPlayersSave_C.IsPlayerMuted
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AB_PlayerState_C*                 PlayerState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    IsMuted                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_MutedPlayersSave_C::IsPlayerMuted(class AB_PlayerState_C* PlayerState, bool* IsMuted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MutedPlayersSave_C", "IsPlayerMuted");

	Params::B_MutedPlayersSave_C_IsPlayerMuted Parms{};

	Parms.PlayerState = PlayerState;

	UObject::ProcessEvent(Func, &Parms);

	if (IsMuted != nullptr)
		*IsMuted = Parms.IsMuted;
}


// Function B_MutedPlayersSave.B_MutedPlayersSave_C.MutePlayer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AB_PlayerState_C*                 PlayerState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UB_MutedPlayersSave_C::MutePlayer(class AB_PlayerState_C* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MutedPlayersSave_C", "MutePlayer");

	Params::B_MutedPlayersSave_C_MutePlayer Parms{};

	Parms.PlayerState = PlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_MutedPlayersSave.B_MutedPlayersSave_C.UnblockPlayer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           PlayerPUID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UB_MutedPlayersSave_C::UnblockPlayer(const class FString& PlayerPUID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MutedPlayersSave_C", "UnblockPlayer");

	Params::B_MutedPlayersSave_C_UnblockPlayer Parms{};

	Parms.PlayerPUID = std::move(PlayerPUID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_MutedPlayersSave.B_MutedPlayersSave_C.UnmutePlayer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AB_PlayerState_C*                 PlayerState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UB_MutedPlayersSave_C::UnmutePlayer(class AB_PlayerState_C* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MutedPlayersSave_C", "UnmutePlayer");

	Params::B_MutedPlayersSave_C_UnmutePlayer Parms{};

	Parms.PlayerState = PlayerState;

	UObject::ProcessEvent(Func, &Parms);
}

}

