#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_ExpProgressionCounter

#include "Basic.hpp"


namespace SDK::Params
{

// Function B_ExpProgressionCounter.B_ExpProgressionCounter_C.ExecuteUbergraph_B_ExpProgressionCounter
// 0x0004 (0x0004 - 0x0000)
struct B_ExpProgressionCounter_C_ExecuteUbergraph_B_ExpProgressionCounter final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_ExpProgressionCounter_C_ExecuteUbergraph_B_ExpProgressionCounter) == 0x000004, "Wrong alignment on B_ExpProgressionCounter_C_ExecuteUbergraph_B_ExpProgressionCounter");
static_assert(sizeof(B_ExpProgressionCounter_C_ExecuteUbergraph_B_ExpProgressionCounter) == 0x000004, "Wrong size on B_ExpProgressionCounter_C_ExecuteUbergraph_B_ExpProgressionCounter");
static_assert(offsetof(B_ExpProgressionCounter_C_ExecuteUbergraph_B_ExpProgressionCounter, EntryPoint) == 0x000000, "Member 'B_ExpProgressionCounter_C_ExecuteUbergraph_B_ExpProgressionCounter::EntryPoint' has a wrong offset!");

// Function B_ExpProgressionCounter.B_ExpProgressionCounter_C.GetCurrentPercentValue
// 0x0030 (0x0030 - 0x0000)
struct B_ExpProgressionCounter_C_GetCurrentPercentValue final
{
public:
	double                                        Percent;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetExpPercentalPrestige_PercentalExp;     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetExpPercentalLocal_PercentalExp;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default;                             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FMin_ReturnValue;                         // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_ExpProgressionCounter_C_GetCurrentPercentValue) == 0x000008, "Wrong alignment on B_ExpProgressionCounter_C_GetCurrentPercentValue");
static_assert(sizeof(B_ExpProgressionCounter_C_GetCurrentPercentValue) == 0x000030, "Wrong size on B_ExpProgressionCounter_C_GetCurrentPercentValue");
static_assert(offsetof(B_ExpProgressionCounter_C_GetCurrentPercentValue, Percent) == 0x000000, "Member 'B_ExpProgressionCounter_C_GetCurrentPercentValue::Percent' has a wrong offset!");
static_assert(offsetof(B_ExpProgressionCounter_C_GetCurrentPercentValue, Temp_bool_Variable) == 0x000008, "Member 'B_ExpProgressionCounter_C_GetCurrentPercentValue::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(B_ExpProgressionCounter_C_GetCurrentPercentValue, CallFunc_GetExpPercentalPrestige_PercentalExp) == 0x000010, "Member 'B_ExpProgressionCounter_C_GetCurrentPercentValue::CallFunc_GetExpPercentalPrestige_PercentalExp' has a wrong offset!");
static_assert(offsetof(B_ExpProgressionCounter_C_GetCurrentPercentValue, CallFunc_GetExpPercentalLocal_PercentalExp) == 0x000018, "Member 'B_ExpProgressionCounter_C_GetCurrentPercentValue::CallFunc_GetExpPercentalLocal_PercentalExp' has a wrong offset!");
static_assert(offsetof(B_ExpProgressionCounter_C_GetCurrentPercentValue, K2Node_Select_Default) == 0x000020, "Member 'B_ExpProgressionCounter_C_GetCurrentPercentValue::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(B_ExpProgressionCounter_C_GetCurrentPercentValue, CallFunc_FMin_ReturnValue) == 0x000028, "Member 'B_ExpProgressionCounter_C_GetCurrentPercentValue::CallFunc_FMin_ReturnValue' has a wrong offset!");

// Function B_ExpProgressionCounter.B_ExpProgressionCounter_C.IsValueExceedingProgressionTarget
// 0x0018 (0x0018 - 0x0000)
struct B_ExpProgressionCounter_C_IsValueExceedingProgressionTarget final
{
public:
	bool                                          ValueEceedsProgressionTarget;                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPrestigeLevelUpLocal_IsPrestigeLevelUp; // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPendingLevelUpLocal_PendingLevelUp;     // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetCurrentPercentValue_Percent;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_ExpProgressionCounter_C_IsValueExceedingProgressionTarget) == 0x000008, "Wrong alignment on B_ExpProgressionCounter_C_IsValueExceedingProgressionTarget");
static_assert(sizeof(B_ExpProgressionCounter_C_IsValueExceedingProgressionTarget) == 0x000018, "Wrong size on B_ExpProgressionCounter_C_IsValueExceedingProgressionTarget");
static_assert(offsetof(B_ExpProgressionCounter_C_IsValueExceedingProgressionTarget, ValueEceedsProgressionTarget) == 0x000000, "Member 'B_ExpProgressionCounter_C_IsValueExceedingProgressionTarget::ValueEceedsProgressionTarget' has a wrong offset!");
static_assert(offsetof(B_ExpProgressionCounter_C_IsValueExceedingProgressionTarget, Temp_bool_Variable) == 0x000001, "Member 'B_ExpProgressionCounter_C_IsValueExceedingProgressionTarget::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(B_ExpProgressionCounter_C_IsValueExceedingProgressionTarget, CallFunc_IsPrestigeLevelUpLocal_IsPrestigeLevelUp) == 0x000002, "Member 'B_ExpProgressionCounter_C_IsValueExceedingProgressionTarget::CallFunc_IsPrestigeLevelUpLocal_IsPrestigeLevelUp' has a wrong offset!");
static_assert(offsetof(B_ExpProgressionCounter_C_IsValueExceedingProgressionTarget, CallFunc_IsPendingLevelUpLocal_PendingLevelUp) == 0x000003, "Member 'B_ExpProgressionCounter_C_IsValueExceedingProgressionTarget::CallFunc_IsPendingLevelUpLocal_PendingLevelUp' has a wrong offset!");
static_assert(offsetof(B_ExpProgressionCounter_C_IsValueExceedingProgressionTarget, CallFunc_GetCurrentPercentValue_Percent) == 0x000008, "Member 'B_ExpProgressionCounter_C_IsValueExceedingProgressionTarget::CallFunc_GetCurrentPercentValue_Percent' has a wrong offset!");
static_assert(offsetof(B_ExpProgressionCounter_C_IsValueExceedingProgressionTarget, K2Node_Select_Default) == 0x000010, "Member 'B_ExpProgressionCounter_C_IsValueExceedingProgressionTarget::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(B_ExpProgressionCounter_C_IsValueExceedingProgressionTarget, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000011, "Member 'B_ExpProgressionCounter_C_IsValueExceedingProgressionTarget::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ExpProgressionCounter_C_IsValueExceedingProgressionTarget, CallFunc_BooleanAND_ReturnValue) == 0x000012, "Member 'B_ExpProgressionCounter_C_IsValueExceedingProgressionTarget::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

}

