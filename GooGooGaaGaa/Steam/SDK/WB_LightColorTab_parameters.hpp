#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_LightColorTab

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function WB_LightColorTab.WB_LightColorTab_C.BndEvt__WB_LightColorTab_ValueSlider_K2Node_ComponentBoundEvent_1_OnFloatValueChangedEvent__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct WB_LightColorTab_C_BndEvt__WB_LightColorTab_ValueSlider_K2Node_ComponentBoundEvent_1_OnFloatValueChangedEvent__DelegateSignature final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_LightColorTab_C_BndEvt__WB_LightColorTab_ValueSlider_K2Node_ComponentBoundEvent_1_OnFloatValueChangedEvent__DelegateSignature) == 0x000004, "Wrong alignment on WB_LightColorTab_C_BndEvt__WB_LightColorTab_ValueSlider_K2Node_ComponentBoundEvent_1_OnFloatValueChangedEvent__DelegateSignature");
static_assert(sizeof(WB_LightColorTab_C_BndEvt__WB_LightColorTab_ValueSlider_K2Node_ComponentBoundEvent_1_OnFloatValueChangedEvent__DelegateSignature) == 0x000004, "Wrong size on WB_LightColorTab_C_BndEvt__WB_LightColorTab_ValueSlider_K2Node_ComponentBoundEvent_1_OnFloatValueChangedEvent__DelegateSignature");
static_assert(offsetof(WB_LightColorTab_C_BndEvt__WB_LightColorTab_ValueSlider_K2Node_ComponentBoundEvent_1_OnFloatValueChangedEvent__DelegateSignature, Value) == 0x000000, "Member 'WB_LightColorTab_C_BndEvt__WB_LightColorTab_ValueSlider_K2Node_ComponentBoundEvent_1_OnFloatValueChangedEvent__DelegateSignature::Value' has a wrong offset!");

// Function WB_LightColorTab.WB_LightColorTab_C.ExecuteUbergraph_WB_LightColorTab
// 0x0010 (0x0010 - 0x0000)
struct WB_LightColorTab_C_ExecuteUbergraph_WB_LightColorTab final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_ComponentBoundEvent_Value;                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_UpdatetBrightnessOnSliderChange_BrightnessValue_ImplicitCast; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_LightColorTab_C_ExecuteUbergraph_WB_LightColorTab) == 0x000008, "Wrong alignment on WB_LightColorTab_C_ExecuteUbergraph_WB_LightColorTab");
static_assert(sizeof(WB_LightColorTab_C_ExecuteUbergraph_WB_LightColorTab) == 0x000010, "Wrong size on WB_LightColorTab_C_ExecuteUbergraph_WB_LightColorTab");
static_assert(offsetof(WB_LightColorTab_C_ExecuteUbergraph_WB_LightColorTab, EntryPoint) == 0x000000, "Member 'WB_LightColorTab_C_ExecuteUbergraph_WB_LightColorTab::EntryPoint' has a wrong offset!");
static_assert(offsetof(WB_LightColorTab_C_ExecuteUbergraph_WB_LightColorTab, K2Node_ComponentBoundEvent_Value) == 0x000004, "Member 'WB_LightColorTab_C_ExecuteUbergraph_WB_LightColorTab::K2Node_ComponentBoundEvent_Value' has a wrong offset!");
static_assert(offsetof(WB_LightColorTab_C_ExecuteUbergraph_WB_LightColorTab, CallFunc_UpdatetBrightnessOnSliderChange_BrightnessValue_ImplicitCast) == 0x000008, "Member 'WB_LightColorTab_C_ExecuteUbergraph_WB_LightColorTab::CallFunc_UpdatetBrightnessOnSliderChange_BrightnessValue_ImplicitCast' has a wrong offset!");

// Function WB_LightColorTab.WB_LightColorTab_C.Initialize
// 0x0008 (0x0008 - 0x0000)
struct WB_LightColorTab_C_Initialize final
{
public:
	class UWB_WorldSettingsTab_C*                 CallFunc_WidgetGetParentOfClass_ReturnValue;       // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_LightColorTab_C_Initialize) == 0x000008, "Wrong alignment on WB_LightColorTab_C_Initialize");
static_assert(sizeof(WB_LightColorTab_C_Initialize) == 0x000008, "Wrong size on WB_LightColorTab_C_Initialize");
static_assert(offsetof(WB_LightColorTab_C_Initialize, CallFunc_WidgetGetParentOfClass_ReturnValue) == 0x000000, "Member 'WB_LightColorTab_C_Initialize::CallFunc_WidgetGetParentOfClass_ReturnValue' has a wrong offset!");

// Function WB_LightColorTab.WB_LightColorTab_C.UpdateBrightnessSlider
// 0x0030 (0x0030 - 0x0000)
struct WB_LightColorTab_C_UpdateBrightnessSlider final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsNotEmpty_ReturnValue;             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlaceableLight_C*                   CallFunc_Array_Get_Item;                           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_CeilDecimals_ReturnValue;                 // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetValue_InValue_ImplicitCast;            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_LightColorTab_C_UpdateBrightnessSlider) == 0x000008, "Wrong alignment on WB_LightColorTab_C_UpdateBrightnessSlider");
static_assert(sizeof(WB_LightColorTab_C_UpdateBrightnessSlider) == 0x000030, "Wrong size on WB_LightColorTab_C_UpdateBrightnessSlider");
static_assert(offsetof(WB_LightColorTab_C_UpdateBrightnessSlider, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'WB_LightColorTab_C_UpdateBrightnessSlider::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LightColorTab_C_UpdateBrightnessSlider, CallFunc_Array_IsNotEmpty_ReturnValue) == 0x000001, "Member 'WB_LightColorTab_C_UpdateBrightnessSlider::CallFunc_Array_IsNotEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LightColorTab_C_UpdateBrightnessSlider, CallFunc_Array_Get_Item) == 0x000008, "Member 'WB_LightColorTab_C_UpdateBrightnessSlider::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WB_LightColorTab_C_UpdateBrightnessSlider, CallFunc_VSize_ReturnValue) == 0x000010, "Member 'WB_LightColorTab_C_UpdateBrightnessSlider::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LightColorTab_C_UpdateBrightnessSlider, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000018, "Member 'WB_LightColorTab_C_UpdateBrightnessSlider::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LightColorTab_C_UpdateBrightnessSlider, CallFunc_CeilDecimals_ReturnValue) == 0x000020, "Member 'WB_LightColorTab_C_UpdateBrightnessSlider::CallFunc_CeilDecimals_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LightColorTab_C_UpdateBrightnessSlider, CallFunc_SetValue_InValue_ImplicitCast) == 0x000028, "Member 'WB_LightColorTab_C_UpdateBrightnessSlider::CallFunc_SetValue_InValue_ImplicitCast' has a wrong offset!");

// Function WB_LightColorTab.WB_LightColorTab_C.UpdateContent
// 0x0008 (0x0008 - 0x0000)
struct WB_LightColorTab_C_UpdateContent final
{
public:
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_LightColorTab_C_UpdateContent) == 0x000004, "Wrong alignment on WB_LightColorTab_C_UpdateContent");
static_assert(sizeof(WB_LightColorTab_C_UpdateContent) == 0x000008, "Wrong size on WB_LightColorTab_C_UpdateContent");
static_assert(offsetof(WB_LightColorTab_C_UpdateContent, CallFunc_Array_Length_ReturnValue) == 0x000000, "Member 'WB_LightColorTab_C_UpdateContent::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LightColorTab_C_UpdateContent, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000004, "Member 'WB_LightColorTab_C_UpdateContent::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function WB_LightColorTab.WB_LightColorTab_C.UpdateShowcaseColorButton
// 0x0028 (0x0028 - 0x0000)
struct WB_LightColorTab_C_UpdateShowcaseColorButton final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlaceableLight_C*                   CallFunc_Array_Get_Item;                           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_LightColorTab_C_UpdateShowcaseColorButton) == 0x000008, "Wrong alignment on WB_LightColorTab_C_UpdateShowcaseColorButton");
static_assert(sizeof(WB_LightColorTab_C_UpdateShowcaseColorButton) == 0x000028, "Wrong size on WB_LightColorTab_C_UpdateShowcaseColorButton");
static_assert(offsetof(WB_LightColorTab_C_UpdateShowcaseColorButton, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'WB_LightColorTab_C_UpdateShowcaseColorButton::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LightColorTab_C_UpdateShowcaseColorButton, CallFunc_Array_Get_Item) == 0x000008, "Member 'WB_LightColorTab_C_UpdateShowcaseColorButton::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WB_LightColorTab_C_UpdateShowcaseColorButton, CallFunc_Normal_ReturnValue) == 0x000010, "Member 'WB_LightColorTab_C_UpdateShowcaseColorButton::CallFunc_Normal_ReturnValue' has a wrong offset!");

// Function WB_LightColorTab.WB_LightColorTab_C.UpdatetBrightnessOnSliderChange
// 0x0080 (0x0080 - 0x0000)
struct WB_LightColorTab_C_UpdatetBrightnessOnSliderChange final
{
public:
	double                                        BrightnessValue;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetColor;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_CreativePlayerController_C*          K2Node_DynamicCast_AsB_Creative_Player_Controller; // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlaceableLight_C*                   CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_PlaceableLight_C*                   CallFunc_Array_Get_Item_1;                         // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetColorConsideringBrightness_NewColor;   // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsNotEmpty_ReturnValue;             // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_LightColorTab_C_UpdatetBrightnessOnSliderChange) == 0x000008, "Wrong alignment on WB_LightColorTab_C_UpdatetBrightnessOnSliderChange");
static_assert(sizeof(WB_LightColorTab_C_UpdatetBrightnessOnSliderChange) == 0x000080, "Wrong size on WB_LightColorTab_C_UpdatetBrightnessOnSliderChange");
static_assert(offsetof(WB_LightColorTab_C_UpdatetBrightnessOnSliderChange, BrightnessValue) == 0x000000, "Member 'WB_LightColorTab_C_UpdatetBrightnessOnSliderChange::BrightnessValue' has a wrong offset!");
static_assert(offsetof(WB_LightColorTab_C_UpdatetBrightnessOnSliderChange, TargetColor) == 0x000008, "Member 'WB_LightColorTab_C_UpdatetBrightnessOnSliderChange::TargetColor' has a wrong offset!");
static_assert(offsetof(WB_LightColorTab_C_UpdatetBrightnessOnSliderChange, Temp_int_Array_Index_Variable) == 0x000020, "Member 'WB_LightColorTab_C_UpdatetBrightnessOnSliderChange::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WB_LightColorTab_C_UpdatetBrightnessOnSliderChange, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'WB_LightColorTab_C_UpdatetBrightnessOnSliderChange::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WB_LightColorTab_C_UpdatetBrightnessOnSliderChange, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'WB_LightColorTab_C_UpdatetBrightnessOnSliderChange::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LightColorTab_C_UpdatetBrightnessOnSliderChange, CallFunc_GetOwningPlayer_ReturnValue) == 0x000030, "Member 'WB_LightColorTab_C_UpdatetBrightnessOnSliderChange::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LightColorTab_C_UpdatetBrightnessOnSliderChange, K2Node_DynamicCast_AsB_Creative_Player_Controller) == 0x000038, "Member 'WB_LightColorTab_C_UpdatetBrightnessOnSliderChange::K2Node_DynamicCast_AsB_Creative_Player_Controller' has a wrong offset!");
static_assert(offsetof(WB_LightColorTab_C_UpdatetBrightnessOnSliderChange, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'WB_LightColorTab_C_UpdatetBrightnessOnSliderChange::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WB_LightColorTab_C_UpdatetBrightnessOnSliderChange, CallFunc_Array_Get_Item) == 0x000048, "Member 'WB_LightColorTab_C_UpdatetBrightnessOnSliderChange::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WB_LightColorTab_C_UpdatetBrightnessOnSliderChange, CallFunc_Array_Get_Item_1) == 0x000050, "Member 'WB_LightColorTab_C_UpdatetBrightnessOnSliderChange::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(WB_LightColorTab_C_UpdatetBrightnessOnSliderChange, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'WB_LightColorTab_C_UpdatetBrightnessOnSliderChange::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LightColorTab_C_UpdatetBrightnessOnSliderChange, CallFunc_Less_IntInt_ReturnValue) == 0x00005C, "Member 'WB_LightColorTab_C_UpdatetBrightnessOnSliderChange::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LightColorTab_C_UpdatetBrightnessOnSliderChange, CallFunc_GetColorConsideringBrightness_NewColor) == 0x000060, "Member 'WB_LightColorTab_C_UpdatetBrightnessOnSliderChange::CallFunc_GetColorConsideringBrightness_NewColor' has a wrong offset!");
static_assert(offsetof(WB_LightColorTab_C_UpdatetBrightnessOnSliderChange, CallFunc_Array_IsNotEmpty_ReturnValue) == 0x000078, "Member 'WB_LightColorTab_C_UpdatetBrightnessOnSliderChange::CallFunc_Array_IsNotEmpty_ReturnValue' has a wrong offset!");

// Function WB_LightColorTab.WB_LightColorTab_C.GetColorConsideringBrightness
// 0x0070 (0x0070 - 0x0000)
struct WB_LightColorTab_C_GetColorConsideringBrightness final
{
public:
	struct FVector                                InputColor;                                        // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NewColor;                                          // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_CeilDecimals_ReturnValue;                 // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_LightColorTab_C_GetColorConsideringBrightness) == 0x000008, "Wrong alignment on WB_LightColorTab_C_GetColorConsideringBrightness");
static_assert(sizeof(WB_LightColorTab_C_GetColorConsideringBrightness) == 0x000070, "Wrong size on WB_LightColorTab_C_GetColorConsideringBrightness");
static_assert(offsetof(WB_LightColorTab_C_GetColorConsideringBrightness, InputColor) == 0x000000, "Member 'WB_LightColorTab_C_GetColorConsideringBrightness::InputColor' has a wrong offset!");
static_assert(offsetof(WB_LightColorTab_C_GetColorConsideringBrightness, NewColor) == 0x000018, "Member 'WB_LightColorTab_C_GetColorConsideringBrightness::NewColor' has a wrong offset!");
static_assert(offsetof(WB_LightColorTab_C_GetColorConsideringBrightness, CallFunc_Normal_ReturnValue) == 0x000030, "Member 'WB_LightColorTab_C_GetColorConsideringBrightness::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LightColorTab_C_GetColorConsideringBrightness, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000048, "Member 'WB_LightColorTab_C_GetColorConsideringBrightness::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LightColorTab_C_GetColorConsideringBrightness, CallFunc_CeilDecimals_ReturnValue) == 0x000050, "Member 'WB_LightColorTab_C_GetColorConsideringBrightness::CallFunc_CeilDecimals_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LightColorTab_C_GetColorConsideringBrightness, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000058, "Member 'WB_LightColorTab_C_GetColorConsideringBrightness::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");

}

