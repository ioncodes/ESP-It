#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_TournamentPlayer

#include "Basic.hpp"

#include "S_TournamentPlayer_structs.hpp"
#include "AdvancedSessions_structs.hpp"


namespace SDK::Params
{

// Function B_TournamentPlayer.B_TournamentPlayer_C.GetStruct
// 0x0070 (0x0070 - 0x0000)
struct B_TournamentPlayer_C_GetStruct final
{
public:
	struct FS_TournamentPlayer                    ReturnValue;                                       // 0x0000(0x0038)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
	struct FS_TournamentPlayer                    K2Node_MakeStruct_S_TournamentPlayer;              // 0x0038(0x0038)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(B_TournamentPlayer_C_GetStruct) == 0x000008, "Wrong alignment on B_TournamentPlayer_C_GetStruct");
static_assert(sizeof(B_TournamentPlayer_C_GetStruct) == 0x000070, "Wrong size on B_TournamentPlayer_C_GetStruct");
static_assert(offsetof(B_TournamentPlayer_C_GetStruct, ReturnValue) == 0x000000, "Member 'B_TournamentPlayer_C_GetStruct::ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TournamentPlayer_C_GetStruct, K2Node_MakeStruct_S_TournamentPlayer) == 0x000038, "Member 'B_TournamentPlayer_C_GetStruct::K2Node_MakeStruct_S_TournamentPlayer' has a wrong offset!");

// Function B_TournamentPlayer.B_TournamentPlayer_C.Initialize
// 0x0050 (0x0050 - 0x0000)
struct B_TournamentPlayer_C_Initialize final
{
public:
	class APlayerState*                           InitPlayerState;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetPlayerName_ReturnValue;                // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FBPUniqueNetId                         CallFunc_GetUniqueNetIDFromPlayerState_UniqueNetId; // 0x0018(0x0020)()
	class FString                                 CallFunc_UniqueNetIdToString_String;               // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_TournamentPlayer_C_Initialize) == 0x000008, "Wrong alignment on B_TournamentPlayer_C_Initialize");
static_assert(sizeof(B_TournamentPlayer_C_Initialize) == 0x000050, "Wrong size on B_TournamentPlayer_C_Initialize");
static_assert(offsetof(B_TournamentPlayer_C_Initialize, InitPlayerState) == 0x000000, "Member 'B_TournamentPlayer_C_Initialize::InitPlayerState' has a wrong offset!");
static_assert(offsetof(B_TournamentPlayer_C_Initialize, CallFunc_GetPlayerName_ReturnValue) == 0x000008, "Member 'B_TournamentPlayer_C_Initialize::CallFunc_GetPlayerName_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TournamentPlayer_C_Initialize, CallFunc_GetUniqueNetIDFromPlayerState_UniqueNetId) == 0x000018, "Member 'B_TournamentPlayer_C_Initialize::CallFunc_GetUniqueNetIDFromPlayerState_UniqueNetId' has a wrong offset!");
static_assert(offsetof(B_TournamentPlayer_C_Initialize, CallFunc_UniqueNetIdToString_String) == 0x000038, "Member 'B_TournamentPlayer_C_Initialize::CallFunc_UniqueNetIdToString_String' has a wrong offset!");
static_assert(offsetof(B_TournamentPlayer_C_Initialize, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'B_TournamentPlayer_C_Initialize::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function B_TournamentPlayer.B_TournamentPlayer_C.InitializeByStruct
// 0x0038 (0x0038 - 0x0000)
struct B_TournamentPlayer_C_InitializeByStruct final
{
public:
	struct FS_TournamentPlayer                    TournamentPlayerStruct;                            // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(B_TournamentPlayer_C_InitializeByStruct) == 0x000008, "Wrong alignment on B_TournamentPlayer_C_InitializeByStruct");
static_assert(sizeof(B_TournamentPlayer_C_InitializeByStruct) == 0x000038, "Wrong size on B_TournamentPlayer_C_InitializeByStruct");
static_assert(offsetof(B_TournamentPlayer_C_InitializeByStruct, TournamentPlayerStruct) == 0x000000, "Member 'B_TournamentPlayer_C_InitializeByStruct::TournamentPlayerStruct' has a wrong offset!");

}

