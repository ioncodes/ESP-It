#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_InventoryManager

#include "Basic.hpp"

#include "MasterServerPlugin_structs.hpp"
#include "B_SteamItemDef_structs.hpp"
#include "S_ItemInfo_structs.hpp"
#include "E_Slot_structs.hpp"
#include "Engine_structs.hpp"
#include "S_RecipeInfo_structs.hpp"
#include "PropWitchHuntModule_classes.hpp"
#include "ETeamID_structs.hpp"
#include "EventNames_structs.hpp"
#include "EItemCraftResult_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_InventoryManager.B_InventoryManager_C
// 0x03A0 (0x03D0 - 0x0030)
class UB_InventoryManager_C final : public UBaseManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0030(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TSet<int32>                                   SteamDefIDs;                                       // 0x0038(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          UpdatedFromSteam;                                  // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EditorWithoutSteam;                                // 0x0089(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8A[0x6];                                       // 0x008A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FS_ItemInfo>               ItemInfoById;                                      // 0x0090(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<int32, struct FS_RecipeInfo>             RecipeInfoById;                                    // 0x00E0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<TSoftClassPtr<class UClass>, int32>      ItemIdsBySoft;                                     // 0x0130(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TSet<int32>                                   ValidItemIds;                                      // 0x0180(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TSet<int32>                                   GrantedSteamDefIDs;                                // 0x01D0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsUpdatingUnlocks;                                 // 0x0220(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUpdatingItemDrops;                               // 0x0221(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_222[0x6];                                      // 0x0222(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FB_SteamItemDef>           SteamItemDefs;                                     // 0x0228(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FBlueprintOnlineItem>           OwnedSteamItems;                                   // 0x0278(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<int32, int32>                            ItemQuantity;                                      // 0x0288(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             OnItemCrafted;                                     // 0x02D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<struct FBlueprintOnlineItem>           OwnedIngredientItems;                              // 0x02E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FBlueprintOnlineItem>           NewCraftedItems;                                   // 0x02F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FString, struct FBlueprintOnlineItem> OwnedItems;                                        // 0x0308(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             OnUpdatedFromSteam;                                // 0x0358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<struct FBlueprintOnlineItem>           ItemsToConsume;                                    // 0x0368(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 ItemDefinitionsFromOldEventsToConsume;             // 0x0378(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         AmountToCraft;                                     // 0x0388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38C[0x4];                                      // 0x038C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ItemsToCraft;                                      // 0x0390(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 ReagentIDs;                                        // 0x03A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UDataTable*                             ItemsDataTable;                                    // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             RecipesDataTable;                                  // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             WitchSetsDataTable;                                // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             HunterSetsDataTable;                               // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void OnUpdatedFromSteam__DelegateSignature();
	void OnItemCrafted__DelegateSignature(EItemCraftResult ItemCraftResult);
	void AddGrantedItems(TArray<struct FBlueprintOnlineItem>& NewItems);
	void CheckAndConsumeAfterEventItems();
	void CheckItemValidity(int32 ItemId, bool* IsValid);
	void CheckNotifyState(TArray<struct FS_ItemInfo>& Items, bool* NewItems, bool* NewHunter, bool* NewWitch, bool* NewIcon);
	void CheckSetNotifyState(TArray<int32>& SetIds, bool* New);
	void CollectSkinUnlocks(TArray<int32>* UnlockedItemIds);
	void ConsumeNextEventItem();
	void CountItemToQuantity(struct FBlueprintOnlineItem& Item);
	void CraftItem(const TArray<int32>& ItemsToCraft_0, const TArray<int32>& ReagentIDs_0, int32 AmountToCraft_0);
	void DevGrantAllItems();
	void ExecuteUbergraph_B_InventoryManager(int32 EntryPoint);
	void FastReloadItems(TArray<struct FBlueprintOnlineItem>& UpdatedItems, TArray<struct FBlueprintOnlineItem>* NewItems);
	void GetAllItemsBySlot(E_Slot Slot, TArray<struct FS_ItemInfo>* ItemInfos);
	TArray<struct FS_RecipeInfo> GetAllOwningRecipes();
	int32 GetItemQuantity(int32 ItemId);
	void GetOwnedIngredientItems(TArray<int32>& IngredientDefinitionIds, TArray<struct FBlueprintOnlineItem>* IngredientItems);
	void GetPlayerController(class APlayerController** PlayerController);
	struct FS_RecipeInfo GetRecipe(int32 RecipeId);
	TArray<struct FS_RecipeInfo> GetRecipes();
	struct FS_ItemInfo GetSkinItem(int32 ItemId, bool* Found);
	int32 GetSkinItemIdBySoftReference(TSoftClassPtr<class UClass> SkinItem);
	TArray<struct FS_ItemInfo> GetSkinItems();
	void GetSkinItemSets(ETeamID Team, TArray<struct FS_ItemSetInfo>* ItemSets);
	TSoftClassPtr<class UClass> GetSkinSoftReference(int32 ItemId);
	void GetSteamItemData(struct FBlueprintOnlineItem& Item, bool IsFastReload);
	struct FB_SteamItemDef GetSteamItemDef(int32 ItemId);
	void GetUnownedItemIDs(TArray<int32>* Unowned_Item_IDs);
	void InitAllRecipes();
	void InitAllSkinItems();
	bool IsEquippedItemValid(class UClass* SkinItemClass, E_Slot Slot);
	bool IsItemIdValid(int32 ItemId);
	bool IsItemToBeConsumed(const struct FBlueprintOnlineItem& OnlineItem);
	void IsNewItem(int32 ItemId, bool* New);
	bool IsRecipeIdValid(int32 RecipeId);
	bool IsSteamValid();
	void IsUpdating(bool* IsUpdating_0);
	void OnFailure_0AD4911A4B4941B8D52F1FA4362F425C(const TArray<struct FBlueprintOnlineItem>& Items);
	void OnFailure_1D916844485D6967DF5F0B9383799404(const TArray<struct FBlueprintOnlineItem>& Items);
	void OnFailure_5EC28FB942A3EDA48879C180300AF41E(const TArray<struct FBlueprintOnlineItem>& Items);
	void OnFailure_714A7F9C4C48267E57464A9EB1BF3720(const TArray<struct FBlueprintOnlineItem>& Items);
	void OnFailure_718E7D4147DDB29D64156ABBF9C28E26(const TArray<struct FBlueprintOnlineItem>& Items);
	void OnFailure_865DFE1643EC4C6F3D78B8AD7A69B144(const TArray<struct FBlueprintOnlineItem>& Items);
	void OnFailure_A37949614F8D29539A38D5A00318FD74(const TArray<struct FBlueprintOnlineItem>& Items);
	void OnFailure_B4A9F58142D273010A63E5BC8DEC5CC6(const TArray<struct FBlueprintOnlineItem>& Items);
	void OnFailure_E89308694B33FF2811EE8A8208A57050(const TArray<struct FBlueprintOnlineItem>& Items);
	void OnFailure_EDAC6D924408692EE5962598A11B2935(const TArray<struct FBlueprintOnlineItem>& Items);
	void OnSuccess_0AD4911A4B4941B8D52F1FA4362F425C(const TArray<struct FBlueprintOnlineItem>& Items);
	void OnSuccess_1D916844485D6967DF5F0B9383799404(const TArray<struct FBlueprintOnlineItem>& Items);
	void OnSuccess_5EC28FB942A3EDA48879C180300AF41E(const TArray<struct FBlueprintOnlineItem>& Items);
	void OnSuccess_714A7F9C4C48267E57464A9EB1BF3720(const TArray<struct FBlueprintOnlineItem>& Items);
	void OnSuccess_718E7D4147DDB29D64156ABBF9C28E26(const TArray<struct FBlueprintOnlineItem>& Items);
	void OnSuccess_865DFE1643EC4C6F3D78B8AD7A69B144(const TArray<struct FBlueprintOnlineItem>& Items);
	void OnSuccess_A37949614F8D29539A38D5A00318FD74(const TArray<struct FBlueprintOnlineItem>& Items);
	void OnSuccess_B4A9F58142D273010A63E5BC8DEC5CC6(const TArray<struct FBlueprintOnlineItem>& Items);
	void OnSuccess_E89308694B33FF2811EE8A8208A57050(const TArray<struct FBlueprintOnlineItem>& Items);
	void OnSuccess_EDAC6D924408692EE5962598A11B2935(const TArray<struct FBlueprintOnlineItem>& Items);
	void ReloadValidItems();
	void SelectedPlayerIconWasChanged(int32 ItemDefId);
	void SetupAllItemsToConsume(TArray<struct FBlueprintOnlineItem>& AllItems);
	void UpdateInventory();
	void UpdateItemDrop();
	void UpdateUnlocks();
	void UpdateUnlocksAndDrops();
	void UpdateValidItems();
	void Verifiy_Skin_Items(ETeamID Team, class UB_GameInstance_C* B_GameInstance, class UB_SkinSelection_C* Skin_Save);
	void Verify_All_Equipped_Items();
	void VerifySaveGame();

	void OwnsItemByDefId(int32 ItemDefId, bool* bOwnsItem) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_InventoryManager_C">();
	}
	static class UB_InventoryManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UB_InventoryManager_C>();
	}
};
static_assert(alignof(UB_InventoryManager_C) == 0x000008, "Wrong alignment on UB_InventoryManager_C");
static_assert(sizeof(UB_InventoryManager_C) == 0x0003D0, "Wrong size on UB_InventoryManager_C");
static_assert(offsetof(UB_InventoryManager_C, UberGraphFrame) == 0x000030, "Member 'UB_InventoryManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UB_InventoryManager_C, SteamDefIDs) == 0x000038, "Member 'UB_InventoryManager_C::SteamDefIDs' has a wrong offset!");
static_assert(offsetof(UB_InventoryManager_C, UpdatedFromSteam) == 0x000088, "Member 'UB_InventoryManager_C::UpdatedFromSteam' has a wrong offset!");
static_assert(offsetof(UB_InventoryManager_C, EditorWithoutSteam) == 0x000089, "Member 'UB_InventoryManager_C::EditorWithoutSteam' has a wrong offset!");
static_assert(offsetof(UB_InventoryManager_C, ItemInfoById) == 0x000090, "Member 'UB_InventoryManager_C::ItemInfoById' has a wrong offset!");
static_assert(offsetof(UB_InventoryManager_C, RecipeInfoById) == 0x0000E0, "Member 'UB_InventoryManager_C::RecipeInfoById' has a wrong offset!");
static_assert(offsetof(UB_InventoryManager_C, ItemIdsBySoft) == 0x000130, "Member 'UB_InventoryManager_C::ItemIdsBySoft' has a wrong offset!");
static_assert(offsetof(UB_InventoryManager_C, ValidItemIds) == 0x000180, "Member 'UB_InventoryManager_C::ValidItemIds' has a wrong offset!");
static_assert(offsetof(UB_InventoryManager_C, GrantedSteamDefIDs) == 0x0001D0, "Member 'UB_InventoryManager_C::GrantedSteamDefIDs' has a wrong offset!");
static_assert(offsetof(UB_InventoryManager_C, IsUpdatingUnlocks) == 0x000220, "Member 'UB_InventoryManager_C::IsUpdatingUnlocks' has a wrong offset!");
static_assert(offsetof(UB_InventoryManager_C, IsUpdatingItemDrops) == 0x000221, "Member 'UB_InventoryManager_C::IsUpdatingItemDrops' has a wrong offset!");
static_assert(offsetof(UB_InventoryManager_C, SteamItemDefs) == 0x000228, "Member 'UB_InventoryManager_C::SteamItemDefs' has a wrong offset!");
static_assert(offsetof(UB_InventoryManager_C, OwnedSteamItems) == 0x000278, "Member 'UB_InventoryManager_C::OwnedSteamItems' has a wrong offset!");
static_assert(offsetof(UB_InventoryManager_C, ItemQuantity) == 0x000288, "Member 'UB_InventoryManager_C::ItemQuantity' has a wrong offset!");
static_assert(offsetof(UB_InventoryManager_C, OnItemCrafted) == 0x0002D8, "Member 'UB_InventoryManager_C::OnItemCrafted' has a wrong offset!");
static_assert(offsetof(UB_InventoryManager_C, OwnedIngredientItems) == 0x0002E8, "Member 'UB_InventoryManager_C::OwnedIngredientItems' has a wrong offset!");
static_assert(offsetof(UB_InventoryManager_C, NewCraftedItems) == 0x0002F8, "Member 'UB_InventoryManager_C::NewCraftedItems' has a wrong offset!");
static_assert(offsetof(UB_InventoryManager_C, OwnedItems) == 0x000308, "Member 'UB_InventoryManager_C::OwnedItems' has a wrong offset!");
static_assert(offsetof(UB_InventoryManager_C, OnUpdatedFromSteam) == 0x000358, "Member 'UB_InventoryManager_C::OnUpdatedFromSteam' has a wrong offset!");
static_assert(offsetof(UB_InventoryManager_C, ItemsToConsume) == 0x000368, "Member 'UB_InventoryManager_C::ItemsToConsume' has a wrong offset!");
static_assert(offsetof(UB_InventoryManager_C, ItemDefinitionsFromOldEventsToConsume) == 0x000378, "Member 'UB_InventoryManager_C::ItemDefinitionsFromOldEventsToConsume' has a wrong offset!");
static_assert(offsetof(UB_InventoryManager_C, AmountToCraft) == 0x000388, "Member 'UB_InventoryManager_C::AmountToCraft' has a wrong offset!");
static_assert(offsetof(UB_InventoryManager_C, ItemsToCraft) == 0x000390, "Member 'UB_InventoryManager_C::ItemsToCraft' has a wrong offset!");
static_assert(offsetof(UB_InventoryManager_C, ReagentIDs) == 0x0003A0, "Member 'UB_InventoryManager_C::ReagentIDs' has a wrong offset!");
static_assert(offsetof(UB_InventoryManager_C, ItemsDataTable) == 0x0003B0, "Member 'UB_InventoryManager_C::ItemsDataTable' has a wrong offset!");
static_assert(offsetof(UB_InventoryManager_C, RecipesDataTable) == 0x0003B8, "Member 'UB_InventoryManager_C::RecipesDataTable' has a wrong offset!");
static_assert(offsetof(UB_InventoryManager_C, WitchSetsDataTable) == 0x0003C0, "Member 'UB_InventoryManager_C::WitchSetsDataTable' has a wrong offset!");
static_assert(offsetof(UB_InventoryManager_C, HunterSetsDataTable) == 0x0003C8, "Member 'UB_InventoryManager_C::HunterSetsDataTable' has a wrong offset!");

}

