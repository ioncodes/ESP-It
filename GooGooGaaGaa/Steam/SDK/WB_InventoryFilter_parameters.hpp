#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_InventoryFilter

#include "Basic.hpp"

#include "E_Slot_structs.hpp"
#include "B_Rarity_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WB_InventoryFilter.WB_InventoryFilter_C.BndEvt__WB_InventoryFilter_Duplicates_K2Node_ComponentBoundEvent_0_OnCheckStateChanged__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct WB_InventoryFilter_C_BndEvt__WB_InventoryFilter_Duplicates_K2Node_ComponentBoundEvent_0_OnCheckStateChanged__DelegateSignature final
{
public:
	class UWB_CheckBoxWithLabel_C*                Sender;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChecked;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_InventoryFilter_C_BndEvt__WB_InventoryFilter_Duplicates_K2Node_ComponentBoundEvent_0_OnCheckStateChanged__DelegateSignature) == 0x000008, "Wrong alignment on WB_InventoryFilter_C_BndEvt__WB_InventoryFilter_Duplicates_K2Node_ComponentBoundEvent_0_OnCheckStateChanged__DelegateSignature");
static_assert(sizeof(WB_InventoryFilter_C_BndEvt__WB_InventoryFilter_Duplicates_K2Node_ComponentBoundEvent_0_OnCheckStateChanged__DelegateSignature) == 0x000010, "Wrong size on WB_InventoryFilter_C_BndEvt__WB_InventoryFilter_Duplicates_K2Node_ComponentBoundEvent_0_OnCheckStateChanged__DelegateSignature");
static_assert(offsetof(WB_InventoryFilter_C_BndEvt__WB_InventoryFilter_Duplicates_K2Node_ComponentBoundEvent_0_OnCheckStateChanged__DelegateSignature, Sender) == 0x000000, "Member 'WB_InventoryFilter_C_BndEvt__WB_InventoryFilter_Duplicates_K2Node_ComponentBoundEvent_0_OnCheckStateChanged__DelegateSignature::Sender' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_BndEvt__WB_InventoryFilter_Duplicates_K2Node_ComponentBoundEvent_0_OnCheckStateChanged__DelegateSignature, IsChecked) == 0x000008, "Member 'WB_InventoryFilter_C_BndEvt__WB_InventoryFilter_Duplicates_K2Node_ComponentBoundEvent_0_OnCheckStateChanged__DelegateSignature::IsChecked' has a wrong offset!");

// Function WB_InventoryFilter.WB_InventoryFilter_C.BndEvt__WB_InventoryFilter_Rarity_K2Node_ComponentBoundEvent_1_OnSelectionChanged__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct WB_InventoryFilter_C_BndEvt__WB_InventoryFilter_Rarity_K2Node_ComponentBoundEvent_1_OnSelectionChanged__DelegateSignature final
{
public:
	class FString                                 SelectedItem;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	ESelectInfo                                   SelectionType;                                     // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_InventoryFilter_C_BndEvt__WB_InventoryFilter_Rarity_K2Node_ComponentBoundEvent_1_OnSelectionChanged__DelegateSignature) == 0x000008, "Wrong alignment on WB_InventoryFilter_C_BndEvt__WB_InventoryFilter_Rarity_K2Node_ComponentBoundEvent_1_OnSelectionChanged__DelegateSignature");
static_assert(sizeof(WB_InventoryFilter_C_BndEvt__WB_InventoryFilter_Rarity_K2Node_ComponentBoundEvent_1_OnSelectionChanged__DelegateSignature) == 0x000018, "Wrong size on WB_InventoryFilter_C_BndEvt__WB_InventoryFilter_Rarity_K2Node_ComponentBoundEvent_1_OnSelectionChanged__DelegateSignature");
static_assert(offsetof(WB_InventoryFilter_C_BndEvt__WB_InventoryFilter_Rarity_K2Node_ComponentBoundEvent_1_OnSelectionChanged__DelegateSignature, SelectedItem) == 0x000000, "Member 'WB_InventoryFilter_C_BndEvt__WB_InventoryFilter_Rarity_K2Node_ComponentBoundEvent_1_OnSelectionChanged__DelegateSignature::SelectedItem' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_BndEvt__WB_InventoryFilter_Rarity_K2Node_ComponentBoundEvent_1_OnSelectionChanged__DelegateSignature, SelectionType) == 0x000010, "Member 'WB_InventoryFilter_C_BndEvt__WB_InventoryFilter_Rarity_K2Node_ComponentBoundEvent_1_OnSelectionChanged__DelegateSignature::SelectionType' has a wrong offset!");

// Function WB_InventoryFilter.WB_InventoryFilter_C.BndEvt__WB_InventoryFilter_SkinSlot_K2Node_ComponentBoundEvent_4_OnSelectionChanged__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct WB_InventoryFilter_C_BndEvt__WB_InventoryFilter_SkinSlot_K2Node_ComponentBoundEvent_4_OnSelectionChanged__DelegateSignature final
{
public:
	class FString                                 SelectedItem;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	ESelectInfo                                   SelectionType;                                     // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_InventoryFilter_C_BndEvt__WB_InventoryFilter_SkinSlot_K2Node_ComponentBoundEvent_4_OnSelectionChanged__DelegateSignature) == 0x000008, "Wrong alignment on WB_InventoryFilter_C_BndEvt__WB_InventoryFilter_SkinSlot_K2Node_ComponentBoundEvent_4_OnSelectionChanged__DelegateSignature");
static_assert(sizeof(WB_InventoryFilter_C_BndEvt__WB_InventoryFilter_SkinSlot_K2Node_ComponentBoundEvent_4_OnSelectionChanged__DelegateSignature) == 0x000018, "Wrong size on WB_InventoryFilter_C_BndEvt__WB_InventoryFilter_SkinSlot_K2Node_ComponentBoundEvent_4_OnSelectionChanged__DelegateSignature");
static_assert(offsetof(WB_InventoryFilter_C_BndEvt__WB_InventoryFilter_SkinSlot_K2Node_ComponentBoundEvent_4_OnSelectionChanged__DelegateSignature, SelectedItem) == 0x000000, "Member 'WB_InventoryFilter_C_BndEvt__WB_InventoryFilter_SkinSlot_K2Node_ComponentBoundEvent_4_OnSelectionChanged__DelegateSignature::SelectedItem' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_BndEvt__WB_InventoryFilter_SkinSlot_K2Node_ComponentBoundEvent_4_OnSelectionChanged__DelegateSignature, SelectionType) == 0x000010, "Member 'WB_InventoryFilter_C_BndEvt__WB_InventoryFilter_SkinSlot_K2Node_ComponentBoundEvent_4_OnSelectionChanged__DelegateSignature::SelectionType' has a wrong offset!");

// Function WB_InventoryFilter.WB_InventoryFilter_C.BndEvt__WB_InventoryFilter_Team_K2Node_ComponentBoundEvent_3_OnSelectionChanged__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct WB_InventoryFilter_C_BndEvt__WB_InventoryFilter_Team_K2Node_ComponentBoundEvent_3_OnSelectionChanged__DelegateSignature final
{
public:
	class FString                                 SelectedItem;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	ESelectInfo                                   SelectionType;                                     // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_InventoryFilter_C_BndEvt__WB_InventoryFilter_Team_K2Node_ComponentBoundEvent_3_OnSelectionChanged__DelegateSignature) == 0x000008, "Wrong alignment on WB_InventoryFilter_C_BndEvt__WB_InventoryFilter_Team_K2Node_ComponentBoundEvent_3_OnSelectionChanged__DelegateSignature");
static_assert(sizeof(WB_InventoryFilter_C_BndEvt__WB_InventoryFilter_Team_K2Node_ComponentBoundEvent_3_OnSelectionChanged__DelegateSignature) == 0x000018, "Wrong size on WB_InventoryFilter_C_BndEvt__WB_InventoryFilter_Team_K2Node_ComponentBoundEvent_3_OnSelectionChanged__DelegateSignature");
static_assert(offsetof(WB_InventoryFilter_C_BndEvt__WB_InventoryFilter_Team_K2Node_ComponentBoundEvent_3_OnSelectionChanged__DelegateSignature, SelectedItem) == 0x000000, "Member 'WB_InventoryFilter_C_BndEvt__WB_InventoryFilter_Team_K2Node_ComponentBoundEvent_3_OnSelectionChanged__DelegateSignature::SelectedItem' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_BndEvt__WB_InventoryFilter_Team_K2Node_ComponentBoundEvent_3_OnSelectionChanged__DelegateSignature, SelectionType) == 0x000010, "Member 'WB_InventoryFilter_C_BndEvt__WB_InventoryFilter_Team_K2Node_ComponentBoundEvent_3_OnSelectionChanged__DelegateSignature::SelectionType' has a wrong offset!");

// Function WB_InventoryFilter.WB_InventoryFilter_C.BndEvt__WB_InventoryFilter_Type_K2Node_ComponentBoundEvent_2_OnSelectionChanged__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct WB_InventoryFilter_C_BndEvt__WB_InventoryFilter_Type_K2Node_ComponentBoundEvent_2_OnSelectionChanged__DelegateSignature final
{
public:
	class FString                                 SelectedItem;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	ESelectInfo                                   SelectionType;                                     // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_InventoryFilter_C_BndEvt__WB_InventoryFilter_Type_K2Node_ComponentBoundEvent_2_OnSelectionChanged__DelegateSignature) == 0x000008, "Wrong alignment on WB_InventoryFilter_C_BndEvt__WB_InventoryFilter_Type_K2Node_ComponentBoundEvent_2_OnSelectionChanged__DelegateSignature");
static_assert(sizeof(WB_InventoryFilter_C_BndEvt__WB_InventoryFilter_Type_K2Node_ComponentBoundEvent_2_OnSelectionChanged__DelegateSignature) == 0x000018, "Wrong size on WB_InventoryFilter_C_BndEvt__WB_InventoryFilter_Type_K2Node_ComponentBoundEvent_2_OnSelectionChanged__DelegateSignature");
static_assert(offsetof(WB_InventoryFilter_C_BndEvt__WB_InventoryFilter_Type_K2Node_ComponentBoundEvent_2_OnSelectionChanged__DelegateSignature, SelectedItem) == 0x000000, "Member 'WB_InventoryFilter_C_BndEvt__WB_InventoryFilter_Type_K2Node_ComponentBoundEvent_2_OnSelectionChanged__DelegateSignature::SelectedItem' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_BndEvt__WB_InventoryFilter_Type_K2Node_ComponentBoundEvent_2_OnSelectionChanged__DelegateSignature, SelectionType) == 0x000010, "Member 'WB_InventoryFilter_C_BndEvt__WB_InventoryFilter_Type_K2Node_ComponentBoundEvent_2_OnSelectionChanged__DelegateSignature::SelectionType' has a wrong offset!");

// Function WB_InventoryFilter.WB_InventoryFilter_C.ExecuteUbergraph_WB_InventoryFilter
// 0x0080 (0x0080 - 0x0000)
struct WB_InventoryFilter_C_ExecuteUbergraph_WB_InventoryFilter final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_Inventory_C*                        CallFunc_WidgetGetParentOfClass_ReturnValue;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWB_CheckBoxWithLabel_C*                K2Node_ComponentBoundEvent_Sender;                 // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_IsChecked;              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_ComponentBoundEvent_SelectedItem_3;         // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	ESelectInfo                                   K2Node_ComponentBoundEvent_SelectionType_3;        // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_ComponentBoundEvent_SelectedItem_2;         // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	ESelectInfo                                   K2Node_ComponentBoundEvent_SelectionType_2;        // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_ComponentBoundEvent_SelectedItem_1;         // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	ESelectInfo                                   K2Node_ComponentBoundEvent_SelectionType_1;        // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_ComponentBoundEvent_SelectedItem;           // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	ESelectInfo                                   K2Node_ComponentBoundEvent_SelectionType;          // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_InventoryFilter_C_ExecuteUbergraph_WB_InventoryFilter) == 0x000008, "Wrong alignment on WB_InventoryFilter_C_ExecuteUbergraph_WB_InventoryFilter");
static_assert(sizeof(WB_InventoryFilter_C_ExecuteUbergraph_WB_InventoryFilter) == 0x000080, "Wrong size on WB_InventoryFilter_C_ExecuteUbergraph_WB_InventoryFilter");
static_assert(offsetof(WB_InventoryFilter_C_ExecuteUbergraph_WB_InventoryFilter, EntryPoint) == 0x000000, "Member 'WB_InventoryFilter_C_ExecuteUbergraph_WB_InventoryFilter::EntryPoint' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_ExecuteUbergraph_WB_InventoryFilter, CallFunc_WidgetGetParentOfClass_ReturnValue) == 0x000008, "Member 'WB_InventoryFilter_C_ExecuteUbergraph_WB_InventoryFilter::CallFunc_WidgetGetParentOfClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_ExecuteUbergraph_WB_InventoryFilter, K2Node_ComponentBoundEvent_Sender) == 0x000010, "Member 'WB_InventoryFilter_C_ExecuteUbergraph_WB_InventoryFilter::K2Node_ComponentBoundEvent_Sender' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_ExecuteUbergraph_WB_InventoryFilter, K2Node_ComponentBoundEvent_IsChecked) == 0x000018, "Member 'WB_InventoryFilter_C_ExecuteUbergraph_WB_InventoryFilter::K2Node_ComponentBoundEvent_IsChecked' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_ExecuteUbergraph_WB_InventoryFilter, K2Node_ComponentBoundEvent_SelectedItem_3) == 0x000020, "Member 'WB_InventoryFilter_C_ExecuteUbergraph_WB_InventoryFilter::K2Node_ComponentBoundEvent_SelectedItem_3' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_ExecuteUbergraph_WB_InventoryFilter, K2Node_ComponentBoundEvent_SelectionType_3) == 0x000030, "Member 'WB_InventoryFilter_C_ExecuteUbergraph_WB_InventoryFilter::K2Node_ComponentBoundEvent_SelectionType_3' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_ExecuteUbergraph_WB_InventoryFilter, K2Node_ComponentBoundEvent_SelectedItem_2) == 0x000038, "Member 'WB_InventoryFilter_C_ExecuteUbergraph_WB_InventoryFilter::K2Node_ComponentBoundEvent_SelectedItem_2' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_ExecuteUbergraph_WB_InventoryFilter, K2Node_ComponentBoundEvent_SelectionType_2) == 0x000048, "Member 'WB_InventoryFilter_C_ExecuteUbergraph_WB_InventoryFilter::K2Node_ComponentBoundEvent_SelectionType_2' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_ExecuteUbergraph_WB_InventoryFilter, K2Node_ComponentBoundEvent_SelectedItem_1) == 0x000050, "Member 'WB_InventoryFilter_C_ExecuteUbergraph_WB_InventoryFilter::K2Node_ComponentBoundEvent_SelectedItem_1' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_ExecuteUbergraph_WB_InventoryFilter, K2Node_ComponentBoundEvent_SelectionType_1) == 0x000060, "Member 'WB_InventoryFilter_C_ExecuteUbergraph_WB_InventoryFilter::K2Node_ComponentBoundEvent_SelectionType_1' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_ExecuteUbergraph_WB_InventoryFilter, K2Node_ComponentBoundEvent_SelectedItem) == 0x000068, "Member 'WB_InventoryFilter_C_ExecuteUbergraph_WB_InventoryFilter::K2Node_ComponentBoundEvent_SelectedItem' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_ExecuteUbergraph_WB_InventoryFilter, K2Node_ComponentBoundEvent_SelectionType) == 0x000078, "Member 'WB_InventoryFilter_C_ExecuteUbergraph_WB_InventoryFilter::K2Node_ComponentBoundEvent_SelectionType' has a wrong offset!");

// Function WB_InventoryFilter.WB_InventoryFilter_C.LoadFilters
// 0x0024 (0x0024 - 0x0000)
struct WB_InventoryFilter_C_LoadFilters final
{
public:
	bool                                          OtherPlayerInventory;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SelectInt_ReturnValue_1;                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SelectInt_ReturnValue_2;                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SelectInt_ReturnValue_3;                  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SelectInt_ReturnValue_4;                  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_InventoryFilter_C_LoadFilters) == 0x000004, "Wrong alignment on WB_InventoryFilter_C_LoadFilters");
static_assert(sizeof(WB_InventoryFilter_C_LoadFilters) == 0x000024, "Wrong size on WB_InventoryFilter_C_LoadFilters");
static_assert(offsetof(WB_InventoryFilter_C_LoadFilters, OtherPlayerInventory) == 0x000000, "Member 'WB_InventoryFilter_C_LoadFilters::OtherPlayerInventory' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_LoadFilters, Temp_bool_Variable) == 0x000001, "Member 'WB_InventoryFilter_C_LoadFilters::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_LoadFilters, CallFunc_Array_Length_ReturnValue) == 0x000004, "Member 'WB_InventoryFilter_C_LoadFilters::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_LoadFilters, K2Node_Select_Default) == 0x000008, "Member 'WB_InventoryFilter_C_LoadFilters::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_LoadFilters, CallFunc_SelectInt_ReturnValue) == 0x00000C, "Member 'WB_InventoryFilter_C_LoadFilters::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_LoadFilters, CallFunc_SelectInt_ReturnValue_1) == 0x000010, "Member 'WB_InventoryFilter_C_LoadFilters::CallFunc_SelectInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_LoadFilters, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000014, "Member 'WB_InventoryFilter_C_LoadFilters::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_LoadFilters, CallFunc_SelectInt_ReturnValue_2) == 0x000018, "Member 'WB_InventoryFilter_C_LoadFilters::CallFunc_SelectInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_LoadFilters, CallFunc_SelectInt_ReturnValue_3) == 0x00001C, "Member 'WB_InventoryFilter_C_LoadFilters::CallFunc_SelectInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_LoadFilters, CallFunc_SelectInt_ReturnValue_4) == 0x000020, "Member 'WB_InventoryFilter_C_LoadFilters::CallFunc_SelectInt_ReturnValue_4' has a wrong offset!");

// Function WB_InventoryFilter.WB_InventoryFilter_C.NavigateList
// 0x0018 (0x0018 - 0x0000)
struct WB_InventoryFilter_C_NavigateList final
{
public:
	EUINavigation                                 Navigation_0;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                CallFunc_NavigateVerticalPanelWidget_WidgetToFocus; // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_InventoryFilter_C_NavigateList) == 0x000008, "Wrong alignment on WB_InventoryFilter_C_NavigateList");
static_assert(sizeof(WB_InventoryFilter_C_NavigateList) == 0x000018, "Wrong size on WB_InventoryFilter_C_NavigateList");
static_assert(offsetof(WB_InventoryFilter_C_NavigateList, Navigation_0) == 0x000000, "Member 'WB_InventoryFilter_C_NavigateList::Navigation_0' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_NavigateList, ReturnValue) == 0x000008, "Member 'WB_InventoryFilter_C_NavigateList::ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_NavigateList, CallFunc_NavigateVerticalPanelWidget_WidgetToFocus) == 0x000010, "Member 'WB_InventoryFilter_C_NavigateList::CallFunc_NavigateVerticalPanelWidget_WidgetToFocus' has a wrong offset!");

// Function WB_InventoryFilter.WB_InventoryFilter_C.OnFocusReceived
// 0x01B0 (0x01B0 - 0x0000)
struct WB_InventoryFilter_C_OnFocusReceived final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FFocusEvent                            InFocusEvent;                                      // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FEventReply                            ReturnValue;                                       // 0x0040(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x00F8(0x00B8)()
};
static_assert(alignof(WB_InventoryFilter_C_OnFocusReceived) == 0x000008, "Wrong alignment on WB_InventoryFilter_C_OnFocusReceived");
static_assert(sizeof(WB_InventoryFilter_C_OnFocusReceived) == 0x0001B0, "Wrong size on WB_InventoryFilter_C_OnFocusReceived");
static_assert(offsetof(WB_InventoryFilter_C_OnFocusReceived, MyGeometry) == 0x000000, "Member 'WB_InventoryFilter_C_OnFocusReceived::MyGeometry' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_OnFocusReceived, InFocusEvent) == 0x000038, "Member 'WB_InventoryFilter_C_OnFocusReceived::InFocusEvent' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_OnFocusReceived, ReturnValue) == 0x000040, "Member 'WB_InventoryFilter_C_OnFocusReceived::ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_OnFocusReceived, CallFunc_Handled_ReturnValue) == 0x0000F8, "Member 'WB_InventoryFilter_C_OnFocusReceived::CallFunc_Handled_ReturnValue' has a wrong offset!");

// Function WB_InventoryFilter.WB_InventoryFilter_C.UpdateRarity
// 0x0010 (0x0010 - 0x0000)
struct WB_InventoryFilter_C_UpdateRarity final
{
public:
	int32                                         Temp_int_Variable;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EB_Rarity                                     Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EB_Rarity                                     Temp_byte_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EB_Rarity                                     Temp_byte_Variable_2;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EB_Rarity                                     Temp_byte_Variable_3;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EB_Rarity                                     Temp_byte_Variable_4;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EB_Rarity                                     Temp_byte_Variable_5;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EB_Rarity                                     Temp_byte_Variable_6;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EB_Rarity                                     Temp_byte_Variable_7;                              // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EB_Rarity                                     Temp_byte_Variable_8;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EB_Rarity                                     K2Node_Select_Default;                             // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_InventoryFilter_C_UpdateRarity) == 0x000004, "Wrong alignment on WB_InventoryFilter_C_UpdateRarity");
static_assert(sizeof(WB_InventoryFilter_C_UpdateRarity) == 0x000010, "Wrong size on WB_InventoryFilter_C_UpdateRarity");
static_assert(offsetof(WB_InventoryFilter_C_UpdateRarity, Temp_int_Variable) == 0x000000, "Member 'WB_InventoryFilter_C_UpdateRarity::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_UpdateRarity, Temp_byte_Variable) == 0x000004, "Member 'WB_InventoryFilter_C_UpdateRarity::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_UpdateRarity, Temp_byte_Variable_1) == 0x000005, "Member 'WB_InventoryFilter_C_UpdateRarity::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_UpdateRarity, Temp_byte_Variable_2) == 0x000006, "Member 'WB_InventoryFilter_C_UpdateRarity::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_UpdateRarity, Temp_byte_Variable_3) == 0x000007, "Member 'WB_InventoryFilter_C_UpdateRarity::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_UpdateRarity, Temp_byte_Variable_4) == 0x000008, "Member 'WB_InventoryFilter_C_UpdateRarity::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_UpdateRarity, Temp_byte_Variable_5) == 0x000009, "Member 'WB_InventoryFilter_C_UpdateRarity::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_UpdateRarity, Temp_byte_Variable_6) == 0x00000A, "Member 'WB_InventoryFilter_C_UpdateRarity::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_UpdateRarity, Temp_byte_Variable_7) == 0x00000B, "Member 'WB_InventoryFilter_C_UpdateRarity::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_UpdateRarity, Temp_byte_Variable_8) == 0x00000C, "Member 'WB_InventoryFilter_C_UpdateRarity::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_UpdateRarity, K2Node_Select_Default) == 0x00000D, "Member 'WB_InventoryFilter_C_UpdateRarity::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_UpdateRarity, CallFunc_Greater_IntInt_ReturnValue) == 0x00000E, "Member 'WB_InventoryFilter_C_UpdateRarity::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function WB_InventoryFilter.WB_InventoryFilter_C.UpdateSlot
// 0x00D0 (0x00D0 - 0x0000)
struct WB_InventoryFilter_C_UpdateSlot final
{
public:
	E_Slot                                        Slot_0;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Slot                                        Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Slot                                        Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Slot                                        Temp_byte_Variable_2;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Slot                                        Temp_byte_Variable_3;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Slot                                        Temp_byte_Variable_4;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Slot                                        Temp_byte_Variable_5;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Slot                                        Temp_byte_Variable_6;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Slot                                        Temp_byte_Variable_7;                              // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Slot                                        Temp_byte_Variable_8;                              // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Slot                                        Temp_byte_Variable_9;                              // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Slot                                        Temp_byte_Variable_10;                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Slot                                        Temp_byte_Variable_11;                             // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Slot                                        Temp_byte_Variable_12;                             // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Slot                                        Temp_byte_Variable_13;                             // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Slot                                        K2Node_Select_Default;                             // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<E_Slot>                                  K2Node_MakeSet_Set;                                // 0x0020(0x0050)()
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Slot                                        K2Node_Select_Default_1;                           // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<E_Slot>                                  K2Node_MakeSet_Set_1;                              // 0x0078(0x0050)()
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_InventoryFilter_C_UpdateSlot) == 0x000008, "Wrong alignment on WB_InventoryFilter_C_UpdateSlot");
static_assert(sizeof(WB_InventoryFilter_C_UpdateSlot) == 0x0000D0, "Wrong size on WB_InventoryFilter_C_UpdateSlot");
static_assert(offsetof(WB_InventoryFilter_C_UpdateSlot, Slot_0) == 0x000000, "Member 'WB_InventoryFilter_C_UpdateSlot::Slot_0' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_UpdateSlot, Temp_byte_Variable) == 0x000001, "Member 'WB_InventoryFilter_C_UpdateSlot::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_UpdateSlot, Temp_byte_Variable_1) == 0x000002, "Member 'WB_InventoryFilter_C_UpdateSlot::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_UpdateSlot, Temp_byte_Variable_2) == 0x000003, "Member 'WB_InventoryFilter_C_UpdateSlot::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_UpdateSlot, Temp_byte_Variable_3) == 0x000004, "Member 'WB_InventoryFilter_C_UpdateSlot::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_UpdateSlot, Temp_byte_Variable_4) == 0x000005, "Member 'WB_InventoryFilter_C_UpdateSlot::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_UpdateSlot, Temp_byte_Variable_5) == 0x000006, "Member 'WB_InventoryFilter_C_UpdateSlot::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_UpdateSlot, Temp_int_Variable) == 0x000008, "Member 'WB_InventoryFilter_C_UpdateSlot::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_UpdateSlot, Temp_byte_Variable_6) == 0x00000C, "Member 'WB_InventoryFilter_C_UpdateSlot::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_UpdateSlot, Temp_byte_Variable_7) == 0x00000D, "Member 'WB_InventoryFilter_C_UpdateSlot::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_UpdateSlot, Temp_byte_Variable_8) == 0x00000E, "Member 'WB_InventoryFilter_C_UpdateSlot::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_UpdateSlot, Temp_byte_Variable_9) == 0x00000F, "Member 'WB_InventoryFilter_C_UpdateSlot::Temp_byte_Variable_9' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_UpdateSlot, Temp_byte_Variable_10) == 0x000010, "Member 'WB_InventoryFilter_C_UpdateSlot::Temp_byte_Variable_10' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_UpdateSlot, Temp_byte_Variable_11) == 0x000011, "Member 'WB_InventoryFilter_C_UpdateSlot::Temp_byte_Variable_11' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_UpdateSlot, Temp_byte_Variable_12) == 0x000012, "Member 'WB_InventoryFilter_C_UpdateSlot::Temp_byte_Variable_12' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_UpdateSlot, Temp_byte_Variable_13) == 0x000013, "Member 'WB_InventoryFilter_C_UpdateSlot::Temp_byte_Variable_13' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_UpdateSlot, Temp_int_Variable_1) == 0x000014, "Member 'WB_InventoryFilter_C_UpdateSlot::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_UpdateSlot, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000018, "Member 'WB_InventoryFilter_C_UpdateSlot::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_UpdateSlot, K2Node_Select_Default) == 0x000019, "Member 'WB_InventoryFilter_C_UpdateSlot::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_UpdateSlot, K2Node_MakeSet_Set) == 0x000020, "Member 'WB_InventoryFilter_C_UpdateSlot::K2Node_MakeSet_Set' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_UpdateSlot, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000070, "Member 'WB_InventoryFilter_C_UpdateSlot::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_UpdateSlot, K2Node_Select_Default_1) == 0x000071, "Member 'WB_InventoryFilter_C_UpdateSlot::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_UpdateSlot, K2Node_MakeSet_Set_1) == 0x000078, "Member 'WB_InventoryFilter_C_UpdateSlot::K2Node_MakeSet_Set_1' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_UpdateSlot, K2Node_SwitchInteger_CmpSuccess) == 0x0000C8, "Member 'WB_InventoryFilter_C_UpdateSlot::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");

// Function WB_InventoryFilter.WB_InventoryFilter_C.UpdateTeam
// 0x0028 (0x0028 - 0x0000)
struct WB_InventoryFilter_C_UpdateTeam final
{
public:
	bool                                          IsLoading;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess_1;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           K2Node_MakeArray_Array;                            // 0x0008(0x0010)(ReferenceParm)
	TArray<class FText>                           K2Node_MakeArray_Array_1;                          // 0x0018(0x0010)(ReferenceParm)
};
static_assert(alignof(WB_InventoryFilter_C_UpdateTeam) == 0x000008, "Wrong alignment on WB_InventoryFilter_C_UpdateTeam");
static_assert(sizeof(WB_InventoryFilter_C_UpdateTeam) == 0x000028, "Wrong size on WB_InventoryFilter_C_UpdateTeam");
static_assert(offsetof(WB_InventoryFilter_C_UpdateTeam, IsLoading) == 0x000000, "Member 'WB_InventoryFilter_C_UpdateTeam::IsLoading' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_UpdateTeam, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'WB_InventoryFilter_C_UpdateTeam::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_UpdateTeam, CallFunc_Not_PreBool_ReturnValue_1) == 0x000002, "Member 'WB_InventoryFilter_C_UpdateTeam::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_UpdateTeam, K2Node_SwitchInteger_CmpSuccess) == 0x000003, "Member 'WB_InventoryFilter_C_UpdateTeam::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_UpdateTeam, K2Node_SwitchInteger_CmpSuccess_1) == 0x000004, "Member 'WB_InventoryFilter_C_UpdateTeam::K2Node_SwitchInteger_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_UpdateTeam, K2Node_MakeArray_Array) == 0x000008, "Member 'WB_InventoryFilter_C_UpdateTeam::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_UpdateTeam, K2Node_MakeArray_Array_1) == 0x000018, "Member 'WB_InventoryFilter_C_UpdateTeam::K2Node_MakeArray_Array_1' has a wrong offset!");

// Function WB_InventoryFilter.WB_InventoryFilter_C.UpdateType
// 0x0100 (0x0100 - 0x0000)
struct WB_InventoryFilter_C_UpdateType final
{
public:
	bool                                          IsLoading;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<E_Slot>                                  K2Node_MakeSet_Set;                                // 0x0008(0x0050)()
	TSet<E_Slot>                                  K2Node_MakeSet_Set_1;                              // 0x0058(0x0050)()
	TSet<E_Slot>                                  K2Node_MakeSet_Set_2;                              // 0x00A8(0x0050)()
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_InventoryFilter_C_UpdateType) == 0x000008, "Wrong alignment on WB_InventoryFilter_C_UpdateType");
static_assert(sizeof(WB_InventoryFilter_C_UpdateType) == 0x000100, "Wrong size on WB_InventoryFilter_C_UpdateType");
static_assert(offsetof(WB_InventoryFilter_C_UpdateType, IsLoading) == 0x000000, "Member 'WB_InventoryFilter_C_UpdateType::IsLoading' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_UpdateType, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'WB_InventoryFilter_C_UpdateType::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_UpdateType, K2Node_MakeSet_Set) == 0x000008, "Member 'WB_InventoryFilter_C_UpdateType::K2Node_MakeSet_Set' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_UpdateType, K2Node_MakeSet_Set_1) == 0x000058, "Member 'WB_InventoryFilter_C_UpdateType::K2Node_MakeSet_Set_1' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_UpdateType, K2Node_MakeSet_Set_2) == 0x0000A8, "Member 'WB_InventoryFilter_C_UpdateType::K2Node_MakeSet_Set_2' has a wrong offset!");
static_assert(offsetof(WB_InventoryFilter_C_UpdateType, K2Node_SwitchInteger_CmpSuccess) == 0x0000F8, "Member 'WB_InventoryFilter_C_UpdateType::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");

}

