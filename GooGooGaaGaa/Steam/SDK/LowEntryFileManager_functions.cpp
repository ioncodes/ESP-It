#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LowEntryFileManager

#include "Basic.hpp"

#include "LowEntryFileManager_classes.hpp"
#include "LowEntryFileManager_parameters.hpp"


namespace SDK
{

// Function LowEntryFileManager.LowEntryFileManagerDirectory.Clear
// (Final, Native, Public, BlueprintCallable)

void ULowEntryFileManagerDirectory::Clear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LowEntryFileManagerDirectory", "Clear");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LowEntryFileManager.LowEntryFileManagerDirectory.CopyTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULowEntryFileManagerDirectory*    NewDirectory                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OverrideExistingFiles                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULowEntryFileManagerDirectory::CopyTo(class ULowEntryFileManagerDirectory* NewDirectory, const bool OverrideExistingFiles)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LowEntryFileManagerDirectory", "CopyTo");

	Params::LowEntryFileManagerDirectory_CopyTo Parms{};

	Parms.NewDirectory = NewDirectory;
	Parms.OverrideExistingFiles = OverrideExistingFiles;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LowEntryFileManager.LowEntryFileManagerDirectory.Create
// (Final, Native, Public, BlueprintCallable)

void ULowEntryFileManagerDirectory::Create()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LowEntryFileManagerDirectory", "Create");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LowEntryFileManager.LowEntryFileManagerDirectory.Delete
// (Final, Native, Public, BlueprintCallable)

void ULowEntryFileManagerDirectory::Delete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LowEntryFileManagerDirectory", "Delete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LowEntryFileManager.LowEntryFileManagerDirectory.Exists
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// ELowEntryFileManagerYesNo               Branch                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULowEntryFileManagerDirectory::Exists(ELowEntryFileManagerYesNo* Branch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LowEntryFileManagerDirectory", "Exists");

	Params::LowEntryFileManagerDirectory_Exists Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branch != nullptr)
		*Branch = Parms.Branch;
}


// Function LowEntryFileManager.LowEntryFileManagerDirectory.ExistsBool
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULowEntryFileManagerDirectory::ExistsBool()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LowEntryFileManagerDirectory", "ExistsBool");

	Params::LowEntryFileManagerDirectory_ExistsBool Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerDirectory.GetDirectories
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class ULowEntryFileManagerDirectory*>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class ULowEntryFileManagerDirectory*> ULowEntryFileManagerDirectory::GetDirectories()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LowEntryFileManagerDirectory", "GetDirectories");

	Params::LowEntryFileManagerDirectory_GetDirectories Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerDirectory.GetDirectory
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Directory_                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULowEntryFileManagerDirectory*    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULowEntryFileManagerDirectory* ULowEntryFileManagerDirectory::GetDirectory(const class FString& Directory_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LowEntryFileManagerDirectory", "GetDirectory");

	Params::LowEntryFileManagerDirectory_GetDirectory Parms{};

	Parms.Directory_ = std::move(Directory_);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerDirectory.GetFile
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           File                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULowEntryFileManagerFile*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULowEntryFileManagerFile* ULowEntryFileManagerDirectory::GetFile(const class FString& File)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LowEntryFileManagerDirectory", "GetFile");

	Params::LowEntryFileManagerDirectory_GetFile Parms{};

	Parms.File = std::move(File);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerDirectory.GetFiles
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class ULowEntryFileManagerFile*> ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class ULowEntryFileManagerFile*> ULowEntryFileManagerDirectory::GetFiles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LowEntryFileManagerDirectory", "GetFiles");

	Params::LowEntryFileManagerDirectory_GetFiles Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerDirectory.GetParentDirectory
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULowEntryFileManagerDirectory*    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULowEntryFileManagerDirectory* ULowEntryFileManagerDirectory::GetParentDirectory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LowEntryFileManagerDirectory", "GetParentDirectory");

	Params::LowEntryFileManagerDirectory_GetParentDirectory Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerDirectory.IsEmpty
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// ELowEntryFileManagerYesNo               Branch                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULowEntryFileManagerDirectory::IsEmpty(ELowEntryFileManagerYesNo* Branch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LowEntryFileManagerDirectory", "IsEmpty");

	Params::LowEntryFileManagerDirectory_IsEmpty Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branch != nullptr)
		*Branch = Parms.Branch;
}


// Function LowEntryFileManager.LowEntryFileManagerDirectory.IsEmptyBool
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULowEntryFileManagerDirectory::IsEmptyBool()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LowEntryFileManagerDirectory", "IsEmptyBool");

	Params::LowEntryFileManagerDirectory_IsEmptyBool Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerDirectory.IsRoot
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// ELowEntryFileManagerYesNo               Branch                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULowEntryFileManagerDirectory::IsRoot(ELowEntryFileManagerYesNo* Branch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LowEntryFileManagerDirectory", "IsRoot");

	Params::LowEntryFileManagerDirectory_IsRoot Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branch != nullptr)
		*Branch = Parms.Branch;
}


// Function LowEntryFileManager.LowEntryFileManagerDirectory.IsRootBool
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULowEntryFileManagerDirectory::IsRootBool()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LowEntryFileManagerDirectory", "IsRootBool");

	Params::LowEntryFileManagerDirectory_IsRootBool Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerDirectory.MoveTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULowEntryFileManagerDirectory*    NewDirectory                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OverrideExistingFiles                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULowEntryFileManagerDirectory::MoveTo(class ULowEntryFileManagerDirectory* NewDirectory, const bool OverrideExistingFiles)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LowEntryFileManagerDirectory", "MoveTo");

	Params::LowEntryFileManagerDirectory_MoveTo Parms{};

	Parms.NewDirectory = NewDirectory;
	Parms.OverrideExistingFiles = OverrideExistingFiles;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LowEntryFileManager.LowEntryFileManagerDirectory.GetAbsolutePath
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ULowEntryFileManagerDirectory::GetAbsolutePath() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LowEntryFileManagerDirectory", "GetAbsolutePath");

	Params::LowEntryFileManagerDirectory_GetAbsolutePath Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerDirectory.GetDirName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ULowEntryFileManagerDirectory::GetDirName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LowEntryFileManagerDirectory", "GetDirName");

	Params::LowEntryFileManagerDirectory_GetDirName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerDirectory.GetPath
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ULowEntryFileManagerDirectory::GetPath() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LowEntryFileManagerDirectory", "GetPath");

	Params::LowEntryFileManagerDirectory_GetPath Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerFile.AppendData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<uint8>                           Data                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ULowEntryFileManagerFile::AppendData(const TArray<uint8>& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LowEntryFileManagerFile", "AppendData");

	Params::LowEntryFileManagerFile_AppendData Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LowEntryFileManager.LowEntryFileManagerFile.Clear
// (Final, Native, Public, BlueprintCallable)

void ULowEntryFileManagerFile::Clear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LowEntryFileManagerFile", "Clear");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LowEntryFileManager.LowEntryFileManagerFile.CopyTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULowEntryFileManagerFile*         NewFile                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULowEntryFileManagerFile::CopyTo(class ULowEntryFileManagerFile* NewFile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LowEntryFileManagerFile", "CopyTo");

	Params::LowEntryFileManagerFile_CopyTo Parms{};

	Parms.NewFile = NewFile;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LowEntryFileManager.LowEntryFileManagerFile.Create
// (Final, Native, Public, BlueprintCallable)

void ULowEntryFileManagerFile::Create()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LowEntryFileManagerFile", "Create");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LowEntryFileManager.LowEntryFileManagerFile.Delete
// (Final, Native, Public, BlueprintCallable)

void ULowEntryFileManagerFile::Delete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LowEntryFileManagerFile", "Delete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LowEntryFileManager.LowEntryFileManagerFile.Execute
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           Parameters                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnCode                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           StdOut                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           StdErr                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULowEntryFileManagerFile::Execute(const class FString& Parameters, bool* Success, int32* ReturnCode, class FString* StdOut, class FString* StdErr)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LowEntryFileManagerFile", "Execute");

	Params::LowEntryFileManagerFile_Execute Parms{};

	Parms.Parameters = std::move(Parameters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Success != nullptr)
		*Success = Parms.Success;

	if (ReturnCode != nullptr)
		*ReturnCode = Parms.ReturnCode;

	if (StdOut != nullptr)
		*StdOut = std::move(Parms.StdOut);

	if (StdErr != nullptr)
		*StdErr = std::move(Parms.StdErr);
}


// Function LowEntryFileManager.LowEntryFileManagerFile.ExecuteAsync
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           Parameters                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ProcessId                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Hidden                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Priority                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULowEntryFileManagerDirectory*    OptionalWorkingDirectory                               (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULowEntryFileManagerFile::ExecuteAsync(const class FString& Parameters, bool* Success, int32* ProcessId, const bool Hidden, const int32 Priority, class ULowEntryFileManagerDirectory* OptionalWorkingDirectory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LowEntryFileManagerFile", "ExecuteAsync");

	Params::LowEntryFileManagerFile_ExecuteAsync Parms{};

	Parms.Parameters = std::move(Parameters);
	Parms.Hidden = Hidden;
	Parms.Priority = Priority;
	Parms.OptionalWorkingDirectory = OptionalWorkingDirectory;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Success != nullptr)
		*Success = Parms.Success;

	if (ProcessId != nullptr)
		*ProcessId = Parms.ProcessId;
}


// Function LowEntryFileManager.LowEntryFileManagerFile.Exists
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// ELowEntryFileManagerYesNo               Branch                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULowEntryFileManagerFile::Exists(ELowEntryFileManagerYesNo* Branch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LowEntryFileManagerFile", "Exists");

	Params::LowEntryFileManagerFile_Exists Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branch != nullptr)
		*Branch = Parms.Branch;
}


// Function LowEntryFileManager.LowEntryFileManagerFile.ExistsBool
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULowEntryFileManagerFile::ExistsBool()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LowEntryFileManagerFile", "ExistsBool");

	Params::LowEntryFileManagerFile_ExistsBool Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerFile.GetAccessTimestamp
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDateTime                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FDateTime ULowEntryFileManagerFile::GetAccessTimestamp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LowEntryFileManagerFile", "GetAccessTimestamp");

	Params::LowEntryFileManagerFile_GetAccessTimestamp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerFile.GetData
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<uint8>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<uint8> ULowEntryFileManagerFile::GetData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LowEntryFileManagerFile", "GetData");

	Params::LowEntryFileManagerFile_GetData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerFile.GetDataUnsafe
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<uint8>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<uint8> ULowEntryFileManagerFile::GetDataUnsafe()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LowEntryFileManagerFile", "GetDataUnsafe");

	Params::LowEntryFileManagerFile_GetDataUnsafe Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerFile.GetParentDirectory
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULowEntryFileManagerDirectory*    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULowEntryFileManagerDirectory* ULowEntryFileManagerFile::GetParentDirectory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LowEntryFileManagerFile", "GetParentDirectory");

	Params::LowEntryFileManagerFile_GetParentDirectory Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerFile.GetTimeStamp
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDateTime                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FDateTime ULowEntryFileManagerFile::GetTimeStamp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LowEntryFileManagerFile", "GetTimeStamp");

	Params::LowEntryFileManagerFile_GetTimeStamp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerFile.IsEmpty
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// ELowEntryFileManagerYesNo               Branch                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULowEntryFileManagerFile::IsEmpty(ELowEntryFileManagerYesNo* Branch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LowEntryFileManagerFile", "IsEmpty");

	Params::LowEntryFileManagerFile_IsEmpty Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branch != nullptr)
		*Branch = Parms.Branch;
}


// Function LowEntryFileManager.LowEntryFileManagerFile.IsEmptyBool
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULowEntryFileManagerFile::IsEmptyBool()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LowEntryFileManagerFile", "IsEmptyBool");

	Params::LowEntryFileManagerFile_IsEmptyBool Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerFile.IsReadOnly
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// ELowEntryFileManagerYesNo               Branch                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULowEntryFileManagerFile::IsReadOnly(ELowEntryFileManagerYesNo* Branch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LowEntryFileManagerFile", "IsReadOnly");

	Params::LowEntryFileManagerFile_IsReadOnly Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branch != nullptr)
		*Branch = Parms.Branch;
}


// Function LowEntryFileManager.LowEntryFileManagerFile.IsReadOnlyBool
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULowEntryFileManagerFile::IsReadOnlyBool()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LowEntryFileManagerFile", "IsReadOnlyBool");

	Params::LowEntryFileManagerFile_IsReadOnlyBool Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerFile.MoveTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULowEntryFileManagerFile*         NewFile                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULowEntryFileManagerFile::MoveTo(class ULowEntryFileManagerFile* NewFile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LowEntryFileManagerFile", "MoveTo");

	Params::LowEntryFileManagerFile_MoveTo Parms{};

	Parms.NewFile = NewFile;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LowEntryFileManager.LowEntryFileManagerFile.SetData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<uint8>                           Data                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ULowEntryFileManagerFile::SetData(const TArray<uint8>& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LowEntryFileManagerFile", "SetData");

	Params::LowEntryFileManagerFile_SetData Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LowEntryFileManager.LowEntryFileManagerFile.SetReadOnly
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReadOnly                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULowEntryFileManagerFile::SetReadOnly(const bool ReadOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LowEntryFileManagerFile", "SetReadOnly");

	Params::LowEntryFileManagerFile_SetReadOnly Parms{};

	Parms.ReadOnly = ReadOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LowEntryFileManager.LowEntryFileManagerFile.SetTimestamp
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FDateTime                        Timestamp                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULowEntryFileManagerFile::SetTimestamp(const struct FDateTime& Timestamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LowEntryFileManagerFile", "SetTimestamp");

	Params::LowEntryFileManagerFile_SetTimestamp Parms{};

	Parms.Timestamp = std::move(Timestamp);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LowEntryFileManager.LowEntryFileManagerFile.Size
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ULowEntryFileManagerFile::Size()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LowEntryFileManagerFile", "Size");

	Params::LowEntryFileManagerFile_Size Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerFile.SizeUnsafe
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 ULowEntryFileManagerFile::SizeUnsafe()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LowEntryFileManagerFile", "SizeUnsafe");

	Params::LowEntryFileManagerFile_SizeUnsafe Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerFile.GetAbsolutePath
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ULowEntryFileManagerFile::GetAbsolutePath() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LowEntryFileManagerFile", "GetAbsolutePath");

	Params::LowEntryFileManagerFile_GetAbsolutePath Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerFile.GetExtension
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ULowEntryFileManagerFile::GetExtension() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LowEntryFileManagerFile", "GetExtension");

	Params::LowEntryFileManagerFile_GetExtension Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerFile.GetFileName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ULowEntryFileManagerFile::GetFileName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LowEntryFileManagerFile", "GetFileName");

	Params::LowEntryFileManagerFile_GetFileName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerFile.GetFileNameWithoutExtension
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ULowEntryFileManagerFile::GetFileNameWithoutExtension() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LowEntryFileManagerFile", "GetFileNameWithoutExtension");

	Params::LowEntryFileManagerFile_GetFileNameWithoutExtension Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerFile.GetPath
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ULowEntryFileManagerFile::GetPath() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LowEntryFileManagerFile", "GetPath");

	Params::LowEntryFileManagerFile_GetPath Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.AppendFileData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           File                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           Data                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ULowEntryFileManagerLibrary::AppendFileData(const class FString& File, const TArray<uint8>& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "AppendFileData");

	Params::LowEntryFileManagerLibrary_AppendFileData Parms{};

	Parms.File = std::move(File);
	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.ClearDirectory
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Directory                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULowEntryFileManagerLibrary::ClearDirectory(const class FString& Directory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "ClearDirectory");

	Params::LowEntryFileManagerLibrary_ClearDirectory Parms{};

	Parms.Directory = std::move(Directory);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.ClearFile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           File                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULowEntryFileManagerLibrary::ClearFile(const class FString& File)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "ClearFile");

	Params::LowEntryFileManagerLibrary_ClearFile Parms{};

	Parms.File = std::move(File);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.CopyDirectory
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Directory                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           To                                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OverrideExistingFiles                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULowEntryFileManagerLibrary::CopyDirectory(const class FString& Directory, const class FString& To, const bool OverrideExistingFiles)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "CopyDirectory");

	Params::LowEntryFileManagerLibrary_CopyDirectory Parms{};

	Parms.Directory = std::move(Directory);
	Parms.To = std::move(To);
	Parms.OverrideExistingFiles = OverrideExistingFiles;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.CopyFile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           File                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           To                                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULowEntryFileManagerLibrary::CopyFile(const class FString& File, const class FString& To)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "CopyFile");

	Params::LowEntryFileManagerLibrary_CopyFile Parms{};

	Parms.File = std::move(File);
	Parms.To = std::move(To);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.CreateNewDirectory
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Directory                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULowEntryFileManagerLibrary::CreateNewDirectory(const class FString& Directory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "CreateNewDirectory");

	Params::LowEntryFileManagerLibrary_CreateNewDirectory Parms{};

	Parms.Directory = std::move(Directory);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.CreateNewFile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           File                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULowEntryFileManagerLibrary::CreateNewFile(const class FString& File)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "CreateNewFile");

	Params::LowEntryFileManagerLibrary_CreateNewFile Parms{};

	Parms.File = std::move(File);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.CreateParentDirectory
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULowEntryFileManagerLibrary::CreateParentDirectory(const class FString& Path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "CreateParentDirectory");

	Params::LowEntryFileManagerLibrary_CreateParentDirectory Parms{};

	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.DeleteDirectory
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Directory                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULowEntryFileManagerLibrary::DeleteDirectory(const class FString& Directory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "DeleteDirectory");

	Params::LowEntryFileManagerLibrary_DeleteDirectory Parms{};

	Parms.Directory = std::move(Directory);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.DeleteFile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           File                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULowEntryFileManagerLibrary::DeleteFile(const class FString& File)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "DeleteFile");

	Params::LowEntryFileManagerLibrary_DeleteFile Parms{};

	Parms.File = std::move(File);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.DirectoryExists
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           Directory                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELowEntryFileManagerYesNo               Branch                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULowEntryFileManagerLibrary::DirectoryExists(const class FString& Directory, ELowEntryFileManagerYesNo* Branch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "DirectoryExists");

	Params::LowEntryFileManagerLibrary_DirectoryExists Parms{};

	Parms.Directory = std::move(Directory);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branch != nullptr)
		*Branch = Parms.Branch;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.DirectoryExistsBool
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Directory                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULowEntryFileManagerLibrary::DirectoryExistsBool(const class FString& Directory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "DirectoryExistsBool");

	Params::LowEntryFileManagerLibrary_DirectoryExistsBool Parms{};

	Parms.Directory = std::move(Directory);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.ExecuteFile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           File                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Parameters                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnCode                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           StdOut                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           StdErr                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULowEntryFileManagerLibrary::ExecuteFile(const class FString& File, const class FString& Parameters, bool* Success, int32* ReturnCode, class FString* StdOut, class FString* StdErr)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "ExecuteFile");

	Params::LowEntryFileManagerLibrary_ExecuteFile Parms{};

	Parms.File = std::move(File);
	Parms.Parameters = std::move(Parameters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Success != nullptr)
		*Success = Parms.Success;

	if (ReturnCode != nullptr)
		*ReturnCode = Parms.ReturnCode;

	if (StdOut != nullptr)
		*StdOut = std::move(Parms.StdOut);

	if (StdErr != nullptr)
		*StdErr = std::move(Parms.StdErr);
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.ExecuteFileAsync
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           File                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Parameters                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ProcessId                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Hidden                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Priority                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OptionalWorkingDirectory                               (Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULowEntryFileManagerLibrary::ExecuteFileAsync(const class FString& File, const class FString& Parameters, bool* Success, int32* ProcessId, const bool Hidden, const int32 Priority, const class FString& OptionalWorkingDirectory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "ExecuteFileAsync");

	Params::LowEntryFileManagerLibrary_ExecuteFileAsync Parms{};

	Parms.File = std::move(File);
	Parms.Parameters = std::move(Parameters);
	Parms.Hidden = Hidden;
	Parms.Priority = Priority;
	Parms.OptionalWorkingDirectory = std::move(OptionalWorkingDirectory);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Success != nullptr)
		*Success = Parms.Success;

	if (ProcessId != nullptr)
		*ProcessId = Parms.ProcessId;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.FileExists
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           File                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELowEntryFileManagerYesNo               Branch                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULowEntryFileManagerLibrary::FileExists(const class FString& File, ELowEntryFileManagerYesNo* Branch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "FileExists");

	Params::LowEntryFileManagerLibrary_FileExists Parms{};

	Parms.File = std::move(File);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branch != nullptr)
		*Branch = Parms.Branch;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.FileExistsBool
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           File                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULowEntryFileManagerLibrary::FileExistsBool(const class FString& File)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "FileExistsBool");

	Params::LowEntryFileManagerLibrary_FileExistsBool Parms{};

	Parms.File = std::move(File);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.GetAbsoluteRoot
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULowEntryFileManagerDirectory*    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULowEntryFileManagerDirectory* ULowEntryFileManagerLibrary::GetAbsoluteRoot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "GetAbsoluteRoot");

	Params::LowEntryFileManagerLibrary_GetAbsoluteRoot Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.GetCloudDirPath
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ULowEntryFileManagerLibrary::GetCloudDirPath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "GetCloudDirPath");

	Params::LowEntryFileManagerLibrary_GetCloudDirPath Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.GetDirectories
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Directory                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> ULowEntryFileManagerLibrary::GetDirectories(const class FString& Directory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "GetDirectories");

	Params::LowEntryFileManagerLibrary_GetDirectories Parms{};

	Parms.Directory = std::move(Directory);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.GetDirectory
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULowEntryFileManagerDirectory*    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULowEntryFileManagerDirectory* ULowEntryFileManagerLibrary::GetDirectory(const class FString& Path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "GetDirectory");

	Params::LowEntryFileManagerLibrary_GetDirectory Parms{};

	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.GetDirectoryNames
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Directory                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> ULowEntryFileManagerLibrary::GetDirectoryNames(const class FString& Directory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "GetDirectoryNames");

	Params::LowEntryFileManagerLibrary_GetDirectoryNames Parms{};

	Parms.Directory = std::move(Directory);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.GetDiskPaths
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> ULowEntryFileManagerLibrary::GetDiskPaths()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "GetDiskPaths");

	Params::LowEntryFileManagerLibrary_GetDiskPaths Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.GetDisks
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class ULowEntryFileManagerDirectory*>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class ULowEntryFileManagerDirectory*> ULowEntryFileManagerLibrary::GetDisks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "GetDisks");

	Params::LowEntryFileManagerLibrary_GetDisks Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.GetEngineDirPath
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ULowEntryFileManagerLibrary::GetEngineDirPath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "GetEngineDirPath");

	Params::LowEntryFileManagerLibrary_GetEngineDirPath Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.GetEngineSavedDirPath
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ULowEntryFileManagerLibrary::GetEngineSavedDirPath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "GetEngineSavedDirPath");

	Params::LowEntryFileManagerLibrary_GetEngineSavedDirPath Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.GetFileAccessTimestamp
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           File                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDateTime                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FDateTime ULowEntryFileManagerLibrary::GetFileAccessTimestamp(const class FString& File)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "GetFileAccessTimestamp");

	Params::LowEntryFileManagerLibrary_GetFileAccessTimestamp Parms{};

	Parms.File = std::move(File);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.GetFileData
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           File                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<uint8> ULowEntryFileManagerLibrary::GetFileData(const class FString& File)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "GetFileData");

	Params::LowEntryFileManagerLibrary_GetFileData Parms{};

	Parms.File = std::move(File);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.GetFileDataUnsafe
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           File                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<uint8> ULowEntryFileManagerLibrary::GetFileDataUnsafe(const class FString& File)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "GetFileDataUnsafe");

	Params::LowEntryFileManagerLibrary_GetFileDataUnsafe Parms{};

	Parms.File = std::move(File);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.GetFileNames
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Directory                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> ULowEntryFileManagerLibrary::GetFileNames(const class FString& Directory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "GetFileNames");

	Params::LowEntryFileManagerLibrary_GetFileNames Parms{};

	Parms.Directory = std::move(Directory);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.GetFiles
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Directory                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> ULowEntryFileManagerLibrary::GetFiles(const class FString& Directory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "GetFiles");

	Params::LowEntryFileManagerLibrary_GetFiles Parms{};

	Parms.Directory = std::move(Directory);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.GetFileSize
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           File                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ULowEntryFileManagerLibrary::GetFileSize(const class FString& File)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "GetFileSize");

	Params::LowEntryFileManagerLibrary_GetFileSize Parms{};

	Parms.File = std::move(File);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.GetFileSizeUnsafe
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           File                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 ULowEntryFileManagerLibrary::GetFileSizeUnsafe(const class FString& File)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "GetFileSizeUnsafe");

	Params::LowEntryFileManagerLibrary_GetFileSizeUnsafe Parms{};

	Parms.File = std::move(File);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.GetFileTimestamp
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           File                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDateTime                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FDateTime ULowEntryFileManagerLibrary::GetFileTimestamp(const class FString& File)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "GetFileTimestamp");

	Params::LowEntryFileManagerLibrary_GetFileTimestamp Parms{};

	Parms.File = std::move(File);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.GetGameDirPath
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ULowEntryFileManagerLibrary::GetGameDirPath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "GetGameDirPath");

	Params::LowEntryFileManagerLibrary_GetGameDirPath Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.GetGamePersistentDownloadDirPath
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ULowEntryFileManagerLibrary::GetGamePersistentDownloadDirPath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "GetGamePersistentDownloadDirPath");

	Params::LowEntryFileManagerLibrary_GetGamePersistentDownloadDirPath Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.GetGameSavedDirPath
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ULowEntryFileManagerLibrary::GetGameSavedDirPath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "GetGameSavedDirPath");

	Params::LowEntryFileManagerLibrary_GetGameSavedDirPath Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.GetGameUserDirPath
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ULowEntryFileManagerLibrary::GetGameUserDirPath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "GetGameUserDirPath");

	Params::LowEntryFileManagerLibrary_GetGameUserDirPath Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.GetProjectFilePath
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ULowEntryFileManagerLibrary::GetProjectFilePath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "GetProjectFilePath");

	Params::LowEntryFileManagerLibrary_GetProjectFilePath Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.GetRoot
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULowEntryFileManagerDirectory*    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULowEntryFileManagerDirectory* ULowEntryFileManagerLibrary::GetRoot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "GetRoot");

	Params::LowEntryFileManagerLibrary_GetRoot Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.GetRootDirPath
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ULowEntryFileManagerLibrary::GetRootDirPath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "GetRootDirPath");

	Params::LowEntryFileManagerLibrary_GetRootDirPath Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.HasDiskPaths
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// ELowEntryFileManagerYesNo               Branch                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULowEntryFileManagerLibrary::HasDiskPaths(ELowEntryFileManagerYesNo* Branch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "HasDiskPaths");

	Params::LowEntryFileManagerLibrary_HasDiskPaths Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branch != nullptr)
		*Branch = Parms.Branch;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.HasDiskPathsBool
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULowEntryFileManagerLibrary::HasDiskPathsBool()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "HasDiskPathsBool");

	Params::LowEntryFileManagerLibrary_HasDiskPathsBool Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.IsDirectoryEmpty
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           Directory                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELowEntryFileManagerYesNo               Branch                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULowEntryFileManagerLibrary::IsDirectoryEmpty(const class FString& Directory, ELowEntryFileManagerYesNo* Branch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "IsDirectoryEmpty");

	Params::LowEntryFileManagerLibrary_IsDirectoryEmpty Parms{};

	Parms.Directory = std::move(Directory);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branch != nullptr)
		*Branch = Parms.Branch;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.IsDirectoryEmptyBool
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Directory                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULowEntryFileManagerLibrary::IsDirectoryEmptyBool(const class FString& Directory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "IsDirectoryEmptyBool");

	Params::LowEntryFileManagerLibrary_IsDirectoryEmptyBool Parms{};

	Parms.Directory = std::move(Directory);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.IsFileEmpty
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           File                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELowEntryFileManagerYesNo               Branch                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULowEntryFileManagerLibrary::IsFileEmpty(const class FString& File, ELowEntryFileManagerYesNo* Branch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "IsFileEmpty");

	Params::LowEntryFileManagerLibrary_IsFileEmpty Parms{};

	Parms.File = std::move(File);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branch != nullptr)
		*Branch = Parms.Branch;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.IsFileEmptyBool
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           File                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULowEntryFileManagerLibrary::IsFileEmptyBool(const class FString& File)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "IsFileEmptyBool");

	Params::LowEntryFileManagerLibrary_IsFileEmptyBool Parms{};

	Parms.File = std::move(File);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.IsFileReadOnly
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           File                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELowEntryFileManagerYesNo               Branch                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULowEntryFileManagerLibrary::IsFileReadOnly(const class FString& File, ELowEntryFileManagerYesNo* Branch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "IsFileReadOnly");

	Params::LowEntryFileManagerLibrary_IsFileReadOnly Parms{};

	Parms.File = std::move(File);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branch != nullptr)
		*Branch = Parms.Branch;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.IsFileReadOnlyBool
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           File                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULowEntryFileManagerLibrary::IsFileReadOnlyBool(const class FString& File)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "IsFileReadOnlyBool");

	Params::LowEntryFileManagerLibrary_IsFileReadOnlyBool Parms{};

	Parms.File = std::move(File);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.MoveDirectory
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Directory                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           To                                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OverrideExistingFiles                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULowEntryFileManagerLibrary::MoveDirectory(const class FString& Directory, const class FString& To, const bool OverrideExistingFiles)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "MoveDirectory");

	Params::LowEntryFileManagerLibrary_MoveDirectory Parms{};

	Parms.Directory = std::move(Directory);
	Parms.To = std::move(To);
	Parms.OverrideExistingFiles = OverrideExistingFiles;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.MoveFile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           File                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           To                                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULowEntryFileManagerLibrary::MoveFile(const class FString& File, const class FString& To)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "MoveFile");

	Params::LowEntryFileManagerLibrary_MoveFile Parms{};

	Parms.File = std::move(File);
	Parms.To = std::move(To);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.RelativeToAbsolutePath
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           RelativePath                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ULowEntryFileManagerLibrary::RelativeToAbsolutePath(const class FString& RelativePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "RelativeToAbsolutePath");

	Params::LowEntryFileManagerLibrary_RelativeToAbsolutePath Parms{};

	Parms.RelativePath = std::move(RelativePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.RemoveInvalidFilenameCharacters
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           String                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ULowEntryFileManagerLibrary::RemoveInvalidFilenameCharacters(const class FString& String)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "RemoveInvalidFilenameCharacters");

	Params::LowEntryFileManagerLibrary_RemoveInvalidFilenameCharacters Parms{};

	Parms.String = std::move(String);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.RemoveInvalidPathCharacters
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           String                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ULowEntryFileManagerLibrary::RemoveInvalidPathCharacters(const class FString& String)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "RemoveInvalidPathCharacters");

	Params::LowEntryFileManagerLibrary_RemoveInvalidPathCharacters Parms{};

	Parms.String = std::move(String);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.ReplaceBackslashesBySlashes
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           String                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ULowEntryFileManagerLibrary::ReplaceBackslashesBySlashes(const class FString& String)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "ReplaceBackslashesBySlashes");

	Params::LowEntryFileManagerLibrary_ReplaceBackslashesBySlashes Parms{};

	Parms.String = std::move(String);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.ReplaceInvalidFilenameCharacters
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           String                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReplacementCharacter                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ULowEntryFileManagerLibrary::ReplaceInvalidFilenameCharacters(const class FString& String, const class FString& ReplacementCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "ReplaceInvalidFilenameCharacters");

	Params::LowEntryFileManagerLibrary_ReplaceInvalidFilenameCharacters Parms{};

	Parms.String = std::move(String);
	Parms.ReplacementCharacter = std::move(ReplacementCharacter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.ReplaceInvalidPathCharacters
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           String                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReplacementCharacter                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ULowEntryFileManagerLibrary::ReplaceInvalidPathCharacters(const class FString& String, const class FString& ReplacementCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "ReplaceInvalidPathCharacters");

	Params::LowEntryFileManagerLibrary_ReplaceInvalidPathCharacters Parms{};

	Parms.String = std::move(String);
	Parms.ReplacementCharacter = std::move(ReplacementCharacter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.SetFileData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           File                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           Data                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ULowEntryFileManagerLibrary::SetFileData(const class FString& File, const TArray<uint8>& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "SetFileData");

	Params::LowEntryFileManagerLibrary_SetFileData Parms{};

	Parms.File = std::move(File);
	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.SetFileReadOnly
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           File                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReadOnly                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULowEntryFileManagerLibrary::SetFileReadOnly(const class FString& File, const bool ReadOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "SetFileReadOnly");

	Params::LowEntryFileManagerLibrary_SetFileReadOnly Parms{};

	Parms.File = std::move(File);
	Parms.ReadOnly = ReadOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.SetFileTimestamp
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class FString                           File                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDateTime                        Timestamp                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULowEntryFileManagerLibrary::SetFileTimestamp(const class FString& File, const struct FDateTime& Timestamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "SetFileTimestamp");

	Params::LowEntryFileManagerLibrary_SetFileTimestamp Parms{};

	Parms.File = std::move(File);
	Parms.Timestamp = std::move(Timestamp);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.SplitName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           NamePart                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ExtensionPart                                          (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULowEntryFileManagerLibrary::SplitName(const class FString& Name_0, class FString* NamePart, class FString* ExtensionPart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "SplitName");

	Params::LowEntryFileManagerLibrary_SplitName Parms{};

	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (NamePart != nullptr)
		*NamePart = std::move(Parms.NamePart);

	if (ExtensionPart != nullptr)
		*ExtensionPart = std::move(Parms.ExtensionPart);
}


// Function LowEntryFileManager.LowEntryFileManagerLibrary.SplitPath
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PathPart                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           NamePart                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULowEntryFileManagerLibrary::SplitPath(const class FString& Path, class FString* PathPart, class FString* NamePart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LowEntryFileManagerLibrary", "SplitPath");

	Params::LowEntryFileManagerLibrary_SplitPath Parms{};

	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (PathPart != nullptr)
		*PathPart = std::move(Parms.PathPart);

	if (NamePart != nullptr)
		*NamePart = std::move(Parms.NamePart);
}

}

