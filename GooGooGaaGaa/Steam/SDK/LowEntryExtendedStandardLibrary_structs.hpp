#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LowEntryExtendedStandardLibrary

#include "Basic.hpp"


namespace SDK
{

// Enum LowEntryExtendedStandardLibrary.ELowEntryBatteryState
// NumValues: 0x0006
enum class ELowEntryBatteryState : uint8
{
	Charging                                 = 0,
	Discharging                              = 1,
	Full                                     = 2,
	NotCharging                              = 3,
	Unknown                                  = 4,
	ELowEntryBatteryState_MAX                = 5,
};

// Enum LowEntryExtendedStandardLibrary.ELowEntryExtendedStandardLibrary0to9
// NumValues: 0x000B
enum class ELowEntryExtendedStandardLibrary0to9 : uint8
{
	_0_                                      = 0,
	_1_                                      = 1,
	_2_                                      = 2,
	_3_                                      = 3,
	_4_                                      = 4,
	_5_                                      = 5,
	_6_                                      = 6,
	_7_                                      = 7,
	_8_                                      = 8,
	_9_                                      = 9,
	_MAX                                     = 10,
};

// Enum LowEntryExtendedStandardLibrary.ELowEntryExtendedStandardLibrary1to10other
// NumValues: 0x000C
enum class ELowEntryExtendedStandardLibrary1to10other : uint8
{
	_1_                                      = 1,
	_2_                                      = 2,
	_3_                                      = 3,
	_4_                                      = 4,
	_5_                                      = 5,
	_6_                                      = 6,
	_7_                                      = 7,
	_8_                                      = 8,
	_9_                                      = 9,
	_10_                                     = 10,
	Other                                    = 0,
	ELowEntryExtendedStandardLibrary1to10other_MAX = 11,
};

// Enum LowEntryExtendedStandardLibrary.ELowEntryExtendedStandardLibraryTrueOrFalse
// NumValues: 0x0003
enum class ELowEntryExtendedStandardLibraryTrueOrFalse : uint8
{
	_True_                                   = 0,
	_False_                                  = 1,
	_MAX                                     = 2,
};

// Enum LowEntryExtendedStandardLibrary.ELowEntryHmacAlgorithm
// NumValues: 0x0005
enum class ELowEntryHmacAlgorithm : uint8
{
	MD5                                      = 0,
	SHA1                                     = 1,
	SHA256                                   = 2,
	SHA512                                   = 3,
	ELowEntryHmacAlgorithm_MAX               = 4,
};

// Enum LowEntryExtendedStandardLibrary.ELowEntryImageFormat
// NumValues: 0x0009
enum class ELowEntryImageFormat : uint8
{
	Invalid                                  = 0,
	PNG                                      = 1,
	JPEG                                     = 2,
	GrayscaleJPEG                            = 3,
	BMP                                      = 4,
	ICO                                      = 5,
	EXR                                      = 6,
	ICNS                                     = 7,
	ELowEntryImageFormat_MAX                 = 8,
};

// Enum LowEntryExtendedStandardLibrary.ELowEntryRGBFormat
// NumValues: 0x0005
enum class ELowEntryRGBFormat : uint8
{
	Invalid                                  = 0,
	RGBA                                     = 1,
	BGRA                                     = 2,
	Gray                                     = 3,
	ELowEntryRGBFormat_MAX                   = 4,
};

// Enum LowEntryExtendedStandardLibrary.ELowEntrySplitScreenType
// NumValues: 0x0009
enum class ELowEntrySplitScreenType : uint8
{
	None                                     = 0,
	TwoPlayer_Horizontal                     = 1,
	TwoPlayer_Vertical                       = 2,
	ThreePlayer_FavorTop                     = 3,
	ThreePlayer_FavorBottom                  = 4,
	ThreePlayer_Vertical                     = 5,
	FourPlayer_Grid                          = 6,
	FourPlayer_Vertical                      = 7,
	ELowEntrySplitScreenType_MAX             = 8,
};

// Enum LowEntryExtendedStandardLibrary.ELowEntrySplitScreenTypeThreePlayers
// NumValues: 0x0003
enum class ELowEntrySplitScreenTypeThreePlayers : uint8
{
	FavorTop                                 = 0,
	FavorBottom                              = 1,
	ELowEntrySplitScreenTypeThreePlayers_MAX = 2,
};

// Enum LowEntryExtendedStandardLibrary.ELowEntrySplitScreenTypeTwoPlayers
// NumValues: 0x0003
enum class ELowEntrySplitScreenTypeTwoPlayers : uint8
{
	Horizontal                               = 0,
	Vertical                                 = 1,
	ELowEntrySplitScreenTypeTwoPlayers_MAX   = 2,
};

// ScriptStruct LowEntryExtendedStandardLibrary.LowEntryRegexCaptureGroup
// 0x0020 (0x0020 - 0x0000)
struct FLowEntryRegexCaptureGroup final
{
public:
	int32                                         CaptureGroupNumber;                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BeginIndex;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndIndex;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Match;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLowEntryRegexCaptureGroup) == 0x000008, "Wrong alignment on FLowEntryRegexCaptureGroup");
static_assert(sizeof(FLowEntryRegexCaptureGroup) == 0x000020, "Wrong size on FLowEntryRegexCaptureGroup");
static_assert(offsetof(FLowEntryRegexCaptureGroup, CaptureGroupNumber) == 0x000000, "Member 'FLowEntryRegexCaptureGroup::CaptureGroupNumber' has a wrong offset!");
static_assert(offsetof(FLowEntryRegexCaptureGroup, BeginIndex) == 0x000004, "Member 'FLowEntryRegexCaptureGroup::BeginIndex' has a wrong offset!");
static_assert(offsetof(FLowEntryRegexCaptureGroup, EndIndex) == 0x000008, "Member 'FLowEntryRegexCaptureGroup::EndIndex' has a wrong offset!");
static_assert(offsetof(FLowEntryRegexCaptureGroup, Match) == 0x000010, "Member 'FLowEntryRegexCaptureGroup::Match' has a wrong offset!");

// ScriptStruct LowEntryExtendedStandardLibrary.LowEntryRegexMatch
// 0x0030 (0x0030 - 0x0000)
struct FLowEntryRegexMatch final
{
public:
	int32                                         MatchNumber;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BeginIndex;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndIndex;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Match;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLowEntryRegexCaptureGroup>     CaptureGroups;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLowEntryRegexMatch) == 0x000008, "Wrong alignment on FLowEntryRegexMatch");
static_assert(sizeof(FLowEntryRegexMatch) == 0x000030, "Wrong size on FLowEntryRegexMatch");
static_assert(offsetof(FLowEntryRegexMatch, MatchNumber) == 0x000000, "Member 'FLowEntryRegexMatch::MatchNumber' has a wrong offset!");
static_assert(offsetof(FLowEntryRegexMatch, BeginIndex) == 0x000004, "Member 'FLowEntryRegexMatch::BeginIndex' has a wrong offset!");
static_assert(offsetof(FLowEntryRegexMatch, EndIndex) == 0x000008, "Member 'FLowEntryRegexMatch::EndIndex' has a wrong offset!");
static_assert(offsetof(FLowEntryRegexMatch, Match) == 0x000010, "Member 'FLowEntryRegexMatch::Match' has a wrong offset!");
static_assert(offsetof(FLowEntryRegexMatch, CaptureGroups) == 0x000020, "Member 'FLowEntryRegexMatch::CaptureGroups' has a wrong offset!");

}

