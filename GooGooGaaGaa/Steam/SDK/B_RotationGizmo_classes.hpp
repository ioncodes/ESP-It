#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_RotationGizmo

#include "Basic.hpp"

#include "B_BaseGizmo_classes.hpp"
#include "Engine_structs.hpp"
#include "E_Axis_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_RotationGizmo.B_RotationGizmo_C
// 0x0080 (0x03A8 - 0x0328)
class AB_RotationGizmo_C final : public AB_BaseGizmo_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0328(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Y4;                                                // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Y3;                                                // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Y2;                                                // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Y1;                                                // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        YAxis;                                             // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   X4;                                                // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   X3;                                                // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   X2;                                                // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   X1;                                                // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        XAxis;                                             // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Z4;                                                // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Z3;                                                // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Z2;                                                // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Z1;                                                // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ZAxis;                                             // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_B_RotationGizmo(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void SetHighlightAxis(E_Axis Axis, bool* ForcedBool);
	void ShowOnlyLowestDistanceToCamera(TArray<class UStaticMeshComponent*>& Components);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_RotationGizmo_C">();
	}
	static class AB_RotationGizmo_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_RotationGizmo_C>();
	}
};
static_assert(alignof(AB_RotationGizmo_C) == 0x000008, "Wrong alignment on AB_RotationGizmo_C");
static_assert(sizeof(AB_RotationGizmo_C) == 0x0003A8, "Wrong size on AB_RotationGizmo_C");
static_assert(offsetof(AB_RotationGizmo_C, UberGraphFrame) == 0x000328, "Member 'AB_RotationGizmo_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AB_RotationGizmo_C, Y4) == 0x000330, "Member 'AB_RotationGizmo_C::Y4' has a wrong offset!");
static_assert(offsetof(AB_RotationGizmo_C, Y3) == 0x000338, "Member 'AB_RotationGizmo_C::Y3' has a wrong offset!");
static_assert(offsetof(AB_RotationGizmo_C, Y2) == 0x000340, "Member 'AB_RotationGizmo_C::Y2' has a wrong offset!");
static_assert(offsetof(AB_RotationGizmo_C, Y1) == 0x000348, "Member 'AB_RotationGizmo_C::Y1' has a wrong offset!");
static_assert(offsetof(AB_RotationGizmo_C, YAxis) == 0x000350, "Member 'AB_RotationGizmo_C::YAxis' has a wrong offset!");
static_assert(offsetof(AB_RotationGizmo_C, X4) == 0x000358, "Member 'AB_RotationGizmo_C::X4' has a wrong offset!");
static_assert(offsetof(AB_RotationGizmo_C, X3) == 0x000360, "Member 'AB_RotationGizmo_C::X3' has a wrong offset!");
static_assert(offsetof(AB_RotationGizmo_C, X2) == 0x000368, "Member 'AB_RotationGizmo_C::X2' has a wrong offset!");
static_assert(offsetof(AB_RotationGizmo_C, X1) == 0x000370, "Member 'AB_RotationGizmo_C::X1' has a wrong offset!");
static_assert(offsetof(AB_RotationGizmo_C, XAxis) == 0x000378, "Member 'AB_RotationGizmo_C::XAxis' has a wrong offset!");
static_assert(offsetof(AB_RotationGizmo_C, Z4) == 0x000380, "Member 'AB_RotationGizmo_C::Z4' has a wrong offset!");
static_assert(offsetof(AB_RotationGizmo_C, Z3) == 0x000388, "Member 'AB_RotationGizmo_C::Z3' has a wrong offset!");
static_assert(offsetof(AB_RotationGizmo_C, Z2) == 0x000390, "Member 'AB_RotationGizmo_C::Z2' has a wrong offset!");
static_assert(offsetof(AB_RotationGizmo_C, Z1) == 0x000398, "Member 'AB_RotationGizmo_C::Z1' has a wrong offset!");
static_assert(offsetof(AB_RotationGizmo_C, ZAxis) == 0x0003A0, "Member 'AB_RotationGizmo_C::ZAxis' has a wrong offset!");

}

