#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SteamGeneral

#include "Basic.hpp"


namespace SDK
{

// Enum SteamGeneral.ESteamSupportedLanguages
// NumValues: 0x001C
enum class ESteamSupportedLanguages : uint8
{
	Arabic                                   = 0,
	Bulgarian                                = 1,
	ChineseSimplified                        = 2,
	ChineseTraditional                       = 3,
	Czech                                    = 4,
	Danish                                   = 5,
	Dutch                                    = 6,
	English                                  = 7,
	Finnish                                  = 8,
	French                                   = 9,
	German                                   = 10,
	Greek                                    = 11,
	Hungarian                                = 12,
	Italian                                  = 13,
	Japanese                                 = 14,
	Korean                                   = 15,
	Norwegian                                = 16,
	Polish                                   = 17,
	Portuguese                               = 18,
	PortugueseBrazil                         = 19,
	Romanian                                 = 20,
	Russian                                  = 21,
	Spanish                                  = 22,
	Swedish                                  = 23,
	Thai                                     = 24,
	Turkish                                  = 25,
	Ukrainian                                = 26,
	ESteamSupportedLanguages_MAX             = 27,
};

// Enum SteamGeneral.EResultBP
// NumValues: 0x006D
enum class EResultBP : uint8
{
	R_INVALIDRESULT                          = 0,
	R_OK                                     = 1,
	R_Fail                                   = 2,
	R_NoConnection                           = 3,
	R_InvalidPassword                        = 5,
	R_LoggedInElsewhere                      = 6,
	R_InvalidProtocolVer                     = 7,
	R_InvalidParam                           = 8,
	R_FileNotFound                           = 9,
	R_Busy                                   = 10,
	R_InvalidState                           = 11,
	R_InvalidName                            = 12,
	R_InvalidEmail                           = 13,
	R_DuplicateName                          = 14,
	R_AccessDenied                           = 15,
	R_Timeout                                = 16,
	R_Banned                                 = 17,
	R_AccountNotFound                        = 18,
	R_InvalidSteamID                         = 19,
	R_ServiceUnavailable                     = 20,
	R_NotLoggedOn                            = 21,
	R_Pending                                = 22,
	R_EncryptionFailure                      = 23,
	R_InsufficientPrivilege                  = 24,
	R_LimitExceeded                          = 25,
	R_Revoked                                = 26,
	R_Expired                                = 27,
	R_AlreadyRedeemed                        = 28,
	R_DuplicateRequest                       = 29,
	R_AlreadyOwned                           = 30,
	R_IPNotFound                             = 31,
	R_PersistFailed                          = 32,
	R_LockingFailed                          = 33,
	R_LogonSessionReplaced                   = 34,
	R_ConnectFailed                          = 35,
	R_HandshakeFailed                        = 36,
	R_IOFailure                              = 37,
	R_RemoteDisconnect                       = 38,
	R_ShoppingCartNotFound                   = 39,
	R_Blocked                                = 40,
	R_Ignored                                = 41,
	R_NoMatch                                = 42,
	R_AccountDisabled                        = 43,
	R_ServiceReadOnly                        = 44,
	R_AccountNotFeatured                     = 45,
	R_AdministratorOK                        = 46,
	R_ContentVersion                         = 47,
	R_TryAnotherCM                           = 48,
	R_PasswordRequiredToKickSession          = 49,
	R_AlreadyLoggedInElsewhere               = 50,
	R_Suspended                              = 51,
	R_Cancelled                              = 52,
	R_DataCorruption                         = 53,
	R_DiskFull                               = 54,
	R_RemoteCallFailed                       = 55,
	R_PasswordUnset                          = 56,
	R_ExternalAccountUnlinked                = 57,
	R_PSNTicketInvalid                       = 58,
	R_ExternalAccountAlreadyLinked           = 59,
	R_RemoteFileConflict                     = 60,
	R_IllegalPassword                        = 61,
	R_SameAsPreviousValue                    = 62,
	R_AccountLogonDenied                     = 63,
	R_CannotUseOldPassword                   = 64,
	R_InvalidLoginAuthCode                   = 65,
	R_AccountLogonDeniedNoMail               = 66,
	R_HardwareNotCapableOfIPT                = 67,
	R_IPTInitError                           = 68,
	R_ParentalControlRestricted              = 69,
	R_FacebookQueryError                     = 70,
	R_ExpiredLoginAuthCode                   = 71,
	R_IPLoginRestrictionFailed               = 72,
	R_AccountLockedDown                      = 73,
	R_AccountLogonDeniedVerifiedEmailRequired = 74,
	R_NoMatchingURL                          = 75,
	R_BadResponse                            = 76,
	R_RequirePasswordReEntry                 = 77,
	R_ValueOutOfRange                        = 78,
	R_UnexpectedError                        = 79,
	R_Disabled                               = 80,
	R_InvalidCEGSubmission                   = 81,
	R_RestrictedDevice                       = 82,
	R_RegionLocked                           = 83,
	R_RateLimitExceeded                      = 84,
	R_AccountLoginDeniedNeedTwoFactor        = 85,
	R_ItemDeleted                            = 86,
	R_AccountLoginDeniedThrottle             = 87,
	R_TwoFactorCodeMismatch                  = 88,
	R_TwoFactorActivationCodeMismatch        = 89,
	R_AccountAssociatedToMultiplePartners    = 90,
	R_NotModified                            = 91,
	R_NoMobileDevice                         = 92,
	R_TimeNotSynced                          = 93,
	R_SmsCodeFailed                          = 94,
	R_AccountLimitExceeded                   = 95,
	R_AccountActivityLimitExceeded           = 96,
	R_PhoneActivityLimitExceeded             = 97,
	R_RefundToWallet                         = 98,
	R_EmailSendFailure                       = 99,
	R_NotSettled                             = 100,
	R_NeedCaptcha                            = 101,
	R_GSLTDenied                             = 102,
	R_GSOwnerDenied                          = 103,
	R_InvalidItemType                        = 104,
	R_IPBanned                               = 105,
	R_GSLTExpired                            = 106,
	R_InsufficientFunds                      = 107,
	R_TooManyPending                         = 108,
	R_MAX                                    = 109,
};

// Enum SteamGeneral.EPersonaStateBP
// NumValues: 0x0008
enum class EPersonaStateBP : uint8
{
	PS_Offline                               = 0,
	PS_Online                                = 1,
	PS_Busy                                  = 2,
	PS_Away                                  = 3,
	PS_Snooze                                = 4,
	PS_LookingToTrade                        = 5,
	PS_LookingToPlay                         = 6,
	PS_Max                                   = 7,
};

// ScriptStruct SteamGeneral.UInt64
// 0x0008 (0x0008 - 0x0000)
struct FUInt64 final
{
public:
	uint64                                        Value;                                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUInt64) == 0x000008, "Wrong alignment on FUInt64");
static_assert(sizeof(FUInt64) == 0x000008, "Wrong size on FUInt64");
static_assert(offsetof(FUInt64, Value) == 0x000000, "Member 'FUInt64::Value' has a wrong offset!");

// ScriptStruct SteamGeneral.SteamUGCItemId
// 0x0008 (0x0008 - 0x0000)
struct FSteamUGCItemId final
{
public:
	struct FUInt64                                ID;                                                // 0x0000(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSteamUGCItemId) == 0x000008, "Wrong alignment on FSteamUGCItemId");
static_assert(sizeof(FSteamUGCItemId) == 0x000008, "Wrong size on FSteamUGCItemId");
static_assert(offsetof(FSteamUGCItemId, ID) == 0x000000, "Member 'FSteamUGCItemId::ID' has a wrong offset!");

// ScriptStruct SteamGeneral.SteamUGCHandle
// 0x0008 (0x0008 - 0x0000)
struct FSteamUGCHandle final
{
public:
	struct FUInt64                                Handle;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSteamUGCHandle) == 0x000008, "Wrong alignment on FSteamUGCHandle");
static_assert(sizeof(FSteamUGCHandle) == 0x000008, "Wrong size on FSteamUGCHandle");
static_assert(offsetof(FSteamUGCHandle, Handle) == 0x000000, "Member 'FSteamUGCHandle::Handle' has a wrong offset!");

// ScriptStruct SteamGeneral.UInt32
// 0x0004 (0x0004 - 0x0000)
struct FUInt32 final
{
public:
	uint32                                        Value;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUInt32) == 0x000004, "Wrong alignment on FUInt32");
static_assert(sizeof(FUInt32) == 0x000004, "Wrong size on FUInt32");
static_assert(offsetof(FUInt32, Value) == 0x000000, "Member 'FUInt32::Value' has a wrong offset!");

// ScriptStruct SteamGeneral.SteamUGCUpdateHandle
// 0x0008 (0x0008 - 0x0000)
struct FSteamUGCUpdateHandle final
{
public:
	struct FUInt64                                Handle;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSteamUGCUpdateHandle) == 0x000008, "Wrong alignment on FSteamUGCUpdateHandle");
static_assert(sizeof(FSteamUGCUpdateHandle) == 0x000008, "Wrong size on FSteamUGCUpdateHandle");
static_assert(offsetof(FSteamUGCUpdateHandle, Handle) == 0x000000, "Member 'FSteamUGCUpdateHandle::Handle' has a wrong offset!");

// ScriptStruct SteamGeneral.SteamUGCQueryHandle
// 0x0008 (0x0008 - 0x0000)
struct FSteamUGCQueryHandle final
{
public:
	struct FUInt64                                Handle;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSteamUGCQueryHandle) == 0x000008, "Wrong alignment on FSteamUGCQueryHandle");
static_assert(sizeof(FSteamUGCQueryHandle) == 0x000008, "Wrong size on FSteamUGCQueryHandle");
static_assert(offsetof(FSteamUGCQueryHandle, Handle) == 0x000000, "Member 'FSteamUGCQueryHandle::Handle' has a wrong offset!");

// ScriptStruct SteamGeneral.SteamAppId
// 0x0004 (0x0004 - 0x0000)
struct FSteamAppId final
{
public:
	struct FUInt32                                ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, EditConst, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSteamAppId) == 0x000004, "Wrong alignment on FSteamAppId");
static_assert(sizeof(FSteamAppId) == 0x000004, "Wrong size on FSteamAppId");
static_assert(offsetof(FSteamAppId, ID) == 0x000000, "Member 'FSteamAppId::ID' has a wrong offset!");

// ScriptStruct SteamGeneral.SteamKeyValuePair
// 0x0020 (0x0020 - 0x0000)
struct FSteamKeyValuePair final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSteamKeyValuePair) == 0x000008, "Wrong alignment on FSteamKeyValuePair");
static_assert(sizeof(FSteamKeyValuePair) == 0x000020, "Wrong size on FSteamKeyValuePair");
static_assert(offsetof(FSteamKeyValuePair, Key) == 0x000000, "Member 'FSteamKeyValuePair::Key' has a wrong offset!");
static_assert(offsetof(FSteamKeyValuePair, Value) == 0x000010, "Member 'FSteamKeyValuePair::Value' has a wrong offset!");

// ScriptStruct SteamGeneral.SteamDepotId
// 0x0004 (0x0004 - 0x0000)
struct FSteamDepotId final
{
public:
	struct FUInt32                                ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, EditConst, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSteamDepotId) == 0x000004, "Wrong alignment on FSteamDepotId");
static_assert(sizeof(FSteamDepotId) == 0x000004, "Wrong size on FSteamDepotId");
static_assert(offsetof(FSteamDepotId, ID) == 0x000000, "Member 'FSteamDepotId::ID' has a wrong offset!");

}

