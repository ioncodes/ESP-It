#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MasterServerPlugin

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "OnlineSubsystemUtils_structs.hpp"
#include "Engine_classes.hpp"
#include "MasterServerPlugin_structs.hpp"


namespace SDK
{

// Class MasterServerPlugin.BaseUserBehaviorTrackingManager
// 0x0010 (0x0038 - 0x0028)
class UBaseUserBehaviorTrackingManager : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          CallBlueprintTickFunction;                         // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BPTick(float DeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BaseUserBehaviorTrackingManager">();
	}
	static class UBaseUserBehaviorTrackingManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBaseUserBehaviorTrackingManager>();
	}
};
static_assert(alignof(UBaseUserBehaviorTrackingManager) == 0x000008, "Wrong alignment on UBaseUserBehaviorTrackingManager");
static_assert(sizeof(UBaseUserBehaviorTrackingManager) == 0x000038, "Wrong size on UBaseUserBehaviorTrackingManager");
static_assert(offsetof(UBaseUserBehaviorTrackingManager, CallBlueprintTickFunction) == 0x000030, "Member 'UBaseUserBehaviorTrackingManager::CallBlueprintTickFunction' has a wrong offset!");

// Class MasterServerPlugin.ByteDataWriter
// 0x0010 (0x0038 - 0x0028)
class UByteDataWriter final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ByteDataWriter">();
	}
	static class UByteDataWriter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UByteDataWriter>();
	}
};
static_assert(alignof(UByteDataWriter) == 0x000008, "Wrong alignment on UByteDataWriter");
static_assert(sizeof(UByteDataWriter) == 0x000038, "Wrong size on UByteDataWriter");

// Class MasterServerPlugin.GetAllWorkshopMapDetailsProxy
// 0x0028 (0x0058 - 0x0030)
class UGetAllWorkshopMapDetailsProxy final : public UOnlineBlueprintCallProxyBase
{
public:
	FMulticastInlineDelegateProperty_             OnSuccess;                                         // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnFailure;                                         // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x8];                                       // 0x0050(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UGetAllWorkshopMapDetailsProxy* GetAllWorkshopMapDetails(class UObject* WorldContextObject);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GetAllWorkshopMapDetailsProxy">();
	}
	static class UGetAllWorkshopMapDetailsProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGetAllWorkshopMapDetailsProxy>();
	}
};
static_assert(alignof(UGetAllWorkshopMapDetailsProxy) == 0x000008, "Wrong alignment on UGetAllWorkshopMapDetailsProxy");
static_assert(sizeof(UGetAllWorkshopMapDetailsProxy) == 0x000058, "Wrong size on UGetAllWorkshopMapDetailsProxy");
static_assert(offsetof(UGetAllWorkshopMapDetailsProxy, OnSuccess) == 0x000030, "Member 'UGetAllWorkshopMapDetailsProxy::OnSuccess' has a wrong offset!");
static_assert(offsetof(UGetAllWorkshopMapDetailsProxy, OnFailure) == 0x000040, "Member 'UGetAllWorkshopMapDetailsProxy::OnFailure' has a wrong offset!");

// Class MasterServerPlugin.DownloadWorkshopMapProxy
// 0x0030 (0x0060 - 0x0030)
class UDownloadWorkshopMapProxy final : public UOnlineBlueprintCallProxyBase
{
public:
	FMulticastInlineDelegateProperty_             OnSuccess;                                         // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnFailure;                                         // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x10];                                      // 0x0050(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UDownloadWorkshopMapProxy* DownloadWorkshopMap(class UObject* WorldContextObject, int64 WorkshopID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DownloadWorkshopMapProxy">();
	}
	static class UDownloadWorkshopMapProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDownloadWorkshopMapProxy>();
	}
};
static_assert(alignof(UDownloadWorkshopMapProxy) == 0x000008, "Wrong alignment on UDownloadWorkshopMapProxy");
static_assert(sizeof(UDownloadWorkshopMapProxy) == 0x000060, "Wrong size on UDownloadWorkshopMapProxy");
static_assert(offsetof(UDownloadWorkshopMapProxy, OnSuccess) == 0x000030, "Member 'UDownloadWorkshopMapProxy::OnSuccess' has a wrong offset!");
static_assert(offsetof(UDownloadWorkshopMapProxy, OnFailure) == 0x000040, "Member 'UDownloadWorkshopMapProxy::OnFailure' has a wrong offset!");

// Class MasterServerPlugin.DeleteWorkshopMapProxy
// 0x0030 (0x0060 - 0x0030)
class UDeleteWorkshopMapProxy final : public UOnlineBlueprintCallProxyBase
{
public:
	FMulticastInlineDelegateProperty_             OnSuccess;                                         // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnFailure;                                         // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x10];                                      // 0x0050(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UDeleteWorkshopMapProxy* DeleteWorkshopMap(class UObject* WorldContextObject, int64 WorkshopID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DeleteWorkshopMapProxy">();
	}
	static class UDeleteWorkshopMapProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDeleteWorkshopMapProxy>();
	}
};
static_assert(alignof(UDeleteWorkshopMapProxy) == 0x000008, "Wrong alignment on UDeleteWorkshopMapProxy");
static_assert(sizeof(UDeleteWorkshopMapProxy) == 0x000060, "Wrong size on UDeleteWorkshopMapProxy");
static_assert(offsetof(UDeleteWorkshopMapProxy, OnSuccess) == 0x000030, "Member 'UDeleteWorkshopMapProxy::OnSuccess' has a wrong offset!");
static_assert(offsetof(UDeleteWorkshopMapProxy, OnFailure) == 0x000040, "Member 'UDeleteWorkshopMapProxy::OnFailure' has a wrong offset!");

// Class MasterServerPlugin.UploadWorkshopMapProxy
// 0x00E0 (0x0110 - 0x0030)
class UUploadWorkshopMapProxy final : public UOnlineBlueprintCallProxyBase
{
public:
	FMulticastInlineDelegateProperty_             OnSuccess;                                         // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnFailure;                                         // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0xC0];                                      // 0x0050(0x00C0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UUploadWorkshopMapProxy* UpdateWorkshopMap(class UObject* WorldContextObject, const struct FCreativeWorkshopMapLayout& MapLayout);
	static class UUploadWorkshopMapProxy* UploadNewWorkshopMap(class UObject* WorldContextObject, const struct FCreativeWorkshopMapLayout& MapLayout);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UploadWorkshopMapProxy">();
	}
	static class UUploadWorkshopMapProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUploadWorkshopMapProxy>();
	}
};
static_assert(alignof(UUploadWorkshopMapProxy) == 0x000008, "Wrong alignment on UUploadWorkshopMapProxy");
static_assert(sizeof(UUploadWorkshopMapProxy) == 0x000110, "Wrong size on UUploadWorkshopMapProxy");
static_assert(offsetof(UUploadWorkshopMapProxy, OnSuccess) == 0x000030, "Member 'UUploadWorkshopMapProxy::OnSuccess' has a wrong offset!");
static_assert(offsetof(UUploadWorkshopMapProxy, OnFailure) == 0x000040, "Member 'UUploadWorkshopMapProxy::OnFailure' has a wrong offset!");

// Class MasterServerPlugin.SubmitMapRatingProxy
// 0x0030 (0x0060 - 0x0030)
class USubmitMapRatingProxy final : public UOnlineBlueprintCallProxyBase
{
public:
	FMulticastInlineDelegateProperty_             OnSuccess;                                         // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnFailure;                                         // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x10];                                      // 0x0050(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USubmitMapRatingProxy* SubmitMapRating(class UObject* WorldContextObject, int64 WorkshopID, int32 Rating);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SubmitMapRatingProxy">();
	}
	static class USubmitMapRatingProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubmitMapRatingProxy>();
	}
};
static_assert(alignof(USubmitMapRatingProxy) == 0x000008, "Wrong alignment on USubmitMapRatingProxy");
static_assert(sizeof(USubmitMapRatingProxy) == 0x000060, "Wrong size on USubmitMapRatingProxy");
static_assert(offsetof(USubmitMapRatingProxy, OnSuccess) == 0x000030, "Member 'USubmitMapRatingProxy::OnSuccess' has a wrong offset!");
static_assert(offsetof(USubmitMapRatingProxy, OnFailure) == 0x000040, "Member 'USubmitMapRatingProxy::OnFailure' has a wrong offset!");

// Class MasterServerPlugin.GrantItemsCallbackProxy
// 0x0048 (0x0078 - 0x0030)
class UGrantItemsCallbackProxy final : public UOnlineBlueprintCallProxyBase
{
public:
	FMulticastInlineDelegateProperty_             OnSuccess;                                         // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnFailure;                                         // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x8];                                       // 0x0050(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           PlayerState;                                       // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<int32>                                 ItemDefIds;                                        // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class UObject*                                WorldContextObject;                                // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UGrantItemsCallbackProxy* GrantItems(class UObject* WorldContextObject_0, int32 AccountId, const TArray<int32>& ItemDefIds_0, bool bNotify, bool bIsDrop, bool bIsExtraItem, class APlayerState* PlayerState_0);

	void GrantItemsResponse(class UVaRestRequestJSON* Request);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GrantItemsCallbackProxy">();
	}
	static class UGrantItemsCallbackProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGrantItemsCallbackProxy>();
	}
};
static_assert(alignof(UGrantItemsCallbackProxy) == 0x000008, "Wrong alignment on UGrantItemsCallbackProxy");
static_assert(sizeof(UGrantItemsCallbackProxy) == 0x000078, "Wrong size on UGrantItemsCallbackProxy");
static_assert(offsetof(UGrantItemsCallbackProxy, OnSuccess) == 0x000030, "Member 'UGrantItemsCallbackProxy::OnSuccess' has a wrong offset!");
static_assert(offsetof(UGrantItemsCallbackProxy, OnFailure) == 0x000040, "Member 'UGrantItemsCallbackProxy::OnFailure' has a wrong offset!");
static_assert(offsetof(UGrantItemsCallbackProxy, PlayerState) == 0x000058, "Member 'UGrantItemsCallbackProxy::PlayerState' has a wrong offset!");
static_assert(offsetof(UGrantItemsCallbackProxy, ItemDefIds) == 0x000060, "Member 'UGrantItemsCallbackProxy::ItemDefIds' has a wrong offset!");
static_assert(offsetof(UGrantItemsCallbackProxy, WorldContextObject) == 0x000070, "Member 'UGrantItemsCallbackProxy::WorldContextObject' has a wrong offset!");

// Class MasterServerPlugin.InstanceManagerConnSubsystem
// 0x0060 (0x0090 - 0x0030)
class UInstanceManagerConnSubsystem final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ConnectionTimeout;                                 // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OwnDedicatedServerId;                              // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnReceiveTeardownPacket;                           // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x40];                                      // 0x0050(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool Connect(int32 InA, int32 InB, int32 InC, int32 InD, int32 Port);
	bool ConnectHost(const class FString& HostName, int32 Port);
	void Disconnect(bool AutomaticReconnectWhenKeepAlive);
	bool SendEmptyPacket(EInstanceMgrPacketType PacketType);
	bool SendPacket(EInstanceMgrPacketType PacketType, TArray<uint8>* Payload);

	bool IsConnected() const;
	bool IsTearingDown() const;
	bool SendData(TArray<uint8>* Data) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InstanceManagerConnSubsystem">();
	}
	static class UInstanceManagerConnSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInstanceManagerConnSubsystem>();
	}
};
static_assert(alignof(UInstanceManagerConnSubsystem) == 0x000008, "Wrong alignment on UInstanceManagerConnSubsystem");
static_assert(sizeof(UInstanceManagerConnSubsystem) == 0x000090, "Wrong size on UInstanceManagerConnSubsystem");
static_assert(offsetof(UInstanceManagerConnSubsystem, ConnectionTimeout) == 0x000038, "Member 'UInstanceManagerConnSubsystem::ConnectionTimeout' has a wrong offset!");
static_assert(offsetof(UInstanceManagerConnSubsystem, OwnDedicatedServerId) == 0x00003C, "Member 'UInstanceManagerConnSubsystem::OwnDedicatedServerId' has a wrong offset!");
static_assert(offsetof(UInstanceManagerConnSubsystem, OnReceiveTeardownPacket) == 0x000040, "Member 'UInstanceManagerConnSubsystem::OnReceiveTeardownPacket' has a wrong offset!");

// Class MasterServerPlugin.ItemDatabaseCache
// 0x0038 (0x0060 - 0x0028)
class UItemDatabaseCache final : public USaveGame
{
public:
	struct FDateTime                              LastTimestamp;                                     // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ComputedHash;                                      // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CompressionType;                                   // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Blob;                                              // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         UncompressedLength;                                // 0x0058(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ItemDatabaseCache">();
	}
	static class UItemDatabaseCache* GetDefaultObj()
	{
		return GetDefaultObjImpl<UItemDatabaseCache>();
	}
};
static_assert(alignof(UItemDatabaseCache) == 0x000008, "Wrong alignment on UItemDatabaseCache");
static_assert(sizeof(UItemDatabaseCache) == 0x000060, "Wrong size on UItemDatabaseCache");
static_assert(offsetof(UItemDatabaseCache, LastTimestamp) == 0x000028, "Member 'UItemDatabaseCache::LastTimestamp' has a wrong offset!");
static_assert(offsetof(UItemDatabaseCache, ComputedHash) == 0x000030, "Member 'UItemDatabaseCache::ComputedHash' has a wrong offset!");
static_assert(offsetof(UItemDatabaseCache, CompressionType) == 0x000040, "Member 'UItemDatabaseCache::CompressionType' has a wrong offset!");
static_assert(offsetof(UItemDatabaseCache, Blob) == 0x000048, "Member 'UItemDatabaseCache::Blob' has a wrong offset!");
static_assert(offsetof(UItemDatabaseCache, UncompressedLength) == 0x000058, "Member 'UItemDatabaseCache::UncompressedLength' has a wrong offset!");

// Class MasterServerPlugin.InventorySubsystem
// 0x00E0 (0x0110 - 0x0030)
class UInventorySubsystem final : public UEngineSubsystem
{
public:
	class FString                                 ServerHostname;                                    // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerPort;                                        // 0x0040(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AccessToken;                                       // 0x0048(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AccountId;                                         // 0x0058(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnInventoryDefinitionsLoaded;                      // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_70[0x30];                                      // 0x0070(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FDatabaseItem>             ItemDatabase;                                      // 0x00A0(0x0050)(NativeAccessSpecifierPrivate)
	TArray<struct FAddedItem>                     AddedItems;                                        // 0x00F0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_100[0x10];                                     // 0x0100(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddAddedItem(EItemChangeReason Reason, const struct FBlueprintOnlineItem& Item, const class FString& Payload);
	class FString GetItemProperty(int32 DefinitionId, class FName PropertyName);
	void GrantItems(int32 TargetAccountId, const TArray<int32>& ItemDefIds, const TArray<int32>& StackSizes, bool bIsCauldronDrop);
	bool LoadItemDefinitions();
	void LoadItemDefinitionsResponse(class UVaRestRequestJSON* Request);
	void PopAddedItemsByReason(EItemChangeReason Reason, TArray<struct FBlueprintOnlineItem>* ItemsResult);
	void PopAddedItemsByReasons(const TArray<EItemChangeReason>& Reasons, TArray<struct FBlueprintOnlineItem>* ItemsResult);
	void PopAllAddedItems(TArray<struct FBlueprintOnlineItem>* ItemsResult);
	void RequestInventory();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InventorySubsystem">();
	}
	static class UInventorySubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInventorySubsystem>();
	}
};
static_assert(alignof(UInventorySubsystem) == 0x000008, "Wrong alignment on UInventorySubsystem");
static_assert(sizeof(UInventorySubsystem) == 0x000110, "Wrong size on UInventorySubsystem");
static_assert(offsetof(UInventorySubsystem, ServerHostname) == 0x000030, "Member 'UInventorySubsystem::ServerHostname' has a wrong offset!");
static_assert(offsetof(UInventorySubsystem, ServerPort) == 0x000040, "Member 'UInventorySubsystem::ServerPort' has a wrong offset!");
static_assert(offsetof(UInventorySubsystem, AccessToken) == 0x000048, "Member 'UInventorySubsystem::AccessToken' has a wrong offset!");
static_assert(offsetof(UInventorySubsystem, AccountId) == 0x000058, "Member 'UInventorySubsystem::AccountId' has a wrong offset!");
static_assert(offsetof(UInventorySubsystem, OnInventoryDefinitionsLoaded) == 0x000060, "Member 'UInventorySubsystem::OnInventoryDefinitionsLoaded' has a wrong offset!");
static_assert(offsetof(UInventorySubsystem, ItemDatabase) == 0x0000A0, "Member 'UInventorySubsystem::ItemDatabase' has a wrong offset!");
static_assert(offsetof(UInventorySubsystem, AddedItems) == 0x0000F0, "Member 'UInventorySubsystem::AddedItems' has a wrong offset!");

// Class MasterServerPlugin.MasterServerPluginGameModeBase
// 0x0000 (0x0328 - 0x0328)
class AMasterServerPluginGameModeBase final : public AGameModeBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MasterServerPluginGameModeBase">();
	}
	static class AMasterServerPluginGameModeBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMasterServerPluginGameModeBase>();
	}
};
static_assert(alignof(AMasterServerPluginGameModeBase) == 0x000008, "Wrong alignment on AMasterServerPluginGameModeBase");
static_assert(sizeof(AMasterServerPluginGameModeBase) == 0x000328, "Wrong size on AMasterServerPluginGameModeBase");

// Class MasterServerPlugin.MasterServerSubsystem
// 0x0018 (0x0048 - 0x0030)
class UMasterServerSubsystem final : public UEngineSubsystem
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UNewMasterServerManager*                NewMasterServerManager;                            // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SetNewMasterServerManager(class UNewMasterServerManager* SetNewMasterServerManager_0);

	class UNewMasterServerManager* GetNewMasterServerManager() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MasterServerSubsystem">();
	}
	static class UMasterServerSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMasterServerSubsystem>();
	}
};
static_assert(alignof(UMasterServerSubsystem) == 0x000008, "Wrong alignment on UMasterServerSubsystem");
static_assert(sizeof(UMasterServerSubsystem) == 0x000048, "Wrong size on UMasterServerSubsystem");
static_assert(offsetof(UMasterServerSubsystem, NewMasterServerManager) == 0x000040, "Member 'UMasterServerSubsystem::NewMasterServerManager' has a wrong offset!");

// Class MasterServerPlugin.NewMasterServerManager
// 0x0280 (0x02A8 - 0x0028)
class UNewMasterServerManager : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          IsActive;                                          // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoReconnect;                                     // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnNotifyQuestChange;                               // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnNotifyStatChange;                                // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnNotifyItemChange;                                // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnNotifyTrade;                                     // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnReceiveRuntimeAccountInfo;                       // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnLogHelper;                                       // 0x0088(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	ERuntimeAccountFlags                          RuntimeFlags;                                      // 0x0098(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnReceivedShowLocalMessageCommand;                 // 0x00A0(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnReceivedShowSystemMessageCommand;                // 0x00B0(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnReceivedDisconnectFromGameCommand;               // 0x00C0(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnReceivedGenericCommand;                          // 0x00D0(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnReceivedKickPlayerCommand;                       // 0x00E0(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnReceivedShowAccountAction;                       // 0x00F0(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnReceiveTeardownPacketDedicatedServer;            // 0x0100(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_110[0x60];                                     // 0x0110(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnReceivedAccountPresenceUpdate;                   // 0x0170(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnReceivedAccountSettings;                         // 0x0180(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnReceivedAccountMessages;                         // 0x0190(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A0[0x38];                                     // 0x01A0(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	class UServerBrowser*                         _serverBrowser;                                    // 0x01D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class FString, struct FAccountPresenceEntry> AccountPresenceMap;                                // 0x01E0(0x0050)(NativeAccessSpecifierPrivate)
	class FString                                 _serverUrl;                                        // 0x0230(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _remainingReconnectTimeout;                        // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_244[0x64];                                     // 0x0244(0x0064)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BPTick(float DeltaTime);
	bool Connect(const class FString& Ip, int32 Port, const class FString& Resource);
	void DeclarePresence(const class FString& PresenceString);
	void Disconnect();
	void FetchAccountMessages();
	struct FAccountPresenceEntry GetPresenceForUser(class UOnlineUserRef* User, bool* bIsValid);
	bool IsConnected();
	bool IsRestApiAccessTokenValid(double MaxExpiryDeltaSeconds);
	void OnConnected(bool Success, const class FString& ErrorMessage);
	void OnDisconnected(int32 StatusCode, const class FString& Reason, bool bWasClean);
	void OnLoginResponse(bool Success, int32 AccountId);
	void RequestAccountMessages(class UVaRestRequestJSON* Request);
	void RequestAccountSettings(const TArray<class FString>& SettingNames);
	void RequestPresenceForAccounts(const TArray<class UOnlineUserRef*>& Users);
	void SendLoadingCompleted();
	void SendLoginPacket(const class FString& AccessToken);
	void SendRequestAccountInfo();
	void SendRequestGameRewardsCheck();
	void SetAccountMessageState(int64 UniqueID, EAccountMessageState NewState);
	void SetAccountSettings(const TArray<struct FAccountSetting>& Settings);
	void SetupRestApiData(const class FString& ServerHostname, int32 ServerPort, int32 AccountId);
	void UpdateRestApiAccessToken(const class FString& AccessToken, const struct FDateTime& AccessTokenExpiryTime);

	class UServerBrowser* GetServerBrowser() const;
	bool HasRuntimeAccountFlag(ERuntimeAccountFlags Flag) const;
	bool IsTearingDown() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NewMasterServerManager">();
	}
	static class UNewMasterServerManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNewMasterServerManager>();
	}
};
static_assert(alignof(UNewMasterServerManager) == 0x000008, "Wrong alignment on UNewMasterServerManager");
static_assert(sizeof(UNewMasterServerManager) == 0x0002A8, "Wrong size on UNewMasterServerManager");
static_assert(offsetof(UNewMasterServerManager, IsActive) == 0x000030, "Member 'UNewMasterServerManager::IsActive' has a wrong offset!");
static_assert(offsetof(UNewMasterServerManager, AutoReconnect) == 0x000031, "Member 'UNewMasterServerManager::AutoReconnect' has a wrong offset!");
static_assert(offsetof(UNewMasterServerManager, OnNotifyQuestChange) == 0x000038, "Member 'UNewMasterServerManager::OnNotifyQuestChange' has a wrong offset!");
static_assert(offsetof(UNewMasterServerManager, OnNotifyStatChange) == 0x000048, "Member 'UNewMasterServerManager::OnNotifyStatChange' has a wrong offset!");
static_assert(offsetof(UNewMasterServerManager, OnNotifyItemChange) == 0x000058, "Member 'UNewMasterServerManager::OnNotifyItemChange' has a wrong offset!");
static_assert(offsetof(UNewMasterServerManager, OnNotifyTrade) == 0x000068, "Member 'UNewMasterServerManager::OnNotifyTrade' has a wrong offset!");
static_assert(offsetof(UNewMasterServerManager, OnReceiveRuntimeAccountInfo) == 0x000078, "Member 'UNewMasterServerManager::OnReceiveRuntimeAccountInfo' has a wrong offset!");
static_assert(offsetof(UNewMasterServerManager, OnLogHelper) == 0x000088, "Member 'UNewMasterServerManager::OnLogHelper' has a wrong offset!");
static_assert(offsetof(UNewMasterServerManager, RuntimeFlags) == 0x000098, "Member 'UNewMasterServerManager::RuntimeFlags' has a wrong offset!");
static_assert(offsetof(UNewMasterServerManager, OnReceivedShowLocalMessageCommand) == 0x0000A0, "Member 'UNewMasterServerManager::OnReceivedShowLocalMessageCommand' has a wrong offset!");
static_assert(offsetof(UNewMasterServerManager, OnReceivedShowSystemMessageCommand) == 0x0000B0, "Member 'UNewMasterServerManager::OnReceivedShowSystemMessageCommand' has a wrong offset!");
static_assert(offsetof(UNewMasterServerManager, OnReceivedDisconnectFromGameCommand) == 0x0000C0, "Member 'UNewMasterServerManager::OnReceivedDisconnectFromGameCommand' has a wrong offset!");
static_assert(offsetof(UNewMasterServerManager, OnReceivedGenericCommand) == 0x0000D0, "Member 'UNewMasterServerManager::OnReceivedGenericCommand' has a wrong offset!");
static_assert(offsetof(UNewMasterServerManager, OnReceivedKickPlayerCommand) == 0x0000E0, "Member 'UNewMasterServerManager::OnReceivedKickPlayerCommand' has a wrong offset!");
static_assert(offsetof(UNewMasterServerManager, OnReceivedShowAccountAction) == 0x0000F0, "Member 'UNewMasterServerManager::OnReceivedShowAccountAction' has a wrong offset!");
static_assert(offsetof(UNewMasterServerManager, OnReceiveTeardownPacketDedicatedServer) == 0x000100, "Member 'UNewMasterServerManager::OnReceiveTeardownPacketDedicatedServer' has a wrong offset!");
static_assert(offsetof(UNewMasterServerManager, OnReceivedAccountPresenceUpdate) == 0x000170, "Member 'UNewMasterServerManager::OnReceivedAccountPresenceUpdate' has a wrong offset!");
static_assert(offsetof(UNewMasterServerManager, OnReceivedAccountSettings) == 0x000180, "Member 'UNewMasterServerManager::OnReceivedAccountSettings' has a wrong offset!");
static_assert(offsetof(UNewMasterServerManager, OnReceivedAccountMessages) == 0x000190, "Member 'UNewMasterServerManager::OnReceivedAccountMessages' has a wrong offset!");
static_assert(offsetof(UNewMasterServerManager, _serverBrowser) == 0x0001D8, "Member 'UNewMasterServerManager::_serverBrowser' has a wrong offset!");
static_assert(offsetof(UNewMasterServerManager, AccountPresenceMap) == 0x0001E0, "Member 'UNewMasterServerManager::AccountPresenceMap' has a wrong offset!");
static_assert(offsetof(UNewMasterServerManager, _serverUrl) == 0x000230, "Member 'UNewMasterServerManager::_serverUrl' has a wrong offset!");
static_assert(offsetof(UNewMasterServerManager, _remainingReconnectTimeout) == 0x000240, "Member 'UNewMasterServerManager::_remainingReconnectTimeout' has a wrong offset!");

// Class MasterServerPlugin.ServerBrowser
// 0x00F0 (0x0118 - 0x0028)
class UServerBrowser final : public UObject
{
public:
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, float>                    PingResults;                                       // 0x0040(0x0050)(NativeAccessSpecifierPrivate)
	TArray<struct FBlueprintSessionResult>        _serverListCache;                                  // 0x0090(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class UNewMasterServerManager*                _masterServerManager;                              // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_             OnGameServerRegistered;                            // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnGameServerUnregistered;                          // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnGameServerSessionStarted;                        // 0x00C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnGameServerSessionStopped;                        // 0x00D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnGameServerPingResult;                            // 0x00E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnLogHelper;                                       // 0x00F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnGameServerListUpdated;                           // 0x0108(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void ClearCachedPings();
	void PingAddress(const class FString& Address, const class FString& ServerID);
	void PingServer(const struct FBlueprintSessionResult& BlueprintSessionResult);
	void RegisterGameServer(const struct FGameServerInfo& GameServerInfo);
	void RequestServerList();
	void SendServerBrowserInfo(const struct FGameServerInfo& GameServerInfo);
	void StartGameServerSession();
	void StopGameServerSession();
	void UnregisterGameServer();

	TArray<struct FBlueprintSessionResult> GetServerList() const;
	void HandleRefreshRequiredRequest() const;
	bool HasActiveGameSession() const;
	void SendGameServerKeepAlive() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ServerBrowser">();
	}
	static class UServerBrowser* GetDefaultObj()
	{
		return GetDefaultObjImpl<UServerBrowser>();
	}
};
static_assert(alignof(UServerBrowser) == 0x000008, "Wrong alignment on UServerBrowser");
static_assert(sizeof(UServerBrowser) == 0x000118, "Wrong size on UServerBrowser");
static_assert(offsetof(UServerBrowser, PingResults) == 0x000040, "Member 'UServerBrowser::PingResults' has a wrong offset!");
static_assert(offsetof(UServerBrowser, _serverListCache) == 0x000090, "Member 'UServerBrowser::_serverListCache' has a wrong offset!");
static_assert(offsetof(UServerBrowser, _masterServerManager) == 0x0000A0, "Member 'UServerBrowser::_masterServerManager' has a wrong offset!");
static_assert(offsetof(UServerBrowser, OnGameServerRegistered) == 0x0000A8, "Member 'UServerBrowser::OnGameServerRegistered' has a wrong offset!");
static_assert(offsetof(UServerBrowser, OnGameServerUnregistered) == 0x0000B8, "Member 'UServerBrowser::OnGameServerUnregistered' has a wrong offset!");
static_assert(offsetof(UServerBrowser, OnGameServerSessionStarted) == 0x0000C8, "Member 'UServerBrowser::OnGameServerSessionStarted' has a wrong offset!");
static_assert(offsetof(UServerBrowser, OnGameServerSessionStopped) == 0x0000D8, "Member 'UServerBrowser::OnGameServerSessionStopped' has a wrong offset!");
static_assert(offsetof(UServerBrowser, OnGameServerPingResult) == 0x0000E8, "Member 'UServerBrowser::OnGameServerPingResult' has a wrong offset!");
static_assert(offsetof(UServerBrowser, OnLogHelper) == 0x0000F8, "Member 'UServerBrowser::OnLogHelper' has a wrong offset!");
static_assert(offsetof(UServerBrowser, OnGameServerListUpdated) == 0x000108, "Member 'UServerBrowser::OnGameServerListUpdated' has a wrong offset!");

// Class MasterServerPlugin.RequestPlayerInventoryProxy
// 0x0068 (0x0098 - 0x0030)
class URequestPlayerInventoryProxy final : public UOnlineBlueprintCallProxyBase
{
public:
	FMulticastInlineDelegateProperty_             OnSuccess;                                         // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnFailure;                                         // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x48];                                      // 0x0050(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class URequestPlayerInventoryProxy* RequestPlayerInventory(class UObject* WorldContextObject, const struct FUniqueNetIdRepl& TargetPlayerId);

	void RequestPlayerInventoryResponse(class UVaRestRequestJSON* Request);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RequestPlayerInventoryProxy">();
	}
	static class URequestPlayerInventoryProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<URequestPlayerInventoryProxy>();
	}
};
static_assert(alignof(URequestPlayerInventoryProxy) == 0x000008, "Wrong alignment on URequestPlayerInventoryProxy");
static_assert(sizeof(URequestPlayerInventoryProxy) == 0x000098, "Wrong size on URequestPlayerInventoryProxy");
static_assert(offsetof(URequestPlayerInventoryProxy, OnSuccess) == 0x000030, "Member 'URequestPlayerInventoryProxy::OnSuccess' has a wrong offset!");
static_assert(offsetof(URequestPlayerInventoryProxy, OnFailure) == 0x000040, "Member 'URequestPlayerInventoryProxy::OnFailure' has a wrong offset!");

// Class MasterServerPlugin.SendTradeRequestProxy
// 0x0088 (0x00B8 - 0x0030)
class USendTradeRequestProxy final : public UOnlineBlueprintCallProxyBase
{
public:
	FMulticastInlineDelegateProperty_             OnSuccess;                                         // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnFailure;                                         // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x68];                                      // 0x0050(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USendTradeRequestProxy* SendTradeRequest(class UObject* WorldContextObject, const struct FUniqueNetIdRepl& TargetPlayerId, const TArray<struct FTradingItem>& SendingItems, const TArray<struct FTradingItem>& TargetItems);

	void SendTradeRequestResponse(class UVaRestRequestJSON* Request);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SendTradeRequestProxy">();
	}
	static class USendTradeRequestProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<USendTradeRequestProxy>();
	}
};
static_assert(alignof(USendTradeRequestProxy) == 0x000008, "Wrong alignment on USendTradeRequestProxy");
static_assert(sizeof(USendTradeRequestProxy) == 0x0000B8, "Wrong size on USendTradeRequestProxy");
static_assert(offsetof(USendTradeRequestProxy, OnSuccess) == 0x000030, "Member 'USendTradeRequestProxy::OnSuccess' has a wrong offset!");
static_assert(offsetof(USendTradeRequestProxy, OnFailure) == 0x000040, "Member 'USendTradeRequestProxy::OnFailure' has a wrong offset!");

// Class MasterServerPlugin.AcceptTradeRequestProxy
// 0x0040 (0x0070 - 0x0030)
class UAcceptTradeRequestProxy final : public UOnlineBlueprintCallProxyBase
{
public:
	FMulticastInlineDelegateProperty_             OnSuccess;                                         // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnFailure;                                         // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x20];                                      // 0x0050(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAcceptTradeRequestProxy* AcceptTradeRequest(class UObject* WorldContextObject, int64 TradeRequestId);

	void AcceptTradeRequestResponse(class UVaRestRequestJSON* Request);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AcceptTradeRequestProxy">();
	}
	static class UAcceptTradeRequestProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAcceptTradeRequestProxy>();
	}
};
static_assert(alignof(UAcceptTradeRequestProxy) == 0x000008, "Wrong alignment on UAcceptTradeRequestProxy");
static_assert(sizeof(UAcceptTradeRequestProxy) == 0x000070, "Wrong size on UAcceptTradeRequestProxy");
static_assert(offsetof(UAcceptTradeRequestProxy, OnSuccess) == 0x000030, "Member 'UAcceptTradeRequestProxy::OnSuccess' has a wrong offset!");
static_assert(offsetof(UAcceptTradeRequestProxy, OnFailure) == 0x000040, "Member 'UAcceptTradeRequestProxy::OnFailure' has a wrong offset!");

// Class MasterServerPlugin.RejectTradeRequestProxy
// 0x0040 (0x0070 - 0x0030)
class URejectTradeRequestProxy final : public UOnlineBlueprintCallProxyBase
{
public:
	FMulticastInlineDelegateProperty_             OnSuccess;                                         // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnFailure;                                         // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x20];                                      // 0x0050(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class URejectTradeRequestProxy* RejectTradeRequest(class UObject* WorldContextObject, int64 TradeRequestId);

	void RejectTradeRequestResponse(class UVaRestRequestJSON* Request);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RejectTradeRequestProxy">();
	}
	static class URejectTradeRequestProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<URejectTradeRequestProxy>();
	}
};
static_assert(alignof(URejectTradeRequestProxy) == 0x000008, "Wrong alignment on URejectTradeRequestProxy");
static_assert(sizeof(URejectTradeRequestProxy) == 0x000070, "Wrong size on URejectTradeRequestProxy");
static_assert(offsetof(URejectTradeRequestProxy, OnSuccess) == 0x000030, "Member 'URejectTradeRequestProxy::OnSuccess' has a wrong offset!");
static_assert(offsetof(URejectTradeRequestProxy, OnFailure) == 0x000040, "Member 'URejectTradeRequestProxy::OnFailure' has a wrong offset!");

// Class MasterServerPlugin.CancelTradeRequestProxy
// 0x0040 (0x0070 - 0x0030)
class UCancelTradeRequestProxy final : public UOnlineBlueprintCallProxyBase
{
public:
	FMulticastInlineDelegateProperty_             OnSuccess;                                         // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnFailure;                                         // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x20];                                      // 0x0050(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UCancelTradeRequestProxy* CancelTradeRequest(class UObject* WorldContextObject, int64 TradeRequestId);

	void CancelTradeRequestResponse(class UVaRestRequestJSON* Request);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CancelTradeRequestProxy">();
	}
	static class UCancelTradeRequestProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCancelTradeRequestProxy>();
	}
};
static_assert(alignof(UCancelTradeRequestProxy) == 0x000008, "Wrong alignment on UCancelTradeRequestProxy");
static_assert(sizeof(UCancelTradeRequestProxy) == 0x000070, "Wrong size on UCancelTradeRequestProxy");
static_assert(offsetof(UCancelTradeRequestProxy, OnSuccess) == 0x000030, "Member 'UCancelTradeRequestProxy::OnSuccess' has a wrong offset!");
static_assert(offsetof(UCancelTradeRequestProxy, OnFailure) == 0x000040, "Member 'UCancelTradeRequestProxy::OnFailure' has a wrong offset!");

// Class MasterServerPlugin.GetIncomingTradeRequestsProxy
// 0x0038 (0x0068 - 0x0030)
class UGetIncomingTradeRequestsProxy final : public UOnlineBlueprintCallProxyBase
{
public:
	FMulticastInlineDelegateProperty_             OnSuccess;                                         // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnFailure;                                         // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x18];                                      // 0x0050(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UGetIncomingTradeRequestsProxy* GetIncomingTradeRequests(class UObject* WorldContextObject);

	void GetIncomingTradeRequestsResponse(class UVaRestRequestJSON* Request);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GetIncomingTradeRequestsProxy">();
	}
	static class UGetIncomingTradeRequestsProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGetIncomingTradeRequestsProxy>();
	}
};
static_assert(alignof(UGetIncomingTradeRequestsProxy) == 0x000008, "Wrong alignment on UGetIncomingTradeRequestsProxy");
static_assert(sizeof(UGetIncomingTradeRequestsProxy) == 0x000068, "Wrong size on UGetIncomingTradeRequestsProxy");
static_assert(offsetof(UGetIncomingTradeRequestsProxy, OnSuccess) == 0x000030, "Member 'UGetIncomingTradeRequestsProxy::OnSuccess' has a wrong offset!");
static_assert(offsetof(UGetIncomingTradeRequestsProxy, OnFailure) == 0x000040, "Member 'UGetIncomingTradeRequestsProxy::OnFailure' has a wrong offset!");

// Class MasterServerPlugin.GetOutgoingTradeRequestsProxy
// 0x0038 (0x0068 - 0x0030)
class UGetOutgoingTradeRequestsProxy final : public UOnlineBlueprintCallProxyBase
{
public:
	FMulticastInlineDelegateProperty_             OnSuccess;                                         // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnFailure;                                         // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x18];                                      // 0x0050(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UGetOutgoingTradeRequestsProxy* GetOutgoingTradeRequests(class UObject* WorldContextObject);

	void GetOutgoingTradeRequestsResponse(class UVaRestRequestJSON* Request);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GetOutgoingTradeRequestsProxy">();
	}
	static class UGetOutgoingTradeRequestsProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGetOutgoingTradeRequestsProxy>();
	}
};
static_assert(alignof(UGetOutgoingTradeRequestsProxy) == 0x000008, "Wrong alignment on UGetOutgoingTradeRequestsProxy");
static_assert(sizeof(UGetOutgoingTradeRequestsProxy) == 0x000068, "Wrong size on UGetOutgoingTradeRequestsProxy");
static_assert(offsetof(UGetOutgoingTradeRequestsProxy, OnSuccess) == 0x000030, "Member 'UGetOutgoingTradeRequestsProxy::OnSuccess' has a wrong offset!");
static_assert(offsetof(UGetOutgoingTradeRequestsProxy, OnFailure) == 0x000040, "Member 'UGetOutgoingTradeRequestsProxy::OnFailure' has a wrong offset!");

// Class MasterServerPlugin.WitchItPacket
// 0x0018 (0x0040 - 0x0028)
class UWitchItPacket final : public UObject
{
public:
	int32                                         PacketType;                                        // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Payload;                                           // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	bool ParseFromBytes(const TArray<uint8>& Bytes);
	void PutArray(const TArray<uint8>& Bytes, int32 Index_0, int32* AdvancedPosition);
	void PutFloat32(float Value, int32 Index_0, int32* AdvancedPosition);
	void PutInt16(int16 Value, int32 Index_0, int32* AdvancedPosition);
	void PutInt32(int32 Value, int32 Index_0, int32* AdvancedPosition);
	void PutInt64(int64 Value, int32 Index_0, int32* AdvancedPosition);
	void PutInt8(int8 Value, int32 Index_0, int32* AdvancedPosition);
	void PutString(const class FString& Value, int32 Index_0, int32* AdvancedPosition);
	void PutUInt16(uint16 Value, int32 Index_0, int32* AdvancedPosition);
	void PutUInt32(uint32 Value, int32 Index_0, int32* AdvancedPosition);
	void PutUInt64(uint64 Value, int32 Index_0, int32* AdvancedPosition);
	void PutUInt8(uint8 Value, int32 Index_0, int32* AdvancedPosition);

	TArray<uint8> ReadBytes(int32 Index_0, int32* AdvancedPosition) const;
	float ReadFloat32(int32 Index_0, int32* AdvancedPosition) const;
	int16 ReadInt16(int32 Index_0, int32* AdvancedPosition) const;
	int32 ReadInt32(int32 Index_0, int32* AdvancedPosition) const;
	int64 ReadInt64(int32 Index_0, int32* AdvancedPosition) const;
	int8 ReadInt8(int32 Index_0, int32* AdvancedPosition) const;
	class FString ReadString(int32 Index_0, int32* AdvancedPosition) const;
	uint16 ReadUInt16(int32 Index_0, int32* AdvancedPosition) const;
	uint32 ReadUInt32(int32 Index_0, int32* AdvancedPosition) const;
	uint64 ReadUInt64(int32 Index_0, int32* AdvancedPosition) const;
	uint8 ReadUInt8(int32 Index_0, int32* AdvancedPosition) const;
	TArray<uint8> SerializeToBytes() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WitchItPacket">();
	}
	static class UWitchItPacket* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWitchItPacket>();
	}
};
static_assert(alignof(UWitchItPacket) == 0x000008, "Wrong alignment on UWitchItPacket");
static_assert(sizeof(UWitchItPacket) == 0x000040, "Wrong size on UWitchItPacket");
static_assert(offsetof(UWitchItPacket, PacketType) == 0x000028, "Member 'UWitchItPacket::PacketType' has a wrong offset!");
static_assert(offsetof(UWitchItPacket, Payload) == 0x000030, "Member 'UWitchItPacket::Payload' has a wrong offset!");

}

