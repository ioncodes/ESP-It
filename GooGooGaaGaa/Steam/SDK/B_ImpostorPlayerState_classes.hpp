#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_ImpostorPlayerState

#include "Basic.hpp"

#include "E_TaskType_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "B_PlayerState_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_ImpostorPlayerState.B_ImpostorPlayerState_C
// 0x0150 (0x0780 - 0x0630)
class AB_ImpostorPlayerState_C final : public AB_PlayerState_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_B_ImpostorPlayerState_C;            // 0x0630(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          IsImpostor;                                        // 0x0638(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_639[0x7];                                      // 0x0639(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<E_TaskType, bool>                        Tasks;                                             // 0x0640(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<E_TaskType>                            DoingTasks;                                        // 0x0690(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AB_TaskStarter_C*                       FocusingTaskStarter;                               // 0x06A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AB_VoteStarter_C*                       FocusingVoteStarter;                               // 0x06A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AB_MeetingStarter_C*                    FocusingMeetingStarter;                            // 0x06B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AB_InteractionActor_C*                  FocusingInteractionActor;                          // 0x06B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AB_HunterFrog_C*                        FocusingCorpse;                                    // 0x06C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AB_SabotageBombCauldron_C*              FocusingCauldron;                                  // 0x06C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AB_ImpostorHunter_C*                    FocusingHunterToKill;                              // 0x06D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 FocusingInteractable;                              // 0x06D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class APlayerState*                           VotedPlayer;                                       // 0x06E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          HasVoted;                                          // 0x06E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E9[0x3];                                      // 0x06E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ColorIndex;                                        // 0x06EC(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SpawnVoteCard;                                     // 0x06F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasBeenKilled;                                     // 0x06F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F2[0x2];                                      // 0x06F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LastMeetingVotes;                                  // 0x06F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPrimaryAssetId                        HeadSkin;                                          // 0x06F8(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FPrimaryAssetId                        UpperBodySkin;                                     // 0x0708(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FPrimaryAssetId                        LowerBodySkin;                                     // 0x0718(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FPrimaryAssetId                        HatSkin;                                           // 0x0728(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FPrimaryAssetId                        RangedWeaponSkin;                                  // 0x0738(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FPrimaryAssetId                        MeleeWeaponSkin;                                   // 0x0748(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FPrimaryAssetId                        SkinColor;                                         // 0x0758(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          SkinsInitialized;                                  // 0x0768(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_769[0x3];                                      // 0x0769(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MeetingsLeft;                                      // 0x076C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         KillCooldown;                                      // 0x0770(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxKillCooldown;                                   // 0x0774(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AB_SpyMonitor_C*                        ActiveMonitor;                                     // 0x0778(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ActivateCamera(class AB_SpyMonitor_C* CurrentMonitor);
	void ActivateCameraFunction(class AB_SpyMonitor_C* CurrentMonitor);
	void CompleteTaskMulti(E_TaskType TaskType);
	void CompleteTaskServer(E_TaskType TaskType);
	void ConvertToEyeEffect(class AB_ImpostorWitchPortal_C* Portal, class AB_ImpostorHunter_C* Hunter);
	void ConvertToEyeMulti(class AB_ImpostorWitchPortal_C* Portal, class AB_ImpostorHunter_C* Hunter);
	void ConvertToEyeOrHunter(class AB_ImpostorWitchPortal_C* Portal);
	void ConvertToEyeOrHunterFunction(class AB_ImpostorWitchPortal_C* Portal);
	void ConvertToHunterEffect(class AActor* Portal);
	void ConvertToHunterMulti(class AB_ImpostorWitchPortal_C* Portal);
	void DeactivateCamera(class AB_SpyMonitor_C* CurrentMonitor);
	void DeactivateCameraFunction(class AB_SpyMonitor_C* MyMonitor);
	void DisarmCauldronServer(class AB_SabotageBombCauldron_C* BombActor);
	void ExecuteUbergraph_B_ImpostorPlayerState(int32 EntryPoint);
	void KillPlayerServer(class AB_ImpostorHunter_C* Hunter);
	void OnRep_IsImpostor();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void RemoveVote();
	void SabotageMulti(class AB_SabotageActor_C* SabotageActor);
	void SabotageServer(class AB_SabotageActor_C* SabotageActor);
	void SetTasksMulti(const TArray<E_TaskType>& Tasks_0);
	void StartMeetingServer(class AB_ImpostorPlayerState_C* FoundPlayerState);
	void StopPortal(class AB_SabotagePortal_C* PortalActor, int32 PortalIndex);
	void ToggleStormCrystal(class AB_SabotageStormCrystal_C* StromCrystal);
	void TryKillPlayer(class AB_ImpostorHunter_C* Hunter);
	void VotePlayerMulti(class APlayerState* PlayerState);
	void VotePlayerServer(class APlayerState* PlayerState);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_ImpostorPlayerState_C">();
	}
	static class AB_ImpostorPlayerState_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_ImpostorPlayerState_C>();
	}
};
static_assert(alignof(AB_ImpostorPlayerState_C) == 0x000008, "Wrong alignment on AB_ImpostorPlayerState_C");
static_assert(sizeof(AB_ImpostorPlayerState_C) == 0x000780, "Wrong size on AB_ImpostorPlayerState_C");
static_assert(offsetof(AB_ImpostorPlayerState_C, UberGraphFrame_B_ImpostorPlayerState_C) == 0x000630, "Member 'AB_ImpostorPlayerState_C::UberGraphFrame_B_ImpostorPlayerState_C' has a wrong offset!");
static_assert(offsetof(AB_ImpostorPlayerState_C, IsImpostor) == 0x000638, "Member 'AB_ImpostorPlayerState_C::IsImpostor' has a wrong offset!");
static_assert(offsetof(AB_ImpostorPlayerState_C, Tasks) == 0x000640, "Member 'AB_ImpostorPlayerState_C::Tasks' has a wrong offset!");
static_assert(offsetof(AB_ImpostorPlayerState_C, DoingTasks) == 0x000690, "Member 'AB_ImpostorPlayerState_C::DoingTasks' has a wrong offset!");
static_assert(offsetof(AB_ImpostorPlayerState_C, FocusingTaskStarter) == 0x0006A0, "Member 'AB_ImpostorPlayerState_C::FocusingTaskStarter' has a wrong offset!");
static_assert(offsetof(AB_ImpostorPlayerState_C, FocusingVoteStarter) == 0x0006A8, "Member 'AB_ImpostorPlayerState_C::FocusingVoteStarter' has a wrong offset!");
static_assert(offsetof(AB_ImpostorPlayerState_C, FocusingMeetingStarter) == 0x0006B0, "Member 'AB_ImpostorPlayerState_C::FocusingMeetingStarter' has a wrong offset!");
static_assert(offsetof(AB_ImpostorPlayerState_C, FocusingInteractionActor) == 0x0006B8, "Member 'AB_ImpostorPlayerState_C::FocusingInteractionActor' has a wrong offset!");
static_assert(offsetof(AB_ImpostorPlayerState_C, FocusingCorpse) == 0x0006C0, "Member 'AB_ImpostorPlayerState_C::FocusingCorpse' has a wrong offset!");
static_assert(offsetof(AB_ImpostorPlayerState_C, FocusingCauldron) == 0x0006C8, "Member 'AB_ImpostorPlayerState_C::FocusingCauldron' has a wrong offset!");
static_assert(offsetof(AB_ImpostorPlayerState_C, FocusingHunterToKill) == 0x0006D0, "Member 'AB_ImpostorPlayerState_C::FocusingHunterToKill' has a wrong offset!");
static_assert(offsetof(AB_ImpostorPlayerState_C, FocusingInteractable) == 0x0006D8, "Member 'AB_ImpostorPlayerState_C::FocusingInteractable' has a wrong offset!");
static_assert(offsetof(AB_ImpostorPlayerState_C, VotedPlayer) == 0x0006E0, "Member 'AB_ImpostorPlayerState_C::VotedPlayer' has a wrong offset!");
static_assert(offsetof(AB_ImpostorPlayerState_C, HasVoted) == 0x0006E8, "Member 'AB_ImpostorPlayerState_C::HasVoted' has a wrong offset!");
static_assert(offsetof(AB_ImpostorPlayerState_C, ColorIndex) == 0x0006EC, "Member 'AB_ImpostorPlayerState_C::ColorIndex' has a wrong offset!");
static_assert(offsetof(AB_ImpostorPlayerState_C, SpawnVoteCard) == 0x0006F0, "Member 'AB_ImpostorPlayerState_C::SpawnVoteCard' has a wrong offset!");
static_assert(offsetof(AB_ImpostorPlayerState_C, HasBeenKilled) == 0x0006F1, "Member 'AB_ImpostorPlayerState_C::HasBeenKilled' has a wrong offset!");
static_assert(offsetof(AB_ImpostorPlayerState_C, LastMeetingVotes) == 0x0006F4, "Member 'AB_ImpostorPlayerState_C::LastMeetingVotes' has a wrong offset!");
static_assert(offsetof(AB_ImpostorPlayerState_C, HeadSkin) == 0x0006F8, "Member 'AB_ImpostorPlayerState_C::HeadSkin' has a wrong offset!");
static_assert(offsetof(AB_ImpostorPlayerState_C, UpperBodySkin) == 0x000708, "Member 'AB_ImpostorPlayerState_C::UpperBodySkin' has a wrong offset!");
static_assert(offsetof(AB_ImpostorPlayerState_C, LowerBodySkin) == 0x000718, "Member 'AB_ImpostorPlayerState_C::LowerBodySkin' has a wrong offset!");
static_assert(offsetof(AB_ImpostorPlayerState_C, HatSkin) == 0x000728, "Member 'AB_ImpostorPlayerState_C::HatSkin' has a wrong offset!");
static_assert(offsetof(AB_ImpostorPlayerState_C, RangedWeaponSkin) == 0x000738, "Member 'AB_ImpostorPlayerState_C::RangedWeaponSkin' has a wrong offset!");
static_assert(offsetof(AB_ImpostorPlayerState_C, MeleeWeaponSkin) == 0x000748, "Member 'AB_ImpostorPlayerState_C::MeleeWeaponSkin' has a wrong offset!");
static_assert(offsetof(AB_ImpostorPlayerState_C, SkinColor) == 0x000758, "Member 'AB_ImpostorPlayerState_C::SkinColor' has a wrong offset!");
static_assert(offsetof(AB_ImpostorPlayerState_C, SkinsInitialized) == 0x000768, "Member 'AB_ImpostorPlayerState_C::SkinsInitialized' has a wrong offset!");
static_assert(offsetof(AB_ImpostorPlayerState_C, MeetingsLeft) == 0x00076C, "Member 'AB_ImpostorPlayerState_C::MeetingsLeft' has a wrong offset!");
static_assert(offsetof(AB_ImpostorPlayerState_C, KillCooldown) == 0x000770, "Member 'AB_ImpostorPlayerState_C::KillCooldown' has a wrong offset!");
static_assert(offsetof(AB_ImpostorPlayerState_C, MaxKillCooldown) == 0x000774, "Member 'AB_ImpostorPlayerState_C::MaxKillCooldown' has a wrong offset!");
static_assert(offsetof(AB_ImpostorPlayerState_C, ActiveMonitor) == 0x000778, "Member 'AB_ImpostorPlayerState_C::ActiveMonitor' has a wrong offset!");

}

