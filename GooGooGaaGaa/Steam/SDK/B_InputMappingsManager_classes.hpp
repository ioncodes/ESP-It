#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_InputMappingsManager

#include "Basic.hpp"

#include "SAxisMappings_structs.hpp"
#include "SControllerBinding_structs.hpp"
#include "Engine_structs.hpp"
#include "PropWitchHuntModule_classes.hpp"
#include "EControllerLayout_structs.hpp"
#include "SAxisToEdit_structs.hpp"
#include "SActionMappings_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_InputMappingsManager.B_InputMappingsManager_C
// 0x0118 (0x0148 - 0x0030)
class UB_InputMappingsManager_C final : public UBaseManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0030(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<class FName>                           PlayerEditableActions;                             // 0x0038(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FSAxisToEdit>                   PlayerEditableAxes;                                // 0x0048(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             OnMappingsChanged;                                 // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMap<class FName, struct FSActionMappings>    CurrentActionMappings;                             // 0x0068(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, struct FSAxisMappings>      CurrentAxisMappings;                               // 0x00B8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bDirty;                                            // 0x0108(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSControllerBinding>            ControllerLayoutDefault;                           // 0x0110(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FSControllerBinding>            ControllerLayout1;                                 // 0x0120(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FSControllerBinding>            ControllerLayout2;                                 // 0x0130(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	EControllerLayout                             CurrentControllerLayout;                           // 0x0140(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bReversed;                                         // 0x0141(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddActionBinding(class FName ActionName, const struct FKey& Key);
	void AddControllerMappings(TArray<struct FSControllerBinding>& ControllerLayoutRef);
	bool AreActionMappingsSameLength(const class FName& ActionName, const TMap<class FName, struct FSActionMappings>& CurrentActionMappings_0, const TMap<class FName, struct FSActionMappings>& ActionMappings);
	bool AreAxisMappingsSameLength(const class FName& AxisName, const TMap<class FName, struct FSAxisMappings>& CurrentAxisMappings_0, const TMap<class FName, struct FSAxisMappings>& AxisMappings);
	void ChangeControllerLayout(EControllerLayout ControllerLayout);
	void ExecuteUbergraph_B_InputMappingsManager(int32 EntryPoint);
	struct FInputActionKeyMapping GetActionMappingFor(const struct FKey& Key);
	struct FInputAxisKeyMapping GetAxisMappingFor(const struct FKey& Key);
	class FName GetAxisName(const struct FSAxisToEdit& AxisToEdit);
	void GetCurrentMappings(TMap<class FName, struct FSActionMappings>* ActionMappings, TMap<class FName, struct FSAxisMappings>* AxisMappings);
	void Initialize(class UGameInstance* InGameInstance);
	void IsDirty(bool* bDirty_0);
	bool IsKeyForAction(const struct FKey& Key, class FName Action);
	void OnMappingsChanged__DelegateSignature();
	void OnMappingsChangedEvent();
	void RemoveControllerActionMappings();
	void RemoveControllerMappings();
	void ReverseLayout();
	void RevertActionMappingsComplex(class FName ActionName, const TMap<class FName, struct FSActionMappings>& RestoredActionMappings);
	void RevertActionMappingsSimple(const class FName& ActionName);
	void RevertAxisMappingsComplex(class FName ActionName, const TMap<class FName, struct FSAxisMappings>& RestoredAxisMappings);
	void RevertAxisMappingsSimple(const class FName& Key);
	void RevertRestoringMappings();
	void StoreCurrentMappings();
	void SwapActionMappings(struct FInputActionKeyMapping& A, struct FInputActionKeyMapping& B);
	void SwapAxisMappings(struct FInputAxisKeyMapping& A, struct FInputAxisKeyMapping& B);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_InputMappingsManager_C">();
	}
	static class UB_InputMappingsManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UB_InputMappingsManager_C>();
	}
};
static_assert(alignof(UB_InputMappingsManager_C) == 0x000008, "Wrong alignment on UB_InputMappingsManager_C");
static_assert(sizeof(UB_InputMappingsManager_C) == 0x000148, "Wrong size on UB_InputMappingsManager_C");
static_assert(offsetof(UB_InputMappingsManager_C, UberGraphFrame) == 0x000030, "Member 'UB_InputMappingsManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UB_InputMappingsManager_C, PlayerEditableActions) == 0x000038, "Member 'UB_InputMappingsManager_C::PlayerEditableActions' has a wrong offset!");
static_assert(offsetof(UB_InputMappingsManager_C, PlayerEditableAxes) == 0x000048, "Member 'UB_InputMappingsManager_C::PlayerEditableAxes' has a wrong offset!");
static_assert(offsetof(UB_InputMappingsManager_C, OnMappingsChanged) == 0x000058, "Member 'UB_InputMappingsManager_C::OnMappingsChanged' has a wrong offset!");
static_assert(offsetof(UB_InputMappingsManager_C, CurrentActionMappings) == 0x000068, "Member 'UB_InputMappingsManager_C::CurrentActionMappings' has a wrong offset!");
static_assert(offsetof(UB_InputMappingsManager_C, CurrentAxisMappings) == 0x0000B8, "Member 'UB_InputMappingsManager_C::CurrentAxisMappings' has a wrong offset!");
static_assert(offsetof(UB_InputMappingsManager_C, bDirty) == 0x000108, "Member 'UB_InputMappingsManager_C::bDirty' has a wrong offset!");
static_assert(offsetof(UB_InputMappingsManager_C, ControllerLayoutDefault) == 0x000110, "Member 'UB_InputMappingsManager_C::ControllerLayoutDefault' has a wrong offset!");
static_assert(offsetof(UB_InputMappingsManager_C, ControllerLayout1) == 0x000120, "Member 'UB_InputMappingsManager_C::ControllerLayout1' has a wrong offset!");
static_assert(offsetof(UB_InputMappingsManager_C, ControllerLayout2) == 0x000130, "Member 'UB_InputMappingsManager_C::ControllerLayout2' has a wrong offset!");
static_assert(offsetof(UB_InputMappingsManager_C, CurrentControllerLayout) == 0x000140, "Member 'UB_InputMappingsManager_C::CurrentControllerLayout' has a wrong offset!");
static_assert(offsetof(UB_InputMappingsManager_C, bReversed) == 0x000141, "Member 'UB_InputMappingsManager_C::bReversed' has a wrong offset!");

}

