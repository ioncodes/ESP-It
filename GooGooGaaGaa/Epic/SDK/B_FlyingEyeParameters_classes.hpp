#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_FlyingEyeParameters

#include "Basic.hpp"

#include "PropWitchHuntModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_FlyingEyeParameters.B_FlyingEyeParameters_C
// 0x0030 (0x0080 - 0x0050)
class UB_FlyingEyeParameters_C final : public USkillParameters
{
public:
	double                                        ActivationManaCost;                                // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ManaCostPerSecond;                                 // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxSpeed;                                          // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Acceleration;                                      // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Deceleration;                                      // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Scale;                                             // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	class FText GetFormattedTooltip();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_FlyingEyeParameters_C">();
	}
	static class UB_FlyingEyeParameters_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UB_FlyingEyeParameters_C>();
	}
};
static_assert(alignof(UB_FlyingEyeParameters_C) == 0x000008, "Wrong alignment on UB_FlyingEyeParameters_C");
static_assert(sizeof(UB_FlyingEyeParameters_C) == 0x000080, "Wrong size on UB_FlyingEyeParameters_C");
static_assert(offsetof(UB_FlyingEyeParameters_C, ActivationManaCost) == 0x000050, "Member 'UB_FlyingEyeParameters_C::ActivationManaCost' has a wrong offset!");
static_assert(offsetof(UB_FlyingEyeParameters_C, ManaCostPerSecond) == 0x000058, "Member 'UB_FlyingEyeParameters_C::ManaCostPerSecond' has a wrong offset!");
static_assert(offsetof(UB_FlyingEyeParameters_C, MaxSpeed) == 0x000060, "Member 'UB_FlyingEyeParameters_C::MaxSpeed' has a wrong offset!");
static_assert(offsetof(UB_FlyingEyeParameters_C, Acceleration) == 0x000068, "Member 'UB_FlyingEyeParameters_C::Acceleration' has a wrong offset!");
static_assert(offsetof(UB_FlyingEyeParameters_C, Deceleration) == 0x000070, "Member 'UB_FlyingEyeParameters_C::Deceleration' has a wrong offset!");
static_assert(offsetof(UB_FlyingEyeParameters_C, Scale) == 0x000078, "Member 'UB_FlyingEyeParameters_C::Scale' has a wrong offset!");

}

