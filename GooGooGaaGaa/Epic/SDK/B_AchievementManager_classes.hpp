#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_AchievementManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_Achievements_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_AchievementManager.B_AchievementManager_C
// 0x0190 (0x01B8 - 0x0028)
class UB_AchievementManager_C final : public UObject
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0028(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UB_Achievement_C*                       AchNativeWitch;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UB_Achievement_C*                       AchOnlyOne;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UB_Achievement_C*                       AchFruitSalad;                                     // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UB_Achievement_C*                       AchBarrelRoll;                                     // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UB_Achievement_C*                       AchBig;                                            // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      GameInstance;                                      // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UB_Achievement_C*                       AchLastWitch;                                      // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UB_Achievement_C*                       AchSneakyWItch;                                    // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UB_Achievement_C*>               AchievementList;                                   // 0x0070(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         DefaultPlayerAmount;                               // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_Achievement_C*                       AchWitchHunter;                                    // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UB_Achievement_C*                       AchPickup;                                         // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UB_Achievement_C*                       AchTourist;                                        // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UB_Achievement_C*                       AchPossess;                                        // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AB_GameMode_C*                          GameMode;                                          // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDedicatedServer;                                 // 0x00B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_Achievement_C*                       AchPotato;                                         // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UB_Achievement_C*                       AchCatchFly;                                       // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UB_Achievement_C*                       AchCannonball;                                     // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<E_Achievements, class FName>             NameConversionMap;                                 // 0x00D0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<E_Achievements, class UB_Achievement_C*> AchievementConversionMap;                          // 0x0120(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         LevelNameList;                                     // 0x0170(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         RequiredAmountOfPlayersInDevMode;                  // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SneakyWitchTarget;                                 // 0x0184(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PossessTarget;                                     // 0x0188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PotatoTarget;                                      // 0x018C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CatchFlyTimeTarget;                                // 0x0190(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CannonballTarget;                                  // 0x0194(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FruitSaladTarget;                                  // 0x0198(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BarrelRollTarget;                                  // 0x019C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TouristTarget;                                     // 0x01A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A4[0x4];                                      // 0x01A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_Achievement_C*                       AchPhoto;                                          // 0x01A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         PhotoTarget;                                       // 0x01B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Achievement_Is_Not_Owned(class AB_PlayerState_C* PlayerState, class FName Name_0, bool* IsNotOwned);
	void Activate_Achievement(class AB_PlayerState_C* PlayerState, E_Achievements AchievementType);
	void Activate_By_Id(class AB_PlayerState_C* PlayerState, E_Achievements Achievement_Type, int32 PropID);
	void Check_Achievement_Validity(class AB_PlayerState_C* PlayerState, class UB_Achievement_C* Achievement, bool* IsValid);
	void Check_Prop_Achievements(int32 PropID, class AB_PlayerState_C* PlayerState, class AB_SeekGameState_C* SeekGameState);
	void CheckDefaultNrOfActivePlayers(bool* Sufficient_Players);
	void CheckNrOfActivePlayers(bool* Sufficient_Players);
	void Create_New_Achievement_Instance(class UB_Achievement_C* Model, class UB_Achievement_C** Achievement, bool* Success);
	void Deactivate_Achievement(class AB_PlayerState_C* PlayerState, E_Achievements AchievementType);
	void ExecuteUbergraph_B_AchievementManager(int32 EntryPoint);
	void Get_AchBarrelRoll_Ids(TArray<int32>* IDs);
	void Get_AchBig_Ids(TArray<int32>* IDs);
	void Get_AchFruitSalad_Ids(TArray<int32>* IDs);
	void Get_Achievement_Key(class UB_Achievement_C* Achievement, E_Achievements* Key);
	void Get_AchPhoto_Ids(TArray<int32>* IDs);
	void Get_Divider(int32 Index_0, int32* Divider);
	void Get_Player_Achievement(class AB_PlayerState_C* PlayerState, E_Achievements Achievement_Type, class UB_Achievement_C** Achievement, bool* Success);
	void Give_Achievement(class AB_PlayerState_C* PlayerState, E_Achievements Achievement_Type);
	void Initialize_GS(class AB_PlayerState_C* Player_State);
	void Initialize_Player_Achievement_List(class AB_PlayerState_C* PlayerState);
	void Reset_Or_Disable_Prop_Achievements(int32 PropID, class AB_PlayerState_C* PlayerState, class AB_SeekGameState_C* SeekGameState);
	void Set_Achievement_Conversion_Map();
	void Set_Individual_Achievement_Content(class UB_Achievement_C* Achievement, E_Achievements Achievement_Type, bool Starts_Active, bool Requires_Player_Survival, bool Mobification, bool Hide_and_Seek, bool Hunt_a_Hag, bool Fill_the_Pot, int32 Target_Value, int32 Required_Player_Amount);
	void Set_Level_Name_List();
	void Set_Name_Conversion_Map();
	void Set_Valid_Game_Modes(class UB_Achievement_C* Achievement, bool Mobification, bool Hide_and_Seek, bool Hunt_a_Hag, bool Fill_the_Pot);
	void SetAchievementContent(class UB_GameInstance_C* GameInstance_0, class AB_GameMode_C* GameMode_0);
	void Test_AchFruitSalad_Ids(int32 PropID, class UB_Achievement_C* Achievement, bool* Give_Achievement);
	void Test_Amount_Of_Won_Maps(int32 AllMapsCode, bool* GiveAchievement);
	void Test_Hunter_Catch_in_Air(const struct FDateTime& StartInAir, const struct FDateTime& EndInAir, class AB_PlayerState_C* PlayerState, class UB_Achievement_C* Achievement, bool* Give_Achievement);
	void Test_Luaq_Statue_Photo(class AActor* PhotoTarget_0, class AB_PlayerState_C* Player_State, class UB_Achievement_C* Achievement, bool* Give_Achievement);
	void Test_Match_Value(class UB_Achievement_C* Achievement, bool* Give_Achievement);
	void Test_NonMinusSurvival_Achievement(E_Achievements AchievementType, class AB_PlayerState_C* PlayerState, int32 PropID, double TravelDistance, class AActor* ControlledProp, const struct FDateTime& StartHunterInAir, const struct FDateTime& EndHunterInAir, class AActor* PhotoTarget_0);
	void Test_Survival_Achievement(class AB_PlayerState_C* PlayerState, class UB_Achievement_C* Achievement);
	void Test_Travel_Distance(class UB_Achievement_C* Achievement, double NewTravelDistance, class AActor* Barrel, bool* GiveAchievement);
	void Update_Map_Stat(const class FString& Current_Level, class AB_PlayerState_C* Player_State);
	void Update_Pickup_Stat(class AB_PlayerState_C* PlayerState);

	void GetDefaultCompletionRequiredAmountOfPlayers(int32* DefaultRequiredAmount) const;
	void GetStatsAndAchievementsManager(class UB_NewStatsAndAchievementsManager_C** Result) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_AchievementManager_C">();
	}
	static class UB_AchievementManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UB_AchievementManager_C>();
	}
};
static_assert(alignof(UB_AchievementManager_C) == 0x000008, "Wrong alignment on UB_AchievementManager_C");
static_assert(sizeof(UB_AchievementManager_C) == 0x0001B8, "Wrong size on UB_AchievementManager_C");
static_assert(offsetof(UB_AchievementManager_C, UberGraphFrame) == 0x000028, "Member 'UB_AchievementManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UB_AchievementManager_C, AchNativeWitch) == 0x000030, "Member 'UB_AchievementManager_C::AchNativeWitch' has a wrong offset!");
static_assert(offsetof(UB_AchievementManager_C, AchOnlyOne) == 0x000038, "Member 'UB_AchievementManager_C::AchOnlyOne' has a wrong offset!");
static_assert(offsetof(UB_AchievementManager_C, AchFruitSalad) == 0x000040, "Member 'UB_AchievementManager_C::AchFruitSalad' has a wrong offset!");
static_assert(offsetof(UB_AchievementManager_C, AchBarrelRoll) == 0x000048, "Member 'UB_AchievementManager_C::AchBarrelRoll' has a wrong offset!");
static_assert(offsetof(UB_AchievementManager_C, AchBig) == 0x000050, "Member 'UB_AchievementManager_C::AchBig' has a wrong offset!");
static_assert(offsetof(UB_AchievementManager_C, GameInstance) == 0x000058, "Member 'UB_AchievementManager_C::GameInstance' has a wrong offset!");
static_assert(offsetof(UB_AchievementManager_C, AchLastWitch) == 0x000060, "Member 'UB_AchievementManager_C::AchLastWitch' has a wrong offset!");
static_assert(offsetof(UB_AchievementManager_C, AchSneakyWItch) == 0x000068, "Member 'UB_AchievementManager_C::AchSneakyWItch' has a wrong offset!");
static_assert(offsetof(UB_AchievementManager_C, AchievementList) == 0x000070, "Member 'UB_AchievementManager_C::AchievementList' has a wrong offset!");
static_assert(offsetof(UB_AchievementManager_C, DefaultPlayerAmount) == 0x000080, "Member 'UB_AchievementManager_C::DefaultPlayerAmount' has a wrong offset!");
static_assert(offsetof(UB_AchievementManager_C, AchWitchHunter) == 0x000088, "Member 'UB_AchievementManager_C::AchWitchHunter' has a wrong offset!");
static_assert(offsetof(UB_AchievementManager_C, AchPickup) == 0x000090, "Member 'UB_AchievementManager_C::AchPickup' has a wrong offset!");
static_assert(offsetof(UB_AchievementManager_C, AchTourist) == 0x000098, "Member 'UB_AchievementManager_C::AchTourist' has a wrong offset!");
static_assert(offsetof(UB_AchievementManager_C, AchPossess) == 0x0000A0, "Member 'UB_AchievementManager_C::AchPossess' has a wrong offset!");
static_assert(offsetof(UB_AchievementManager_C, GameMode) == 0x0000A8, "Member 'UB_AchievementManager_C::GameMode' has a wrong offset!");
static_assert(offsetof(UB_AchievementManager_C, IsDedicatedServer) == 0x0000B0, "Member 'UB_AchievementManager_C::IsDedicatedServer' has a wrong offset!");
static_assert(offsetof(UB_AchievementManager_C, AchPotato) == 0x0000B8, "Member 'UB_AchievementManager_C::AchPotato' has a wrong offset!");
static_assert(offsetof(UB_AchievementManager_C, AchCatchFly) == 0x0000C0, "Member 'UB_AchievementManager_C::AchCatchFly' has a wrong offset!");
static_assert(offsetof(UB_AchievementManager_C, AchCannonball) == 0x0000C8, "Member 'UB_AchievementManager_C::AchCannonball' has a wrong offset!");
static_assert(offsetof(UB_AchievementManager_C, NameConversionMap) == 0x0000D0, "Member 'UB_AchievementManager_C::NameConversionMap' has a wrong offset!");
static_assert(offsetof(UB_AchievementManager_C, AchievementConversionMap) == 0x000120, "Member 'UB_AchievementManager_C::AchievementConversionMap' has a wrong offset!");
static_assert(offsetof(UB_AchievementManager_C, LevelNameList) == 0x000170, "Member 'UB_AchievementManager_C::LevelNameList' has a wrong offset!");
static_assert(offsetof(UB_AchievementManager_C, RequiredAmountOfPlayersInDevMode) == 0x000180, "Member 'UB_AchievementManager_C::RequiredAmountOfPlayersInDevMode' has a wrong offset!");
static_assert(offsetof(UB_AchievementManager_C, SneakyWitchTarget) == 0x000184, "Member 'UB_AchievementManager_C::SneakyWitchTarget' has a wrong offset!");
static_assert(offsetof(UB_AchievementManager_C, PossessTarget) == 0x000188, "Member 'UB_AchievementManager_C::PossessTarget' has a wrong offset!");
static_assert(offsetof(UB_AchievementManager_C, PotatoTarget) == 0x00018C, "Member 'UB_AchievementManager_C::PotatoTarget' has a wrong offset!");
static_assert(offsetof(UB_AchievementManager_C, CatchFlyTimeTarget) == 0x000190, "Member 'UB_AchievementManager_C::CatchFlyTimeTarget' has a wrong offset!");
static_assert(offsetof(UB_AchievementManager_C, CannonballTarget) == 0x000194, "Member 'UB_AchievementManager_C::CannonballTarget' has a wrong offset!");
static_assert(offsetof(UB_AchievementManager_C, FruitSaladTarget) == 0x000198, "Member 'UB_AchievementManager_C::FruitSaladTarget' has a wrong offset!");
static_assert(offsetof(UB_AchievementManager_C, BarrelRollTarget) == 0x00019C, "Member 'UB_AchievementManager_C::BarrelRollTarget' has a wrong offset!");
static_assert(offsetof(UB_AchievementManager_C, TouristTarget) == 0x0001A0, "Member 'UB_AchievementManager_C::TouristTarget' has a wrong offset!");
static_assert(offsetof(UB_AchievementManager_C, AchPhoto) == 0x0001A8, "Member 'UB_AchievementManager_C::AchPhoto' has a wrong offset!");
static_assert(offsetof(UB_AchievementManager_C, PhotoTarget) == 0x0001B0, "Member 'UB_AchievementManager_C::PhotoTarget' has a wrong offset!");

}

