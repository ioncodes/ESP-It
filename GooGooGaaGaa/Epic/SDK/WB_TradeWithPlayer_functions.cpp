#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_TradeWithPlayer

#include "Basic.hpp"

#include "WB_TradeWithPlayer_classes.hpp"
#include "WB_TradeWithPlayer_parameters.hpp"


namespace SDK
{

// Function WB_TradeWithPlayer.WB_TradeWithPlayer_C.AddTradeItem
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ItemId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CountToTrade                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_TradeWithPlayer_C::AddTradeItem(int32 ItemId, int32 CountToTrade)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_TradeWithPlayer_C", "AddTradeItem");

	Params::WB_TradeWithPlayer_C_AddTradeItem Parms{};

	Parms.ItemId = ItemId;
	Parms.CountToTrade = CountToTrade;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_TradeWithPlayer.WB_TradeWithPlayer_C.AnalogCooldownComplete
// (BlueprintCallable, BlueprintEvent)

void UWB_TradeWithPlayer_C::AnalogCooldownComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_TradeWithPlayer_C", "AnalogCooldownComplete");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_TradeWithPlayer.WB_TradeWithPlayer_C.AnalogSliderCooldown
// (BlueprintCallable, BlueprintEvent)

void UWB_TradeWithPlayer_C::AnalogSliderCooldown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_TradeWithPlayer_C", "AnalogSliderCooldown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_TradeWithPlayer.WB_TradeWithPlayer_C.AskForItemCount
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_TradeWithPlayer_C::AskForItemCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_TradeWithPlayer_C", "AskForItemCount");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_TradeWithPlayer.WB_TradeWithPlayer_C.BndEvt__WB_TradeWithPlayer_CountAccept_K2Node_ComponentBoundEvent_2_Clicked__DelegateSignature
// (BlueprintEvent)

void UWB_TradeWithPlayer_C::BndEvt__WB_TradeWithPlayer_CountAccept_K2Node_ComponentBoundEvent_2_Clicked__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_TradeWithPlayer_C", "BndEvt__WB_TradeWithPlayer_CountAccept_K2Node_ComponentBoundEvent_2_Clicked__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_TradeWithPlayer.WB_TradeWithPlayer_C.BndEvt__WB_TradeWithPlayer_CountBack_K2Node_ComponentBoundEvent_1_Clicked__DelegateSignature
// (BlueprintEvent)

void UWB_TradeWithPlayer_C::BndEvt__WB_TradeWithPlayer_CountBack_K2Node_ComponentBoundEvent_1_Clicked__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_TradeWithPlayer_C", "BndEvt__WB_TradeWithPlayer_CountBack_K2Node_ComponentBoundEvent_1_Clicked__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_TradeWithPlayer.WB_TradeWithPlayer_C.BndEvt__WB_TradeWithPlayer_InputField_K2Node_ComponentBoundEvent_4_OnEditableTextBoxCommittedEvent__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             Text                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// ETextCommit                             CommitMethod                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_TradeWithPlayer_C::BndEvt__WB_TradeWithPlayer_InputField_K2Node_ComponentBoundEvent_4_OnEditableTextBoxCommittedEvent__DelegateSignature(const class FText& Text, ETextCommit CommitMethod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_TradeWithPlayer_C", "BndEvt__WB_TradeWithPlayer_InputField_K2Node_ComponentBoundEvent_4_OnEditableTextBoxCommittedEvent__DelegateSignature");

	Params::WB_TradeWithPlayer_C_BndEvt__WB_TradeWithPlayer_InputField_K2Node_ComponentBoundEvent_4_OnEditableTextBoxCommittedEvent__DelegateSignature Parms{};

	Parms.Text = std::move(Text);
	Parms.CommitMethod = CommitMethod;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_TradeWithPlayer.WB_TradeWithPlayer_C.BndEvt__WB_TradeWithPlayer_SendTradeOffer_K2Node_ComponentBoundEvent_0_Clicked__DelegateSignature
// (BlueprintEvent)

void UWB_TradeWithPlayer_C::BndEvt__WB_TradeWithPlayer_SendTradeOffer_K2Node_ComponentBoundEvent_0_Clicked__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_TradeWithPlayer_C", "BndEvt__WB_TradeWithPlayer_SendTradeOffer_K2Node_ComponentBoundEvent_0_Clicked__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_TradeWithPlayer.WB_TradeWithPlayer_C.BndEvt__WB_TradeWithPlayer_ValueSlider_K2Node_ComponentBoundEvent_3_OnFloatValueChangedEvent__DelegateSignature
// (BlueprintEvent)
// Parameters:
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_TradeWithPlayer_C::BndEvt__WB_TradeWithPlayer_ValueSlider_K2Node_ComponentBoundEvent_3_OnFloatValueChangedEvent__DelegateSignature(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_TradeWithPlayer_C", "BndEvt__WB_TradeWithPlayer_ValueSlider_K2Node_ComponentBoundEvent_3_OnFloatValueChangedEvent__DelegateSignature");

	Params::WB_TradeWithPlayer_C_BndEvt__WB_TradeWithPlayer_ValueSlider_K2Node_ComponentBoundEvent_3_OnFloatValueChangedEvent__DelegateSignature Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_TradeWithPlayer.WB_TradeWithPlayer_C.ClearTradeData
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_TradeWithPlayer_C::ClearTradeData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_TradeWithPlayer_C", "ClearTradeData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_TradeWithPlayer.WB_TradeWithPlayer_C.ConfirmCountChoice
// (Private, BlueprintCallable, BlueprintEvent)

void UWB_TradeWithPlayer_C::ConfirmCountChoice()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_TradeWithPlayer_C", "ConfirmCountChoice");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_TradeWithPlayer.WB_TradeWithPlayer_C.ExecuteUbergraph_WB_TradeWithPlayer
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_TradeWithPlayer_C::ExecuteUbergraph_WB_TradeWithPlayer(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_TradeWithPlayer_C", "ExecuteUbergraph_WB_TradeWithPlayer");

	Params::WB_TradeWithPlayer_C_ExecuteUbergraph_WB_TradeWithPlayer Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_TradeWithPlayer.WB_TradeWithPlayer_C.GetInitialFocusWidget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UUserWidget*                      InitialFocusWidget                                     (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UWB_TradeWithPlayer_C::GetInitialFocusWidget(class UUserWidget** InitialFocusWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_TradeWithPlayer_C", "GetInitialFocusWidget");

	Params::WB_TradeWithPlayer_C_GetInitialFocusWidget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (InitialFocusWidget != nullptr)
		*InitialFocusWidget = Parms.InitialFocusWidget;
}


// Function WB_TradeWithPlayer.WB_TradeWithPlayer_C.GetReceivingItems
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FTradingItem>             ReceivingItems_0                                       (Parm, OutParm)

void UWB_TradeWithPlayer_C::GetReceivingItems(TArray<struct FTradingItem>* ReceivingItems_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_TradeWithPlayer_C", "GetReceivingItems");

	Params::WB_TradeWithPlayer_C_GetReceivingItems Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ReceivingItems_0 != nullptr)
		*ReceivingItems_0 = std::move(Parms.ReceivingItems_0);
}


// Function WB_TradeWithPlayer.WB_TradeWithPlayer_C.GetSelectedIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UWB_TradePreview_C*               PreviewTIleView                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   SelectedIndex                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_TradeWithPlayer_C::GetSelectedIndex(class UWB_TradePreview_C* PreviewTIleView, int32* SelectedIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_TradeWithPlayer_C", "GetSelectedIndex");

	Params::WB_TradeWithPlayer_C_GetSelectedIndex Parms{};

	Parms.PreviewTIleView = PreviewTIleView;

	UObject::ProcessEvent(Func, &Parms);

	if (SelectedIndex != nullptr)
		*SelectedIndex = Parms.SelectedIndex;
}


// Function WB_TradeWithPlayer.WB_TradeWithPlayer_C.GetSendingItems
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FTradingItem>             SendingItems_0                                         (Parm, OutParm)

void UWB_TradeWithPlayer_C::GetSendingItems(TArray<struct FTradingItem>* SendingItems_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_TradeWithPlayer_C", "GetSendingItems");

	Params::WB_TradeWithPlayer_C_GetSendingItems Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SendingItems_0 != nullptr)
		*SendingItems_0 = std::move(Parms.SendingItems_0);
}


// Function WB_TradeWithPlayer.WB_TradeWithPlayer_C.InitializeTrade
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UOnlineFriendRef*                 Friend                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UWB_TradeWithPlayer_C::InitializeTrade(class UOnlineFriendRef* Friend)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_TradeWithPlayer_C", "InitializeTrade");

	Params::WB_TradeWithPlayer_C_InitializeTrade Parms{};

	Parms.Friend = Friend;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_TradeWithPlayer.WB_TradeWithPlayer_C.InitOtherPlayerItemsAndRecipes
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FTradingItem>             Inventory                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UWB_TradeWithPlayer_C::InitOtherPlayerItemsAndRecipes(TArray<struct FTradingItem>& Inventory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_TradeWithPlayer_C", "InitOtherPlayerItemsAndRecipes");

	Params::WB_TradeWithPlayer_C_InitOtherPlayerItemsAndRecipes Parms{};

	Parms.Inventory = std::move(Inventory);

	UObject::ProcessEvent(Func, &Parms);

	Inventory = std::move(Parms.Inventory);
}


// Function WB_TradeWithPlayer.WB_TradeWithPlayer_C.NavigateToInventory
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWB_TradePreview_C*               SourcePreview                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UWB_TradeWithPlayer_C::NavigateToInventory(class UWB_TradePreview_C* SourcePreview)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_TradeWithPlayer_C", "NavigateToInventory");

	Params::WB_TradeWithPlayer_C_NavigateToInventory Parms{};

	Parms.SourcePreview = SourcePreview;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_TradeWithPlayer.WB_TradeWithPlayer_C.NavigateToInventoryFromReceive
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EUINavigation                           Navigation_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_TradeWithPlayer_C::NavigateToInventoryFromReceive(EUINavigation Navigation_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_TradeWithPlayer_C", "NavigateToInventoryFromReceive");

	Params::WB_TradeWithPlayer_C_NavigateToInventoryFromReceive Parms{};

	Parms.Navigation_0 = Navigation_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_TradeWithPlayer.WB_TradeWithPlayer_C.NavigateToInventoryFromSend
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EUINavigation                           Navigation_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_TradeWithPlayer_C::NavigateToInventoryFromSend(EUINavigation Navigation_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_TradeWithPlayer_C", "NavigateToInventoryFromSend");

	Params::WB_TradeWithPlayer_C_NavigateToInventoryFromSend Parms{};

	Parms.Navigation_0 = Navigation_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_TradeWithPlayer.WB_TradeWithPlayer_C.NavigateToPreview
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EUINavigation                           Navigation_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_TradeWithPlayer_C::NavigateToPreview(EUINavigation Navigation_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_TradeWithPlayer_C", "NavigateToPreview");

	Params::WB_TradeWithPlayer_C_NavigateToPreview Parms{};

	Parms.Navigation_0 = Navigation_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_TradeWithPlayer.WB_TradeWithPlayer_C.NavigateToReceivePreview
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EUINavigation                           Navigation_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_TradeWithPlayer_C::NavigateToReceivePreview(EUINavigation Navigation_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_TradeWithPlayer_C", "NavigateToReceivePreview");

	Params::WB_TradeWithPlayer_C_NavigateToReceivePreview Parms{};

	Parms.Navigation_0 = Navigation_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_TradeWithPlayer.WB_TradeWithPlayer_C.NavigateToSendPreview
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EUINavigation                           Navigation_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_TradeWithPlayer_C::NavigateToSendPreview(EUINavigation Navigation_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_TradeWithPlayer_C", "NavigateToSendPreview");

	Params::WB_TradeWithPlayer_C_NavigateToSendPreview Parms{};

	Parms.Navigation_0 = Navigation_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_TradeWithPlayer.WB_TradeWithPlayer_C.OnAnalogValueChanged
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FAnalogInputEvent                InAnalogInputEvent                                     (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UWB_TradeWithPlayer_C::OnAnalogValueChanged(const struct FGeometry& MyGeometry, const struct FAnalogInputEvent& InAnalogInputEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_TradeWithPlayer_C", "OnAnalogValueChanged");

	Params::WB_TradeWithPlayer_C_OnAnalogValueChanged Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InAnalogInputEvent = std::move(InAnalogInputEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function WB_TradeWithPlayer.WB_TradeWithPlayer_C.OnApply
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_TradeWithPlayer_C::OnApply()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_TradeWithPlayer_C", "OnApply");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_TradeWithPlayer.WB_TradeWithPlayer_C.OnBack
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_TradeWithPlayer_C::OnBack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_TradeWithPlayer_C", "OnBack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_TradeWithPlayer.WB_TradeWithPlayer_C.OnFailure_5DF3E9CD40CABD8B423A32B8094E724E
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FTradingItem>             Inventory                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UWB_TradeWithPlayer_C::OnFailure_5DF3E9CD40CABD8B423A32B8094E724E(const TArray<struct FTradingItem>& Inventory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_TradeWithPlayer_C", "OnFailure_5DF3E9CD40CABD8B423A32B8094E724E");

	Params::WB_TradeWithPlayer_C_OnFailure_5DF3E9CD40CABD8B423A32B8094E724E Parms{};

	Parms.Inventory = std::move(Inventory);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_TradeWithPlayer.WB_TradeWithPlayer_C.OnFailure_806832754C15A443C42EEBB216F0E706
// (BlueprintCallable, BlueprintEvent)

void UWB_TradeWithPlayer_C::OnFailure_806832754C15A443C42EEBB216F0E706()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_TradeWithPlayer_C", "OnFailure_806832754C15A443C42EEBB216F0E706");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_TradeWithPlayer.WB_TradeWithPlayer_C.OnPreviewKeyDown
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FKeyEvent                        InKeyEvent                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UWB_TradeWithPlayer_C::OnPreviewKeyDown(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_TradeWithPlayer_C", "OnPreviewKeyDown");

	Params::WB_TradeWithPlayer_C_OnPreviewKeyDown Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InKeyEvent = std::move(InKeyEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function WB_TradeWithPlayer.WB_TradeWithPlayer_C.OnRequestInventoryCompleted__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UWB_TradeWithPlayer_C::OnRequestInventoryCompleted__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_TradeWithPlayer_C", "OnRequestInventoryCompleted__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_TradeWithPlayer.WB_TradeWithPlayer_C.OnSpecialAction
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_TradeWithPlayer_C::OnSpecialAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_TradeWithPlayer_C", "OnSpecialAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_TradeWithPlayer.WB_TradeWithPlayer_C.OnSuccess_5DF3E9CD40CABD8B423A32B8094E724E
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FTradingItem>             Inventory                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UWB_TradeWithPlayer_C::OnSuccess_5DF3E9CD40CABD8B423A32B8094E724E(const TArray<struct FTradingItem>& Inventory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_TradeWithPlayer_C", "OnSuccess_5DF3E9CD40CABD8B423A32B8094E724E");

	Params::WB_TradeWithPlayer_C_OnSuccess_5DF3E9CD40CABD8B423A32B8094E724E Parms{};

	Parms.Inventory = std::move(Inventory);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_TradeWithPlayer.WB_TradeWithPlayer_C.OnSuccess_806832754C15A443C42EEBB216F0E706
// (BlueprintCallable, BlueprintEvent)

void UWB_TradeWithPlayer_C::OnSuccess_806832754C15A443C42EEBB216F0E706()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_TradeWithPlayer_C", "OnSuccess_806832754C15A443C42EEBB216F0E706");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_TradeWithPlayer.WB_TradeWithPlayer_C.RemoveFromTrade
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTradingItem                     TradingItem                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// bool                                    IsReceivingItem                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_TradeWithPlayer_C::RemoveFromTrade(const struct FTradingItem& TradingItem, bool IsReceivingItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_TradeWithPlayer_C", "RemoveFromTrade");

	Params::WB_TradeWithPlayer_C_RemoveFromTrade Parms{};

	Parms.TradingItem = std::move(TradingItem);
	Parms.IsReceivingItem = IsReceivingItem;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_TradeWithPlayer.WB_TradeWithPlayer_C.SendTradeAnswer
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// E_QuestionAnswer                        Answer                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_TradeWithPlayer_C::SendTradeAnswer(E_QuestionAnswer Answer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_TradeWithPlayer_C", "SendTradeAnswer");

	Params::WB_TradeWithPlayer_C_SendTradeAnswer Parms{};

	Parms.Answer = Answer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_TradeWithPlayer.WB_TradeWithPlayer_C.SetItemQuantity
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTradingItem                     Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void UWB_TradeWithPlayer_C::SetItemQuantity(const struct FTradingItem& Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_TradeWithPlayer_C", "SetItemQuantity");

	Params::WB_TradeWithPlayer_C_SetItemQuantity Parms{};

	Parms.Item = std::move(Item);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_TradeWithPlayer.WB_TradeWithPlayer_C.TryAddTradeItem
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTradingItem                     TradeItem                                              (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void UWB_TradeWithPlayer_C::TryAddTradeItem(const struct FTradingItem& TradeItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_TradeWithPlayer_C", "TryAddTradeItem");

	Params::WB_TradeWithPlayer_C_TryAddTradeItem Parms{};

	Parms.TradeItem = std::move(TradeItem);

	UObject::ProcessEvent(Func, &Parms);
}

}

