#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MeshModelingToolsExp

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum MeshModelingToolsExp.EBakeNormalSpace
// NumValues: 0x0003
enum class EBakeNormalSpace : uint32
{
	Tangent                                  = 0,
	Object                                   = 1,
	EBakeNormalSpace_MAX                     = 2,
};

// Enum MeshModelingToolsExp.EBakeCurvatureTypeMode
// NumValues: 0x0004
enum class EBakeCurvatureTypeMode : uint32
{
	MeanAverage                              = 0,
	Max                                      = 1,
	Min                                      = 2,
	Gaussian                                 = 3,
};

// Enum MeshModelingToolsExp.EBakeCurvatureColorMode
// NumValues: 0x0004
enum class EBakeCurvatureColorMode : uint32
{
	Grayscale                                = 0,
	RedBlue                                  = 1,
	RedGreenBlue                             = 2,
	EBakeCurvatureColorMode_MAX              = 3,
};

// Enum MeshModelingToolsExp.EBakeCurvatureClampMode
// NumValues: 0x0004
enum class EBakeCurvatureClampMode : uint32
{
	None                                     = 0,
	OnlyPositive                             = 1,
	OnlyNegative                             = 2,
	EBakeCurvatureClampMode_MAX              = 3,
};

// Enum MeshModelingToolsExp.EExtrudeMeshSelectionInteractionMode
// NumValues: 0x0003
enum class EExtrudeMeshSelectionInteractionMode : uint8
{
	Interactive                              = 0,
	Fixed                                    = 1,
	EExtrudeMeshSelectionInteractionMode_MAX = 2,
};

// Enum MeshModelingToolsExp.EExtrudeMeshSelectionRegionModifierMode
// NumValues: 0x0004
enum class EExtrudeMeshSelectionRegionModifierMode : uint8
{
	OriginalShape                            = 0,
	FlattenToPlane                           = 1,
	RaycastToPlane                           = 2,
	EExtrudeMeshSelectionRegionModifierMode_MAX = 3,
};

// Enum MeshModelingToolsExp.EPlaneBrushSideMode
// NumValues: 0x0004
enum class EPlaneBrushSideMode : uint8
{
	BothSides                                = 0,
	PushDown                                 = 1,
	PullTowards                              = 2,
	EPlaneBrushSideMode_MAX                  = 3,
};

// Enum MeshModelingToolsExp.EVertexColorPaintBrushOpBlendMode
// NumValues: 0x0004
enum class EVertexColorPaintBrushOpBlendMode : uint32
{
	Lerp                                     = 0,
	Mix                                      = 1,
	Multiply                                 = 2,
	EVertexColorPaintBrushOpBlendMode_MAX    = 3,
};

// Enum MeshModelingToolsExp.EOffsetMeshSelectionInteractionMode
// NumValues: 0x0002
enum class EOffsetMeshSelectionInteractionMode : uint8
{
	Fixed                                    = 0,
	EOffsetMeshSelectionInteractionMode_MAX  = 1,
};

// Enum MeshModelingToolsExp.EOffsetMeshSelectionDirectionMode
// NumValues: 0x0004
enum class EOffsetMeshSelectionDirectionMode : uint8
{
	VertexNormals                            = 0,
	FaceNormals                              = 1,
	ConstantWidth                            = 2,
	EOffsetMeshSelectionDirectionMode_MAX    = 3,
};

// Enum MeshModelingToolsExp.EPatternToolShape
// NumValues: 0x0004
enum class EPatternToolShape : uint8
{
	Line                                     = 0,
	Grid                                     = 1,
	Circle                                   = 2,
	EPatternToolShape_MAX                    = 3,
};

// Enum MeshModelingToolsExp.EPatternToolSingleAxis
// NumValues: 0x0004
enum class EPatternToolSingleAxis : uint8
{
	XAxis                                    = 0,
	YAxis                                    = 1,
	ZAxis                                    = 2,
	EPatternToolSingleAxis_MAX               = 3,
};

// Enum MeshModelingToolsExp.EPatternToolSinglePlane
// NumValues: 0x0004
enum class EPatternToolSinglePlane : uint8
{
	XYPlane                                  = 0,
	XZPlane                                  = 1,
	YZPlane                                  = 2,
	EPatternToolSinglePlane_MAX              = 3,
};

// Enum MeshModelingToolsExp.EPatternToolAxisSpacingMode
// NumValues: 0x0004
enum class EPatternToolAxisSpacingMode : uint8
{
	ByCount                                  = 0,
	StepSize                                 = 1,
	Packed                                   = 2,
	EPatternToolAxisSpacingMode_MAX          = 3,
};

// Enum MeshModelingToolsExp.EMeshBoundaryConstraint
// NumValues: 0x0004
enum class EMeshBoundaryConstraint : uint8
{
	Fixed                                    = 7,
	Refine                                   = 5,
	Free                                     = 1,
	EMeshBoundaryConstraint_MAX              = 8,
};

// Enum MeshModelingToolsExp.EGroupBoundaryConstraint
// NumValues: 0x0005
enum class EGroupBoundaryConstraint : uint8
{
	Fixed                                    = 7,
	Refine                                   = 5,
	Free                                     = 1,
	Ignore                                   = 0,
	EGroupBoundaryConstraint_MAX             = 8,
};

// Enum MeshModelingToolsExp.EMaterialBoundaryConstraint
// NumValues: 0x0005
enum class EMaterialBoundaryConstraint : uint8
{
	Fixed                                    = 7,
	Refine                                   = 5,
	Free                                     = 1,
	Ignore                                   = 0,
	EMaterialBoundaryConstraint_MAX          = 8,
};

// Enum MeshModelingToolsExp.ERevolveSplineSampleMode
// NumValues: 0x0004
enum class ERevolveSplineSampleMode : uint8
{
	ControlPointsOnly                        = 0,
	PolyLineMaxError                         = 1,
	UniformSpacingAlongCurve                 = 2,
	ERevolveSplineSampleMode_MAX             = 3,
};

// Enum MeshModelingToolsExp.EAlignObjectsAlignTypes
// NumValues: 0x0003
enum class EAlignObjectsAlignTypes : uint32
{
	Pivots                                   = 0,
	BoundingBoxes                            = 1,
	EAlignObjectsAlignTypes_MAX              = 2,
};

// Enum MeshModelingToolsExp.EAlignObjectsAlignToOptions
// NumValues: 0x0004
enum class EAlignObjectsAlignToOptions : uint32
{
	FirstSelected                            = 0,
	LastSelected                             = 1,
	Combined                                 = 2,
	EAlignObjectsAlignToOptions_MAX          = 3,
};

// Enum MeshModelingToolsExp.EAlignObjectsBoxPoint
// NumValues: 0x0009
enum class EAlignObjectsBoxPoint : uint32
{
	Center                                   = 0,
	Bottom                                   = 1,
	Top                                      = 2,
	Left                                     = 3,
	Right                                    = 4,
	Front                                    = 5,
	Back                                     = 6,
	Min                                      = 7,
	Max                                      = 8,
};

// Enum MeshModelingToolsExp.EBakeMapType
// NumValues: 0x0011
enum class EBakeMapType : uint16
{
	None                                     = 0,
	TangentSpaceNormal                       = 1,
	ObjectSpaceNormal                        = 2,
	FaceNormal                               = 4,
	BentNormal                               = 8,
	Position                                 = 16,
	Curvature                                = 32,
	AmbientOcclusion                         = 64,
	Texture                                  = 128,
	MultiTexture                             = 256,
	VertexColor                              = 512,
	MaterialID                               = 1024,
	PolyGroupID                              = 2048,
	One                                      = 4096,
	Zero                                     = 8192,
	All                                      = 8191,
	EBakeMapType_MAX                         = 8193,
};

// Enum MeshModelingToolsExp.EBakeVertexOutput
// NumValues: 0x0003
enum class EBakeVertexOutput : uint32
{
	RGBA                                     = 0,
	PerChannel                               = 1,
	EBakeVertexOutput_MAX                    = 2,
};

// Enum MeshModelingToolsExp.EBakeVertexChannel
// NumValues: 0x0006
enum class EBakeVertexChannel : uint32
{
	R                                        = 0,
	G                                        = 1,
	B                                        = 2,
	A                                        = 3,
	RGBA                                     = 4,
	EBakeVertexChannel_MAX                   = 5,
};

// Enum MeshModelingToolsExp.EBakeScaleMethod
// NumValues: 0x0004
enum class EBakeScaleMethod : uint8
{
	BakeFullScale                            = 0,
	BakeNonuniformScale                      = 1,
	DoNotBakeScale                           = 2,
	EBakeScaleMethod_MAX                     = 3,
};

// Enum MeshModelingToolsExp.EConvertToPolygonsMode
// NumValues: 0x0008
enum class EConvertToPolygonsMode : uint32
{
	FaceNormalDeviation                      = 0,
	FindPolygons                             = 1,
	FromUVIslands                            = 2,
	FromNormalSeams                          = 3,
	FromConnectedTris                        = 4,
	FromFurthestPointSampling                = 5,
	CopyFromLayer                            = 6,
	EConvertToPolygonsMode_MAX               = 7,
};

// Enum MeshModelingToolsExp.ECubeGridToolFaceSelectionMode
// NumValues: 0x0005
enum class ECubeGridToolFaceSelectionMode : uint32
{
	OutsideBasedOnNormal                     = 0,
	InsideBasedOnNormal                      = 1,
	OutsideBasedOnViewRay                    = 2,
	InsideBasedOnViewRay                     = 3,
	ECubeGridToolFaceSelectionMode_MAX       = 4,
};

// Enum MeshModelingToolsExp.ECubeGridToolAction
// NumValues: 0x000C
enum class ECubeGridToolAction : uint8
{
	NoAction                                 = 0,
	Push                                     = 1,
	Pull                                     = 2,
	Flip                                     = 3,
	SlideForward                             = 4,
	SlideBack                                = 5,
	DecreaseGridPower                        = 6,
	IncreaseGridPower                        = 7,
	CornerMode                               = 8,
	ResetFromActor                           = 9,
	AcceptAndStartNew                        = 10,
	ECubeGridToolAction_MAX                  = 11,
};

// Enum MeshModelingToolsExp.EGroupTopologyDeformationStrategy
// NumValues: 0x0003
enum class EGroupTopologyDeformationStrategy : uint8
{
	Linear                                   = 0,
	Laplacian                                = 1,
	EGroupTopologyDeformationStrategy_MAX    = 2,
};

// Enum MeshModelingToolsExp.EWeightScheme
// NumValues: 0x0008
enum class EWeightScheme : uint32
{
	Uniform                                  = 0,
	Umbrella                                 = 1,
	Valence                                  = 2,
	MeanValue                                = 3,
	Cotangent                                = 4,
	ClampedCotangent                         = 5,
	IDTCotangent                             = 6,
	EWeightScheme_MAX                        = 7,
};

// Enum MeshModelingToolsExp.EQuickTransformerMode
// NumValues: 0x0003
enum class EQuickTransformerMode : uint8
{
	AxisTranslation                          = 0,
	AxisRotation                             = 1,
	EQuickTransformerMode_MAX                = 2,
};

// Enum MeshModelingToolsExp.EDisplaceMeshToolDisplaceType
// NumValues: 0x0006
enum class EDisplaceMeshToolDisplaceType : uint8
{
	Constant                                 = 0,
	DisplacementMap                          = 1,
	RandomNoise                              = 2,
	PerlinNoise                              = 3,
	SineWave                                 = 4,
	EDisplaceMeshToolDisplaceType_MAX        = 5,
};

// Enum MeshModelingToolsExp.EDisplaceMeshToolSubdivisionType
// NumValues: 0x0003
enum class EDisplaceMeshToolSubdivisionType : uint8
{
	Flat                                     = 0,
	PNTriangles                              = 1,
	EDisplaceMeshToolSubdivisionType_MAX     = 2,
};

// Enum MeshModelingToolsExp.EDisplaceMeshToolTriangleSelectionType
// NumValues: 0x0003
enum class EDisplaceMeshToolTriangleSelectionType : uint8
{
	None                                     = 0,
	Material                                 = 1,
	EDisplaceMeshToolTriangleSelectionType_MAX = 2,
};

// Enum MeshModelingToolsExp.EDisplaceMeshToolChannelType
// NumValues: 0x0005
enum class EDisplaceMeshToolChannelType : uint8
{
	Red                                      = 0,
	Green                                    = 1,
	Blue                                     = 2,
	Alpha                                    = 3,
	EDisplaceMeshToolChannelType_MAX         = 4,
};

// Enum MeshModelingToolsExp.EDrawPolyPathWidthMode
// NumValues: 0x0003
enum class EDrawPolyPathWidthMode : uint32
{
	Fixed                                    = 0,
	Interactive                              = 1,
	EDrawPolyPathWidthMode_MAX               = 2,
};

// Enum MeshModelingToolsExp.EDrawPolyPathRadiusMode
// NumValues: 0x0003
enum class EDrawPolyPathRadiusMode : uint32
{
	Fixed                                    = 0,
	Interactive                              = 1,
	EDrawPolyPathRadiusMode_MAX              = 2,
};

// Enum MeshModelingToolsExp.EDrawPolyPathExtrudeMode
// NumValues: 0x0006
enum class EDrawPolyPathExtrudeMode : uint32
{
	Flat                                     = 0,
	Fixed                                    = 1,
	Interactive                              = 2,
	RampFixed                                = 3,
	RampInteractive                          = 4,
	EDrawPolyPathExtrudeMode_MAX             = 5,
};

// Enum MeshModelingToolsExp.EDrawPolyPathExtrudeDirection
// NumValues: 0x0008
enum class EDrawPolyPathExtrudeDirection : uint32
{
	SelectionNormal                          = 0,
	WorldX                                   = 1,
	WorldY                                   = 2,
	WorldZ                                   = 3,
	LocalX                                   = 4,
	LocalY                                   = 5,
	LocalZ                                   = 6,
	EDrawPolyPathExtrudeDirection_MAX        = 7,
};

// Enum MeshModelingToolsExp.EDynamicMeshSculptBrushType
// NumValues: 0x0012
enum class EDynamicMeshSculptBrushType : uint8
{
	Move                                     = 0,
	PullKelvin                               = 1,
	PullSharpKelvin                          = 2,
	Smooth                                   = 3,
	Offset                                   = 4,
	SculptView                               = 5,
	SculptMax                                = 6,
	Inflate                                  = 7,
	ScaleKelvin                              = 8,
	Pinch                                    = 9,
	TwistKelvin                              = 10,
	Flatten                                  = 11,
	Plane                                    = 12,
	PlaneViewAligned                         = 13,
	FixedPlane                               = 14,
	Resample                                 = 15,
	LastValue                                = 16,
	EDynamicMeshSculptBrushType_MAX          = 17,
};

// Enum MeshModelingToolsExp.EEditPivotSnapDragRotationMode
// NumValues: 0x0005
enum class EEditPivotSnapDragRotationMode : uint8
{
	Ignore                                   = 0,
	Align                                    = 1,
	AlignFlipped                             = 2,
	LastValue                                = 3,
	EEditPivotSnapDragRotationMode_MAX       = 4,
};

// Enum MeshModelingToolsExp.EEditPivotToolActions
// NumValues: 0x000A
enum class EEditPivotToolActions : uint8
{
	NoAction                                 = 0,
	Center                                   = 1,
	Bottom                                   = 2,
	Top                                      = 3,
	Left                                     = 4,
	Right                                    = 5,
	Front                                    = 6,
	Back                                     = 7,
	WorldOrigin                              = 8,
	EEditPivotToolActions_MAX                = 9,
};

// Enum MeshModelingToolsExp.EHoleFillToolActions
// NumValues: 0x0004
enum class EHoleFillToolActions : uint8
{
	NoAction                                 = 0,
	SelectAll                                = 1,
	ClearSelection                           = 2,
	EHoleFillToolActions_MAX                 = 3,
};

// Enum MeshModelingToolsExp.ELatticeInterpolationType
// NumValues: 0x0003
enum class ELatticeInterpolationType : uint8
{
	Linear                                   = 0,
	Cubic                                    = 1,
	ELatticeInterpolationType_MAX            = 2,
};

// Enum MeshModelingToolsExp.ELatticeDeformerToolAction
// NumValues: 0x0004
enum class ELatticeDeformerToolAction : uint8
{
	NoAction                                 = 0,
	Constrain                                = 1,
	ClearConstraints                         = 2,
	ELatticeDeformerToolAction_MAX           = 3,
};

// Enum MeshModelingToolsExp.EBrushActionMode
// NumValues: 0x0003
enum class EBrushActionMode : uint32
{
	Paint                                    = 0,
	FloodFill                                = 1,
	EBrushActionMode_MAX                     = 2,
};

// Enum MeshModelingToolsExp.EMeshAttributePaintToolActions
// NumValues: 0x0002
enum class EMeshAttributePaintToolActions : uint8
{
	NoAction                                 = 0,
	EMeshAttributePaintToolActions_MAX       = 1,
};

// Enum MeshModelingToolsExp.EMeshGroupPaintInteractionType
// NumValues: 0x0006
enum class EMeshGroupPaintInteractionType : uint8
{
	Brush                                    = 0,
	Fill                                     = 1,
	GroupFill                                = 2,
	PolyLasso                                = 3,
	LastValue                                = 4,
	EMeshGroupPaintInteractionType_MAX       = 5,
};

// Enum MeshModelingToolsExp.EMeshGroupPaintBrushType
// NumValues: 0x0004
enum class EMeshGroupPaintBrushType : uint8
{
	Paint                                    = 0,
	Erase                                    = 1,
	LastValue                                = 2,
	EMeshGroupPaintBrushType_MAX             = 3,
};

// Enum MeshModelingToolsExp.EMeshGroupPaintBrushAreaType
// NumValues: 0x0003
enum class EMeshGroupPaintBrushAreaType : uint8
{
	Connected                                = 0,
	Volumetric                               = 1,
	EMeshGroupPaintBrushAreaType_MAX         = 2,
};

// Enum MeshModelingToolsExp.EMeshGroupPaintVisibilityType
// NumValues: 0x0004
enum class EMeshGroupPaintVisibilityType : uint8
{
	None                                     = 0,
	FrontFacing                              = 1,
	Unoccluded                               = 2,
	EMeshGroupPaintVisibilityType_MAX        = 3,
};

// Enum MeshModelingToolsExp.EMeshGroupPaintToolActions
// NumValues: 0x000A
enum class EMeshGroupPaintToolActions : uint8
{
	NoAction                                 = 0,
	ClearFrozen                              = 1,
	FreezeCurrent                            = 2,
	FreezeOthers                             = 3,
	GrowCurrent                              = 4,
	ShrinkCurrent                            = 5,
	ClearCurrent                             = 6,
	FloodFillCurrent                         = 7,
	ClearAll                                 = 8,
	EMeshGroupPaintToolActions_MAX           = 9,
};

// Enum MeshModelingToolsExp.EMeshInspectorToolDrawIndexMode
// NumValues: 0x0006
enum class EMeshInspectorToolDrawIndexMode : uint8
{
	None                                     = 0,
	VertexID                                 = 1,
	TriangleID                               = 2,
	GroupID                                  = 3,
	EdgeID                                   = 4,
	EMeshInspectorToolDrawIndexMode_MAX      = 5,
};

// Enum MeshModelingToolsExp.EMeshInspectorMaterialMode
// NumValues: 0x000A
enum class EMeshInspectorMaterialMode : uint8
{
	Original                                 = 0,
	FlatShaded                               = 1,
	Grey                                     = 2,
	Transparent                              = 3,
	TangentNormal                            = 4,
	VertexColor                              = 5,
	GroupColor                               = 6,
	Checkerboard                             = 7,
	Override                                 = 8,
	EMeshInspectorMaterialMode_MAX           = 9,
};

// Enum MeshModelingToolsExp.EMeshSelectionToolActions
// NumValues: 0x0015
enum class EMeshSelectionToolActions : uint8
{
	NoAction                                 = 0,
	SelectAll                                = 1,
	SelectAllByMaterial                      = 2,
	ClearSelection                           = 3,
	InvertSelection                          = 4,
	GrowSelection                            = 5,
	ShrinkSelection                          = 6,
	ExpandToConnected                        = 7,
	SelectLargestComponentByTriCount         = 8,
	SelectLargestComponentByArea             = 9,
	OptimizeSelection                        = 10,
	DeleteSelected                           = 11,
	DisconnectSelected                       = 12,
	SeparateSelected                         = 13,
	DuplicateSelected                        = 14,
	FlipSelected                             = 15,
	CreateGroup                              = 16,
	SmoothBoundary                           = 17,
	CycleSelectionMode                       = 18,
	CycleViewMode                            = 19,
	EMeshSelectionToolActions_MAX            = 20,
};

// Enum MeshModelingToolsExp.EMeshSelectionToolPrimaryMode
// NumValues: 0x000B
enum class EMeshSelectionToolPrimaryMode : uint32
{
	Brush                                    = 0,
	VolumetricBrush                          = 1,
	AngleFiltered                            = 2,
	Visible                                  = 3,
	AllConnected                             = 4,
	AllInGroup                               = 5,
	ByMaterial                               = 6,
	ByMaterialAll                            = 7,
	ByUVIsland                               = 8,
	AllWithinAngle                           = 9,
	EMeshSelectionToolPrimaryMode_MAX        = 10,
};

// Enum MeshModelingToolsExp.EMeshFacesColorMode
// NumValues: 0x0005
enum class EMeshFacesColorMode : uint32
{
	None                                     = 0,
	ByGroup                                  = 1,
	ByMaterialID                             = 2,
	ByUVIsland                               = 3,
	EMeshFacesColorMode_MAX                  = 4,
};

// Enum MeshModelingToolsExp.ENonlinearOperationType
// NumValues: 0x0004
enum class ENonlinearOperationType : uint8
{
	Bend                                     = 0,
	Flare                                    = 1,
	Twist                                    = 2,
	ENonlinearOperationType_MAX              = 3,
};

// Enum MeshModelingToolsExp.EFlareProfileType
// NumValues: 0x0004
enum class EFlareProfileType : uint8
{
	SinMode                                  = 0,
	SinSquaredMode                           = 1,
	TriangleMode                             = 2,
	EFlareProfileType_MAX                    = 3,
};

// Enum MeshModelingToolsExp.EMeshSpaceDeformerToolAction
// NumValues: 0x0003
enum class EMeshSpaceDeformerToolAction : uint8
{
	NoAction                                 = 0,
	ShiftToCenter                            = 1,
	EMeshSpaceDeformerToolAction_MAX         = 2,
};

// Enum MeshModelingToolsExp.EMeshVertexPaintInteractionType
// NumValues: 0x0007
enum class EMeshVertexPaintInteractionType : uint8
{
	Brush                                    = 0,
	TriFill                                  = 1,
	Fill                                     = 2,
	GroupFill                                = 3,
	PolyLasso                                = 4,
	LastValue                                = 5,
	EMeshVertexPaintInteractionType_MAX      = 6,
};

// Enum MeshModelingToolsExp.EMeshVertexPaintColorChannel
// NumValues: 0x0005
enum class EMeshVertexPaintColorChannel : uint8
{
	Red                                      = 0,
	Green                                    = 1,
	Blue                                     = 2,
	Alpha                                    = 3,
	EMeshVertexPaintColorChannel_MAX         = 4,
};

// Enum MeshModelingToolsExp.EMeshVertexPaintColorBlendMode
// NumValues: 0x0004
enum class EMeshVertexPaintColorBlendMode : uint8
{
	Lerp                                     = 0,
	Mix                                      = 1,
	Multiply                                 = 2,
	EMeshVertexPaintColorBlendMode_MAX       = 3,
};

// Enum MeshModelingToolsExp.EMeshVertexPaintBrushType
// NumValues: 0x0006
enum class EMeshVertexPaintBrushType : uint8
{
	Paint                                    = 0,
	Erase                                    = 1,
	Soften                                   = 2,
	Smooth                                   = 3,
	LastValue                                = 4,
	EMeshVertexPaintBrushType_MAX            = 5,
};

// Enum MeshModelingToolsExp.EMeshVertexPaintSecondaryActionType
// NumValues: 0x0004
enum class EMeshVertexPaintSecondaryActionType : uint8
{
	Erase                                    = 0,
	Soften                                   = 1,
	Smooth                                   = 2,
	EMeshVertexPaintSecondaryActionType_MAX  = 3,
};

// Enum MeshModelingToolsExp.EMeshVertexPaintBrushAreaType
// NumValues: 0x0003
enum class EMeshVertexPaintBrushAreaType : uint8
{
	Connected                                = 0,
	Volumetric                               = 1,
	EMeshVertexPaintBrushAreaType_MAX        = 2,
};

// Enum MeshModelingToolsExp.EMeshVertexPaintVisibilityType
// NumValues: 0x0004
enum class EMeshVertexPaintVisibilityType : uint8
{
	None                                     = 0,
	FrontFacing                              = 1,
	Unoccluded                               = 2,
	EMeshVertexPaintVisibilityType_MAX       = 3,
};

// Enum MeshModelingToolsExp.EMeshVertexPaintMaterialMode
// NumValues: 0x0004
enum class EMeshVertexPaintMaterialMode : uint8
{
	LitVertexColor                           = 0,
	UnlitVertexColor                         = 1,
	OriginalMaterial                         = 2,
	EMeshVertexPaintMaterialMode_MAX         = 3,
};

// Enum MeshModelingToolsExp.EMeshVertexPaintToolActions
// NumValues: 0x0007
enum class EMeshVertexPaintToolActions : uint8
{
	NoAction                                 = 0,
	PaintAll                                 = 1,
	EraseAll                                 = 2,
	FillBlack                                = 3,
	FillWhite                                = 4,
	ApplyCurrentUtility                      = 5,
	EMeshVertexPaintToolActions_MAX          = 6,
};

// Enum MeshModelingToolsExp.EMeshVertexPaintToolUtilityOperations
// NumValues: 0x0009
enum class EMeshVertexPaintToolUtilityOperations : uint32
{
	BlendAllSeams                            = 0,
	FillChannels                             = 1,
	InvertChannels                           = 2,
	CopyChannelToChannel                     = 3,
	SwapChannels                             = 4,
	CopyFromWeightMap                        = 5,
	CopyToOtherLODs                          = 6,
	CopyToSingleLOD                          = 7,
	EMeshVertexPaintToolUtilityOperations_MAX = 8,
};

// Enum MeshModelingToolsExp.EMeshVertexSculptBrushType
// NumValues: 0x0012
enum class EMeshVertexSculptBrushType : uint8
{
	Move                                     = 0,
	PullKelvin                               = 1,
	PullSharpKelvin                          = 2,
	Smooth                                   = 3,
	SmoothFill                               = 4,
	Offset                                   = 5,
	SculptView                               = 6,
	SculptMax                                = 7,
	Inflate                                  = 8,
	ScaleKelvin                              = 9,
	Pinch                                    = 10,
	TwistKelvin                              = 11,
	Flatten                                  = 12,
	Plane                                    = 13,
	PlaneViewAligned                         = 14,
	FixedPlane                               = 15,
	LastValue                                = 16,
	EMeshVertexSculptBrushType_MAX           = 17,
};

// Enum MeshModelingToolsExp.EMeshVertexSculptBrushFilterType
// NumValues: 0x0004
enum class EMeshVertexSculptBrushFilterType : uint8
{
	None                                     = 0,
	Component                                = 1,
	PolyGroup                                = 2,
	EMeshVertexSculptBrushFilterType_MAX     = 3,
};

// Enum MeshModelingToolsExp.EMirrorSaveMode
// NumValues: 0x0003
enum class EMirrorSaveMode : uint8
{
	InputObjects                             = 0,
	NewObjects                               = 1,
	EMirrorSaveMode_MAX                      = 2,
};

// Enum MeshModelingToolsExp.EMirrorOperationMode
// NumValues: 0x0003
enum class EMirrorOperationMode : uint8
{
	MirrorAndAppend                          = 0,
	MirrorExisting                           = 1,
	EMirrorOperationMode_MAX                 = 2,
};

// Enum MeshModelingToolsExp.EMirrorToolAction
// NumValues: 0x0009
enum class EMirrorToolAction : uint8
{
	NoAction                                 = 0,
	ShiftToCenter                            = 1,
	Left                                     = 2,
	Right                                    = 3,
	Up                                       = 4,
	Down                                     = 5,
	Forward                                  = 6,
	Backward                                 = 7,
	EMirrorToolAction_MAX                    = 8,
};

// Enum MeshModelingToolsExp.EOffsetMeshToolOffsetType
// NumValues: 0x0003
enum class EOffsetMeshToolOffsetType : uint8
{
	Iterative                                = 0,
	Implicit                                 = 1,
	EOffsetMeshToolOffsetType_MAX            = 2,
};

// Enum MeshModelingToolsExp.ECollisionGeometryMode
// NumValues: 0x0005
enum class ECollisionGeometryMode : uint32
{
	Default                                  = 0,
	SimpleAndComplex                         = 1,
	UseSimpleAsComplex                       = 2,
	UseComplexAsSimple                       = 3,
	ECollisionGeometryMode_MAX               = 4,
};

// Enum MeshModelingToolsExp.EExtractCollisionOutputType
// NumValues: 0x0003
enum class EExtractCollisionOutputType : uint8
{
	Simple                                   = 0,
	Complex                                  = 1,
	EExtractCollisionOutputType_MAX          = 2,
};

// Enum MeshModelingToolsExp.ESetCollisionGeometryInputMode
// NumValues: 0x0005
enum class ESetCollisionGeometryInputMode : uint32
{
	CombineAll                               = 0,
	PerInputObject                           = 1,
	PerMeshComponent                         = 2,
	PerMeshGroup                             = 3,
	ESetCollisionGeometryInputMode_MAX       = 4,
};

// Enum MeshModelingToolsExp.ECollisionGeometryType
// NumValues: 0x000B
enum class ECollisionGeometryType : uint32
{
	CopyFromInputs                           = 0,
	AlignedBoxes                             = 1,
	OrientedBoxes                            = 2,
	MinimalSpheres                           = 3,
	Capsules                                 = 4,
	ConvexHulls                              = 5,
	SweptHulls                               = 6,
	LevelSets                                = 7,
	MinVolume                                = 10,
	Empty                                    = 11,
	ECollisionGeometryType_MAX               = 12,
};

// Enum MeshModelingToolsExp.EProjectedHullAxis
// NumValues: 0x0006
enum class EProjectedHullAxis : uint32
{
	X                                        = 0,
	Y                                        = 1,
	Z                                        = 2,
	SmallestBoxDimension                     = 3,
	SmallestVolume                           = 4,
	EProjectedHullAxis_MAX                   = 5,
};

// Enum MeshModelingToolsExp.ESimpleCollisionEditorToolAction
// NumValues: 0x0008
enum class ESimpleCollisionEditorToolAction : uint8
{
	NoAction                                 = 0,
	AddSphere                                = 1,
	AddBox                                   = 2,
	AddCapsule                               = 3,
	Duplicate                                = 4,
	DeleteSelected                           = 5,
	DeleteAll                                = 6,
	ESimpleCollisionEditorToolAction_MAX     = 7,
};

// Enum MeshModelingToolsExp.EPlaneCutToolActions
// NumValues: 0x0004
enum class EPlaneCutToolActions : uint8
{
	NoAction                                 = 0,
	Cut                                      = 1,
	FlipPlane                                = 2,
	EPlaneCutToolActions_MAX                 = 3,
};

// Enum MeshModelingToolsExp.EOcclusionTriangleSamplingUIMode
// NumValues: 0x0003
enum class EOcclusionTriangleSamplingUIMode : uint8
{
	Vertices                                 = 0,
	VerticesAndCentroids                     = 1,
	EOcclusionTriangleSamplingUIMode_MAX     = 2,
};

// Enum MeshModelingToolsExp.EOcclusionCalculationUIMode
// NumValues: 0x0003
enum class EOcclusionCalculationUIMode : uint8
{
	GeneralizedWindingNumber                 = 0,
	RaycastOcclusionSamples                  = 1,
	EOcclusionCalculationUIMode_MAX          = 2,
};

// Enum MeshModelingToolsExp.EOccludedAction
// NumValues: 0x0003
enum class EOccludedAction : uint8
{
	Remove                                   = 0,
	SetNewGroup                              = 1,
	EOccludedAction_MAX                      = 2,
};

// Enum MeshModelingToolsExp.EBrushToolSizeType
// NumValues: 0x0003
enum class EBrushToolSizeType : uint8
{
	Adaptive                                 = 0,
	World                                    = 1,
	EBrushToolSizeType_MAX                   = 2,
};

// Enum MeshModelingToolsExp.EMeshSculptFalloffType
// NumValues: 0x000A
enum class EMeshSculptFalloffType : uint8
{
	Smooth                                   = 0,
	Linear                                   = 1,
	Inverse                                  = 2,
	Round                                    = 3,
	BoxSmooth                                = 4,
	BoxLinear                                = 5,
	BoxInverse                               = 6,
	BoxRound                                 = 7,
	LastValue                                = 8,
	EMeshSculptFalloffType_MAX               = 9,
};

// Enum MeshModelingToolsExp.ESmoothMeshToolSmoothType
// NumValues: 0x0004
enum class ESmoothMeshToolSmoothType : uint8
{
	Iterative                                = 0,
	Implicit                                 = 1,
	Diffusion                                = 2,
	ESmoothMeshToolSmoothType_MAX            = 3,
};

// Enum MeshModelingToolsExp.ETransformMeshesTransformMode
// NumValues: 0x0005
enum class ETransformMeshesTransformMode : uint8
{
	SharedGizmo                              = 0,
	SharedGizmoLocal                         = 1,
	PerObjectGizmo                           = 2,
	LastValue                                = 3,
	ETransformMeshesTransformMode_MAX        = 4,
};

// Enum MeshModelingToolsExp.ETransformMeshesSnapDragSource
// NumValues: 0x0004
enum class ETransformMeshesSnapDragSource : uint8
{
	ClickPoint                               = 0,
	Pivot                                    = 1,
	LastValue                                = 2,
	ETransformMeshesSnapDragSource_MAX       = 3,
};

// Enum MeshModelingToolsExp.ETransformMeshesSnapDragRotationMode
// NumValues: 0x0005
enum class ETransformMeshesSnapDragRotationMode : uint8
{
	Ignore                                   = 0,
	Align                                    = 1,
	AlignFlipped                             = 2,
	LastValue                                = 3,
	ETransformMeshesSnapDragRotationMode_MAX = 4,
};

// Enum MeshModelingToolsExp.EVoxelBlendOperation
// NumValues: 0x0003
enum class EVoxelBlendOperation : uint8
{
	Union                                    = 0,
	Subtract                                 = 1,
	EVoxelBlendOperation_MAX                 = 2,
};

// Enum MeshModelingToolsExp.EWeldMeshEdgesAttributeUIMode
// NumValues: 0x0004
enum class EWeldMeshEdgesAttributeUIMode : uint8
{
	None                                     = 0,
	OnWeldedMeshEdgesOnly                    = 1,
	OnFullMesh                               = 2,
	EWeldMeshEdgesAttributeUIMode_MAX        = 3,
};

// ScriptStruct MeshModelingToolsExp.BakeMultiMeshDetailProperties
// 0x0018 (0x0018 - 0x0000)
struct FBakeMultiMeshDetailProperties final
{
public:
	class UStaticMesh*                            SourceMesh;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             SourceTexture;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SourceTextureUVLayer;                              // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBakeMultiMeshDetailProperties) == 0x000008, "Wrong alignment on FBakeMultiMeshDetailProperties");
static_assert(sizeof(FBakeMultiMeshDetailProperties) == 0x000018, "Wrong size on FBakeMultiMeshDetailProperties");
static_assert(offsetof(FBakeMultiMeshDetailProperties, SourceMesh) == 0x000000, "Member 'FBakeMultiMeshDetailProperties::SourceMesh' has a wrong offset!");
static_assert(offsetof(FBakeMultiMeshDetailProperties, SourceTexture) == 0x000008, "Member 'FBakeMultiMeshDetailProperties::SourceTexture' has a wrong offset!");
static_assert(offsetof(FBakeMultiMeshDetailProperties, SourceTextureUVLayer) == 0x000010, "Member 'FBakeMultiMeshDetailProperties::SourceTextureUVLayer' has a wrong offset!");

// ScriptStruct MeshModelingToolsExp.PerlinLayerProperties
// 0x0008 (0x0008 - 0x0000)
struct FPerlinLayerProperties final
{
public:
	float                                         Frequency;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Intensity;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPerlinLayerProperties) == 0x000004, "Wrong alignment on FPerlinLayerProperties");
static_assert(sizeof(FPerlinLayerProperties) == 0x000008, "Wrong size on FPerlinLayerProperties");
static_assert(offsetof(FPerlinLayerProperties, Frequency) == 0x000000, "Member 'FPerlinLayerProperties::Frequency' has a wrong offset!");
static_assert(offsetof(FPerlinLayerProperties, Intensity) == 0x000004, "Member 'FPerlinLayerProperties::Intensity' has a wrong offset!");

// ScriptStruct MeshModelingToolsExp.EditPivotTarget
// 0x0010 (0x0010 - 0x0000)
struct FEditPivotTarget final
{
public:
	class UTransformProxy*                        TransformProxy;                                    // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCombinedTransformGizmo*                TransformGizmo;                                    // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEditPivotTarget) == 0x000008, "Wrong alignment on FEditPivotTarget");
static_assert(sizeof(FEditPivotTarget) == 0x000010, "Wrong size on FEditPivotTarget");
static_assert(offsetof(FEditPivotTarget, TransformProxy) == 0x000000, "Member 'FEditPivotTarget::TransformProxy' has a wrong offset!");
static_assert(offsetof(FEditPivotTarget, TransformGizmo) == 0x000008, "Member 'FEditPivotTarget::TransformGizmo' has a wrong offset!");

// ScriptStruct MeshModelingToolsExp.PhysicsSphereData
// 0x00A0 (0x00A0 - 0x0000)
struct FPhysicsSphereData final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Edit, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKShapeElem                            Element;                                           // 0x0070(0x0030)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhysicsSphereData) == 0x000010, "Wrong alignment on FPhysicsSphereData");
static_assert(sizeof(FPhysicsSphereData) == 0x0000A0, "Wrong size on FPhysicsSphereData");
static_assert(offsetof(FPhysicsSphereData, Radius) == 0x000000, "Member 'FPhysicsSphereData::Radius' has a wrong offset!");
static_assert(offsetof(FPhysicsSphereData, Transform) == 0x000010, "Member 'FPhysicsSphereData::Transform' has a wrong offset!");
static_assert(offsetof(FPhysicsSphereData, Element) == 0x000070, "Member 'FPhysicsSphereData::Element' has a wrong offset!");

// ScriptStruct MeshModelingToolsExp.PhysicsBoxData
// 0x00B0 (0x00B0 - 0x0000)
struct FPhysicsBoxData final
{
public:
	struct FVector                                Dimensions;                                        // 0x0000(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0020(0x0060)(Edit, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKShapeElem                            Element;                                           // 0x0080(0x0030)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhysicsBoxData) == 0x000010, "Wrong alignment on FPhysicsBoxData");
static_assert(sizeof(FPhysicsBoxData) == 0x0000B0, "Wrong size on FPhysicsBoxData");
static_assert(offsetof(FPhysicsBoxData, Dimensions) == 0x000000, "Member 'FPhysicsBoxData::Dimensions' has a wrong offset!");
static_assert(offsetof(FPhysicsBoxData, Transform) == 0x000020, "Member 'FPhysicsBoxData::Transform' has a wrong offset!");
static_assert(offsetof(FPhysicsBoxData, Element) == 0x000080, "Member 'FPhysicsBoxData::Element' has a wrong offset!");

// ScriptStruct MeshModelingToolsExp.PhysicsCapsuleData
// 0x00A0 (0x00A0 - 0x0000)
struct FPhysicsCapsuleData final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Edit, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKShapeElem                            Element;                                           // 0x0070(0x0030)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhysicsCapsuleData) == 0x000010, "Wrong alignment on FPhysicsCapsuleData");
static_assert(sizeof(FPhysicsCapsuleData) == 0x0000A0, "Wrong size on FPhysicsCapsuleData");
static_assert(offsetof(FPhysicsCapsuleData, Radius) == 0x000000, "Member 'FPhysicsCapsuleData::Radius' has a wrong offset!");
static_assert(offsetof(FPhysicsCapsuleData, Length) == 0x000004, "Member 'FPhysicsCapsuleData::Length' has a wrong offset!");
static_assert(offsetof(FPhysicsCapsuleData, Transform) == 0x000010, "Member 'FPhysicsCapsuleData::Transform' has a wrong offset!");
static_assert(offsetof(FPhysicsCapsuleData, Element) == 0x000070, "Member 'FPhysicsCapsuleData::Element' has a wrong offset!");

// ScriptStruct MeshModelingToolsExp.PhysicsConvexData
// 0x0038 (0x0038 - 0x0000)
struct FPhysicsConvexData final
{
public:
	int32                                         NumVertices;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumFaces;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKShapeElem                            Element;                                           // 0x0008(0x0030)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhysicsConvexData) == 0x000008, "Wrong alignment on FPhysicsConvexData");
static_assert(sizeof(FPhysicsConvexData) == 0x000038, "Wrong size on FPhysicsConvexData");
static_assert(offsetof(FPhysicsConvexData, NumVertices) == 0x000000, "Member 'FPhysicsConvexData::NumVertices' has a wrong offset!");
static_assert(offsetof(FPhysicsConvexData, NumFaces) == 0x000004, "Member 'FPhysicsConvexData::NumFaces' has a wrong offset!");
static_assert(offsetof(FPhysicsConvexData, Element) == 0x000008, "Member 'FPhysicsConvexData::Element' has a wrong offset!");

// ScriptStruct MeshModelingToolsExp.PhysicsLevelSetData
// 0x0030 (0x0030 - 0x0000)
struct FPhysicsLevelSetData final
{
public:
	struct FKShapeElem                            Element;                                           // 0x0000(0x0030)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhysicsLevelSetData) == 0x000008, "Wrong alignment on FPhysicsLevelSetData");
static_assert(sizeof(FPhysicsLevelSetData) == 0x000030, "Wrong size on FPhysicsLevelSetData");
static_assert(offsetof(FPhysicsLevelSetData, Element) == 0x000000, "Member 'FPhysicsLevelSetData::Element' has a wrong offset!");

// ScriptStruct MeshModelingToolsExp.BrushToolRadius
// 0x0014 (0x0014 - 0x0000)
struct FBrushToolRadius final
{
public:
	EBrushToolSizeType                            SizeType;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AdaptiveSize;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WorldRadius;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x8];                                        // 0x000C(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrushToolRadius) == 0x000004, "Wrong alignment on FBrushToolRadius");
static_assert(sizeof(FBrushToolRadius) == 0x000014, "Wrong size on FBrushToolRadius");
static_assert(offsetof(FBrushToolRadius, SizeType) == 0x000000, "Member 'FBrushToolRadius::SizeType' has a wrong offset!");
static_assert(offsetof(FBrushToolRadius, AdaptiveSize) == 0x000004, "Member 'FBrushToolRadius::AdaptiveSize' has a wrong offset!");
static_assert(offsetof(FBrushToolRadius, WorldRadius) == 0x000008, "Member 'FBrushToolRadius::WorldRadius' has a wrong offset!");

// ScriptStruct MeshModelingToolsExp.TransformMeshesTarget
// 0x0010 (0x0010 - 0x0000)
struct FTransformMeshesTarget final
{
public:
	class UTransformProxy*                        TransformProxy;                                    // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCombinedTransformGizmo*                TransformGizmo;                                    // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTransformMeshesTarget) == 0x000008, "Wrong alignment on FTransformMeshesTarget");
static_assert(sizeof(FTransformMeshesTarget) == 0x000010, "Wrong size on FTransformMeshesTarget");
static_assert(offsetof(FTransformMeshesTarget, TransformProxy) == 0x000000, "Member 'FTransformMeshesTarget::TransformProxy' has a wrong offset!");
static_assert(offsetof(FTransformMeshesTarget, TransformGizmo) == 0x000008, "Member 'FTransformMeshesTarget::TransformGizmo' has a wrong offset!");

}

