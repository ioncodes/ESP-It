#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RigVM

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "RigVM_structs.hpp"
#include "Engine_classes.hpp"
#include "DeveloperSettings_classes.hpp"


namespace SDK
{

// Class RigVM.RigVMGraphFunctionHost
// 0x0000 (0x0028 - 0x0028)
class IRigVMGraphFunctionHost final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMGraphFunctionHost">();
	}
	static class IRigVMGraphFunctionHost* GetDefaultObj()
	{
		return GetDefaultObjImpl<IRigVMGraphFunctionHost>();
	}
};
static_assert(alignof(IRigVMGraphFunctionHost) == 0x000008, "Wrong alignment on IRigVMGraphFunctionHost");
static_assert(sizeof(IRigVMGraphFunctionHost) == 0x000028, "Wrong size on IRigVMGraphFunctionHost");

// Class RigVM.RigVMBlueprintGeneratedClass
// 0x0028 (0x0388 - 0x0360)
class URigVMBlueprintGeneratedClass : public UBlueprintGeneratedClass
{
public:
	uint8                                         Pad_360[0x8];                                      // 0x0360(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigVMGraphFunctionStore               GraphFunctionStore;                                // 0x0368(0x0020)(NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMBlueprintGeneratedClass">();
	}
	static class URigVMBlueprintGeneratedClass* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigVMBlueprintGeneratedClass>();
	}
};
static_assert(alignof(URigVMBlueprintGeneratedClass) == 0x000008, "Wrong alignment on URigVMBlueprintGeneratedClass");
static_assert(sizeof(URigVMBlueprintGeneratedClass) == 0x000388, "Wrong size on URigVMBlueprintGeneratedClass");
static_assert(offsetof(URigVMBlueprintGeneratedClass, GraphFunctionStore) == 0x000368, "Member 'URigVMBlueprintGeneratedClass::GraphFunctionStore' has a wrong offset!");

// Class RigVM.RigVM
// 0x0368 (0x0390 - 0x0028)
class URigVM : public UObject
{
public:
	struct FRigVMMemoryStorageStruct              LiteralMemoryStorage;                              // 0x0028(0x0050)(NativeAccessSpecifierPublic)
	struct FRigVMMemoryStorageStruct              DefaultWorkMemoryStorage;                          // 0x0078(0x0050)(NativeAccessSpecifierPublic)
	struct FRigVMMemoryStorageStruct              DefaultDebugMemoryStorage;                         // 0x00C8(0x0050)(NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x20];                                     // 0x0118(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigVMByteCode                         ByteCodeStorage;                                   // 0x0138(0x00B0)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E8[0x8];                                      // 0x01E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigVMInstructionArray                 Instructions;                                      // 0x01F0(0x0010)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_200[0x8];                                      // 0x0200(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           FunctionNamesStorage;                              // 0x0208(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_218[0x38];                                     // 0x0218(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigVMParameter>                Parameters;                                        // 0x0250(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_260[0xD8];                                     // 0x0260(0x00D8)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        CachedVMHash;                                      // 0x0338(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_33C[0x54];                                     // 0x033C(0x0054)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 AddRigVMFunction(class UScriptStruct* InRigVMStruct, const class FName& InMethodName);
	bool Execute(struct FRigVMExtendedExecuteContext* Context, const class FName& InEntryName);
	bool GetParameterValueBool(const class FName& InParameterName, int32 InArrayIndex);
	double GetParameterValueDouble(const class FName& InParameterName, int32 InArrayIndex);
	float GetParameterValueFloat(const class FName& InParameterName, int32 InArrayIndex);
	int32 GetParameterValueInt(const class FName& InParameterName, int32 InArrayIndex);
	class FName GetParameterValueName(const class FName& InParameterName, int32 InArrayIndex);
	struct FQuat GetParameterValueQuat(const class FName& InParameterName, int32 InArrayIndex);
	class FString GetParameterValueString(const class FName& InParameterName, int32 InArrayIndex);
	struct FTransform GetParameterValueTransform(const class FName& InParameterName, int32 InArrayIndex);
	struct FVector GetParameterValueVector(const class FName& InParameterName, int32 InArrayIndex);
	struct FVector2D GetParameterValueVector2D(const class FName& InParameterName, int32 InArrayIndex);
	void SetParameterValueBool(const class FName& InParameterName, bool InValue, int32 InArrayIndex);
	void SetParameterValueDouble(const class FName& InParameterName, double InValue, int32 InArrayIndex);
	void SetParameterValueFloat(const class FName& InParameterName, float InValue, int32 InArrayIndex);
	void SetParameterValueInt(const class FName& InParameterName, int32 InValue, int32 InArrayIndex);
	void SetParameterValueName(const class FName& InParameterName, const class FName& InValue, int32 InArrayIndex);
	void SetParameterValueQuat(const class FName& InParameterName, const struct FQuat& InValue, int32 InArrayIndex);
	void SetParameterValueString(const class FName& InParameterName, const class FString& InValue, int32 InArrayIndex);
	void SetParameterValueTransform(const class FName& InParameterName, const struct FTransform& InValue, int32 InArrayIndex);
	void SetParameterValueVector(const class FName& InParameterName, const struct FVector& InValue, int32 InArrayIndex);
	void SetParameterValueVector2D(const class FName& InParameterName, const struct FVector2D& InValue, int32 InArrayIndex);

	class FString GetRigVMFunctionName(int32 InFunctionIndex) const;
	struct FRigVMStatistics GetStatistics() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVM">();
	}
	static class URigVM* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigVM>();
	}
};
static_assert(alignof(URigVM) == 0x000008, "Wrong alignment on URigVM");
static_assert(sizeof(URigVM) == 0x000390, "Wrong size on URigVM");
static_assert(offsetof(URigVM, LiteralMemoryStorage) == 0x000028, "Member 'URigVM::LiteralMemoryStorage' has a wrong offset!");
static_assert(offsetof(URigVM, DefaultWorkMemoryStorage) == 0x000078, "Member 'URigVM::DefaultWorkMemoryStorage' has a wrong offset!");
static_assert(offsetof(URigVM, DefaultDebugMemoryStorage) == 0x0000C8, "Member 'URigVM::DefaultDebugMemoryStorage' has a wrong offset!");
static_assert(offsetof(URigVM, ByteCodeStorage) == 0x000138, "Member 'URigVM::ByteCodeStorage' has a wrong offset!");
static_assert(offsetof(URigVM, Instructions) == 0x0001F0, "Member 'URigVM::Instructions' has a wrong offset!");
static_assert(offsetof(URigVM, FunctionNamesStorage) == 0x000208, "Member 'URigVM::FunctionNamesStorage' has a wrong offset!");
static_assert(offsetof(URigVM, Parameters) == 0x000250, "Member 'URigVM::Parameters' has a wrong offset!");
static_assert(offsetof(URigVM, CachedVMHash) == 0x000338, "Member 'URigVM::CachedVMHash' has a wrong offset!");

// Class RigVM.NameSpacedUserData
// 0x00D8 (0x0100 - 0x0028)
class UNameSpacedUserData : public UAssetUserData
{
public:
	class FString                                 NameSpace;                                         // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0xC8];                                      // 0x0038(0x00C8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NameSpacedUserData">();
	}
	static class UNameSpacedUserData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNameSpacedUserData>();
	}
};
static_assert(alignof(UNameSpacedUserData) == 0x000008, "Wrong alignment on UNameSpacedUserData");
static_assert(sizeof(UNameSpacedUserData) == 0x000100, "Wrong size on UNameSpacedUserData");
static_assert(offsetof(UNameSpacedUserData, NameSpace) == 0x000028, "Member 'UNameSpacedUserData::NameSpace' has a wrong offset!");

// Class RigVM.DataAssetLink
// 0x0030 (0x0130 - 0x0100)
class UDataAssetLink final : public UNameSpacedUserData
{
public:
	TSoftObjectPtr<class UDataAsset>              DataAsset;                                         // 0x0100(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataAsset*                             DataAssetCached;                                   // 0x0128(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetDataAsset(TSoftObjectPtr<class UDataAsset> InDataAsset);

	TSoftObjectPtr<class UDataAsset> GetDataAsset() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DataAssetLink">();
	}
	static class UDataAssetLink* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDataAssetLink>();
	}
};
static_assert(alignof(UDataAssetLink) == 0x000008, "Wrong alignment on UDataAssetLink");
static_assert(sizeof(UDataAssetLink) == 0x000130, "Wrong size on UDataAssetLink");
static_assert(offsetof(UDataAssetLink, DataAsset) == 0x000100, "Member 'UDataAssetLink::DataAsset' has a wrong offset!");
static_assert(offsetof(UDataAssetLink, DataAssetCached) == 0x000128, "Member 'UDataAssetLink::DataAssetCached' has a wrong offset!");

// Class RigVM.RigVMMemoryStorageGeneratorClass
// 0x0040 (0x0240 - 0x0200)
class URigVMMemoryStorageGeneratorClass final : public UClass
{
public:
	uint8                                         Pad_200[0x40];                                     // 0x0200(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMMemoryStorageGeneratorClass">();
	}
	static class URigVMMemoryStorageGeneratorClass* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigVMMemoryStorageGeneratorClass>();
	}
};
static_assert(alignof(URigVMMemoryStorageGeneratorClass) == 0x000008, "Wrong alignment on URigVMMemoryStorageGeneratorClass");
static_assert(sizeof(URigVMMemoryStorageGeneratorClass) == 0x000240, "Wrong size on URigVMMemoryStorageGeneratorClass");

// Class RigVM.RigVMMemoryStorage
// 0x0000 (0x0028 - 0x0028)
class URigVMMemoryStorage final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMMemoryStorage">();
	}
	static class URigVMMemoryStorage* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigVMMemoryStorage>();
	}
};
static_assert(alignof(URigVMMemoryStorage) == 0x000008, "Wrong alignment on URigVMMemoryStorage");
static_assert(sizeof(URigVMMemoryStorage) == 0x000028, "Wrong size on URigVMMemoryStorage");

// Class RigVM.RigVMNativized
// 0x0028 (0x03B8 - 0x0390)
class URigVMNativized final : public URigVM
{
public:
	uint8                                         Pad_390[0x28];                                     // 0x0390(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMNativized">();
	}
	static class URigVMNativized* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigVMNativized>();
	}
};
static_assert(alignof(URigVMNativized) == 0x000008, "Wrong alignment on URigVMNativized");
static_assert(sizeof(URigVMNativized) == 0x0003B8, "Wrong size on URigVMNativized");

// Class RigVM.RigVMUserWorkflowOptions
// 0x0070 (0x0098 - 0x0028)
class URigVMUserWorkflowOptions : public UObject
{
public:
	class UObject*                                Subject;                                           // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRigVMUserWorkflow                     Workflow;                                          // 0x0030(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_88[0x10];                                      // 0x0088(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ReportError(const class FString& InMessage);
	void ReportInfo(const class FString& InMessage);
	void ReportWarning(const class FString& InMessage);

	bool IsValid() const;
	bool RequiresDialog() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMUserWorkflowOptions">();
	}
	static class URigVMUserWorkflowOptions* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigVMUserWorkflowOptions>();
	}
};
static_assert(alignof(URigVMUserWorkflowOptions) == 0x000008, "Wrong alignment on URigVMUserWorkflowOptions");
static_assert(sizeof(URigVMUserWorkflowOptions) == 0x000098, "Wrong size on URigVMUserWorkflowOptions");
static_assert(offsetof(URigVMUserWorkflowOptions, Subject) == 0x000028, "Member 'URigVMUserWorkflowOptions::Subject' has a wrong offset!");
static_assert(offsetof(URigVMUserWorkflowOptions, Workflow) == 0x000030, "Member 'URigVMUserWorkflowOptions::Workflow' has a wrong offset!");

// Class RigVM.RigVMHost
// 0x0250 (0x0278 - 0x0028)
class URigVMHost : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigVMRuntimeSettings                  VMRuntimeSettings;                                 // 0x0030(0x0018)(NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x10];                                      // 0x0048(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class URigVM*                                 VM;                                                // 0x0058(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class FString, struct FSoftObjectPath>   UserDefinedStructGuidToPathName;                   // 0x0060(0x0050)(Protected, NativeAccessSpecifierProtected)
	TMap<class FString, struct FSoftObjectPath>   UserDefinedEnumToPathName;                         // 0x00B0(0x0050)(Protected, NativeAccessSpecifierProtected)
	TSet<class UObject*>                          UserDefinedTypesInUse;                             // 0x0100(0x0050)(Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_150[0x8];                                      // 0x0150(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigVMDrawContainer                    DrawContainer;                                     // 0x0158(0x0018)(NativeAccessSpecifierPublic)
	uint8                                         Pad_170[0x18];                                     // 0x0170(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           EventQueue;                                        // 0x0188(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_198[0x90];                                     // 0x0198(0x0090)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAssetUserData*>                 AssetUserData;                                     // 0x0228(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_238[0x40];                                     // 0x0238(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static TArray<class URigVMHost*> FindRigVMHosts(class UObject* Outer_0, TSubclassOf<class URigVMHost> OptionalClass);

	bool Execute(const class FName& InEventName);
	bool ExecuteEvent(const class FName& InEventName);
	struct FRigVMExtendedExecuteContext GetExtendedExecuteContext();
	class URigVM* GetVM();
	bool RemoveRunOnceEvent(const class FName& InEventName);
	void RequestInit();
	void RequestRunOnceEvent(const class FName& InEventName, int32 InEventIndex);
	void SetAbsoluteAndDeltaTime(float InAbsoluteTime, float InDeltaTime);
	void SetAbsoluteTime(float InAbsoluteTime, bool InSetDeltaTimeZero);
	void SetDeltaTime(float InDeltaTime);
	void SetFramesPerSecond(float InFramesPerSecond);
	bool SetVariableFromString(const class FName& InVariableName, const class FString& InValue);

	bool CanExecute() const;
	float GetAbsoluteTime() const;
	float GetCurrentFramesPerSecond() const;
	float GetDeltaTime() const;
	TArray<class FName> GetScriptAccessibleVariables() const;
	const TArray<class FName> GetSupportedEvents() const;
	class FString GetVariableAsString(const class FName& InVariableName) const;
	class FName GetVariableType(const class FName& InVariableName) const;
	bool IsInitRequired() const;
	bool SupportsEvent(const class FName& InEventName) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMHost">();
	}
	static class URigVMHost* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigVMHost>();
	}
};
static_assert(alignof(URigVMHost) == 0x000008, "Wrong alignment on URigVMHost");
static_assert(sizeof(URigVMHost) == 0x000278, "Wrong size on URigVMHost");
static_assert(offsetof(URigVMHost, VMRuntimeSettings) == 0x000030, "Member 'URigVMHost::VMRuntimeSettings' has a wrong offset!");
static_assert(offsetof(URigVMHost, VM) == 0x000058, "Member 'URigVMHost::VM' has a wrong offset!");
static_assert(offsetof(URigVMHost, UserDefinedStructGuidToPathName) == 0x000060, "Member 'URigVMHost::UserDefinedStructGuidToPathName' has a wrong offset!");
static_assert(offsetof(URigVMHost, UserDefinedEnumToPathName) == 0x0000B0, "Member 'URigVMHost::UserDefinedEnumToPathName' has a wrong offset!");
static_assert(offsetof(URigVMHost, UserDefinedTypesInUse) == 0x000100, "Member 'URigVMHost::UserDefinedTypesInUse' has a wrong offset!");
static_assert(offsetof(URigVMHost, DrawContainer) == 0x000158, "Member 'URigVMHost::DrawContainer' has a wrong offset!");
static_assert(offsetof(URigVMHost, EventQueue) == 0x000188, "Member 'URigVMHost::EventQueue' has a wrong offset!");
static_assert(offsetof(URigVMHost, AssetUserData) == 0x000228, "Member 'URigVMHost::AssetUserData' has a wrong offset!");

// Class RigVM.RigVMEditorSettings
// 0x0000 (0x0038 - 0x0038)
class URigVMEditorSettings : public UDeveloperSettings
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMEditorSettings">();
	}
	static class URigVMEditorSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigVMEditorSettings>();
	}
};
static_assert(alignof(URigVMEditorSettings) == 0x000008, "Wrong alignment on URigVMEditorSettings");
static_assert(sizeof(URigVMEditorSettings) == 0x000038, "Wrong size on URigVMEditorSettings");

}

