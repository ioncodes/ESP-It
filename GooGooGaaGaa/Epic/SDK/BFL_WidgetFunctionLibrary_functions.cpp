#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BFL_WidgetFunctionLibrary

#include "Basic.hpp"

#include "BFL_WidgetFunctionLibrary_classes.hpp"
#include "BFL_WidgetFunctionLibrary_parameters.hpp"


namespace SDK
{

// Function BFL_WidgetFunctionLibrary.BFL_WidgetFunctionLibrary_C.CompareStringsAlphabetically
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           StringA                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           StringB                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    AIsLessThanB                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBFL_WidgetFunctionLibrary_C::CompareStringsAlphabetically(const class FString& StringA, const class FString& StringB, class UObject* __WorldContext, bool* AIsLessThanB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFL_WidgetFunctionLibrary_C", "CompareStringsAlphabetically");

	Params::BFL_WidgetFunctionLibrary_C_CompareStringsAlphabetically Parms{};

	Parms.StringA = std::move(StringA);
	Parms.StringB = std::move(StringB);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (AIsLessThanB != nullptr)
		*AIsLessThanB = Parms.AIsLessThanB;
}


// Function BFL_WidgetFunctionLibrary.BFL_WidgetFunctionLibrary_C.NavigateVerticalPanelWidget
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPanelWidget*                     Panel                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// EUINavigation                           NavigationDirection                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UWidget*                          WidgetToFocus                                          (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBFL_WidgetFunctionLibrary_C::NavigateVerticalPanelWidget(class UPanelWidget* Panel, EUINavigation NavigationDirection, class UObject* __WorldContext, class UWidget** WidgetToFocus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFL_WidgetFunctionLibrary_C", "NavigateVerticalPanelWidget");

	Params::BFL_WidgetFunctionLibrary_C_NavigateVerticalPanelWidget Parms{};

	Parms.Panel = Panel;
	Parms.NavigationDirection = NavigationDirection;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (WidgetToFocus != nullptr)
		*WidgetToFocus = Parms.WidgetToFocus;
}


// Function BFL_WidgetFunctionLibrary.BFL_WidgetFunctionLibrary_C.GetWidgetRightToSwitcher
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UWidgetSwitcher*                  WidgetSwitcher                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UWidget*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)

class UWidget* UBFL_WidgetFunctionLibrary_C::GetWidgetRightToSwitcher(class UWidgetSwitcher* WidgetSwitcher, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BFL_WidgetFunctionLibrary_C", "GetWidgetRightToSwitcher");

	Params::BFL_WidgetFunctionLibrary_C_GetWidgetRightToSwitcher Parms{};

	Parms.WidgetSwitcher = WidgetSwitcher;
	Parms.__WorldContext = __WorldContext;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BFL_WidgetFunctionLibrary.BFL_WidgetFunctionLibrary_C.GetWidgetLeftToSwitcher
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UWidgetSwitcher*                  WidgetSwitcher                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UWidget*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)

class UWidget* UBFL_WidgetFunctionLibrary_C::GetWidgetLeftToSwitcher(class UWidgetSwitcher* WidgetSwitcher, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BFL_WidgetFunctionLibrary_C", "GetWidgetLeftToSwitcher");

	Params::BFL_WidgetFunctionLibrary_C_GetWidgetLeftToSwitcher Parms{};

	Parms.WidgetSwitcher = WidgetSwitcher;
	Parms.__WorldContext = __WorldContext;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BFL_WidgetFunctionLibrary.BFL_WidgetFunctionLibrary_C.CreateUIParameters
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FUIParameterData>         UIParams                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FUIParam>                 DefaultValues                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UVerticalBox*                     ParamSliderList                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class APlayerController*                OwningPlayer                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<class UWB_BaseControlWithLabel_C*>ReturningUIElements                                    (Parm, OutParm, ContainsInstancedReference)

void UBFL_WidgetFunctionLibrary_C::CreateUIParameters(TArray<struct FUIParameterData>& UIParams, TArray<struct FUIParam>& DefaultValues, class UVerticalBox* ParamSliderList, class APlayerController* OwningPlayer, class UObject* __WorldContext, TArray<class UWB_BaseControlWithLabel_C*>* ReturningUIElements)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BFL_WidgetFunctionLibrary_C", "CreateUIParameters");

	Params::BFL_WidgetFunctionLibrary_C_CreateUIParameters Parms{};

	Parms.UIParams = std::move(UIParams);
	Parms.DefaultValues = std::move(DefaultValues);
	Parms.ParamSliderList = ParamSliderList;
	Parms.OwningPlayer = OwningPlayer;
	Parms.__WorldContext = __WorldContext;

	UObject::ProcessEvent(Func, &Parms);

	UIParams = std::move(Parms.UIParams);
	DefaultValues = std::move(Parms.DefaultValues);

	if (ReturningUIElements != nullptr)
		*ReturningUIElements = std::move(Parms.ReturningUIElements);
}

}

