#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RigVM

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "RigVM_structs.hpp"


namespace SDK::Params
{

// Function RigVM.RigVM.AddRigVMFunction
// 0x0018 (0x0018 - 0x0000)
struct RigVM_AddRigVMFunction final
{
public:
	class UScriptStruct*                          InRigVMStruct;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMethodName;                                      // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigVM_AddRigVMFunction) == 0x000008, "Wrong alignment on RigVM_AddRigVMFunction");
static_assert(sizeof(RigVM_AddRigVMFunction) == 0x000018, "Wrong size on RigVM_AddRigVMFunction");
static_assert(offsetof(RigVM_AddRigVMFunction, InRigVMStruct) == 0x000000, "Member 'RigVM_AddRigVMFunction::InRigVMStruct' has a wrong offset!");
static_assert(offsetof(RigVM_AddRigVMFunction, InMethodName) == 0x000008, "Member 'RigVM_AddRigVMFunction::InMethodName' has a wrong offset!");
static_assert(offsetof(RigVM_AddRigVMFunction, ReturnValue) == 0x000010, "Member 'RigVM_AddRigVMFunction::ReturnValue' has a wrong offset!");

// Function RigVM.RigVM.Execute
// 0x0238 (0x0238 - 0x0000)
struct RigVM_Execute final
{
public:
	struct FRigVMExtendedExecuteContext           Context;                                           // 0x0000(0x0228)(Parm, OutParm, NativeAccessSpecifierPublic)
	class FName                                   InEntryName;                                       // 0x0228(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0230(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_231[0x7];                                      // 0x0231(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigVM_Execute) == 0x000008, "Wrong alignment on RigVM_Execute");
static_assert(sizeof(RigVM_Execute) == 0x000238, "Wrong size on RigVM_Execute");
static_assert(offsetof(RigVM_Execute, Context) == 0x000000, "Member 'RigVM_Execute::Context' has a wrong offset!");
static_assert(offsetof(RigVM_Execute, InEntryName) == 0x000228, "Member 'RigVM_Execute::InEntryName' has a wrong offset!");
static_assert(offsetof(RigVM_Execute, ReturnValue) == 0x000230, "Member 'RigVM_Execute::ReturnValue' has a wrong offset!");

// Function RigVM.RigVM.GetParameterValueBool
// 0x0010 (0x0010 - 0x0000)
struct RigVM_GetParameterValueBool final
{
public:
	class FName                                   InParameterName;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InArrayIndex;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigVM_GetParameterValueBool) == 0x000004, "Wrong alignment on RigVM_GetParameterValueBool");
static_assert(sizeof(RigVM_GetParameterValueBool) == 0x000010, "Wrong size on RigVM_GetParameterValueBool");
static_assert(offsetof(RigVM_GetParameterValueBool, InParameterName) == 0x000000, "Member 'RigVM_GetParameterValueBool::InParameterName' has a wrong offset!");
static_assert(offsetof(RigVM_GetParameterValueBool, InArrayIndex) == 0x000008, "Member 'RigVM_GetParameterValueBool::InArrayIndex' has a wrong offset!");
static_assert(offsetof(RigVM_GetParameterValueBool, ReturnValue) == 0x00000C, "Member 'RigVM_GetParameterValueBool::ReturnValue' has a wrong offset!");

// Function RigVM.RigVM.GetParameterValueDouble
// 0x0018 (0x0018 - 0x0000)
struct RigVM_GetParameterValueDouble final
{
public:
	class FName                                   InParameterName;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InArrayIndex;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigVM_GetParameterValueDouble) == 0x000008, "Wrong alignment on RigVM_GetParameterValueDouble");
static_assert(sizeof(RigVM_GetParameterValueDouble) == 0x000018, "Wrong size on RigVM_GetParameterValueDouble");
static_assert(offsetof(RigVM_GetParameterValueDouble, InParameterName) == 0x000000, "Member 'RigVM_GetParameterValueDouble::InParameterName' has a wrong offset!");
static_assert(offsetof(RigVM_GetParameterValueDouble, InArrayIndex) == 0x000008, "Member 'RigVM_GetParameterValueDouble::InArrayIndex' has a wrong offset!");
static_assert(offsetof(RigVM_GetParameterValueDouble, ReturnValue) == 0x000010, "Member 'RigVM_GetParameterValueDouble::ReturnValue' has a wrong offset!");

// Function RigVM.RigVM.GetParameterValueFloat
// 0x0010 (0x0010 - 0x0000)
struct RigVM_GetParameterValueFloat final
{
public:
	class FName                                   InParameterName;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InArrayIndex;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigVM_GetParameterValueFloat) == 0x000004, "Wrong alignment on RigVM_GetParameterValueFloat");
static_assert(sizeof(RigVM_GetParameterValueFloat) == 0x000010, "Wrong size on RigVM_GetParameterValueFloat");
static_assert(offsetof(RigVM_GetParameterValueFloat, InParameterName) == 0x000000, "Member 'RigVM_GetParameterValueFloat::InParameterName' has a wrong offset!");
static_assert(offsetof(RigVM_GetParameterValueFloat, InArrayIndex) == 0x000008, "Member 'RigVM_GetParameterValueFloat::InArrayIndex' has a wrong offset!");
static_assert(offsetof(RigVM_GetParameterValueFloat, ReturnValue) == 0x00000C, "Member 'RigVM_GetParameterValueFloat::ReturnValue' has a wrong offset!");

// Function RigVM.RigVM.GetParameterValueInt
// 0x0010 (0x0010 - 0x0000)
struct RigVM_GetParameterValueInt final
{
public:
	class FName                                   InParameterName;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InArrayIndex;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigVM_GetParameterValueInt) == 0x000004, "Wrong alignment on RigVM_GetParameterValueInt");
static_assert(sizeof(RigVM_GetParameterValueInt) == 0x000010, "Wrong size on RigVM_GetParameterValueInt");
static_assert(offsetof(RigVM_GetParameterValueInt, InParameterName) == 0x000000, "Member 'RigVM_GetParameterValueInt::InParameterName' has a wrong offset!");
static_assert(offsetof(RigVM_GetParameterValueInt, InArrayIndex) == 0x000008, "Member 'RigVM_GetParameterValueInt::InArrayIndex' has a wrong offset!");
static_assert(offsetof(RigVM_GetParameterValueInt, ReturnValue) == 0x00000C, "Member 'RigVM_GetParameterValueInt::ReturnValue' has a wrong offset!");

// Function RigVM.RigVM.GetParameterValueName
// 0x0014 (0x0014 - 0x0000)
struct RigVM_GetParameterValueName final
{
public:
	class FName                                   InParameterName;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InArrayIndex;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigVM_GetParameterValueName) == 0x000004, "Wrong alignment on RigVM_GetParameterValueName");
static_assert(sizeof(RigVM_GetParameterValueName) == 0x000014, "Wrong size on RigVM_GetParameterValueName");
static_assert(offsetof(RigVM_GetParameterValueName, InParameterName) == 0x000000, "Member 'RigVM_GetParameterValueName::InParameterName' has a wrong offset!");
static_assert(offsetof(RigVM_GetParameterValueName, InArrayIndex) == 0x000008, "Member 'RigVM_GetParameterValueName::InArrayIndex' has a wrong offset!");
static_assert(offsetof(RigVM_GetParameterValueName, ReturnValue) == 0x00000C, "Member 'RigVM_GetParameterValueName::ReturnValue' has a wrong offset!");

// Function RigVM.RigVM.GetParameterValueQuat
// 0x0030 (0x0030 - 0x0000)
struct RigVM_GetParameterValueQuat final
{
public:
	class FName                                   InParameterName;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InArrayIndex;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  ReturnValue;                                       // 0x0010(0x0020)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigVM_GetParameterValueQuat) == 0x000010, "Wrong alignment on RigVM_GetParameterValueQuat");
static_assert(sizeof(RigVM_GetParameterValueQuat) == 0x000030, "Wrong size on RigVM_GetParameterValueQuat");
static_assert(offsetof(RigVM_GetParameterValueQuat, InParameterName) == 0x000000, "Member 'RigVM_GetParameterValueQuat::InParameterName' has a wrong offset!");
static_assert(offsetof(RigVM_GetParameterValueQuat, InArrayIndex) == 0x000008, "Member 'RigVM_GetParameterValueQuat::InArrayIndex' has a wrong offset!");
static_assert(offsetof(RigVM_GetParameterValueQuat, ReturnValue) == 0x000010, "Member 'RigVM_GetParameterValueQuat::ReturnValue' has a wrong offset!");

// Function RigVM.RigVM.GetParameterValueString
// 0x0020 (0x0020 - 0x0000)
struct RigVM_GetParameterValueString final
{
public:
	class FName                                   InParameterName;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InArrayIndex;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigVM_GetParameterValueString) == 0x000008, "Wrong alignment on RigVM_GetParameterValueString");
static_assert(sizeof(RigVM_GetParameterValueString) == 0x000020, "Wrong size on RigVM_GetParameterValueString");
static_assert(offsetof(RigVM_GetParameterValueString, InParameterName) == 0x000000, "Member 'RigVM_GetParameterValueString::InParameterName' has a wrong offset!");
static_assert(offsetof(RigVM_GetParameterValueString, InArrayIndex) == 0x000008, "Member 'RigVM_GetParameterValueString::InArrayIndex' has a wrong offset!");
static_assert(offsetof(RigVM_GetParameterValueString, ReturnValue) == 0x000010, "Member 'RigVM_GetParameterValueString::ReturnValue' has a wrong offset!");

// Function RigVM.RigVM.GetParameterValueTransform
// 0x0070 (0x0070 - 0x0000)
struct RigVM_GetParameterValueTransform final
{
public:
	class FName                                   InParameterName;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InArrayIndex;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigVM_GetParameterValueTransform) == 0x000010, "Wrong alignment on RigVM_GetParameterValueTransform");
static_assert(sizeof(RigVM_GetParameterValueTransform) == 0x000070, "Wrong size on RigVM_GetParameterValueTransform");
static_assert(offsetof(RigVM_GetParameterValueTransform, InParameterName) == 0x000000, "Member 'RigVM_GetParameterValueTransform::InParameterName' has a wrong offset!");
static_assert(offsetof(RigVM_GetParameterValueTransform, InArrayIndex) == 0x000008, "Member 'RigVM_GetParameterValueTransform::InArrayIndex' has a wrong offset!");
static_assert(offsetof(RigVM_GetParameterValueTransform, ReturnValue) == 0x000010, "Member 'RigVM_GetParameterValueTransform::ReturnValue' has a wrong offset!");

// Function RigVM.RigVM.GetParameterValueVector
// 0x0028 (0x0028 - 0x0000)
struct RigVM_GetParameterValueVector final
{
public:
	class FName                                   InParameterName;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InArrayIndex;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigVM_GetParameterValueVector) == 0x000008, "Wrong alignment on RigVM_GetParameterValueVector");
static_assert(sizeof(RigVM_GetParameterValueVector) == 0x000028, "Wrong size on RigVM_GetParameterValueVector");
static_assert(offsetof(RigVM_GetParameterValueVector, InParameterName) == 0x000000, "Member 'RigVM_GetParameterValueVector::InParameterName' has a wrong offset!");
static_assert(offsetof(RigVM_GetParameterValueVector, InArrayIndex) == 0x000008, "Member 'RigVM_GetParameterValueVector::InArrayIndex' has a wrong offset!");
static_assert(offsetof(RigVM_GetParameterValueVector, ReturnValue) == 0x000010, "Member 'RigVM_GetParameterValueVector::ReturnValue' has a wrong offset!");

// Function RigVM.RigVM.GetParameterValueVector2D
// 0x0020 (0x0020 - 0x0000)
struct RigVM_GetParameterValueVector2D final
{
public:
	class FName                                   InParameterName;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InArrayIndex;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigVM_GetParameterValueVector2D) == 0x000008, "Wrong alignment on RigVM_GetParameterValueVector2D");
static_assert(sizeof(RigVM_GetParameterValueVector2D) == 0x000020, "Wrong size on RigVM_GetParameterValueVector2D");
static_assert(offsetof(RigVM_GetParameterValueVector2D, InParameterName) == 0x000000, "Member 'RigVM_GetParameterValueVector2D::InParameterName' has a wrong offset!");
static_assert(offsetof(RigVM_GetParameterValueVector2D, InArrayIndex) == 0x000008, "Member 'RigVM_GetParameterValueVector2D::InArrayIndex' has a wrong offset!");
static_assert(offsetof(RigVM_GetParameterValueVector2D, ReturnValue) == 0x000010, "Member 'RigVM_GetParameterValueVector2D::ReturnValue' has a wrong offset!");

// Function RigVM.RigVM.SetParameterValueBool
// 0x0010 (0x0010 - 0x0000)
struct RigVM_SetParameterValueBool final
{
public:
	class FName                                   InParameterName;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InValue;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InArrayIndex;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigVM_SetParameterValueBool) == 0x000004, "Wrong alignment on RigVM_SetParameterValueBool");
static_assert(sizeof(RigVM_SetParameterValueBool) == 0x000010, "Wrong size on RigVM_SetParameterValueBool");
static_assert(offsetof(RigVM_SetParameterValueBool, InParameterName) == 0x000000, "Member 'RigVM_SetParameterValueBool::InParameterName' has a wrong offset!");
static_assert(offsetof(RigVM_SetParameterValueBool, InValue) == 0x000008, "Member 'RigVM_SetParameterValueBool::InValue' has a wrong offset!");
static_assert(offsetof(RigVM_SetParameterValueBool, InArrayIndex) == 0x00000C, "Member 'RigVM_SetParameterValueBool::InArrayIndex' has a wrong offset!");

// Function RigVM.RigVM.SetParameterValueDouble
// 0x0018 (0x0018 - 0x0000)
struct RigVM_SetParameterValueDouble final
{
public:
	class FName                                   InParameterName;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        InValue;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InArrayIndex;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigVM_SetParameterValueDouble) == 0x000008, "Wrong alignment on RigVM_SetParameterValueDouble");
static_assert(sizeof(RigVM_SetParameterValueDouble) == 0x000018, "Wrong size on RigVM_SetParameterValueDouble");
static_assert(offsetof(RigVM_SetParameterValueDouble, InParameterName) == 0x000000, "Member 'RigVM_SetParameterValueDouble::InParameterName' has a wrong offset!");
static_assert(offsetof(RigVM_SetParameterValueDouble, InValue) == 0x000008, "Member 'RigVM_SetParameterValueDouble::InValue' has a wrong offset!");
static_assert(offsetof(RigVM_SetParameterValueDouble, InArrayIndex) == 0x000010, "Member 'RigVM_SetParameterValueDouble::InArrayIndex' has a wrong offset!");

// Function RigVM.RigVM.SetParameterValueFloat
// 0x0010 (0x0010 - 0x0000)
struct RigVM_SetParameterValueFloat final
{
public:
	class FName                                   InParameterName;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InValue;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InArrayIndex;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigVM_SetParameterValueFloat) == 0x000004, "Wrong alignment on RigVM_SetParameterValueFloat");
static_assert(sizeof(RigVM_SetParameterValueFloat) == 0x000010, "Wrong size on RigVM_SetParameterValueFloat");
static_assert(offsetof(RigVM_SetParameterValueFloat, InParameterName) == 0x000000, "Member 'RigVM_SetParameterValueFloat::InParameterName' has a wrong offset!");
static_assert(offsetof(RigVM_SetParameterValueFloat, InValue) == 0x000008, "Member 'RigVM_SetParameterValueFloat::InValue' has a wrong offset!");
static_assert(offsetof(RigVM_SetParameterValueFloat, InArrayIndex) == 0x00000C, "Member 'RigVM_SetParameterValueFloat::InArrayIndex' has a wrong offset!");

// Function RigVM.RigVM.SetParameterValueInt
// 0x0010 (0x0010 - 0x0000)
struct RigVM_SetParameterValueInt final
{
public:
	class FName                                   InParameterName;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InValue;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InArrayIndex;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigVM_SetParameterValueInt) == 0x000004, "Wrong alignment on RigVM_SetParameterValueInt");
static_assert(sizeof(RigVM_SetParameterValueInt) == 0x000010, "Wrong size on RigVM_SetParameterValueInt");
static_assert(offsetof(RigVM_SetParameterValueInt, InParameterName) == 0x000000, "Member 'RigVM_SetParameterValueInt::InParameterName' has a wrong offset!");
static_assert(offsetof(RigVM_SetParameterValueInt, InValue) == 0x000008, "Member 'RigVM_SetParameterValueInt::InValue' has a wrong offset!");
static_assert(offsetof(RigVM_SetParameterValueInt, InArrayIndex) == 0x00000C, "Member 'RigVM_SetParameterValueInt::InArrayIndex' has a wrong offset!");

// Function RigVM.RigVM.SetParameterValueName
// 0x0014 (0x0014 - 0x0000)
struct RigVM_SetParameterValueName final
{
public:
	class FName                                   InParameterName;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InValue;                                           // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InArrayIndex;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigVM_SetParameterValueName) == 0x000004, "Wrong alignment on RigVM_SetParameterValueName");
static_assert(sizeof(RigVM_SetParameterValueName) == 0x000014, "Wrong size on RigVM_SetParameterValueName");
static_assert(offsetof(RigVM_SetParameterValueName, InParameterName) == 0x000000, "Member 'RigVM_SetParameterValueName::InParameterName' has a wrong offset!");
static_assert(offsetof(RigVM_SetParameterValueName, InValue) == 0x000008, "Member 'RigVM_SetParameterValueName::InValue' has a wrong offset!");
static_assert(offsetof(RigVM_SetParameterValueName, InArrayIndex) == 0x000010, "Member 'RigVM_SetParameterValueName::InArrayIndex' has a wrong offset!");

// Function RigVM.RigVM.SetParameterValueQuat
// 0x0040 (0x0040 - 0x0000)
struct RigVM_SetParameterValueQuat final
{
public:
	class FName                                   InParameterName;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  InValue;                                           // 0x0010(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InArrayIndex;                                      // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0xC];                                       // 0x0034(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigVM_SetParameterValueQuat) == 0x000010, "Wrong alignment on RigVM_SetParameterValueQuat");
static_assert(sizeof(RigVM_SetParameterValueQuat) == 0x000040, "Wrong size on RigVM_SetParameterValueQuat");
static_assert(offsetof(RigVM_SetParameterValueQuat, InParameterName) == 0x000000, "Member 'RigVM_SetParameterValueQuat::InParameterName' has a wrong offset!");
static_assert(offsetof(RigVM_SetParameterValueQuat, InValue) == 0x000010, "Member 'RigVM_SetParameterValueQuat::InValue' has a wrong offset!");
static_assert(offsetof(RigVM_SetParameterValueQuat, InArrayIndex) == 0x000030, "Member 'RigVM_SetParameterValueQuat::InArrayIndex' has a wrong offset!");

// Function RigVM.RigVM.SetParameterValueString
// 0x0020 (0x0020 - 0x0000)
struct RigVM_SetParameterValueString final
{
public:
	class FName                                   InParameterName;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InValue;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InArrayIndex;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigVM_SetParameterValueString) == 0x000008, "Wrong alignment on RigVM_SetParameterValueString");
static_assert(sizeof(RigVM_SetParameterValueString) == 0x000020, "Wrong size on RigVM_SetParameterValueString");
static_assert(offsetof(RigVM_SetParameterValueString, InParameterName) == 0x000000, "Member 'RigVM_SetParameterValueString::InParameterName' has a wrong offset!");
static_assert(offsetof(RigVM_SetParameterValueString, InValue) == 0x000008, "Member 'RigVM_SetParameterValueString::InValue' has a wrong offset!");
static_assert(offsetof(RigVM_SetParameterValueString, InArrayIndex) == 0x000018, "Member 'RigVM_SetParameterValueString::InArrayIndex' has a wrong offset!");

// Function RigVM.RigVM.SetParameterValueTransform
// 0x0080 (0x0080 - 0x0000)
struct RigVM_SetParameterValueTransform final
{
public:
	class FName                                   InParameterName;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InValue;                                           // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InArrayIndex;                                      // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0xC];                                       // 0x0074(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigVM_SetParameterValueTransform) == 0x000010, "Wrong alignment on RigVM_SetParameterValueTransform");
static_assert(sizeof(RigVM_SetParameterValueTransform) == 0x000080, "Wrong size on RigVM_SetParameterValueTransform");
static_assert(offsetof(RigVM_SetParameterValueTransform, InParameterName) == 0x000000, "Member 'RigVM_SetParameterValueTransform::InParameterName' has a wrong offset!");
static_assert(offsetof(RigVM_SetParameterValueTransform, InValue) == 0x000010, "Member 'RigVM_SetParameterValueTransform::InValue' has a wrong offset!");
static_assert(offsetof(RigVM_SetParameterValueTransform, InArrayIndex) == 0x000070, "Member 'RigVM_SetParameterValueTransform::InArrayIndex' has a wrong offset!");

// Function RigVM.RigVM.SetParameterValueVector
// 0x0028 (0x0028 - 0x0000)
struct RigVM_SetParameterValueVector final
{
public:
	class FName                                   InParameterName;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InValue;                                           // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InArrayIndex;                                      // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigVM_SetParameterValueVector) == 0x000008, "Wrong alignment on RigVM_SetParameterValueVector");
static_assert(sizeof(RigVM_SetParameterValueVector) == 0x000028, "Wrong size on RigVM_SetParameterValueVector");
static_assert(offsetof(RigVM_SetParameterValueVector, InParameterName) == 0x000000, "Member 'RigVM_SetParameterValueVector::InParameterName' has a wrong offset!");
static_assert(offsetof(RigVM_SetParameterValueVector, InValue) == 0x000008, "Member 'RigVM_SetParameterValueVector::InValue' has a wrong offset!");
static_assert(offsetof(RigVM_SetParameterValueVector, InArrayIndex) == 0x000020, "Member 'RigVM_SetParameterValueVector::InArrayIndex' has a wrong offset!");

// Function RigVM.RigVM.SetParameterValueVector2D
// 0x0020 (0x0020 - 0x0000)
struct RigVM_SetParameterValueVector2D final
{
public:
	class FName                                   InParameterName;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InValue;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InArrayIndex;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigVM_SetParameterValueVector2D) == 0x000008, "Wrong alignment on RigVM_SetParameterValueVector2D");
static_assert(sizeof(RigVM_SetParameterValueVector2D) == 0x000020, "Wrong size on RigVM_SetParameterValueVector2D");
static_assert(offsetof(RigVM_SetParameterValueVector2D, InParameterName) == 0x000000, "Member 'RigVM_SetParameterValueVector2D::InParameterName' has a wrong offset!");
static_assert(offsetof(RigVM_SetParameterValueVector2D, InValue) == 0x000008, "Member 'RigVM_SetParameterValueVector2D::InValue' has a wrong offset!");
static_assert(offsetof(RigVM_SetParameterValueVector2D, InArrayIndex) == 0x000018, "Member 'RigVM_SetParameterValueVector2D::InArrayIndex' has a wrong offset!");

// Function RigVM.RigVM.GetRigVMFunctionName
// 0x0018 (0x0018 - 0x0000)
struct RigVM_GetRigVMFunctionName final
{
public:
	int32                                         InFunctionIndex;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigVM_GetRigVMFunctionName) == 0x000008, "Wrong alignment on RigVM_GetRigVMFunctionName");
static_assert(sizeof(RigVM_GetRigVMFunctionName) == 0x000018, "Wrong size on RigVM_GetRigVMFunctionName");
static_assert(offsetof(RigVM_GetRigVMFunctionName, InFunctionIndex) == 0x000000, "Member 'RigVM_GetRigVMFunctionName::InFunctionIndex' has a wrong offset!");
static_assert(offsetof(RigVM_GetRigVMFunctionName, ReturnValue) == 0x000008, "Member 'RigVM_GetRigVMFunctionName::ReturnValue' has a wrong offset!");

// Function RigVM.RigVM.GetStatistics
// 0x0038 (0x0038 - 0x0000)
struct RigVM_GetStatistics final
{
public:
	struct FRigVMStatistics                       ReturnValue;                                       // 0x0000(0x0038)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigVM_GetStatistics) == 0x000004, "Wrong alignment on RigVM_GetStatistics");
static_assert(sizeof(RigVM_GetStatistics) == 0x000038, "Wrong size on RigVM_GetStatistics");
static_assert(offsetof(RigVM_GetStatistics, ReturnValue) == 0x000000, "Member 'RigVM_GetStatistics::ReturnValue' has a wrong offset!");

// Function RigVM.DataAssetLink.SetDataAsset
// 0x0028 (0x0028 - 0x0000)
struct DataAssetLink_SetDataAsset final
{
public:
	TSoftObjectPtr<class UDataAsset>              InDataAsset;                                       // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DataAssetLink_SetDataAsset) == 0x000008, "Wrong alignment on DataAssetLink_SetDataAsset");
static_assert(sizeof(DataAssetLink_SetDataAsset) == 0x000028, "Wrong size on DataAssetLink_SetDataAsset");
static_assert(offsetof(DataAssetLink_SetDataAsset, InDataAsset) == 0x000000, "Member 'DataAssetLink_SetDataAsset::InDataAsset' has a wrong offset!");

// Function RigVM.DataAssetLink.GetDataAsset
// 0x0028 (0x0028 - 0x0000)
struct DataAssetLink_GetDataAsset final
{
public:
	TSoftObjectPtr<class UDataAsset>              ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DataAssetLink_GetDataAsset) == 0x000008, "Wrong alignment on DataAssetLink_GetDataAsset");
static_assert(sizeof(DataAssetLink_GetDataAsset) == 0x000028, "Wrong size on DataAssetLink_GetDataAsset");
static_assert(offsetof(DataAssetLink_GetDataAsset, ReturnValue) == 0x000000, "Member 'DataAssetLink_GetDataAsset::ReturnValue' has a wrong offset!");

// Function RigVM.RigVMUserWorkflowOptions.ReportError
// 0x0010 (0x0010 - 0x0000)
struct RigVMUserWorkflowOptions_ReportError final
{
public:
	class FString                                 InMessage;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigVMUserWorkflowOptions_ReportError) == 0x000008, "Wrong alignment on RigVMUserWorkflowOptions_ReportError");
static_assert(sizeof(RigVMUserWorkflowOptions_ReportError) == 0x000010, "Wrong size on RigVMUserWorkflowOptions_ReportError");
static_assert(offsetof(RigVMUserWorkflowOptions_ReportError, InMessage) == 0x000000, "Member 'RigVMUserWorkflowOptions_ReportError::InMessage' has a wrong offset!");

// Function RigVM.RigVMUserWorkflowOptions.ReportInfo
// 0x0010 (0x0010 - 0x0000)
struct RigVMUserWorkflowOptions_ReportInfo final
{
public:
	class FString                                 InMessage;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigVMUserWorkflowOptions_ReportInfo) == 0x000008, "Wrong alignment on RigVMUserWorkflowOptions_ReportInfo");
static_assert(sizeof(RigVMUserWorkflowOptions_ReportInfo) == 0x000010, "Wrong size on RigVMUserWorkflowOptions_ReportInfo");
static_assert(offsetof(RigVMUserWorkflowOptions_ReportInfo, InMessage) == 0x000000, "Member 'RigVMUserWorkflowOptions_ReportInfo::InMessage' has a wrong offset!");

// Function RigVM.RigVMUserWorkflowOptions.ReportWarning
// 0x0010 (0x0010 - 0x0000)
struct RigVMUserWorkflowOptions_ReportWarning final
{
public:
	class FString                                 InMessage;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigVMUserWorkflowOptions_ReportWarning) == 0x000008, "Wrong alignment on RigVMUserWorkflowOptions_ReportWarning");
static_assert(sizeof(RigVMUserWorkflowOptions_ReportWarning) == 0x000010, "Wrong size on RigVMUserWorkflowOptions_ReportWarning");
static_assert(offsetof(RigVMUserWorkflowOptions_ReportWarning, InMessage) == 0x000000, "Member 'RigVMUserWorkflowOptions_ReportWarning::InMessage' has a wrong offset!");

// Function RigVM.RigVMUserWorkflowOptions.IsValid
// 0x0001 (0x0001 - 0x0000)
struct RigVMUserWorkflowOptions_IsValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigVMUserWorkflowOptions_IsValid) == 0x000001, "Wrong alignment on RigVMUserWorkflowOptions_IsValid");
static_assert(sizeof(RigVMUserWorkflowOptions_IsValid) == 0x000001, "Wrong size on RigVMUserWorkflowOptions_IsValid");
static_assert(offsetof(RigVMUserWorkflowOptions_IsValid, ReturnValue) == 0x000000, "Member 'RigVMUserWorkflowOptions_IsValid::ReturnValue' has a wrong offset!");

// Function RigVM.RigVMUserWorkflowOptions.RequiresDialog
// 0x0001 (0x0001 - 0x0000)
struct RigVMUserWorkflowOptions_RequiresDialog final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigVMUserWorkflowOptions_RequiresDialog) == 0x000001, "Wrong alignment on RigVMUserWorkflowOptions_RequiresDialog");
static_assert(sizeof(RigVMUserWorkflowOptions_RequiresDialog) == 0x000001, "Wrong size on RigVMUserWorkflowOptions_RequiresDialog");
static_assert(offsetof(RigVMUserWorkflowOptions_RequiresDialog, ReturnValue) == 0x000000, "Member 'RigVMUserWorkflowOptions_RequiresDialog::ReturnValue' has a wrong offset!");

// Function RigVM.RigVMHost.FindRigVMHosts
// 0x0020 (0x0020 - 0x0000)
struct RigVMHost_FindRigVMHosts final
{
public:
	class UObject*                                Outer_0;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class URigVMHost>                 OptionalClass;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class URigVMHost*>                     ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigVMHost_FindRigVMHosts) == 0x000008, "Wrong alignment on RigVMHost_FindRigVMHosts");
static_assert(sizeof(RigVMHost_FindRigVMHosts) == 0x000020, "Wrong size on RigVMHost_FindRigVMHosts");
static_assert(offsetof(RigVMHost_FindRigVMHosts, Outer_0) == 0x000000, "Member 'RigVMHost_FindRigVMHosts::Outer_0' has a wrong offset!");
static_assert(offsetof(RigVMHost_FindRigVMHosts, OptionalClass) == 0x000008, "Member 'RigVMHost_FindRigVMHosts::OptionalClass' has a wrong offset!");
static_assert(offsetof(RigVMHost_FindRigVMHosts, ReturnValue) == 0x000010, "Member 'RigVMHost_FindRigVMHosts::ReturnValue' has a wrong offset!");

// Function RigVM.RigVMHost.Execute
// 0x000C (0x000C - 0x0000)
struct RigVMHost_Execute final
{
public:
	class FName                                   InEventName;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigVMHost_Execute) == 0x000004, "Wrong alignment on RigVMHost_Execute");
static_assert(sizeof(RigVMHost_Execute) == 0x00000C, "Wrong size on RigVMHost_Execute");
static_assert(offsetof(RigVMHost_Execute, InEventName) == 0x000000, "Member 'RigVMHost_Execute::InEventName' has a wrong offset!");
static_assert(offsetof(RigVMHost_Execute, ReturnValue) == 0x000008, "Member 'RigVMHost_Execute::ReturnValue' has a wrong offset!");

// Function RigVM.RigVMHost.ExecuteEvent
// 0x000C (0x000C - 0x0000)
struct RigVMHost_ExecuteEvent final
{
public:
	class FName                                   InEventName;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigVMHost_ExecuteEvent) == 0x000004, "Wrong alignment on RigVMHost_ExecuteEvent");
static_assert(sizeof(RigVMHost_ExecuteEvent) == 0x00000C, "Wrong size on RigVMHost_ExecuteEvent");
static_assert(offsetof(RigVMHost_ExecuteEvent, InEventName) == 0x000000, "Member 'RigVMHost_ExecuteEvent::InEventName' has a wrong offset!");
static_assert(offsetof(RigVMHost_ExecuteEvent, ReturnValue) == 0x000008, "Member 'RigVMHost_ExecuteEvent::ReturnValue' has a wrong offset!");

// Function RigVM.RigVMHost.GetExtendedExecuteContext
// 0x0228 (0x0228 - 0x0000)
struct RigVMHost_GetExtendedExecuteContext final
{
public:
	struct FRigVMExtendedExecuteContext           ReturnValue;                                       // 0x0000(0x0228)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigVMHost_GetExtendedExecuteContext) == 0x000008, "Wrong alignment on RigVMHost_GetExtendedExecuteContext");
static_assert(sizeof(RigVMHost_GetExtendedExecuteContext) == 0x000228, "Wrong size on RigVMHost_GetExtendedExecuteContext");
static_assert(offsetof(RigVMHost_GetExtendedExecuteContext, ReturnValue) == 0x000000, "Member 'RigVMHost_GetExtendedExecuteContext::ReturnValue' has a wrong offset!");

// Function RigVM.RigVMHost.GetVM
// 0x0008 (0x0008 - 0x0000)
struct RigVMHost_GetVM final
{
public:
	class URigVM*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigVMHost_GetVM) == 0x000008, "Wrong alignment on RigVMHost_GetVM");
static_assert(sizeof(RigVMHost_GetVM) == 0x000008, "Wrong size on RigVMHost_GetVM");
static_assert(offsetof(RigVMHost_GetVM, ReturnValue) == 0x000000, "Member 'RigVMHost_GetVM::ReturnValue' has a wrong offset!");

// Function RigVM.RigVMHost.RemoveRunOnceEvent
// 0x000C (0x000C - 0x0000)
struct RigVMHost_RemoveRunOnceEvent final
{
public:
	class FName                                   InEventName;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigVMHost_RemoveRunOnceEvent) == 0x000004, "Wrong alignment on RigVMHost_RemoveRunOnceEvent");
static_assert(sizeof(RigVMHost_RemoveRunOnceEvent) == 0x00000C, "Wrong size on RigVMHost_RemoveRunOnceEvent");
static_assert(offsetof(RigVMHost_RemoveRunOnceEvent, InEventName) == 0x000000, "Member 'RigVMHost_RemoveRunOnceEvent::InEventName' has a wrong offset!");
static_assert(offsetof(RigVMHost_RemoveRunOnceEvent, ReturnValue) == 0x000008, "Member 'RigVMHost_RemoveRunOnceEvent::ReturnValue' has a wrong offset!");

// Function RigVM.RigVMHost.RequestRunOnceEvent
// 0x000C (0x000C - 0x0000)
struct RigVMHost_RequestRunOnceEvent final
{
public:
	class FName                                   InEventName;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InEventIndex;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigVMHost_RequestRunOnceEvent) == 0x000004, "Wrong alignment on RigVMHost_RequestRunOnceEvent");
static_assert(sizeof(RigVMHost_RequestRunOnceEvent) == 0x00000C, "Wrong size on RigVMHost_RequestRunOnceEvent");
static_assert(offsetof(RigVMHost_RequestRunOnceEvent, InEventName) == 0x000000, "Member 'RigVMHost_RequestRunOnceEvent::InEventName' has a wrong offset!");
static_assert(offsetof(RigVMHost_RequestRunOnceEvent, InEventIndex) == 0x000008, "Member 'RigVMHost_RequestRunOnceEvent::InEventIndex' has a wrong offset!");

// Function RigVM.RigVMHost.SetAbsoluteAndDeltaTime
// 0x0008 (0x0008 - 0x0000)
struct RigVMHost_SetAbsoluteAndDeltaTime final
{
public:
	float                                         InAbsoluteTime;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDeltaTime;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigVMHost_SetAbsoluteAndDeltaTime) == 0x000004, "Wrong alignment on RigVMHost_SetAbsoluteAndDeltaTime");
static_assert(sizeof(RigVMHost_SetAbsoluteAndDeltaTime) == 0x000008, "Wrong size on RigVMHost_SetAbsoluteAndDeltaTime");
static_assert(offsetof(RigVMHost_SetAbsoluteAndDeltaTime, InAbsoluteTime) == 0x000000, "Member 'RigVMHost_SetAbsoluteAndDeltaTime::InAbsoluteTime' has a wrong offset!");
static_assert(offsetof(RigVMHost_SetAbsoluteAndDeltaTime, InDeltaTime) == 0x000004, "Member 'RigVMHost_SetAbsoluteAndDeltaTime::InDeltaTime' has a wrong offset!");

// Function RigVM.RigVMHost.SetAbsoluteTime
// 0x0008 (0x0008 - 0x0000)
struct RigVMHost_SetAbsoluteTime final
{
public:
	float                                         InAbsoluteTime;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InSetDeltaTimeZero;                                // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigVMHost_SetAbsoluteTime) == 0x000004, "Wrong alignment on RigVMHost_SetAbsoluteTime");
static_assert(sizeof(RigVMHost_SetAbsoluteTime) == 0x000008, "Wrong size on RigVMHost_SetAbsoluteTime");
static_assert(offsetof(RigVMHost_SetAbsoluteTime, InAbsoluteTime) == 0x000000, "Member 'RigVMHost_SetAbsoluteTime::InAbsoluteTime' has a wrong offset!");
static_assert(offsetof(RigVMHost_SetAbsoluteTime, InSetDeltaTimeZero) == 0x000004, "Member 'RigVMHost_SetAbsoluteTime::InSetDeltaTimeZero' has a wrong offset!");

// Function RigVM.RigVMHost.SetDeltaTime
// 0x0004 (0x0004 - 0x0000)
struct RigVMHost_SetDeltaTime final
{
public:
	float                                         InDeltaTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigVMHost_SetDeltaTime) == 0x000004, "Wrong alignment on RigVMHost_SetDeltaTime");
static_assert(sizeof(RigVMHost_SetDeltaTime) == 0x000004, "Wrong size on RigVMHost_SetDeltaTime");
static_assert(offsetof(RigVMHost_SetDeltaTime, InDeltaTime) == 0x000000, "Member 'RigVMHost_SetDeltaTime::InDeltaTime' has a wrong offset!");

// Function RigVM.RigVMHost.SetFramesPerSecond
// 0x0004 (0x0004 - 0x0000)
struct RigVMHost_SetFramesPerSecond final
{
public:
	float                                         InFramesPerSecond;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigVMHost_SetFramesPerSecond) == 0x000004, "Wrong alignment on RigVMHost_SetFramesPerSecond");
static_assert(sizeof(RigVMHost_SetFramesPerSecond) == 0x000004, "Wrong size on RigVMHost_SetFramesPerSecond");
static_assert(offsetof(RigVMHost_SetFramesPerSecond, InFramesPerSecond) == 0x000000, "Member 'RigVMHost_SetFramesPerSecond::InFramesPerSecond' has a wrong offset!");

// Function RigVM.RigVMHost.SetVariableFromString
// 0x0020 (0x0020 - 0x0000)
struct RigVMHost_SetVariableFromString final
{
public:
	class FName                                   InVariableName;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InValue;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigVMHost_SetVariableFromString) == 0x000008, "Wrong alignment on RigVMHost_SetVariableFromString");
static_assert(sizeof(RigVMHost_SetVariableFromString) == 0x000020, "Wrong size on RigVMHost_SetVariableFromString");
static_assert(offsetof(RigVMHost_SetVariableFromString, InVariableName) == 0x000000, "Member 'RigVMHost_SetVariableFromString::InVariableName' has a wrong offset!");
static_assert(offsetof(RigVMHost_SetVariableFromString, InValue) == 0x000008, "Member 'RigVMHost_SetVariableFromString::InValue' has a wrong offset!");
static_assert(offsetof(RigVMHost_SetVariableFromString, ReturnValue) == 0x000018, "Member 'RigVMHost_SetVariableFromString::ReturnValue' has a wrong offset!");

// Function RigVM.RigVMHost.CanExecute
// 0x0001 (0x0001 - 0x0000)
struct RigVMHost_CanExecute final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigVMHost_CanExecute) == 0x000001, "Wrong alignment on RigVMHost_CanExecute");
static_assert(sizeof(RigVMHost_CanExecute) == 0x000001, "Wrong size on RigVMHost_CanExecute");
static_assert(offsetof(RigVMHost_CanExecute, ReturnValue) == 0x000000, "Member 'RigVMHost_CanExecute::ReturnValue' has a wrong offset!");

// Function RigVM.RigVMHost.GetAbsoluteTime
// 0x0004 (0x0004 - 0x0000)
struct RigVMHost_GetAbsoluteTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigVMHost_GetAbsoluteTime) == 0x000004, "Wrong alignment on RigVMHost_GetAbsoluteTime");
static_assert(sizeof(RigVMHost_GetAbsoluteTime) == 0x000004, "Wrong size on RigVMHost_GetAbsoluteTime");
static_assert(offsetof(RigVMHost_GetAbsoluteTime, ReturnValue) == 0x000000, "Member 'RigVMHost_GetAbsoluteTime::ReturnValue' has a wrong offset!");

// Function RigVM.RigVMHost.GetCurrentFramesPerSecond
// 0x0004 (0x0004 - 0x0000)
struct RigVMHost_GetCurrentFramesPerSecond final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigVMHost_GetCurrentFramesPerSecond) == 0x000004, "Wrong alignment on RigVMHost_GetCurrentFramesPerSecond");
static_assert(sizeof(RigVMHost_GetCurrentFramesPerSecond) == 0x000004, "Wrong size on RigVMHost_GetCurrentFramesPerSecond");
static_assert(offsetof(RigVMHost_GetCurrentFramesPerSecond, ReturnValue) == 0x000000, "Member 'RigVMHost_GetCurrentFramesPerSecond::ReturnValue' has a wrong offset!");

// Function RigVM.RigVMHost.GetDeltaTime
// 0x0004 (0x0004 - 0x0000)
struct RigVMHost_GetDeltaTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigVMHost_GetDeltaTime) == 0x000004, "Wrong alignment on RigVMHost_GetDeltaTime");
static_assert(sizeof(RigVMHost_GetDeltaTime) == 0x000004, "Wrong size on RigVMHost_GetDeltaTime");
static_assert(offsetof(RigVMHost_GetDeltaTime, ReturnValue) == 0x000000, "Member 'RigVMHost_GetDeltaTime::ReturnValue' has a wrong offset!");

// Function RigVM.RigVMHost.GetScriptAccessibleVariables
// 0x0010 (0x0010 - 0x0000)
struct RigVMHost_GetScriptAccessibleVariables final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigVMHost_GetScriptAccessibleVariables) == 0x000008, "Wrong alignment on RigVMHost_GetScriptAccessibleVariables");
static_assert(sizeof(RigVMHost_GetScriptAccessibleVariables) == 0x000010, "Wrong size on RigVMHost_GetScriptAccessibleVariables");
static_assert(offsetof(RigVMHost_GetScriptAccessibleVariables, ReturnValue) == 0x000000, "Member 'RigVMHost_GetScriptAccessibleVariables::ReturnValue' has a wrong offset!");

// Function RigVM.RigVMHost.GetSupportedEvents
// 0x0010 (0x0010 - 0x0000)
struct RigVMHost_GetSupportedEvents final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigVMHost_GetSupportedEvents) == 0x000008, "Wrong alignment on RigVMHost_GetSupportedEvents");
static_assert(sizeof(RigVMHost_GetSupportedEvents) == 0x000010, "Wrong size on RigVMHost_GetSupportedEvents");
static_assert(offsetof(RigVMHost_GetSupportedEvents, ReturnValue) == 0x000000, "Member 'RigVMHost_GetSupportedEvents::ReturnValue' has a wrong offset!");

// Function RigVM.RigVMHost.GetVariableAsString
// 0x0018 (0x0018 - 0x0000)
struct RigVMHost_GetVariableAsString final
{
public:
	class FName                                   InVariableName;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigVMHost_GetVariableAsString) == 0x000008, "Wrong alignment on RigVMHost_GetVariableAsString");
static_assert(sizeof(RigVMHost_GetVariableAsString) == 0x000018, "Wrong size on RigVMHost_GetVariableAsString");
static_assert(offsetof(RigVMHost_GetVariableAsString, InVariableName) == 0x000000, "Member 'RigVMHost_GetVariableAsString::InVariableName' has a wrong offset!");
static_assert(offsetof(RigVMHost_GetVariableAsString, ReturnValue) == 0x000008, "Member 'RigVMHost_GetVariableAsString::ReturnValue' has a wrong offset!");

// Function RigVM.RigVMHost.GetVariableType
// 0x0010 (0x0010 - 0x0000)
struct RigVMHost_GetVariableType final
{
public:
	class FName                                   InVariableName;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigVMHost_GetVariableType) == 0x000004, "Wrong alignment on RigVMHost_GetVariableType");
static_assert(sizeof(RigVMHost_GetVariableType) == 0x000010, "Wrong size on RigVMHost_GetVariableType");
static_assert(offsetof(RigVMHost_GetVariableType, InVariableName) == 0x000000, "Member 'RigVMHost_GetVariableType::InVariableName' has a wrong offset!");
static_assert(offsetof(RigVMHost_GetVariableType, ReturnValue) == 0x000008, "Member 'RigVMHost_GetVariableType::ReturnValue' has a wrong offset!");

// Function RigVM.RigVMHost.IsInitRequired
// 0x0001 (0x0001 - 0x0000)
struct RigVMHost_IsInitRequired final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigVMHost_IsInitRequired) == 0x000001, "Wrong alignment on RigVMHost_IsInitRequired");
static_assert(sizeof(RigVMHost_IsInitRequired) == 0x000001, "Wrong size on RigVMHost_IsInitRequired");
static_assert(offsetof(RigVMHost_IsInitRequired, ReturnValue) == 0x000000, "Member 'RigVMHost_IsInitRequired::ReturnValue' has a wrong offset!");

// Function RigVM.RigVMHost.SupportsEvent
// 0x000C (0x000C - 0x0000)
struct RigVMHost_SupportsEvent final
{
public:
	class FName                                   InEventName;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigVMHost_SupportsEvent) == 0x000004, "Wrong alignment on RigVMHost_SupportsEvent");
static_assert(sizeof(RigVMHost_SupportsEvent) == 0x00000C, "Wrong size on RigVMHost_SupportsEvent");
static_assert(offsetof(RigVMHost_SupportsEvent, InEventName) == 0x000000, "Member 'RigVMHost_SupportsEvent::InEventName' has a wrong offset!");
static_assert(offsetof(RigVMHost_SupportsEvent, ReturnValue) == 0x000008, "Member 'RigVMHost_SupportsEvent::ReturnValue' has a wrong offset!");

}

