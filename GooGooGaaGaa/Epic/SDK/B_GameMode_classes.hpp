#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_GameMode

#include "Basic.hpp"

#include "E_JoinAsHunterStates_structs.hpp"
#include "SMapData_structs.hpp"
#include "Engine_structs.hpp"
#include "EGameMessageType_structs.hpp"
#include "PropWitchHuntModule_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "E_MapSize_structs.hpp"
#include "ETeamID_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_GameMode.B_GameMode_C
// 0x0228 (0x05A8 - 0x0380)
class AB_GameMode_C : public ABaseGameMode
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0380(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInitialized;                                     // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_391[0x3];                                      // 0x0391(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WaitTime;                                          // 0x0394(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ListGameMode;                                      // 0x0398(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_399[0x3];                                      // 0x0399(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DisplayName;                                       // 0x039C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A4[0x4];                                      // 0x03A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 WitchPawn;                                         // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 HunterPawn;                                        // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 SpectatorPawn;                                     // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 KillSpectator;                                     // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          UsedInQuickmatch;                                  // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C9[0x3];                                      // 0x03C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MedalsCount;                                       // 0x03CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UpdateSessionInfo;                                 // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D1[0x3];                                      // 0x03D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CommandLineName;                                   // 0x03D4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DC[0x4];                                      // 0x03DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RetryStartNewGameCountdown;                        // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableSkillSelection;                              // 0x03E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E9[0x7];                                      // 0x03E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TrackTime;                                         // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PickupSpawnOffset;                                 // 0x03F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GrantWinBonus;                                     // 0x0410(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_411[0x7];                                      // 0x0411(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SecondsForOneXPHunterTeam;                         // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SecondsForOneXPWitchTeam;                          // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ExpWinMultiplier;                                  // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PickupMinSecondsUntilSpawn;                        // 0x0430(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PickupFlexibleSecondsUntilSpawn;                   // 0x0434(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HunterPickupDropTimer;                             // 0x0438(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_439[0x7];                                      // 0x0439(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           NewPickupTimer;                                    // 0x0440(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UClass*>                         AllowedWitchPickups;                               // 0x0448(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UClass*>                         AllowedHunterPickups;                              // 0x0458(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         XpPerLastHit;                                      // 0x0468(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         XpPerAssist;                                       // 0x046C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TimerRemainingSeconds;                             // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TimerInitialTime;                                  // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TimerIsCounting;                                   // 0x0480(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_481[0x7];                                      // 0x0481(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AB_StaticMeshProp_C*>            CommonProps;                                       // 0x0488(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          EnablePropLayouts;                                 // 0x0498(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_499[0x7];                                      // 0x0499(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       LastWitchBeforeEnd;                                // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<int32, int32>                            HuntersPerPlayerCount;                             // 0x04A8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<uint8, int32>                            TournamentScoreForWitch;                           // 0x04F8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          MatchStarted;                                      // 0x0548(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_549[0x7];                                      // 0x0549(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StartTime;                                         // 0x0550(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FSMapData>                      MapsToVote;                                        // 0x0560(0x0010)(Edit, BlueprintVisible)
	struct FTimerHandle                           UpdateSessionTimer;                                // 0x0570(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnMidGamePlayerJoin;                               // 0x0578(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsUsingCustomGameRules;                            // 0x0588(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLiveRuleEditingAllowed;                          // 0x0589(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_58A[0x6];                                      // 0x058A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 DisconnectedPlayers;                               // 0x0590(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          MapsToVoteUpdateNeeded;                            // 0x05A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TimerHasBeenIncreased;                             // 0x05A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void OnMidGamePlayerJoin__DelegateSignature();
	void Initialize();
	void PlayerIDReceived(class AB_PlayerState_C* PlayerState);
	void HandleStartMatch();
	void HandleEndMatch(ETeamID WinnerTeam, bool ForceRegardlessOfEnd);
	void TimerFinished();
	void ReceiveBeginPlay();
	void SpawnPlaceableStatic(class UClass* Class_0, const struct FTransform& Transform, TArray<uint8>& MaterialIndices, class ABP_PlaceableStaticProp_C** SpawnedActor);
	void SpawnSwitch(class UClass* Class_0, const struct FTransform& Transform, bool BreaksAfterUse, class ABP_Switch_C** SpawnedActor);
	void SpawnProp(class UClass* Class_0, const struct FTransform& Transform, bool StartAwake, bool IsFrozen, class AB_StaticMeshProp_C** SpawnedActor);
	void SpawnPlaceableLight(class UClass* Class_0, const struct FTransform& Transform, const struct FVector& Color, bool Activated, class ABP_PlaceableLight_C** SpawnedActor);
	void SpawnActionProp(class UClass* Class_0, const struct FTransform& Transform, bool StartAwake, bool IsFrozen, bool Activated, class AB_StaticMeshProp_C** SpawnedActor);
	void SpawnActionPlaceableStatic(class UClass* Class_0, const struct FTransform& Transform, bool Activated, TArray<uint8>& MaterialIndices, class ABP_PlaceableStaticProp_C** SpawnedActor);
	void GetPlayerIdForMatch(class APlayerState* PlayerState, struct FUniqueNetIdRepl* NetId, bool* IsPSNUser);
	void SetupMatchStartDetails();
	void CreateOnlineMatch();
	void SendPlayerJoinedMessageToAll(class APlayerController* SourcePlayer);
	void HandleReceivedAccountInfo(int32 AccountId, const class FString& ProductUserId, class UB_ServerClientConfig_C* AccountClientConfig, int32 AccountState);
	void TryIncreaseTimerIfMapVoteScreenNecessary();
	void KickPlayer(int32 WitchItAccountId, int32 Code, const class FString& Reason);
	void SetGameIsUsingCustomRules(bool UsingCustomRules);
	void CanJoinAsMidgameHunter(bool* JoinAsHunter);
	void SendServerInfoToClient(class APlayerController* JoiningPlayerController);
	void HandleShouldGameStart(bool* IsReady);
	void AddMapsToVoteBySize(E_MapSize TargetSize, const struct FSMapData& MapToIgnore);
	void TurnPlayerIntoSpectator(class AController* PlayerController);
	void HandleEndMatchForQuests();
	void Increase_Quest_Progress_for_Player_Unchecked(class AB_PlayerState_C* Player, int64 ObjectiveId, int32 Value);
	void PostQuestProgressForPlayer(class AB_PlayerState_C* Player, int64 ObjectiveId, const class FString& Value);
	void PostQuestProgressForPlayerUnchecked(class AB_PlayerState_C* Player, int64 ObjectiveId, const class FString& Value);
	void ShouldPostQuestProgressForPlayer(class AB_PlayerState_C* Player, bool* Result);
	void ShouldPostQuestProgress(bool* Result);
	void PostWinObjectiveForPlayer(class AB_PlayerState_C* Player);
	void PostPlayObjectiveForPlayer(class AB_PlayerState_C* Player);
	void SetAccountIdForProductUserId(int32 AccountId, const class FString& ProductUserId, class UB_ServerClientConfig_C* AccountClientConfig, int32 AccountState);
	void GetAntiBotTravelRequirement(class AB_PlayerState_C* PlayerState, double* Distance);
	void UpdateCustomGameMatchOptions();
	void SpawnNewPlayerPawn(ETeamID Team, class AController* PlayerController, class APawn** PlayerPawn);
	void GetNewPlayerPawnByTeam(ETeamID Team, class UClass** Player_Pawn);
	void SortTournamentPlayers(class UObject* ObjectA, class UObject* ObjectB, bool* Result);
	bool GetPlaytimeFitsDatetime(class AB_PlayerState_C* PlayerState);
	class APawn* SpawnDefaultPawnFor(class AController* NewPlayer, class AActor* StartSpot);
	void GetNewPlayerStartTransform(ETeamID Team, struct FTransform* StartTransform);
	void GetBaseXPNumerator(double* Numerator);
	void GetLastSurvivingWitch(bool* LastWitchExists, class AB_PlayerState_C** LastWitchPlayer);
	void GetNumberOfActivePlayers(int32* ActiveCount);
	void LoadPropLayoutFromSaveGame(TArray<struct FPropToSave>& PropsToLoad, TArray<struct FPlaceableStaticToSave>& PlaceableStaticsToLoad, TArray<struct FPlaceableLightToSave>& PlaceableLightsToLoad, TArray<struct FSwitchToSave>& SwitchesToLoad, TArray<struct FPrefabToSave>& PrefabsToLoad, int32* LoadedPropsCount, int32* LoadedPlaceableStaticsCount);
	void LoadPropLayout(const struct FS_PropLayoutData& Layout, bool UseCompression, class FString* WorkshopID, int32* AmountOfProps, int32* AmountOfPlaceableStatics);
	void RemoveAllProps();
	void HandlePlayerLeft(class AB_PlayerController_C* PlayerController);
	void Handle_Player_Join(class APlayerController* PlayerController);
	void GetPlayerScoreStatManager(class AB_PlayerState_C* PlayerState, class UB_ScoreStatManager_C** ScoreStatManager);
	void IsPlayerInWinnerTeam(class AB_PlayerState_C* PlayerState, bool* InWinnerTeam);
	void GetPlayerPlayTime(class AB_PlayerState_C* PlayerState, int32* Playtime);
	void UpdateSessionProperties();
	void TimerSecondElapsed(double RemainingSeconds);
	void TimerTick();
	void TimerStop();
	void TimerStart(int32 Time);
	void HandleGrantExp(class AB_PlayerState_C* CurrentPlayerState, int32* TotalGrantedXp);
	void RemoveActiveBuffs(class APlayerController* KilledWitchController);
	double GetPickupSpawnDelay();
	void GetPlayersWhoWantsToPlayCount(int32* PlayersWhoWantsToPlayCount);
	void DetermineNextMapFromVotes();
	void HandleEndMatchForPlayers();
	void DetermineNewMapsForVote();
	void SpawnAMagicRelict(const struct FVector& Location, ETeamID RelevantToTeam);
	void SpawnMagicRelict();
	void HasPlayerBotBehaviour(class AB_PlayerState_C* PlayerState, bool* IsProbablyBot);
	void TickRetryStartNewGameCountdown();
	void TickKickVote();
	void CheckRandomTimerForWaitState(bool* IsRandom);
	void CalculateAndReplicateBestMedals();
	void SortScoreStat(class UObject* A, class UObject* B, bool* Return);
	void GetAllScoreStatsSorted(TArray<class UB_CalculatedScoreStatToSort_C*>* SortedCalculatedScoreStats);
	void ReplicateSleepingProps(class AB_PlayerController_C* PlayerController);
	void SetKilledWitchToSpectator(class AActor* WitchActor, class APlayerState* Killer, bool SpawnAtPlayerStart);
	void CheckEndMatchHuntersDead();
	void CheckEndMatchWitchesDead();
	void GetHuntersCount(uint8* HuntersCount);
	void CheckTimerForWaitState();
	void RandomizeTeamSelection();
	void StartNewGame(bool RestartByPlayerJoin);
	void UnregisterPlayer(class AController* PlayerController);
	void EnsureInitialize();
	void GetWitchesCount(uint8* WitchesCount);
	uint8 GetTotalWitchCount();
	void KillPlayer(class AController* KilledController, class AController* Killer, ETeamID KilledPlayerTeam);
	void RegisterPlayer(class APlayerController* PlayerController);
	void CheckIfAllPlayersAreReady(bool* IsReady);
	void OnDestroySessionComplete_BC6CE1BA4A9064285EE44985FF9B06B2(class FName SessionName, bool bWasSuccessful);
	void OnCallFailed_BC6CE1BA4A9064285EE44985FF9B06B2(class FName SessionName, bool bWasSuccessful);
	void StartGame();
	void K2_PostLogin(class APlayerController* NewPlayer);
	void K2_OnLogout(class AController* ExitingController);
	void ReceiveTick(float DeltaSeconds);
	void OnFinishedPickupTimer();
	void CheckRemainingSeconds();
	void OnReceivedAccountIdForAccountName(int32 AccountId, const class FString& RequestedAccountName, class UB_ServerClientConfig_C* ClientConfig, int32 AccountState);
	void OnUpdateSessionTimerFunc();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void HandleTeardownPacket();
	void RegisterDedicatedServerEvents();
	void UnregisterDedicatedServerEvents();
	void HandleShowSystemMessageCommand(const class FString& Message);
	void HandleKickPlayerCommand(int32 WitchItAccountId, int32 Code, const class FString& Message);
	void OnHandleTeardownMessageDedicatedServer();
	void ShutdownServer();
	void ExecuteUbergraph_B_GameMode(int32 EntryPoint);

	void GetPlayObjectiveId(int64* ObjectiveId) const;
	void GetWinObjectiveId(int64* ObjectiveId) const;
	void FindPlayerControllerByPlayerState(class APlayerState* PlayerState, class APlayerController** Out) const;
	void FindPlayerStateByWitchItAccountId(int32 WitchItAccountId, class APlayerState** Out) const;
	void IsTearingDown(bool* Result) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_GameMode_C">();
	}
	static class AB_GameMode_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_GameMode_C>();
	}
};
static_assert(alignof(AB_GameMode_C) == 0x000008, "Wrong alignment on AB_GameMode_C");
static_assert(sizeof(AB_GameMode_C) == 0x0005A8, "Wrong size on AB_GameMode_C");
static_assert(offsetof(AB_GameMode_C, UberGraphFrame) == 0x000380, "Member 'AB_GameMode_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AB_GameMode_C, DefaultSceneRoot) == 0x000388, "Member 'AB_GameMode_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AB_GameMode_C, IsInitialized) == 0x000390, "Member 'AB_GameMode_C::IsInitialized' has a wrong offset!");
static_assert(offsetof(AB_GameMode_C, WaitTime) == 0x000394, "Member 'AB_GameMode_C::WaitTime' has a wrong offset!");
static_assert(offsetof(AB_GameMode_C, ListGameMode) == 0x000398, "Member 'AB_GameMode_C::ListGameMode' has a wrong offset!");
static_assert(offsetof(AB_GameMode_C, DisplayName) == 0x00039C, "Member 'AB_GameMode_C::DisplayName' has a wrong offset!");
static_assert(offsetof(AB_GameMode_C, WitchPawn) == 0x0003A8, "Member 'AB_GameMode_C::WitchPawn' has a wrong offset!");
static_assert(offsetof(AB_GameMode_C, HunterPawn) == 0x0003B0, "Member 'AB_GameMode_C::HunterPawn' has a wrong offset!");
static_assert(offsetof(AB_GameMode_C, SpectatorPawn) == 0x0003B8, "Member 'AB_GameMode_C::SpectatorPawn' has a wrong offset!");
static_assert(offsetof(AB_GameMode_C, KillSpectator) == 0x0003C0, "Member 'AB_GameMode_C::KillSpectator' has a wrong offset!");
static_assert(offsetof(AB_GameMode_C, UsedInQuickmatch) == 0x0003C8, "Member 'AB_GameMode_C::UsedInQuickmatch' has a wrong offset!");
static_assert(offsetof(AB_GameMode_C, MedalsCount) == 0x0003CC, "Member 'AB_GameMode_C::MedalsCount' has a wrong offset!");
static_assert(offsetof(AB_GameMode_C, UpdateSessionInfo) == 0x0003D0, "Member 'AB_GameMode_C::UpdateSessionInfo' has a wrong offset!");
static_assert(offsetof(AB_GameMode_C, CommandLineName) == 0x0003D4, "Member 'AB_GameMode_C::CommandLineName' has a wrong offset!");
static_assert(offsetof(AB_GameMode_C, RetryStartNewGameCountdown) == 0x0003E0, "Member 'AB_GameMode_C::RetryStartNewGameCountdown' has a wrong offset!");
static_assert(offsetof(AB_GameMode_C, EnableSkillSelection) == 0x0003E8, "Member 'AB_GameMode_C::EnableSkillSelection' has a wrong offset!");
static_assert(offsetof(AB_GameMode_C, TrackTime) == 0x0003F0, "Member 'AB_GameMode_C::TrackTime' has a wrong offset!");
static_assert(offsetof(AB_GameMode_C, PickupSpawnOffset) == 0x0003F8, "Member 'AB_GameMode_C::PickupSpawnOffset' has a wrong offset!");
static_assert(offsetof(AB_GameMode_C, GrantWinBonus) == 0x000410, "Member 'AB_GameMode_C::GrantWinBonus' has a wrong offset!");
static_assert(offsetof(AB_GameMode_C, SecondsForOneXPHunterTeam) == 0x000418, "Member 'AB_GameMode_C::SecondsForOneXPHunterTeam' has a wrong offset!");
static_assert(offsetof(AB_GameMode_C, SecondsForOneXPWitchTeam) == 0x000420, "Member 'AB_GameMode_C::SecondsForOneXPWitchTeam' has a wrong offset!");
static_assert(offsetof(AB_GameMode_C, ExpWinMultiplier) == 0x000428, "Member 'AB_GameMode_C::ExpWinMultiplier' has a wrong offset!");
static_assert(offsetof(AB_GameMode_C, PickupMinSecondsUntilSpawn) == 0x000430, "Member 'AB_GameMode_C::PickupMinSecondsUntilSpawn' has a wrong offset!");
static_assert(offsetof(AB_GameMode_C, PickupFlexibleSecondsUntilSpawn) == 0x000434, "Member 'AB_GameMode_C::PickupFlexibleSecondsUntilSpawn' has a wrong offset!");
static_assert(offsetof(AB_GameMode_C, HunterPickupDropTimer) == 0x000438, "Member 'AB_GameMode_C::HunterPickupDropTimer' has a wrong offset!");
static_assert(offsetof(AB_GameMode_C, NewPickupTimer) == 0x000440, "Member 'AB_GameMode_C::NewPickupTimer' has a wrong offset!");
static_assert(offsetof(AB_GameMode_C, AllowedWitchPickups) == 0x000448, "Member 'AB_GameMode_C::AllowedWitchPickups' has a wrong offset!");
static_assert(offsetof(AB_GameMode_C, AllowedHunterPickups) == 0x000458, "Member 'AB_GameMode_C::AllowedHunterPickups' has a wrong offset!");
static_assert(offsetof(AB_GameMode_C, XpPerLastHit) == 0x000468, "Member 'AB_GameMode_C::XpPerLastHit' has a wrong offset!");
static_assert(offsetof(AB_GameMode_C, XpPerAssist) == 0x00046C, "Member 'AB_GameMode_C::XpPerAssist' has a wrong offset!");
static_assert(offsetof(AB_GameMode_C, TimerRemainingSeconds) == 0x000470, "Member 'AB_GameMode_C::TimerRemainingSeconds' has a wrong offset!");
static_assert(offsetof(AB_GameMode_C, TimerInitialTime) == 0x000478, "Member 'AB_GameMode_C::TimerInitialTime' has a wrong offset!");
static_assert(offsetof(AB_GameMode_C, TimerIsCounting) == 0x000480, "Member 'AB_GameMode_C::TimerIsCounting' has a wrong offset!");
static_assert(offsetof(AB_GameMode_C, CommonProps) == 0x000488, "Member 'AB_GameMode_C::CommonProps' has a wrong offset!");
static_assert(offsetof(AB_GameMode_C, EnablePropLayouts) == 0x000498, "Member 'AB_GameMode_C::EnablePropLayouts' has a wrong offset!");
static_assert(offsetof(AB_GameMode_C, LastWitchBeforeEnd) == 0x0004A0, "Member 'AB_GameMode_C::LastWitchBeforeEnd' has a wrong offset!");
static_assert(offsetof(AB_GameMode_C, HuntersPerPlayerCount) == 0x0004A8, "Member 'AB_GameMode_C::HuntersPerPlayerCount' has a wrong offset!");
static_assert(offsetof(AB_GameMode_C, TournamentScoreForWitch) == 0x0004F8, "Member 'AB_GameMode_C::TournamentScoreForWitch' has a wrong offset!");
static_assert(offsetof(AB_GameMode_C, MatchStarted) == 0x000548, "Member 'AB_GameMode_C::MatchStarted' has a wrong offset!");
static_assert(offsetof(AB_GameMode_C, StartTime) == 0x000550, "Member 'AB_GameMode_C::StartTime' has a wrong offset!");
static_assert(offsetof(AB_GameMode_C, MapsToVote) == 0x000560, "Member 'AB_GameMode_C::MapsToVote' has a wrong offset!");
static_assert(offsetof(AB_GameMode_C, UpdateSessionTimer) == 0x000570, "Member 'AB_GameMode_C::UpdateSessionTimer' has a wrong offset!");
static_assert(offsetof(AB_GameMode_C, OnMidGamePlayerJoin) == 0x000578, "Member 'AB_GameMode_C::OnMidGamePlayerJoin' has a wrong offset!");
static_assert(offsetof(AB_GameMode_C, IsUsingCustomGameRules) == 0x000588, "Member 'AB_GameMode_C::IsUsingCustomGameRules' has a wrong offset!");
static_assert(offsetof(AB_GameMode_C, IsLiveRuleEditingAllowed) == 0x000589, "Member 'AB_GameMode_C::IsLiveRuleEditingAllowed' has a wrong offset!");
static_assert(offsetof(AB_GameMode_C, DisconnectedPlayers) == 0x000590, "Member 'AB_GameMode_C::DisconnectedPlayers' has a wrong offset!");
static_assert(offsetof(AB_GameMode_C, MapsToVoteUpdateNeeded) == 0x0005A0, "Member 'AB_GameMode_C::MapsToVoteUpdateNeeded' has a wrong offset!");
static_assert(offsetof(AB_GameMode_C, TimerHasBeenIncreased) == 0x0005A1, "Member 'AB_GameMode_C::TimerHasBeenIncreased' has a wrong offset!");

}

