#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_GSStatAndAchievementsCache

#include "Basic.hpp"

#include "E_StatSetBy_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "S_Stat_structs.hpp"


namespace SDK::Params
{

// Function B_GSStatAndAchievementsCache.B_GSStatAndAchievementsCache_C.GetAllStats
// 0x0070 (0x0070 - 0x0000)
struct B_GSStatAndAchievementsCache_C_GetAllStats final
{
public:
	class AB_PlayerState_C*                       PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<struct FS_Stat>                        ResultData;                                        // 0x0008(0x0010)(Parm, OutParm)
	bool                                          Success;                                           // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_Stat>                        EmptyData;                                         // 0x0020(0x0010)(Edit, BlueprintVisible)
	class FString                                 CallFunc_GetProductUserId_ProductUserId;           // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetProductUserId_PlatformType;            // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UB_StatAndAchievementsCache_C*          CallFunc_Map_Find_Value;                           // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_Stat>                        CallFunc_GetAllStats_ResultData;                   // 0x0060(0x0010)(ReferenceParm)
};
static_assert(alignof(B_GSStatAndAchievementsCache_C_GetAllStats) == 0x000008, "Wrong alignment on B_GSStatAndAchievementsCache_C_GetAllStats");
static_assert(sizeof(B_GSStatAndAchievementsCache_C_GetAllStats) == 0x000070, "Wrong size on B_GSStatAndAchievementsCache_C_GetAllStats");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetAllStats, PlayerState) == 0x000000, "Member 'B_GSStatAndAchievementsCache_C_GetAllStats::PlayerState' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetAllStats, ResultData) == 0x000008, "Member 'B_GSStatAndAchievementsCache_C_GetAllStats::ResultData' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetAllStats, Success) == 0x000018, "Member 'B_GSStatAndAchievementsCache_C_GetAllStats::Success' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetAllStats, EmptyData) == 0x000020, "Member 'B_GSStatAndAchievementsCache_C_GetAllStats::EmptyData' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetAllStats, CallFunc_GetProductUserId_ProductUserId) == 0x000030, "Member 'B_GSStatAndAchievementsCache_C_GetAllStats::CallFunc_GetProductUserId_ProductUserId' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetAllStats, CallFunc_GetProductUserId_PlatformType) == 0x000040, "Member 'B_GSStatAndAchievementsCache_C_GetAllStats::CallFunc_GetProductUserId_PlatformType' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetAllStats, CallFunc_Map_Find_Value) == 0x000050, "Member 'B_GSStatAndAchievementsCache_C_GetAllStats::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetAllStats, CallFunc_Map_Find_ReturnValue) == 0x000058, "Member 'B_GSStatAndAchievementsCache_C_GetAllStats::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetAllStats, CallFunc_GetAllStats_ResultData) == 0x000060, "Member 'B_GSStatAndAchievementsCache_C_GetAllStats::CallFunc_GetAllStats_ResultData' has a wrong offset!");

// Function B_GSStatAndAchievementsCache.B_GSStatAndAchievementsCache_C.GetStatsBySetByType
// 0x0078 (0x0078 - 0x0000)
struct B_GSStatAndAchievementsCache_C_GetStatsBySetByType final
{
public:
	class AB_PlayerState_C*                       PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	E_StatSetBy                                   SetByFilter;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_Stat>                        ResultData;                                        // 0x0010(0x0010)(Parm, OutParm)
	bool                                          Success;                                           // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_Stat>                        EmptyData;                                         // 0x0028(0x0010)(Edit, BlueprintVisible)
	class FString                                 CallFunc_GetProductUserId_ProductUserId;           // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetProductUserId_PlatformType;            // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UB_StatAndAchievementsCache_C*          CallFunc_Map_Find_Value;                           // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_Stat>                        CallFunc_GetStatsBySetByType_ResultData;           // 0x0068(0x0010)(ReferenceParm)
};
static_assert(alignof(B_GSStatAndAchievementsCache_C_GetStatsBySetByType) == 0x000008, "Wrong alignment on B_GSStatAndAchievementsCache_C_GetStatsBySetByType");
static_assert(sizeof(B_GSStatAndAchievementsCache_C_GetStatsBySetByType) == 0x000078, "Wrong size on B_GSStatAndAchievementsCache_C_GetStatsBySetByType");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetStatsBySetByType, PlayerState) == 0x000000, "Member 'B_GSStatAndAchievementsCache_C_GetStatsBySetByType::PlayerState' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetStatsBySetByType, SetByFilter) == 0x000008, "Member 'B_GSStatAndAchievementsCache_C_GetStatsBySetByType::SetByFilter' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetStatsBySetByType, ResultData) == 0x000010, "Member 'B_GSStatAndAchievementsCache_C_GetStatsBySetByType::ResultData' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetStatsBySetByType, Success) == 0x000020, "Member 'B_GSStatAndAchievementsCache_C_GetStatsBySetByType::Success' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetStatsBySetByType, EmptyData) == 0x000028, "Member 'B_GSStatAndAchievementsCache_C_GetStatsBySetByType::EmptyData' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetStatsBySetByType, CallFunc_GetProductUserId_ProductUserId) == 0x000038, "Member 'B_GSStatAndAchievementsCache_C_GetStatsBySetByType::CallFunc_GetProductUserId_ProductUserId' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetStatsBySetByType, CallFunc_GetProductUserId_PlatformType) == 0x000048, "Member 'B_GSStatAndAchievementsCache_C_GetStatsBySetByType::CallFunc_GetProductUserId_PlatformType' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetStatsBySetByType, CallFunc_Map_Find_Value) == 0x000058, "Member 'B_GSStatAndAchievementsCache_C_GetStatsBySetByType::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetStatsBySetByType, CallFunc_Map_Find_ReturnValue) == 0x000060, "Member 'B_GSStatAndAchievementsCache_C_GetStatsBySetByType::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetStatsBySetByType, CallFunc_GetStatsBySetByType_ResultData) == 0x000068, "Member 'B_GSStatAndAchievementsCache_C_GetStatsBySetByType::CallFunc_GetStatsBySetByType_ResultData' has a wrong offset!");

// Function B_GSStatAndAchievementsCache.B_GSStatAndAchievementsCache_C.HasStat
// 0x0040 (0x0040 - 0x0000)
struct B_GSStatAndAchievementsCache_C_HasStat final
{
public:
	class FString                                 StatName;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       PlayerState;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IndexInListIfFound;                                // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         CallFunc_GetStat_Value;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetStat_WasFound;                         // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetStat_IndexInList;                      // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              CallFunc_GetStat_AchievementDateTime;              // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetStat_bIsHidden;                        // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GSStatAndAchievementsCache_C_HasStat) == 0x000008, "Wrong alignment on B_GSStatAndAchievementsCache_C_HasStat");
static_assert(sizeof(B_GSStatAndAchievementsCache_C_HasStat) == 0x000040, "Wrong size on B_GSStatAndAchievementsCache_C_HasStat");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_HasStat, StatName) == 0x000000, "Member 'B_GSStatAndAchievementsCache_C_HasStat::StatName' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_HasStat, PlayerState) == 0x000010, "Member 'B_GSStatAndAchievementsCache_C_HasStat::PlayerState' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_HasStat, Result) == 0x000018, "Member 'B_GSStatAndAchievementsCache_C_HasStat::Result' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_HasStat, IndexInListIfFound) == 0x00001C, "Member 'B_GSStatAndAchievementsCache_C_HasStat::IndexInListIfFound' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_HasStat, CallFunc_GetStat_Value) == 0x000020, "Member 'B_GSStatAndAchievementsCache_C_HasStat::CallFunc_GetStat_Value' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_HasStat, CallFunc_GetStat_WasFound) == 0x000028, "Member 'B_GSStatAndAchievementsCache_C_HasStat::CallFunc_GetStat_WasFound' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_HasStat, CallFunc_GetStat_IndexInList) == 0x00002C, "Member 'B_GSStatAndAchievementsCache_C_HasStat::CallFunc_GetStat_IndexInList' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_HasStat, CallFunc_GetStat_AchievementDateTime) == 0x000030, "Member 'B_GSStatAndAchievementsCache_C_HasStat::CallFunc_GetStat_AchievementDateTime' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_HasStat, CallFunc_GetStat_bIsHidden) == 0x000038, "Member 'B_GSStatAndAchievementsCache_C_HasStat::CallFunc_GetStat_bIsHidden' has a wrong offset!");

// Function B_GSStatAndAchievementsCache.B_GSStatAndAchievementsCache_C.SetStat
// 0x0058 (0x0058 - 0x0000)
struct B_GSStatAndAchievementsCache_C_SetStat final
{
public:
	class FString                                 StatName;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int64                                         Value;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerState*                           PlayerState;                                       // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_StatAndAchievementsCache_C*          NewStatCache;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetProductUserId_ProductUserId;           // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetProductUserId_PlatformType;            // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GSStatAndAchievementsCache_C_SetStat) == 0x000008, "Wrong alignment on B_GSStatAndAchievementsCache_C_SetStat");
static_assert(sizeof(B_GSStatAndAchievementsCache_C_SetStat) == 0x000058, "Wrong size on B_GSStatAndAchievementsCache_C_SetStat");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_SetStat, StatName) == 0x000000, "Member 'B_GSStatAndAchievementsCache_C_SetStat::StatName' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_SetStat, Value) == 0x000010, "Member 'B_GSStatAndAchievementsCache_C_SetStat::Value' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_SetStat, PlayerState) == 0x000018, "Member 'B_GSStatAndAchievementsCache_C_SetStat::PlayerState' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_SetStat, NewStatCache) == 0x000020, "Member 'B_GSStatAndAchievementsCache_C_SetStat::NewStatCache' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_SetStat, K2Node_DynamicCast_AsB_Player_State) == 0x000028, "Member 'B_GSStatAndAchievementsCache_C_SetStat::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_SetStat, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'B_GSStatAndAchievementsCache_C_SetStat::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_SetStat, CallFunc_GetProductUserId_ProductUserId) == 0x000038, "Member 'B_GSStatAndAchievementsCache_C_SetStat::CallFunc_GetProductUserId_ProductUserId' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_SetStat, CallFunc_GetProductUserId_PlatformType) == 0x000048, "Member 'B_GSStatAndAchievementsCache_C_SetStat::CallFunc_GetProductUserId_PlatformType' has a wrong offset!");

// Function B_GSStatAndAchievementsCache.B_GSStatAndAchievementsCache_C.SetStatByProductUserId
// 0x0060 (0x0060 - 0x0000)
struct B_GSStatAndAchievementsCache_C_SetStatByProductUserId final
{
public:
	class FString                                 StatName;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int64                                         Value;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 ProductUserId;                                     // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	E_StatSetBy                                   SetBy;                                             // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              AchievementGrantTimestamp;                         // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsHidden;                                         // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_StatAndAchievementsCache_C*          NewStatCache;                                      // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_StatAndAchievementsCache_C*          CallFunc_SpawnObject_ReturnValue;                  // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_StatAndAchievementsCache_C*          CallFunc_Map_Find_Value;                           // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GSStatAndAchievementsCache_C_SetStatByProductUserId) == 0x000008, "Wrong alignment on B_GSStatAndAchievementsCache_C_SetStatByProductUserId");
static_assert(sizeof(B_GSStatAndAchievementsCache_C_SetStatByProductUserId) == 0x000060, "Wrong size on B_GSStatAndAchievementsCache_C_SetStatByProductUserId");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_SetStatByProductUserId, StatName) == 0x000000, "Member 'B_GSStatAndAchievementsCache_C_SetStatByProductUserId::StatName' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_SetStatByProductUserId, Value) == 0x000010, "Member 'B_GSStatAndAchievementsCache_C_SetStatByProductUserId::Value' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_SetStatByProductUserId, ProductUserId) == 0x000018, "Member 'B_GSStatAndAchievementsCache_C_SetStatByProductUserId::ProductUserId' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_SetStatByProductUserId, SetBy) == 0x000028, "Member 'B_GSStatAndAchievementsCache_C_SetStatByProductUserId::SetBy' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_SetStatByProductUserId, AchievementGrantTimestamp) == 0x000030, "Member 'B_GSStatAndAchievementsCache_C_SetStatByProductUserId::AchievementGrantTimestamp' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_SetStatByProductUserId, bIsHidden) == 0x000038, "Member 'B_GSStatAndAchievementsCache_C_SetStatByProductUserId::bIsHidden' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_SetStatByProductUserId, NewStatCache) == 0x000040, "Member 'B_GSStatAndAchievementsCache_C_SetStatByProductUserId::NewStatCache' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_SetStatByProductUserId, CallFunc_SpawnObject_ReturnValue) == 0x000048, "Member 'B_GSStatAndAchievementsCache_C_SetStatByProductUserId::CallFunc_SpawnObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_SetStatByProductUserId, CallFunc_Map_Find_Value) == 0x000050, "Member 'B_GSStatAndAchievementsCache_C_SetStatByProductUserId::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_SetStatByProductUserId, CallFunc_Map_Find_ReturnValue) == 0x000058, "Member 'B_GSStatAndAchievementsCache_C_SetStatByProductUserId::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function B_GSStatAndAchievementsCache.B_GSStatAndAchievementsCache_C.GetStat
// 0x0090 (0x0090 - 0x0000)
struct B_GSStatAndAchievementsCache_C_GetStat final
{
public:
	class FString                                 StatName;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class APlayerState*                           PlayerState;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int64                                         Value;                                             // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WasFound;                                          // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IndexInList;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              AchievementDateTime;                               // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsHidden;                                         // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ResIndexInList;                                    // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ResWasFound;                                       // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ResValue;                                          // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetProductUserId_ProductUserId;           // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetProductUserId_PlatformType;            // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int64                                         CallFunc_GetStatByProductUserId_Value;             // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetStatByProductUserId_WasFound;          // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetStatByProductUserId_IndexInList;       // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              CallFunc_GetStatByProductUserId_AchievementDateTime; // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetStatByProductUserId_bIsHidden;         // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GSStatAndAchievementsCache_C_GetStat) == 0x000008, "Wrong alignment on B_GSStatAndAchievementsCache_C_GetStat");
static_assert(sizeof(B_GSStatAndAchievementsCache_C_GetStat) == 0x000090, "Wrong size on B_GSStatAndAchievementsCache_C_GetStat");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetStat, StatName) == 0x000000, "Member 'B_GSStatAndAchievementsCache_C_GetStat::StatName' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetStat, PlayerState) == 0x000010, "Member 'B_GSStatAndAchievementsCache_C_GetStat::PlayerState' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetStat, Value) == 0x000018, "Member 'B_GSStatAndAchievementsCache_C_GetStat::Value' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetStat, WasFound) == 0x000020, "Member 'B_GSStatAndAchievementsCache_C_GetStat::WasFound' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetStat, IndexInList) == 0x000024, "Member 'B_GSStatAndAchievementsCache_C_GetStat::IndexInList' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetStat, AchievementDateTime) == 0x000028, "Member 'B_GSStatAndAchievementsCache_C_GetStat::AchievementDateTime' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetStat, bIsHidden) == 0x000030, "Member 'B_GSStatAndAchievementsCache_C_GetStat::bIsHidden' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetStat, ResIndexInList) == 0x000034, "Member 'B_GSStatAndAchievementsCache_C_GetStat::ResIndexInList' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetStat, ResWasFound) == 0x000038, "Member 'B_GSStatAndAchievementsCache_C_GetStat::ResWasFound' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetStat, ResValue) == 0x00003C, "Member 'B_GSStatAndAchievementsCache_C_GetStat::ResValue' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetStat, K2Node_DynamicCast_AsB_Player_State) == 0x000040, "Member 'B_GSStatAndAchievementsCache_C_GetStat::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetStat, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'B_GSStatAndAchievementsCache_C_GetStat::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetStat, CallFunc_GetProductUserId_ProductUserId) == 0x000050, "Member 'B_GSStatAndAchievementsCache_C_GetStat::CallFunc_GetProductUserId_ProductUserId' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetStat, CallFunc_GetProductUserId_PlatformType) == 0x000060, "Member 'B_GSStatAndAchievementsCache_C_GetStat::CallFunc_GetProductUserId_PlatformType' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetStat, CallFunc_GetStatByProductUserId_Value) == 0x000070, "Member 'B_GSStatAndAchievementsCache_C_GetStat::CallFunc_GetStatByProductUserId_Value' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetStat, CallFunc_GetStatByProductUserId_WasFound) == 0x000078, "Member 'B_GSStatAndAchievementsCache_C_GetStat::CallFunc_GetStatByProductUserId_WasFound' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetStat, CallFunc_GetStatByProductUserId_IndexInList) == 0x00007C, "Member 'B_GSStatAndAchievementsCache_C_GetStat::CallFunc_GetStatByProductUserId_IndexInList' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetStat, CallFunc_GetStatByProductUserId_AchievementDateTime) == 0x000080, "Member 'B_GSStatAndAchievementsCache_C_GetStat::CallFunc_GetStatByProductUserId_AchievementDateTime' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetStat, CallFunc_GetStatByProductUserId_bIsHidden) == 0x000088, "Member 'B_GSStatAndAchievementsCache_C_GetStat::CallFunc_GetStatByProductUserId_bIsHidden' has a wrong offset!");

// Function B_GSStatAndAchievementsCache.B_GSStatAndAchievementsCache_C.GetStatByProductUserId
// 0x0078 (0x0078 - 0x0000)
struct B_GSStatAndAchievementsCache_C_GetStatByProductUserId final
{
public:
	class FString                                 StatName;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 ProductUserId;                                     // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int64                                         Value;                                             // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WasFound;                                          // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IndexInList;                                       // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              AchievementDateTime;                               // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsHidden;                                         // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ResIndexInList;                                    // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ResWasFound;                                       // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ResValue;                                          // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UB_StatAndAchievementsCache_C*          CallFunc_Map_Find_Value;                           // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CallFunc_GetStat_Value;                            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetStat_WasFound;                         // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetStat_IndexInList;                      // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              CallFunc_GetStat_AchievementDateTime;              // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetStat_bIsHidden;                        // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GSStatAndAchievementsCache_C_GetStatByProductUserId) == 0x000008, "Wrong alignment on B_GSStatAndAchievementsCache_C_GetStatByProductUserId");
static_assert(sizeof(B_GSStatAndAchievementsCache_C_GetStatByProductUserId) == 0x000078, "Wrong size on B_GSStatAndAchievementsCache_C_GetStatByProductUserId");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetStatByProductUserId, StatName) == 0x000000, "Member 'B_GSStatAndAchievementsCache_C_GetStatByProductUserId::StatName' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetStatByProductUserId, ProductUserId) == 0x000010, "Member 'B_GSStatAndAchievementsCache_C_GetStatByProductUserId::ProductUserId' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetStatByProductUserId, Value) == 0x000020, "Member 'B_GSStatAndAchievementsCache_C_GetStatByProductUserId::Value' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetStatByProductUserId, WasFound) == 0x000028, "Member 'B_GSStatAndAchievementsCache_C_GetStatByProductUserId::WasFound' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetStatByProductUserId, IndexInList) == 0x00002C, "Member 'B_GSStatAndAchievementsCache_C_GetStatByProductUserId::IndexInList' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetStatByProductUserId, AchievementDateTime) == 0x000030, "Member 'B_GSStatAndAchievementsCache_C_GetStatByProductUserId::AchievementDateTime' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetStatByProductUserId, bIsHidden) == 0x000038, "Member 'B_GSStatAndAchievementsCache_C_GetStatByProductUserId::bIsHidden' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetStatByProductUserId, ResIndexInList) == 0x00003C, "Member 'B_GSStatAndAchievementsCache_C_GetStatByProductUserId::ResIndexInList' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetStatByProductUserId, ResWasFound) == 0x000040, "Member 'B_GSStatAndAchievementsCache_C_GetStatByProductUserId::ResWasFound' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetStatByProductUserId, ResValue) == 0x000044, "Member 'B_GSStatAndAchievementsCache_C_GetStatByProductUserId::ResValue' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetStatByProductUserId, CallFunc_Map_Find_Value) == 0x000048, "Member 'B_GSStatAndAchievementsCache_C_GetStatByProductUserId::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetStatByProductUserId, CallFunc_Map_Find_ReturnValue) == 0x000050, "Member 'B_GSStatAndAchievementsCache_C_GetStatByProductUserId::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetStatByProductUserId, CallFunc_GetStat_Value) == 0x000058, "Member 'B_GSStatAndAchievementsCache_C_GetStatByProductUserId::CallFunc_GetStat_Value' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetStatByProductUserId, CallFunc_GetStat_WasFound) == 0x000060, "Member 'B_GSStatAndAchievementsCache_C_GetStatByProductUserId::CallFunc_GetStat_WasFound' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetStatByProductUserId, CallFunc_GetStat_IndexInList) == 0x000064, "Member 'B_GSStatAndAchievementsCache_C_GetStatByProductUserId::CallFunc_GetStat_IndexInList' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetStatByProductUserId, CallFunc_GetStat_AchievementDateTime) == 0x000068, "Member 'B_GSStatAndAchievementsCache_C_GetStatByProductUserId::CallFunc_GetStat_AchievementDateTime' has a wrong offset!");
static_assert(offsetof(B_GSStatAndAchievementsCache_C_GetStatByProductUserId, CallFunc_GetStat_bIsHidden) == 0x000070, "Member 'B_GSStatAndAchievementsCache_C_GetStatByProductUserId::CallFunc_GetStat_bIsHidden' has a wrong offset!");

}

