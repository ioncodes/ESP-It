#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_DamageHandler

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_DamageHandler.B_DamageHandler_C
// 0x0020 (0x00C0 - 0x00A0)
class UB_DamageHandler_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	double                                        Health;                                            // 0x00A8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxHealth;                                         // 0x00B0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UB_ActorEvents_C*                       ActorEvents;                                       // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void ShouldHandleDamage(bool* ShouldHandle);
	void IsDead(bool* IsDead_0);
	void GetOwnerPlayerState(class AB_PlayerState_C** PlayerState);
	void SetPlayerHealthPercental(double Percentage);
	void GetMaxHealth(double* ReturnMaxHealth);
	void SetMaxHealth(double NewMaxHealth);
	void GetHealth(double* ReturnHealth);
	void SetHealth(double NewHealth);
	void UpdatePlayerStateHealth();
	void AddAssisted(class AController* Causer);
	void Kill(class AController* Killer, bool SpawnAtPlayerStart);
	void RemoveTeamAndSetDead();
	void ProcessPointDamage(double Damage, const struct FVector& HitLocation, const struct FVector& HitDirection, class AController* Causer);
	void ProcessAnyDamage(double Damage, class AController* Causer, bool Silent);
	void RecalculateRelativeHealth(class UB_DamageHandler_C* OtherDamageHandler);
	void SetSpectator(class APlayerState* Killer, bool SpawnAtPlayerStart);
	void ApplyDamage(double Damage);
	void ProcessDamage(double Damage, class AController* Causer, bool Silent, bool* Killed);
	void AnyDamage(class AActor* DamagedActor, float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void PointDamage(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& ShotFromDirection, const class UDamageType* DamageType, class AActor* DamageCauser);
	void TakeAnyDamageMulticast(class AController* Causer);
	void TakePointDamageMulticast(const struct FVector& HitLocation, const struct FVector& HitDirection, class AController* Causer);
	void TakeDamageMulticast(class AController* Causer);
	void ReceiveBeginPlay();
	void ExecuteUbergraph_B_DamageHandler(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_DamageHandler_C">();
	}
	static class UB_DamageHandler_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UB_DamageHandler_C>();
	}
};
static_assert(alignof(UB_DamageHandler_C) == 0x000008, "Wrong alignment on UB_DamageHandler_C");
static_assert(sizeof(UB_DamageHandler_C) == 0x0000C0, "Wrong size on UB_DamageHandler_C");
static_assert(offsetof(UB_DamageHandler_C, UberGraphFrame) == 0x0000A0, "Member 'UB_DamageHandler_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UB_DamageHandler_C, Health) == 0x0000A8, "Member 'UB_DamageHandler_C::Health' has a wrong offset!");
static_assert(offsetof(UB_DamageHandler_C, MaxHealth) == 0x0000B0, "Member 'UB_DamageHandler_C::MaxHealth' has a wrong offset!");
static_assert(offsetof(UB_DamageHandler_C, ActorEvents) == 0x0000B8, "Member 'UB_DamageHandler_C::ActorEvents' has a wrong offset!");

}

