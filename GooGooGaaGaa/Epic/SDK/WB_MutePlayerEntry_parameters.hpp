#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_MutePlayerEntry

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WB_MutePlayerEntry.WB_MutePlayerEntry_C.ExecuteUbergraph_WB_MutePlayerEntry
// 0x0090 (0x0090 - 0x0000)
struct WB_MutePlayerEntry_C_ExecuteUbergraph_WB_MutePlayerEntry final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_1;            // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_1;            // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0044(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetMuteText_ReturnValue;                  // 0x0080(0x0010)()
};
static_assert(alignof(WB_MutePlayerEntry_C_ExecuteUbergraph_WB_MutePlayerEntry) == 0x000008, "Wrong alignment on WB_MutePlayerEntry_C_ExecuteUbergraph_WB_MutePlayerEntry");
static_assert(sizeof(WB_MutePlayerEntry_C_ExecuteUbergraph_WB_MutePlayerEntry) == 0x000090, "Wrong size on WB_MutePlayerEntry_C_ExecuteUbergraph_WB_MutePlayerEntry");
static_assert(offsetof(WB_MutePlayerEntry_C_ExecuteUbergraph_WB_MutePlayerEntry, EntryPoint) == 0x000000, "Member 'WB_MutePlayerEntry_C_ExecuteUbergraph_WB_MutePlayerEntry::EntryPoint' has a wrong offset!");
static_assert(offsetof(WB_MutePlayerEntry_C_ExecuteUbergraph_WB_MutePlayerEntry, CallFunc_GetGameInstance_ReturnValue) == 0x000008, "Member 'WB_MutePlayerEntry_C_ExecuteUbergraph_WB_MutePlayerEntry::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MutePlayerEntry_C_ExecuteUbergraph_WB_MutePlayerEntry, K2Node_DynamicCast_AsB_Player_State) == 0x000010, "Member 'WB_MutePlayerEntry_C_ExecuteUbergraph_WB_MutePlayerEntry::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(WB_MutePlayerEntry_C_ExecuteUbergraph_WB_MutePlayerEntry, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'WB_MutePlayerEntry_C_ExecuteUbergraph_WB_MutePlayerEntry::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WB_MutePlayerEntry_C_ExecuteUbergraph_WB_MutePlayerEntry, K2Node_DynamicCast_AsB_Game_Instance) == 0x000020, "Member 'WB_MutePlayerEntry_C_ExecuteUbergraph_WB_MutePlayerEntry::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(WB_MutePlayerEntry_C_ExecuteUbergraph_WB_MutePlayerEntry, K2Node_DynamicCast_bSuccess_1) == 0x000028, "Member 'WB_MutePlayerEntry_C_ExecuteUbergraph_WB_MutePlayerEntry::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WB_MutePlayerEntry_C_ExecuteUbergraph_WB_MutePlayerEntry, CallFunc_GetGameInstance_ReturnValue_1) == 0x000030, "Member 'WB_MutePlayerEntry_C_ExecuteUbergraph_WB_MutePlayerEntry::CallFunc_GetGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_MutePlayerEntry_C_ExecuteUbergraph_WB_MutePlayerEntry, K2Node_DynamicCast_AsB_Game_Instance_1) == 0x000038, "Member 'WB_MutePlayerEntry_C_ExecuteUbergraph_WB_MutePlayerEntry::K2Node_DynamicCast_AsB_Game_Instance_1' has a wrong offset!");
static_assert(offsetof(WB_MutePlayerEntry_C_ExecuteUbergraph_WB_MutePlayerEntry, K2Node_DynamicCast_bSuccess_2) == 0x000040, "Member 'WB_MutePlayerEntry_C_ExecuteUbergraph_WB_MutePlayerEntry::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(WB_MutePlayerEntry_C_ExecuteUbergraph_WB_MutePlayerEntry, K2Node_Event_MyGeometry) == 0x000044, "Member 'WB_MutePlayerEntry_C_ExecuteUbergraph_WB_MutePlayerEntry::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WB_MutePlayerEntry_C_ExecuteUbergraph_WB_MutePlayerEntry, K2Node_Event_InDeltaTime) == 0x00007C, "Member 'WB_MutePlayerEntry_C_ExecuteUbergraph_WB_MutePlayerEntry::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(WB_MutePlayerEntry_C_ExecuteUbergraph_WB_MutePlayerEntry, CallFunc_GetMuteText_ReturnValue) == 0x000080, "Member 'WB_MutePlayerEntry_C_ExecuteUbergraph_WB_MutePlayerEntry::CallFunc_GetMuteText_ReturnValue' has a wrong offset!");

// Function WB_MutePlayerEntry.WB_MutePlayerEntry_C.Get_PlayerNameText_Text_0
// 0x0030 (0x0030 - 0x0000)
struct WB_MutePlayerEntry_C_Get_PlayerNameText_Text_0 final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
	class FString                                 CallFunc_GetPlayerName_ReturnValue;                // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0020(0x0010)()
};
static_assert(alignof(WB_MutePlayerEntry_C_Get_PlayerNameText_Text_0) == 0x000008, "Wrong alignment on WB_MutePlayerEntry_C_Get_PlayerNameText_Text_0");
static_assert(sizeof(WB_MutePlayerEntry_C_Get_PlayerNameText_Text_0) == 0x000030, "Wrong size on WB_MutePlayerEntry_C_Get_PlayerNameText_Text_0");
static_assert(offsetof(WB_MutePlayerEntry_C_Get_PlayerNameText_Text_0, ReturnValue) == 0x000000, "Member 'WB_MutePlayerEntry_C_Get_PlayerNameText_Text_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MutePlayerEntry_C_Get_PlayerNameText_Text_0, CallFunc_GetPlayerName_ReturnValue) == 0x000010, "Member 'WB_MutePlayerEntry_C_Get_PlayerNameText_Text_0::CallFunc_GetPlayerName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MutePlayerEntry_C_Get_PlayerNameText_Text_0, CallFunc_Conv_StringToText_ReturnValue) == 0x000020, "Member 'WB_MutePlayerEntry_C_Get_PlayerNameText_Text_0::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");

// Function WB_MutePlayerEntry.WB_MutePlayerEntry_C.Get_Report_Visibility_0
// 0x0020 (0x0020 - 0x0000)
struct WB_MutePlayerEntry_C_Get_Report_Visibility_0 final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_MutePlayerEntry_C_Get_Report_Visibility_0) == 0x000008, "Wrong alignment on WB_MutePlayerEntry_C_Get_Report_Visibility_0");
static_assert(sizeof(WB_MutePlayerEntry_C_Get_Report_Visibility_0) == 0x000020, "Wrong size on WB_MutePlayerEntry_C_Get_Report_Visibility_0");
static_assert(offsetof(WB_MutePlayerEntry_C_Get_Report_Visibility_0, ReturnValue) == 0x000000, "Member 'WB_MutePlayerEntry_C_Get_Report_Visibility_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MutePlayerEntry_C_Get_Report_Visibility_0, Temp_byte_Variable) == 0x000001, "Member 'WB_MutePlayerEntry_C_Get_Report_Visibility_0::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WB_MutePlayerEntry_C_Get_Report_Visibility_0, Temp_byte_Variable_1) == 0x000002, "Member 'WB_MutePlayerEntry_C_Get_Report_Visibility_0::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WB_MutePlayerEntry_C_Get_Report_Visibility_0, Temp_bool_Variable) == 0x000003, "Member 'WB_MutePlayerEntry_C_Get_Report_Visibility_0::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WB_MutePlayerEntry_C_Get_Report_Visibility_0, CallFunc_GetGameState_ReturnValue) == 0x000008, "Member 'WB_MutePlayerEntry_C_Get_Report_Visibility_0::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MutePlayerEntry_C_Get_Report_Visibility_0, K2Node_DynamicCast_AsB_Game_State) == 0x000010, "Member 'WB_MutePlayerEntry_C_Get_Report_Visibility_0::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(WB_MutePlayerEntry_C_Get_Report_Visibility_0, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'WB_MutePlayerEntry_C_Get_Report_Visibility_0::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WB_MutePlayerEntry_C_Get_Report_Visibility_0, K2Node_Select_Default) == 0x000019, "Member 'WB_MutePlayerEntry_C_Get_Report_Visibility_0::K2Node_Select_Default' has a wrong offset!");

// Function WB_MutePlayerEntry.WB_MutePlayerEntry_C.GetMuteText
// 0x0070 (0x0070 - 0x0000)
struct WB_MutePlayerEntry_C_GetMuteText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
	class FText                                   Temp_text_Variable;                                // 0x0010(0x0010)()
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_1;                              // 0x0038(0x0010)()
	bool                                          Temp_bool_Variable;                                // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerMuted_IsMuted;                    // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x0060(0x0010)()
};
static_assert(alignof(WB_MutePlayerEntry_C_GetMuteText) == 0x000008, "Wrong alignment on WB_MutePlayerEntry_C_GetMuteText");
static_assert(sizeof(WB_MutePlayerEntry_C_GetMuteText) == 0x000070, "Wrong size on WB_MutePlayerEntry_C_GetMuteText");
static_assert(offsetof(WB_MutePlayerEntry_C_GetMuteText, ReturnValue) == 0x000000, "Member 'WB_MutePlayerEntry_C_GetMuteText::ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MutePlayerEntry_C_GetMuteText, Temp_text_Variable) == 0x000010, "Member 'WB_MutePlayerEntry_C_GetMuteText::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(WB_MutePlayerEntry_C_GetMuteText, CallFunc_GetGameInstance_ReturnValue) == 0x000020, "Member 'WB_MutePlayerEntry_C_GetMuteText::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MutePlayerEntry_C_GetMuteText, K2Node_DynamicCast_AsB_Game_Instance) == 0x000028, "Member 'WB_MutePlayerEntry_C_GetMuteText::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(WB_MutePlayerEntry_C_GetMuteText, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'WB_MutePlayerEntry_C_GetMuteText::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WB_MutePlayerEntry_C_GetMuteText, Temp_text_Variable_1) == 0x000038, "Member 'WB_MutePlayerEntry_C_GetMuteText::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(WB_MutePlayerEntry_C_GetMuteText, Temp_bool_Variable) == 0x000048, "Member 'WB_MutePlayerEntry_C_GetMuteText::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WB_MutePlayerEntry_C_GetMuteText, K2Node_DynamicCast_AsB_Player_State) == 0x000050, "Member 'WB_MutePlayerEntry_C_GetMuteText::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(WB_MutePlayerEntry_C_GetMuteText, K2Node_DynamicCast_bSuccess_1) == 0x000058, "Member 'WB_MutePlayerEntry_C_GetMuteText::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WB_MutePlayerEntry_C_GetMuteText, CallFunc_IsPlayerMuted_IsMuted) == 0x000059, "Member 'WB_MutePlayerEntry_C_GetMuteText::CallFunc_IsPlayerMuted_IsMuted' has a wrong offset!");
static_assert(offsetof(WB_MutePlayerEntry_C_GetMuteText, K2Node_Select_Default) == 0x000060, "Member 'WB_MutePlayerEntry_C_GetMuteText::K2Node_Select_Default' has a wrong offset!");

// Function WB_MutePlayerEntry.WB_MutePlayerEntry_C.Tick
// 0x003C (0x003C - 0x0000)
struct WB_MutePlayerEntry_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_MutePlayerEntry_C_Tick) == 0x000004, "Wrong alignment on WB_MutePlayerEntry_C_Tick");
static_assert(sizeof(WB_MutePlayerEntry_C_Tick) == 0x00003C, "Wrong size on WB_MutePlayerEntry_C_Tick");
static_assert(offsetof(WB_MutePlayerEntry_C_Tick, MyGeometry) == 0x000000, "Member 'WB_MutePlayerEntry_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WB_MutePlayerEntry_C_Tick, InDeltaTime) == 0x000038, "Member 'WB_MutePlayerEntry_C_Tick::InDeltaTime' has a wrong offset!");

}

