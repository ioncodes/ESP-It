#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SteamGeneral

#include "Basic.hpp"

#include "SteamGeneral_classes.hpp"
#include "SteamGeneral_parameters.hpp"


namespace SDK
{

// Function SteamGeneral.SteamGeneralLibrary.BreakUInt32
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FUInt32                          InVal                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   OutVal                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USteamGeneralLibrary::BreakUInt32(const struct FUInt32& InVal, int32* OutVal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "BreakUInt32");

	Params::SteamGeneralLibrary_BreakUInt32 Parms{};

	Parms.InVal = std::move(InVal);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutVal != nullptr)
		*OutVal = Parms.OutVal;

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.BreakUInt64
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FUInt64                          InVal                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   OutVal                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USteamGeneralLibrary::BreakUInt64(const struct FUInt64& InVal, int32* OutVal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "BreakUInt64");

	Params::SteamGeneralLibrary_BreakUInt64 Parms{};

	Parms.InVal = std::move(InVal);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutVal != nullptr)
		*OutVal = Parms.OutVal;

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.Equal_SteamAppId
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSteamAppId                      A                                                      (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FSteamAppId                      B                                                      (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USteamGeneralLibrary::Equal_SteamAppId(const struct FSteamAppId& A, const struct FSteamAppId& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "Equal_SteamAppId");

	Params::SteamGeneralLibrary_Equal_SteamAppId Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.Equal_SteamDepotId
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSteamDepotId                    A                                                      (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FSteamDepotId                    B                                                      (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USteamGeneralLibrary::Equal_SteamDepotId(const struct FSteamDepotId& A, const struct FSteamDepotId& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "Equal_SteamDepotId");

	Params::SteamGeneralLibrary_Equal_SteamDepotId Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.Equal_SteamItemId
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSteamUGCItemId                  A                                                      (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FSteamUGCItemId                  B                                                      (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USteamGeneralLibrary::Equal_SteamItemId(const struct FSteamUGCItemId& A, const struct FSteamUGCItemId& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "Equal_SteamItemId");

	Params::SteamGeneralLibrary_Equal_SteamItemId Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.Equal_UInt32
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FUInt32                          A                                                      (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FUInt32                          B                                                      (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USteamGeneralLibrary::Equal_UInt32(const struct FUInt32& A, const struct FUInt32& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "Equal_UInt32");

	Params::SteamGeneralLibrary_Equal_UInt32 Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.Equal_UInt64
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FUInt64                          A                                                      (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FUInt64                          B                                                      (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USteamGeneralLibrary::Equal_UInt64(const struct FUInt64& A, const struct FUInt64& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "Equal_UInt64");

	Params::SteamGeneralLibrary_Equal_UInt64 Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.FromString_UInt32
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FUInt32                          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FUInt32 USteamGeneralLibrary::FromString_UInt32(const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "FromString_UInt32");

	Params::SteamGeneralLibrary_FromString_UInt32 Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.FromString_UInt64
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FUInt64                          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FUInt64 USteamGeneralLibrary::FromString_UInt64(const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "FromString_UInt64");

	Params::SteamGeneralLibrary_FromString_UInt64 Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.GetSteamAppId
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSteamAppId                      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSteamAppId USteamGeneralLibrary::GetSteamAppId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "GetSteamAppId");

	Params::SteamGeneralLibrary_GetSteamAppId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.IsSteamInitialized
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USteamGeneralLibrary::IsSteamInitialized()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "IsSteamInitialized");

	Params::SteamGeneralLibrary_IsSteamInitialized Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.NotEqual_SteamAppId
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSteamAppId                      A                                                      (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FSteamAppId                      B                                                      (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USteamGeneralLibrary::NotEqual_SteamAppId(const struct FSteamAppId& A, const struct FSteamAppId& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "NotEqual_SteamAppId");

	Params::SteamGeneralLibrary_NotEqual_SteamAppId Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.NotEqual_SteamDepotId
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSteamDepotId                    A                                                      (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FSteamDepotId                    B                                                      (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USteamGeneralLibrary::NotEqual_SteamDepotId(const struct FSteamDepotId& A, const struct FSteamDepotId& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "NotEqual_SteamDepotId");

	Params::SteamGeneralLibrary_NotEqual_SteamDepotId Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.NotEqual_SteamItemId
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSteamUGCItemId                  A                                                      (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FSteamUGCItemId                  B                                                      (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USteamGeneralLibrary::NotEqual_SteamItemId(const struct FSteamUGCItemId& A, const struct FSteamUGCItemId& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "NotEqual_SteamItemId");

	Params::SteamGeneralLibrary_NotEqual_SteamItemId Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.NotEqual_UInt32
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FUInt32                          A                                                      (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FUInt32                          B                                                      (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USteamGeneralLibrary::NotEqual_UInt32(const struct FUInt32& A, const struct FUInt32& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "NotEqual_UInt32");

	Params::SteamGeneralLibrary_NotEqual_UInt32 Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.NotEqual_UInt64
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FUInt64                          A                                                      (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FUInt64                          B                                                      (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USteamGeneralLibrary::NotEqual_UInt64(const struct FUInt64& A, const struct FUInt64& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "NotEqual_UInt64");

	Params::SteamGeneralLibrary_NotEqual_UInt64 Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.SteamAppIdArray_AddUnique
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FSteamAppId>              Values                                                 (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FSteamAppId                      Value                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USteamGeneralLibrary::SteamAppIdArray_AddUnique(TArray<struct FSteamAppId>& Values, const struct FSteamAppId& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "SteamAppIdArray_AddUnique");

	Params::SteamGeneralLibrary_SteamAppIdArray_AddUnique Parms{};

	Parms.Values = std::move(Values);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Values = std::move(Parms.Values);

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.SteamAppIdArray_Contains
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FSteamAppId>              Values                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FSteamAppId                      Value                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USteamGeneralLibrary::SteamAppIdArray_Contains(const TArray<struct FSteamAppId>& Values, const struct FSteamAppId& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "SteamAppIdArray_Contains");

	Params::SteamGeneralLibrary_SteamAppIdArray_Contains Parms{};

	Parms.Values = std::move(Values);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.SteamAppIdArray_Find
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FSteamAppId>              Values                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FSteamAppId                      Value                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USteamGeneralLibrary::SteamAppIdArray_Find(const TArray<struct FSteamAppId>& Values, const struct FSteamAppId& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "SteamAppIdArray_Find");

	Params::SteamGeneralLibrary_SteamAppIdArray_Find Parms{};

	Parms.Values = std::move(Values);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.SteamAppIdArray_Remove
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FSteamAppId>              Values                                                 (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FSteamAppId                      Value                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USteamGeneralLibrary::SteamAppIdArray_Remove(TArray<struct FSteamAppId>& Values, const struct FSteamAppId& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "SteamAppIdArray_Remove");

	Params::SteamGeneralLibrary_SteamAppIdArray_Remove Parms{};

	Parms.Values = std::move(Values);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Values = std::move(Parms.Values);

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.SteamConvertLanguageToLanguageCode
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ESteamSupportedLanguages                Language                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USteamGeneralLibrary::SteamConvertLanguageToLanguageCode(ESteamSupportedLanguages Language)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "SteamConvertLanguageToLanguageCode");

	Params::SteamGeneralLibrary_SteamConvertLanguageToLanguageCode Parms{};

	Parms.Language = Language;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.SteamDelegate_OnGameOverlayActivated_Bind
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(bool bActive)>           DelegateToCall                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USteamGeneralLibrary::SteamDelegate_OnGameOverlayActivated_Bind(TDelegate<void(bool bActive)> DelegateToCall)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "SteamDelegate_OnGameOverlayActivated_Bind");

	Params::SteamGeneralLibrary_SteamDelegate_OnGameOverlayActivated_Bind Parms{};

	Parms.DelegateToCall = DelegateToCall;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.SteamDelegate_OnGameOverlayActivated_Unbind
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(bool bActive)>           DelegateToCall                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USteamGeneralLibrary::SteamDelegate_OnGameOverlayActivated_Unbind(TDelegate<void(bool bActive)> DelegateToCall)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "SteamDelegate_OnGameOverlayActivated_Unbind");

	Params::SteamGeneralLibrary_SteamDelegate_OnGameOverlayActivated_Unbind Parms{};

	Parms.DelegateToCall = DelegateToCall;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.SteamDepotIdArray_AddUnique
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FSteamDepotId>            Values                                                 (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FSteamDepotId                    Value                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USteamGeneralLibrary::SteamDepotIdArray_AddUnique(TArray<struct FSteamDepotId>& Values, const struct FSteamDepotId& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "SteamDepotIdArray_AddUnique");

	Params::SteamGeneralLibrary_SteamDepotIdArray_AddUnique Parms{};

	Parms.Values = std::move(Values);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Values = std::move(Parms.Values);

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.SteamDepotIdArray_Contains
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FSteamDepotId>            Values                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FSteamDepotId                    Value                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USteamGeneralLibrary::SteamDepotIdArray_Contains(const TArray<struct FSteamDepotId>& Values, const struct FSteamDepotId& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "SteamDepotIdArray_Contains");

	Params::SteamGeneralLibrary_SteamDepotIdArray_Contains Parms{};

	Parms.Values = std::move(Values);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.SteamDepotIdArray_Find
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FSteamDepotId>            Values                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FSteamDepotId                    Value                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USteamGeneralLibrary::SteamDepotIdArray_Find(const TArray<struct FSteamDepotId>& Values, const struct FSteamDepotId& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "SteamDepotIdArray_Find");

	Params::SteamGeneralLibrary_SteamDepotIdArray_Find Parms{};

	Parms.Values = std::move(Values);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.SteamDepotIdArray_Remove
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FSteamDepotId>            Values                                                 (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FSteamDepotId                    Value                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USteamGeneralLibrary::SteamDepotIdArray_Remove(TArray<struct FSteamDepotId>& Values, const struct FSteamDepotId& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "SteamDepotIdArray_Remove");

	Params::SteamGeneralLibrary_SteamDepotIdArray_Remove Parms{};

	Parms.Values = std::move(Values);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Values = std::move(Parms.Values);

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.SteamGeneral_ActivateGameOverlayToWebPage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Webpage                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USteamGeneralLibrary::SteamGeneral_ActivateGameOverlayToWebPage(const class FString& Webpage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "SteamGeneral_ActivateGameOverlayToWebPage");

	Params::SteamGeneralLibrary_SteamGeneral_ActivateGameOverlayToWebPage Parms{};

	Parms.Webpage = std::move(Webpage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.SteamGeneral_GetFriendName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FUInt64                          SteamUserId                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USteamGeneralLibrary::SteamGeneral_GetFriendName(const struct FUInt64& SteamUserId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "SteamGeneral_GetFriendName");

	Params::SteamGeneralLibrary_SteamGeneral_GetFriendName Parms{};

	Parms.SteamUserId = std::move(SteamUserId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.SteamGeneral_GetFriendState
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FUInt64                          SteamUserId                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// EPersonaStateBP                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EPersonaStateBP USteamGeneralLibrary::SteamGeneral_GetFriendState(const struct FUInt64& SteamUserId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "SteamGeneral_GetFriendState");

	Params::SteamGeneralLibrary_SteamGeneral_GetFriendState Parms{};

	Parms.SteamUserId = std::move(SteamUserId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.SteamGeneral_GetUserName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USteamGeneralLibrary::SteamGeneral_GetUserName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "SteamGeneral_GetUserName");

	Params::SteamGeneralLibrary_SteamGeneral_GetUserName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.SteamGeneral_GetUserState
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EPersonaStateBP                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EPersonaStateBP USteamGeneralLibrary::SteamGeneral_GetUserState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "SteamGeneral_GetUserState");

	Params::SteamGeneralLibrary_SteamGeneral_GetUserState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.SteamQueryHandle_IsValid
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSteamUGCQueryHandle             Handle                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USteamGeneralLibrary::SteamQueryHandle_IsValid(const struct FSteamUGCQueryHandle& Handle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "SteamQueryHandle_IsValid");

	Params::SteamGeneralLibrary_SteamQueryHandle_IsValid Parms{};

	Parms.Handle = std::move(Handle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.SteamUGCHandle_IsValid
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSteamUGCHandle                  Handle                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USteamGeneralLibrary::SteamUGCHandle_IsValid(const struct FSteamUGCHandle& Handle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "SteamUGCHandle_IsValid");

	Params::SteamGeneralLibrary_SteamUGCHandle_IsValid Parms{};

	Parms.Handle = std::move(Handle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.SteamUGCItemIdArray_AddUnique
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FSteamUGCItemId>          Values                                                 (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FSteamUGCItemId                  Value                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USteamGeneralLibrary::SteamUGCItemIdArray_AddUnique(TArray<struct FSteamUGCItemId>& Values, const struct FSteamUGCItemId& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "SteamUGCItemIdArray_AddUnique");

	Params::SteamGeneralLibrary_SteamUGCItemIdArray_AddUnique Parms{};

	Parms.Values = std::move(Values);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Values = std::move(Parms.Values);

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.SteamUGCItemIdArray_Contains
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FSteamUGCItemId>          Values                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FSteamUGCItemId                  Value                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USteamGeneralLibrary::SteamUGCItemIdArray_Contains(const TArray<struct FSteamUGCItemId>& Values, const struct FSteamUGCItemId& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "SteamUGCItemIdArray_Contains");

	Params::SteamGeneralLibrary_SteamUGCItemIdArray_Contains Parms{};

	Parms.Values = std::move(Values);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.SteamUGCItemIdArray_Find
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FSteamUGCItemId>          Values                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FSteamUGCItemId                  Value                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USteamGeneralLibrary::SteamUGCItemIdArray_Find(const TArray<struct FSteamUGCItemId>& Values, const struct FSteamUGCItemId& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "SteamUGCItemIdArray_Find");

	Params::SteamGeneralLibrary_SteamUGCItemIdArray_Find Parms{};

	Parms.Values = std::move(Values);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.SteamUGCItemIdArray_Remove
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FSteamUGCItemId>          Values                                                 (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FSteamUGCItemId                  Value                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USteamGeneralLibrary::SteamUGCItemIdArray_Remove(TArray<struct FSteamUGCItemId>& Values, const struct FSteamUGCItemId& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "SteamUGCItemIdArray_Remove");

	Params::SteamGeneralLibrary_SteamUGCItemIdArray_Remove Parms{};

	Parms.Values = std::move(Values);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Values = std::move(Parms.Values);

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.SteamUpdateHandle_IsValid
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSteamUGCUpdateHandle            Handle                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USteamGeneralLibrary::SteamUpdateHandle_IsValid(const struct FSteamUGCUpdateHandle& Handle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "SteamUpdateHandle_IsValid");

	Params::SteamGeneralLibrary_SteamUpdateHandle_IsValid Parms{};

	Parms.Handle = std::move(Handle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.ToString_SteamAppId
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSteamAppId                      ID                                                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USteamGeneralLibrary::ToString_SteamAppId(const struct FSteamAppId& ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "ToString_SteamAppId");

	Params::SteamGeneralLibrary_ToString_SteamAppId Parms{};

	Parms.ID = std::move(ID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.ToString_SteamDepotId
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSteamDepotId                    ID                                                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USteamGeneralLibrary::ToString_SteamDepotId(const struct FSteamDepotId& ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "ToString_SteamDepotId");

	Params::SteamGeneralLibrary_ToString_SteamDepotId Parms{};

	Parms.ID = std::move(ID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.ToString_SteamItemId
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSteamUGCItemId                  ID                                                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USteamGeneralLibrary::ToString_SteamItemId(const struct FSteamUGCItemId& ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "ToString_SteamItemId");

	Params::SteamGeneralLibrary_ToString_SteamItemId Parms{};

	Parms.ID = std::move(ID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.ToString_UInt32
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FUInt32                          Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USteamGeneralLibrary::ToString_UInt32(const struct FUInt32& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "ToString_UInt32");

	Params::SteamGeneralLibrary_ToString_UInt32 Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.ToString_UInt64
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FUInt64                          Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USteamGeneralLibrary::ToString_UInt64(const struct FUInt64& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "ToString_UInt64");

	Params::SteamGeneralLibrary_ToString_UInt64 Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.Uint32Array_AddUnique
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FUInt32>                  Values                                                 (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FUInt32                          Value                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USteamGeneralLibrary::Uint32Array_AddUnique(TArray<struct FUInt32>& Values, const struct FUInt32& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "Uint32Array_AddUnique");

	Params::SteamGeneralLibrary_Uint32Array_AddUnique Parms{};

	Parms.Values = std::move(Values);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Values = std::move(Parms.Values);

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.Uint32Array_Contains
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FUInt32>                  Values                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FUInt32                          Value                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USteamGeneralLibrary::Uint32Array_Contains(const TArray<struct FUInt32>& Values, const struct FUInt32& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "Uint32Array_Contains");

	Params::SteamGeneralLibrary_Uint32Array_Contains Parms{};

	Parms.Values = std::move(Values);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.Uint32Array_Find
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FUInt32>                  Values                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FUInt32                          Value                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USteamGeneralLibrary::Uint32Array_Find(const TArray<struct FUInt32>& Values, const struct FUInt32& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "Uint32Array_Find");

	Params::SteamGeneralLibrary_Uint32Array_Find Parms{};

	Parms.Values = std::move(Values);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.Uint32Array_Remove
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FUInt32>                  Values                                                 (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FUInt32                          Value                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USteamGeneralLibrary::Uint32Array_Remove(TArray<struct FUInt32>& Values, const struct FUInt32& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "Uint32Array_Remove");

	Params::SteamGeneralLibrary_Uint32Array_Remove Parms{};

	Parms.Values = std::move(Values);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Values = std::move(Parms.Values);

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.Uint64Array_AddUnique
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FUInt64>                  Values                                                 (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FUInt64                          Value                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USteamGeneralLibrary::Uint64Array_AddUnique(TArray<struct FUInt64>& Values, const struct FUInt64& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "Uint64Array_AddUnique");

	Params::SteamGeneralLibrary_Uint64Array_AddUnique Parms{};

	Parms.Values = std::move(Values);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Values = std::move(Parms.Values);

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.Uint64Array_Contains
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FUInt64>                  Values                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FUInt64                          Value                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USteamGeneralLibrary::Uint64Array_Contains(const TArray<struct FUInt64>& Values, const struct FUInt64& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "Uint64Array_Contains");

	Params::SteamGeneralLibrary_Uint64Array_Contains Parms{};

	Parms.Values = std::move(Values);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.Uint64Array_Find
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FUInt64>                  Values                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FUInt64                          Value                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USteamGeneralLibrary::Uint64Array_Find(const TArray<struct FUInt64>& Values, const struct FUInt64& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "Uint64Array_Find");

	Params::SteamGeneralLibrary_Uint64Array_Find Parms{};

	Parms.Values = std::move(Values);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamGeneral.SteamGeneralLibrary.Uint64Array_Remove
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FUInt64>                  Values                                                 (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FUInt64                          Value                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USteamGeneralLibrary::Uint64Array_Remove(TArray<struct FUInt64>& Values, const struct FUInt64& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamGeneralLibrary", "Uint64Array_Remove");

	Params::SteamGeneralLibrary_Uint64Array_Remove Parms{};

	Parms.Values = std::move(Values);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Values = std::move(Parms.Values);

	return Parms.ReturnValue;
}

}

