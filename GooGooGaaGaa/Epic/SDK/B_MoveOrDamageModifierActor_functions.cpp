#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_MoveOrDamageModifierActor

#include "Basic.hpp"

#include "B_MoveOrDamageModifierActor_classes.hpp"
#include "B_MoveOrDamageModifierActor_parameters.hpp"


namespace SDK
{

// Function B_MoveOrDamageModifierActor.B_MoveOrDamageModifierActor_C.AddCurrentPlayerToStopped
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_MoveOrDamageModifierActor_C::AddCurrentPlayerToStopped(double DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MoveOrDamageModifierActor_C", "AddCurrentPlayerToStopped");

	Params::B_MoveOrDamageModifierActor_C_AddCurrentPlayerToStopped Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_MoveOrDamageModifierActor.B_MoveOrDamageModifierActor_C.ApplyDamage
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            DamagedPawn                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_MoveOrDamageModifierActor_C::ApplyDamage(class APawn* DamagedPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MoveOrDamageModifierActor_C", "ApplyDamage");

	Params::B_MoveOrDamageModifierActor_C_ApplyDamage Parms{};

	Parms.DamagedPawn = DamagedPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_MoveOrDamageModifierActor.B_MoveOrDamageModifierActor_C.CheckForEnoughVelocity
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class APawn*                            PlayerPawn                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    FastEnough                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_MoveOrDamageModifierActor_C::CheckForEnoughVelocity(class APawn* PlayerPawn, bool* FastEnough)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MoveOrDamageModifierActor_C", "CheckForEnoughVelocity");

	Params::B_MoveOrDamageModifierActor_C_CheckForEnoughVelocity Parms{};

	Parms.PlayerPawn = PlayerPawn;

	UObject::ProcessEvent(Func, &Parms);

	if (FastEnough != nullptr)
		*FastEnough = Parms.FastEnough;
}


// Function B_MoveOrDamageModifierActor.B_MoveOrDamageModifierActor_C.CleanUpMod
// (Public, BlueprintCallable, BlueprintEvent)

void AB_MoveOrDamageModifierActor_C::CleanUpMod()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MoveOrDamageModifierActor_C", "CleanUpMod");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_MoveOrDamageModifierActor.B_MoveOrDamageModifierActor_C.CreateHUDExtensionIfRequired
// (Private, BlueprintCallable, BlueprintEvent)

void AB_MoveOrDamageModifierActor_C::CreateHUDExtensionIfRequired()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MoveOrDamageModifierActor_C", "CreateHUDExtensionIfRequired");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_MoveOrDamageModifierActor.B_MoveOrDamageModifierActor_C.ExecuteUbergraph_B_MoveOrDamageModifierActor
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_MoveOrDamageModifierActor_C::ExecuteUbergraph_B_MoveOrDamageModifierActor(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MoveOrDamageModifierActor_C", "ExecuteUbergraph_B_MoveOrDamageModifierActor");

	Params::B_MoveOrDamageModifierActor_C_ExecuteUbergraph_B_MoveOrDamageModifierActor Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_MoveOrDamageModifierActor.B_MoveOrDamageModifierActor_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AB_MoveOrDamageModifierActor_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MoveOrDamageModifierActor_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_MoveOrDamageModifierActor.B_MoveOrDamageModifierActor_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_MoveOrDamageModifierActor_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MoveOrDamageModifierActor_C", "ReceiveTick");

	Params::B_MoveOrDamageModifierActor_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_MoveOrDamageModifierActor.B_MoveOrDamageModifierActor_C.RemoveCurrentPlayerFromStopped
// (Private, BlueprintCallable, BlueprintEvent)

void AB_MoveOrDamageModifierActor_C::RemoveCurrentPlayerFromStopped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MoveOrDamageModifierActor_C", "RemoveCurrentPlayerFromStopped");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_MoveOrDamageModifierActor.B_MoveOrDamageModifierActor_C.ShouldPlayerTakeDamage
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool AB_MoveOrDamageModifierActor_C::ShouldPlayerTakeDamage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MoveOrDamageModifierActor_C", "ShouldPlayerTakeDamage");

	Params::B_MoveOrDamageModifierActor_C_ShouldPlayerTakeDamage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_MoveOrDamageModifierActor.B_MoveOrDamageModifierActor_C.StartMod
// (Private, BlueprintCallable, BlueprintEvent)

void AB_MoveOrDamageModifierActor_C::StartMod()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MoveOrDamageModifierActor_C", "StartMod");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_MoveOrDamageModifierActor.B_MoveOrDamageModifierActor_C.TickAllPlayersDamage
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_MoveOrDamageModifierActor_C::TickAllPlayersDamage(double DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MoveOrDamageModifierActor_C", "TickAllPlayersDamage");

	Params::B_MoveOrDamageModifierActor_C_TickAllPlayersDamage Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_MoveOrDamageModifierActor.B_MoveOrDamageModifierActor_C.UpdateJoinedPlayers
// (Private, BlueprintCallable, BlueprintEvent)

void AB_MoveOrDamageModifierActor_C::UpdateJoinedPlayers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MoveOrDamageModifierActor_C", "UpdateJoinedPlayers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_MoveOrDamageModifierActor.B_MoveOrDamageModifierActor_C.UpdateTimeUntilNextDamage
// (Private, BlueprintCallable, BlueprintEvent)

void AB_MoveOrDamageModifierActor_C::UpdateTimeUntilNextDamage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MoveOrDamageModifierActor_C", "UpdateTimeUntilNextDamage");

	UObject::ProcessEvent(Func, nullptr);
}

}

