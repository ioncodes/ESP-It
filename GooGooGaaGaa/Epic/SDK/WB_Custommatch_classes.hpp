#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_Custommatch

#include "Basic.hpp"

#include "ETeamSwitchingOption_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WB_Custommatch.WB_Custommatch_C
// 0x01A0 (0x0480 - 0x02E0)
class UWB_Custommatch_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWB_Button_C*                           Button_Back;                                       // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_Button_C*                           Button_Create;                                     // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_Button_C*                           Button_GameRules;                                  // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_CheckBoxWithLabel_C*                CheckBox_DisableStartTimer;                        // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_CheckBoxWithLabel_C*                CheckBox_EnableIdleKick;                           // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_CheckBoxWithLabel_C*                CheckBox_LiveRuleEditing;                          // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_CheckBoxWithLabel_C*                CheckBox_Public;                                   // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_CheckBoxWithLabel_C*                CheckBox_RecordingMode;                            // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_CheckBoxWithLabel_C*                CheckBox_ShowAlliedWitches;                        // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_CheckBoxWithLabel_C*                CheckBox_SpecatorsCanSeeWitches;                   // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_CheckBoxWithLabel_C*                CheckBox_TournamentMode;                           // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_PasswordCheckBoxWithLabelAndField_C* CheckBoxField_Password;                            // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ComboBoxWithLabel_C*                ComboBox_GameMode;                                 // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ComboBoxWithLabel_C*                ComboBox_TeamChoice;                               // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_MapSelection_C*                     MapSelection;                                      // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScrollBox*                             ScrollBox_0;                                       // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_SliderWithLabel_C*                  Slider_HideTime;                                   // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_SliderWithLabel_C*                  Slider_HunterRatio;                                // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_SliderWithLabel_C*                  Slider_ImpostorCooldown;                           // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_SliderWithLabel_C*                  Slider_ImpostorTasks;                              // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_SliderWithLabel_C*                  Slider_ImpostorWitches;                            // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_SliderWithLabel_C*                  Slider_MaxPlayers;                                 // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_SliderWithLabel_C*                  Slider_RequiredPlayersPerTeam;                     // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_SliderWithLabel_C*                  Slider_SearchTime;                                 // 0x03A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_SliderWithLabel_C*                  Slider_TournamentHunters;                          // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_SliderWithLabel_C*                  Slider_WitchLives;                                 // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UB_MatchOptions_C*                      NextMatchOptions;                                  // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      GameInstance;                                      // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UB_SettingsSave_C*                      SettingsSave;                                      // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, class UClass*>              GameModesByName;                                   // 0x03D0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bObjectiveMode;                                    // 0x0420(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_421[0x7];                                      // 0x0421(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWB_BaseControl_C*>              ObjectiveControlsHide;                             // 0x0428(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UWB_BaseControl_C*>              ClassicControlsHide;                               // 0x0438(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UWB_BaseControl_C*>              CreativeControlsHide;                              // 0x0448(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UWB_BaseControl_C*>              ImpostorControlsHide;                              // 0x0458(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UWB_BaseControl_C*>              AllControlsShow;                                   // 0x0468(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          InGame;                                            // 0x0478(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__CheckBox_EnableIdleKick_K2Node_ComponentBoundEvent_2_OnCheckStateChanged__DelegateSignature(class UWB_CheckBoxWithLabel_C* Sender, bool IsChecked);
	void BndEvt__CheckBox_HunterStamina_K2Node_ComponentBoundEvent_3_OnCheckStateChanged__DelegateSignature(class UWB_CheckBoxWithLabel_C* Sender, bool IsChecked);
	void BndEvt__CheckBox_Public_K2Node_ComponentBoundEvent_4_OnCheckStateChanged__DelegateSignature(class UWB_CheckBoxWithLabel_C* Sender, bool IsChecked);
	void BndEvt__CheckBox_RecordingMode_K2Node_ComponentBoundEvent_5_OnCheckStateChanged__DelegateSignature(class UWB_CheckBoxWithLabel_C* Sender, bool IsChecked);
	void BndEvt__CheckBox_ShowAlliedWitches_K2Node_ComponentBoundEvent_6_OnCheckStateChanged__DelegateSignature(class UWB_CheckBoxWithLabel_C* Sender, bool IsChecked);
	void BndEvt__CheckBox_SpecatorsCanSeeWitches_K2Node_ComponentBoundEvent_7_OnCheckStateChanged__DelegateSignature(class UWB_CheckBoxWithLabel_C* Sender, bool IsChecked);
	void BndEvt__CheckBox_TournamentMode_K2Node_ComponentBoundEvent_20_OnCheckStateChanged__DelegateSignature(class UWB_CheckBoxWithLabel_C* Sender, bool IsChecked);
	void BndEvt__ComboBox_GameMode_K2Node_ComponentBoundEvent_0_OnSelectionChanged__DelegateSignature(const class FString& SelectedItem, ESelectInfo SelectionType);
	void BndEvt__ComboBox_TeamChoice_K2Node_ComponentBoundEvent_1_OnSelectionChanged__DelegateSignature(const class FString& SelectedItem, ESelectInfo SelectionType);
	void BndEvt__Slider_HideTime_K2Node_ComponentBoundEvent_1_OnRealValueChanged__DelegateSignature(double RealValue);
	void BndEvt__Slider_HunterRatio_K2Node_ComponentBoundEvent_8_OnRealValueChanged__DelegateSignature(double RealValue);
	void BndEvt__Slider_ImpostorCooldown_K2Node_ComponentBoundEvent_18_OnRealValueChanged__DelegateSignature(double RealValue);
	void BndEvt__Slider_ImpostorTasks_K2Node_ComponentBoundEvent_16_OnRealValueChanged__DelegateSignature(double RealValue);
	void BndEvt__Slider_ImpostorWitches_K2Node_ComponentBoundEvent_17_OnRealValueChanged__DelegateSignature(double RealValue);
	void BndEvt__Slider_MaxPlayers_K2Node_ComponentBoundEvent_0_OnRealValueChanged__DelegateSignature(double RealValue);
	void BndEvt__Slider_RequiredPlayersPerTeam_K2Node_ComponentBoundEvent_12_OnRealValueChanged__DelegateSignature(double RealValue);
	void BndEvt__Slider_SearchTime_K2Node_ComponentBoundEvent_9_OnRealValueChanged__DelegateSignature(double RealValue);
	void BndEvt__Slider_TournamentHunters_K2Node_ComponentBoundEvent_21_OnRealValueChanged__DelegateSignature(double RealValue);
	void BndEvt__Slider_WitchLives_K2Node_ComponentBoundEvent_13_OnRealValueChanged__DelegateSignature(double RealValue);
	void BndEvt__WB_Button_K2Node_ComponentBoundEvent_122_Clicked__DelegateSignature();
	void BndEvt__WB_Button_K2Node_ComponentBoundEvent_211_Clicked__DelegateSignature();
	void BndEvt__WB_Custommatch_Button_GameRules_K2Node_ComponentBoundEvent_15_Clicked__DelegateSignature();
	void BndEvt__WB_Custommatch_CheckBox_DisableStartTimer_K2Node_ComponentBoundEvent_14_OnCheckStateChanged__DelegateSignature(class UWB_CheckBoxWithLabel_C* Sender, bool IsChecked);
	void BndEvt__WB_MapSelection_K2Node_ComponentBoundEvent_28_Clicked__DelegateSignature();
	void Construct();
	void ExecuteUbergraph_WB_Custommatch(int32 EntryPoint);
	void FillComboBoxes();
	void ForceClassicMap(bool ExcludeRandomMapCycle);
	void ForceImpostorMaps();
	void ForceObjectiveMap();
	bool Get_HuntersCountBox_bIsEnabled_0();
	bool Get_InGame_bIsEnabled_0();
	void GetInitialFocusWidget(class UUserWidget** InitialFocusWidget);
	ESlateVisibility GetPasswordVisibility();
	void LoadCustomMatchOptions();
	void LoadGameRules();
	class UWidget* NavigateList(EUINavigation Navigation_0);
	void OnApply();
	void OnBack();
	void OnSpecialAction();
	void SetGameModeDefaultValues(bool OnlySetMaps);
	void SetGameRulesButtonVisibilityAndText();
	void SetHideAndSeekTimes(bool bObjectiveMode_0);
	void SetIsIngame(bool InGame_0);
	void SetShowAlliedWitches(bool ShowAllyWitches);
	void SetTeamSwitchingOption(ETeamSwitchingOption TeamSwitchingOption);
	void StoreReferences();
	void UpdateWidgetVisibility();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WB_Custommatch_C">();
	}
	static class UWB_Custommatch_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWB_Custommatch_C>();
	}
};
static_assert(alignof(UWB_Custommatch_C) == 0x000008, "Wrong alignment on UWB_Custommatch_C");
static_assert(sizeof(UWB_Custommatch_C) == 0x000480, "Wrong size on UWB_Custommatch_C");
static_assert(offsetof(UWB_Custommatch_C, UberGraphFrame) == 0x0002E0, "Member 'UWB_Custommatch_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWB_Custommatch_C, Button_Back) == 0x0002E8, "Member 'UWB_Custommatch_C::Button_Back' has a wrong offset!");
static_assert(offsetof(UWB_Custommatch_C, Button_Create) == 0x0002F0, "Member 'UWB_Custommatch_C::Button_Create' has a wrong offset!");
static_assert(offsetof(UWB_Custommatch_C, Button_GameRules) == 0x0002F8, "Member 'UWB_Custommatch_C::Button_GameRules' has a wrong offset!");
static_assert(offsetof(UWB_Custommatch_C, CheckBox_DisableStartTimer) == 0x000300, "Member 'UWB_Custommatch_C::CheckBox_DisableStartTimer' has a wrong offset!");
static_assert(offsetof(UWB_Custommatch_C, CheckBox_EnableIdleKick) == 0x000308, "Member 'UWB_Custommatch_C::CheckBox_EnableIdleKick' has a wrong offset!");
static_assert(offsetof(UWB_Custommatch_C, CheckBox_LiveRuleEditing) == 0x000310, "Member 'UWB_Custommatch_C::CheckBox_LiveRuleEditing' has a wrong offset!");
static_assert(offsetof(UWB_Custommatch_C, CheckBox_Public) == 0x000318, "Member 'UWB_Custommatch_C::CheckBox_Public' has a wrong offset!");
static_assert(offsetof(UWB_Custommatch_C, CheckBox_RecordingMode) == 0x000320, "Member 'UWB_Custommatch_C::CheckBox_RecordingMode' has a wrong offset!");
static_assert(offsetof(UWB_Custommatch_C, CheckBox_ShowAlliedWitches) == 0x000328, "Member 'UWB_Custommatch_C::CheckBox_ShowAlliedWitches' has a wrong offset!");
static_assert(offsetof(UWB_Custommatch_C, CheckBox_SpecatorsCanSeeWitches) == 0x000330, "Member 'UWB_Custommatch_C::CheckBox_SpecatorsCanSeeWitches' has a wrong offset!");
static_assert(offsetof(UWB_Custommatch_C, CheckBox_TournamentMode) == 0x000338, "Member 'UWB_Custommatch_C::CheckBox_TournamentMode' has a wrong offset!");
static_assert(offsetof(UWB_Custommatch_C, CheckBoxField_Password) == 0x000340, "Member 'UWB_Custommatch_C::CheckBoxField_Password' has a wrong offset!");
static_assert(offsetof(UWB_Custommatch_C, ComboBox_GameMode) == 0x000348, "Member 'UWB_Custommatch_C::ComboBox_GameMode' has a wrong offset!");
static_assert(offsetof(UWB_Custommatch_C, ComboBox_TeamChoice) == 0x000350, "Member 'UWB_Custommatch_C::ComboBox_TeamChoice' has a wrong offset!");
static_assert(offsetof(UWB_Custommatch_C, MapSelection) == 0x000358, "Member 'UWB_Custommatch_C::MapSelection' has a wrong offset!");
static_assert(offsetof(UWB_Custommatch_C, ScrollBox_0) == 0x000360, "Member 'UWB_Custommatch_C::ScrollBox_0' has a wrong offset!");
static_assert(offsetof(UWB_Custommatch_C, Slider_HideTime) == 0x000368, "Member 'UWB_Custommatch_C::Slider_HideTime' has a wrong offset!");
static_assert(offsetof(UWB_Custommatch_C, Slider_HunterRatio) == 0x000370, "Member 'UWB_Custommatch_C::Slider_HunterRatio' has a wrong offset!");
static_assert(offsetof(UWB_Custommatch_C, Slider_ImpostorCooldown) == 0x000378, "Member 'UWB_Custommatch_C::Slider_ImpostorCooldown' has a wrong offset!");
static_assert(offsetof(UWB_Custommatch_C, Slider_ImpostorTasks) == 0x000380, "Member 'UWB_Custommatch_C::Slider_ImpostorTasks' has a wrong offset!");
static_assert(offsetof(UWB_Custommatch_C, Slider_ImpostorWitches) == 0x000388, "Member 'UWB_Custommatch_C::Slider_ImpostorWitches' has a wrong offset!");
static_assert(offsetof(UWB_Custommatch_C, Slider_MaxPlayers) == 0x000390, "Member 'UWB_Custommatch_C::Slider_MaxPlayers' has a wrong offset!");
static_assert(offsetof(UWB_Custommatch_C, Slider_RequiredPlayersPerTeam) == 0x000398, "Member 'UWB_Custommatch_C::Slider_RequiredPlayersPerTeam' has a wrong offset!");
static_assert(offsetof(UWB_Custommatch_C, Slider_SearchTime) == 0x0003A0, "Member 'UWB_Custommatch_C::Slider_SearchTime' has a wrong offset!");
static_assert(offsetof(UWB_Custommatch_C, Slider_TournamentHunters) == 0x0003A8, "Member 'UWB_Custommatch_C::Slider_TournamentHunters' has a wrong offset!");
static_assert(offsetof(UWB_Custommatch_C, Slider_WitchLives) == 0x0003B0, "Member 'UWB_Custommatch_C::Slider_WitchLives' has a wrong offset!");
static_assert(offsetof(UWB_Custommatch_C, NextMatchOptions) == 0x0003B8, "Member 'UWB_Custommatch_C::NextMatchOptions' has a wrong offset!");
static_assert(offsetof(UWB_Custommatch_C, GameInstance) == 0x0003C0, "Member 'UWB_Custommatch_C::GameInstance' has a wrong offset!");
static_assert(offsetof(UWB_Custommatch_C, SettingsSave) == 0x0003C8, "Member 'UWB_Custommatch_C::SettingsSave' has a wrong offset!");
static_assert(offsetof(UWB_Custommatch_C, GameModesByName) == 0x0003D0, "Member 'UWB_Custommatch_C::GameModesByName' has a wrong offset!");
static_assert(offsetof(UWB_Custommatch_C, bObjectiveMode) == 0x000420, "Member 'UWB_Custommatch_C::bObjectiveMode' has a wrong offset!");
static_assert(offsetof(UWB_Custommatch_C, ObjectiveControlsHide) == 0x000428, "Member 'UWB_Custommatch_C::ObjectiveControlsHide' has a wrong offset!");
static_assert(offsetof(UWB_Custommatch_C, ClassicControlsHide) == 0x000438, "Member 'UWB_Custommatch_C::ClassicControlsHide' has a wrong offset!");
static_assert(offsetof(UWB_Custommatch_C, CreativeControlsHide) == 0x000448, "Member 'UWB_Custommatch_C::CreativeControlsHide' has a wrong offset!");
static_assert(offsetof(UWB_Custommatch_C, ImpostorControlsHide) == 0x000458, "Member 'UWB_Custommatch_C::ImpostorControlsHide' has a wrong offset!");
static_assert(offsetof(UWB_Custommatch_C, AllControlsShow) == 0x000468, "Member 'UWB_Custommatch_C::AllControlsShow' has a wrong offset!");
static_assert(offsetof(UWB_Custommatch_C, InGame) == 0x000478, "Member 'UWB_Custommatch_C::InGame' has a wrong offset!");

}

