#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_PowerBall

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_SkillRuleType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_PowerBall.B_PowerBall_C
// 0x0078 (0x0390 - 0x0318)
class AB_PowerBall_C final : public APawn
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0318(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UB_PhysicalSound_C*                     B_PhysicalSound;                                   // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Effect;                                            // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       OwningPlayerState;                                 // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  OwningControlledPawn;                              // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class AB_Hunter_C*                            HunterPawn;                                        // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          CanJump;                                           // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_351[0x7];                                      // 0x0351(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ResetCanJumpDelay;                                 // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Damage;                                            // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          FirstPersonBeforeBall;                             // 0x0368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TeleportOnCooldown;                                // 0x0369(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36A[0x6];                                      // 0x036A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MaxSpeed;                                          // 0x0370(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SkillRuleType                               SkillRuleType;                                     // 0x0378(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_379[0x7];                                      // 0x0379(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         HitProps;                                          // 0x0380(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)

public:
	void CanTeleport(bool* CanTeleport_0);
	void DestroyBall();
	void ExecuteUbergraph_B_PowerBall(int32 EntryPoint);
	void HandleCanJump(const struct FVector& HitNormal, double Slope);
	void HandleHit(class AActor* HitActor, class UPrimitiveComponent* HitComponent, const struct FVector& HitNormal, const struct FVector& HitLocation);
	void HitEffectMulti(const struct FVector& Location);
	void InitializeRules();
	void Move(const struct FVector& Vector);
	void MultiJump();
	void OnOwnerDestroyed(class AActor* DestroyedActor);
	void PostProccedTeleport();
	void ProceedTeleport();
	void ReceiveBeginPlay();
	void ReceiveDestroyed();
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ReceiveTick(float DeltaSeconds);
	void TickJump();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_PowerBall_C">();
	}
	static class AB_PowerBall_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_PowerBall_C>();
	}
};
static_assert(alignof(AB_PowerBall_C) == 0x000008, "Wrong alignment on AB_PowerBall_C");
static_assert(sizeof(AB_PowerBall_C) == 0x000390, "Wrong size on AB_PowerBall_C");
static_assert(offsetof(AB_PowerBall_C, UberGraphFrame) == 0x000318, "Member 'AB_PowerBall_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AB_PowerBall_C, B_PhysicalSound) == 0x000320, "Member 'AB_PowerBall_C::B_PhysicalSound' has a wrong offset!");
static_assert(offsetof(AB_PowerBall_C, Effect) == 0x000328, "Member 'AB_PowerBall_C::Effect' has a wrong offset!");
static_assert(offsetof(AB_PowerBall_C, Sphere) == 0x000330, "Member 'AB_PowerBall_C::Sphere' has a wrong offset!");
static_assert(offsetof(AB_PowerBall_C, OwningPlayerState) == 0x000338, "Member 'AB_PowerBall_C::OwningPlayerState' has a wrong offset!");
static_assert(offsetof(AB_PowerBall_C, OwningControlledPawn) == 0x000340, "Member 'AB_PowerBall_C::OwningControlledPawn' has a wrong offset!");
static_assert(offsetof(AB_PowerBall_C, HunterPawn) == 0x000348, "Member 'AB_PowerBall_C::HunterPawn' has a wrong offset!");
static_assert(offsetof(AB_PowerBall_C, CanJump) == 0x000350, "Member 'AB_PowerBall_C::CanJump' has a wrong offset!");
static_assert(offsetof(AB_PowerBall_C, ResetCanJumpDelay) == 0x000358, "Member 'AB_PowerBall_C::ResetCanJumpDelay' has a wrong offset!");
static_assert(offsetof(AB_PowerBall_C, Damage) == 0x000360, "Member 'AB_PowerBall_C::Damage' has a wrong offset!");
static_assert(offsetof(AB_PowerBall_C, FirstPersonBeforeBall) == 0x000368, "Member 'AB_PowerBall_C::FirstPersonBeforeBall' has a wrong offset!");
static_assert(offsetof(AB_PowerBall_C, TeleportOnCooldown) == 0x000369, "Member 'AB_PowerBall_C::TeleportOnCooldown' has a wrong offset!");
static_assert(offsetof(AB_PowerBall_C, MaxSpeed) == 0x000370, "Member 'AB_PowerBall_C::MaxSpeed' has a wrong offset!");
static_assert(offsetof(AB_PowerBall_C, SkillRuleType) == 0x000378, "Member 'AB_PowerBall_C::SkillRuleType' has a wrong offset!");
static_assert(offsetof(AB_PowerBall_C, HitProps) == 0x000380, "Member 'AB_PowerBall_C::HitProps' has a wrong offset!");

}

