#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_MasterScreen

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "PropWitchHuntModule_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WB_MasterScreen.WB_MasterScreen_C
// 0x00A0 (0x0380 - 0x02E0)
class UWB_MasterScreen_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBackgroundBlur*                        BackgroundBlur_0;                                  // 0x02E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           CurrentScreenCanvas;                               // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                GamePadModeBorder;                                 // 0x02F8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           MasterCanvas;                                      // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           MessageBoxCanvas;                                  // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                OverlayWidgetBorder;                               // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_FPSCounter_C*                       WB_FPSCounter;                                     // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ServerStateInfo_C*                  WB_ServerStateInfo;                                // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          RefreshInitialFocus;                               // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WaitKeyUp;                                         // 0x0329(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32A[0x6];                                      // 0x032A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UClass*, class UWB_BaseControl_C*> FocusedElements;                                   // 0x0330(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)

public:
	void CheckForGamePadMode(const struct FKeyEvent& Input);
	void CloseOverlayWidget();
	void ExecuteUbergraph_WB_MasterScreen(int32 EntryPoint);
	ESlateVisibility Get_GamePadModeBorder_Visibility_0();
	ESlateVisibility Get_MessageBoxCanvas_Visibility_0();
	ESlateVisibility Get_OverlayWidgetBorder_Visibility_0();
	void GetCurrentOpenedScreenWidgetFunction(class UWidget** Widget);
	void GetCurrentScreenWidget(class UWidget** Widget);
	ESlateVisibility GetVisibility_0();
	void GetWidgetToHandleInput(class UWidget** Widget);
	void InitialFocus();
	void IsParentVisible(class UWidget* Widget, bool* IsParentVisible_0);
	void IsScreenOpen(class UUserWidget* ScreenWidget, bool* IsOpen);
	struct FEventReply On_OverlayWidgetBorder_MouseButtonDown_0(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnFocusReceived(const struct FGeometry& MyGeometry, const struct FFocusEvent& InFocusEvent);
	struct FEventReply OnMouseMove(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseWheel(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnPreviewKeyDown(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent);
	struct FEventReply OnPreviewMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void RegisterFocusedControl(class UWB_BaseControl_C* FocusedControl);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void TryFindFocusableWidget(class UUserWidget* UserWidget, bool* FoundFocus);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WB_MasterScreen_C">();
	}
	static class UWB_MasterScreen_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWB_MasterScreen_C>();
	}
};
static_assert(alignof(UWB_MasterScreen_C) == 0x000008, "Wrong alignment on UWB_MasterScreen_C");
static_assert(sizeof(UWB_MasterScreen_C) == 0x000380, "Wrong size on UWB_MasterScreen_C");
static_assert(offsetof(UWB_MasterScreen_C, UberGraphFrame) == 0x0002E0, "Member 'UWB_MasterScreen_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWB_MasterScreen_C, BackgroundBlur_0) == 0x0002E8, "Member 'UWB_MasterScreen_C::BackgroundBlur_0' has a wrong offset!");
static_assert(offsetof(UWB_MasterScreen_C, CurrentScreenCanvas) == 0x0002F0, "Member 'UWB_MasterScreen_C::CurrentScreenCanvas' has a wrong offset!");
static_assert(offsetof(UWB_MasterScreen_C, GamePadModeBorder) == 0x0002F8, "Member 'UWB_MasterScreen_C::GamePadModeBorder' has a wrong offset!");
static_assert(offsetof(UWB_MasterScreen_C, MasterCanvas) == 0x000300, "Member 'UWB_MasterScreen_C::MasterCanvas' has a wrong offset!");
static_assert(offsetof(UWB_MasterScreen_C, MessageBoxCanvas) == 0x000308, "Member 'UWB_MasterScreen_C::MessageBoxCanvas' has a wrong offset!");
static_assert(offsetof(UWB_MasterScreen_C, OverlayWidgetBorder) == 0x000310, "Member 'UWB_MasterScreen_C::OverlayWidgetBorder' has a wrong offset!");
static_assert(offsetof(UWB_MasterScreen_C, WB_FPSCounter) == 0x000318, "Member 'UWB_MasterScreen_C::WB_FPSCounter' has a wrong offset!");
static_assert(offsetof(UWB_MasterScreen_C, WB_ServerStateInfo) == 0x000320, "Member 'UWB_MasterScreen_C::WB_ServerStateInfo' has a wrong offset!");
static_assert(offsetof(UWB_MasterScreen_C, RefreshInitialFocus) == 0x000328, "Member 'UWB_MasterScreen_C::RefreshInitialFocus' has a wrong offset!");
static_assert(offsetof(UWB_MasterScreen_C, WaitKeyUp) == 0x000329, "Member 'UWB_MasterScreen_C::WaitKeyUp' has a wrong offset!");
static_assert(offsetof(UWB_MasterScreen_C, FocusedElements) == 0x000330, "Member 'UWB_MasterScreen_C::FocusedElements' has a wrong offset!");

}

