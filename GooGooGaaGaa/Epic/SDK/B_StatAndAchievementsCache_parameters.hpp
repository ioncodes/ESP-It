#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_StatAndAchievementsCache

#include "Basic.hpp"

#include "E_StatSetBy_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "S_Stat_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function B_StatAndAchievementsCache.B_StatAndAchievementsCache_C.GetAllStats
// 0x0010 (0x0010 - 0x0000)
struct B_StatAndAchievementsCache_C_GetAllStats final
{
public:
	TArray<struct FS_Stat>                        ResultData;                                        // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(B_StatAndAchievementsCache_C_GetAllStats) == 0x000008, "Wrong alignment on B_StatAndAchievementsCache_C_GetAllStats");
static_assert(sizeof(B_StatAndAchievementsCache_C_GetAllStats) == 0x000010, "Wrong size on B_StatAndAchievementsCache_C_GetAllStats");
static_assert(offsetof(B_StatAndAchievementsCache_C_GetAllStats, ResultData) == 0x000000, "Member 'B_StatAndAchievementsCache_C_GetAllStats::ResultData' has a wrong offset!");

// Function B_StatAndAchievementsCache.B_StatAndAchievementsCache_C.GetStatsBySetByType
// 0x00A8 (0x00A8 - 0x0000)
struct B_StatAndAchievementsCache_C_GetStatsBySetByType final
{
public:
	E_StatSetBy                                   SetByFilter;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_Stat>                        ResultData;                                        // 0x0008(0x0010)(Parm, OutParm)
	TArray<struct FS_Stat>                        ResultArray;                                       // 0x0018(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_Stat                                CallFunc_Array_Get_Item;                           // 0x0038(0x0030)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E[0x2];                                       // 0x006E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_Stat                                K2Node_MakeStruct_S_Stat;                          // 0x0070(0x0030)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_StatAndAchievementsCache_C_GetStatsBySetByType) == 0x000008, "Wrong alignment on B_StatAndAchievementsCache_C_GetStatsBySetByType");
static_assert(sizeof(B_StatAndAchievementsCache_C_GetStatsBySetByType) == 0x0000A8, "Wrong size on B_StatAndAchievementsCache_C_GetStatsBySetByType");
static_assert(offsetof(B_StatAndAchievementsCache_C_GetStatsBySetByType, SetByFilter) == 0x000000, "Member 'B_StatAndAchievementsCache_C_GetStatsBySetByType::SetByFilter' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_GetStatsBySetByType, ResultData) == 0x000008, "Member 'B_StatAndAchievementsCache_C_GetStatsBySetByType::ResultData' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_GetStatsBySetByType, ResultArray) == 0x000018, "Member 'B_StatAndAchievementsCache_C_GetStatsBySetByType::ResultArray' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_GetStatsBySetByType, Temp_int_Array_Index_Variable) == 0x000028, "Member 'B_StatAndAchievementsCache_C_GetStatsBySetByType::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_GetStatsBySetByType, Temp_int_Loop_Counter_Variable) == 0x00002C, "Member 'B_StatAndAchievementsCache_C_GetStatsBySetByType::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_GetStatsBySetByType, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'B_StatAndAchievementsCache_C_GetStatsBySetByType::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_GetStatsBySetByType, CallFunc_Array_Get_Item) == 0x000038, "Member 'B_StatAndAchievementsCache_C_GetStatsBySetByType::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_GetStatsBySetByType, CallFunc_Array_Length_ReturnValue) == 0x000068, "Member 'B_StatAndAchievementsCache_C_GetStatsBySetByType::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_GetStatsBySetByType, CallFunc_Less_IntInt_ReturnValue) == 0x00006C, "Member 'B_StatAndAchievementsCache_C_GetStatsBySetByType::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_GetStatsBySetByType, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00006D, "Member 'B_StatAndAchievementsCache_C_GetStatsBySetByType::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_GetStatsBySetByType, K2Node_MakeStruct_S_Stat) == 0x000070, "Member 'B_StatAndAchievementsCache_C_GetStatsBySetByType::K2Node_MakeStruct_S_Stat' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_GetStatsBySetByType, CallFunc_Array_Add_ReturnValue) == 0x0000A0, "Member 'B_StatAndAchievementsCache_C_GetStatsBySetByType::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function B_StatAndAchievementsCache.B_StatAndAchievementsCache_C.HasStat
// 0x0038 (0x0038 - 0x0000)
struct B_StatAndAchievementsCache_C_HasStat final
{
public:
	class FString                                 StatName;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IndexInListIfFound;                                // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         CallFunc_GetStat_Value;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetStat_WasFound;                         // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetStat_IndexInList;                      // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              CallFunc_GetStat_AchievementDateTime;              // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetStat_bIsHidden;                        // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_StatAndAchievementsCache_C_HasStat) == 0x000008, "Wrong alignment on B_StatAndAchievementsCache_C_HasStat");
static_assert(sizeof(B_StatAndAchievementsCache_C_HasStat) == 0x000038, "Wrong size on B_StatAndAchievementsCache_C_HasStat");
static_assert(offsetof(B_StatAndAchievementsCache_C_HasStat, StatName) == 0x000000, "Member 'B_StatAndAchievementsCache_C_HasStat::StatName' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_HasStat, Result) == 0x000010, "Member 'B_StatAndAchievementsCache_C_HasStat::Result' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_HasStat, IndexInListIfFound) == 0x000014, "Member 'B_StatAndAchievementsCache_C_HasStat::IndexInListIfFound' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_HasStat, CallFunc_GetStat_Value) == 0x000018, "Member 'B_StatAndAchievementsCache_C_HasStat::CallFunc_GetStat_Value' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_HasStat, CallFunc_GetStat_WasFound) == 0x000020, "Member 'B_StatAndAchievementsCache_C_HasStat::CallFunc_GetStat_WasFound' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_HasStat, CallFunc_GetStat_IndexInList) == 0x000024, "Member 'B_StatAndAchievementsCache_C_HasStat::CallFunc_GetStat_IndexInList' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_HasStat, CallFunc_GetStat_AchievementDateTime) == 0x000028, "Member 'B_StatAndAchievementsCache_C_HasStat::CallFunc_GetStat_AchievementDateTime' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_HasStat, CallFunc_GetStat_bIsHidden) == 0x000030, "Member 'B_StatAndAchievementsCache_C_HasStat::CallFunc_GetStat_bIsHidden' has a wrong offset!");

// Function B_StatAndAchievementsCache.B_StatAndAchievementsCache_C.SetStat
// 0x0070 (0x0070 - 0x0000)
struct B_StatAndAchievementsCache_C_SetStat final
{
public:
	class FString                                 StatName;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int64                                         Value;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_StatSetBy                                   SetBy;                                             // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              AchievementGrantDateTime;                          // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsHidden;                                         // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_Stat                                NewStat;                                           // 0x0030(0x0030)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasStat_Result;                           // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_HasStat_IndexInListIfFound;               // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_StatAndAchievementsCache_C_SetStat) == 0x000008, "Wrong alignment on B_StatAndAchievementsCache_C_SetStat");
static_assert(sizeof(B_StatAndAchievementsCache_C_SetStat) == 0x000070, "Wrong size on B_StatAndAchievementsCache_C_SetStat");
static_assert(offsetof(B_StatAndAchievementsCache_C_SetStat, StatName) == 0x000000, "Member 'B_StatAndAchievementsCache_C_SetStat::StatName' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_SetStat, Value) == 0x000010, "Member 'B_StatAndAchievementsCache_C_SetStat::Value' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_SetStat, SetBy) == 0x000018, "Member 'B_StatAndAchievementsCache_C_SetStat::SetBy' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_SetStat, AchievementGrantDateTime) == 0x000020, "Member 'B_StatAndAchievementsCache_C_SetStat::AchievementGrantDateTime' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_SetStat, bIsHidden) == 0x000028, "Member 'B_StatAndAchievementsCache_C_SetStat::bIsHidden' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_SetStat, NewStat) == 0x000030, "Member 'B_StatAndAchievementsCache_C_SetStat::NewStat' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_SetStat, CallFunc_HasStat_Result) == 0x000060, "Member 'B_StatAndAchievementsCache_C_SetStat::CallFunc_HasStat_Result' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_SetStat, CallFunc_HasStat_IndexInListIfFound) == 0x000064, "Member 'B_StatAndAchievementsCache_C_SetStat::CallFunc_HasStat_IndexInListIfFound' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_SetStat, CallFunc_Array_Add_ReturnValue) == 0x000068, "Member 'B_StatAndAchievementsCache_C_SetStat::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function B_StatAndAchievementsCache.B_StatAndAchievementsCache_C.GetCount
// 0x0008 (0x0008 - 0x0000)
struct B_StatAndAchievementsCache_C_GetCount final
{
public:
	int32                                         Result;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_StatAndAchievementsCache_C_GetCount) == 0x000004, "Wrong alignment on B_StatAndAchievementsCache_C_GetCount");
static_assert(sizeof(B_StatAndAchievementsCache_C_GetCount) == 0x000008, "Wrong size on B_StatAndAchievementsCache_C_GetCount");
static_assert(offsetof(B_StatAndAchievementsCache_C_GetCount, Result) == 0x000000, "Member 'B_StatAndAchievementsCache_C_GetCount::Result' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_GetCount, CallFunc_Array_Length_ReturnValue) == 0x000004, "Member 'B_StatAndAchievementsCache_C_GetCount::CallFunc_Array_Length_ReturnValue' has a wrong offset!");

// Function B_StatAndAchievementsCache.B_StatAndAchievementsCache_C.GetStat
// 0x0090 (0x0090 - 0x0000)
struct B_StatAndAchievementsCache_C_GetStat final
{
public:
	class FString                                 StatName;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int64                                         Value;                                             // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WasFound;                                          // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IndexInList;                                       // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              AchievementDateTime;                               // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsHidden;                                         // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ResIsHidden;                                       // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              ResDateTime;                                       // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         ResIndexInList;                                    // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ResWasFound;                                       // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         ResValue;                                          // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_56[0x2];                                       // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_Stat                                CallFunc_Array_Get_Item;                           // 0x0058(0x0030)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StriStri_ReturnValue;          // 0x008E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_StatAndAchievementsCache_C_GetStat) == 0x000008, "Wrong alignment on B_StatAndAchievementsCache_C_GetStat");
static_assert(sizeof(B_StatAndAchievementsCache_C_GetStat) == 0x000090, "Wrong size on B_StatAndAchievementsCache_C_GetStat");
static_assert(offsetof(B_StatAndAchievementsCache_C_GetStat, StatName) == 0x000000, "Member 'B_StatAndAchievementsCache_C_GetStat::StatName' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_GetStat, Value) == 0x000010, "Member 'B_StatAndAchievementsCache_C_GetStat::Value' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_GetStat, WasFound) == 0x000018, "Member 'B_StatAndAchievementsCache_C_GetStat::WasFound' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_GetStat, IndexInList) == 0x00001C, "Member 'B_StatAndAchievementsCache_C_GetStat::IndexInList' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_GetStat, AchievementDateTime) == 0x000020, "Member 'B_StatAndAchievementsCache_C_GetStat::AchievementDateTime' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_GetStat, bIsHidden) == 0x000028, "Member 'B_StatAndAchievementsCache_C_GetStat::bIsHidden' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_GetStat, ResIsHidden) == 0x000029, "Member 'B_StatAndAchievementsCache_C_GetStat::ResIsHidden' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_GetStat, ResDateTime) == 0x000030, "Member 'B_StatAndAchievementsCache_C_GetStat::ResDateTime' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_GetStat, ResIndexInList) == 0x000038, "Member 'B_StatAndAchievementsCache_C_GetStat::ResIndexInList' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_GetStat, ResWasFound) == 0x00003C, "Member 'B_StatAndAchievementsCache_C_GetStat::ResWasFound' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_GetStat, ResValue) == 0x000040, "Member 'B_StatAndAchievementsCache_C_GetStat::ResValue' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_GetStat, Temp_int_Array_Index_Variable) == 0x000048, "Member 'B_StatAndAchievementsCache_C_GetStat::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_GetStat, Temp_int_Loop_Counter_Variable) == 0x00004C, "Member 'B_StatAndAchievementsCache_C_GetStat::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_GetStat, CallFunc_Add_IntInt_ReturnValue) == 0x000050, "Member 'B_StatAndAchievementsCache_C_GetStat::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_GetStat, Temp_bool_True_if_break_was_hit_Variable) == 0x000054, "Member 'B_StatAndAchievementsCache_C_GetStat::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_GetStat, CallFunc_Not_PreBool_ReturnValue) == 0x000055, "Member 'B_StatAndAchievementsCache_C_GetStat::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_GetStat, CallFunc_Array_Get_Item) == 0x000058, "Member 'B_StatAndAchievementsCache_C_GetStat::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_GetStat, CallFunc_Array_Length_ReturnValue) == 0x000088, "Member 'B_StatAndAchievementsCache_C_GetStat::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_GetStat, CallFunc_Less_IntInt_ReturnValue) == 0x00008C, "Member 'B_StatAndAchievementsCache_C_GetStat::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_GetStat, CallFunc_BooleanAND_ReturnValue) == 0x00008D, "Member 'B_StatAndAchievementsCache_C_GetStat::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_GetStat, CallFunc_EqualEqual_StriStri_ReturnValue) == 0x00008E, "Member 'B_StatAndAchievementsCache_C_GetStat::CallFunc_EqualEqual_StriStri_ReturnValue' has a wrong offset!");

// Function B_StatAndAchievementsCache.B_StatAndAchievementsCache_C.PrintCache
// 0x0168 (0x0168 - 0x0000)
struct B_StatAndAchievementsCache_C_PrintCache final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0010(0x0048)(HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_Stat                                CallFunc_Array_Get_Item;                           // 0x0060(0x0030)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_Int64ToText_ReturnValue;             // 0x0098(0x0010)()
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x00A8(0x0010)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x00B8(0x0048)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x0100(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0148(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0158(0x0010)()
};
static_assert(alignof(B_StatAndAchievementsCache_C_PrintCache) == 0x000008, "Wrong alignment on B_StatAndAchievementsCache_C_PrintCache");
static_assert(sizeof(B_StatAndAchievementsCache_C_PrintCache) == 0x000168, "Wrong size on B_StatAndAchievementsCache_C_PrintCache");
static_assert(offsetof(B_StatAndAchievementsCache_C_PrintCache, Temp_int_Array_Index_Variable) == 0x000000, "Member 'B_StatAndAchievementsCache_C_PrintCache::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_PrintCache, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'B_StatAndAchievementsCache_C_PrintCache::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_PrintCache, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000008, "Member 'B_StatAndAchievementsCache_C_PrintCache::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_PrintCache, K2Node_MakeStruct_FormatArgumentData) == 0x000010, "Member 'B_StatAndAchievementsCache_C_PrintCache::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_PrintCache, CallFunc_Add_IntInt_ReturnValue) == 0x000058, "Member 'B_StatAndAchievementsCache_C_PrintCache::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_PrintCache, CallFunc_Array_Length_ReturnValue) == 0x00005C, "Member 'B_StatAndAchievementsCache_C_PrintCache::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_PrintCache, CallFunc_Array_Get_Item) == 0x000060, "Member 'B_StatAndAchievementsCache_C_PrintCache::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_PrintCache, CallFunc_Less_IntInt_ReturnValue) == 0x000090, "Member 'B_StatAndAchievementsCache_C_PrintCache::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_PrintCache, CallFunc_Conv_Int64ToText_ReturnValue) == 0x000098, "Member 'B_StatAndAchievementsCache_C_PrintCache::CallFunc_Conv_Int64ToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_PrintCache, CallFunc_Conv_StringToText_ReturnValue) == 0x0000A8, "Member 'B_StatAndAchievementsCache_C_PrintCache::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_PrintCache, K2Node_MakeStruct_FormatArgumentData_1) == 0x0000B8, "Member 'B_StatAndAchievementsCache_C_PrintCache::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_PrintCache, K2Node_MakeStruct_FormatArgumentData_2) == 0x000100, "Member 'B_StatAndAchievementsCache_C_PrintCache::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_PrintCache, K2Node_MakeArray_Array) == 0x000148, "Member 'B_StatAndAchievementsCache_C_PrintCache::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(B_StatAndAchievementsCache_C_PrintCache, CallFunc_Format_ReturnValue) == 0x000158, "Member 'B_StatAndAchievementsCache_C_PrintCache::CallFunc_Format_ReturnValue' has a wrong offset!");

}

