#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HeadMountedDisplay

#include "Basic.hpp"

#include "HeadMountedDisplay_structs.hpp"
#include "InputCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function HeadMountedDisplay.HandKeypointConversion.Conv_HandKeypointToInt32
// 0x0008 (0x0008 - 0x0000)
struct HandKeypointConversion_Conv_HandKeypointToInt32 final
{
public:
	EHandKeypoint                                 Input;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HandKeypointConversion_Conv_HandKeypointToInt32) == 0x000004, "Wrong alignment on HandKeypointConversion_Conv_HandKeypointToInt32");
static_assert(sizeof(HandKeypointConversion_Conv_HandKeypointToInt32) == 0x000008, "Wrong size on HandKeypointConversion_Conv_HandKeypointToInt32");
static_assert(offsetof(HandKeypointConversion_Conv_HandKeypointToInt32, Input) == 0x000000, "Member 'HandKeypointConversion_Conv_HandKeypointToInt32::Input' has a wrong offset!");
static_assert(offsetof(HandKeypointConversion_Conv_HandKeypointToInt32, ReturnValue) == 0x000004, "Member 'HandKeypointConversion_Conv_HandKeypointToInt32::ReturnValue' has a wrong offset!");

// Function HeadMountedDisplay.MotionControllerComponent.GetHandJointPosition
// 0x0020 (0x0020 - 0x0000)
struct MotionControllerComponent_GetHandJointPosition final
{
public:
	int32                                         JointIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValueFound;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MotionControllerComponent_GetHandJointPosition) == 0x000008, "Wrong alignment on MotionControllerComponent_GetHandJointPosition");
static_assert(sizeof(MotionControllerComponent_GetHandJointPosition) == 0x000020, "Wrong size on MotionControllerComponent_GetHandJointPosition");
static_assert(offsetof(MotionControllerComponent_GetHandJointPosition, JointIndex) == 0x000000, "Member 'MotionControllerComponent_GetHandJointPosition::JointIndex' has a wrong offset!");
static_assert(offsetof(MotionControllerComponent_GetHandJointPosition, bValueFound) == 0x000004, "Member 'MotionControllerComponent_GetHandJointPosition::bValueFound' has a wrong offset!");
static_assert(offsetof(MotionControllerComponent_GetHandJointPosition, ReturnValue) == 0x000008, "Member 'MotionControllerComponent_GetHandJointPosition::ReturnValue' has a wrong offset!");

// Function HeadMountedDisplay.MotionControllerComponent.GetParameterValue
// 0x0010 (0x0010 - 0x0000)
struct MotionControllerComponent_GetParameterValue final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValueFound;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MotionControllerComponent_GetParameterValue) == 0x000004, "Wrong alignment on MotionControllerComponent_GetParameterValue");
static_assert(sizeof(MotionControllerComponent_GetParameterValue) == 0x000010, "Wrong size on MotionControllerComponent_GetParameterValue");
static_assert(offsetof(MotionControllerComponent_GetParameterValue, InName) == 0x000000, "Member 'MotionControllerComponent_GetParameterValue::InName' has a wrong offset!");
static_assert(offsetof(MotionControllerComponent_GetParameterValue, bValueFound) == 0x000008, "Member 'MotionControllerComponent_GetParameterValue::bValueFound' has a wrong offset!");
static_assert(offsetof(MotionControllerComponent_GetParameterValue, ReturnValue) == 0x00000C, "Member 'MotionControllerComponent_GetParameterValue::ReturnValue' has a wrong offset!");

// Function HeadMountedDisplay.MotionControllerComponent.SetAssociatedPlayerIndex
// 0x0004 (0x0004 - 0x0000)
struct MotionControllerComponent_SetAssociatedPlayerIndex final
{
public:
	int32                                         NewPlayer;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MotionControllerComponent_SetAssociatedPlayerIndex) == 0x000004, "Wrong alignment on MotionControllerComponent_SetAssociatedPlayerIndex");
static_assert(sizeof(MotionControllerComponent_SetAssociatedPlayerIndex) == 0x000004, "Wrong size on MotionControllerComponent_SetAssociatedPlayerIndex");
static_assert(offsetof(MotionControllerComponent_SetAssociatedPlayerIndex, NewPlayer) == 0x000000, "Member 'MotionControllerComponent_SetAssociatedPlayerIndex::NewPlayer' has a wrong offset!");

// Function HeadMountedDisplay.MotionControllerComponent.SetTrackingMotionSource
// 0x0008 (0x0008 - 0x0000)
struct MotionControllerComponent_SetTrackingMotionSource final
{
public:
	class FName                                   NewSource;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MotionControllerComponent_SetTrackingMotionSource) == 0x000004, "Wrong alignment on MotionControllerComponent_SetTrackingMotionSource");
static_assert(sizeof(MotionControllerComponent_SetTrackingMotionSource) == 0x000008, "Wrong size on MotionControllerComponent_SetTrackingMotionSource");
static_assert(offsetof(MotionControllerComponent_SetTrackingMotionSource, NewSource) == 0x000000, "Member 'MotionControllerComponent_SetTrackingMotionSource::NewSource' has a wrong offset!");

// Function HeadMountedDisplay.MotionControllerComponent.SetTrackingSource
// 0x0001 (0x0001 - 0x0000)
struct MotionControllerComponent_SetTrackingSource final
{
public:
	EControllerHand                               NewSource;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MotionControllerComponent_SetTrackingSource) == 0x000001, "Wrong alignment on MotionControllerComponent_SetTrackingSource");
static_assert(sizeof(MotionControllerComponent_SetTrackingSource) == 0x000001, "Wrong size on MotionControllerComponent_SetTrackingSource");
static_assert(offsetof(MotionControllerComponent_SetTrackingSource, NewSource) == 0x000000, "Member 'MotionControllerComponent_SetTrackingSource::NewSource' has a wrong offset!");

// Function HeadMountedDisplay.MotionControllerComponent.GetAngularVelocity
// 0x0020 (0x0020 - 0x0000)
struct MotionControllerComponent_GetAngularVelocity final
{
public:
	struct FRotator                               OutAngularVelocity;                                // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MotionControllerComponent_GetAngularVelocity) == 0x000008, "Wrong alignment on MotionControllerComponent_GetAngularVelocity");
static_assert(sizeof(MotionControllerComponent_GetAngularVelocity) == 0x000020, "Wrong size on MotionControllerComponent_GetAngularVelocity");
static_assert(offsetof(MotionControllerComponent_GetAngularVelocity, OutAngularVelocity) == 0x000000, "Member 'MotionControllerComponent_GetAngularVelocity::OutAngularVelocity' has a wrong offset!");
static_assert(offsetof(MotionControllerComponent_GetAngularVelocity, ReturnValue) == 0x000018, "Member 'MotionControllerComponent_GetAngularVelocity::ReturnValue' has a wrong offset!");

// Function HeadMountedDisplay.MotionControllerComponent.GetLinearAcceleration
// 0x0020 (0x0020 - 0x0000)
struct MotionControllerComponent_GetLinearAcceleration final
{
public:
	struct FVector                                OutLinearAcceleration;                             // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MotionControllerComponent_GetLinearAcceleration) == 0x000008, "Wrong alignment on MotionControllerComponent_GetLinearAcceleration");
static_assert(sizeof(MotionControllerComponent_GetLinearAcceleration) == 0x000020, "Wrong size on MotionControllerComponent_GetLinearAcceleration");
static_assert(offsetof(MotionControllerComponent_GetLinearAcceleration, OutLinearAcceleration) == 0x000000, "Member 'MotionControllerComponent_GetLinearAcceleration::OutLinearAcceleration' has a wrong offset!");
static_assert(offsetof(MotionControllerComponent_GetLinearAcceleration, ReturnValue) == 0x000018, "Member 'MotionControllerComponent_GetLinearAcceleration::ReturnValue' has a wrong offset!");

// Function HeadMountedDisplay.MotionControllerComponent.GetLinearVelocity
// 0x0020 (0x0020 - 0x0000)
struct MotionControllerComponent_GetLinearVelocity final
{
public:
	struct FVector                                OutLinearVelocity;                                 // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MotionControllerComponent_GetLinearVelocity) == 0x000008, "Wrong alignment on MotionControllerComponent_GetLinearVelocity");
static_assert(sizeof(MotionControllerComponent_GetLinearVelocity) == 0x000020, "Wrong size on MotionControllerComponent_GetLinearVelocity");
static_assert(offsetof(MotionControllerComponent_GetLinearVelocity, OutLinearVelocity) == 0x000000, "Member 'MotionControllerComponent_GetLinearVelocity::OutLinearVelocity' has a wrong offset!");
static_assert(offsetof(MotionControllerComponent_GetLinearVelocity, ReturnValue) == 0x000018, "Member 'MotionControllerComponent_GetLinearVelocity::ReturnValue' has a wrong offset!");

// Function HeadMountedDisplay.MotionControllerComponent.GetTrackingSource
// 0x0001 (0x0001 - 0x0000)
struct MotionControllerComponent_GetTrackingSource final
{
public:
	EControllerHand                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MotionControllerComponent_GetTrackingSource) == 0x000001, "Wrong alignment on MotionControllerComponent_GetTrackingSource");
static_assert(sizeof(MotionControllerComponent_GetTrackingSource) == 0x000001, "Wrong size on MotionControllerComponent_GetTrackingSource");
static_assert(offsetof(MotionControllerComponent_GetTrackingSource, ReturnValue) == 0x000000, "Member 'MotionControllerComponent_GetTrackingSource::ReturnValue' has a wrong offset!");

// Function HeadMountedDisplay.MotionControllerComponent.IsTracked
// 0x0001 (0x0001 - 0x0000)
struct MotionControllerComponent_IsTracked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MotionControllerComponent_IsTracked) == 0x000001, "Wrong alignment on MotionControllerComponent_IsTracked");
static_assert(sizeof(MotionControllerComponent_IsTracked) == 0x000001, "Wrong size on MotionControllerComponent_IsTracked");
static_assert(offsetof(MotionControllerComponent_IsTracked, ReturnValue) == 0x000000, "Member 'MotionControllerComponent_IsTracked::ReturnValue' has a wrong offset!");

}

