#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlaceableLight

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_ActionPlacable_classes.hpp"
#include "E_LightColor_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlaceableLight.BP_PlaceableLight_C
// 0x0038 (0x03C0 - 0x0388)
class ABP_PlaceableLight_C final : public ABP_ActionPlacable_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_PlaceableLight_C;                // 0x0388(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Sphere;                                            // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Color;                                             // 0x03A0(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	E_LightColor                                  UsedColor;                                         // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ChangeBrightness(double AddValue);
	void ChangeColor();
	void ExecuteUbergraph_BP_PlaceableLight(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void SetColor(const struct FLinearColor& Color_0);
	void TurnIntoPointLighForPlayTest(bool HasPlayTestStarted);
	void TurnIntoPointLight();
	void UnselectFromEditing();
	void UpdateActionPlacable();
	void UpdateLightValues();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlaceableLight_C">();
	}
	static class ABP_PlaceableLight_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PlaceableLight_C>();
	}
};
static_assert(alignof(ABP_PlaceableLight_C) == 0x000008, "Wrong alignment on ABP_PlaceableLight_C");
static_assert(sizeof(ABP_PlaceableLight_C) == 0x0003C0, "Wrong size on ABP_PlaceableLight_C");
static_assert(offsetof(ABP_PlaceableLight_C, UberGraphFrame_BP_PlaceableLight_C) == 0x000388, "Member 'ABP_PlaceableLight_C::UberGraphFrame_BP_PlaceableLight_C' has a wrong offset!");
static_assert(offsetof(ABP_PlaceableLight_C, Sphere) == 0x000390, "Member 'ABP_PlaceableLight_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABP_PlaceableLight_C, PointLight) == 0x000398, "Member 'ABP_PlaceableLight_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_PlaceableLight_C, Color) == 0x0003A0, "Member 'ABP_PlaceableLight_C::Color' has a wrong offset!");
static_assert(offsetof(ABP_PlaceableLight_C, UsedColor) == 0x0003B8, "Member 'ABP_PlaceableLight_C::UsedColor' has a wrong offset!");

}

