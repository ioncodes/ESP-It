#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: IProp

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SRuntimePropData_structs.hpp"


namespace SDK::Params
{

// Function IProp.IProp_C.Action
// 0x0001 (0x0001 - 0x0000)
struct IProp_C_Action final
{
public:
	bool                                          ForcedBoolean;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IProp_C_Action) == 0x000001, "Wrong alignment on IProp_C_Action");
static_assert(sizeof(IProp_C_Action) == 0x000001, "Wrong size on IProp_C_Action");
static_assert(offsetof(IProp_C_Action, ForcedBoolean) == 0x000000, "Member 'IProp_C_Action::ForcedBoolean' has a wrong offset!");

// Function IProp.IProp_C.ApplyTemplateData
// 0x0010 (0x0010 - 0x0000)
struct IProp_C_ApplyTemplateData final
{
public:
	class AActor*                                 Template;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          ForcedBoolean;                                     // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IProp_C_ApplyTemplateData) == 0x000008, "Wrong alignment on IProp_C_ApplyTemplateData");
static_assert(sizeof(IProp_C_ApplyTemplateData) == 0x000010, "Wrong size on IProp_C_ApplyTemplateData");
static_assert(offsetof(IProp_C_ApplyTemplateData, Template) == 0x000000, "Member 'IProp_C_ApplyTemplateData::Template' has a wrong offset!");
static_assert(offsetof(IProp_C_ApplyTemplateData, ForcedBoolean) == 0x000008, "Member 'IProp_C_ApplyTemplateData::ForcedBoolean' has a wrong offset!");

// Function IProp.IProp_C.Fly
// 0x0018 (0x0018 - 0x0000)
struct IProp_C_Fly final
{
public:
	double                                        TargetBoost;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DeltaTime;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ForcedBoolean;                                     // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IProp_C_Fly) == 0x000008, "Wrong alignment on IProp_C_Fly");
static_assert(sizeof(IProp_C_Fly) == 0x000018, "Wrong size on IProp_C_Fly");
static_assert(offsetof(IProp_C_Fly, TargetBoost) == 0x000000, "Member 'IProp_C_Fly::TargetBoost' has a wrong offset!");
static_assert(offsetof(IProp_C_Fly, DeltaTime) == 0x000008, "Member 'IProp_C_Fly::DeltaTime' has a wrong offset!");
static_assert(offsetof(IProp_C_Fly, ForcedBoolean) == 0x000010, "Member 'IProp_C_Fly::ForcedBoolean' has a wrong offset!");

// Function IProp.IProp_C.GetCameraDistance
// 0x0008 (0x0008 - 0x0000)
struct IProp_C_GetCameraDistance final
{
public:
	double                                        CameraDistance;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IProp_C_GetCameraDistance) == 0x000008, "Wrong alignment on IProp_C_GetCameraDistance");
static_assert(sizeof(IProp_C_GetCameraDistance) == 0x000008, "Wrong size on IProp_C_GetCameraDistance");
static_assert(offsetof(IProp_C_GetCameraDistance, CameraDistance) == 0x000000, "Member 'IProp_C_GetCameraDistance::CameraDistance' has a wrong offset!");

// Function IProp.IProp_C.GetCenter
// 0x0018 (0x0018 - 0x0000)
struct IProp_C_GetCenter final
{
public:
	struct FVector                                Center;                                            // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IProp_C_GetCenter) == 0x000008, "Wrong alignment on IProp_C_GetCenter");
static_assert(sizeof(IProp_C_GetCenter) == 0x000018, "Wrong size on IProp_C_GetCenter");
static_assert(offsetof(IProp_C_GetCenter, Center) == 0x000000, "Member 'IProp_C_GetCenter::Center' has a wrong offset!");

// Function IProp.IProp_C.GetMaxHealth
// 0x0008 (0x0008 - 0x0000)
struct IProp_C_GetMaxHealth final
{
public:
	double                                        MaxHealth;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IProp_C_GetMaxHealth) == 0x000008, "Wrong alignment on IProp_C_GetMaxHealth");
static_assert(sizeof(IProp_C_GetMaxHealth) == 0x000008, "Wrong size on IProp_C_GetMaxHealth");
static_assert(offsetof(IProp_C_GetMaxHealth, MaxHealth) == 0x000000, "Member 'IProp_C_GetMaxHealth::MaxHealth' has a wrong offset!");

// Function IProp.IProp_C.GetName
// 0x0010 (0x0010 - 0x0000)
struct IProp_C_GetName final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(IProp_C_GetName) == 0x000008, "Wrong alignment on IProp_C_GetName");
static_assert(sizeof(IProp_C_GetName) == 0x000010, "Wrong size on IProp_C_GetName");
static_assert(offsetof(IProp_C_GetName, Name_0) == 0x000000, "Member 'IProp_C_GetName::Name_0' has a wrong offset!");

// Function IProp.IProp_C.GetRuntimePropData
// 0x0038 (0x0038 - 0x0000)
struct IProp_C_GetRuntimePropData final
{
public:
	struct FSRuntimePropData                      RuntimePropData;                                   // 0x0000(0x0038)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IProp_C_GetRuntimePropData) == 0x000008, "Wrong alignment on IProp_C_GetRuntimePropData");
static_assert(sizeof(IProp_C_GetRuntimePropData) == 0x000038, "Wrong size on IProp_C_GetRuntimePropData");
static_assert(offsetof(IProp_C_GetRuntimePropData, RuntimePropData) == 0x000000, "Member 'IProp_C_GetRuntimePropData::RuntimePropData' has a wrong offset!");

// Function IProp.IProp_C.GetSize
// 0x0008 (0x0008 - 0x0000)
struct IProp_C_GetSize final
{
public:
	double                                        Size;                                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IProp_C_GetSize) == 0x000008, "Wrong alignment on IProp_C_GetSize");
static_assert(sizeof(IProp_C_GetSize) == 0x000008, "Wrong size on IProp_C_GetSize");
static_assert(offsetof(IProp_C_GetSize, Size) == 0x000000, "Member 'IProp_C_GetSize::Size' has a wrong offset!");

// Function IProp.IProp_C.GetVisualInterpolators
// 0x0010 (0x0010 - 0x0000)
struct IProp_C_GetVisualInterpolators final
{
public:
	TArray<class AB_VisualIntepolator_C*>         VisualInterpolators;                               // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(IProp_C_GetVisualInterpolators) == 0x000008, "Wrong alignment on IProp_C_GetVisualInterpolators");
static_assert(sizeof(IProp_C_GetVisualInterpolators) == 0x000010, "Wrong size on IProp_C_GetVisualInterpolators");
static_assert(offsetof(IProp_C_GetVisualInterpolators, VisualInterpolators) == 0x000000, "Member 'IProp_C_GetVisualInterpolators::VisualInterpolators' has a wrong offset!");

// Function IProp.IProp_C.Jump
// 0x0001 (0x0001 - 0x0000)
struct IProp_C_Jump final
{
public:
	bool                                          JumpSuccess;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IProp_C_Jump) == 0x000001, "Wrong alignment on IProp_C_Jump");
static_assert(sizeof(IProp_C_Jump) == 0x000001, "Wrong size on IProp_C_Jump");
static_assert(offsetof(IProp_C_Jump, JumpSuccess) == 0x000000, "Member 'IProp_C_Jump::JumpSuccess' has a wrong offset!");

// Function IProp.IProp_C.Move
// 0x0020 (0x0020 - 0x0000)
struct IProp_C_Move final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ForcedOutput;                                      // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IProp_C_Move) == 0x000008, "Wrong alignment on IProp_C_Move");
static_assert(sizeof(IProp_C_Move) == 0x000020, "Wrong size on IProp_C_Move");
static_assert(offsetof(IProp_C_Move, Vector) == 0x000000, "Member 'IProp_C_Move::Vector' has a wrong offset!");
static_assert(offsetof(IProp_C_Move, ForcedOutput) == 0x000018, "Member 'IProp_C_Move::ForcedOutput' has a wrong offset!");

// Function IProp.IProp_C.OffsetPosition
// 0x00F0 (0x00F0 - 0x0000)
struct IProp_C_OffsetPosition final
{
public:
	class AActor*                                 Prop;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             WantedSpawnTransform;                              // 0x0010(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0070(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          ValidTransform;                                    // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0xF];                                       // 0x0081(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0090(0x0060)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IProp_C_OffsetPosition) == 0x000010, "Wrong alignment on IProp_C_OffsetPosition");
static_assert(sizeof(IProp_C_OffsetPosition) == 0x0000F0, "Wrong size on IProp_C_OffsetPosition");
static_assert(offsetof(IProp_C_OffsetPosition, Prop) == 0x000000, "Member 'IProp_C_OffsetPosition::Prop' has a wrong offset!");
static_assert(offsetof(IProp_C_OffsetPosition, WantedSpawnTransform) == 0x000010, "Member 'IProp_C_OffsetPosition::WantedSpawnTransform' has a wrong offset!");
static_assert(offsetof(IProp_C_OffsetPosition, IgnoreActors) == 0x000070, "Member 'IProp_C_OffsetPosition::IgnoreActors' has a wrong offset!");
static_assert(offsetof(IProp_C_OffsetPosition, ValidTransform) == 0x000080, "Member 'IProp_C_OffsetPosition::ValidTransform' has a wrong offset!");
static_assert(offsetof(IProp_C_OffsetPosition, Transform) == 0x000090, "Member 'IProp_C_OffsetPosition::Transform' has a wrong offset!");

// Function IProp.IProp_C.SetControlledByWitch
// 0x0048 (0x0048 - 0x0000)
struct IProp_C_SetControlledByWitch final
{
public:
	class AB_PropPawnPhysics_C*                   Witch;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSRuntimePropData                      LastRuntimePropData;                               // 0x0008(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ForcedOutput;                                      // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IProp_C_SetControlledByWitch) == 0x000008, "Wrong alignment on IProp_C_SetControlledByWitch");
static_assert(sizeof(IProp_C_SetControlledByWitch) == 0x000048, "Wrong size on IProp_C_SetControlledByWitch");
static_assert(offsetof(IProp_C_SetControlledByWitch, Witch) == 0x000000, "Member 'IProp_C_SetControlledByWitch::Witch' has a wrong offset!");
static_assert(offsetof(IProp_C_SetControlledByWitch, LastRuntimePropData) == 0x000008, "Member 'IProp_C_SetControlledByWitch::LastRuntimePropData' has a wrong offset!");
static_assert(offsetof(IProp_C_SetControlledByWitch, ForcedOutput) == 0x000040, "Member 'IProp_C_SetControlledByWitch::ForcedOutput' has a wrong offset!");

// Function IProp.IProp_C.SetRuntimeSpeedMultiplier
// 0x0010 (0x0010 - 0x0000)
struct IProp_C_SetRuntimeSpeedMultiplier final
{
public:
	double                                        RuntimeSpeedMultiplier;                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ForcedBoolean;                                     // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IProp_C_SetRuntimeSpeedMultiplier) == 0x000008, "Wrong alignment on IProp_C_SetRuntimeSpeedMultiplier");
static_assert(sizeof(IProp_C_SetRuntimeSpeedMultiplier) == 0x000010, "Wrong size on IProp_C_SetRuntimeSpeedMultiplier");
static_assert(offsetof(IProp_C_SetRuntimeSpeedMultiplier, RuntimeSpeedMultiplier) == 0x000000, "Member 'IProp_C_SetRuntimeSpeedMultiplier::RuntimeSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(IProp_C_SetRuntimeSpeedMultiplier, ForcedBoolean) == 0x000008, "Member 'IProp_C_SetRuntimeSpeedMultiplier::ForcedBoolean' has a wrong offset!");

// Function IProp.IProp_C.SetWantedRotation
// 0x0020 (0x0020 - 0x0000)
struct IProp_C_SetWantedRotation final
{
public:
	struct FRotator                               WantedRotation;                                    // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ForcedBoolean;                                     // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IProp_C_SetWantedRotation) == 0x000008, "Wrong alignment on IProp_C_SetWantedRotation");
static_assert(sizeof(IProp_C_SetWantedRotation) == 0x000020, "Wrong size on IProp_C_SetWantedRotation");
static_assert(offsetof(IProp_C_SetWantedRotation, WantedRotation) == 0x000000, "Member 'IProp_C_SetWantedRotation::WantedRotation' has a wrong offset!");
static_assert(offsetof(IProp_C_SetWantedRotation, ForcedBoolean) == 0x000018, "Member 'IProp_C_SetWantedRotation::ForcedBoolean' has a wrong offset!");

// Function IProp.IProp_C.Stop
// 0x0028 (0x0028 - 0x0000)
struct IProp_C_Stop final
{
public:
	bool                                          Start;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               WantedRotation;                                    // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ForcedOutput;                                      // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IProp_C_Stop) == 0x000008, "Wrong alignment on IProp_C_Stop");
static_assert(sizeof(IProp_C_Stop) == 0x000028, "Wrong size on IProp_C_Stop");
static_assert(offsetof(IProp_C_Stop, Start) == 0x000000, "Member 'IProp_C_Stop::Start' has a wrong offset!");
static_assert(offsetof(IProp_C_Stop, WantedRotation) == 0x000008, "Member 'IProp_C_Stop::WantedRotation' has a wrong offset!");
static_assert(offsetof(IProp_C_Stop, ForcedOutput) == 0x000020, "Member 'IProp_C_Stop::ForcedOutput' has a wrong offset!");

}

