#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_MushroomArea

#include "Basic.hpp"

#include "B_MushroomArea_classes.hpp"
#include "B_MushroomArea_parameters.hpp"


namespace SDK
{

// Function B_MushroomArea.B_MushroomArea_C.BndEvt__B_MushroomArea_Sphere1_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void AB_MushroomArea_C::BndEvt__B_MushroomArea_Sphere1_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MushroomArea_C", "BndEvt__B_MushroomArea_Sphere1_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature");

	Params::B_MushroomArea_C_BndEvt__B_MushroomArea_Sphere1_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_MushroomArea.B_MushroomArea_C.ExecuteUbergraph_B_MushroomArea
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_MushroomArea_C::ExecuteUbergraph_B_MushroomArea(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MushroomArea_C", "ExecuteUbergraph_B_MushroomArea");

	Params::B_MushroomArea_C_ExecuteUbergraph_B_MushroomArea Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_MushroomArea.B_MushroomArea_C.GetConfuseDuration
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AB_MushroomArea_C::GetConfuseDuration()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MushroomArea_C", "GetConfuseDuration");

	Params::B_MushroomArea_C_GetConfuseDuration Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_MushroomArea.B_MushroomArea_C.GetCurrentSphereRadius
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AB_MushroomArea_C::GetCurrentSphereRadius()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MushroomArea_C", "GetCurrentSphereRadius");

	Params::B_MushroomArea_C_GetCurrentSphereRadius Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_MushroomArea.B_MushroomArea_C.HandleFade
// (Protected, BlueprintCallable, BlueprintEvent)

void AB_MushroomArea_C::HandleFade()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MushroomArea_C", "HandleFade");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_MushroomArea.B_MushroomArea_C.HandleOverlap
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_MushroomArea_C::HandleOverlap(class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MushroomArea_C", "HandleOverlap");

	Params::B_MushroomArea_C_HandleOverlap Parms{};

	Parms.OtherActor = OtherActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_MushroomArea.B_MushroomArea_C.InitializeRules
// (Public, BlueprintCallable, BlueprintEvent)

void AB_MushroomArea_C::InitializeRules()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MushroomArea_C", "InitializeRules");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_MushroomArea.B_MushroomArea_C.PlayDestroyEffectsMulticast
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_MushroomArea_C::PlayDestroyEffectsMulticast(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MushroomArea_C", "PlayDestroyEffectsMulticast");

	Params::B_MushroomArea_C_PlayDestroyEffectsMulticast Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_MushroomArea.B_MushroomArea_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AB_MushroomArea_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MushroomArea_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_MushroomArea.B_MushroomArea_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_MushroomArea_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MushroomArea_C", "ReceiveTick");

	Params::B_MushroomArea_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_MushroomArea.B_MushroomArea_C.SetNewValuesForTearUp
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       NewTransform_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           NewOwner_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            NewInstigator_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_MushroomArea_C::SetNewValuesForTearUp(const struct FTransform& NewTransform_0, class AActor* NewOwner_0, class APawn* NewInstigator_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MushroomArea_C", "SetNewValuesForTearUp");

	Params::B_MushroomArea_C_SetNewValuesForTearUp Parms{};

	Parms.NewTransform_0 = std::move(NewTransform_0);
	Parms.NewOwner_0 = NewOwner_0;
	Parms.NewInstigator_0 = NewInstigator_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_MushroomArea.B_MushroomArea_C.TearDown
// (Public, BlueprintCallable, BlueprintEvent)

void AB_MushroomArea_C::TearDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MushroomArea_C", "TearDown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_MushroomArea.B_MushroomArea_C.TearUp
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Owner_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            Instigator_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_MushroomArea_C::TearUp(const struct FTransform& SpawnTransform, class AActor* Owner_0, class APawn* Instigator_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MushroomArea_C", "TearUp");

	Params::B_MushroomArea_C_TearUp Parms{};

	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.Owner_0 = Owner_0;
	Parms.Instigator_0 = Instigator_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_MushroomArea.B_MushroomArea_C.TearUpBySize
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Size                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_MushroomArea_C::TearUpBySize(double Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MushroomArea_C", "TearUpBySize");

	Params::B_MushroomArea_C_TearUpBySize Parms{};

	Parms.Size = Size;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_MushroomArea.B_MushroomArea_C.TearUpPoolObject
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Owner_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            Instigator_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_MushroomArea_C::TearUpPoolObject(const struct FTransform& SpawnTransform, class AActor* Owner_0, class APawn* Instigator_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MushroomArea_C", "TearUpPoolObject");

	Params::B_MushroomArea_C_TearUpPoolObject Parms{};

	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.Owner_0 = Owner_0;
	Parms.Instigator_0 = Instigator_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_MushroomArea.B_MushroomArea_C.UpdateMushroom
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  NewSize                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_MushroomArea_C::UpdateMushroom(double NewSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MushroomArea_C", "UpdateMushroom");

	Params::B_MushroomArea_C_UpdateMushroom Parms{};

	Parms.NewSize = NewSize;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_MushroomArea.B_MushroomArea_C.UpdateMushroomMulticast
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  MushroomSize                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_MushroomArea_C::UpdateMushroomMulticast(double MushroomSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MushroomArea_C", "UpdateMushroomMulticast");

	Params::B_MushroomArea_C_UpdateMushroomMulticast Parms{};

	Parms.MushroomSize = MushroomSize;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_MushroomArea.B_MushroomArea_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AB_MushroomArea_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MushroomArea_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}

}

