#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Switch

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_Switch.BP_Switch_C.Action
// 0x0002 (0x0002 - 0x0000)
struct BP_Switch_C_Action final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Switch_C_Action) == 0x000001, "Wrong alignment on BP_Switch_C_Action");
static_assert(sizeof(BP_Switch_C_Action) == 0x000002, "Wrong size on BP_Switch_C_Action");
static_assert(offsetof(BP_Switch_C_Action, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'BP_Switch_C_Action::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_Action, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'BP_Switch_C_Action::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_Switch.BP_Switch_C.BindToMidGamePlayerJoin
// 0x0058 (0x0058 - 0x0000)
struct BP_Switch_C_BindToMidGamePlayerJoin final
{
public:
	TDelegate<void()>                             Event;                                             // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_CreativeGameState_C*                 K2Node_DynamicCast_AsB_Creative_Game_State;        // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameMode_C*                          K2Node_DynamicCast_AsB_Game_Mode;                  // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Switch_C_BindToMidGamePlayerJoin) == 0x000008, "Wrong alignment on BP_Switch_C_BindToMidGamePlayerJoin");
static_assert(sizeof(BP_Switch_C_BindToMidGamePlayerJoin) == 0x000058, "Wrong size on BP_Switch_C_BindToMidGamePlayerJoin");
static_assert(offsetof(BP_Switch_C_BindToMidGamePlayerJoin, Event) == 0x000000, "Member 'BP_Switch_C_BindToMidGamePlayerJoin::Event' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_BindToMidGamePlayerJoin, CallFunc_GetGameState_ReturnValue) == 0x000010, "Member 'BP_Switch_C_BindToMidGamePlayerJoin::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_BindToMidGamePlayerJoin, CallFunc_HasAuthority_ReturnValue) == 0x000018, "Member 'BP_Switch_C_BindToMidGamePlayerJoin::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_BindToMidGamePlayerJoin, K2Node_DynamicCast_AsB_Game_State) == 0x000020, "Member 'BP_Switch_C_BindToMidGamePlayerJoin::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_BindToMidGamePlayerJoin, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_Switch_C_BindToMidGamePlayerJoin::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_BindToMidGamePlayerJoin, K2Node_DynamicCast_AsB_Creative_Game_State) == 0x000030, "Member 'BP_Switch_C_BindToMidGamePlayerJoin::K2Node_DynamicCast_AsB_Creative_Game_State' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_BindToMidGamePlayerJoin, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'BP_Switch_C_BindToMidGamePlayerJoin::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_BindToMidGamePlayerJoin, CallFunc_GetGameMode_ReturnValue) == 0x000040, "Member 'BP_Switch_C_BindToMidGamePlayerJoin::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_BindToMidGamePlayerJoin, K2Node_DynamicCast_AsB_Game_Mode) == 0x000048, "Member 'BP_Switch_C_BindToMidGamePlayerJoin::K2Node_DynamicCast_AsB_Game_Mode' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_BindToMidGamePlayerJoin, K2Node_DynamicCast_bSuccess_2) == 0x000050, "Member 'BP_Switch_C_BindToMidGamePlayerJoin::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");

// Function BP_Switch.BP_Switch_C.BndEvt__BP_ToggleSwitch_CollisionBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x0118 (0x0118 - 0x0000)
struct BP_Switch_C_BndEvt__BP_ToggleSwitch_CollisionBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_Switch_C_BndEvt__BP_ToggleSwitch_CollisionBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_Switch_C_BndEvt__BP_ToggleSwitch_CollisionBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_Switch_C_BndEvt__BP_ToggleSwitch_CollisionBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000118, "Wrong size on BP_Switch_C_BndEvt__BP_ToggleSwitch_CollisionBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_Switch_C_BndEvt__BP_ToggleSwitch_CollisionBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_Switch_C_BndEvt__BP_ToggleSwitch_CollisionBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_BndEvt__BP_ToggleSwitch_CollisionBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_Switch_C_BndEvt__BP_ToggleSwitch_CollisionBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_BndEvt__BP_ToggleSwitch_CollisionBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_Switch_C_BndEvt__BP_ToggleSwitch_CollisionBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_BndEvt__BP_ToggleSwitch_CollisionBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_Switch_C_BndEvt__BP_ToggleSwitch_CollisionBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_BndEvt__BP_ToggleSwitch_CollisionBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'BP_Switch_C_BndEvt__BP_ToggleSwitch_CollisionBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_BndEvt__BP_ToggleSwitch_CollisionBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'BP_Switch_C_BndEvt__BP_ToggleSwitch_CollisionBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function BP_Switch.BP_Switch_C.DeleteInvalidTargetFromList
// 0x0020 (0x0020 - 0x0000)
struct BP_Switch_C_DeleteInvalidTargetFromList final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Switch_C_DeleteInvalidTargetFromList) == 0x000008, "Wrong alignment on BP_Switch_C_DeleteInvalidTargetFromList");
static_assert(sizeof(BP_Switch_C_DeleteInvalidTargetFromList) == 0x000020, "Wrong size on BP_Switch_C_DeleteInvalidTargetFromList");
static_assert(offsetof(BP_Switch_C_DeleteInvalidTargetFromList, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_Switch_C_DeleteInvalidTargetFromList::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_DeleteInvalidTargetFromList, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_Switch_C_DeleteInvalidTargetFromList::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_DeleteInvalidTargetFromList, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_Switch_C_DeleteInvalidTargetFromList::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_DeleteInvalidTargetFromList, CallFunc_Array_Length_ReturnValue) == 0x00000C, "Member 'BP_Switch_C_DeleteInvalidTargetFromList::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_DeleteInvalidTargetFromList, CallFunc_Array_Get_Item) == 0x000010, "Member 'BP_Switch_C_DeleteInvalidTargetFromList::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_DeleteInvalidTargetFromList, CallFunc_Less_IntInt_ReturnValue) == 0x000018, "Member 'BP_Switch_C_DeleteInvalidTargetFromList::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_DeleteInvalidTargetFromList, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'BP_Switch_C_DeleteInvalidTargetFromList::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_Switch.BP_Switch_C.ExecuteUbergraph_BP_Switch
// 0x0160 (0x0160 - 0x0000)
struct BP_Switch_C_ExecuteUbergraph_BP_Switch final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0028(0x00F8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_TestSwitchActivationCondition_Activate;   // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0128(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_Target;                         // 0x0130(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x0138(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_CreativeGameState_C*                 K2Node_DynamicCast_AsB_Creative_Game_State;        // 0x0148(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_151[0x3];                                      // 0x0151(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     CallFunc_GetMaterial_ReturnValue;                  // 0x0158(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Switch_C_ExecuteUbergraph_BP_Switch) == 0x000008, "Wrong alignment on BP_Switch_C_ExecuteUbergraph_BP_Switch");
static_assert(sizeof(BP_Switch_C_ExecuteUbergraph_BP_Switch) == 0x000160, "Wrong size on BP_Switch_C_ExecuteUbergraph_BP_Switch");
static_assert(offsetof(BP_Switch_C_ExecuteUbergraph_BP_Switch, EntryPoint) == 0x000000, "Member 'BP_Switch_C_ExecuteUbergraph_BP_Switch::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_ExecuteUbergraph_BP_Switch, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000008, "Member 'BP_Switch_C_ExecuteUbergraph_BP_Switch::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_ExecuteUbergraph_BP_Switch, K2Node_ComponentBoundEvent_OtherActor) == 0x000010, "Member 'BP_Switch_C_ExecuteUbergraph_BP_Switch::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_ExecuteUbergraph_BP_Switch, K2Node_ComponentBoundEvent_OtherComp) == 0x000018, "Member 'BP_Switch_C_ExecuteUbergraph_BP_Switch::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_ExecuteUbergraph_BP_Switch, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000020, "Member 'BP_Switch_C_ExecuteUbergraph_BP_Switch::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_ExecuteUbergraph_BP_Switch, K2Node_ComponentBoundEvent_bFromSweep) == 0x000024, "Member 'BP_Switch_C_ExecuteUbergraph_BP_Switch::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_ExecuteUbergraph_BP_Switch, K2Node_ComponentBoundEvent_SweepResult) == 0x000028, "Member 'BP_Switch_C_ExecuteUbergraph_BP_Switch::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_ExecuteUbergraph_BP_Switch, CallFunc_TestSwitchActivationCondition_Activate) == 0x000120, "Member 'BP_Switch_C_ExecuteUbergraph_BP_Switch::CallFunc_TestSwitchActivationCondition_Activate' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_ExecuteUbergraph_BP_Switch, CallFunc_GetGameState_ReturnValue) == 0x000128, "Member 'BP_Switch_C_ExecuteUbergraph_BP_Switch::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_ExecuteUbergraph_BP_Switch, K2Node_CustomEvent_Target) == 0x000130, "Member 'BP_Switch_C_ExecuteUbergraph_BP_Switch::K2Node_CustomEvent_Target' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_ExecuteUbergraph_BP_Switch, K2Node_DynamicCast_AsB_Game_State) == 0x000138, "Member 'BP_Switch_C_ExecuteUbergraph_BP_Switch::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_ExecuteUbergraph_BP_Switch, K2Node_DynamicCast_bSuccess) == 0x000140, "Member 'BP_Switch_C_ExecuteUbergraph_BP_Switch::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_ExecuteUbergraph_BP_Switch, K2Node_DynamicCast_AsB_Creative_Game_State) == 0x000148, "Member 'BP_Switch_C_ExecuteUbergraph_BP_Switch::K2Node_DynamicCast_AsB_Creative_Game_State' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_ExecuteUbergraph_BP_Switch, K2Node_DynamicCast_bSuccess_1) == 0x000150, "Member 'BP_Switch_C_ExecuteUbergraph_BP_Switch::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_ExecuteUbergraph_BP_Switch, K2Node_Event_DeltaSeconds) == 0x000154, "Member 'BP_Switch_C_ExecuteUbergraph_BP_Switch::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_ExecuteUbergraph_BP_Switch, CallFunc_GetMaterial_ReturnValue) == 0x000158, "Member 'BP_Switch_C_ExecuteUbergraph_BP_Switch::CallFunc_GetMaterial_ReturnValue' has a wrong offset!");

// Function BP_Switch.BP_Switch_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_Switch_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Switch_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_Switch_C_ReceiveTick");
static_assert(sizeof(BP_Switch_C_ReceiveTick) == 0x000004, "Wrong size on BP_Switch_C_ReceiveTick");
static_assert(offsetof(BP_Switch_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_Switch_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_Switch.BP_Switch_C.ResetSwitchTargetSleep
// 0x0058 (0x0058 - 0x0000)
struct BP_Switch_C_ResetSwitchTargetSleep final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_StaticMeshActionProp_C*              TargetProp;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 DefaultActor;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          AlwaysRelevant;                                    // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Replicates;                                        // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_StaticMeshActionProp_C*              K2Node_DynamicCast_AsB_Static_Mesh_Action_Prop;    // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_GetDefaultObject_ReturnValue;             // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_DynamicCast_AsActor;                        // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_ActionActorSubsystem_C*              CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Switch_C_ResetSwitchTargetSleep) == 0x000008, "Wrong alignment on BP_Switch_C_ResetSwitchTargetSleep");
static_assert(sizeof(BP_Switch_C_ResetSwitchTargetSleep) == 0x000058, "Wrong size on BP_Switch_C_ResetSwitchTargetSleep");
static_assert(offsetof(BP_Switch_C_ResetSwitchTargetSleep, Target) == 0x000000, "Member 'BP_Switch_C_ResetSwitchTargetSleep::Target' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_ResetSwitchTargetSleep, TargetProp) == 0x000008, "Member 'BP_Switch_C_ResetSwitchTargetSleep::TargetProp' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_ResetSwitchTargetSleep, DefaultActor) == 0x000010, "Member 'BP_Switch_C_ResetSwitchTargetSleep::DefaultActor' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_ResetSwitchTargetSleep, AlwaysRelevant) == 0x000018, "Member 'BP_Switch_C_ResetSwitchTargetSleep::AlwaysRelevant' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_ResetSwitchTargetSleep, Replicates) == 0x000019, "Member 'BP_Switch_C_ResetSwitchTargetSleep::Replicates' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_ResetSwitchTargetSleep, K2Node_DynamicCast_AsB_Static_Mesh_Action_Prop) == 0x000020, "Member 'BP_Switch_C_ResetSwitchTargetSleep::K2Node_DynamicCast_AsB_Static_Mesh_Action_Prop' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_ResetSwitchTargetSleep, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_Switch_C_ResetSwitchTargetSleep::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_ResetSwitchTargetSleep, CallFunc_GetObjectClass_ReturnValue) == 0x000030, "Member 'BP_Switch_C_ResetSwitchTargetSleep::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_ResetSwitchTargetSleep, CallFunc_GetDefaultObject_ReturnValue) == 0x000038, "Member 'BP_Switch_C_ResetSwitchTargetSleep::CallFunc_GetDefaultObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_ResetSwitchTargetSleep, K2Node_DynamicCast_AsActor) == 0x000040, "Member 'BP_Switch_C_ResetSwitchTargetSleep::K2Node_DynamicCast_AsActor' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_ResetSwitchTargetSleep, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'BP_Switch_C_ResetSwitchTargetSleep::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_ResetSwitchTargetSleep, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x000050, "Member 'BP_Switch_C_ResetSwitchTargetSleep::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");

// Function BP_Switch.BP_Switch_C.ResetSwitchTargetSleepDelayed
// 0x0008 (0x0008 - 0x0000)
struct BP_Switch_C_ResetSwitchTargetSleepDelayed final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Switch_C_ResetSwitchTargetSleepDelayed) == 0x000008, "Wrong alignment on BP_Switch_C_ResetSwitchTargetSleepDelayed");
static_assert(sizeof(BP_Switch_C_ResetSwitchTargetSleepDelayed) == 0x000008, "Wrong size on BP_Switch_C_ResetSwitchTargetSleepDelayed");
static_assert(offsetof(BP_Switch_C_ResetSwitchTargetSleepDelayed, Target) == 0x000000, "Member 'BP_Switch_C_ResetSwitchTargetSleepDelayed::Target' has a wrong offset!");

// Function BP_Switch.BP_Switch_C.TestSwitchActivationCondition
// 0x0030 (0x0030 - 0x0000)
struct BP_Switch_C_TestSwitchActivationCondition final
{
public:
	class AActor*                                 OverlappingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Activate;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ConditionFulfilled;                                // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_Witch_C*                             K2Node_DynamicCast_AsB_Witch;                      // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_Hunter_C*                            K2Node_DynamicCast_AsB_Hunter;                     // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Switch_C_TestSwitchActivationCondition) == 0x000008, "Wrong alignment on BP_Switch_C_TestSwitchActivationCondition");
static_assert(sizeof(BP_Switch_C_TestSwitchActivationCondition) == 0x000030, "Wrong size on BP_Switch_C_TestSwitchActivationCondition");
static_assert(offsetof(BP_Switch_C_TestSwitchActivationCondition, OverlappingActor) == 0x000000, "Member 'BP_Switch_C_TestSwitchActivationCondition::OverlappingActor' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_TestSwitchActivationCondition, Activate) == 0x000008, "Member 'BP_Switch_C_TestSwitchActivationCondition::Activate' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_TestSwitchActivationCondition, ConditionFulfilled) == 0x000009, "Member 'BP_Switch_C_TestSwitchActivationCondition::ConditionFulfilled' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_TestSwitchActivationCondition, CallFunc_Not_PreBool_ReturnValue) == 0x00000A, "Member 'BP_Switch_C_TestSwitchActivationCondition::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_TestSwitchActivationCondition, K2Node_DynamicCast_AsB_Witch) == 0x000010, "Member 'BP_Switch_C_TestSwitchActivationCondition::K2Node_DynamicCast_AsB_Witch' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_TestSwitchActivationCondition, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_Switch_C_TestSwitchActivationCondition::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_TestSwitchActivationCondition, K2Node_DynamicCast_AsB_Hunter) == 0x000020, "Member 'BP_Switch_C_TestSwitchActivationCondition::K2Node_DynamicCast_AsB_Hunter' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_TestSwitchActivationCondition, K2Node_DynamicCast_bSuccess_1) == 0x000028, "Member 'BP_Switch_C_TestSwitchActivationCondition::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function BP_Switch.BP_Switch_C.UpdateActionPlacable
// 0x0020 (0x0020 - 0x0000)
struct BP_Switch_C_UpdateActionPlacable final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class ABP_ActionPlacable_C*                   Utility;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AB_StaticMeshActionProp_C*              Prop;                                              // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Switch_C_UpdateActionPlacable) == 0x000008, "Wrong alignment on BP_Switch_C_UpdateActionPlacable");
static_assert(sizeof(BP_Switch_C_UpdateActionPlacable) == 0x000020, "Wrong size on BP_Switch_C_UpdateActionPlacable");
static_assert(offsetof(BP_Switch_C_UpdateActionPlacable, Target) == 0x000000, "Member 'BP_Switch_C_UpdateActionPlacable::Target' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_UpdateActionPlacable, Utility) == 0x000008, "Member 'BP_Switch_C_UpdateActionPlacable::Utility' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_UpdateActionPlacable, Prop) == 0x000010, "Member 'BP_Switch_C_UpdateActionPlacable::Prop' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_UpdateActionPlacable, CallFunc_HasAuthority_ReturnValue) == 0x000018, "Member 'BP_Switch_C_UpdateActionPlacable::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");

// Function BP_Switch.BP_Switch_C.WakeSwitchTargetsTemporarily
// 0x0068 (0x0068 - 0x0000)
struct BP_Switch_C_WakeSwitchTargetsTemporarily final
{
public:
	bool                                          ActivateTargets;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_ActionActorSubsystem_C*              CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ActionPlacable_C*                   K2Node_DynamicCast_AsBP_Action_Placable;           // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_StaticMeshActionProp_C*              K2Node_DynamicCast_AsB_Static_Mesh_Action_Prop;    // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Action_ForcedBoolean;                     // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUsingPropReplicationOptimization_ReturnValue; // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUsingPropReplicationOptimization_ReturnValue_1; // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_56[0x2];                                       // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Switch_C_WakeSwitchTargetsTemporarily) == 0x000008, "Wrong alignment on BP_Switch_C_WakeSwitchTargetsTemporarily");
static_assert(sizeof(BP_Switch_C_WakeSwitchTargetsTemporarily) == 0x000068, "Wrong size on BP_Switch_C_WakeSwitchTargetsTemporarily");
static_assert(offsetof(BP_Switch_C_WakeSwitchTargetsTemporarily, ActivateTargets) == 0x000000, "Member 'BP_Switch_C_WakeSwitchTargetsTemporarily::ActivateTargets' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_WakeSwitchTargetsTemporarily, Target) == 0x000008, "Member 'BP_Switch_C_WakeSwitchTargetsTemporarily::Target' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_WakeSwitchTargetsTemporarily, Temp_int_Array_Index_Variable) == 0x000010, "Member 'BP_Switch_C_WakeSwitchTargetsTemporarily::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_WakeSwitchTargetsTemporarily, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x000018, "Member 'BP_Switch_C_WakeSwitchTargetsTemporarily::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_WakeSwitchTargetsTemporarily, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'BP_Switch_C_WakeSwitchTargetsTemporarily::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_WakeSwitchTargetsTemporarily, K2Node_DynamicCast_AsBP_Action_Placable) == 0x000028, "Member 'BP_Switch_C_WakeSwitchTargetsTemporarily::K2Node_DynamicCast_AsBP_Action_Placable' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_WakeSwitchTargetsTemporarily, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_Switch_C_WakeSwitchTargetsTemporarily::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_WakeSwitchTargetsTemporarily, K2Node_DynamicCast_AsB_Static_Mesh_Action_Prop) == 0x000038, "Member 'BP_Switch_C_WakeSwitchTargetsTemporarily::K2Node_DynamicCast_AsB_Static_Mesh_Action_Prop' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_WakeSwitchTargetsTemporarily, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'BP_Switch_C_WakeSwitchTargetsTemporarily::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_WakeSwitchTargetsTemporarily, CallFunc_Action_ForcedBoolean) == 0x000041, "Member 'BP_Switch_C_WakeSwitchTargetsTemporarily::CallFunc_Action_ForcedBoolean' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_WakeSwitchTargetsTemporarily, CallFunc_Array_Get_Item) == 0x000048, "Member 'BP_Switch_C_WakeSwitchTargetsTemporarily::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_WakeSwitchTargetsTemporarily, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'BP_Switch_C_WakeSwitchTargetsTemporarily::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_WakeSwitchTargetsTemporarily, CallFunc_IsUsingPropReplicationOptimization_ReturnValue) == 0x000054, "Member 'BP_Switch_C_WakeSwitchTargetsTemporarily::CallFunc_IsUsingPropReplicationOptimization_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_WakeSwitchTargetsTemporarily, CallFunc_IsUsingPropReplicationOptimization_ReturnValue_1) == 0x000055, "Member 'BP_Switch_C_WakeSwitchTargetsTemporarily::CallFunc_IsUsingPropReplicationOptimization_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_WakeSwitchTargetsTemporarily, Temp_int_Loop_Counter_Variable) == 0x000058, "Member 'BP_Switch_C_WakeSwitchTargetsTemporarily::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_WakeSwitchTargetsTemporarily, CallFunc_Less_IntInt_ReturnValue) == 0x00005C, "Member 'BP_Switch_C_WakeSwitchTargetsTemporarily::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Switch_C_WakeSwitchTargetsTemporarily, CallFunc_Add_IntInt_ReturnValue) == 0x000060, "Member 'BP_Switch_C_WakeSwitchTargetsTemporarily::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

}

