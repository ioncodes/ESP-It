#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MasterServerPlugin

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "MasterServerPlugin_structs.hpp"
#include "Engine_structs.hpp"
#include "OnlineSubsystemUtils_structs.hpp"


namespace SDK::Params
{

// Function MasterServerPlugin.BaseUserBehaviorTrackingManager.BPTick
// 0x0004 (0x0004 - 0x0000)
struct BaseUserBehaviorTrackingManager_BPTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseUserBehaviorTrackingManager_BPTick) == 0x000004, "Wrong alignment on BaseUserBehaviorTrackingManager_BPTick");
static_assert(sizeof(BaseUserBehaviorTrackingManager_BPTick) == 0x000004, "Wrong size on BaseUserBehaviorTrackingManager_BPTick");
static_assert(offsetof(BaseUserBehaviorTrackingManager_BPTick, DeltaTime) == 0x000000, "Member 'BaseUserBehaviorTrackingManager_BPTick::DeltaTime' has a wrong offset!");

// Function MasterServerPlugin.GetAllWorkshopMapDetailsProxy.GetAllWorkshopMapDetails
// 0x0010 (0x0010 - 0x0000)
struct GetAllWorkshopMapDetailsProxy_GetAllWorkshopMapDetails final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGetAllWorkshopMapDetailsProxy*         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GetAllWorkshopMapDetailsProxy_GetAllWorkshopMapDetails) == 0x000008, "Wrong alignment on GetAllWorkshopMapDetailsProxy_GetAllWorkshopMapDetails");
static_assert(sizeof(GetAllWorkshopMapDetailsProxy_GetAllWorkshopMapDetails) == 0x000010, "Wrong size on GetAllWorkshopMapDetailsProxy_GetAllWorkshopMapDetails");
static_assert(offsetof(GetAllWorkshopMapDetailsProxy_GetAllWorkshopMapDetails, WorldContextObject) == 0x000000, "Member 'GetAllWorkshopMapDetailsProxy_GetAllWorkshopMapDetails::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GetAllWorkshopMapDetailsProxy_GetAllWorkshopMapDetails, ReturnValue) == 0x000008, "Member 'GetAllWorkshopMapDetailsProxy_GetAllWorkshopMapDetails::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.DownloadWorkshopMapProxy.DownloadWorkshopMap
// 0x0018 (0x0018 - 0x0000)
struct DownloadWorkshopMapProxy_DownloadWorkshopMap final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         WorkshopID;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDownloadWorkshopMapProxy*              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloadWorkshopMapProxy_DownloadWorkshopMap) == 0x000008, "Wrong alignment on DownloadWorkshopMapProxy_DownloadWorkshopMap");
static_assert(sizeof(DownloadWorkshopMapProxy_DownloadWorkshopMap) == 0x000018, "Wrong size on DownloadWorkshopMapProxy_DownloadWorkshopMap");
static_assert(offsetof(DownloadWorkshopMapProxy_DownloadWorkshopMap, WorldContextObject) == 0x000000, "Member 'DownloadWorkshopMapProxy_DownloadWorkshopMap::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DownloadWorkshopMapProxy_DownloadWorkshopMap, WorkshopID) == 0x000008, "Member 'DownloadWorkshopMapProxy_DownloadWorkshopMap::WorkshopID' has a wrong offset!");
static_assert(offsetof(DownloadWorkshopMapProxy_DownloadWorkshopMap, ReturnValue) == 0x000010, "Member 'DownloadWorkshopMapProxy_DownloadWorkshopMap::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.DeleteWorkshopMapProxy.DeleteWorkshopMap
// 0x0018 (0x0018 - 0x0000)
struct DeleteWorkshopMapProxy_DeleteWorkshopMap final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         WorkshopID;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDeleteWorkshopMapProxy*                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeleteWorkshopMapProxy_DeleteWorkshopMap) == 0x000008, "Wrong alignment on DeleteWorkshopMapProxy_DeleteWorkshopMap");
static_assert(sizeof(DeleteWorkshopMapProxy_DeleteWorkshopMap) == 0x000018, "Wrong size on DeleteWorkshopMapProxy_DeleteWorkshopMap");
static_assert(offsetof(DeleteWorkshopMapProxy_DeleteWorkshopMap, WorldContextObject) == 0x000000, "Member 'DeleteWorkshopMapProxy_DeleteWorkshopMap::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DeleteWorkshopMapProxy_DeleteWorkshopMap, WorkshopID) == 0x000008, "Member 'DeleteWorkshopMapProxy_DeleteWorkshopMap::WorkshopID' has a wrong offset!");
static_assert(offsetof(DeleteWorkshopMapProxy_DeleteWorkshopMap, ReturnValue) == 0x000010, "Member 'DeleteWorkshopMapProxy_DeleteWorkshopMap::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.UploadWorkshopMapProxy.UpdateWorkshopMap
// 0x00C8 (0x00C8 - 0x0000)
struct UploadWorkshopMapProxy_UpdateWorkshopMap final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCreativeWorkshopMapLayout             MapLayout;                                         // 0x0008(0x00B8)(Parm, NativeAccessSpecifierPublic)
	class UUploadWorkshopMapProxy*                ReturnValue;                                       // 0x00C0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UploadWorkshopMapProxy_UpdateWorkshopMap) == 0x000008, "Wrong alignment on UploadWorkshopMapProxy_UpdateWorkshopMap");
static_assert(sizeof(UploadWorkshopMapProxy_UpdateWorkshopMap) == 0x0000C8, "Wrong size on UploadWorkshopMapProxy_UpdateWorkshopMap");
static_assert(offsetof(UploadWorkshopMapProxy_UpdateWorkshopMap, WorldContextObject) == 0x000000, "Member 'UploadWorkshopMapProxy_UpdateWorkshopMap::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UploadWorkshopMapProxy_UpdateWorkshopMap, MapLayout) == 0x000008, "Member 'UploadWorkshopMapProxy_UpdateWorkshopMap::MapLayout' has a wrong offset!");
static_assert(offsetof(UploadWorkshopMapProxy_UpdateWorkshopMap, ReturnValue) == 0x0000C0, "Member 'UploadWorkshopMapProxy_UpdateWorkshopMap::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.UploadWorkshopMapProxy.UploadNewWorkshopMap
// 0x00C8 (0x00C8 - 0x0000)
struct UploadWorkshopMapProxy_UploadNewWorkshopMap final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCreativeWorkshopMapLayout             MapLayout;                                         // 0x0008(0x00B8)(Parm, NativeAccessSpecifierPublic)
	class UUploadWorkshopMapProxy*                ReturnValue;                                       // 0x00C0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UploadWorkshopMapProxy_UploadNewWorkshopMap) == 0x000008, "Wrong alignment on UploadWorkshopMapProxy_UploadNewWorkshopMap");
static_assert(sizeof(UploadWorkshopMapProxy_UploadNewWorkshopMap) == 0x0000C8, "Wrong size on UploadWorkshopMapProxy_UploadNewWorkshopMap");
static_assert(offsetof(UploadWorkshopMapProxy_UploadNewWorkshopMap, WorldContextObject) == 0x000000, "Member 'UploadWorkshopMapProxy_UploadNewWorkshopMap::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UploadWorkshopMapProxy_UploadNewWorkshopMap, MapLayout) == 0x000008, "Member 'UploadWorkshopMapProxy_UploadNewWorkshopMap::MapLayout' has a wrong offset!");
static_assert(offsetof(UploadWorkshopMapProxy_UploadNewWorkshopMap, ReturnValue) == 0x0000C0, "Member 'UploadWorkshopMapProxy_UploadNewWorkshopMap::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.SubmitMapRatingProxy.SubmitMapRating
// 0x0020 (0x0020 - 0x0000)
struct SubmitMapRatingProxy_SubmitMapRating final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         WorkshopID;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rating;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USubmitMapRatingProxy*                  ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SubmitMapRatingProxy_SubmitMapRating) == 0x000008, "Wrong alignment on SubmitMapRatingProxy_SubmitMapRating");
static_assert(sizeof(SubmitMapRatingProxy_SubmitMapRating) == 0x000020, "Wrong size on SubmitMapRatingProxy_SubmitMapRating");
static_assert(offsetof(SubmitMapRatingProxy_SubmitMapRating, WorldContextObject) == 0x000000, "Member 'SubmitMapRatingProxy_SubmitMapRating::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SubmitMapRatingProxy_SubmitMapRating, WorkshopID) == 0x000008, "Member 'SubmitMapRatingProxy_SubmitMapRating::WorkshopID' has a wrong offset!");
static_assert(offsetof(SubmitMapRatingProxy_SubmitMapRating, Rating) == 0x000010, "Member 'SubmitMapRatingProxy_SubmitMapRating::Rating' has a wrong offset!");
static_assert(offsetof(SubmitMapRatingProxy_SubmitMapRating, ReturnValue) == 0x000018, "Member 'SubmitMapRatingProxy_SubmitMapRating::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.GrantItemsCallbackProxy.GrantItems
// 0x0038 (0x0038 - 0x0000)
struct GrantItemsCallbackProxy_GrantItems final
{
public:
	class UObject*                                WorldContextObject_0;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AccountId;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ItemDefIds_0;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bNotify;                                           // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDrop;                                           // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsExtraItem;                                      // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           PlayerState_0;                                     // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGrantItemsCallbackProxy*               ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GrantItemsCallbackProxy_GrantItems) == 0x000008, "Wrong alignment on GrantItemsCallbackProxy_GrantItems");
static_assert(sizeof(GrantItemsCallbackProxy_GrantItems) == 0x000038, "Wrong size on GrantItemsCallbackProxy_GrantItems");
static_assert(offsetof(GrantItemsCallbackProxy_GrantItems, WorldContextObject_0) == 0x000000, "Member 'GrantItemsCallbackProxy_GrantItems::WorldContextObject_0' has a wrong offset!");
static_assert(offsetof(GrantItemsCallbackProxy_GrantItems, AccountId) == 0x000008, "Member 'GrantItemsCallbackProxy_GrantItems::AccountId' has a wrong offset!");
static_assert(offsetof(GrantItemsCallbackProxy_GrantItems, ItemDefIds_0) == 0x000010, "Member 'GrantItemsCallbackProxy_GrantItems::ItemDefIds_0' has a wrong offset!");
static_assert(offsetof(GrantItemsCallbackProxy_GrantItems, bNotify) == 0x000020, "Member 'GrantItemsCallbackProxy_GrantItems::bNotify' has a wrong offset!");
static_assert(offsetof(GrantItemsCallbackProxy_GrantItems, bIsDrop) == 0x000021, "Member 'GrantItemsCallbackProxy_GrantItems::bIsDrop' has a wrong offset!");
static_assert(offsetof(GrantItemsCallbackProxy_GrantItems, bIsExtraItem) == 0x000022, "Member 'GrantItemsCallbackProxy_GrantItems::bIsExtraItem' has a wrong offset!");
static_assert(offsetof(GrantItemsCallbackProxy_GrantItems, PlayerState_0) == 0x000028, "Member 'GrantItemsCallbackProxy_GrantItems::PlayerState_0' has a wrong offset!");
static_assert(offsetof(GrantItemsCallbackProxy_GrantItems, ReturnValue) == 0x000030, "Member 'GrantItemsCallbackProxy_GrantItems::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.GrantItemsCallbackProxy.GrantItemsResponse
// 0x0008 (0x0008 - 0x0000)
struct GrantItemsCallbackProxy_GrantItemsResponse final
{
public:
	class UVaRestRequestJSON*                     Request;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GrantItemsCallbackProxy_GrantItemsResponse) == 0x000008, "Wrong alignment on GrantItemsCallbackProxy_GrantItemsResponse");
static_assert(sizeof(GrantItemsCallbackProxy_GrantItemsResponse) == 0x000008, "Wrong size on GrantItemsCallbackProxy_GrantItemsResponse");
static_assert(offsetof(GrantItemsCallbackProxy_GrantItemsResponse, Request) == 0x000000, "Member 'GrantItemsCallbackProxy_GrantItemsResponse::Request' has a wrong offset!");

// Function MasterServerPlugin.InstanceManagerConnSubsystem.Connect
// 0x0018 (0x0018 - 0x0000)
struct InstanceManagerConnSubsystem_Connect final
{
public:
	int32                                         InA;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InB;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InC;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InD;                                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InstanceManagerConnSubsystem_Connect) == 0x000004, "Wrong alignment on InstanceManagerConnSubsystem_Connect");
static_assert(sizeof(InstanceManagerConnSubsystem_Connect) == 0x000018, "Wrong size on InstanceManagerConnSubsystem_Connect");
static_assert(offsetof(InstanceManagerConnSubsystem_Connect, InA) == 0x000000, "Member 'InstanceManagerConnSubsystem_Connect::InA' has a wrong offset!");
static_assert(offsetof(InstanceManagerConnSubsystem_Connect, InB) == 0x000004, "Member 'InstanceManagerConnSubsystem_Connect::InB' has a wrong offset!");
static_assert(offsetof(InstanceManagerConnSubsystem_Connect, InC) == 0x000008, "Member 'InstanceManagerConnSubsystem_Connect::InC' has a wrong offset!");
static_assert(offsetof(InstanceManagerConnSubsystem_Connect, InD) == 0x00000C, "Member 'InstanceManagerConnSubsystem_Connect::InD' has a wrong offset!");
static_assert(offsetof(InstanceManagerConnSubsystem_Connect, Port) == 0x000010, "Member 'InstanceManagerConnSubsystem_Connect::Port' has a wrong offset!");
static_assert(offsetof(InstanceManagerConnSubsystem_Connect, ReturnValue) == 0x000014, "Member 'InstanceManagerConnSubsystem_Connect::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.InstanceManagerConnSubsystem.ConnectHost
// 0x0018 (0x0018 - 0x0000)
struct InstanceManagerConnSubsystem_ConnectHost final
{
public:
	class FString                                 HostName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InstanceManagerConnSubsystem_ConnectHost) == 0x000008, "Wrong alignment on InstanceManagerConnSubsystem_ConnectHost");
static_assert(sizeof(InstanceManagerConnSubsystem_ConnectHost) == 0x000018, "Wrong size on InstanceManagerConnSubsystem_ConnectHost");
static_assert(offsetof(InstanceManagerConnSubsystem_ConnectHost, HostName) == 0x000000, "Member 'InstanceManagerConnSubsystem_ConnectHost::HostName' has a wrong offset!");
static_assert(offsetof(InstanceManagerConnSubsystem_ConnectHost, Port) == 0x000010, "Member 'InstanceManagerConnSubsystem_ConnectHost::Port' has a wrong offset!");
static_assert(offsetof(InstanceManagerConnSubsystem_ConnectHost, ReturnValue) == 0x000014, "Member 'InstanceManagerConnSubsystem_ConnectHost::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.InstanceManagerConnSubsystem.Disconnect
// 0x0001 (0x0001 - 0x0000)
struct InstanceManagerConnSubsystem_Disconnect final
{
public:
	bool                                          AutomaticReconnectWhenKeepAlive;                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InstanceManagerConnSubsystem_Disconnect) == 0x000001, "Wrong alignment on InstanceManagerConnSubsystem_Disconnect");
static_assert(sizeof(InstanceManagerConnSubsystem_Disconnect) == 0x000001, "Wrong size on InstanceManagerConnSubsystem_Disconnect");
static_assert(offsetof(InstanceManagerConnSubsystem_Disconnect, AutomaticReconnectWhenKeepAlive) == 0x000000, "Member 'InstanceManagerConnSubsystem_Disconnect::AutomaticReconnectWhenKeepAlive' has a wrong offset!");

// Function MasterServerPlugin.InstanceManagerConnSubsystem.SendEmptyPacket
// 0x0002 (0x0002 - 0x0000)
struct InstanceManagerConnSubsystem_SendEmptyPacket final
{
public:
	EInstanceMgrPacketType                        PacketType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InstanceManagerConnSubsystem_SendEmptyPacket) == 0x000001, "Wrong alignment on InstanceManagerConnSubsystem_SendEmptyPacket");
static_assert(sizeof(InstanceManagerConnSubsystem_SendEmptyPacket) == 0x000002, "Wrong size on InstanceManagerConnSubsystem_SendEmptyPacket");
static_assert(offsetof(InstanceManagerConnSubsystem_SendEmptyPacket, PacketType) == 0x000000, "Member 'InstanceManagerConnSubsystem_SendEmptyPacket::PacketType' has a wrong offset!");
static_assert(offsetof(InstanceManagerConnSubsystem_SendEmptyPacket, ReturnValue) == 0x000001, "Member 'InstanceManagerConnSubsystem_SendEmptyPacket::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.InstanceManagerConnSubsystem.SendPacket
// 0x0020 (0x0020 - 0x0000)
struct InstanceManagerConnSubsystem_SendPacket final
{
public:
	EInstanceMgrPacketType                        PacketType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Payload;                                           // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InstanceManagerConnSubsystem_SendPacket) == 0x000008, "Wrong alignment on InstanceManagerConnSubsystem_SendPacket");
static_assert(sizeof(InstanceManagerConnSubsystem_SendPacket) == 0x000020, "Wrong size on InstanceManagerConnSubsystem_SendPacket");
static_assert(offsetof(InstanceManagerConnSubsystem_SendPacket, PacketType) == 0x000000, "Member 'InstanceManagerConnSubsystem_SendPacket::PacketType' has a wrong offset!");
static_assert(offsetof(InstanceManagerConnSubsystem_SendPacket, Payload) == 0x000008, "Member 'InstanceManagerConnSubsystem_SendPacket::Payload' has a wrong offset!");
static_assert(offsetof(InstanceManagerConnSubsystem_SendPacket, ReturnValue) == 0x000018, "Member 'InstanceManagerConnSubsystem_SendPacket::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.InstanceManagerConnSubsystem.IsConnected
// 0x0001 (0x0001 - 0x0000)
struct InstanceManagerConnSubsystem_IsConnected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InstanceManagerConnSubsystem_IsConnected) == 0x000001, "Wrong alignment on InstanceManagerConnSubsystem_IsConnected");
static_assert(sizeof(InstanceManagerConnSubsystem_IsConnected) == 0x000001, "Wrong size on InstanceManagerConnSubsystem_IsConnected");
static_assert(offsetof(InstanceManagerConnSubsystem_IsConnected, ReturnValue) == 0x000000, "Member 'InstanceManagerConnSubsystem_IsConnected::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.InstanceManagerConnSubsystem.IsTearingDown
// 0x0001 (0x0001 - 0x0000)
struct InstanceManagerConnSubsystem_IsTearingDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InstanceManagerConnSubsystem_IsTearingDown) == 0x000001, "Wrong alignment on InstanceManagerConnSubsystem_IsTearingDown");
static_assert(sizeof(InstanceManagerConnSubsystem_IsTearingDown) == 0x000001, "Wrong size on InstanceManagerConnSubsystem_IsTearingDown");
static_assert(offsetof(InstanceManagerConnSubsystem_IsTearingDown, ReturnValue) == 0x000000, "Member 'InstanceManagerConnSubsystem_IsTearingDown::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.InstanceManagerConnSubsystem.SendData
// 0x0018 (0x0018 - 0x0000)
struct InstanceManagerConnSubsystem_SendData final
{
public:
	TArray<uint8>                                 Data;                                              // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InstanceManagerConnSubsystem_SendData) == 0x000008, "Wrong alignment on InstanceManagerConnSubsystem_SendData");
static_assert(sizeof(InstanceManagerConnSubsystem_SendData) == 0x000018, "Wrong size on InstanceManagerConnSubsystem_SendData");
static_assert(offsetof(InstanceManagerConnSubsystem_SendData, Data) == 0x000000, "Member 'InstanceManagerConnSubsystem_SendData::Data' has a wrong offset!");
static_assert(offsetof(InstanceManagerConnSubsystem_SendData, ReturnValue) == 0x000010, "Member 'InstanceManagerConnSubsystem_SendData::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.InventorySubsystem.AddAddedItem
// 0x0028 (0x0028 - 0x0000)
struct InventorySubsystem_AddAddedItem final
{
public:
	EItemChangeReason                             Reason;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlueprintOnlineItem                   Item;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Payload;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventorySubsystem_AddAddedItem) == 0x000008, "Wrong alignment on InventorySubsystem_AddAddedItem");
static_assert(sizeof(InventorySubsystem_AddAddedItem) == 0x000028, "Wrong size on InventorySubsystem_AddAddedItem");
static_assert(offsetof(InventorySubsystem_AddAddedItem, Reason) == 0x000000, "Member 'InventorySubsystem_AddAddedItem::Reason' has a wrong offset!");
static_assert(offsetof(InventorySubsystem_AddAddedItem, Item) == 0x000008, "Member 'InventorySubsystem_AddAddedItem::Item' has a wrong offset!");
static_assert(offsetof(InventorySubsystem_AddAddedItem, Payload) == 0x000018, "Member 'InventorySubsystem_AddAddedItem::Payload' has a wrong offset!");

// Function MasterServerPlugin.InventorySubsystem.GetItemProperty
// 0x0020 (0x0020 - 0x0000)
struct InventorySubsystem_GetItemProperty final
{
public:
	int32                                         DefinitionId;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventorySubsystem_GetItemProperty) == 0x000008, "Wrong alignment on InventorySubsystem_GetItemProperty");
static_assert(sizeof(InventorySubsystem_GetItemProperty) == 0x000020, "Wrong size on InventorySubsystem_GetItemProperty");
static_assert(offsetof(InventorySubsystem_GetItemProperty, DefinitionId) == 0x000000, "Member 'InventorySubsystem_GetItemProperty::DefinitionId' has a wrong offset!");
static_assert(offsetof(InventorySubsystem_GetItemProperty, PropertyName) == 0x000004, "Member 'InventorySubsystem_GetItemProperty::PropertyName' has a wrong offset!");
static_assert(offsetof(InventorySubsystem_GetItemProperty, ReturnValue) == 0x000010, "Member 'InventorySubsystem_GetItemProperty::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.InventorySubsystem.GrantItems
// 0x0030 (0x0030 - 0x0000)
struct InventorySubsystem_GrantItems final
{
public:
	int32                                         TargetAccountId;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ItemDefIds;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 StackSizes;                                        // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsCauldronDrop;                                   // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventorySubsystem_GrantItems) == 0x000008, "Wrong alignment on InventorySubsystem_GrantItems");
static_assert(sizeof(InventorySubsystem_GrantItems) == 0x000030, "Wrong size on InventorySubsystem_GrantItems");
static_assert(offsetof(InventorySubsystem_GrantItems, TargetAccountId) == 0x000000, "Member 'InventorySubsystem_GrantItems::TargetAccountId' has a wrong offset!");
static_assert(offsetof(InventorySubsystem_GrantItems, ItemDefIds) == 0x000008, "Member 'InventorySubsystem_GrantItems::ItemDefIds' has a wrong offset!");
static_assert(offsetof(InventorySubsystem_GrantItems, StackSizes) == 0x000018, "Member 'InventorySubsystem_GrantItems::StackSizes' has a wrong offset!");
static_assert(offsetof(InventorySubsystem_GrantItems, bIsCauldronDrop) == 0x000028, "Member 'InventorySubsystem_GrantItems::bIsCauldronDrop' has a wrong offset!");

// Function MasterServerPlugin.InventorySubsystem.LoadItemDefinitions
// 0x0001 (0x0001 - 0x0000)
struct InventorySubsystem_LoadItemDefinitions final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventorySubsystem_LoadItemDefinitions) == 0x000001, "Wrong alignment on InventorySubsystem_LoadItemDefinitions");
static_assert(sizeof(InventorySubsystem_LoadItemDefinitions) == 0x000001, "Wrong size on InventorySubsystem_LoadItemDefinitions");
static_assert(offsetof(InventorySubsystem_LoadItemDefinitions, ReturnValue) == 0x000000, "Member 'InventorySubsystem_LoadItemDefinitions::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.InventorySubsystem.LoadItemDefinitionsResponse
// 0x0008 (0x0008 - 0x0000)
struct InventorySubsystem_LoadItemDefinitionsResponse final
{
public:
	class UVaRestRequestJSON*                     Request;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventorySubsystem_LoadItemDefinitionsResponse) == 0x000008, "Wrong alignment on InventorySubsystem_LoadItemDefinitionsResponse");
static_assert(sizeof(InventorySubsystem_LoadItemDefinitionsResponse) == 0x000008, "Wrong size on InventorySubsystem_LoadItemDefinitionsResponse");
static_assert(offsetof(InventorySubsystem_LoadItemDefinitionsResponse, Request) == 0x000000, "Member 'InventorySubsystem_LoadItemDefinitionsResponse::Request' has a wrong offset!");

// Function MasterServerPlugin.InventorySubsystem.PopAddedItemsByReason
// 0x0018 (0x0018 - 0x0000)
struct InventorySubsystem_PopAddedItemsByReason final
{
public:
	EItemChangeReason                             Reason;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBlueprintOnlineItem>           ItemsResult;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventorySubsystem_PopAddedItemsByReason) == 0x000008, "Wrong alignment on InventorySubsystem_PopAddedItemsByReason");
static_assert(sizeof(InventorySubsystem_PopAddedItemsByReason) == 0x000018, "Wrong size on InventorySubsystem_PopAddedItemsByReason");
static_assert(offsetof(InventorySubsystem_PopAddedItemsByReason, Reason) == 0x000000, "Member 'InventorySubsystem_PopAddedItemsByReason::Reason' has a wrong offset!");
static_assert(offsetof(InventorySubsystem_PopAddedItemsByReason, ItemsResult) == 0x000008, "Member 'InventorySubsystem_PopAddedItemsByReason::ItemsResult' has a wrong offset!");

// Function MasterServerPlugin.InventorySubsystem.PopAddedItemsByReasons
// 0x0020 (0x0020 - 0x0000)
struct InventorySubsystem_PopAddedItemsByReasons final
{
public:
	TArray<EItemChangeReason>                     Reasons;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBlueprintOnlineItem>           ItemsResult;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventorySubsystem_PopAddedItemsByReasons) == 0x000008, "Wrong alignment on InventorySubsystem_PopAddedItemsByReasons");
static_assert(sizeof(InventorySubsystem_PopAddedItemsByReasons) == 0x000020, "Wrong size on InventorySubsystem_PopAddedItemsByReasons");
static_assert(offsetof(InventorySubsystem_PopAddedItemsByReasons, Reasons) == 0x000000, "Member 'InventorySubsystem_PopAddedItemsByReasons::Reasons' has a wrong offset!");
static_assert(offsetof(InventorySubsystem_PopAddedItemsByReasons, ItemsResult) == 0x000010, "Member 'InventorySubsystem_PopAddedItemsByReasons::ItemsResult' has a wrong offset!");

// Function MasterServerPlugin.InventorySubsystem.PopAllAddedItems
// 0x0010 (0x0010 - 0x0000)
struct InventorySubsystem_PopAllAddedItems final
{
public:
	TArray<struct FBlueprintOnlineItem>           ItemsResult;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventorySubsystem_PopAllAddedItems) == 0x000008, "Wrong alignment on InventorySubsystem_PopAllAddedItems");
static_assert(sizeof(InventorySubsystem_PopAllAddedItems) == 0x000010, "Wrong size on InventorySubsystem_PopAllAddedItems");
static_assert(offsetof(InventorySubsystem_PopAllAddedItems, ItemsResult) == 0x000000, "Member 'InventorySubsystem_PopAllAddedItems::ItemsResult' has a wrong offset!");

// Function MasterServerPlugin.MasterServerSubsystem.SetNewMasterServerManager
// 0x0008 (0x0008 - 0x0000)
struct MasterServerSubsystem_SetNewMasterServerManager final
{
public:
	class UNewMasterServerManager*                SetNewMasterServerManager_0;                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterServerSubsystem_SetNewMasterServerManager) == 0x000008, "Wrong alignment on MasterServerSubsystem_SetNewMasterServerManager");
static_assert(sizeof(MasterServerSubsystem_SetNewMasterServerManager) == 0x000008, "Wrong size on MasterServerSubsystem_SetNewMasterServerManager");
static_assert(offsetof(MasterServerSubsystem_SetNewMasterServerManager, SetNewMasterServerManager_0) == 0x000000, "Member 'MasterServerSubsystem_SetNewMasterServerManager::SetNewMasterServerManager_0' has a wrong offset!");

// Function MasterServerPlugin.MasterServerSubsystem.GetNewMasterServerManager
// 0x0008 (0x0008 - 0x0000)
struct MasterServerSubsystem_GetNewMasterServerManager final
{
public:
	class UNewMasterServerManager*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterServerSubsystem_GetNewMasterServerManager) == 0x000008, "Wrong alignment on MasterServerSubsystem_GetNewMasterServerManager");
static_assert(sizeof(MasterServerSubsystem_GetNewMasterServerManager) == 0x000008, "Wrong size on MasterServerSubsystem_GetNewMasterServerManager");
static_assert(offsetof(MasterServerSubsystem_GetNewMasterServerManager, ReturnValue) == 0x000000, "Member 'MasterServerSubsystem_GetNewMasterServerManager::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.NewMasterServerManager.BPTick
// 0x0004 (0x0004 - 0x0000)
struct NewMasterServerManager_BPTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NewMasterServerManager_BPTick) == 0x000004, "Wrong alignment on NewMasterServerManager_BPTick");
static_assert(sizeof(NewMasterServerManager_BPTick) == 0x000004, "Wrong size on NewMasterServerManager_BPTick");
static_assert(offsetof(NewMasterServerManager_BPTick, DeltaTime) == 0x000000, "Member 'NewMasterServerManager_BPTick::DeltaTime' has a wrong offset!");

// Function MasterServerPlugin.NewMasterServerManager.Connect
// 0x0030 (0x0030 - 0x0000)
struct NewMasterServerManager_Connect final
{
public:
	class FString                                 Ip;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Resource;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NewMasterServerManager_Connect) == 0x000008, "Wrong alignment on NewMasterServerManager_Connect");
static_assert(sizeof(NewMasterServerManager_Connect) == 0x000030, "Wrong size on NewMasterServerManager_Connect");
static_assert(offsetof(NewMasterServerManager_Connect, Ip) == 0x000000, "Member 'NewMasterServerManager_Connect::Ip' has a wrong offset!");
static_assert(offsetof(NewMasterServerManager_Connect, Port) == 0x000010, "Member 'NewMasterServerManager_Connect::Port' has a wrong offset!");
static_assert(offsetof(NewMasterServerManager_Connect, Resource) == 0x000018, "Member 'NewMasterServerManager_Connect::Resource' has a wrong offset!");
static_assert(offsetof(NewMasterServerManager_Connect, ReturnValue) == 0x000028, "Member 'NewMasterServerManager_Connect::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.NewMasterServerManager.DeclarePresence
// 0x0010 (0x0010 - 0x0000)
struct NewMasterServerManager_DeclarePresence final
{
public:
	class FString                                 PresenceString;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NewMasterServerManager_DeclarePresence) == 0x000008, "Wrong alignment on NewMasterServerManager_DeclarePresence");
static_assert(sizeof(NewMasterServerManager_DeclarePresence) == 0x000010, "Wrong size on NewMasterServerManager_DeclarePresence");
static_assert(offsetof(NewMasterServerManager_DeclarePresence, PresenceString) == 0x000000, "Member 'NewMasterServerManager_DeclarePresence::PresenceString' has a wrong offset!");

// Function MasterServerPlugin.NewMasterServerManager.GetPresenceForUser
// 0x0040 (0x0040 - 0x0000)
struct NewMasterServerManager_GetPresenceForUser final
{
public:
	class UOnlineUserRef*                         User;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAccountPresenceEntry                  ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NewMasterServerManager_GetPresenceForUser) == 0x000008, "Wrong alignment on NewMasterServerManager_GetPresenceForUser");
static_assert(sizeof(NewMasterServerManager_GetPresenceForUser) == 0x000040, "Wrong size on NewMasterServerManager_GetPresenceForUser");
static_assert(offsetof(NewMasterServerManager_GetPresenceForUser, User) == 0x000000, "Member 'NewMasterServerManager_GetPresenceForUser::User' has a wrong offset!");
static_assert(offsetof(NewMasterServerManager_GetPresenceForUser, bIsValid) == 0x000008, "Member 'NewMasterServerManager_GetPresenceForUser::bIsValid' has a wrong offset!");
static_assert(offsetof(NewMasterServerManager_GetPresenceForUser, ReturnValue) == 0x000010, "Member 'NewMasterServerManager_GetPresenceForUser::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.NewMasterServerManager.IsConnected
// 0x0001 (0x0001 - 0x0000)
struct NewMasterServerManager_IsConnected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NewMasterServerManager_IsConnected) == 0x000001, "Wrong alignment on NewMasterServerManager_IsConnected");
static_assert(sizeof(NewMasterServerManager_IsConnected) == 0x000001, "Wrong size on NewMasterServerManager_IsConnected");
static_assert(offsetof(NewMasterServerManager_IsConnected, ReturnValue) == 0x000000, "Member 'NewMasterServerManager_IsConnected::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.NewMasterServerManager.IsRestApiAccessTokenValid
// 0x0010 (0x0010 - 0x0000)
struct NewMasterServerManager_IsRestApiAccessTokenValid final
{
public:
	double                                        MaxExpiryDeltaSeconds;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NewMasterServerManager_IsRestApiAccessTokenValid) == 0x000008, "Wrong alignment on NewMasterServerManager_IsRestApiAccessTokenValid");
static_assert(sizeof(NewMasterServerManager_IsRestApiAccessTokenValid) == 0x000010, "Wrong size on NewMasterServerManager_IsRestApiAccessTokenValid");
static_assert(offsetof(NewMasterServerManager_IsRestApiAccessTokenValid, MaxExpiryDeltaSeconds) == 0x000000, "Member 'NewMasterServerManager_IsRestApiAccessTokenValid::MaxExpiryDeltaSeconds' has a wrong offset!");
static_assert(offsetof(NewMasterServerManager_IsRestApiAccessTokenValid, ReturnValue) == 0x000008, "Member 'NewMasterServerManager_IsRestApiAccessTokenValid::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.NewMasterServerManager.OnConnected
// 0x0018 (0x0018 - 0x0000)
struct NewMasterServerManager_OnConnected final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NewMasterServerManager_OnConnected) == 0x000008, "Wrong alignment on NewMasterServerManager_OnConnected");
static_assert(sizeof(NewMasterServerManager_OnConnected) == 0x000018, "Wrong size on NewMasterServerManager_OnConnected");
static_assert(offsetof(NewMasterServerManager_OnConnected, Success) == 0x000000, "Member 'NewMasterServerManager_OnConnected::Success' has a wrong offset!");
static_assert(offsetof(NewMasterServerManager_OnConnected, ErrorMessage) == 0x000008, "Member 'NewMasterServerManager_OnConnected::ErrorMessage' has a wrong offset!");

// Function MasterServerPlugin.NewMasterServerManager.OnDisconnected
// 0x0020 (0x0020 - 0x0000)
struct NewMasterServerManager_OnDisconnected final
{
public:
	int32                                         StatusCode;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Reason;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasClean;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NewMasterServerManager_OnDisconnected) == 0x000008, "Wrong alignment on NewMasterServerManager_OnDisconnected");
static_assert(sizeof(NewMasterServerManager_OnDisconnected) == 0x000020, "Wrong size on NewMasterServerManager_OnDisconnected");
static_assert(offsetof(NewMasterServerManager_OnDisconnected, StatusCode) == 0x000000, "Member 'NewMasterServerManager_OnDisconnected::StatusCode' has a wrong offset!");
static_assert(offsetof(NewMasterServerManager_OnDisconnected, Reason) == 0x000008, "Member 'NewMasterServerManager_OnDisconnected::Reason' has a wrong offset!");
static_assert(offsetof(NewMasterServerManager_OnDisconnected, bWasClean) == 0x000018, "Member 'NewMasterServerManager_OnDisconnected::bWasClean' has a wrong offset!");

// Function MasterServerPlugin.NewMasterServerManager.OnLoginResponse
// 0x0008 (0x0008 - 0x0000)
struct NewMasterServerManager_OnLoginResponse final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AccountId;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NewMasterServerManager_OnLoginResponse) == 0x000004, "Wrong alignment on NewMasterServerManager_OnLoginResponse");
static_assert(sizeof(NewMasterServerManager_OnLoginResponse) == 0x000008, "Wrong size on NewMasterServerManager_OnLoginResponse");
static_assert(offsetof(NewMasterServerManager_OnLoginResponse, Success) == 0x000000, "Member 'NewMasterServerManager_OnLoginResponse::Success' has a wrong offset!");
static_assert(offsetof(NewMasterServerManager_OnLoginResponse, AccountId) == 0x000004, "Member 'NewMasterServerManager_OnLoginResponse::AccountId' has a wrong offset!");

// Function MasterServerPlugin.NewMasterServerManager.RequestAccountMessages
// 0x0008 (0x0008 - 0x0000)
struct NewMasterServerManager_RequestAccountMessages final
{
public:
	class UVaRestRequestJSON*                     Request;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NewMasterServerManager_RequestAccountMessages) == 0x000008, "Wrong alignment on NewMasterServerManager_RequestAccountMessages");
static_assert(sizeof(NewMasterServerManager_RequestAccountMessages) == 0x000008, "Wrong size on NewMasterServerManager_RequestAccountMessages");
static_assert(offsetof(NewMasterServerManager_RequestAccountMessages, Request) == 0x000000, "Member 'NewMasterServerManager_RequestAccountMessages::Request' has a wrong offset!");

// Function MasterServerPlugin.NewMasterServerManager.RequestAccountSettings
// 0x0010 (0x0010 - 0x0000)
struct NewMasterServerManager_RequestAccountSettings final
{
public:
	TArray<class FString>                         SettingNames;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NewMasterServerManager_RequestAccountSettings) == 0x000008, "Wrong alignment on NewMasterServerManager_RequestAccountSettings");
static_assert(sizeof(NewMasterServerManager_RequestAccountSettings) == 0x000010, "Wrong size on NewMasterServerManager_RequestAccountSettings");
static_assert(offsetof(NewMasterServerManager_RequestAccountSettings, SettingNames) == 0x000000, "Member 'NewMasterServerManager_RequestAccountSettings::SettingNames' has a wrong offset!");

// Function MasterServerPlugin.NewMasterServerManager.RequestPresenceForAccounts
// 0x0010 (0x0010 - 0x0000)
struct NewMasterServerManager_RequestPresenceForAccounts final
{
public:
	TArray<class UOnlineUserRef*>                 Users;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NewMasterServerManager_RequestPresenceForAccounts) == 0x000008, "Wrong alignment on NewMasterServerManager_RequestPresenceForAccounts");
static_assert(sizeof(NewMasterServerManager_RequestPresenceForAccounts) == 0x000010, "Wrong size on NewMasterServerManager_RequestPresenceForAccounts");
static_assert(offsetof(NewMasterServerManager_RequestPresenceForAccounts, Users) == 0x000000, "Member 'NewMasterServerManager_RequestPresenceForAccounts::Users' has a wrong offset!");

// Function MasterServerPlugin.NewMasterServerManager.SendLoginPacket
// 0x0010 (0x0010 - 0x0000)
struct NewMasterServerManager_SendLoginPacket final
{
public:
	class FString                                 AccessToken;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NewMasterServerManager_SendLoginPacket) == 0x000008, "Wrong alignment on NewMasterServerManager_SendLoginPacket");
static_assert(sizeof(NewMasterServerManager_SendLoginPacket) == 0x000010, "Wrong size on NewMasterServerManager_SendLoginPacket");
static_assert(offsetof(NewMasterServerManager_SendLoginPacket, AccessToken) == 0x000000, "Member 'NewMasterServerManager_SendLoginPacket::AccessToken' has a wrong offset!");

// Function MasterServerPlugin.NewMasterServerManager.SetAccountMessageState
// 0x0010 (0x0010 - 0x0000)
struct NewMasterServerManager_SetAccountMessageState final
{
public:
	int64                                         UniqueID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccountMessageState                          NewState;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NewMasterServerManager_SetAccountMessageState) == 0x000008, "Wrong alignment on NewMasterServerManager_SetAccountMessageState");
static_assert(sizeof(NewMasterServerManager_SetAccountMessageState) == 0x000010, "Wrong size on NewMasterServerManager_SetAccountMessageState");
static_assert(offsetof(NewMasterServerManager_SetAccountMessageState, UniqueID) == 0x000000, "Member 'NewMasterServerManager_SetAccountMessageState::UniqueID' has a wrong offset!");
static_assert(offsetof(NewMasterServerManager_SetAccountMessageState, NewState) == 0x000008, "Member 'NewMasterServerManager_SetAccountMessageState::NewState' has a wrong offset!");

// Function MasterServerPlugin.NewMasterServerManager.SetAccountSettings
// 0x0010 (0x0010 - 0x0000)
struct NewMasterServerManager_SetAccountSettings final
{
public:
	TArray<struct FAccountSetting>                Settings;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NewMasterServerManager_SetAccountSettings) == 0x000008, "Wrong alignment on NewMasterServerManager_SetAccountSettings");
static_assert(sizeof(NewMasterServerManager_SetAccountSettings) == 0x000010, "Wrong size on NewMasterServerManager_SetAccountSettings");
static_assert(offsetof(NewMasterServerManager_SetAccountSettings, Settings) == 0x000000, "Member 'NewMasterServerManager_SetAccountSettings::Settings' has a wrong offset!");

// Function MasterServerPlugin.NewMasterServerManager.SetupRestApiData
// 0x0018 (0x0018 - 0x0000)
struct NewMasterServerManager_SetupRestApiData final
{
public:
	class FString                                 ServerHostname;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerPort;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AccountId;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NewMasterServerManager_SetupRestApiData) == 0x000008, "Wrong alignment on NewMasterServerManager_SetupRestApiData");
static_assert(sizeof(NewMasterServerManager_SetupRestApiData) == 0x000018, "Wrong size on NewMasterServerManager_SetupRestApiData");
static_assert(offsetof(NewMasterServerManager_SetupRestApiData, ServerHostname) == 0x000000, "Member 'NewMasterServerManager_SetupRestApiData::ServerHostname' has a wrong offset!");
static_assert(offsetof(NewMasterServerManager_SetupRestApiData, ServerPort) == 0x000010, "Member 'NewMasterServerManager_SetupRestApiData::ServerPort' has a wrong offset!");
static_assert(offsetof(NewMasterServerManager_SetupRestApiData, AccountId) == 0x000014, "Member 'NewMasterServerManager_SetupRestApiData::AccountId' has a wrong offset!");

// Function MasterServerPlugin.NewMasterServerManager.UpdateRestApiAccessToken
// 0x0018 (0x0018 - 0x0000)
struct NewMasterServerManager_UpdateRestApiAccessToken final
{
public:
	class FString                                 AccessToken;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              AccessTokenExpiryTime;                             // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NewMasterServerManager_UpdateRestApiAccessToken) == 0x000008, "Wrong alignment on NewMasterServerManager_UpdateRestApiAccessToken");
static_assert(sizeof(NewMasterServerManager_UpdateRestApiAccessToken) == 0x000018, "Wrong size on NewMasterServerManager_UpdateRestApiAccessToken");
static_assert(offsetof(NewMasterServerManager_UpdateRestApiAccessToken, AccessToken) == 0x000000, "Member 'NewMasterServerManager_UpdateRestApiAccessToken::AccessToken' has a wrong offset!");
static_assert(offsetof(NewMasterServerManager_UpdateRestApiAccessToken, AccessTokenExpiryTime) == 0x000010, "Member 'NewMasterServerManager_UpdateRestApiAccessToken::AccessTokenExpiryTime' has a wrong offset!");

// Function MasterServerPlugin.NewMasterServerManager.GetServerBrowser
// 0x0008 (0x0008 - 0x0000)
struct NewMasterServerManager_GetServerBrowser final
{
public:
	class UServerBrowser*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NewMasterServerManager_GetServerBrowser) == 0x000008, "Wrong alignment on NewMasterServerManager_GetServerBrowser");
static_assert(sizeof(NewMasterServerManager_GetServerBrowser) == 0x000008, "Wrong size on NewMasterServerManager_GetServerBrowser");
static_assert(offsetof(NewMasterServerManager_GetServerBrowser, ReturnValue) == 0x000000, "Member 'NewMasterServerManager_GetServerBrowser::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.NewMasterServerManager.HasRuntimeAccountFlag
// 0x0002 (0x0002 - 0x0000)
struct NewMasterServerManager_HasRuntimeAccountFlag final
{
public:
	ERuntimeAccountFlags                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NewMasterServerManager_HasRuntimeAccountFlag) == 0x000001, "Wrong alignment on NewMasterServerManager_HasRuntimeAccountFlag");
static_assert(sizeof(NewMasterServerManager_HasRuntimeAccountFlag) == 0x000002, "Wrong size on NewMasterServerManager_HasRuntimeAccountFlag");
static_assert(offsetof(NewMasterServerManager_HasRuntimeAccountFlag, Flag) == 0x000000, "Member 'NewMasterServerManager_HasRuntimeAccountFlag::Flag' has a wrong offset!");
static_assert(offsetof(NewMasterServerManager_HasRuntimeAccountFlag, ReturnValue) == 0x000001, "Member 'NewMasterServerManager_HasRuntimeAccountFlag::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.NewMasterServerManager.IsTearingDown
// 0x0001 (0x0001 - 0x0000)
struct NewMasterServerManager_IsTearingDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NewMasterServerManager_IsTearingDown) == 0x000001, "Wrong alignment on NewMasterServerManager_IsTearingDown");
static_assert(sizeof(NewMasterServerManager_IsTearingDown) == 0x000001, "Wrong size on NewMasterServerManager_IsTearingDown");
static_assert(offsetof(NewMasterServerManager_IsTearingDown, ReturnValue) == 0x000000, "Member 'NewMasterServerManager_IsTearingDown::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.ServerBrowser.PingAddress
// 0x0020 (0x0020 - 0x0000)
struct ServerBrowser_PingAddress final
{
public:
	class FString                                 Address;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerID;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerBrowser_PingAddress) == 0x000008, "Wrong alignment on ServerBrowser_PingAddress");
static_assert(sizeof(ServerBrowser_PingAddress) == 0x000020, "Wrong size on ServerBrowser_PingAddress");
static_assert(offsetof(ServerBrowser_PingAddress, Address) == 0x000000, "Member 'ServerBrowser_PingAddress::Address' has a wrong offset!");
static_assert(offsetof(ServerBrowser_PingAddress, ServerID) == 0x000010, "Member 'ServerBrowser_PingAddress::ServerID' has a wrong offset!");

// Function MasterServerPlugin.ServerBrowser.PingServer
// 0x0120 (0x0120 - 0x0000)
struct ServerBrowser_PingServer final
{
public:
	struct FBlueprintSessionResult                BlueprintSessionResult;                            // 0x0000(0x0120)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerBrowser_PingServer) == 0x000008, "Wrong alignment on ServerBrowser_PingServer");
static_assert(sizeof(ServerBrowser_PingServer) == 0x000120, "Wrong size on ServerBrowser_PingServer");
static_assert(offsetof(ServerBrowser_PingServer, BlueprintSessionResult) == 0x000000, "Member 'ServerBrowser_PingServer::BlueprintSessionResult' has a wrong offset!");

// Function MasterServerPlugin.ServerBrowser.RegisterGameServer
// 0x0158 (0x0158 - 0x0000)
struct ServerBrowser_RegisterGameServer final
{
public:
	struct FGameServerInfo                        GameServerInfo;                                    // 0x0000(0x0158)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerBrowser_RegisterGameServer) == 0x000008, "Wrong alignment on ServerBrowser_RegisterGameServer");
static_assert(sizeof(ServerBrowser_RegisterGameServer) == 0x000158, "Wrong size on ServerBrowser_RegisterGameServer");
static_assert(offsetof(ServerBrowser_RegisterGameServer, GameServerInfo) == 0x000000, "Member 'ServerBrowser_RegisterGameServer::GameServerInfo' has a wrong offset!");

// Function MasterServerPlugin.ServerBrowser.SendServerBrowserInfo
// 0x0158 (0x0158 - 0x0000)
struct ServerBrowser_SendServerBrowserInfo final
{
public:
	struct FGameServerInfo                        GameServerInfo;                                    // 0x0000(0x0158)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerBrowser_SendServerBrowserInfo) == 0x000008, "Wrong alignment on ServerBrowser_SendServerBrowserInfo");
static_assert(sizeof(ServerBrowser_SendServerBrowserInfo) == 0x000158, "Wrong size on ServerBrowser_SendServerBrowserInfo");
static_assert(offsetof(ServerBrowser_SendServerBrowserInfo, GameServerInfo) == 0x000000, "Member 'ServerBrowser_SendServerBrowserInfo::GameServerInfo' has a wrong offset!");

// Function MasterServerPlugin.ServerBrowser.GetServerList
// 0x0010 (0x0010 - 0x0000)
struct ServerBrowser_GetServerList final
{
public:
	TArray<struct FBlueprintSessionResult>        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerBrowser_GetServerList) == 0x000008, "Wrong alignment on ServerBrowser_GetServerList");
static_assert(sizeof(ServerBrowser_GetServerList) == 0x000010, "Wrong size on ServerBrowser_GetServerList");
static_assert(offsetof(ServerBrowser_GetServerList, ReturnValue) == 0x000000, "Member 'ServerBrowser_GetServerList::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.ServerBrowser.HasActiveGameSession
// 0x0001 (0x0001 - 0x0000)
struct ServerBrowser_HasActiveGameSession final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerBrowser_HasActiveGameSession) == 0x000001, "Wrong alignment on ServerBrowser_HasActiveGameSession");
static_assert(sizeof(ServerBrowser_HasActiveGameSession) == 0x000001, "Wrong size on ServerBrowser_HasActiveGameSession");
static_assert(offsetof(ServerBrowser_HasActiveGameSession, ReturnValue) == 0x000000, "Member 'ServerBrowser_HasActiveGameSession::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.RequestPlayerInventoryProxy.RequestPlayerInventory
// 0x0040 (0x0040 - 0x0000)
struct RequestPlayerInventoryProxy_RequestPlayerInventory final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       TargetPlayerId;                                    // 0x0008(0x0030)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URequestPlayerInventoryProxy*           ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RequestPlayerInventoryProxy_RequestPlayerInventory) == 0x000008, "Wrong alignment on RequestPlayerInventoryProxy_RequestPlayerInventory");
static_assert(sizeof(RequestPlayerInventoryProxy_RequestPlayerInventory) == 0x000040, "Wrong size on RequestPlayerInventoryProxy_RequestPlayerInventory");
static_assert(offsetof(RequestPlayerInventoryProxy_RequestPlayerInventory, WorldContextObject) == 0x000000, "Member 'RequestPlayerInventoryProxy_RequestPlayerInventory::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RequestPlayerInventoryProxy_RequestPlayerInventory, TargetPlayerId) == 0x000008, "Member 'RequestPlayerInventoryProxy_RequestPlayerInventory::TargetPlayerId' has a wrong offset!");
static_assert(offsetof(RequestPlayerInventoryProxy_RequestPlayerInventory, ReturnValue) == 0x000038, "Member 'RequestPlayerInventoryProxy_RequestPlayerInventory::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.RequestPlayerInventoryProxy.RequestPlayerInventoryResponse
// 0x0008 (0x0008 - 0x0000)
struct RequestPlayerInventoryProxy_RequestPlayerInventoryResponse final
{
public:
	class UVaRestRequestJSON*                     Request;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RequestPlayerInventoryProxy_RequestPlayerInventoryResponse) == 0x000008, "Wrong alignment on RequestPlayerInventoryProxy_RequestPlayerInventoryResponse");
static_assert(sizeof(RequestPlayerInventoryProxy_RequestPlayerInventoryResponse) == 0x000008, "Wrong size on RequestPlayerInventoryProxy_RequestPlayerInventoryResponse");
static_assert(offsetof(RequestPlayerInventoryProxy_RequestPlayerInventoryResponse, Request) == 0x000000, "Member 'RequestPlayerInventoryProxy_RequestPlayerInventoryResponse::Request' has a wrong offset!");

// Function MasterServerPlugin.SendTradeRequestProxy.SendTradeRequest
// 0x0060 (0x0060 - 0x0000)
struct SendTradeRequestProxy_SendTradeRequest final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       TargetPlayerId;                                    // 0x0008(0x0030)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTradingItem>                   SendingItems;                                      // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FTradingItem>                   TargetItems;                                       // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class USendTradeRequestProxy*                 ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SendTradeRequestProxy_SendTradeRequest) == 0x000008, "Wrong alignment on SendTradeRequestProxy_SendTradeRequest");
static_assert(sizeof(SendTradeRequestProxy_SendTradeRequest) == 0x000060, "Wrong size on SendTradeRequestProxy_SendTradeRequest");
static_assert(offsetof(SendTradeRequestProxy_SendTradeRequest, WorldContextObject) == 0x000000, "Member 'SendTradeRequestProxy_SendTradeRequest::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SendTradeRequestProxy_SendTradeRequest, TargetPlayerId) == 0x000008, "Member 'SendTradeRequestProxy_SendTradeRequest::TargetPlayerId' has a wrong offset!");
static_assert(offsetof(SendTradeRequestProxy_SendTradeRequest, SendingItems) == 0x000038, "Member 'SendTradeRequestProxy_SendTradeRequest::SendingItems' has a wrong offset!");
static_assert(offsetof(SendTradeRequestProxy_SendTradeRequest, TargetItems) == 0x000048, "Member 'SendTradeRequestProxy_SendTradeRequest::TargetItems' has a wrong offset!");
static_assert(offsetof(SendTradeRequestProxy_SendTradeRequest, ReturnValue) == 0x000058, "Member 'SendTradeRequestProxy_SendTradeRequest::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.SendTradeRequestProxy.SendTradeRequestResponse
// 0x0008 (0x0008 - 0x0000)
struct SendTradeRequestProxy_SendTradeRequestResponse final
{
public:
	class UVaRestRequestJSON*                     Request;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SendTradeRequestProxy_SendTradeRequestResponse) == 0x000008, "Wrong alignment on SendTradeRequestProxy_SendTradeRequestResponse");
static_assert(sizeof(SendTradeRequestProxy_SendTradeRequestResponse) == 0x000008, "Wrong size on SendTradeRequestProxy_SendTradeRequestResponse");
static_assert(offsetof(SendTradeRequestProxy_SendTradeRequestResponse, Request) == 0x000000, "Member 'SendTradeRequestProxy_SendTradeRequestResponse::Request' has a wrong offset!");

// Function MasterServerPlugin.AcceptTradeRequestProxy.AcceptTradeRequest
// 0x0018 (0x0018 - 0x0000)
struct AcceptTradeRequestProxy_AcceptTradeRequest final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         TradeRequestId;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAcceptTradeRequestProxy*               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AcceptTradeRequestProxy_AcceptTradeRequest) == 0x000008, "Wrong alignment on AcceptTradeRequestProxy_AcceptTradeRequest");
static_assert(sizeof(AcceptTradeRequestProxy_AcceptTradeRequest) == 0x000018, "Wrong size on AcceptTradeRequestProxy_AcceptTradeRequest");
static_assert(offsetof(AcceptTradeRequestProxy_AcceptTradeRequest, WorldContextObject) == 0x000000, "Member 'AcceptTradeRequestProxy_AcceptTradeRequest::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AcceptTradeRequestProxy_AcceptTradeRequest, TradeRequestId) == 0x000008, "Member 'AcceptTradeRequestProxy_AcceptTradeRequest::TradeRequestId' has a wrong offset!");
static_assert(offsetof(AcceptTradeRequestProxy_AcceptTradeRequest, ReturnValue) == 0x000010, "Member 'AcceptTradeRequestProxy_AcceptTradeRequest::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.AcceptTradeRequestProxy.AcceptTradeRequestResponse
// 0x0008 (0x0008 - 0x0000)
struct AcceptTradeRequestProxy_AcceptTradeRequestResponse final
{
public:
	class UVaRestRequestJSON*                     Request;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AcceptTradeRequestProxy_AcceptTradeRequestResponse) == 0x000008, "Wrong alignment on AcceptTradeRequestProxy_AcceptTradeRequestResponse");
static_assert(sizeof(AcceptTradeRequestProxy_AcceptTradeRequestResponse) == 0x000008, "Wrong size on AcceptTradeRequestProxy_AcceptTradeRequestResponse");
static_assert(offsetof(AcceptTradeRequestProxy_AcceptTradeRequestResponse, Request) == 0x000000, "Member 'AcceptTradeRequestProxy_AcceptTradeRequestResponse::Request' has a wrong offset!");

// Function MasterServerPlugin.RejectTradeRequestProxy.RejectTradeRequest
// 0x0018 (0x0018 - 0x0000)
struct RejectTradeRequestProxy_RejectTradeRequest final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         TradeRequestId;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URejectTradeRequestProxy*               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RejectTradeRequestProxy_RejectTradeRequest) == 0x000008, "Wrong alignment on RejectTradeRequestProxy_RejectTradeRequest");
static_assert(sizeof(RejectTradeRequestProxy_RejectTradeRequest) == 0x000018, "Wrong size on RejectTradeRequestProxy_RejectTradeRequest");
static_assert(offsetof(RejectTradeRequestProxy_RejectTradeRequest, WorldContextObject) == 0x000000, "Member 'RejectTradeRequestProxy_RejectTradeRequest::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RejectTradeRequestProxy_RejectTradeRequest, TradeRequestId) == 0x000008, "Member 'RejectTradeRequestProxy_RejectTradeRequest::TradeRequestId' has a wrong offset!");
static_assert(offsetof(RejectTradeRequestProxy_RejectTradeRequest, ReturnValue) == 0x000010, "Member 'RejectTradeRequestProxy_RejectTradeRequest::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.RejectTradeRequestProxy.RejectTradeRequestResponse
// 0x0008 (0x0008 - 0x0000)
struct RejectTradeRequestProxy_RejectTradeRequestResponse final
{
public:
	class UVaRestRequestJSON*                     Request;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RejectTradeRequestProxy_RejectTradeRequestResponse) == 0x000008, "Wrong alignment on RejectTradeRequestProxy_RejectTradeRequestResponse");
static_assert(sizeof(RejectTradeRequestProxy_RejectTradeRequestResponse) == 0x000008, "Wrong size on RejectTradeRequestProxy_RejectTradeRequestResponse");
static_assert(offsetof(RejectTradeRequestProxy_RejectTradeRequestResponse, Request) == 0x000000, "Member 'RejectTradeRequestProxy_RejectTradeRequestResponse::Request' has a wrong offset!");

// Function MasterServerPlugin.CancelTradeRequestProxy.CancelTradeRequest
// 0x0018 (0x0018 - 0x0000)
struct CancelTradeRequestProxy_CancelTradeRequest final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         TradeRequestId;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCancelTradeRequestProxy*               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CancelTradeRequestProxy_CancelTradeRequest) == 0x000008, "Wrong alignment on CancelTradeRequestProxy_CancelTradeRequest");
static_assert(sizeof(CancelTradeRequestProxy_CancelTradeRequest) == 0x000018, "Wrong size on CancelTradeRequestProxy_CancelTradeRequest");
static_assert(offsetof(CancelTradeRequestProxy_CancelTradeRequest, WorldContextObject) == 0x000000, "Member 'CancelTradeRequestProxy_CancelTradeRequest::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CancelTradeRequestProxy_CancelTradeRequest, TradeRequestId) == 0x000008, "Member 'CancelTradeRequestProxy_CancelTradeRequest::TradeRequestId' has a wrong offset!");
static_assert(offsetof(CancelTradeRequestProxy_CancelTradeRequest, ReturnValue) == 0x000010, "Member 'CancelTradeRequestProxy_CancelTradeRequest::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.CancelTradeRequestProxy.CancelTradeRequestResponse
// 0x0008 (0x0008 - 0x0000)
struct CancelTradeRequestProxy_CancelTradeRequestResponse final
{
public:
	class UVaRestRequestJSON*                     Request;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CancelTradeRequestProxy_CancelTradeRequestResponse) == 0x000008, "Wrong alignment on CancelTradeRequestProxy_CancelTradeRequestResponse");
static_assert(sizeof(CancelTradeRequestProxy_CancelTradeRequestResponse) == 0x000008, "Wrong size on CancelTradeRequestProxy_CancelTradeRequestResponse");
static_assert(offsetof(CancelTradeRequestProxy_CancelTradeRequestResponse, Request) == 0x000000, "Member 'CancelTradeRequestProxy_CancelTradeRequestResponse::Request' has a wrong offset!");

// Function MasterServerPlugin.GetIncomingTradeRequestsProxy.GetIncomingTradeRequests
// 0x0010 (0x0010 - 0x0000)
struct GetIncomingTradeRequestsProxy_GetIncomingTradeRequests final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGetIncomingTradeRequestsProxy*         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GetIncomingTradeRequestsProxy_GetIncomingTradeRequests) == 0x000008, "Wrong alignment on GetIncomingTradeRequestsProxy_GetIncomingTradeRequests");
static_assert(sizeof(GetIncomingTradeRequestsProxy_GetIncomingTradeRequests) == 0x000010, "Wrong size on GetIncomingTradeRequestsProxy_GetIncomingTradeRequests");
static_assert(offsetof(GetIncomingTradeRequestsProxy_GetIncomingTradeRequests, WorldContextObject) == 0x000000, "Member 'GetIncomingTradeRequestsProxy_GetIncomingTradeRequests::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GetIncomingTradeRequestsProxy_GetIncomingTradeRequests, ReturnValue) == 0x000008, "Member 'GetIncomingTradeRequestsProxy_GetIncomingTradeRequests::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.GetIncomingTradeRequestsProxy.GetIncomingTradeRequestsResponse
// 0x0008 (0x0008 - 0x0000)
struct GetIncomingTradeRequestsProxy_GetIncomingTradeRequestsResponse final
{
public:
	class UVaRestRequestJSON*                     Request;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GetIncomingTradeRequestsProxy_GetIncomingTradeRequestsResponse) == 0x000008, "Wrong alignment on GetIncomingTradeRequestsProxy_GetIncomingTradeRequestsResponse");
static_assert(sizeof(GetIncomingTradeRequestsProxy_GetIncomingTradeRequestsResponse) == 0x000008, "Wrong size on GetIncomingTradeRequestsProxy_GetIncomingTradeRequestsResponse");
static_assert(offsetof(GetIncomingTradeRequestsProxy_GetIncomingTradeRequestsResponse, Request) == 0x000000, "Member 'GetIncomingTradeRequestsProxy_GetIncomingTradeRequestsResponse::Request' has a wrong offset!");

// Function MasterServerPlugin.GetOutgoingTradeRequestsProxy.GetOutgoingTradeRequests
// 0x0010 (0x0010 - 0x0000)
struct GetOutgoingTradeRequestsProxy_GetOutgoingTradeRequests final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGetOutgoingTradeRequestsProxy*         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GetOutgoingTradeRequestsProxy_GetOutgoingTradeRequests) == 0x000008, "Wrong alignment on GetOutgoingTradeRequestsProxy_GetOutgoingTradeRequests");
static_assert(sizeof(GetOutgoingTradeRequestsProxy_GetOutgoingTradeRequests) == 0x000010, "Wrong size on GetOutgoingTradeRequestsProxy_GetOutgoingTradeRequests");
static_assert(offsetof(GetOutgoingTradeRequestsProxy_GetOutgoingTradeRequests, WorldContextObject) == 0x000000, "Member 'GetOutgoingTradeRequestsProxy_GetOutgoingTradeRequests::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GetOutgoingTradeRequestsProxy_GetOutgoingTradeRequests, ReturnValue) == 0x000008, "Member 'GetOutgoingTradeRequestsProxy_GetOutgoingTradeRequests::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.GetOutgoingTradeRequestsProxy.GetOutgoingTradeRequestsResponse
// 0x0008 (0x0008 - 0x0000)
struct GetOutgoingTradeRequestsProxy_GetOutgoingTradeRequestsResponse final
{
public:
	class UVaRestRequestJSON*                     Request;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GetOutgoingTradeRequestsProxy_GetOutgoingTradeRequestsResponse) == 0x000008, "Wrong alignment on GetOutgoingTradeRequestsProxy_GetOutgoingTradeRequestsResponse");
static_assert(sizeof(GetOutgoingTradeRequestsProxy_GetOutgoingTradeRequestsResponse) == 0x000008, "Wrong size on GetOutgoingTradeRequestsProxy_GetOutgoingTradeRequestsResponse");
static_assert(offsetof(GetOutgoingTradeRequestsProxy_GetOutgoingTradeRequestsResponse, Request) == 0x000000, "Member 'GetOutgoingTradeRequestsProxy_GetOutgoingTradeRequestsResponse::Request' has a wrong offset!");

// Function MasterServerPlugin.WitchItPacket.ParseFromBytes
// 0x0018 (0x0018 - 0x0000)
struct WitchItPacket_ParseFromBytes final
{
public:
	TArray<uint8>                                 Bytes;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WitchItPacket_ParseFromBytes) == 0x000008, "Wrong alignment on WitchItPacket_ParseFromBytes");
static_assert(sizeof(WitchItPacket_ParseFromBytes) == 0x000018, "Wrong size on WitchItPacket_ParseFromBytes");
static_assert(offsetof(WitchItPacket_ParseFromBytes, Bytes) == 0x000000, "Member 'WitchItPacket_ParseFromBytes::Bytes' has a wrong offset!");
static_assert(offsetof(WitchItPacket_ParseFromBytes, ReturnValue) == 0x000010, "Member 'WitchItPacket_ParseFromBytes::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.WitchItPacket.PutArray
// 0x0018 (0x0018 - 0x0000)
struct WitchItPacket_PutArray final
{
public:
	TArray<uint8>                                 Bytes;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdvancedPosition;                                  // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WitchItPacket_PutArray) == 0x000008, "Wrong alignment on WitchItPacket_PutArray");
static_assert(sizeof(WitchItPacket_PutArray) == 0x000018, "Wrong size on WitchItPacket_PutArray");
static_assert(offsetof(WitchItPacket_PutArray, Bytes) == 0x000000, "Member 'WitchItPacket_PutArray::Bytes' has a wrong offset!");
static_assert(offsetof(WitchItPacket_PutArray, Index_0) == 0x000010, "Member 'WitchItPacket_PutArray::Index_0' has a wrong offset!");
static_assert(offsetof(WitchItPacket_PutArray, AdvancedPosition) == 0x000014, "Member 'WitchItPacket_PutArray::AdvancedPosition' has a wrong offset!");

// Function MasterServerPlugin.WitchItPacket.PutFloat32
// 0x000C (0x000C - 0x0000)
struct WitchItPacket_PutFloat32 final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdvancedPosition;                                  // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WitchItPacket_PutFloat32) == 0x000004, "Wrong alignment on WitchItPacket_PutFloat32");
static_assert(sizeof(WitchItPacket_PutFloat32) == 0x00000C, "Wrong size on WitchItPacket_PutFloat32");
static_assert(offsetof(WitchItPacket_PutFloat32, Value) == 0x000000, "Member 'WitchItPacket_PutFloat32::Value' has a wrong offset!");
static_assert(offsetof(WitchItPacket_PutFloat32, Index_0) == 0x000004, "Member 'WitchItPacket_PutFloat32::Index_0' has a wrong offset!");
static_assert(offsetof(WitchItPacket_PutFloat32, AdvancedPosition) == 0x000008, "Member 'WitchItPacket_PutFloat32::AdvancedPosition' has a wrong offset!");

// Function MasterServerPlugin.WitchItPacket.PutInt16
// 0x000C (0x000C - 0x0000)
struct WitchItPacket_PutInt16 final
{
public:
	int16                                         Value;                                             // 0x0000(0x0002)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Index_0;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdvancedPosition;                                  // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WitchItPacket_PutInt16) == 0x000004, "Wrong alignment on WitchItPacket_PutInt16");
static_assert(sizeof(WitchItPacket_PutInt16) == 0x00000C, "Wrong size on WitchItPacket_PutInt16");
static_assert(offsetof(WitchItPacket_PutInt16, Value) == 0x000000, "Member 'WitchItPacket_PutInt16::Value' has a wrong offset!");
static_assert(offsetof(WitchItPacket_PutInt16, Index_0) == 0x000004, "Member 'WitchItPacket_PutInt16::Index_0' has a wrong offset!");
static_assert(offsetof(WitchItPacket_PutInt16, AdvancedPosition) == 0x000008, "Member 'WitchItPacket_PutInt16::AdvancedPosition' has a wrong offset!");

// Function MasterServerPlugin.WitchItPacket.PutInt32
// 0x000C (0x000C - 0x0000)
struct WitchItPacket_PutInt32 final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdvancedPosition;                                  // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WitchItPacket_PutInt32) == 0x000004, "Wrong alignment on WitchItPacket_PutInt32");
static_assert(sizeof(WitchItPacket_PutInt32) == 0x00000C, "Wrong size on WitchItPacket_PutInt32");
static_assert(offsetof(WitchItPacket_PutInt32, Value) == 0x000000, "Member 'WitchItPacket_PutInt32::Value' has a wrong offset!");
static_assert(offsetof(WitchItPacket_PutInt32, Index_0) == 0x000004, "Member 'WitchItPacket_PutInt32::Index_0' has a wrong offset!");
static_assert(offsetof(WitchItPacket_PutInt32, AdvancedPosition) == 0x000008, "Member 'WitchItPacket_PutInt32::AdvancedPosition' has a wrong offset!");

// Function MasterServerPlugin.WitchItPacket.PutInt64
// 0x0010 (0x0010 - 0x0000)
struct WitchItPacket_PutInt64 final
{
public:
	int64                                         Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdvancedPosition;                                  // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WitchItPacket_PutInt64) == 0x000008, "Wrong alignment on WitchItPacket_PutInt64");
static_assert(sizeof(WitchItPacket_PutInt64) == 0x000010, "Wrong size on WitchItPacket_PutInt64");
static_assert(offsetof(WitchItPacket_PutInt64, Value) == 0x000000, "Member 'WitchItPacket_PutInt64::Value' has a wrong offset!");
static_assert(offsetof(WitchItPacket_PutInt64, Index_0) == 0x000008, "Member 'WitchItPacket_PutInt64::Index_0' has a wrong offset!");
static_assert(offsetof(WitchItPacket_PutInt64, AdvancedPosition) == 0x00000C, "Member 'WitchItPacket_PutInt64::AdvancedPosition' has a wrong offset!");

// Function MasterServerPlugin.WitchItPacket.PutInt8
// 0x000C (0x000C - 0x0000)
struct WitchItPacket_PutInt8 final
{
public:
	int8                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Index_0;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdvancedPosition;                                  // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WitchItPacket_PutInt8) == 0x000004, "Wrong alignment on WitchItPacket_PutInt8");
static_assert(sizeof(WitchItPacket_PutInt8) == 0x00000C, "Wrong size on WitchItPacket_PutInt8");
static_assert(offsetof(WitchItPacket_PutInt8, Value) == 0x000000, "Member 'WitchItPacket_PutInt8::Value' has a wrong offset!");
static_assert(offsetof(WitchItPacket_PutInt8, Index_0) == 0x000004, "Member 'WitchItPacket_PutInt8::Index_0' has a wrong offset!");
static_assert(offsetof(WitchItPacket_PutInt8, AdvancedPosition) == 0x000008, "Member 'WitchItPacket_PutInt8::AdvancedPosition' has a wrong offset!");

// Function MasterServerPlugin.WitchItPacket.PutString
// 0x0018 (0x0018 - 0x0000)
struct WitchItPacket_PutString final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdvancedPosition;                                  // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WitchItPacket_PutString) == 0x000008, "Wrong alignment on WitchItPacket_PutString");
static_assert(sizeof(WitchItPacket_PutString) == 0x000018, "Wrong size on WitchItPacket_PutString");
static_assert(offsetof(WitchItPacket_PutString, Value) == 0x000000, "Member 'WitchItPacket_PutString::Value' has a wrong offset!");
static_assert(offsetof(WitchItPacket_PutString, Index_0) == 0x000010, "Member 'WitchItPacket_PutString::Index_0' has a wrong offset!");
static_assert(offsetof(WitchItPacket_PutString, AdvancedPosition) == 0x000014, "Member 'WitchItPacket_PutString::AdvancedPosition' has a wrong offset!");

// Function MasterServerPlugin.WitchItPacket.PutUInt16
// 0x000C (0x000C - 0x0000)
struct WitchItPacket_PutUInt16 final
{
public:
	uint16                                        Value;                                             // 0x0000(0x0002)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Index_0;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdvancedPosition;                                  // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WitchItPacket_PutUInt16) == 0x000004, "Wrong alignment on WitchItPacket_PutUInt16");
static_assert(sizeof(WitchItPacket_PutUInt16) == 0x00000C, "Wrong size on WitchItPacket_PutUInt16");
static_assert(offsetof(WitchItPacket_PutUInt16, Value) == 0x000000, "Member 'WitchItPacket_PutUInt16::Value' has a wrong offset!");
static_assert(offsetof(WitchItPacket_PutUInt16, Index_0) == 0x000004, "Member 'WitchItPacket_PutUInt16::Index_0' has a wrong offset!");
static_assert(offsetof(WitchItPacket_PutUInt16, AdvancedPosition) == 0x000008, "Member 'WitchItPacket_PutUInt16::AdvancedPosition' has a wrong offset!");

// Function MasterServerPlugin.WitchItPacket.PutUInt32
// 0x000C (0x000C - 0x0000)
struct WitchItPacket_PutUInt32 final
{
public:
	uint32                                        Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdvancedPosition;                                  // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WitchItPacket_PutUInt32) == 0x000004, "Wrong alignment on WitchItPacket_PutUInt32");
static_assert(sizeof(WitchItPacket_PutUInt32) == 0x00000C, "Wrong size on WitchItPacket_PutUInt32");
static_assert(offsetof(WitchItPacket_PutUInt32, Value) == 0x000000, "Member 'WitchItPacket_PutUInt32::Value' has a wrong offset!");
static_assert(offsetof(WitchItPacket_PutUInt32, Index_0) == 0x000004, "Member 'WitchItPacket_PutUInt32::Index_0' has a wrong offset!");
static_assert(offsetof(WitchItPacket_PutUInt32, AdvancedPosition) == 0x000008, "Member 'WitchItPacket_PutUInt32::AdvancedPosition' has a wrong offset!");

// Function MasterServerPlugin.WitchItPacket.PutUInt64
// 0x0010 (0x0010 - 0x0000)
struct WitchItPacket_PutUInt64 final
{
public:
	uint64                                        Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdvancedPosition;                                  // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WitchItPacket_PutUInt64) == 0x000008, "Wrong alignment on WitchItPacket_PutUInt64");
static_assert(sizeof(WitchItPacket_PutUInt64) == 0x000010, "Wrong size on WitchItPacket_PutUInt64");
static_assert(offsetof(WitchItPacket_PutUInt64, Value) == 0x000000, "Member 'WitchItPacket_PutUInt64::Value' has a wrong offset!");
static_assert(offsetof(WitchItPacket_PutUInt64, Index_0) == 0x000008, "Member 'WitchItPacket_PutUInt64::Index_0' has a wrong offset!");
static_assert(offsetof(WitchItPacket_PutUInt64, AdvancedPosition) == 0x00000C, "Member 'WitchItPacket_PutUInt64::AdvancedPosition' has a wrong offset!");

// Function MasterServerPlugin.WitchItPacket.PutUInt8
// 0x000C (0x000C - 0x0000)
struct WitchItPacket_PutUInt8 final
{
public:
	uint8                                         Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Index_0;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdvancedPosition;                                  // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WitchItPacket_PutUInt8) == 0x000004, "Wrong alignment on WitchItPacket_PutUInt8");
static_assert(sizeof(WitchItPacket_PutUInt8) == 0x00000C, "Wrong size on WitchItPacket_PutUInt8");
static_assert(offsetof(WitchItPacket_PutUInt8, Value) == 0x000000, "Member 'WitchItPacket_PutUInt8::Value' has a wrong offset!");
static_assert(offsetof(WitchItPacket_PutUInt8, Index_0) == 0x000004, "Member 'WitchItPacket_PutUInt8::Index_0' has a wrong offset!");
static_assert(offsetof(WitchItPacket_PutUInt8, AdvancedPosition) == 0x000008, "Member 'WitchItPacket_PutUInt8::AdvancedPosition' has a wrong offset!");

// Function MasterServerPlugin.WitchItPacket.ReadBytes
// 0x0018 (0x0018 - 0x0000)
struct WitchItPacket_ReadBytes final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdvancedPosition;                                  // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WitchItPacket_ReadBytes) == 0x000008, "Wrong alignment on WitchItPacket_ReadBytes");
static_assert(sizeof(WitchItPacket_ReadBytes) == 0x000018, "Wrong size on WitchItPacket_ReadBytes");
static_assert(offsetof(WitchItPacket_ReadBytes, Index_0) == 0x000000, "Member 'WitchItPacket_ReadBytes::Index_0' has a wrong offset!");
static_assert(offsetof(WitchItPacket_ReadBytes, AdvancedPosition) == 0x000004, "Member 'WitchItPacket_ReadBytes::AdvancedPosition' has a wrong offset!");
static_assert(offsetof(WitchItPacket_ReadBytes, ReturnValue) == 0x000008, "Member 'WitchItPacket_ReadBytes::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.WitchItPacket.ReadFloat32
// 0x000C (0x000C - 0x0000)
struct WitchItPacket_ReadFloat32 final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdvancedPosition;                                  // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WitchItPacket_ReadFloat32) == 0x000004, "Wrong alignment on WitchItPacket_ReadFloat32");
static_assert(sizeof(WitchItPacket_ReadFloat32) == 0x00000C, "Wrong size on WitchItPacket_ReadFloat32");
static_assert(offsetof(WitchItPacket_ReadFloat32, Index_0) == 0x000000, "Member 'WitchItPacket_ReadFloat32::Index_0' has a wrong offset!");
static_assert(offsetof(WitchItPacket_ReadFloat32, AdvancedPosition) == 0x000004, "Member 'WitchItPacket_ReadFloat32::AdvancedPosition' has a wrong offset!");
static_assert(offsetof(WitchItPacket_ReadFloat32, ReturnValue) == 0x000008, "Member 'WitchItPacket_ReadFloat32::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.WitchItPacket.ReadInt16
// 0x000C (0x000C - 0x0000)
struct WitchItPacket_ReadInt16 final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdvancedPosition;                                  // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         ReturnValue;                                       // 0x0008(0x0002)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WitchItPacket_ReadInt16) == 0x000004, "Wrong alignment on WitchItPacket_ReadInt16");
static_assert(sizeof(WitchItPacket_ReadInt16) == 0x00000C, "Wrong size on WitchItPacket_ReadInt16");
static_assert(offsetof(WitchItPacket_ReadInt16, Index_0) == 0x000000, "Member 'WitchItPacket_ReadInt16::Index_0' has a wrong offset!");
static_assert(offsetof(WitchItPacket_ReadInt16, AdvancedPosition) == 0x000004, "Member 'WitchItPacket_ReadInt16::AdvancedPosition' has a wrong offset!");
static_assert(offsetof(WitchItPacket_ReadInt16, ReturnValue) == 0x000008, "Member 'WitchItPacket_ReadInt16::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.WitchItPacket.ReadInt32
// 0x000C (0x000C - 0x0000)
struct WitchItPacket_ReadInt32 final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdvancedPosition;                                  // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WitchItPacket_ReadInt32) == 0x000004, "Wrong alignment on WitchItPacket_ReadInt32");
static_assert(sizeof(WitchItPacket_ReadInt32) == 0x00000C, "Wrong size on WitchItPacket_ReadInt32");
static_assert(offsetof(WitchItPacket_ReadInt32, Index_0) == 0x000000, "Member 'WitchItPacket_ReadInt32::Index_0' has a wrong offset!");
static_assert(offsetof(WitchItPacket_ReadInt32, AdvancedPosition) == 0x000004, "Member 'WitchItPacket_ReadInt32::AdvancedPosition' has a wrong offset!");
static_assert(offsetof(WitchItPacket_ReadInt32, ReturnValue) == 0x000008, "Member 'WitchItPacket_ReadInt32::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.WitchItPacket.ReadInt64
// 0x0010 (0x0010 - 0x0000)
struct WitchItPacket_ReadInt64 final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdvancedPosition;                                  // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WitchItPacket_ReadInt64) == 0x000008, "Wrong alignment on WitchItPacket_ReadInt64");
static_assert(sizeof(WitchItPacket_ReadInt64) == 0x000010, "Wrong size on WitchItPacket_ReadInt64");
static_assert(offsetof(WitchItPacket_ReadInt64, Index_0) == 0x000000, "Member 'WitchItPacket_ReadInt64::Index_0' has a wrong offset!");
static_assert(offsetof(WitchItPacket_ReadInt64, AdvancedPosition) == 0x000004, "Member 'WitchItPacket_ReadInt64::AdvancedPosition' has a wrong offset!");
static_assert(offsetof(WitchItPacket_ReadInt64, ReturnValue) == 0x000008, "Member 'WitchItPacket_ReadInt64::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.WitchItPacket.ReadInt8
// 0x000C (0x000C - 0x0000)
struct WitchItPacket_ReadInt8 final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdvancedPosition;                                  // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WitchItPacket_ReadInt8) == 0x000004, "Wrong alignment on WitchItPacket_ReadInt8");
static_assert(sizeof(WitchItPacket_ReadInt8) == 0x00000C, "Wrong size on WitchItPacket_ReadInt8");
static_assert(offsetof(WitchItPacket_ReadInt8, Index_0) == 0x000000, "Member 'WitchItPacket_ReadInt8::Index_0' has a wrong offset!");
static_assert(offsetof(WitchItPacket_ReadInt8, AdvancedPosition) == 0x000004, "Member 'WitchItPacket_ReadInt8::AdvancedPosition' has a wrong offset!");
static_assert(offsetof(WitchItPacket_ReadInt8, ReturnValue) == 0x000008, "Member 'WitchItPacket_ReadInt8::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.WitchItPacket.ReadString
// 0x0018 (0x0018 - 0x0000)
struct WitchItPacket_ReadString final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdvancedPosition;                                  // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WitchItPacket_ReadString) == 0x000008, "Wrong alignment on WitchItPacket_ReadString");
static_assert(sizeof(WitchItPacket_ReadString) == 0x000018, "Wrong size on WitchItPacket_ReadString");
static_assert(offsetof(WitchItPacket_ReadString, Index_0) == 0x000000, "Member 'WitchItPacket_ReadString::Index_0' has a wrong offset!");
static_assert(offsetof(WitchItPacket_ReadString, AdvancedPosition) == 0x000004, "Member 'WitchItPacket_ReadString::AdvancedPosition' has a wrong offset!");
static_assert(offsetof(WitchItPacket_ReadString, ReturnValue) == 0x000008, "Member 'WitchItPacket_ReadString::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.WitchItPacket.ReadUInt16
// 0x000C (0x000C - 0x0000)
struct WitchItPacket_ReadUInt16 final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdvancedPosition;                                  // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        ReturnValue;                                       // 0x0008(0x0002)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WitchItPacket_ReadUInt16) == 0x000004, "Wrong alignment on WitchItPacket_ReadUInt16");
static_assert(sizeof(WitchItPacket_ReadUInt16) == 0x00000C, "Wrong size on WitchItPacket_ReadUInt16");
static_assert(offsetof(WitchItPacket_ReadUInt16, Index_0) == 0x000000, "Member 'WitchItPacket_ReadUInt16::Index_0' has a wrong offset!");
static_assert(offsetof(WitchItPacket_ReadUInt16, AdvancedPosition) == 0x000004, "Member 'WitchItPacket_ReadUInt16::AdvancedPosition' has a wrong offset!");
static_assert(offsetof(WitchItPacket_ReadUInt16, ReturnValue) == 0x000008, "Member 'WitchItPacket_ReadUInt16::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.WitchItPacket.ReadUInt32
// 0x000C (0x000C - 0x0000)
struct WitchItPacket_ReadUInt32 final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdvancedPosition;                                  // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WitchItPacket_ReadUInt32) == 0x000004, "Wrong alignment on WitchItPacket_ReadUInt32");
static_assert(sizeof(WitchItPacket_ReadUInt32) == 0x00000C, "Wrong size on WitchItPacket_ReadUInt32");
static_assert(offsetof(WitchItPacket_ReadUInt32, Index_0) == 0x000000, "Member 'WitchItPacket_ReadUInt32::Index_0' has a wrong offset!");
static_assert(offsetof(WitchItPacket_ReadUInt32, AdvancedPosition) == 0x000004, "Member 'WitchItPacket_ReadUInt32::AdvancedPosition' has a wrong offset!");
static_assert(offsetof(WitchItPacket_ReadUInt32, ReturnValue) == 0x000008, "Member 'WitchItPacket_ReadUInt32::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.WitchItPacket.ReadUInt64
// 0x0010 (0x0010 - 0x0000)
struct WitchItPacket_ReadUInt64 final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdvancedPosition;                                  // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WitchItPacket_ReadUInt64) == 0x000008, "Wrong alignment on WitchItPacket_ReadUInt64");
static_assert(sizeof(WitchItPacket_ReadUInt64) == 0x000010, "Wrong size on WitchItPacket_ReadUInt64");
static_assert(offsetof(WitchItPacket_ReadUInt64, Index_0) == 0x000000, "Member 'WitchItPacket_ReadUInt64::Index_0' has a wrong offset!");
static_assert(offsetof(WitchItPacket_ReadUInt64, AdvancedPosition) == 0x000004, "Member 'WitchItPacket_ReadUInt64::AdvancedPosition' has a wrong offset!");
static_assert(offsetof(WitchItPacket_ReadUInt64, ReturnValue) == 0x000008, "Member 'WitchItPacket_ReadUInt64::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.WitchItPacket.ReadUInt8
// 0x000C (0x000C - 0x0000)
struct WitchItPacket_ReadUInt8 final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdvancedPosition;                                  // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WitchItPacket_ReadUInt8) == 0x000004, "Wrong alignment on WitchItPacket_ReadUInt8");
static_assert(sizeof(WitchItPacket_ReadUInt8) == 0x00000C, "Wrong size on WitchItPacket_ReadUInt8");
static_assert(offsetof(WitchItPacket_ReadUInt8, Index_0) == 0x000000, "Member 'WitchItPacket_ReadUInt8::Index_0' has a wrong offset!");
static_assert(offsetof(WitchItPacket_ReadUInt8, AdvancedPosition) == 0x000004, "Member 'WitchItPacket_ReadUInt8::AdvancedPosition' has a wrong offset!");
static_assert(offsetof(WitchItPacket_ReadUInt8, ReturnValue) == 0x000008, "Member 'WitchItPacket_ReadUInt8::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.WitchItPacket.SerializeToBytes
// 0x0010 (0x0010 - 0x0000)
struct WitchItPacket_SerializeToBytes final
{
public:
	TArray<uint8>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WitchItPacket_SerializeToBytes) == 0x000008, "Wrong alignment on WitchItPacket_SerializeToBytes");
static_assert(sizeof(WitchItPacket_SerializeToBytes) == 0x000010, "Wrong size on WitchItPacket_SerializeToBytes");
static_assert(offsetof(WitchItPacket_SerializeToBytes, ReturnValue) == 0x000000, "Member 'WitchItPacket_SerializeToBytes::ReturnValue' has a wrong offset!");

}

