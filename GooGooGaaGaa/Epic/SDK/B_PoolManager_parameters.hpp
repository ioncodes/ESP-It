#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_PoolManager

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function B_PoolManager.B_PoolManager_C.AddActorToPool
// 0x0018 (0x0018 - 0x0000)
struct B_PoolManager_C_AddActorToPool final
{
public:
	class UB_Pool_C*                              Pool;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ActorToAdd;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_PoolManager_C_AddActorToPool) == 0x000008, "Wrong alignment on B_PoolManager_C_AddActorToPool");
static_assert(sizeof(B_PoolManager_C_AddActorToPool) == 0x000018, "Wrong size on B_PoolManager_C_AddActorToPool");
static_assert(offsetof(B_PoolManager_C_AddActorToPool, Pool) == 0x000000, "Member 'B_PoolManager_C_AddActorToPool::Pool' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_AddActorToPool, ActorToAdd) == 0x000008, "Member 'B_PoolManager_C_AddActorToPool::ActorToAdd' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_AddActorToPool, CallFunc_Array_Add_ReturnValue) == 0x000010, "Member 'B_PoolManager_C_AddActorToPool::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function B_PoolManager.B_PoolManager_C.AddPoolIfNewClass
// 0x0028 (0x0028 - 0x0000)
struct B_PoolManager_C_AddPoolIfNewClass final
{
public:
	const class UClass*                           Pool_Class_To_Add;                                 // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	class UB_Pool_C*                              Pool_To_Add;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_PoolOfClassExists_ReturnValue;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_Pool_C*                              CallFunc_CreateObject_Object;                      // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_PoolManager_C_AddPoolIfNewClass) == 0x000008, "Wrong alignment on B_PoolManager_C_AddPoolIfNewClass");
static_assert(sizeof(B_PoolManager_C_AddPoolIfNewClass) == 0x000028, "Wrong size on B_PoolManager_C_AddPoolIfNewClass");
static_assert(offsetof(B_PoolManager_C_AddPoolIfNewClass, Pool_Class_To_Add) == 0x000000, "Member 'B_PoolManager_C_AddPoolIfNewClass::Pool_Class_To_Add' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_AddPoolIfNewClass, Pool_To_Add) == 0x000008, "Member 'B_PoolManager_C_AddPoolIfNewClass::Pool_To_Add' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_AddPoolIfNewClass, CallFunc_PoolOfClassExists_ReturnValue) == 0x000010, "Member 'B_PoolManager_C_AddPoolIfNewClass::CallFunc_PoolOfClassExists_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_AddPoolIfNewClass, CallFunc_Not_PreBool_ReturnValue) == 0x000011, "Member 'B_PoolManager_C_AddPoolIfNewClass::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_AddPoolIfNewClass, CallFunc_CreateObject_Object) == 0x000018, "Member 'B_PoolManager_C_AddPoolIfNewClass::CallFunc_CreateObject_Object' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_AddPoolIfNewClass, CallFunc_Array_Add_ReturnValue) == 0x000020, "Member 'B_PoolManager_C_AddPoolIfNewClass::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function B_PoolManager.B_PoolManager_C.EmptyPools
// 0x0020 (0x0020 - 0x0000)
struct B_PoolManager_C_EmptyPools final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UB_Pool_C*                              CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_PoolManager_C_EmptyPools) == 0x000008, "Wrong alignment on B_PoolManager_C_EmptyPools");
static_assert(sizeof(B_PoolManager_C_EmptyPools) == 0x000020, "Wrong size on B_PoolManager_C_EmptyPools");
static_assert(offsetof(B_PoolManager_C_EmptyPools, Temp_int_Array_Index_Variable) == 0x000000, "Member 'B_PoolManager_C_EmptyPools::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_EmptyPools, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'B_PoolManager_C_EmptyPools::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_EmptyPools, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'B_PoolManager_C_EmptyPools::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_EmptyPools, CallFunc_Array_Length_ReturnValue) == 0x00000C, "Member 'B_PoolManager_C_EmptyPools::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_EmptyPools, CallFunc_Array_Get_Item) == 0x000010, "Member 'B_PoolManager_C_EmptyPools::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_EmptyPools, CallFunc_Less_IntInt_ReturnValue) == 0x000018, "Member 'B_PoolManager_C_EmptyPools::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function B_PoolManager.B_PoolManager_C.GetPoolByClass
// 0x0020 (0x0020 - 0x0000)
struct B_PoolManager_C_GetPoolByClass final
{
public:
	class UClass*                                 Class_0;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_Pool_C*                              Pool;                                              // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_Pool_C*                              CallFunc_Map_Find_Value;                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_PoolManager_C_GetPoolByClass) == 0x000008, "Wrong alignment on B_PoolManager_C_GetPoolByClass");
static_assert(sizeof(B_PoolManager_C_GetPoolByClass) == 0x000020, "Wrong size on B_PoolManager_C_GetPoolByClass");
static_assert(offsetof(B_PoolManager_C_GetPoolByClass, Class_0) == 0x000000, "Member 'B_PoolManager_C_GetPoolByClass::Class_0' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_GetPoolByClass, Pool) == 0x000008, "Member 'B_PoolManager_C_GetPoolByClass::Pool' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_GetPoolByClass, CallFunc_Map_Find_Value) == 0x000010, "Member 'B_PoolManager_C_GetPoolByClass::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_GetPoolByClass, CallFunc_Map_Find_ReturnValue) == 0x000018, "Member 'B_PoolManager_C_GetPoolByClass::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function B_PoolManager.B_PoolManager_C.MoveActorToPoolAndTearDown
// 0x0040 (0x0040 - 0x0000)
struct B_PoolManager_C_MoveActorToPoolAndTearDown final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_Pool_C*                              CallFunc_GetPoolByClass_Pool;                      // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue_1;             // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IIPoolObject_C>        K2Node_DynamicCast_AsIPool_Object;                 // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_PoolManager_C_MoveActorToPoolAndTearDown) == 0x000008, "Wrong alignment on B_PoolManager_C_MoveActorToPoolAndTearDown");
static_assert(sizeof(B_PoolManager_C_MoveActorToPoolAndTearDown) == 0x000040, "Wrong size on B_PoolManager_C_MoveActorToPoolAndTearDown");
static_assert(offsetof(B_PoolManager_C_MoveActorToPoolAndTearDown, Actor) == 0x000000, "Member 'B_PoolManager_C_MoveActorToPoolAndTearDown::Actor' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_MoveActorToPoolAndTearDown, CallFunc_GetObjectClass_ReturnValue) == 0x000008, "Member 'B_PoolManager_C_MoveActorToPoolAndTearDown::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_MoveActorToPoolAndTearDown, CallFunc_GetPoolByClass_Pool) == 0x000010, "Member 'B_PoolManager_C_MoveActorToPoolAndTearDown::CallFunc_GetPoolByClass_Pool' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_MoveActorToPoolAndTearDown, CallFunc_GetObjectClass_ReturnValue_1) == 0x000018, "Member 'B_PoolManager_C_MoveActorToPoolAndTearDown::CallFunc_GetObjectClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_MoveActorToPoolAndTearDown, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'B_PoolManager_C_MoveActorToPoolAndTearDown::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_MoveActorToPoolAndTearDown, K2Node_DynamicCast_AsIPool_Object) == 0x000028, "Member 'B_PoolManager_C_MoveActorToPoolAndTearDown::K2Node_DynamicCast_AsIPool_Object' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_MoveActorToPoolAndTearDown, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'B_PoolManager_C_MoveActorToPoolAndTearDown::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function B_PoolManager.B_PoolManager_C.PoolHasActorReady
// 0x0028 (0x0028 - 0x0000)
struct B_PoolManager_C_PoolHasActorReady final
{
public:
	class UClass*                                 Class_0;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          PoolFilled;                                        // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_Pool_C*                              CallFunc_GetPoolByClass_Pool;                      // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_PoolManager_C_PoolHasActorReady) == 0x000008, "Wrong alignment on B_PoolManager_C_PoolHasActorReady");
static_assert(sizeof(B_PoolManager_C_PoolHasActorReady) == 0x000028, "Wrong size on B_PoolManager_C_PoolHasActorReady");
static_assert(offsetof(B_PoolManager_C_PoolHasActorReady, Class_0) == 0x000000, "Member 'B_PoolManager_C_PoolHasActorReady::Class_0' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_PoolHasActorReady, PoolFilled) == 0x000008, "Member 'B_PoolManager_C_PoolHasActorReady::PoolFilled' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_PoolHasActorReady, CallFunc_GetPoolByClass_Pool) == 0x000010, "Member 'B_PoolManager_C_PoolHasActorReady::CallFunc_GetPoolByClass_Pool' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_PoolHasActorReady, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'B_PoolManager_C_PoolHasActorReady::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_PoolHasActorReady, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'B_PoolManager_C_PoolHasActorReady::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_PoolHasActorReady, CallFunc_Greater_IntInt_ReturnValue) == 0x000020, "Member 'B_PoolManager_C_PoolHasActorReady::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function B_PoolManager.B_PoolManager_C.PoolOfClassExists
// 0x0028 (0x0028 - 0x0000)
struct B_PoolManager_C_PoolOfClassExists final
{
public:
	const class UClass*                           ClassToFind;                                       // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         CallFunc_Map_Keys_Keys;                            // 0x0010(0x0010)(ReferenceParm)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_PoolManager_C_PoolOfClassExists) == 0x000008, "Wrong alignment on B_PoolManager_C_PoolOfClassExists");
static_assert(sizeof(B_PoolManager_C_PoolOfClassExists) == 0x000028, "Wrong size on B_PoolManager_C_PoolOfClassExists");
static_assert(offsetof(B_PoolManager_C_PoolOfClassExists, ClassToFind) == 0x000000, "Member 'B_PoolManager_C_PoolOfClassExists::ClassToFind' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_PoolOfClassExists, ReturnValue) == 0x000008, "Member 'B_PoolManager_C_PoolOfClassExists::ReturnValue' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_PoolOfClassExists, CallFunc_Map_Keys_Keys) == 0x000010, "Member 'B_PoolManager_C_PoolOfClassExists::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_PoolOfClassExists, CallFunc_Array_Contains_ReturnValue) == 0x000020, "Member 'B_PoolManager_C_PoolOfClassExists::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");

// Function B_PoolManager.B_PoolManager_C.RemoveActorFromPool
// 0x0018 (0x0018 - 0x0000)
struct B_PoolManager_C_RemoveActorFromPool final
{
public:
	class UB_Pool_C*                              Pool;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ActorToRemove;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_PoolManager_C_RemoveActorFromPool) == 0x000008, "Wrong alignment on B_PoolManager_C_RemoveActorFromPool");
static_assert(sizeof(B_PoolManager_C_RemoveActorFromPool) == 0x000018, "Wrong size on B_PoolManager_C_RemoveActorFromPool");
static_assert(offsetof(B_PoolManager_C_RemoveActorFromPool, Pool) == 0x000000, "Member 'B_PoolManager_C_RemoveActorFromPool::Pool' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_RemoveActorFromPool, ActorToRemove) == 0x000008, "Member 'B_PoolManager_C_RemoveActorFromPool::ActorToRemove' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_RemoveActorFromPool, CallFunc_Array_RemoveItem_ReturnValue) == 0x000010, "Member 'B_PoolManager_C_RemoveActorFromPool::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");

// Function B_PoolManager.B_PoolManager_C.SpawnActorAndTearUp
// 0x00C0 (0x00C0 - 0x0000)
struct B_PoolManager_C_SpawnActorAndTearUp final
{
public:
	class UClass*                                 Class_0;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnTransform;                                    // 0x0010(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESpawnActorCollisionHandlingMethod            CollisionHandlingOverride;                         // 0x0070(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Owner;                                             // 0x0078(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  Instigator;                                        // 0x0080(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ReturnValue;                                       // 0x0088(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ActorToActivate;                                   // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IIPoolObject_C>        K2Node_DynamicCast_AsIPool_Object;                 // 0x00A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_FinishSpawningActor_ReturnValue;          // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_PoolManager_C_SpawnActorAndTearUp) == 0x000010, "Wrong alignment on B_PoolManager_C_SpawnActorAndTearUp");
static_assert(sizeof(B_PoolManager_C_SpawnActorAndTearUp) == 0x0000C0, "Wrong size on B_PoolManager_C_SpawnActorAndTearUp");
static_assert(offsetof(B_PoolManager_C_SpawnActorAndTearUp, Class_0) == 0x000000, "Member 'B_PoolManager_C_SpawnActorAndTearUp::Class_0' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_SpawnActorAndTearUp, SpawnTransform) == 0x000010, "Member 'B_PoolManager_C_SpawnActorAndTearUp::SpawnTransform' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_SpawnActorAndTearUp, CollisionHandlingOverride) == 0x000070, "Member 'B_PoolManager_C_SpawnActorAndTearUp::CollisionHandlingOverride' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_SpawnActorAndTearUp, Owner) == 0x000078, "Member 'B_PoolManager_C_SpawnActorAndTearUp::Owner' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_SpawnActorAndTearUp, Instigator) == 0x000080, "Member 'B_PoolManager_C_SpawnActorAndTearUp::Instigator' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_SpawnActorAndTearUp, ReturnValue) == 0x000088, "Member 'B_PoolManager_C_SpawnActorAndTearUp::ReturnValue' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_SpawnActorAndTearUp, ActorToActivate) == 0x000090, "Member 'B_PoolManager_C_SpawnActorAndTearUp::ActorToActivate' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_SpawnActorAndTearUp, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000098, "Member 'B_PoolManager_C_SpawnActorAndTearUp::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_SpawnActorAndTearUp, K2Node_DynamicCast_AsIPool_Object) == 0x0000A0, "Member 'B_PoolManager_C_SpawnActorAndTearUp::K2Node_DynamicCast_AsIPool_Object' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_SpawnActorAndTearUp, K2Node_DynamicCast_bSuccess) == 0x0000B0, "Member 'B_PoolManager_C_SpawnActorAndTearUp::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_SpawnActorAndTearUp, CallFunc_FinishSpawningActor_ReturnValue) == 0x0000B8, "Member 'B_PoolManager_C_SpawnActorAndTearUp::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");

// Function B_PoolManager.B_PoolManager_C.TakeActorFromPoolAndTearUp
// 0x00E0 (0x00E0 - 0x0000)
struct B_PoolManager_C_TakeActorFromPoolAndTearUp final
{
public:
	class UClass*                                 Class_0;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnTransform;                                    // 0x0010(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESpawnActorCollisionHandlingMethod            CollisionHandlingOverride;                         // 0x0070(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Owner;                                             // 0x0078(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  Instigator;                                        // 0x0080(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ReturnValue;                                       // 0x0088(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
	class UB_Pool_C*                              Pool;                                              // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ActorToTake;                                       // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class UB_Pool_C*                              CallFunc_GetPoolByClass_Pool;                      // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_SpawnActorOrTakeFromPool_ReturnValue;     // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IIPoolObject_C>        K2Node_DynamicCast_AsIPool_Object;                 // 0x00B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_PoolManager_C_TakeActorFromPoolAndTearUp) == 0x000010, "Wrong alignment on B_PoolManager_C_TakeActorFromPoolAndTearUp");
static_assert(sizeof(B_PoolManager_C_TakeActorFromPoolAndTearUp) == 0x0000E0, "Wrong size on B_PoolManager_C_TakeActorFromPoolAndTearUp");
static_assert(offsetof(B_PoolManager_C_TakeActorFromPoolAndTearUp, Class_0) == 0x000000, "Member 'B_PoolManager_C_TakeActorFromPoolAndTearUp::Class_0' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_TakeActorFromPoolAndTearUp, SpawnTransform) == 0x000010, "Member 'B_PoolManager_C_TakeActorFromPoolAndTearUp::SpawnTransform' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_TakeActorFromPoolAndTearUp, CollisionHandlingOverride) == 0x000070, "Member 'B_PoolManager_C_TakeActorFromPoolAndTearUp::CollisionHandlingOverride' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_TakeActorFromPoolAndTearUp, Owner) == 0x000078, "Member 'B_PoolManager_C_TakeActorFromPoolAndTearUp::Owner' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_TakeActorFromPoolAndTearUp, Instigator) == 0x000080, "Member 'B_PoolManager_C_TakeActorFromPoolAndTearUp::Instigator' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_TakeActorFromPoolAndTearUp, ReturnValue) == 0x000088, "Member 'B_PoolManager_C_TakeActorFromPoolAndTearUp::ReturnValue' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_TakeActorFromPoolAndTearUp, Pool) == 0x000090, "Member 'B_PoolManager_C_TakeActorFromPoolAndTearUp::Pool' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_TakeActorFromPoolAndTearUp, ActorToTake) == 0x000098, "Member 'B_PoolManager_C_TakeActorFromPoolAndTearUp::ActorToTake' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_TakeActorFromPoolAndTearUp, CallFunc_GetPoolByClass_Pool) == 0x0000A0, "Member 'B_PoolManager_C_TakeActorFromPoolAndTearUp::CallFunc_GetPoolByClass_Pool' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_TakeActorFromPoolAndTearUp, CallFunc_SpawnActorOrTakeFromPool_ReturnValue) == 0x0000A8, "Member 'B_PoolManager_C_TakeActorFromPoolAndTearUp::CallFunc_SpawnActorOrTakeFromPool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_TakeActorFromPoolAndTearUp, CallFunc_IsValid_ReturnValue) == 0x0000B0, "Member 'B_PoolManager_C_TakeActorFromPoolAndTearUp::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_TakeActorFromPoolAndTearUp, K2Node_DynamicCast_AsIPool_Object) == 0x0000B8, "Member 'B_PoolManager_C_TakeActorFromPoolAndTearUp::K2Node_DynamicCast_AsIPool_Object' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_TakeActorFromPoolAndTearUp, K2Node_DynamicCast_bSuccess) == 0x0000C8, "Member 'B_PoolManager_C_TakeActorFromPoolAndTearUp::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_PoolManager_C_TakeActorFromPoolAndTearUp, CallFunc_Array_Get_Item) == 0x0000D0, "Member 'B_PoolManager_C_TakeActorFromPoolAndTearUp::CallFunc_Array_Get_Item' has a wrong offset!");

}

