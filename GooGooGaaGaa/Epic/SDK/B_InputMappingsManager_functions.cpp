#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_InputMappingsManager

#include "Basic.hpp"

#include "B_InputMappingsManager_classes.hpp"
#include "B_InputMappingsManager_parameters.hpp"


namespace SDK
{

// Function B_InputMappingsManager.B_InputMappingsManager_C.AddActionBinding
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ActionName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UB_InputMappingsManager_C::AddActionBinding(class FName ActionName, const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InputMappingsManager_C", "AddActionBinding");

	Params::B_InputMappingsManager_C_AddActionBinding Parms{};

	Parms.ActionName = ActionName;
	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_InputMappingsManager.B_InputMappingsManager_C.AddControllerMappings
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FSControllerBinding>      ControllerLayoutRef                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UB_InputMappingsManager_C::AddControllerMappings(TArray<struct FSControllerBinding>& ControllerLayoutRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InputMappingsManager_C", "AddControllerMappings");

	Params::B_InputMappingsManager_C_AddControllerMappings Parms{};

	Parms.ControllerLayoutRef = std::move(ControllerLayoutRef);

	UObject::ProcessEvent(Func, &Parms);

	ControllerLayoutRef = std::move(Parms.ControllerLayoutRef);
}


// Function B_InputMappingsManager.B_InputMappingsManager_C.AreActionMappingsSameLength
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             ActionName                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TMap<class FName, struct FSActionMappings>CurrentActionMappings_0                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TMap<class FName, struct FSActionMappings>ActionMappings                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UB_InputMappingsManager_C::AreActionMappingsSameLength(const class FName& ActionName, const TMap<class FName, struct FSActionMappings>& CurrentActionMappings_0, const TMap<class FName, struct FSActionMappings>& ActionMappings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InputMappingsManager_C", "AreActionMappingsSameLength");

	Params::B_InputMappingsManager_C_AreActionMappingsSameLength Parms{};

	Parms.ActionName = ActionName;
	Parms.CurrentActionMappings_0 = std::move(CurrentActionMappings_0);
	Parms.ActionMappings = std::move(ActionMappings);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_InputMappingsManager.B_InputMappingsManager_C.AreAxisMappingsSameLength
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             AxisName                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TMap<class FName, struct FSAxisMappings>CurrentAxisMappings_0                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TMap<class FName, struct FSAxisMappings>AxisMappings                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UB_InputMappingsManager_C::AreAxisMappingsSameLength(const class FName& AxisName, const TMap<class FName, struct FSAxisMappings>& CurrentAxisMappings_0, const TMap<class FName, struct FSAxisMappings>& AxisMappings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InputMappingsManager_C", "AreAxisMappingsSameLength");

	Params::B_InputMappingsManager_C_AreAxisMappingsSameLength Parms{};

	Parms.AxisName = AxisName;
	Parms.CurrentAxisMappings_0 = std::move(CurrentAxisMappings_0);
	Parms.AxisMappings = std::move(AxisMappings);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_InputMappingsManager.B_InputMappingsManager_C.ChangeControllerLayout
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EControllerLayout                       ControllerLayout                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_InputMappingsManager_C::ChangeControllerLayout(EControllerLayout ControllerLayout)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InputMappingsManager_C", "ChangeControllerLayout");

	Params::B_InputMappingsManager_C_ChangeControllerLayout Parms{};

	Parms.ControllerLayout = ControllerLayout;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_InputMappingsManager.B_InputMappingsManager_C.ExecuteUbergraph_B_InputMappingsManager
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_InputMappingsManager_C::ExecuteUbergraph_B_InputMappingsManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InputMappingsManager_C", "ExecuteUbergraph_B_InputMappingsManager");

	Params::B_InputMappingsManager_C_ExecuteUbergraph_B_InputMappingsManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_InputMappingsManager.B_InputMappingsManager_C.GetActionMappingFor
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// struct FInputActionKeyMapping           ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FInputActionKeyMapping UB_InputMappingsManager_C::GetActionMappingFor(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InputMappingsManager_C", "GetActionMappingFor");

	Params::B_InputMappingsManager_C_GetActionMappingFor Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_InputMappingsManager.B_InputMappingsManager_C.GetAxisMappingFor
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// struct FInputAxisKeyMapping             ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FInputAxisKeyMapping UB_InputMappingsManager_C::GetAxisMappingFor(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InputMappingsManager_C", "GetAxisMappingFor");

	Params::B_InputMappingsManager_C_GetAxisMappingFor Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_InputMappingsManager.B_InputMappingsManager_C.GetAxisName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FSAxisToEdit                     AxisToEdit                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class FName UB_InputMappingsManager_C::GetAxisName(const struct FSAxisToEdit& AxisToEdit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InputMappingsManager_C", "GetAxisName");

	Params::B_InputMappingsManager_C_GetAxisName Parms{};

	Parms.AxisToEdit = std::move(AxisToEdit);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_InputMappingsManager.B_InputMappingsManager_C.GetCurrentMappings
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TMap<class FName, struct FSActionMappings>ActionMappings                                         (Parm, OutParm)
// TMap<class FName, struct FSAxisMappings>AxisMappings                                           (Parm, OutParm)

void UB_InputMappingsManager_C::GetCurrentMappings(TMap<class FName, struct FSActionMappings>* ActionMappings, TMap<class FName, struct FSAxisMappings>* AxisMappings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InputMappingsManager_C", "GetCurrentMappings");

	Params::B_InputMappingsManager_C_GetCurrentMappings Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ActionMappings != nullptr)
		*ActionMappings = std::move(Parms.ActionMappings);

	if (AxisMappings != nullptr)
		*AxisMappings = std::move(Parms.AxisMappings);
}


// Function B_InputMappingsManager.B_InputMappingsManager_C.Initialize
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UGameInstance*                    InGameInstance                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UB_InputMappingsManager_C::Initialize(class UGameInstance* InGameInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InputMappingsManager_C", "Initialize");

	Params::B_InputMappingsManager_C_Initialize Parms{};

	Parms.InGameInstance = InGameInstance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_InputMappingsManager.B_InputMappingsManager_C.IsDirty
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDirty_0                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_InputMappingsManager_C::IsDirty(bool* bDirty_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InputMappingsManager_C", "IsDirty");

	Params::B_InputMappingsManager_C_IsDirty Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDirty_0 != nullptr)
		*bDirty_0 = Parms.bDirty_0;
}


// Function B_InputMappingsManager.B_InputMappingsManager_C.IsKeyForAction
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class FName                             Action                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UB_InputMappingsManager_C::IsKeyForAction(const struct FKey& Key, class FName Action)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InputMappingsManager_C", "IsKeyForAction");

	Params::B_InputMappingsManager_C_IsKeyForAction Parms{};

	Parms.Key = std::move(Key);
	Parms.Action = Action;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_InputMappingsManager.B_InputMappingsManager_C.OnMappingsChanged__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UB_InputMappingsManager_C::OnMappingsChanged__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InputMappingsManager_C", "OnMappingsChanged__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_InputMappingsManager.B_InputMappingsManager_C.OnMappingsChangedEvent
// (BlueprintCallable, BlueprintEvent)

void UB_InputMappingsManager_C::OnMappingsChangedEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InputMappingsManager_C", "OnMappingsChangedEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_InputMappingsManager.B_InputMappingsManager_C.RemoveControllerActionMappings
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UB_InputMappingsManager_C::RemoveControllerActionMappings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InputMappingsManager_C", "RemoveControllerActionMappings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_InputMappingsManager.B_InputMappingsManager_C.RemoveControllerMappings
// (Public, BlueprintCallable, BlueprintEvent)

void UB_InputMappingsManager_C::RemoveControllerMappings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InputMappingsManager_C", "RemoveControllerMappings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_InputMappingsManager.B_InputMappingsManager_C.ReverseLayout
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UB_InputMappingsManager_C::ReverseLayout()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InputMappingsManager_C", "ReverseLayout");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_InputMappingsManager.B_InputMappingsManager_C.RevertActionMappingsComplex
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ActionName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TMap<class FName, struct FSActionMappings>RestoredActionMappings                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UB_InputMappingsManager_C::RevertActionMappingsComplex(class FName ActionName, const TMap<class FName, struct FSActionMappings>& RestoredActionMappings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InputMappingsManager_C", "RevertActionMappingsComplex");

	Params::B_InputMappingsManager_C_RevertActionMappingsComplex Parms{};

	Parms.ActionName = ActionName;
	Parms.RestoredActionMappings = std::move(RestoredActionMappings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_InputMappingsManager.B_InputMappingsManager_C.RevertActionMappingsSimple
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ActionName                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_InputMappingsManager_C::RevertActionMappingsSimple(const class FName& ActionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InputMappingsManager_C", "RevertActionMappingsSimple");

	Params::B_InputMappingsManager_C_RevertActionMappingsSimple Parms{};

	Parms.ActionName = ActionName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_InputMappingsManager.B_InputMappingsManager_C.RevertAxisMappingsComplex
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ActionName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TMap<class FName, struct FSAxisMappings>RestoredAxisMappings                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UB_InputMappingsManager_C::RevertAxisMappingsComplex(class FName ActionName, const TMap<class FName, struct FSAxisMappings>& RestoredAxisMappings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InputMappingsManager_C", "RevertAxisMappingsComplex");

	Params::B_InputMappingsManager_C_RevertAxisMappingsComplex Parms{};

	Parms.ActionName = ActionName;
	Parms.RestoredAxisMappings = std::move(RestoredAxisMappings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_InputMappingsManager.B_InputMappingsManager_C.RevertAxisMappingsSimple
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Key                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_InputMappingsManager_C::RevertAxisMappingsSimple(const class FName& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InputMappingsManager_C", "RevertAxisMappingsSimple");

	Params::B_InputMappingsManager_C_RevertAxisMappingsSimple Parms{};

	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_InputMappingsManager.B_InputMappingsManager_C.RevertRestoringMappings
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UB_InputMappingsManager_C::RevertRestoringMappings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InputMappingsManager_C", "RevertRestoringMappings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_InputMappingsManager.B_InputMappingsManager_C.StoreCurrentMappings
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UB_InputMappingsManager_C::StoreCurrentMappings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InputMappingsManager_C", "StoreCurrentMappings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_InputMappingsManager.B_InputMappingsManager_C.SwapActionMappings
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FInputActionKeyMapping           A                                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FInputActionKeyMapping           B                                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UB_InputMappingsManager_C::SwapActionMappings(struct FInputActionKeyMapping& A, struct FInputActionKeyMapping& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InputMappingsManager_C", "SwapActionMappings");

	Params::B_InputMappingsManager_C_SwapActionMappings Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	UObject::ProcessEvent(Func, &Parms);

	A = std::move(Parms.A);
	B = std::move(Parms.B);
}


// Function B_InputMappingsManager.B_InputMappingsManager_C.SwapAxisMappings
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FInputAxisKeyMapping             A                                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FInputAxisKeyMapping             B                                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UB_InputMappingsManager_C::SwapAxisMappings(struct FInputAxisKeyMapping& A, struct FInputAxisKeyMapping& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InputMappingsManager_C", "SwapAxisMappings");

	Params::B_InputMappingsManager_C_SwapAxisMappings Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	UObject::ProcessEvent(Func, &Parms);

	A = std::move(Parms.A);
	B = std::move(Parms.B);
}

}

