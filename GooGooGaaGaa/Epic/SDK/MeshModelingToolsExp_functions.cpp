#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MeshModelingToolsExp

#include "Basic.hpp"

#include "MeshModelingToolsExp_classes.hpp"
#include "MeshModelingToolsExp_parameters.hpp"


namespace SDK
{

// Function MeshModelingToolsExp.BakeInputMeshProperties.GetSourceUVLayerNamesFunc
// (Final, Native, Public, Const)
// Parameters:
// const TArray<class FString>             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class FString> UBakeInputMeshProperties::GetSourceUVLayerNamesFunc() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BakeInputMeshProperties", "GetSourceUVLayerNamesFunc");

	Params::BakeInputMeshProperties_GetSourceUVLayerNamesFunc Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MeshModelingToolsExp.BakeInputMeshProperties.GetTargetUVLayerNamesFunc
// (Final, Native, Public, Const)
// Parameters:
// const TArray<class FString>             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class FString> UBakeInputMeshProperties::GetTargetUVLayerNamesFunc() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BakeInputMeshProperties", "GetTargetUVLayerNamesFunc");

	Params::BakeInputMeshProperties_GetTargetUVLayerNamesFunc Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MeshModelingToolsExp.LatticeDeformerToolProperties.ClearConstraints
// (Final, Native, Public)

void ULatticeDeformerToolProperties::ClearConstraints()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LatticeDeformerToolProperties", "ClearConstraints");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.LatticeDeformerToolProperties.Constrain
// (Final, Native, Public)

void ULatticeDeformerToolProperties::Constrain()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LatticeDeformerToolProperties", "Constrain");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.BakeTexture2DProperties.GetUVLayerNamesFunc
// (Final, Native, Public, Const)
// Parameters:
// const TArray<class FString>             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class FString> UBakeTexture2DProperties::GetUVLayerNamesFunc() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BakeTexture2DProperties", "GetUVLayerNamesFunc");

	Params::BakeTexture2DProperties_GetUVLayerNamesFunc Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MeshModelingToolsExp.BakeMultiTexture2DProperties.GetUVLayerNamesFunc
// (Final, Native, Public, Const)
// Parameters:
// const TArray<class FString>             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class FString> UBakeMultiTexture2DProperties::GetUVLayerNamesFunc() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BakeMultiTexture2DProperties", "GetUVLayerNamesFunc");

	Params::BakeMultiTexture2DProperties_GetUVLayerNamesFunc Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MeshModelingToolsExp.MeshGroupPaintToolFreezeActions.ClearAll
// (Final, Native, Public)

void UMeshGroupPaintToolFreezeActions::ClearAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MeshGroupPaintToolFreezeActions", "ClearAll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.MeshGroupPaintToolFreezeActions.ClearCurrent
// (Final, Native, Public)

void UMeshGroupPaintToolFreezeActions::ClearCurrent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MeshGroupPaintToolFreezeActions", "ClearCurrent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.MeshGroupPaintToolFreezeActions.FloodFillCurrent
// (Final, Native, Public)

void UMeshGroupPaintToolFreezeActions::FloodFillCurrent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MeshGroupPaintToolFreezeActions", "FloodFillCurrent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.MeshGroupPaintToolFreezeActions.FreezeCurrent
// (Final, Native, Public)

void UMeshGroupPaintToolFreezeActions::FreezeCurrent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MeshGroupPaintToolFreezeActions", "FreezeCurrent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.MeshGroupPaintToolFreezeActions.FreezeOthers
// (Final, Native, Public)

void UMeshGroupPaintToolFreezeActions::FreezeOthers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MeshGroupPaintToolFreezeActions", "FreezeOthers");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.MeshGroupPaintToolFreezeActions.GrowCurrent
// (Final, Native, Public)

void UMeshGroupPaintToolFreezeActions::GrowCurrent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MeshGroupPaintToolFreezeActions", "GrowCurrent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.MeshGroupPaintToolFreezeActions.ShrinkCurrent
// (Final, Native, Public)

void UMeshGroupPaintToolFreezeActions::ShrinkCurrent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MeshGroupPaintToolFreezeActions", "ShrinkCurrent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.MeshGroupPaintToolFreezeActions.UnfreezeAll
// (Final, Native, Public)

void UMeshGroupPaintToolFreezeActions::UnfreezeAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MeshGroupPaintToolFreezeActions", "UnfreezeAll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.DisplaceMeshCommonProperties.GetWeightMapsFunc
// (Final, Native, Public)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UDisplaceMeshCommonProperties::GetWeightMapsFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DisplaceMeshCommonProperties", "GetWeightMapsFunc");

	Params::DisplaceMeshCommonProperties_GetWeightMapsFunc Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MeshModelingToolsExp.MeshVertexPaintToolQuickActions.EraseAll
// (Final, Native, Public)

void UMeshVertexPaintToolQuickActions::EraseAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MeshVertexPaintToolQuickActions", "EraseAll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.MeshVertexPaintToolQuickActions.FillBlack
// (Final, Native, Public)

void UMeshVertexPaintToolQuickActions::FillBlack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MeshVertexPaintToolQuickActions", "FillBlack");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.MeshVertexPaintToolQuickActions.FillWhite
// (Final, Native, Public)

void UMeshVertexPaintToolQuickActions::FillWhite()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MeshVertexPaintToolQuickActions", "FillWhite");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.MeshVertexPaintToolQuickActions.PaintAll
// (Final, Native, Public)

void UMeshVertexPaintToolQuickActions::PaintAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MeshVertexPaintToolQuickActions", "PaintAll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.MeshConstraintProperties.IsPreventNormalFlipsEnabled
// (Native, Protected, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMeshConstraintProperties::IsPreventNormalFlipsEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MeshConstraintProperties", "IsPreventNormalFlipsEnabled");

	Params::MeshConstraintProperties_IsPreventNormalFlipsEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MeshModelingToolsExp.MeshConstraintProperties.IsPreventTinyTrianglesEnabled
// (Native, Protected, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMeshConstraintProperties::IsPreventTinyTrianglesEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MeshConstraintProperties", "IsPreventTinyTrianglesEnabled");

	Params::MeshConstraintProperties_IsPreventTinyTrianglesEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MeshModelingToolsExp.RevolveSplineToolActionPropertySet.ResetAxis
// (Final, Native, Public)

void URevolveSplineToolActionPropertySet::ResetAxis()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RevolveSplineToolActionPropertySet", "ResetAxis");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.BakeMeshAttributeMapsToolProperties.GetMapPreviewNamesFunc
// (Final, Native, Public)
// Parameters:
// const TArray<class FString>             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class FString> UBakeMeshAttributeMapsToolProperties::GetMapPreviewNamesFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BakeMeshAttributeMapsToolProperties", "GetMapPreviewNamesFunc");

	Params::BakeMeshAttributeMapsToolProperties_GetMapPreviewNamesFunc Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MeshModelingToolsExp.BakeMultiMeshAttributeMapsToolProperties.GetMapPreviewNamesFunc
// (Final, Native, Public)
// Parameters:
// const TArray<class FString>             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class FString> UBakeMultiMeshAttributeMapsToolProperties::GetMapPreviewNamesFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BakeMultiMeshAttributeMapsToolProperties", "GetMapPreviewNamesFunc");

	Params::BakeMultiMeshAttributeMapsToolProperties_GetMapPreviewNamesFunc Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MeshModelingToolsExp.BakeMultiMeshInputToolProperties.GetTargetUVLayerNamesFunc
// (Final, Native, Public, Const)
// Parameters:
// const TArray<class FString>             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class FString> UBakeMultiMeshInputToolProperties::GetTargetUVLayerNamesFunc() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BakeMultiMeshInputToolProperties", "GetTargetUVLayerNamesFunc");

	Params::BakeMultiMeshInputToolProperties_GetTargetUVLayerNamesFunc Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MeshModelingToolsExp.OutputPolygroupLayerProperties.GetGroupOptionsList
// (Final, Native, Public)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UOutputPolygroupLayerProperties::GetGroupOptionsList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OutputPolygroupLayerProperties", "GetGroupOptionsList");

	Params::OutputPolygroupLayerProperties_GetGroupOptionsList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MeshModelingToolsExp.CubeGridToolActions.AcceptAndStartNew
// (Final, Native, Public)

void UCubeGridToolActions::AcceptAndStartNew()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CubeGridToolActions", "AcceptAndStartNew");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.CubeGridToolActions.CornerMode
// (Final, Native, Public)

void UCubeGridToolActions::CornerMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CubeGridToolActions", "CornerMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.CubeGridToolActions.Flip
// (Final, Native, Public)

void UCubeGridToolActions::Flip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CubeGridToolActions", "Flip");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.CubeGridToolActions.Pull
// (Final, Native, Public)

void UCubeGridToolActions::Pull()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CubeGridToolActions", "Pull");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.CubeGridToolActions.Push
// (Final, Native, Public)

void UCubeGridToolActions::Push()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CubeGridToolActions", "Push");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.CubeGridToolActions.ResetGridFromActor
// (Final, Native, Public)

void UCubeGridToolActions::ResetGridFromActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CubeGridToolActions", "ResetGridFromActor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.CubeGridToolActions.SlideBack
// (Final, Native, Public)

void UCubeGridToolActions::SlideBack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CubeGridToolActions", "SlideBack");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.CubeGridToolActions.SlideForward
// (Final, Native, Public)

void UCubeGridToolActions::SlideForward()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CubeGridToolActions", "SlideForward");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.SelectiveTessellationProperties.GetMaterialIDsFunc
// (Final, Native, Public)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> USelectiveTessellationProperties::GetMaterialIDsFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SelectiveTessellationProperties", "GetMaterialIDsFunc");

	Params::SelectiveTessellationProperties_GetMaterialIDsFunc Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MeshModelingToolsExp.DynamicSculptToolActions.DiscardAttributes
// (Final, Native, Public)

void UDynamicSculptToolActions::DiscardAttributes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicSculptToolActions", "DiscardAttributes");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.EditPivotToolActionPropertySet.Back
// (Final, Native, Public)

void UEditPivotToolActionPropertySet::Back()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditPivotToolActionPropertySet", "Back");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.EditPivotToolActionPropertySet.Bottom
// (Final, Native, Public)

void UEditPivotToolActionPropertySet::Bottom()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditPivotToolActionPropertySet", "Bottom");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.EditPivotToolActionPropertySet.Center
// (Final, Native, Public)

void UEditPivotToolActionPropertySet::Center()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditPivotToolActionPropertySet", "Center");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.EditPivotToolActionPropertySet.Front
// (Final, Native, Public)

void UEditPivotToolActionPropertySet::Front()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditPivotToolActionPropertySet", "Front");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.EditPivotToolActionPropertySet.Left
// (Final, Native, Public)

void UEditPivotToolActionPropertySet::Left()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditPivotToolActionPropertySet", "Left");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.EditPivotToolActionPropertySet.Right
// (Final, Native, Public)

void UEditPivotToolActionPropertySet::Right()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditPivotToolActionPropertySet", "Right");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.EditPivotToolActionPropertySet.Top
// (Final, Native, Public)

void UEditPivotToolActionPropertySet::Top()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditPivotToolActionPropertySet", "Top");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.EditPivotToolActionPropertySet.WorldOrigin
// (Final, Native, Public)

void UEditPivotToolActionPropertySet::WorldOrigin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditPivotToolActionPropertySet", "WorldOrigin");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.HoleFillToolActions.Clear
// (Final, Native, Public)

void UHoleFillToolActions::Clear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HoleFillToolActions", "Clear");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.HoleFillToolActions.SelectAll
// (Final, Native, Public)

void UHoleFillToolActions::SelectAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HoleFillToolActions", "SelectAll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.MeshAttributePaintToolProperties.GetAttributeNames
// (Final, Native, Public)
// Parameters:
// const TArray<class FString>             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class FString> UMeshAttributePaintToolProperties::GetAttributeNames()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MeshAttributePaintToolProperties", "GetAttributeNames");

	Params::MeshAttributePaintToolProperties_GetAttributeNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MeshModelingToolsExp.MeshInspectorMaterialProperties.GetUVChannelNamesFunc
// (Final, Native, Public, Const)
// Parameters:
// const TArray<class FString>             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class FString> UMeshInspectorMaterialProperties::GetUVChannelNamesFunc() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MeshInspectorMaterialProperties", "GetUVChannelNamesFunc");

	Params::MeshInspectorMaterialProperties_GetUVChannelNamesFunc Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MeshModelingToolsExp.MeshSelectionEditActions.Clear
// (Final, Native, Public)

void UMeshSelectionEditActions::Clear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MeshSelectionEditActions", "Clear");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.MeshSelectionEditActions.ExpandToMaterials
// (Final, Native, Public)

void UMeshSelectionEditActions::ExpandToMaterials()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MeshSelectionEditActions", "ExpandToMaterials");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.MeshSelectionEditActions.FloodFill
// (Final, Native, Public)

void UMeshSelectionEditActions::FloodFill()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MeshSelectionEditActions", "FloodFill");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.MeshSelectionEditActions.Grow
// (Final, Native, Public)

void UMeshSelectionEditActions::Grow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MeshSelectionEditActions", "Grow");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.MeshSelectionEditActions.Invert
// (Final, Native, Public)

void UMeshSelectionEditActions::Invert()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MeshSelectionEditActions", "Invert");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.MeshSelectionEditActions.LargestAreaPart
// (Final, Native, Public)

void UMeshSelectionEditActions::LargestAreaPart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MeshSelectionEditActions", "LargestAreaPart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.MeshSelectionEditActions.LargestTriCountPart
// (Final, Native, Public)

void UMeshSelectionEditActions::LargestTriCountPart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MeshSelectionEditActions", "LargestTriCountPart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.MeshSelectionEditActions.OptimizeBorder
// (Final, Native, Public)

void UMeshSelectionEditActions::OptimizeBorder()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MeshSelectionEditActions", "OptimizeBorder");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.MeshSelectionEditActions.SelectAll
// (Final, Native, Public)

void UMeshSelectionEditActions::SelectAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MeshSelectionEditActions", "SelectAll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.MeshSelectionEditActions.Shrink
// (Final, Native, Public)

void UMeshSelectionEditActions::Shrink()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MeshSelectionEditActions", "Shrink");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.MeshSelectionMeshEditActions.CreatePolygroup
// (Final, Native, Public)

void UMeshSelectionMeshEditActions::CreatePolygroup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MeshSelectionMeshEditActions", "CreatePolygroup");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.MeshSelectionMeshEditActions.Delete
// (Final, Native, Public)

void UMeshSelectionMeshEditActions::Delete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MeshSelectionMeshEditActions", "Delete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.MeshSelectionMeshEditActions.Disconnect
// (Final, Native, Public)

void UMeshSelectionMeshEditActions::Disconnect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MeshSelectionMeshEditActions", "Disconnect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.MeshSelectionMeshEditActions.Duplicate
// (Final, Native, Public)

void UMeshSelectionMeshEditActions::Duplicate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MeshSelectionMeshEditActions", "Duplicate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.MeshSelectionMeshEditActions.FlipNormals
// (Final, Native, Public)

void UMeshSelectionMeshEditActions::FlipNormals()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MeshSelectionMeshEditActions", "FlipNormals");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.MeshSelectionMeshEditActions.Separate
// (Final, Native, Public)

void UMeshSelectionMeshEditActions::Separate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MeshSelectionMeshEditActions", "Separate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.MeshSelectionMeshEditActions.SmoothBorder
// (Final, Native, Public)

void UMeshSelectionMeshEditActions::SmoothBorder()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MeshSelectionMeshEditActions", "SmoothBorder");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.MeshSpaceDeformerToolActionPropertySet.ShiftToCenter
// (Final, Native, Public)

void UMeshSpaceDeformerToolActionPropertySet::ShiftToCenter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MeshSpaceDeformerToolActionPropertySet", "ShiftToCenter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.MeshVertexPaintToolUtilityActions.ApplySelectedOperation
// (Final, Native, Public)

void UMeshVertexPaintToolUtilityActions::ApplySelectedOperation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MeshVertexPaintToolUtilityActions", "ApplySelectedOperation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.MeshVertexPaintToolUtilityActions.GetWeightMapsFunc
// (Final, Native, Public)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UMeshVertexPaintToolUtilityActions::GetWeightMapsFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MeshVertexPaintToolUtilityActions", "GetWeightMapsFunc");

	Params::MeshVertexPaintToolUtilityActions_GetWeightMapsFunc Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MeshModelingToolsExp.MeshVertexPaintToolUtilityActions.GetLODNamesFunc
// (Final, Native, Public, Const)
// Parameters:
// const TArray<class FString>             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class FString> UMeshVertexPaintToolUtilityActions::GetLODNamesFunc() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MeshVertexPaintToolUtilityActions", "GetLODNamesFunc");

	Params::MeshVertexPaintToolUtilityActions_GetLODNamesFunc Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MeshModelingToolsExp.MirrorToolActionPropertySet.Backward
// (Final, Native, Public)

void UMirrorToolActionPropertySet::Backward()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MirrorToolActionPropertySet", "Backward");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.MirrorToolActionPropertySet.Down
// (Final, Native, Public)

void UMirrorToolActionPropertySet::Down()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MirrorToolActionPropertySet", "Down");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.MirrorToolActionPropertySet.Forward
// (Final, Native, Public)

void UMirrorToolActionPropertySet::Forward()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MirrorToolActionPropertySet", "Forward");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.MirrorToolActionPropertySet.Left
// (Final, Native, Public)

void UMirrorToolActionPropertySet::Left()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MirrorToolActionPropertySet", "Left");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.MirrorToolActionPropertySet.Right
// (Final, Native, Public)

void UMirrorToolActionPropertySet::Right()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MirrorToolActionPropertySet", "Right");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.MirrorToolActionPropertySet.ShiftToCenter
// (Final, Native, Public)

void UMirrorToolActionPropertySet::ShiftToCenter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MirrorToolActionPropertySet", "ShiftToCenter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.MirrorToolActionPropertySet.Up
// (Final, Native, Public)

void UMirrorToolActionPropertySet::Up()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MirrorToolActionPropertySet", "Up");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.SimpleCollisionEditorToolActionProperties.AddBox
// (Final, Native, Public)

void USimpleCollisionEditorToolActionProperties::AddBox()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleCollisionEditorToolActionProperties", "AddBox");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.SimpleCollisionEditorToolActionProperties.AddCapsule
// (Final, Native, Public)

void USimpleCollisionEditorToolActionProperties::AddCapsule()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleCollisionEditorToolActionProperties", "AddCapsule");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.SimpleCollisionEditorToolActionProperties.AddSphere
// (Final, Native, Public)

void USimpleCollisionEditorToolActionProperties::AddSphere()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleCollisionEditorToolActionProperties", "AddSphere");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.SimpleCollisionEditorToolActionProperties.Delete
// (Final, Native, Public)

void USimpleCollisionEditorToolActionProperties::Delete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleCollisionEditorToolActionProperties", "Delete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.SimpleCollisionEditorToolActionProperties.DeleteAll
// (Final, Native, Public)

void USimpleCollisionEditorToolActionProperties::DeleteAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleCollisionEditorToolActionProperties", "DeleteAll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.SimpleCollisionEditorToolActionProperties.Duplicate
// (Final, Native, Public)

void USimpleCollisionEditorToolActionProperties::Duplicate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleCollisionEditorToolActionProperties", "Duplicate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.PlaneCutTool.Cut
// (Final, Native, Protected)

void UPlaneCutTool::Cut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlaneCutTool", "Cut");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.PlaneCutTool.FlipPlane
// (Final, Native, Protected)

void UPlaneCutTool::FlipPlane()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlaneCutTool", "FlipPlane");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MeshModelingToolsExp.TransferMeshToolProperties.GetSourceLODNamesFunc
// (Final, Native, Public, Const)
// Parameters:
// const TArray<class FString>             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class FString> UTransferMeshToolProperties::GetSourceLODNamesFunc() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TransferMeshToolProperties", "GetSourceLODNamesFunc");

	Params::TransferMeshToolProperties_GetSourceLODNamesFunc Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MeshModelingToolsExp.TransferMeshToolProperties.GetTargetLODNamesFunc
// (Final, Native, Public, Const)
// Parameters:
// const TArray<class FString>             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class FString> UTransferMeshToolProperties::GetTargetLODNamesFunc() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TransferMeshToolProperties", "GetTargetLODNamesFunc");

	Params::TransferMeshToolProperties_GetTargetLODNamesFunc Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

