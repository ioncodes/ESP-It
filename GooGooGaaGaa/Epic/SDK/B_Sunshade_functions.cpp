#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_Sunshade

#include "Basic.hpp"

#include "B_Sunshade_classes.hpp"
#include "B_Sunshade_parameters.hpp"


namespace SDK
{

// Function B_Sunshade.B_Sunshade_C.ActivateActionProp
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Override                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_Sunshade_C::ActivateActionProp(bool Override)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Sunshade_C", "ActivateActionProp");

	Params::B_Sunshade_C_ActivateActionProp Parms{};

	Parms.Override = Override;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Sunshade.B_Sunshade_C.DeactivateActionProp
// (Public, BlueprintCallable, BlueprintEvent)

void AB_Sunshade_C::DeactivateActionProp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Sunshade_C", "DeactivateActionProp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Sunshade.B_Sunshade_C.ExecuteUbergraph_B_Sunshade
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_Sunshade_C::ExecuteUbergraph_B_Sunshade(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Sunshade_C", "ExecuteUbergraph_B_Sunshade");

	Params::B_Sunshade_C_ExecuteUbergraph_B_Sunshade Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Sunshade.B_Sunshade_C.GetRippleEffect
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UNiagaraSystem*                   RippleEffectNiagara                                    (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_Sunshade_C::GetRippleEffect(class UNiagaraSystem** RippleEffectNiagara)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Sunshade_C", "GetRippleEffect");

	Params::B_Sunshade_C_GetRippleEffect Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RippleEffectNiagara != nullptr)
		*RippleEffectNiagara = Parms.RippleEffectNiagara;
}


// Function B_Sunshade.B_Sunshade_C.GetVisualInterpolators
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AB_VisualIntepolator_C*>   VisualInterpolators                                    (Parm, OutParm)

void AB_Sunshade_C::GetVisualInterpolators(TArray<class AB_VisualIntepolator_C*>* VisualInterpolators)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Sunshade_C", "GetVisualInterpolators");

	Params::B_Sunshade_C_GetVisualInterpolators Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (VisualInterpolators != nullptr)
		*VisualInterpolators = std::move(Parms.VisualInterpolators);
}


// Function B_Sunshade.B_Sunshade_C.InitializeActionProp
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AB_Sunshade_C::InitializeActionProp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Sunshade_C", "InitializeActionProp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Sunshade.B_Sunshade_C.Jump
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    JumpSuccess                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_Sunshade_C::Jump(bool* JumpSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Sunshade_C", "Jump");

	Params::B_Sunshade_C_Jump Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (JumpSuccess != nullptr)
		*JumpSuccess = Parms.JumpSuccess;
}


// Function B_Sunshade.B_Sunshade_C.Move
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Vector                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ForcedOutput                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_Sunshade_C::Move(const struct FVector& Vector, bool* ForcedOutput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Sunshade_C", "Move");

	Params::B_Sunshade_C_Move Parms{};

	Parms.Vector = std::move(Vector);

	UObject::ProcessEvent(Func, &Parms);

	if (ForcedOutput != nullptr)
		*ForcedOutput = Parms.ForcedOutput;
}


// Function B_Sunshade.B_Sunshade_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AB_Sunshade_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Sunshade_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Sunshade.B_Sunshade_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_Sunshade_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Sunshade_C", "ReceiveTick");

	Params::B_Sunshade_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Sunshade.B_Sunshade_C.RefreshHighlight
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Highlightable                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_Sunshade_C::RefreshHighlight(bool* Highlightable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Sunshade_C", "RefreshHighlight");

	Params::B_Sunshade_C_RefreshHighlight Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Highlightable != nullptr)
		*Highlightable = Parms.Highlightable;
}


// Function B_Sunshade.B_Sunshade_C.SetHighlightChannel
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EHighlightChannel                       Channel                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_Sunshade_C::SetHighlightChannel(EHighlightChannel Channel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Sunshade_C", "SetHighlightChannel");

	Params::B_Sunshade_C_SetHighlightChannel Parms{};

	Parms.Channel = Channel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Sunshade.B_Sunshade_C.UpdatePhysicsType
// (Public, BlueprintCallable, BlueprintEvent)

void AB_Sunshade_C::UpdatePhysicsType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Sunshade_C", "UpdatePhysicsType");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Sunshade.B_Sunshade_C.UpdateTransformIfNeeded
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_Sunshade_C::UpdateTransformIfNeeded(double DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Sunshade_C", "UpdateTransformIfNeeded");

	Params::B_Sunshade_C_UpdateTransformIfNeeded Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}

}

