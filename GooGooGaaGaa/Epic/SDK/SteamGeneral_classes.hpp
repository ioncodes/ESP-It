#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SteamGeneral

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "SteamGeneral_structs.hpp"


namespace SDK
{

// Class SteamGeneral.SteamGeneralLibrary
// 0x0000 (0x0028 - 0x0028)
class USteamGeneralLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool BreakUInt32(const struct FUInt32& InVal, int32* OutVal);
	static bool BreakUInt64(const struct FUInt64& InVal, int32* OutVal);
	static bool Equal_SteamAppId(const struct FSteamAppId& A, const struct FSteamAppId& B);
	static bool Equal_SteamDepotId(const struct FSteamDepotId& A, const struct FSteamDepotId& B);
	static bool Equal_SteamItemId(const struct FSteamUGCItemId& A, const struct FSteamUGCItemId& B);
	static bool Equal_UInt32(const struct FUInt32& A, const struct FUInt32& B);
	static bool Equal_UInt64(const struct FUInt64& A, const struct FUInt64& B);
	static struct FUInt32 FromString_UInt32(const class FString& Value);
	static struct FUInt64 FromString_UInt64(const class FString& Value);
	static struct FSteamAppId GetSteamAppId();
	static bool IsSteamInitialized();
	static bool NotEqual_SteamAppId(const struct FSteamAppId& A, const struct FSteamAppId& B);
	static bool NotEqual_SteamDepotId(const struct FSteamDepotId& A, const struct FSteamDepotId& B);
	static bool NotEqual_SteamItemId(const struct FSteamUGCItemId& A, const struct FSteamUGCItemId& B);
	static bool NotEqual_UInt32(const struct FUInt32& A, const struct FUInt32& B);
	static bool NotEqual_UInt64(const struct FUInt64& A, const struct FUInt64& B);
	static int32 SteamAppIdArray_AddUnique(TArray<struct FSteamAppId>& Values, const struct FSteamAppId& Value);
	static bool SteamAppIdArray_Contains(const TArray<struct FSteamAppId>& Values, const struct FSteamAppId& Value);
	static int32 SteamAppIdArray_Find(const TArray<struct FSteamAppId>& Values, const struct FSteamAppId& Value);
	static int32 SteamAppIdArray_Remove(TArray<struct FSteamAppId>& Values, const struct FSteamAppId& Value);
	static class FString SteamConvertLanguageToLanguageCode(ESteamSupportedLanguages Language);
	static bool SteamDelegate_OnGameOverlayActivated_Bind(TDelegate<void(bool bActive)> DelegateToCall);
	static bool SteamDelegate_OnGameOverlayActivated_Unbind(TDelegate<void(bool bActive)> DelegateToCall);
	static int32 SteamDepotIdArray_AddUnique(TArray<struct FSteamDepotId>& Values, const struct FSteamDepotId& Value);
	static bool SteamDepotIdArray_Contains(const TArray<struct FSteamDepotId>& Values, const struct FSteamDepotId& Value);
	static int32 SteamDepotIdArray_Find(const TArray<struct FSteamDepotId>& Values, const struct FSteamDepotId& Value);
	static int32 SteamDepotIdArray_Remove(TArray<struct FSteamDepotId>& Values, const struct FSteamDepotId& Value);
	static bool SteamGeneral_ActivateGameOverlayToWebPage(const class FString& Webpage);
	static class FString SteamGeneral_GetFriendName(const struct FUInt64& SteamUserId);
	static EPersonaStateBP SteamGeneral_GetFriendState(const struct FUInt64& SteamUserId);
	static class FString SteamGeneral_GetUserName();
	static EPersonaStateBP SteamGeneral_GetUserState();
	static bool SteamQueryHandle_IsValid(const struct FSteamUGCQueryHandle& Handle);
	static bool SteamUGCHandle_IsValid(const struct FSteamUGCHandle& Handle);
	static int32 SteamUGCItemIdArray_AddUnique(TArray<struct FSteamUGCItemId>& Values, const struct FSteamUGCItemId& Value);
	static bool SteamUGCItemIdArray_Contains(const TArray<struct FSteamUGCItemId>& Values, const struct FSteamUGCItemId& Value);
	static int32 SteamUGCItemIdArray_Find(const TArray<struct FSteamUGCItemId>& Values, const struct FSteamUGCItemId& Value);
	static int32 SteamUGCItemIdArray_Remove(TArray<struct FSteamUGCItemId>& Values, const struct FSteamUGCItemId& Value);
	static bool SteamUpdateHandle_IsValid(const struct FSteamUGCUpdateHandle& Handle);
	static class FString ToString_SteamAppId(const struct FSteamAppId& ID);
	static class FString ToString_SteamDepotId(const struct FSteamDepotId& ID);
	static class FString ToString_SteamItemId(const struct FSteamUGCItemId& ID);
	static class FString ToString_UInt32(const struct FUInt32& Value);
	static class FString ToString_UInt64(const struct FUInt64& Value);
	static int32 Uint32Array_AddUnique(TArray<struct FUInt32>& Values, const struct FUInt32& Value);
	static bool Uint32Array_Contains(const TArray<struct FUInt32>& Values, const struct FUInt32& Value);
	static int32 Uint32Array_Find(const TArray<struct FUInt32>& Values, const struct FUInt32& Value);
	static int32 Uint32Array_Remove(TArray<struct FUInt32>& Values, const struct FUInt32& Value);
	static int32 Uint64Array_AddUnique(TArray<struct FUInt64>& Values, const struct FUInt64& Value);
	static bool Uint64Array_Contains(const TArray<struct FUInt64>& Values, const struct FUInt64& Value);
	static int32 Uint64Array_Find(const TArray<struct FUInt64>& Values, const struct FUInt64& Value);
	static int32 Uint64Array_Remove(TArray<struct FUInt64>& Values, const struct FUInt64& Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamGeneralLibrary">();
	}
	static class USteamGeneralLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamGeneralLibrary>();
	}
};
static_assert(alignof(USteamGeneralLibrary) == 0x000008, "Wrong alignment on USteamGeneralLibrary");
static_assert(sizeof(USteamGeneralLibrary) == 0x000028, "Wrong size on USteamGeneralLibrary");

}

