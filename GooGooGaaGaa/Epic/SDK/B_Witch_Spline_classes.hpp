#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_Witch_Spline

#include "Basic.hpp"

#include "PropWitchHuntModule_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_Witch_Spline.B_Witch_Spline_C
// 0x00A8 (0x0338 - 0x0290)
class AB_Witch_Spline_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNiagaraComponent*                      NS_FlyTrailBroom;                                  // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 PreviewMesh;                                       // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       Spline;                                            // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        Speed;                                             // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Distance_Along_Spline;                             // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLooping;                                         // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D1[0x7];                                      // 0x02D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWitchSkin                             WitchSkin;                                         // 0x02D8(0x0028)(Edit, BlueprintVisible, NoDestructor)
	TArray<class AActor*>                         SubMeshes;                                         // 0x0300(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          IsFlying;                                          // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_311[0x7];                                      // 0x0311(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          Animation;                                         // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlaying;                                         // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_321[0x7];                                      // 0x0321(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Position;                                          // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Play_Rate;                                         // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void ExecuteUbergraph_B_Witch_Spline(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_Witch_Spline_C">();
	}
	static class AB_Witch_Spline_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_Witch_Spline_C>();
	}
};
static_assert(alignof(AB_Witch_Spline_C) == 0x000008, "Wrong alignment on AB_Witch_Spline_C");
static_assert(sizeof(AB_Witch_Spline_C) == 0x000338, "Wrong size on AB_Witch_Spline_C");
static_assert(offsetof(AB_Witch_Spline_C, UberGraphFrame) == 0x000290, "Member 'AB_Witch_Spline_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AB_Witch_Spline_C, NS_FlyTrailBroom) == 0x000298, "Member 'AB_Witch_Spline_C::NS_FlyTrailBroom' has a wrong offset!");
static_assert(offsetof(AB_Witch_Spline_C, PreviewMesh) == 0x0002A0, "Member 'AB_Witch_Spline_C::PreviewMesh' has a wrong offset!");
static_assert(offsetof(AB_Witch_Spline_C, SkeletalMesh) == 0x0002A8, "Member 'AB_Witch_Spline_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(AB_Witch_Spline_C, Spline) == 0x0002B0, "Member 'AB_Witch_Spline_C::Spline' has a wrong offset!");
static_assert(offsetof(AB_Witch_Spline_C, DefaultSceneRoot) == 0x0002B8, "Member 'AB_Witch_Spline_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AB_Witch_Spline_C, Speed) == 0x0002C0, "Member 'AB_Witch_Spline_C::Speed' has a wrong offset!");
static_assert(offsetof(AB_Witch_Spline_C, Distance_Along_Spline) == 0x0002C8, "Member 'AB_Witch_Spline_C::Distance_Along_Spline' has a wrong offset!");
static_assert(offsetof(AB_Witch_Spline_C, IsLooping) == 0x0002D0, "Member 'AB_Witch_Spline_C::IsLooping' has a wrong offset!");
static_assert(offsetof(AB_Witch_Spline_C, WitchSkin) == 0x0002D8, "Member 'AB_Witch_Spline_C::WitchSkin' has a wrong offset!");
static_assert(offsetof(AB_Witch_Spline_C, SubMeshes) == 0x000300, "Member 'AB_Witch_Spline_C::SubMeshes' has a wrong offset!");
static_assert(offsetof(AB_Witch_Spline_C, IsFlying) == 0x000310, "Member 'AB_Witch_Spline_C::IsFlying' has a wrong offset!");
static_assert(offsetof(AB_Witch_Spline_C, Animation) == 0x000318, "Member 'AB_Witch_Spline_C::Animation' has a wrong offset!");
static_assert(offsetof(AB_Witch_Spline_C, IsPlaying) == 0x000320, "Member 'AB_Witch_Spline_C::IsPlaying' has a wrong offset!");
static_assert(offsetof(AB_Witch_Spline_C, Position) == 0x000328, "Member 'AB_Witch_Spline_C::Position' has a wrong offset!");
static_assert(offsetof(AB_Witch_Spline_C, Play_Rate) == 0x000330, "Member 'AB_Witch_Spline_C::Play_Rate' has a wrong offset!");

}

