#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_GameState

#include "Basic.hpp"

#include "S_PowerupRules_structs.hpp"
#include "EChatType_structs.hpp"
#include "S_GameModifier_structs.hpp"
#include "S_SkillRules_structs.hpp"
#include "S_MatchRules_structs.hpp"
#include "S_TournamentPlayer_structs.hpp"
#include "EGameMessageType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function B_GameState.B_GameState_C.HasRoundStarted
// 0x0001 (0x0001 - 0x0000)
struct B_GameState_C_HasRoundStarted final
{
public:
	bool                                          RoundHasStarted;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameState_C_HasRoundStarted) == 0x000001, "Wrong alignment on B_GameState_C_HasRoundStarted");
static_assert(sizeof(B_GameState_C_HasRoundStarted) == 0x000001, "Wrong size on B_GameState_C_HasRoundStarted");
static_assert(offsetof(B_GameState_C_HasRoundStarted, RoundHasStarted) == 0x000000, "Member 'B_GameState_C_HasRoundStarted::RoundHasStarted' has a wrong offset!");

// Function B_GameState.B_GameState_C.HasTrackingStarted
// 0x0001 (0x0001 - 0x0000)
struct B_GameState_C_HasTrackingStarted final
{
public:
	bool                                          HasTrackingStarted_0;                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameState_C_HasTrackingStarted) == 0x000001, "Wrong alignment on B_GameState_C_HasTrackingStarted");
static_assert(sizeof(B_GameState_C_HasTrackingStarted) == 0x000001, "Wrong size on B_GameState_C_HasTrackingStarted");
static_assert(offsetof(B_GameState_C_HasTrackingStarted, HasTrackingStarted_0) == 0x000000, "Member 'B_GameState_C_HasTrackingStarted::HasTrackingStarted_0' has a wrong offset!");

// Function B_GameState.B_GameState_C.IsPhysicsEnabled
// 0x0001 (0x0001 - 0x0000)
struct B_GameState_C_IsPhysicsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameState_C_IsPhysicsEnabled) == 0x000001, "Wrong alignment on B_GameState_C_IsPhysicsEnabled");
static_assert(sizeof(B_GameState_C_IsPhysicsEnabled) == 0x000001, "Wrong size on B_GameState_C_IsPhysicsEnabled");
static_assert(offsetof(B_GameState_C_IsPhysicsEnabled, ReturnValue) == 0x000000, "Member 'B_GameState_C_IsPhysicsEnabled::ReturnValue' has a wrong offset!");

// Function B_GameState.B_GameState_C.IsRoundEnd
// 0x0001 (0x0001 - 0x0000)
struct B_GameState_C_IsRoundEnd final
{
public:
	bool                                          RoundIsEnd;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameState_C_IsRoundEnd) == 0x000001, "Wrong alignment on B_GameState_C_IsRoundEnd");
static_assert(sizeof(B_GameState_C_IsRoundEnd) == 0x000001, "Wrong size on B_GameState_C_IsRoundEnd");
static_assert(offsetof(B_GameState_C_IsRoundEnd, RoundIsEnd) == 0x000000, "Member 'B_GameState_C_IsRoundEnd::RoundIsEnd' has a wrong offset!");

// Function B_GameState.B_GameState_C.DetermineTickRates
// 0x0048 (0x0048 - 0x0000)
struct B_GameState_C_DetermineTickRates final
{
public:
	float                                         DefaultMaxTickRate;                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEngineMaxTickRate_ReturnValue;         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_DoubleToString_ReturnValue;          // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	double                                        CallFunc_FTrunc_A_ImplicitCast;                    // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_Value_ImplicitCast;                // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_DefaultMaxTickRate_ImplicitCast; // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_DoubleToString_InDouble_ImplicitCast; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameState_C_DetermineTickRates) == 0x000008, "Wrong alignment on B_GameState_C_DetermineTickRates");
static_assert(sizeof(B_GameState_C_DetermineTickRates) == 0x000048, "Wrong size on B_GameState_C_DetermineTickRates");
static_assert(offsetof(B_GameState_C_DetermineTickRates, DefaultMaxTickRate) == 0x000000, "Member 'B_GameState_C_DetermineTickRates::DefaultMaxTickRate' has a wrong offset!");
static_assert(offsetof(B_GameState_C_DetermineTickRates, CallFunc_FTrunc_ReturnValue) == 0x000004, "Member 'B_GameState_C_DetermineTickRates::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_DetermineTickRates, CallFunc_GetEngineMaxTickRate_ReturnValue) == 0x000008, "Member 'B_GameState_C_DetermineTickRates::CallFunc_GetEngineMaxTickRate_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_DetermineTickRates, CallFunc_FClamp_ReturnValue) == 0x000010, "Member 'B_GameState_C_DetermineTickRates::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_DetermineTickRates, CallFunc_Conv_DoubleToString_ReturnValue) == 0x000018, "Member 'B_GameState_C_DetermineTickRates::CallFunc_Conv_DoubleToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_DetermineTickRates, CallFunc_FTrunc_A_ImplicitCast) == 0x000028, "Member 'B_GameState_C_DetermineTickRates::CallFunc_FTrunc_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_GameState_C_DetermineTickRates, CallFunc_FClamp_Value_ImplicitCast) == 0x000030, "Member 'B_GameState_C_DetermineTickRates::CallFunc_FClamp_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_GameState_C_DetermineTickRates, K2Node_VariableSet_DefaultMaxTickRate_ImplicitCast) == 0x000038, "Member 'B_GameState_C_DetermineTickRates::K2Node_VariableSet_DefaultMaxTickRate_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_GameState_C_DetermineTickRates, CallFunc_Conv_DoubleToString_InDouble_ImplicitCast) == 0x000040, "Member 'B_GameState_C_DetermineTickRates::CallFunc_Conv_DoubleToString_InDouble_ImplicitCast' has a wrong offset!");

// Function B_GameState.B_GameState_C.ApplyClientTickRate
// 0x0028 (0x0028 - 0x0000)
struct B_GameState_C_ApplyClientTickRate final
{
public:
	class APlayerController*                      LocalPC;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameState_C_ApplyClientTickRate) == 0x000008, "Wrong alignment on B_GameState_C_ApplyClientTickRate");
static_assert(sizeof(B_GameState_C_ApplyClientTickRate) == 0x000028, "Wrong size on B_GameState_C_ApplyClientTickRate");
static_assert(offsetof(B_GameState_C_ApplyClientTickRate, LocalPC) == 0x000000, "Member 'B_GameState_C_ApplyClientTickRate::LocalPC' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ApplyClientTickRate, CallFunc_Conv_IntToString_ReturnValue) == 0x000008, "Member 'B_GameState_C_ApplyClientTickRate::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ApplyClientTickRate, CallFunc_Concat_StrStr_ReturnValue) == 0x000018, "Member 'B_GameState_C_ApplyClientTickRate::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");

// Function B_GameState.B_GameState_C.SetIdleKickEnabled
// 0x0001 (0x0001 - 0x0000)
struct B_GameState_C_SetIdleKickEnabled final
{
public:
	bool                                          bIsEnabled;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameState_C_SetIdleKickEnabled) == 0x000001, "Wrong alignment on B_GameState_C_SetIdleKickEnabled");
static_assert(sizeof(B_GameState_C_SetIdleKickEnabled) == 0x000001, "Wrong size on B_GameState_C_SetIdleKickEnabled");
static_assert(offsetof(B_GameState_C_SetIdleKickEnabled, bIsEnabled) == 0x000000, "Member 'B_GameState_C_SetIdleKickEnabled::bIsEnabled' has a wrong offset!");

// Function B_GameState.B_GameState_C.ResetAllRules
// 0x0058 (0x0058 - 0x0000)
struct B_GameState_C_ResetAllRules final
{
public:
	TArray<struct FS_PowerupRules>                EmptyPowerupsArray;                                // 0x0000(0x0010)(Edit, BlueprintVisible)
	TArray<struct FS_GameModifier>                EmptyModsArray;                                    // 0x0010(0x0010)(Edit, BlueprintVisible)
	TArray<struct FS_MatchRules>                  EmptyMatchArray;                                   // 0x0020(0x0010)(Edit, BlueprintVisible)
	TArray<struct FS_SkillRules>                  EmptySkillArray;                                   // 0x0030(0x0010)(Edit, BlueprintVisible)
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameMode_C*                          K2Node_DynamicCast_AsB_Game_Mode;                  // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameState_C_ResetAllRules) == 0x000008, "Wrong alignment on B_GameState_C_ResetAllRules");
static_assert(sizeof(B_GameState_C_ResetAllRules) == 0x000058, "Wrong size on B_GameState_C_ResetAllRules");
static_assert(offsetof(B_GameState_C_ResetAllRules, EmptyPowerupsArray) == 0x000000, "Member 'B_GameState_C_ResetAllRules::EmptyPowerupsArray' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ResetAllRules, EmptyModsArray) == 0x000010, "Member 'B_GameState_C_ResetAllRules::EmptyModsArray' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ResetAllRules, EmptyMatchArray) == 0x000020, "Member 'B_GameState_C_ResetAllRules::EmptyMatchArray' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ResetAllRules, EmptySkillArray) == 0x000030, "Member 'B_GameState_C_ResetAllRules::EmptySkillArray' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ResetAllRules, CallFunc_GetGameMode_ReturnValue) == 0x000040, "Member 'B_GameState_C_ResetAllRules::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ResetAllRules, K2Node_DynamicCast_AsB_Game_Mode) == 0x000048, "Member 'B_GameState_C_ResetAllRules::K2Node_DynamicCast_AsB_Game_Mode' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ResetAllRules, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'B_GameState_C_ResetAllRules::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function B_GameState.B_GameState_C.UpdatePowerupRules
// 0x0028 (0x0028 - 0x0000)
struct B_GameState_C_UpdatePowerupRules final
{
public:
	class UB_GameInstance_C*                      CallFunc_GetBGameInstance_ReturnValue;             // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameMode_C*                          K2Node_DynamicCast_AsB_Game_Mode;                  // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameRules_C*                         CallFunc_GetGameRules_ReturnValue;                 // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameState_C_UpdatePowerupRules) == 0x000008, "Wrong alignment on B_GameState_C_UpdatePowerupRules");
static_assert(sizeof(B_GameState_C_UpdatePowerupRules) == 0x000028, "Wrong size on B_GameState_C_UpdatePowerupRules");
static_assert(offsetof(B_GameState_C_UpdatePowerupRules, CallFunc_GetBGameInstance_ReturnValue) == 0x000000, "Member 'B_GameState_C_UpdatePowerupRules::CallFunc_GetBGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_UpdatePowerupRules, CallFunc_GetGameMode_ReturnValue) == 0x000008, "Member 'B_GameState_C_UpdatePowerupRules::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_UpdatePowerupRules, K2Node_DynamicCast_AsB_Game_Mode) == 0x000010, "Member 'B_GameState_C_UpdatePowerupRules::K2Node_DynamicCast_AsB_Game_Mode' has a wrong offset!");
static_assert(offsetof(B_GameState_C_UpdatePowerupRules, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'B_GameState_C_UpdatePowerupRules::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameState_C_UpdatePowerupRules, CallFunc_GetGameRules_ReturnValue) == 0x000020, "Member 'B_GameState_C_UpdatePowerupRules::CallFunc_GetGameRules_ReturnValue' has a wrong offset!");

// Function B_GameState.B_GameState_C.GetUnlistedSkills
// 0x0060 (0x0060 - 0x0000)
struct B_GameState_C_GetUnlistedSkills final
{
public:
	TArray<class UClass*>                         Unlisted_Skills;                                   // 0x0000(0x0010)(Parm, OutParm)
	TArray<class UClass*>                         FilteredSkills;                                    // 0x0010(0x0010)(Edit, BlueprintVisible)
	TArray<class UClass*>                         Skills;                                            // 0x0020(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_SkillParametersSubsystem_C*          CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSkillListed_IsListed;                   // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0056(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_57[0x1];                                       // 0x0057(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameState_C_GetUnlistedSkills) == 0x000008, "Wrong alignment on B_GameState_C_GetUnlistedSkills");
static_assert(sizeof(B_GameState_C_GetUnlistedSkills) == 0x000060, "Wrong size on B_GameState_C_GetUnlistedSkills");
static_assert(offsetof(B_GameState_C_GetUnlistedSkills, Unlisted_Skills) == 0x000000, "Member 'B_GameState_C_GetUnlistedSkills::Unlisted_Skills' has a wrong offset!");
static_assert(offsetof(B_GameState_C_GetUnlistedSkills, FilteredSkills) == 0x000010, "Member 'B_GameState_C_GetUnlistedSkills::FilteredSkills' has a wrong offset!");
static_assert(offsetof(B_GameState_C_GetUnlistedSkills, Skills) == 0x000020, "Member 'B_GameState_C_GetUnlistedSkills::Skills' has a wrong offset!");
static_assert(offsetof(B_GameState_C_GetUnlistedSkills, Temp_int_Array_Index_Variable) == 0x000030, "Member 'B_GameState_C_GetUnlistedSkills::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_GameState_C_GetUnlistedSkills, Temp_int_Loop_Counter_Variable) == 0x000034, "Member 'B_GameState_C_GetUnlistedSkills::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_GameState_C_GetUnlistedSkills, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'B_GameState_C_GetUnlistedSkills::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_GetUnlistedSkills, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000040, "Member 'B_GameState_C_GetUnlistedSkills::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_GetUnlistedSkills, CallFunc_Array_Get_Item) == 0x000048, "Member 'B_GameState_C_GetUnlistedSkills::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_GameState_C_GetUnlistedSkills, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'B_GameState_C_GetUnlistedSkills::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_GetUnlistedSkills, CallFunc_IsSkillListed_IsListed) == 0x000054, "Member 'B_GameState_C_GetUnlistedSkills::CallFunc_IsSkillListed_IsListed' has a wrong offset!");
static_assert(offsetof(B_GameState_C_GetUnlistedSkills, CallFunc_Less_IntInt_ReturnValue) == 0x000055, "Member 'B_GameState_C_GetUnlistedSkills::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_GetUnlistedSkills, CallFunc_Not_PreBool_ReturnValue) == 0x000056, "Member 'B_GameState_C_GetUnlistedSkills::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_GetUnlistedSkills, CallFunc_Array_Add_ReturnValue) == 0x000058, "Member 'B_GameState_C_GetUnlistedSkills::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function B_GameState.B_GameState_C.OnRep_PowerupRules
// 0x0008 (0x0008 - 0x0000)
struct B_GameState_C_OnRep_PowerupRules final
{
public:
	class UB_PowerupParametersSubsystem_C*        CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameState_C_OnRep_PowerupRules) == 0x000008, "Wrong alignment on B_GameState_C_OnRep_PowerupRules");
static_assert(sizeof(B_GameState_C_OnRep_PowerupRules) == 0x000008, "Wrong size on B_GameState_C_OnRep_PowerupRules");
static_assert(offsetof(B_GameState_C_OnRep_PowerupRules, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000000, "Member 'B_GameState_C_OnRep_PowerupRules::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");

// Function B_GameState.B_GameState_C.OnRep_GameModifiers
// 0x0008 (0x0008 - 0x0000)
struct B_GameState_C_OnRep_GameModifiers final
{
public:
	class UB_ModParametersSubsystem_C*            CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameState_C_OnRep_GameModifiers) == 0x000008, "Wrong alignment on B_GameState_C_OnRep_GameModifiers");
static_assert(sizeof(B_GameState_C_OnRep_GameModifiers) == 0x000008, "Wrong size on B_GameState_C_OnRep_GameModifiers");
static_assert(offsetof(B_GameState_C_OnRep_GameModifiers, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000000, "Member 'B_GameState_C_OnRep_GameModifiers::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");

// Function B_GameState.B_GameState_C.OnRep_MatchRules
// 0x0008 (0x0008 - 0x0000)
struct B_GameState_C_OnRep_MatchRules final
{
public:
	class UB_MatchParametersSubsystem_C*          CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameState_C_OnRep_MatchRules) == 0x000008, "Wrong alignment on B_GameState_C_OnRep_MatchRules");
static_assert(sizeof(B_GameState_C_OnRep_MatchRules) == 0x000008, "Wrong size on B_GameState_C_OnRep_MatchRules");
static_assert(offsetof(B_GameState_C_OnRep_MatchRules, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000000, "Member 'B_GameState_C_OnRep_MatchRules::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");

// Function B_GameState.B_GameState_C.OnRep_SkillRules
// 0x0008 (0x0008 - 0x0000)
struct B_GameState_C_OnRep_SkillRules final
{
public:
	class UB_SkillParametersSubsystem_C*          CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameState_C_OnRep_SkillRules) == 0x000008, "Wrong alignment on B_GameState_C_OnRep_SkillRules");
static_assert(sizeof(B_GameState_C_OnRep_SkillRules) == 0x000008, "Wrong size on B_GameState_C_OnRep_SkillRules");
static_assert(offsetof(B_GameState_C_OnRep_SkillRules, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000000, "Member 'B_GameState_C_OnRep_SkillRules::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");

// Function B_GameState.B_GameState_C.UpdateModRules
// 0x0028 (0x0028 - 0x0000)
struct B_GameState_C_UpdateModRules final
{
public:
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      CallFunc_GetBGameInstance_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameMode_C*                          K2Node_DynamicCast_AsB_Game_Mode;                  // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameRules_C*                         CallFunc_GetGameRules_ReturnValue;                 // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameState_C_UpdateModRules) == 0x000008, "Wrong alignment on B_GameState_C_UpdateModRules");
static_assert(sizeof(B_GameState_C_UpdateModRules) == 0x000028, "Wrong size on B_GameState_C_UpdateModRules");
static_assert(offsetof(B_GameState_C_UpdateModRules, CallFunc_GetGameMode_ReturnValue) == 0x000000, "Member 'B_GameState_C_UpdateModRules::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_UpdateModRules, CallFunc_GetBGameInstance_ReturnValue) == 0x000008, "Member 'B_GameState_C_UpdateModRules::CallFunc_GetBGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_UpdateModRules, K2Node_DynamicCast_AsB_Game_Mode) == 0x000010, "Member 'B_GameState_C_UpdateModRules::K2Node_DynamicCast_AsB_Game_Mode' has a wrong offset!");
static_assert(offsetof(B_GameState_C_UpdateModRules, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'B_GameState_C_UpdateModRules::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameState_C_UpdateModRules, CallFunc_GetGameRules_ReturnValue) == 0x000020, "Member 'B_GameState_C_UpdateModRules::CallFunc_GetGameRules_ReturnValue' has a wrong offset!");

// Function B_GameState.B_GameState_C.UpdateMatchRules
// 0x0028 (0x0028 - 0x0000)
struct B_GameState_C_UpdateMatchRules final
{
public:
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      CallFunc_GetBGameInstance_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameMode_C*                          K2Node_DynamicCast_AsB_Game_Mode;                  // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameRules_C*                         CallFunc_GetGameRules_ReturnValue;                 // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameState_C_UpdateMatchRules) == 0x000008, "Wrong alignment on B_GameState_C_UpdateMatchRules");
static_assert(sizeof(B_GameState_C_UpdateMatchRules) == 0x000028, "Wrong size on B_GameState_C_UpdateMatchRules");
static_assert(offsetof(B_GameState_C_UpdateMatchRules, CallFunc_GetGameMode_ReturnValue) == 0x000000, "Member 'B_GameState_C_UpdateMatchRules::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_UpdateMatchRules, CallFunc_GetBGameInstance_ReturnValue) == 0x000008, "Member 'B_GameState_C_UpdateMatchRules::CallFunc_GetBGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_UpdateMatchRules, K2Node_DynamicCast_AsB_Game_Mode) == 0x000010, "Member 'B_GameState_C_UpdateMatchRules::K2Node_DynamicCast_AsB_Game_Mode' has a wrong offset!");
static_assert(offsetof(B_GameState_C_UpdateMatchRules, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'B_GameState_C_UpdateMatchRules::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameState_C_UpdateMatchRules, CallFunc_GetGameRules_ReturnValue) == 0x000020, "Member 'B_GameState_C_UpdateMatchRules::CallFunc_GetGameRules_ReturnValue' has a wrong offset!");

// Function B_GameState.B_GameState_C.UpdateSkillRules
// 0x0028 (0x0028 - 0x0000)
struct B_GameState_C_UpdateSkillRules final
{
public:
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      CallFunc_GetBGameInstance_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameMode_C*                          K2Node_DynamicCast_AsB_Game_Mode;                  // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameRules_C*                         CallFunc_GetGameRules_ReturnValue;                 // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameState_C_UpdateSkillRules) == 0x000008, "Wrong alignment on B_GameState_C_UpdateSkillRules");
static_assert(sizeof(B_GameState_C_UpdateSkillRules) == 0x000028, "Wrong size on B_GameState_C_UpdateSkillRules");
static_assert(offsetof(B_GameState_C_UpdateSkillRules, CallFunc_GetGameMode_ReturnValue) == 0x000000, "Member 'B_GameState_C_UpdateSkillRules::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_UpdateSkillRules, CallFunc_GetBGameInstance_ReturnValue) == 0x000008, "Member 'B_GameState_C_UpdateSkillRules::CallFunc_GetBGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_UpdateSkillRules, K2Node_DynamicCast_AsB_Game_Mode) == 0x000010, "Member 'B_GameState_C_UpdateSkillRules::K2Node_DynamicCast_AsB_Game_Mode' has a wrong offset!");
static_assert(offsetof(B_GameState_C_UpdateSkillRules, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'B_GameState_C_UpdateSkillRules::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameState_C_UpdateSkillRules, CallFunc_GetGameRules_ReturnValue) == 0x000020, "Member 'B_GameState_C_UpdateSkillRules::CallFunc_GetGameRules_ReturnValue' has a wrong offset!");

// Function B_GameState.B_GameState_C.InitializeGameRules
// 0x00E8 (0x00E8 - 0x0000)
struct B_GameState_C_InitializeGameRules final
{
public:
	int32                                         CustomRulesCounter;                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      CallFunc_GetBGameInstance_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameRules_C*                         CallFunc_GetGameRules_ReturnValue;                 // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmpty_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AreAnyRulesCurrentlyEnabled_UsingCustomRules; // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_1;            // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      CallFunc_GetBGameInstance_ReturnValue_1;           // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_1;            // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameRules_C*                         CallFunc_GetGameRules_ReturnValue_1;               // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USaveGame*                              CallFunc_LoadGameFromSlot_ReturnValue;             // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameRules_C*                         K2Node_DynamicCast_AsB_Game_Rules;                 // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      CallFunc_GetBGameInstance_ReturnValue_2;           // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      CallFunc_GetBGameInstance_ReturnValue_3;           // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameRules_C*                         CallFunc_GetGameRules_ReturnValue_2;               // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameRules_C*                         CallFunc_GetGameRules_ReturnValue_3;               // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_2;            // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameMode_C*                          K2Node_DynamicCast_AsB_Game_Mode;                  // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_2;            // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCustomLogSubsystem*                    CallFunc_GetEngineSubsystem_ReturnValue;           // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_3;            // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_3;            // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_StriStri_ReturnValue;            // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameState_C_InitializeGameRules) == 0x000008, "Wrong alignment on B_GameState_C_InitializeGameRules");
static_assert(sizeof(B_GameState_C_InitializeGameRules) == 0x0000E8, "Wrong size on B_GameState_C_InitializeGameRules");
static_assert(offsetof(B_GameState_C_InitializeGameRules, CustomRulesCounter) == 0x000000, "Member 'B_GameState_C_InitializeGameRules::CustomRulesCounter' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeGameRules, CallFunc_GetGameInstance_ReturnValue) == 0x000008, "Member 'B_GameState_C_InitializeGameRules::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeGameRules, CallFunc_GetBGameInstance_ReturnValue) == 0x000010, "Member 'B_GameState_C_InitializeGameRules::CallFunc_GetBGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeGameRules, K2Node_DynamicCast_AsB_Game_Instance) == 0x000018, "Member 'B_GameState_C_InitializeGameRules::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeGameRules, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'B_GameState_C_InitializeGameRules::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeGameRules, CallFunc_GetGameRules_ReturnValue) == 0x000028, "Member 'B_GameState_C_InitializeGameRules::CallFunc_GetGameRules_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeGameRules, CallFunc_IsEmpty_ReturnValue) == 0x000030, "Member 'B_GameState_C_InitializeGameRules::CallFunc_IsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeGameRules, CallFunc_Not_PreBool_ReturnValue) == 0x000031, "Member 'B_GameState_C_InitializeGameRules::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeGameRules, CallFunc_AreAnyRulesCurrentlyEnabled_UsingCustomRules) == 0x000032, "Member 'B_GameState_C_InitializeGameRules::CallFunc_AreAnyRulesCurrentlyEnabled_UsingCustomRules' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeGameRules, CallFunc_GetGameInstance_ReturnValue_1) == 0x000038, "Member 'B_GameState_C_InitializeGameRules::CallFunc_GetGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeGameRules, CallFunc_GetBGameInstance_ReturnValue_1) == 0x000040, "Member 'B_GameState_C_InitializeGameRules::CallFunc_GetBGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeGameRules, K2Node_DynamicCast_AsB_Game_Instance_1) == 0x000048, "Member 'B_GameState_C_InitializeGameRules::K2Node_DynamicCast_AsB_Game_Instance_1' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeGameRules, K2Node_DynamicCast_bSuccess_1) == 0x000050, "Member 'B_GameState_C_InitializeGameRules::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeGameRules, CallFunc_GetGameRules_ReturnValue_1) == 0x000058, "Member 'B_GameState_C_InitializeGameRules::CallFunc_GetGameRules_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeGameRules, CallFunc_LoadGameFromSlot_ReturnValue) == 0x000060, "Member 'B_GameState_C_InitializeGameRules::CallFunc_LoadGameFromSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeGameRules, K2Node_DynamicCast_AsB_Game_Rules) == 0x000068, "Member 'B_GameState_C_InitializeGameRules::K2Node_DynamicCast_AsB_Game_Rules' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeGameRules, K2Node_DynamicCast_bSuccess_2) == 0x000070, "Member 'B_GameState_C_InitializeGameRules::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeGameRules, CallFunc_GetBGameInstance_ReturnValue_2) == 0x000078, "Member 'B_GameState_C_InitializeGameRules::CallFunc_GetBGameInstance_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeGameRules, CallFunc_GetBGameInstance_ReturnValue_3) == 0x000080, "Member 'B_GameState_C_InitializeGameRules::CallFunc_GetBGameInstance_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeGameRules, CallFunc_GetGameRules_ReturnValue_2) == 0x000088, "Member 'B_GameState_C_InitializeGameRules::CallFunc_GetGameRules_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeGameRules, CallFunc_GetGameRules_ReturnValue_3) == 0x000090, "Member 'B_GameState_C_InitializeGameRules::CallFunc_GetGameRules_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeGameRules, CallFunc_GetGameMode_ReturnValue) == 0x000098, "Member 'B_GameState_C_InitializeGameRules::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeGameRules, CallFunc_GetGameInstance_ReturnValue_2) == 0x0000A0, "Member 'B_GameState_C_InitializeGameRules::CallFunc_GetGameInstance_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeGameRules, K2Node_DynamicCast_AsB_Game_Mode) == 0x0000A8, "Member 'B_GameState_C_InitializeGameRules::K2Node_DynamicCast_AsB_Game_Mode' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeGameRules, K2Node_DynamicCast_bSuccess_3) == 0x0000B0, "Member 'B_GameState_C_InitializeGameRules::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeGameRules, K2Node_DynamicCast_AsB_Game_Instance_2) == 0x0000B8, "Member 'B_GameState_C_InitializeGameRules::K2Node_DynamicCast_AsB_Game_Instance_2' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeGameRules, K2Node_DynamicCast_bSuccess_4) == 0x0000C0, "Member 'B_GameState_C_InitializeGameRules::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeGameRules, CallFunc_GetEngineSubsystem_ReturnValue) == 0x0000C8, "Member 'B_GameState_C_InitializeGameRules::CallFunc_GetEngineSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeGameRules, CallFunc_GetGameInstance_ReturnValue_3) == 0x0000D0, "Member 'B_GameState_C_InitializeGameRules::CallFunc_GetGameInstance_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeGameRules, K2Node_DynamicCast_AsB_Game_Instance_3) == 0x0000D8, "Member 'B_GameState_C_InitializeGameRules::K2Node_DynamicCast_AsB_Game_Instance_3' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeGameRules, K2Node_DynamicCast_bSuccess_5) == 0x0000E0, "Member 'B_GameState_C_InitializeGameRules::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeGameRules, CallFunc_NotEqual_StriStri_ReturnValue) == 0x0000E1, "Member 'B_GameState_C_InitializeGameRules::CallFunc_NotEqual_StriStri_ReturnValue' has a wrong offset!");

// Function B_GameState.B_GameState_C.GetPlayerStateById
// 0x0070 (0x0070 - 0x0000)
struct B_GameState_C_GetPlayerStateById final
{
public:
	class FString                                 NetId;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       CurrentPlayer;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetNativePlatformAccountIdFromPlayerState_PlatformId; // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62[0x2];                                       // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameState_C_GetPlayerStateById) == 0x000008, "Wrong alignment on B_GameState_C_GetPlayerStateById");
static_assert(sizeof(B_GameState_C_GetPlayerStateById) == 0x000070, "Wrong size on B_GameState_C_GetPlayerStateById");
static_assert(offsetof(B_GameState_C_GetPlayerStateById, NetId) == 0x000000, "Member 'B_GameState_C_GetPlayerStateById::NetId' has a wrong offset!");
static_assert(offsetof(B_GameState_C_GetPlayerStateById, ReturnValue) == 0x000010, "Member 'B_GameState_C_GetPlayerStateById::ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_GetPlayerStateById, CurrentPlayer) == 0x000018, "Member 'B_GameState_C_GetPlayerStateById::CurrentPlayer' has a wrong offset!");
static_assert(offsetof(B_GameState_C_GetPlayerStateById, Temp_int_Array_Index_Variable) == 0x000020, "Member 'B_GameState_C_GetPlayerStateById::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_GameState_C_GetPlayerStateById, CallFunc_GetNativePlatformAccountIdFromPlayerState_PlatformId) == 0x000028, "Member 'B_GameState_C_GetPlayerStateById::CallFunc_GetNativePlatformAccountIdFromPlayerState_PlatformId' has a wrong offset!");
static_assert(offsetof(B_GameState_C_GetPlayerStateById, CallFunc_GetGameState_ReturnValue) == 0x000038, "Member 'B_GameState_C_GetPlayerStateById::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_GetPlayerStateById, Temp_int_Loop_Counter_Variable) == 0x000040, "Member 'B_GameState_C_GetPlayerStateById::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_GameState_C_GetPlayerStateById, CallFunc_Array_Get_Item) == 0x000048, "Member 'B_GameState_C_GetPlayerStateById::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_GameState_C_GetPlayerStateById, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'B_GameState_C_GetPlayerStateById::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_GetPlayerStateById, K2Node_DynamicCast_AsB_Player_State) == 0x000058, "Member 'B_GameState_C_GetPlayerStateById::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_GameState_C_GetPlayerStateById, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'B_GameState_C_GetPlayerStateById::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameState_C_GetPlayerStateById, CallFunc_Less_IntInt_ReturnValue) == 0x000061, "Member 'B_GameState_C_GetPlayerStateById::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_GetPlayerStateById, CallFunc_Add_IntInt_ReturnValue) == 0x000064, "Member 'B_GameState_C_GetPlayerStateById::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_GetPlayerStateById, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x000068, "Member 'B_GameState_C_GetPlayerStateById::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");

// Function B_GameState.B_GameState_C.InitializeTournamentPlayers
// 0x0070 (0x0070 - 0x0000)
struct B_GameState_C_InitializeTournamentPlayers final
{
public:
	TArray<class FString>                         PlayerIds;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<struct FS_TournamentPlayer>            TournamentPlayers_0;                               // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         CurrentIndex;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_TournamentPlayer_C*                  NewTournametPlayer;                                // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 CurrentPlayerId;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Array_Get_Item;                           // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_TournamentPlayer_C*                  CallFunc_CreateObject_Object;                      // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameState_C_InitializeTournamentPlayers) == 0x000008, "Wrong alignment on B_GameState_C_InitializeTournamentPlayers");
static_assert(sizeof(B_GameState_C_InitializeTournamentPlayers) == 0x000070, "Wrong size on B_GameState_C_InitializeTournamentPlayers");
static_assert(offsetof(B_GameState_C_InitializeTournamentPlayers, PlayerIds) == 0x000000, "Member 'B_GameState_C_InitializeTournamentPlayers::PlayerIds' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeTournamentPlayers, TournamentPlayers_0) == 0x000010, "Member 'B_GameState_C_InitializeTournamentPlayers::TournamentPlayers_0' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeTournamentPlayers, CurrentIndex) == 0x000020, "Member 'B_GameState_C_InitializeTournamentPlayers::CurrentIndex' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeTournamentPlayers, NewTournametPlayer) == 0x000028, "Member 'B_GameState_C_InitializeTournamentPlayers::NewTournametPlayer' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeTournamentPlayers, CurrentPlayerId) == 0x000030, "Member 'B_GameState_C_InitializeTournamentPlayers::CurrentPlayerId' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeTournamentPlayers, Temp_int_Array_Index_Variable) == 0x000040, "Member 'B_GameState_C_InitializeTournamentPlayers::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeTournamentPlayers, CallFunc_Array_Length_ReturnValue) == 0x000044, "Member 'B_GameState_C_InitializeTournamentPlayers::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeTournamentPlayers, CallFunc_Array_Get_Item) == 0x000048, "Member 'B_GameState_C_InitializeTournamentPlayers::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeTournamentPlayers, Temp_int_Loop_Counter_Variable) == 0x000058, "Member 'B_GameState_C_InitializeTournamentPlayers::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeTournamentPlayers, CallFunc_Less_IntInt_ReturnValue) == 0x00005C, "Member 'B_GameState_C_InitializeTournamentPlayers::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeTournamentPlayers, CallFunc_Add_IntInt_ReturnValue) == 0x000060, "Member 'B_GameState_C_InitializeTournamentPlayers::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeTournamentPlayers, CallFunc_CreateObject_Object) == 0x000068, "Member 'B_GameState_C_InitializeTournamentPlayers::CallFunc_CreateObject_Object' has a wrong offset!");

// Function B_GameState.B_GameState_C.ShouldTeamVoiceBeEnabled
// 0x0005 (0x0005 - 0x0000)
struct B_GameState_C_ShouldTeamVoiceBeEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasRoundStarted_RoundHasStarted;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsRoundEnd_RoundIsEnd;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameState_C_ShouldTeamVoiceBeEnabled) == 0x000001, "Wrong alignment on B_GameState_C_ShouldTeamVoiceBeEnabled");
static_assert(sizeof(B_GameState_C_ShouldTeamVoiceBeEnabled) == 0x000005, "Wrong size on B_GameState_C_ShouldTeamVoiceBeEnabled");
static_assert(offsetof(B_GameState_C_ShouldTeamVoiceBeEnabled, ReturnValue) == 0x000000, "Member 'B_GameState_C_ShouldTeamVoiceBeEnabled::ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ShouldTeamVoiceBeEnabled, CallFunc_HasRoundStarted_RoundHasStarted) == 0x000001, "Member 'B_GameState_C_ShouldTeamVoiceBeEnabled::CallFunc_HasRoundStarted_RoundHasStarted' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ShouldTeamVoiceBeEnabled, CallFunc_IsRoundEnd_RoundIsEnd) == 0x000002, "Member 'B_GameState_C_ShouldTeamVoiceBeEnabled::CallFunc_IsRoundEnd_RoundIsEnd' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ShouldTeamVoiceBeEnabled, CallFunc_Not_PreBool_ReturnValue) == 0x000003, "Member 'B_GameState_C_ShouldTeamVoiceBeEnabled::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ShouldTeamVoiceBeEnabled, CallFunc_BooleanAND_ReturnValue) == 0x000004, "Member 'B_GameState_C_ShouldTeamVoiceBeEnabled::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function B_GameState.B_GameState_C.TeamCheck
// 0x0018 (0x0018 - 0x0000)
struct B_GameState_C_TeamCheck final
{
public:
	class APlayerState*                           PlayerStateA;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerState*                           PlayerStateB;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          bSameTeam;                                         // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ArePlayersInSameTeam_ReturnValue;         // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameState_C_TeamCheck) == 0x000008, "Wrong alignment on B_GameState_C_TeamCheck");
static_assert(sizeof(B_GameState_C_TeamCheck) == 0x000018, "Wrong size on B_GameState_C_TeamCheck");
static_assert(offsetof(B_GameState_C_TeamCheck, PlayerStateA) == 0x000000, "Member 'B_GameState_C_TeamCheck::PlayerStateA' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TeamCheck, PlayerStateB) == 0x000008, "Member 'B_GameState_C_TeamCheck::PlayerStateB' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TeamCheck, bSameTeam) == 0x000010, "Member 'B_GameState_C_TeamCheck::bSameTeam' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TeamCheck, CallFunc_ArePlayersInSameTeam_ReturnValue) == 0x000011, "Member 'B_GameState_C_TeamCheck::CallFunc_ArePlayersInSameTeam_ReturnValue' has a wrong offset!");

// Function B_GameState.B_GameState_C.InitializeGameName
// 0x0038 (0x0038 - 0x0000)
struct B_GameState_C_InitializeGameName final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_1;            // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_1;            // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_StrStr_ReturnValue;              // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameState_C_InitializeGameName) == 0x000008, "Wrong alignment on B_GameState_C_InitializeGameName");
static_assert(sizeof(B_GameState_C_InitializeGameName) == 0x000038, "Wrong size on B_GameState_C_InitializeGameName");
static_assert(offsetof(B_GameState_C_InitializeGameName, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'B_GameState_C_InitializeGameName::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeGameName, CallFunc_GetGameInstance_ReturnValue) == 0x000008, "Member 'B_GameState_C_InitializeGameName::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeGameName, K2Node_DynamicCast_AsB_Game_Instance) == 0x000010, "Member 'B_GameState_C_InitializeGameName::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeGameName, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'B_GameState_C_InitializeGameName::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeGameName, CallFunc_GetGameInstance_ReturnValue_1) == 0x000020, "Member 'B_GameState_C_InitializeGameName::CallFunc_GetGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeGameName, K2Node_DynamicCast_AsB_Game_Instance_1) == 0x000028, "Member 'B_GameState_C_InitializeGameName::K2Node_DynamicCast_AsB_Game_Instance_1' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeGameName, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'B_GameState_C_InitializeGameName::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeGameName, CallFunc_NotEqual_StrStr_ReturnValue) == 0x000031, "Member 'B_GameState_C_InitializeGameName::CallFunc_NotEqual_StrStr_ReturnValue' has a wrong offset!");

// Function B_GameState.B_GameState_C.UnregisterHunterActor
// 0x0010 (0x0010 - 0x0000)
struct B_GameState_C_UnregisterHunterActor final
{
public:
	class AActor*                                 HunterActor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameState_C_UnregisterHunterActor) == 0x000008, "Wrong alignment on B_GameState_C_UnregisterHunterActor");
static_assert(sizeof(B_GameState_C_UnregisterHunterActor) == 0x000010, "Wrong size on B_GameState_C_UnregisterHunterActor");
static_assert(offsetof(B_GameState_C_UnregisterHunterActor, HunterActor) == 0x000000, "Member 'B_GameState_C_UnregisterHunterActor::HunterActor' has a wrong offset!");
static_assert(offsetof(B_GameState_C_UnregisterHunterActor, CallFunc_HasAuthority_ReturnValue) == 0x000008, "Member 'B_GameState_C_UnregisterHunterActor::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_UnregisterHunterActor, CallFunc_Array_RemoveItem_ReturnValue) == 0x000009, "Member 'B_GameState_C_UnregisterHunterActor::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");

// Function B_GameState.B_GameState_C.RegisterHunterActor
// 0x0010 (0x0010 - 0x0000)
struct B_GameState_C_RegisterHunterActor final
{
public:
	class AActor*                                 HunterActor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameState_C_RegisterHunterActor) == 0x000008, "Wrong alignment on B_GameState_C_RegisterHunterActor");
static_assert(sizeof(B_GameState_C_RegisterHunterActor) == 0x000010, "Wrong size on B_GameState_C_RegisterHunterActor");
static_assert(offsetof(B_GameState_C_RegisterHunterActor, HunterActor) == 0x000000, "Member 'B_GameState_C_RegisterHunterActor::HunterActor' has a wrong offset!");
static_assert(offsetof(B_GameState_C_RegisterHunterActor, CallFunc_HasAuthority_ReturnValue) == 0x000008, "Member 'B_GameState_C_RegisterHunterActor::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_RegisterHunterActor, CallFunc_Array_AddUnique_ReturnValue) == 0x00000C, "Member 'B_GameState_C_RegisterHunterActor::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");

// Function B_GameState.B_GameState_C.UnregisterWitchActor
// 0x0010 (0x0010 - 0x0000)
struct B_GameState_C_UnregisterWitchActor final
{
public:
	class AActor*                                 WitchActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameState_C_UnregisterWitchActor) == 0x000008, "Wrong alignment on B_GameState_C_UnregisterWitchActor");
static_assert(sizeof(B_GameState_C_UnregisterWitchActor) == 0x000010, "Wrong size on B_GameState_C_UnregisterWitchActor");
static_assert(offsetof(B_GameState_C_UnregisterWitchActor, WitchActor) == 0x000000, "Member 'B_GameState_C_UnregisterWitchActor::WitchActor' has a wrong offset!");
static_assert(offsetof(B_GameState_C_UnregisterWitchActor, CallFunc_HasAuthority_ReturnValue) == 0x000008, "Member 'B_GameState_C_UnregisterWitchActor::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_UnregisterWitchActor, CallFunc_Array_RemoveItem_ReturnValue) == 0x000009, "Member 'B_GameState_C_UnregisterWitchActor::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");

// Function B_GameState.B_GameState_C.RegisterWitchActor
// 0x0010 (0x0010 - 0x0000)
struct B_GameState_C_RegisterWitchActor final
{
public:
	class AActor*                                 WitchActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameState_C_RegisterWitchActor) == 0x000008, "Wrong alignment on B_GameState_C_RegisterWitchActor");
static_assert(sizeof(B_GameState_C_RegisterWitchActor) == 0x000010, "Wrong size on B_GameState_C_RegisterWitchActor");
static_assert(offsetof(B_GameState_C_RegisterWitchActor, WitchActor) == 0x000000, "Member 'B_GameState_C_RegisterWitchActor::WitchActor' has a wrong offset!");
static_assert(offsetof(B_GameState_C_RegisterWitchActor, CallFunc_HasAuthority_ReturnValue) == 0x000008, "Member 'B_GameState_C_RegisterWitchActor::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_RegisterWitchActor, CallFunc_Array_AddUnique_ReturnValue) == 0x00000C, "Member 'B_GameState_C_RegisterWitchActor::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");

// Function B_GameState.B_GameState_C.TickCollectedPropsForWake
// 0x0078 (0x0078 - 0x0000)
struct B_GameState_C_TickCollectedPropsForWake final
{
public:
	TArray<class AActor*>                         PropsToReplicate;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item_1;                         // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_StaticMeshProp_C*                    K2Node_DynamicCast_AsB_Static_Mesh_Prop;           // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue_1;           // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62[0x2];                                       // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E[0x2];                                       // 0x006E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameState_C_TickCollectedPropsForWake) == 0x000008, "Wrong alignment on B_GameState_C_TickCollectedPropsForWake");
static_assert(sizeof(B_GameState_C_TickCollectedPropsForWake) == 0x000078, "Wrong size on B_GameState_C_TickCollectedPropsForWake");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForWake, PropsToReplicate) == 0x000000, "Member 'B_GameState_C_TickCollectedPropsForWake::PropsToReplicate' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForWake, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'B_GameState_C_TickCollectedPropsForWake::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForWake, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'B_GameState_C_TickCollectedPropsForWake::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForWake, Temp_bool_True_if_break_was_hit_Variable) == 0x000018, "Member 'B_GameState_C_TickCollectedPropsForWake::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForWake, Temp_int_Array_Index_Variable) == 0x00001C, "Member 'B_GameState_C_TickCollectedPropsForWake::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForWake, CallFunc_Not_PreBool_ReturnValue) == 0x000020, "Member 'B_GameState_C_TickCollectedPropsForWake::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForWake, Temp_int_Loop_Counter_Variable_1) == 0x000024, "Member 'B_GameState_C_TickCollectedPropsForWake::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForWake, CallFunc_Add_IntInt_ReturnValue_1) == 0x000028, "Member 'B_GameState_C_TickCollectedPropsForWake::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForWake, CallFunc_Array_Length_ReturnValue) == 0x00002C, "Member 'B_GameState_C_TickCollectedPropsForWake::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForWake, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'B_GameState_C_TickCollectedPropsForWake::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForWake, Temp_int_Array_Index_Variable_1) == 0x000034, "Member 'B_GameState_C_TickCollectedPropsForWake::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForWake, CallFunc_Array_Get_Item) == 0x000038, "Member 'B_GameState_C_TickCollectedPropsForWake::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForWake, CallFunc_Array_RemoveItem_ReturnValue) == 0x000040, "Member 'B_GameState_C_TickCollectedPropsForWake::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForWake, CallFunc_Array_Length_ReturnValue_1) == 0x000044, "Member 'B_GameState_C_TickCollectedPropsForWake::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForWake, CallFunc_Array_Get_Item_1) == 0x000048, "Member 'B_GameState_C_TickCollectedPropsForWake::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForWake, CallFunc_Greater_IntInt_ReturnValue) == 0x000050, "Member 'B_GameState_C_TickCollectedPropsForWake::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForWake, K2Node_DynamicCast_AsB_Static_Mesh_Prop) == 0x000058, "Member 'B_GameState_C_TickCollectedPropsForWake::K2Node_DynamicCast_AsB_Static_Mesh_Prop' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForWake, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'B_GameState_C_TickCollectedPropsForWake::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForWake, CallFunc_Array_RemoveItem_ReturnValue_1) == 0x000061, "Member 'B_GameState_C_TickCollectedPropsForWake::CallFunc_Array_RemoveItem_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForWake, CallFunc_Array_Add_ReturnValue) == 0x000064, "Member 'B_GameState_C_TickCollectedPropsForWake::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForWake, CallFunc_Array_Length_ReturnValue_2) == 0x000068, "Member 'B_GameState_C_TickCollectedPropsForWake::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForWake, CallFunc_Less_IntInt_ReturnValue_1) == 0x00006C, "Member 'B_GameState_C_TickCollectedPropsForWake::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForWake, CallFunc_BooleanAND_ReturnValue) == 0x00006D, "Member 'B_GameState_C_TickCollectedPropsForWake::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForWake, CallFunc_Array_Length_ReturnValue_3) == 0x000070, "Member 'B_GameState_C_TickCollectedPropsForWake::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForWake, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000074, "Member 'B_GameState_C_TickCollectedPropsForWake::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");

// Function B_GameState.B_GameState_C.CollectAllSleepingProps
// 0x0020 (0x0020 - 0x0000)
struct B_GameState_C_CollectAllSleepingProps final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameState_C_CollectAllSleepingProps) == 0x000008, "Wrong alignment on B_GameState_C_CollectAllSleepingProps");
static_assert(sizeof(B_GameState_C_CollectAllSleepingProps) == 0x000020, "Wrong size on B_GameState_C_CollectAllSleepingProps");
static_assert(offsetof(B_GameState_C_CollectAllSleepingProps, Temp_int_Array_Index_Variable) == 0x000000, "Member 'B_GameState_C_CollectAllSleepingProps::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_GameState_C_CollectAllSleepingProps, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'B_GameState_C_CollectAllSleepingProps::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_GameState_C_CollectAllSleepingProps, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'B_GameState_C_CollectAllSleepingProps::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_CollectAllSleepingProps, CallFunc_Array_Length_ReturnValue) == 0x00000C, "Member 'B_GameState_C_CollectAllSleepingProps::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_CollectAllSleepingProps, CallFunc_Array_Get_Item) == 0x000010, "Member 'B_GameState_C_CollectAllSleepingProps::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_GameState_C_CollectAllSleepingProps, CallFunc_Less_IntInt_ReturnValue) == 0x000018, "Member 'B_GameState_C_CollectAllSleepingProps::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function B_GameState.B_GameState_C.TickCollectedPropsForSleep
// 0x0150 (0x0150 - 0x0000)
struct B_GameState_C_TickCollectedPropsForSleep final
{
public:
	TArray<struct FRotator>                       PropRotationsToReplicate;                          // 0x0000(0x0010)(Edit, BlueprintVisible)
	TArray<struct FVector>                        PropLocationsToReplicate;                          // 0x0010(0x0010)(Edit, BlueprintVisible)
	TArray<class AActor*>                         PropsToReplicate;                                  // 0x0020(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5E[0x2];                                       // 0x005E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item_1;                         // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0075(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_76[0x2];                                       // 0x0076(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0080(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AB_StaticMeshProp_C*                    K2Node_DynamicCast_AsB_Static_Mesh_Prop;           // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0108(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0120(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameState_C_TickCollectedPropsForSleep) == 0x000010, "Wrong alignment on B_GameState_C_TickCollectedPropsForSleep");
static_assert(sizeof(B_GameState_C_TickCollectedPropsForSleep) == 0x000150, "Wrong size on B_GameState_C_TickCollectedPropsForSleep");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForSleep, PropRotationsToReplicate) == 0x000000, "Member 'B_GameState_C_TickCollectedPropsForSleep::PropRotationsToReplicate' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForSleep, PropLocationsToReplicate) == 0x000010, "Member 'B_GameState_C_TickCollectedPropsForSleep::PropLocationsToReplicate' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForSleep, PropsToReplicate) == 0x000020, "Member 'B_GameState_C_TickCollectedPropsForSleep::PropsToReplicate' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForSleep, Temp_int_Loop_Counter_Variable) == 0x000030, "Member 'B_GameState_C_TickCollectedPropsForSleep::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForSleep, Temp_int_Loop_Counter_Variable_1) == 0x000034, "Member 'B_GameState_C_TickCollectedPropsForSleep::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForSleep, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'B_GameState_C_TickCollectedPropsForSleep::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForSleep, CallFunc_Subtract_IntInt_ReturnValue) == 0x00003C, "Member 'B_GameState_C_TickCollectedPropsForSleep::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForSleep, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000040, "Member 'B_GameState_C_TickCollectedPropsForSleep::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForSleep, Temp_bool_True_if_break_was_hit_Variable) == 0x000041, "Member 'B_GameState_C_TickCollectedPropsForSleep::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForSleep, Temp_int_Array_Index_Variable) == 0x000044, "Member 'B_GameState_C_TickCollectedPropsForSleep::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForSleep, CallFunc_Not_PreBool_ReturnValue) == 0x000048, "Member 'B_GameState_C_TickCollectedPropsForSleep::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForSleep, CallFunc_BooleanAND_ReturnValue) == 0x000049, "Member 'B_GameState_C_TickCollectedPropsForSleep::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForSleep, CallFunc_Array_Get_Item) == 0x000050, "Member 'B_GameState_C_TickCollectedPropsForSleep::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForSleep, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'B_GameState_C_TickCollectedPropsForSleep::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForSleep, CallFunc_Array_RemoveItem_ReturnValue) == 0x00005C, "Member 'B_GameState_C_TickCollectedPropsForSleep::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForSleep, CallFunc_Less_IntInt_ReturnValue) == 0x00005D, "Member 'B_GameState_C_TickCollectedPropsForSleep::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForSleep, CallFunc_Array_Length_ReturnValue_1) == 0x000060, "Member 'B_GameState_C_TickCollectedPropsForSleep::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForSleep, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x000064, "Member 'B_GameState_C_TickCollectedPropsForSleep::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForSleep, CallFunc_Array_Get_Item_1) == 0x000068, "Member 'B_GameState_C_TickCollectedPropsForSleep::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForSleep, CallFunc_Array_Length_ReturnValue_2) == 0x000070, "Member 'B_GameState_C_TickCollectedPropsForSleep::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForSleep, CallFunc_IsValid_ReturnValue) == 0x000074, "Member 'B_GameState_C_TickCollectedPropsForSleep::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForSleep, CallFunc_Greater_IntInt_ReturnValue) == 0x000075, "Member 'B_GameState_C_TickCollectedPropsForSleep::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForSleep, CallFunc_Array_Add_ReturnValue) == 0x000078, "Member 'B_GameState_C_TickCollectedPropsForSleep::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForSleep, CallFunc_GetTransform_ReturnValue) == 0x000080, "Member 'B_GameState_C_TickCollectedPropsForSleep::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForSleep, K2Node_DynamicCast_AsB_Static_Mesh_Prop) == 0x0000E0, "Member 'B_GameState_C_TickCollectedPropsForSleep::K2Node_DynamicCast_AsB_Static_Mesh_Prop' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForSleep, K2Node_DynamicCast_bSuccess) == 0x0000E8, "Member 'B_GameState_C_TickCollectedPropsForSleep::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForSleep, CallFunc_BreakTransform_Location) == 0x0000F0, "Member 'B_GameState_C_TickCollectedPropsForSleep::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForSleep, CallFunc_BreakTransform_Rotation) == 0x000108, "Member 'B_GameState_C_TickCollectedPropsForSleep::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForSleep, CallFunc_BreakTransform_Scale) == 0x000120, "Member 'B_GameState_C_TickCollectedPropsForSleep::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForSleep, CallFunc_Array_Add_ReturnValue_1) == 0x000138, "Member 'B_GameState_C_TickCollectedPropsForSleep::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForSleep, CallFunc_Array_Add_ReturnValue_2) == 0x00013C, "Member 'B_GameState_C_TickCollectedPropsForSleep::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForSleep, CallFunc_Array_Length_ReturnValue_3) == 0x000140, "Member 'B_GameState_C_TickCollectedPropsForSleep::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameState_C_TickCollectedPropsForSleep, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000144, "Member 'B_GameState_C_TickCollectedPropsForSleep::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");

// Function B_GameState.B_GameState_C.SendChatMessageMulticast
// 0x0020 (0x0020 - 0x0000)
struct B_GameState_C_SendChatMessageMulticast final
{
public:
	class FText                                   ChatMessage;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm)
	class AB_PlayerState_C*                       Player;                                            // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EChatType                                     ChatType;                                          // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameState_C_SendChatMessageMulticast) == 0x000008, "Wrong alignment on B_GameState_C_SendChatMessageMulticast");
static_assert(sizeof(B_GameState_C_SendChatMessageMulticast) == 0x000020, "Wrong size on B_GameState_C_SendChatMessageMulticast");
static_assert(offsetof(B_GameState_C_SendChatMessageMulticast, ChatMessage) == 0x000000, "Member 'B_GameState_C_SendChatMessageMulticast::ChatMessage' has a wrong offset!");
static_assert(offsetof(B_GameState_C_SendChatMessageMulticast, Player) == 0x000010, "Member 'B_GameState_C_SendChatMessageMulticast::Player' has a wrong offset!");
static_assert(offsetof(B_GameState_C_SendChatMessageMulticast, ChatType) == 0x000018, "Member 'B_GameState_C_SendChatMessageMulticast::ChatType' has a wrong offset!");

// Function B_GameState.B_GameState_C.SendGameMessageMulticast
// 0x0028 (0x0028 - 0x0000)
struct B_GameState_C_SendGameMessageMulticast final
{
public:
	class FText                                   SourcePlayerName;                                  // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   TargetPlayerName;                                  // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm)
	EGameMessageType                              MessageType;                                       // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameState_C_SendGameMessageMulticast) == 0x000008, "Wrong alignment on B_GameState_C_SendGameMessageMulticast");
static_assert(sizeof(B_GameState_C_SendGameMessageMulticast) == 0x000028, "Wrong size on B_GameState_C_SendGameMessageMulticast");
static_assert(offsetof(B_GameState_C_SendGameMessageMulticast, SourcePlayerName) == 0x000000, "Member 'B_GameState_C_SendGameMessageMulticast::SourcePlayerName' has a wrong offset!");
static_assert(offsetof(B_GameState_C_SendGameMessageMulticast, TargetPlayerName) == 0x000010, "Member 'B_GameState_C_SendGameMessageMulticast::TargetPlayerName' has a wrong offset!");
static_assert(offsetof(B_GameState_C_SendGameMessageMulticast, MessageType) == 0x000020, "Member 'B_GameState_C_SendGameMessageMulticast::MessageType' has a wrong offset!");

// Function B_GameState.B_GameState_C.PutPropsToSleep
// 0x0030 (0x0030 - 0x0000)
struct B_GameState_C_PutPropsToSleep final
{
public:
	TArray<class AActor*>                         Actors;                                            // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<struct FVector>                        SleepLocation;                                     // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<struct FRotator>                       SleepRotation;                                     // 0x0020(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(B_GameState_C_PutPropsToSleep) == 0x000008, "Wrong alignment on B_GameState_C_PutPropsToSleep");
static_assert(sizeof(B_GameState_C_PutPropsToSleep) == 0x000030, "Wrong size on B_GameState_C_PutPropsToSleep");
static_assert(offsetof(B_GameState_C_PutPropsToSleep, Actors) == 0x000000, "Member 'B_GameState_C_PutPropsToSleep::Actors' has a wrong offset!");
static_assert(offsetof(B_GameState_C_PutPropsToSleep, SleepLocation) == 0x000010, "Member 'B_GameState_C_PutPropsToSleep::SleepLocation' has a wrong offset!");
static_assert(offsetof(B_GameState_C_PutPropsToSleep, SleepRotation) == 0x000020, "Member 'B_GameState_C_PutPropsToSleep::SleepRotation' has a wrong offset!");

// Function B_GameState.B_GameState_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct B_GameState_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameState_C_ReceiveTick) == 0x000004, "Wrong alignment on B_GameState_C_ReceiveTick");
static_assert(sizeof(B_GameState_C_ReceiveTick) == 0x000004, "Wrong size on B_GameState_C_ReceiveTick");
static_assert(offsetof(B_GameState_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'B_GameState_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function B_GameState.B_GameState_C.PutPropsToWake
// 0x0010 (0x0010 - 0x0000)
struct B_GameState_C_PutPropsToWake final
{
public:
	TArray<class AActor*>                         Actors;                                            // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(B_GameState_C_PutPropsToWake) == 0x000008, "Wrong alignment on B_GameState_C_PutPropsToWake");
static_assert(sizeof(B_GameState_C_PutPropsToWake) == 0x000010, "Wrong size on B_GameState_C_PutPropsToWake");
static_assert(offsetof(B_GameState_C_PutPropsToWake, Actors) == 0x000000, "Member 'B_GameState_C_PutPropsToWake::Actors' has a wrong offset!");

// Function B_GameState.B_GameState_C.CollectSleepProp
// 0x0008 (0x0008 - 0x0000)
struct B_GameState_C_CollectSleepProp final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameState_C_CollectSleepProp) == 0x000008, "Wrong alignment on B_GameState_C_CollectSleepProp");
static_assert(sizeof(B_GameState_C_CollectSleepProp) == 0x000008, "Wrong size on B_GameState_C_CollectSleepProp");
static_assert(offsetof(B_GameState_C_CollectSleepProp, Actor) == 0x000000, "Member 'B_GameState_C_CollectSleepProp::Actor' has a wrong offset!");

// Function B_GameState.B_GameState_C.CollectWakeProp
// 0x0008 (0x0008 - 0x0000)
struct B_GameState_C_CollectWakeProp final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameState_C_CollectWakeProp) == 0x000008, "Wrong alignment on B_GameState_C_CollectWakeProp");
static_assert(sizeof(B_GameState_C_CollectWakeProp) == 0x000008, "Wrong size on B_GameState_C_CollectWakeProp");
static_assert(offsetof(B_GameState_C_CollectWakeProp, Actor) == 0x000000, "Member 'B_GameState_C_CollectWakeProp::Actor' has a wrong offset!");

// Function B_GameState.B_GameState_C.AddSleepProp
// 0x0008 (0x0008 - 0x0000)
struct B_GameState_C_AddSleepProp final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameState_C_AddSleepProp) == 0x000008, "Wrong alignment on B_GameState_C_AddSleepProp");
static_assert(sizeof(B_GameState_C_AddSleepProp) == 0x000008, "Wrong size on B_GameState_C_AddSleepProp");
static_assert(offsetof(B_GameState_C_AddSleepProp, Actor) == 0x000000, "Member 'B_GameState_C_AddSleepProp::Actor' has a wrong offset!");

// Function B_GameState.B_GameState_C.RemoveSleepProp
// 0x0008 (0x0008 - 0x0000)
struct B_GameState_C_RemoveSleepProp final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameState_C_RemoveSleepProp) == 0x000008, "Wrong alignment on B_GameState_C_RemoveSleepProp");
static_assert(sizeof(B_GameState_C_RemoveSleepProp) == 0x000008, "Wrong size on B_GameState_C_RemoveSleepProp");
static_assert(offsetof(B_GameState_C_RemoveSleepProp, Actor) == 0x000000, "Member 'B_GameState_C_RemoveSleepProp::Actor' has a wrong offset!");

// Function B_GameState.B_GameState_C.StartKickVote
// 0x0020 (0x0020 - 0x0000)
struct B_GameState_C_StartKickVote final
{
public:
	class FName                                   PlayerNameToKick_0;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   ReasonToKick_0;                                    // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FName                                   PlayerNameStartedKickVote_0;                       // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameState_C_StartKickVote) == 0x000008, "Wrong alignment on B_GameState_C_StartKickVote");
static_assert(sizeof(B_GameState_C_StartKickVote) == 0x000020, "Wrong size on B_GameState_C_StartKickVote");
static_assert(offsetof(B_GameState_C_StartKickVote, PlayerNameToKick_0) == 0x000000, "Member 'B_GameState_C_StartKickVote::PlayerNameToKick_0' has a wrong offset!");
static_assert(offsetof(B_GameState_C_StartKickVote, ReasonToKick_0) == 0x000008, "Member 'B_GameState_C_StartKickVote::ReasonToKick_0' has a wrong offset!");
static_assert(offsetof(B_GameState_C_StartKickVote, PlayerNameStartedKickVote_0) == 0x000018, "Member 'B_GameState_C_StartKickVote::PlayerNameStartedKickVote_0' has a wrong offset!");

// Function B_GameState.B_GameState_C.OnPlayerJoinedMulti
// 0x0008 (0x0008 - 0x0000)
struct B_GameState_C_OnPlayerJoinedMulti final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameState_C_OnPlayerJoinedMulti) == 0x000008, "Wrong alignment on B_GameState_C_OnPlayerJoinedMulti");
static_assert(sizeof(B_GameState_C_OnPlayerJoinedMulti) == 0x000008, "Wrong size on B_GameState_C_OnPlayerJoinedMulti");
static_assert(offsetof(B_GameState_C_OnPlayerJoinedMulti, PlayerState) == 0x000000, "Member 'B_GameState_C_OnPlayerJoinedMulti::PlayerState' has a wrong offset!");

// Function B_GameState.B_GameState_C.OnPlayerLeftMulti
// 0x0008 (0x0008 - 0x0000)
struct B_GameState_C_OnPlayerLeftMulti final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameState_C_OnPlayerLeftMulti) == 0x000008, "Wrong alignment on B_GameState_C_OnPlayerLeftMulti");
static_assert(sizeof(B_GameState_C_OnPlayerLeftMulti) == 0x000008, "Wrong size on B_GameState_C_OnPlayerLeftMulti");
static_assert(offsetof(B_GameState_C_OnPlayerLeftMulti, PlayerState) == 0x000000, "Member 'B_GameState_C_OnPlayerLeftMulti::PlayerState' has a wrong offset!");

// Function B_GameState.B_GameState_C.SendTournamentScoresMulti
// 0x0020 (0x0020 - 0x0000)
struct B_GameState_C_SendTournamentScoresMulti final
{
public:
	TArray<class FString>                         PlayerNames;                                       // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<int32>                                 Scores;                                            // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(B_GameState_C_SendTournamentScoresMulti) == 0x000008, "Wrong alignment on B_GameState_C_SendTournamentScoresMulti");
static_assert(sizeof(B_GameState_C_SendTournamentScoresMulti) == 0x000020, "Wrong size on B_GameState_C_SendTournamentScoresMulti");
static_assert(offsetof(B_GameState_C_SendTournamentScoresMulti, PlayerNames) == 0x000000, "Member 'B_GameState_C_SendTournamentScoresMulti::PlayerNames' has a wrong offset!");
static_assert(offsetof(B_GameState_C_SendTournamentScoresMulti, Scores) == 0x000010, "Member 'B_GameState_C_SendTournamentScoresMulti::Scores' has a wrong offset!");

// Function B_GameState.B_GameState_C.InitializeTournamentPlayersMulti
// 0x0020 (0x0020 - 0x0000)
struct B_GameState_C_InitializeTournamentPlayersMulti final
{
public:
	TArray<class FString>                         PlayerIds;                                         // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<struct FS_TournamentPlayer>            TournamentPlayers_0;                               // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(B_GameState_C_InitializeTournamentPlayersMulti) == 0x000008, "Wrong alignment on B_GameState_C_InitializeTournamentPlayersMulti");
static_assert(sizeof(B_GameState_C_InitializeTournamentPlayersMulti) == 0x000020, "Wrong size on B_GameState_C_InitializeTournamentPlayersMulti");
static_assert(offsetof(B_GameState_C_InitializeTournamentPlayersMulti, PlayerIds) == 0x000000, "Member 'B_GameState_C_InitializeTournamentPlayersMulti::PlayerIds' has a wrong offset!");
static_assert(offsetof(B_GameState_C_InitializeTournamentPlayersMulti, TournamentPlayers_0) == 0x000010, "Member 'B_GameState_C_InitializeTournamentPlayersMulti::TournamentPlayers_0' has a wrong offset!");

// Function B_GameState.B_GameState_C.UpdateTournamentPlayerScoreMulti
// 0x0018 (0x0018 - 0x0000)
struct B_GameState_C_UpdateTournamentPlayerScoreMulti final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         NewScore;                                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameState_C_UpdateTournamentPlayerScoreMulti) == 0x000008, "Wrong alignment on B_GameState_C_UpdateTournamentPlayerScoreMulti");
static_assert(sizeof(B_GameState_C_UpdateTournamentPlayerScoreMulti) == 0x000018, "Wrong size on B_GameState_C_UpdateTournamentPlayerScoreMulti");
static_assert(offsetof(B_GameState_C_UpdateTournamentPlayerScoreMulti, PlayerId) == 0x000000, "Member 'B_GameState_C_UpdateTournamentPlayerScoreMulti::PlayerId' has a wrong offset!");
static_assert(offsetof(B_GameState_C_UpdateTournamentPlayerScoreMulti, NewScore) == 0x000010, "Member 'B_GameState_C_UpdateTournamentPlayerScoreMulti::NewScore' has a wrong offset!");

// Function B_GameState.B_GameState_C.ExecuteUbergraph_B_GameState
// 0x05F0 (0x05F0 - 0x0000)
struct B_GameState_C_ExecuteUbergraph_B_GameState final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_1;            // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_1;            // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_1;          // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_2;            // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_2;            // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_1;               // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_63[0x1];                                       // 0x0063(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_3;            // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_4;            // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_3;            // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_4;            // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetFirstLocalPlayerController_ReturnValue; // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetPlayerName_PlayerName;                 // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StriStri_ReturnValue;          // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_2;               // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B2[0x6];                                       // 0x00B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_CustomEvent_ChatMessage;                    // 0x00B8(0x0010)()
	class AB_PlayerState_C*                       K2Node_CustomEvent_Player;                         // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EChatType                                     K2Node_CustomEvent_ChatType;                       // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_2;          // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D2[0x6];                                       // 0x00D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_CustomEvent_SourcePlayerName;               // 0x00D8(0x0010)()
	class FText                                   K2Node_CustomEvent_TargetPlayerName;               // 0x00E8(0x0010)()
	EGameMessageType                              K2Node_CustomEvent_MessageType;                    // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_3;          // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FA[0x6];                                       // 0x00FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_5;            // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_5;            // 0x0108(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_CustomEvent_Actors_1;                       // 0x0118(0x0010)(ConstParm, ReferenceParm)
	TArray<struct FVector>                        K2Node_CustomEvent_SleepLocation;                  // 0x0128(0x0010)(ConstParm, ReferenceParm)
	TArray<struct FRotator>                       K2Node_CustomEvent_SleepRotation;                  // 0x0138(0x0010)(ConstParm, ReferenceParm)
	struct FRotator                               CallFunc_Array_Get_Item;                           // 0x0148(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Array_Get_Item_1;                         // 0x0160(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item_2;                         // 0x0178(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_StaticMeshProp_C*                    K2Node_DynamicCast_AsB_Static_Mesh_Prop;           // 0x0188(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_191[0x7];                                      // 0x0191(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetActorTransform_SweepHitResult;      // 0x0198(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorTransform_ReturnValue;         // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_291[0xF];                                      // 0x0291(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x02A0(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorScale3D_ReturnValue;              // 0x0300(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_TransformTransform_ReturnValue; // 0x0318(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_319[0x7];                                      // 0x0319(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0320(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0380(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_384[0x4];                                      // 0x0384(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_CustomEvent_Actors;                         // 0x0388(0x0010)(ConstParm, ReferenceParm)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_6;            // 0x0398(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item_3;                         // 0x03A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_6;            // 0x03A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_7;                     // 0x03B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B1[0x7];                                      // 0x03B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_StaticMeshProp_C*                    K2Node_DynamicCast_AsB_Static_Mesh_Prop_1;         // 0x03B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_8;                     // 0x03C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C1[0x3];                                      // 0x03C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x03C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_Actor_3;                        // 0x03C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_Actor_2;                        // 0x03D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x03D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DC[0x4];                                      // 0x03DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_Actor_1;                        // 0x03E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue_1;            // 0x03E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EC[0x4];                                      // 0x03EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_Actor;                          // 0x03F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue_2;            // 0x03F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_PlayerNameToKick;               // 0x03FC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_404[0x4];                                      // 0x0404(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_CustomEvent_ReasonToKick;                   // 0x0408(0x0010)()
	class FName                                   K2Node_CustomEvent_PlayerNameStartedKickVote;      // 0x0418(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0420(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_4;          // 0x0421(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_422[0x2];                                      // 0x0422(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0424(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_5;          // 0x0428(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0429(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42A[0x2];                                      // 0x042A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x042C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0430(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue_1;           // 0x0431(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0432(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_433[0x1];                                      // 0x0433(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue_3;            // 0x0434(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0438(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x043C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_43D[0x3];                                      // 0x043D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0440(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_444[0x4];                                      // 0x0444(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           K2Node_CustomEvent_PlayerState_1;                  // 0x0448(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue_1;             // 0x0450(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0451(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_3;               // 0x0452(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_453[0x1];                                      // 0x0453(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0454(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_6;          // 0x0464(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_465[0x3];                                      // 0x0465(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           K2Node_CustomEvent_PlayerState;                    // 0x0468(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0470(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_7;            // 0x0480(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_4;               // 0x0488(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_489[0x7];                                      // 0x0489(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_7;            // 0x0490(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_9;                     // 0x0498(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_499[0x7];                                      // 0x0499(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_SkillParametersSubsystem_C*          CallFunc_GetWorldSubsystem_ReturnValue;            // 0x04A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_SkillParametersSubsystem_C*          CallFunc_GetWorldSubsystem_ReturnValue_1;          // 0x04A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_8;            // 0x04B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_9;            // 0x04B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_8;            // 0x04C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_10;                    // 0x04C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C9[0x7];                                      // 0x04C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_9;            // 0x04D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_11;                    // 0x04D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x04D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4DA[0x6];                                      // 0x04DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         K2Node_CustomEvent_PlayerNames;                    // 0x04E0(0x0010)(ConstParm, ReferenceParm)
	TArray<int32>                                 K2Node_CustomEvent_Scores;                         // 0x04F0(0x0010)(ConstParm, ReferenceParm)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_10;           // 0x0500(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item_4;                         // 0x0508(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50C[0x4];                                      // 0x050C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_10;           // 0x0510(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_12;                    // 0x0518(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_519[0x7];                                      // 0x0519(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Array_Get_Item_5;                         // 0x0520(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0530(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0534(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0535(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_536[0x2];                                      // 0x0536(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         K2Node_CustomEvent_PlayerIds;                      // 0x0538(0x0010)(ConstParm, ReferenceParm)
	TArray<struct FS_TournamentPlayer>            K2Node_CustomEvent_TournamentPlayers;              // 0x0548(0x0010)(ConstParm, ReferenceParm)
	TDelegate<void(const class FString& PlayerId, int32 NewScore)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x0558(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 K2Node_CustomEvent_PlayerId;                       // 0x0568(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_NewScore;                       // 0x0578(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_57C[0x4];                                      // 0x057C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_11;           // 0x0580(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_11;           // 0x0588(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_13;                    // 0x0590(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_591[0x7];                                      // 0x0591(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_TournamentPlayer_C*                  CallFunc_Map_Find_Value;                           // 0x0598(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x05A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A1[0x7];                                      // 0x05A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_12;           // 0x05A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class UClass*>                         CallFunc_GetUnlistedSkills_Unlisted_Skills;        // 0x05B0(0x0010)(ReferenceParm)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_12;           // 0x05C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_14;                    // 0x05C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C9[0x7];                                      // 0x05C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         CallFunc_GetUnlistedSkills_Unlisted_Skills_1;      // 0x05D0(0x0010)(ReferenceParm)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_7;          // 0x05E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_8;          // 0x05E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_9;          // 0x05E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameState_C_ExecuteUbergraph_B_GameState) == 0x000010, "Wrong alignment on B_GameState_C_ExecuteUbergraph_B_GameState");
static_assert(sizeof(B_GameState_C_ExecuteUbergraph_B_GameState) == 0x0005F0, "Wrong size on B_GameState_C_ExecuteUbergraph_B_GameState");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, EntryPoint) == 0x000000, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::EntryPoint' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_GetGameInstance_ReturnValue) == 0x000008, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_IsDedicatedServer_ReturnValue) == 0x000010, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_DynamicCast_AsB_Game_Instance) == 0x000018, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_GetGameInstance_ReturnValue_1) == 0x000028, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_GetGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_DynamicCast_AsB_Game_Instance_1) == 0x000030, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_DynamicCast_AsB_Game_Instance_1' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_IsDedicatedServer_ReturnValue_1) == 0x000039, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_IsDedicatedServer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, Temp_int_Array_Index_Variable) == 0x00003C, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, Temp_int_Loop_Counter_Variable) == 0x000040, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_Add_IntInt_ReturnValue) == 0x000044, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, Temp_int_Array_Index_Variable_1) == 0x000048, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_GetGameInstance_ReturnValue_2) == 0x000050, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_GetGameInstance_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_DynamicCast_AsB_Game_Instance_2) == 0x000058, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_DynamicCast_AsB_Game_Instance_2' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_DynamicCast_bSuccess_2) == 0x000060, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_HasAuthority_ReturnValue) == 0x000061, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_HasAuthority_ReturnValue_1) == 0x000062, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_HasAuthority_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, Temp_int_Array_Index_Variable_2) == 0x000064, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_GetGameInstance_ReturnValue_3) == 0x000068, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_GetGameInstance_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_GetGameInstance_ReturnValue_4) == 0x000070, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_GetGameInstance_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_DynamicCast_AsB_Game_Instance_3) == 0x000078, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_DynamicCast_AsB_Game_Instance_3' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_DynamicCast_bSuccess_3) == 0x000080, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_DynamicCast_AsB_Game_Instance_4) == 0x000088, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_DynamicCast_AsB_Game_Instance_4' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_DynamicCast_bSuccess_4) == 0x000090, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_GetFirstLocalPlayerController_ReturnValue) == 0x000098, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_GetFirstLocalPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_GetPlayerName_PlayerName) == 0x0000A0, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_GetPlayerName_PlayerName' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_EqualEqual_StriStri_ReturnValue) == 0x0000B0, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_EqualEqual_StriStri_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_HasAuthority_ReturnValue_2) == 0x0000B1, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_HasAuthority_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_CustomEvent_ChatMessage) == 0x0000B8, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_CustomEvent_ChatMessage' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_CustomEvent_Player) == 0x0000C8, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_CustomEvent_Player' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_CustomEvent_ChatType) == 0x0000D0, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_CustomEvent_ChatType' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_IsDedicatedServer_ReturnValue_2) == 0x0000D1, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_IsDedicatedServer_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_CustomEvent_SourcePlayerName) == 0x0000D8, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_CustomEvent_SourcePlayerName' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_CustomEvent_TargetPlayerName) == 0x0000E8, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_CustomEvent_TargetPlayerName' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_CustomEvent_MessageType) == 0x0000F8, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_CustomEvent_MessageType' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_IsDedicatedServer_ReturnValue_3) == 0x0000F9, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_IsDedicatedServer_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_GetGameInstance_ReturnValue_5) == 0x000100, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_GetGameInstance_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_DynamicCast_AsB_Game_Instance_5) == 0x000108, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_DynamicCast_AsB_Game_Instance_5' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_DynamicCast_bSuccess_5) == 0x000110, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_CustomEvent_Actors_1) == 0x000118, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_CustomEvent_Actors_1' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_CustomEvent_SleepLocation) == 0x000128, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_CustomEvent_SleepLocation' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_CustomEvent_SleepRotation) == 0x000138, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_CustomEvent_SleepRotation' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_Array_Get_Item) == 0x000148, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_Array_Get_Item_1) == 0x000160, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_Array_Get_Item_2) == 0x000178, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_Array_Length_ReturnValue) == 0x000180, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_DynamicCast_AsB_Static_Mesh_Prop) == 0x000188, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_DynamicCast_AsB_Static_Mesh_Prop' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_DynamicCast_bSuccess_6) == 0x000190, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_K2_SetActorTransform_SweepHitResult) == 0x000198, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_K2_SetActorTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_K2_SetActorTransform_ReturnValue) == 0x000290, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_K2_SetActorTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_GetTransform_ReturnValue) == 0x0002A0, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_GetActorScale3D_ReturnValue) == 0x000300, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_GetActorScale3D_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_NearlyEqual_TransformTransform_ReturnValue) == 0x000318, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_NearlyEqual_TransformTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_MakeTransform_ReturnValue) == 0x000320, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_Event_DeltaSeconds) == 0x000380, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_CustomEvent_Actors) == 0x000388, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_CustomEvent_Actors' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_GetGameInstance_ReturnValue_6) == 0x000398, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_GetGameInstance_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_Array_Get_Item_3) == 0x0003A0, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_DynamicCast_AsB_Game_Instance_6) == 0x0003A8, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_DynamicCast_AsB_Game_Instance_6' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_DynamicCast_bSuccess_7) == 0x0003B0, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_DynamicCast_bSuccess_7' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_DynamicCast_AsB_Static_Mesh_Prop_1) == 0x0003B8, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_DynamicCast_AsB_Static_Mesh_Prop_1' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_DynamicCast_bSuccess_8) == 0x0003C0, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_DynamicCast_bSuccess_8' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_Array_Length_ReturnValue_1) == 0x0003C4, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_CustomEvent_Actor_3) == 0x0003C8, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_CustomEvent_Actor_3' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_CustomEvent_Actor_2) == 0x0003D0, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_CustomEvent_Actor_2' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_Array_AddUnique_ReturnValue) == 0x0003D8, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_CustomEvent_Actor_1) == 0x0003E0, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_CustomEvent_Actor_1' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_Array_AddUnique_ReturnValue_1) == 0x0003E8, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_Array_AddUnique_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_CustomEvent_Actor) == 0x0003F0, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_CustomEvent_Actor' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_Array_AddUnique_ReturnValue_2) == 0x0003F8, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_Array_AddUnique_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_CustomEvent_PlayerNameToKick) == 0x0003FC, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_CustomEvent_PlayerNameToKick' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_CustomEvent_ReasonToKick) == 0x000408, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_CustomEvent_ReasonToKick' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_CustomEvent_PlayerNameStartedKickVote) == 0x000418, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_CustomEvent_PlayerNameStartedKickVote' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_Array_RemoveItem_ReturnValue) == 0x000420, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_IsDedicatedServer_ReturnValue_4) == 0x000421, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_IsDedicatedServer_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, Temp_int_Loop_Counter_Variable_1) == 0x000424, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_IsDedicatedServer_ReturnValue_5) == 0x000428, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_IsDedicatedServer_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_Less_IntInt_ReturnValue) == 0x000429, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_Add_IntInt_ReturnValue_1) == 0x00042C, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_Array_Contains_ReturnValue) == 0x000430, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_Array_RemoveItem_ReturnValue_1) == 0x000431, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_Array_RemoveItem_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_Not_PreBool_ReturnValue) == 0x000432, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_Array_AddUnique_ReturnValue_3) == 0x000434, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_Array_AddUnique_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, Temp_int_Loop_Counter_Variable_2) == 0x000438, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_Less_IntInt_ReturnValue_1) == 0x00043C, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_Add_IntInt_ReturnValue_2) == 0x000440, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_CustomEvent_PlayerState_1) == 0x000448, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_CustomEvent_PlayerState_1' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_Array_Contains_ReturnValue_1) == 0x000450, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_Array_Contains_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_Not_PreBool_ReturnValue_1) == 0x000451, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_HasAuthority_ReturnValue_3) == 0x000452, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_HasAuthority_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_CreateDelegate_OutputDelegate) == 0x000454, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_IsDedicatedServer_ReturnValue_6) == 0x000464, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_IsDedicatedServer_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_CustomEvent_PlayerState) == 0x000468, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_CustomEvent_PlayerState' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_CreateDelegate_OutputDelegate_1) == 0x000470, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_GetGameInstance_ReturnValue_7) == 0x000480, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_GetGameInstance_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_HasAuthority_ReturnValue_4) == 0x000488, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_HasAuthority_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_DynamicCast_AsB_Game_Instance_7) == 0x000490, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_DynamicCast_AsB_Game_Instance_7' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_DynamicCast_bSuccess_9) == 0x000498, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_DynamicCast_bSuccess_9' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_GetWorldSubsystem_ReturnValue) == 0x0004A0, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_GetWorldSubsystem_ReturnValue_1) == 0x0004A8, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_GetWorldSubsystem_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_GetGameInstance_ReturnValue_8) == 0x0004B0, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_GetGameInstance_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_GetGameInstance_ReturnValue_9) == 0x0004B8, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_GetGameInstance_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_DynamicCast_AsB_Game_Instance_8) == 0x0004C0, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_DynamicCast_AsB_Game_Instance_8' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_DynamicCast_bSuccess_10) == 0x0004C8, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_DynamicCast_bSuccess_10' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_DynamicCast_AsB_Game_Instance_9) == 0x0004D0, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_DynamicCast_AsB_Game_Instance_9' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_DynamicCast_bSuccess_11) == 0x0004D8, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_DynamicCast_bSuccess_11' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_IsValid_ReturnValue) == 0x0004D9, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_CustomEvent_PlayerNames) == 0x0004E0, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_CustomEvent_PlayerNames' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_CustomEvent_Scores) == 0x0004F0, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_CustomEvent_Scores' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_GetGameInstance_ReturnValue_10) == 0x000500, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_GetGameInstance_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_Array_Get_Item_4) == 0x000508, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_DynamicCast_AsB_Game_Instance_10) == 0x000510, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_DynamicCast_AsB_Game_Instance_10' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_DynamicCast_bSuccess_12) == 0x000518, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_DynamicCast_bSuccess_12' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_Array_Get_Item_5) == 0x000520, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_Array_Get_Item_5' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_Array_Length_ReturnValue_2) == 0x000530, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_Less_IntInt_ReturnValue_2) == 0x000534, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_IsValid_ReturnValue_1) == 0x000535, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_CustomEvent_PlayerIds) == 0x000538, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_CustomEvent_PlayerIds' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_CustomEvent_TournamentPlayers) == 0x000548, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_CustomEvent_TournamentPlayers' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_CreateDelegate_OutputDelegate_2) == 0x000558, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_CustomEvent_PlayerId) == 0x000568, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_CustomEvent_PlayerId' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_CustomEvent_NewScore) == 0x000578, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_CustomEvent_NewScore' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_GetGameInstance_ReturnValue_11) == 0x000580, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_GetGameInstance_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_DynamicCast_AsB_Game_Instance_11) == 0x000588, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_DynamicCast_AsB_Game_Instance_11' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_DynamicCast_bSuccess_13) == 0x000590, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_DynamicCast_bSuccess_13' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_Map_Find_Value) == 0x000598, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_Map_Find_ReturnValue) == 0x0005A0, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_GetGameInstance_ReturnValue_12) == 0x0005A8, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_GetGameInstance_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_GetUnlistedSkills_Unlisted_Skills) == 0x0005B0, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_GetUnlistedSkills_Unlisted_Skills' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_DynamicCast_AsB_Game_Instance_12) == 0x0005C0, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_DynamicCast_AsB_Game_Instance_12' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, K2Node_DynamicCast_bSuccess_14) == 0x0005C8, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::K2Node_DynamicCast_bSuccess_14' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_GetUnlistedSkills_Unlisted_Skills_1) == 0x0005D0, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_GetUnlistedSkills_Unlisted_Skills_1' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_IsDedicatedServer_ReturnValue_7) == 0x0005E0, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_IsDedicatedServer_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_IsDedicatedServer_ReturnValue_8) == 0x0005E1, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_IsDedicatedServer_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(B_GameState_C_ExecuteUbergraph_B_GameState, CallFunc_IsDedicatedServer_ReturnValue_9) == 0x0005E2, "Member 'B_GameState_C_ExecuteUbergraph_B_GameState::CallFunc_IsDedicatedServer_ReturnValue_9' has a wrong offset!");

// Function B_GameState.B_GameState_C.IsIdleKickEnabled
// 0x0010 (0x0010 - 0x0000)
struct B_GameState_C_IsIdleKickEnabled final
{
public:
	bool                                          bIsEnabled;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDeveloperModeSubsystem*                CallFunc_GetEngineSubsystem_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameState_C_IsIdleKickEnabled) == 0x000008, "Wrong alignment on B_GameState_C_IsIdleKickEnabled");
static_assert(sizeof(B_GameState_C_IsIdleKickEnabled) == 0x000010, "Wrong size on B_GameState_C_IsIdleKickEnabled");
static_assert(offsetof(B_GameState_C_IsIdleKickEnabled, bIsEnabled) == 0x000000, "Member 'B_GameState_C_IsIdleKickEnabled::bIsEnabled' has a wrong offset!");
static_assert(offsetof(B_GameState_C_IsIdleKickEnabled, CallFunc_GetEngineSubsystem_ReturnValue) == 0x000008, "Member 'B_GameState_C_IsIdleKickEnabled::CallFunc_GetEngineSubsystem_ReturnValue' has a wrong offset!");

}

