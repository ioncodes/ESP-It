#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_PlayerPropCollection

#include "Basic.hpp"

#include "B_PlayerPropCollection_classes.hpp"
#include "B_PlayerPropCollection_parameters.hpp"


namespace SDK
{

// Function B_PlayerPropCollection.B_PlayerPropCollection_C.CheckAndSetOwnedPropsCount
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FS_PropData>              PropDatas                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TMap<E_PropCategory, class FName>       PropCategoryStats                                      (BlueprintVisible, BlueprintReadOnly, Parm)
// TMap<E_PropSet, class FName>            PropSetStats                                           (BlueprintVisible, BlueprintReadOnly, Parm)

void UB_PlayerPropCollection_C::CheckAndSetOwnedPropsCount(TArray<struct FS_PropData>& PropDatas, const TMap<E_PropCategory, class FName>& PropCategoryStats, const TMap<E_PropSet, class FName>& PropSetStats)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerPropCollection_C", "CheckAndSetOwnedPropsCount");

	Params::B_PlayerPropCollection_C_CheckAndSetOwnedPropsCount Parms{};

	Parms.PropDatas = std::move(PropDatas);
	Parms.PropCategoryStats = std::move(PropCategoryStats);
	Parms.PropSetStats = std::move(PropSetStats);

	UObject::ProcessEvent(Func, &Parms);

	PropDatas = std::move(Parms.PropDatas);
}


// Function B_PlayerPropCollection.B_PlayerPropCollection_C.CollectProp
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PropID                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Local                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsNewProp                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_PlayerPropCollection_C::CollectProp(int32 PropID, bool Local, bool* IsNewProp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerPropCollection_C", "CollectProp");

	Params::B_PlayerPropCollection_C_CollectProp Parms{};

	Parms.PropID = PropID;
	Parms.Local = Local;

	UObject::ProcessEvent(Func, &Parms);

	if (IsNewProp != nullptr)
		*IsNewProp = Parms.IsNewProp;
}


// Function B_PlayerPropCollection.B_PlayerPropCollection_C.CountCollectedPropsPerCategory
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FS_PropData>              PropDatas                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TMap<E_PropCategory, class FName>       PropCategoryStats                                      (BlueprintVisible, BlueprintReadOnly, Parm)
// TMap<E_PropSet, class FName>            PropSetStats                                           (BlueprintVisible, BlueprintReadOnly, Parm)

void UB_PlayerPropCollection_C::CountCollectedPropsPerCategory(TArray<struct FS_PropData>& PropDatas, const TMap<E_PropCategory, class FName>& PropCategoryStats, const TMap<E_PropSet, class FName>& PropSetStats)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerPropCollection_C", "CountCollectedPropsPerCategory");

	Params::B_PlayerPropCollection_C_CountCollectedPropsPerCategory Parms{};

	Parms.PropDatas = std::move(PropDatas);
	Parms.PropCategoryStats = std::move(PropCategoryStats);
	Parms.PropSetStats = std::move(PropSetStats);

	UObject::ProcessEvent(Func, &Parms);

	PropDatas = std::move(Parms.PropDatas);
}


// Function B_PlayerPropCollection.B_PlayerPropCollection_C.HandleNewPropCategoryAndSets
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NewPropId                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TMap<int32, struct FS_PropData>         PropDatas                                              (BlueprintVisible, BlueprintReadOnly, Parm)
// TMap<E_PropCategory, class FName>       PropCategoryStats                                      (BlueprintVisible, BlueprintReadOnly, Parm)
// TMap<E_PropSet, class FName>            PropSetStats                                           (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    Local                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CountInCategory                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CountInSet                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TotalCategory                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TotalSet                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_PlayerPropCollection_C::HandleNewPropCategoryAndSets(int32 NewPropId, const TMap<int32, struct FS_PropData>& PropDatas, const TMap<E_PropCategory, class FName>& PropCategoryStats, const TMap<E_PropSet, class FName>& PropSetStats, bool Local, int32* CountInCategory, int32* CountInSet, int32* TotalCategory, int32* TotalSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerPropCollection_C", "HandleNewPropCategoryAndSets");

	Params::B_PlayerPropCollection_C_HandleNewPropCategoryAndSets Parms{};

	Parms.NewPropId = NewPropId;
	Parms.PropDatas = std::move(PropDatas);
	Parms.PropCategoryStats = std::move(PropCategoryStats);
	Parms.PropSetStats = std::move(PropSetStats);
	Parms.Local = Local;

	UObject::ProcessEvent(Func, &Parms);

	if (CountInCategory != nullptr)
		*CountInCategory = Parms.CountInCategory;

	if (CountInSet != nullptr)
		*CountInSet = Parms.CountInSet;

	if (TotalCategory != nullptr)
		*TotalCategory = Parms.TotalCategory;

	if (TotalSet != nullptr)
		*TotalSet = Parms.TotalSet;
}


// Function B_PlayerPropCollection.B_PlayerPropCollection_C.Initialize
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UGameInstance*                    GameInstance_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UB_PlayerPropCollection_C::Initialize(class UGameInstance* GameInstance_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerPropCollection_C", "Initialize");

	Params::B_PlayerPropCollection_C_Initialize Parms{};

	Parms.GameInstance_0 = GameInstance_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerPropCollection.B_PlayerPropCollection_C.InitializeGS
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UGameInstance*                    GameInstance_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APlayerState*                     PlayerState_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UB_PlayerPropCollection_C::InitializeGS(class UGameInstance* GameInstance_0, class APlayerState* PlayerState_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerPropCollection_C", "InitializeGS");

	Params::B_PlayerPropCollection_C_InitializeGS Parms{};

	Parms.GameInstance_0 = GameInstance_0;
	Parms.PlayerState_0 = PlayerState_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PlayerPropCollection.B_PlayerPropCollection_C.LoadOwnedPropIds
// (Public, BlueprintCallable, BlueprintEvent)

void UB_PlayerPropCollection_C::LoadOwnedPropIds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerPropCollection_C", "LoadOwnedPropIds");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PlayerPropCollection.B_PlayerPropCollection_C.GetStatsAndAchievementsManager
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UB_NewStatsAndAchievementsManager_C*Result                                                 (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UB_PlayerPropCollection_C::GetStatsAndAchievementsManager(class UB_NewStatsAndAchievementsManager_C** Result) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PlayerPropCollection_C", "GetStatsAndAchievementsManager");

	Params::B_PlayerPropCollection_C_GetStatsAndAchievementsManager Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}

}

