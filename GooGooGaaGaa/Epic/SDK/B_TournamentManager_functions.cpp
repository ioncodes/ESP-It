#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_TournamentManager

#include "Basic.hpp"

#include "B_TournamentManager_classes.hpp"
#include "B_TournamentManager_parameters.hpp"


namespace SDK
{

// Function B_TournamentManager.B_TournamentManager_C.AddScorePoints
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerState*                     PlayerState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   Score                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_TournamentManager_C::AddScorePoints(class APlayerState* PlayerState, int32 Score)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_TournamentManager_C", "AddScorePoints");

	Params::B_TournamentManager_C_AddScorePoints Parms{};

	Parms.PlayerState = PlayerState;
	Parms.Score = Score;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_TournamentManager.B_TournamentManager_C.AllocatePlayersForThisRound
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class APlayerState*>             PlayerStates                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UB_TournamentManager_C::AllocatePlayersForThisRound(TArray<class APlayerState*>& PlayerStates)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_TournamentManager_C", "AllocatePlayersForThisRound");

	Params::B_TournamentManager_C_AllocatePlayersForThisRound Parms{};

	Parms.PlayerStates = std::move(PlayerStates);

	UObject::ProcessEvent(Func, &Parms);

	PlayerStates = std::move(Parms.PlayerStates);
}


// Function B_TournamentManager.B_TournamentManager_C.GetHuntersToSpawn
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class APlayerState*>             ReturnValue                                            (Parm, OutParm, ReturnParm)
// TArray<class FString>                   EllectedTests                                          (Parm, OutParm)

TArray<class APlayerState*> UB_TournamentManager_C::GetHuntersToSpawn(int32 Amount, TArray<class FString>* EllectedTests)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_TournamentManager_C", "GetHuntersToSpawn");

	Params::B_TournamentManager_C_GetHuntersToSpawn Parms{};

	Parms.Amount = Amount;

	UObject::ProcessEvent(Func, &Parms);

	if (EllectedTests != nullptr)
		*EllectedTests = std::move(Parms.EllectedTests);

	return Parms.ReturnValue;
}


// Function B_TournamentManager.B_TournamentManager_C.GetTournamentPlayers
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class UB_TournamentPlayer_C*>    ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<class UB_TournamentPlayer_C*> UB_TournamentManager_C::GetTournamentPlayers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_TournamentManager_C", "GetTournamentPlayers");

	Params::B_TournamentManager_C_GetTournamentPlayers Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_TournamentManager.B_TournamentManager_C.GetTournamentPlayersStruct
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class FString>                   PlayerIds                                              (Parm, OutParm)
// TArray<struct FS_TournamentPlayer>      TournamentPlayers                                      (Parm, OutParm)

void UB_TournamentManager_C::GetTournamentPlayersStruct(TArray<class FString>* PlayerIds, TArray<struct FS_TournamentPlayer>* TournamentPlayers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_TournamentManager_C", "GetTournamentPlayersStruct");

	Params::B_TournamentManager_C_GetTournamentPlayersStruct Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PlayerIds != nullptr)
		*PlayerIds = std::move(Parms.PlayerIds);

	if (TournamentPlayers != nullptr)
		*TournamentPlayers = std::move(Parms.TournamentPlayers);
}


// Function B_TournamentManager.B_TournamentManager_C.ScoreUpdated__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           PlayerId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   NewScore                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_TournamentManager_C::ScoreUpdated__DelegateSignature(const class FString& PlayerId, int32 NewScore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_TournamentManager_C", "ScoreUpdated__DelegateSignature");

	Params::B_TournamentManager_C_ScoreUpdated__DelegateSignature Parms{};

	Parms.PlayerId = std::move(PlayerId);
	Parms.NewScore = NewScore;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_TournamentManager.B_TournamentManager_C.StartTestTournament
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_TournamentManager_C::StartTestTournament(int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_TournamentManager_C", "StartTestTournament");

	Params::B_TournamentManager_C_StartTestTournament Parms{};

	Parms.Amount = Amount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_TournamentManager.B_TournamentManager_C.StartTournament
// (Public, BlueprintCallable, BlueprintEvent)

void UB_TournamentManager_C::StartTournament()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_TournamentManager_C", "StartTournament");

	UObject::ProcessEvent(Func, nullptr);
}

}

