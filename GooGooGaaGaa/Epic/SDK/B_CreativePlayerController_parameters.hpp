#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_CreativePlayerController

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "S_SelectedActors_structs.hpp"
#include "PropWitchHuntModule_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_CreativePlayerMode_structs.hpp"
#include "Engine_structs.hpp"
#include "E_ModifyMode_structs.hpp"
#include "SRuntimePropData_structs.hpp"
#include "ETeamID_structs.hpp"
#include "E_Axis_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function B_CreativePlayerController.B_CreativePlayerController_C.OnGroupAmountChanged__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct B_CreativePlayerController_C_OnGroupAmountChanged__DelegateSignature final
{
public:
	class AActor*                                 AddedOrRemovedActor;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          WasAdded;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_OnGroupAmountChanged__DelegateSignature) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_OnGroupAmountChanged__DelegateSignature");
static_assert(sizeof(B_CreativePlayerController_C_OnGroupAmountChanged__DelegateSignature) == 0x000010, "Wrong size on B_CreativePlayerController_C_OnGroupAmountChanged__DelegateSignature");
static_assert(offsetof(B_CreativePlayerController_C_OnGroupAmountChanged__DelegateSignature, AddedOrRemovedActor) == 0x000000, "Member 'B_CreativePlayerController_C_OnGroupAmountChanged__DelegateSignature::AddedOrRemovedActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_OnGroupAmountChanged__DelegateSignature, WasAdded) == 0x000008, "Member 'B_CreativePlayerController_C_OnGroupAmountChanged__DelegateSignature::WasAdded' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.AddOrRemoveSwitchConnection
// 0x0070 (0x0070 - 0x0000)
struct B_CreativePlayerController_C_AddOrRemoveSwitchConnection final
{
public:
	const class AActor*                           HitActor;                                          // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	class ABP_Switch_C*                           Switch2;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 TargetActor;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class ABP_Switch_C*                           TargetSwitch;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSwitchAlreadyConnectedToNetwork_AlreadyConnected; // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSwitchAlreadyConnectedToNetwork_AlreadyConnected_1; // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAnchorActor_AnchorActor;               // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_Switch_C*                           K2Node_DynamicCast_AsBP_Switch;                    // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Switch_C*                           K2Node_DynamicCast_AsBP_Switch_1;                  // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAnchorActor_AnchorActor_1;             // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Switch_C*                           K2Node_DynamicCast_AsBP_Switch_2;                  // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_AddOrRemoveSwitchConnection) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_AddOrRemoveSwitchConnection");
static_assert(sizeof(B_CreativePlayerController_C_AddOrRemoveSwitchConnection) == 0x000070, "Wrong size on B_CreativePlayerController_C_AddOrRemoveSwitchConnection");
static_assert(offsetof(B_CreativePlayerController_C_AddOrRemoveSwitchConnection, HitActor) == 0x000000, "Member 'B_CreativePlayerController_C_AddOrRemoveSwitchConnection::HitActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_AddOrRemoveSwitchConnection, Switch2) == 0x000008, "Member 'B_CreativePlayerController_C_AddOrRemoveSwitchConnection::Switch2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_AddOrRemoveSwitchConnection, TargetActor) == 0x000010, "Member 'B_CreativePlayerController_C_AddOrRemoveSwitchConnection::TargetActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_AddOrRemoveSwitchConnection, TargetSwitch) == 0x000018, "Member 'B_CreativePlayerController_C_AddOrRemoveSwitchConnection::TargetSwitch' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_AddOrRemoveSwitchConnection, CallFunc_IsSwitchAlreadyConnectedToNetwork_AlreadyConnected) == 0x000020, "Member 'B_CreativePlayerController_C_AddOrRemoveSwitchConnection::CallFunc_IsSwitchAlreadyConnectedToNetwork_AlreadyConnected' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_AddOrRemoveSwitchConnection, CallFunc_IsSwitchAlreadyConnectedToNetwork_AlreadyConnected_1) == 0x000021, "Member 'B_CreativePlayerController_C_AddOrRemoveSwitchConnection::CallFunc_IsSwitchAlreadyConnectedToNetwork_AlreadyConnected_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_AddOrRemoveSwitchConnection, CallFunc_GetAnchorActor_AnchorActor) == 0x000028, "Member 'B_CreativePlayerController_C_AddOrRemoveSwitchConnection::CallFunc_GetAnchorActor_AnchorActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_AddOrRemoveSwitchConnection, K2Node_DynamicCast_AsBP_Switch) == 0x000030, "Member 'B_CreativePlayerController_C_AddOrRemoveSwitchConnection::K2Node_DynamicCast_AsBP_Switch' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_AddOrRemoveSwitchConnection, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'B_CreativePlayerController_C_AddOrRemoveSwitchConnection::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_AddOrRemoveSwitchConnection, K2Node_DynamicCast_AsBP_Switch_1) == 0x000040, "Member 'B_CreativePlayerController_C_AddOrRemoveSwitchConnection::K2Node_DynamicCast_AsBP_Switch_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_AddOrRemoveSwitchConnection, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'B_CreativePlayerController_C_AddOrRemoveSwitchConnection::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_AddOrRemoveSwitchConnection, CallFunc_GetAnchorActor_AnchorActor_1) == 0x000050, "Member 'B_CreativePlayerController_C_AddOrRemoveSwitchConnection::CallFunc_GetAnchorActor_AnchorActor_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_AddOrRemoveSwitchConnection, CallFunc_Array_Contains_ReturnValue) == 0x000058, "Member 'B_CreativePlayerController_C_AddOrRemoveSwitchConnection::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_AddOrRemoveSwitchConnection, K2Node_DynamicCast_AsBP_Switch_2) == 0x000060, "Member 'B_CreativePlayerController_C_AddOrRemoveSwitchConnection::K2Node_DynamicCast_AsBP_Switch_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_AddOrRemoveSwitchConnection, K2Node_DynamicCast_bSuccess_2) == 0x000068, "Member 'B_CreativePlayerController_C_AddOrRemoveSwitchConnection::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.AddPrefab
// 0x0058 (0x0058 - 0x0000)
struct B_CreativePlayerController_C_AddPrefab final
{
public:
	struct FPrefabToSave                          PrefabToAdd;                                       // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_CreativeGameMode_C*                  K2Node_DynamicCast_AsB_Creative_Game_Mode;         // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_AddPrefab) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_AddPrefab");
static_assert(sizeof(B_CreativePlayerController_C_AddPrefab) == 0x000058, "Wrong size on B_CreativePlayerController_C_AddPrefab");
static_assert(offsetof(B_CreativePlayerController_C_AddPrefab, PrefabToAdd) == 0x000000, "Member 'B_CreativePlayerController_C_AddPrefab::PrefabToAdd' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_AddPrefab, CallFunc_GetGameMode_ReturnValue) == 0x000040, "Member 'B_CreativePlayerController_C_AddPrefab::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_AddPrefab, K2Node_DynamicCast_AsB_Creative_Game_Mode) == 0x000048, "Member 'B_CreativePlayerController_C_AddPrefab::K2Node_DynamicCast_AsB_Creative_Game_Mode' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_AddPrefab, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'B_CreativePlayerController_C_AddPrefab::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.AddPrefabServer
// 0x0040 (0x0040 - 0x0000)
struct B_CreativePlayerController_C_AddPrefabServer final
{
public:
	struct FPrefabToSave                          PrefabToAdd;                                       // 0x0000(0x0040)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(B_CreativePlayerController_C_AddPrefabServer) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_AddPrefabServer");
static_assert(sizeof(B_CreativePlayerController_C_AddPrefabServer) == 0x000040, "Wrong size on B_CreativePlayerController_C_AddPrefabServer");
static_assert(offsetof(B_CreativePlayerController_C_AddPrefabServer, PrefabToAdd) == 0x000000, "Member 'B_CreativePlayerController_C_AddPrefabServer::PrefabToAdd' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.AddSelectedTargetsToSwitch
// 0x0038 (0x0038 - 0x0000)
struct B_CreativePlayerController_C_AddSelectedTargetsToSwitch final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAnchorActor_AnchorActor;               // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_Switch_C*                           K2Node_DynamicCast_AsBP_Switch;                    // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_AddSelectedTargetsToSwitch) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_AddSelectedTargetsToSwitch");
static_assert(sizeof(B_CreativePlayerController_C_AddSelectedTargetsToSwitch) == 0x000038, "Wrong size on B_CreativePlayerController_C_AddSelectedTargetsToSwitch");
static_assert(offsetof(B_CreativePlayerController_C_AddSelectedTargetsToSwitch, Temp_int_Array_Index_Variable) == 0x000000, "Member 'B_CreativePlayerController_C_AddSelectedTargetsToSwitch::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_AddSelectedTargetsToSwitch, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'B_CreativePlayerController_C_AddSelectedTargetsToSwitch::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_AddSelectedTargetsToSwitch, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'B_CreativePlayerController_C_AddSelectedTargetsToSwitch::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_AddSelectedTargetsToSwitch, CallFunc_GetAnchorActor_AnchorActor) == 0x000010, "Member 'B_CreativePlayerController_C_AddSelectedTargetsToSwitch::CallFunc_GetAnchorActor_AnchorActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_AddSelectedTargetsToSwitch, K2Node_DynamicCast_AsBP_Switch) == 0x000018, "Member 'B_CreativePlayerController_C_AddSelectedTargetsToSwitch::K2Node_DynamicCast_AsBP_Switch' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_AddSelectedTargetsToSwitch, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'B_CreativePlayerController_C_AddSelectedTargetsToSwitch::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_AddSelectedTargetsToSwitch, CallFunc_Array_Get_Item) == 0x000028, "Member 'B_CreativePlayerController_C_AddSelectedTargetsToSwitch::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_AddSelectedTargetsToSwitch, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'B_CreativePlayerController_C_AddSelectedTargetsToSwitch::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_AddSelectedTargetsToSwitch, CallFunc_Less_IntInt_ReturnValue) == 0x000034, "Member 'B_CreativePlayerController_C_AddSelectedTargetsToSwitch::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.AddSelectedTargetToSwitch
// 0x0018 (0x0018 - 0x0000)
struct B_CreativePlayerController_C_AddSelectedTargetToSwitch final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_Switch_C*                           TargetSwitch;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_AddSelectedTargetToSwitch) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_AddSelectedTargetToSwitch");
static_assert(sizeof(B_CreativePlayerController_C_AddSelectedTargetToSwitch) == 0x000018, "Wrong size on B_CreativePlayerController_C_AddSelectedTargetToSwitch");
static_assert(offsetof(B_CreativePlayerController_C_AddSelectedTargetToSwitch, TargetActor) == 0x000000, "Member 'B_CreativePlayerController_C_AddSelectedTargetToSwitch::TargetActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_AddSelectedTargetToSwitch, TargetSwitch) == 0x000008, "Member 'B_CreativePlayerController_C_AddSelectedTargetToSwitch::TargetSwitch' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_AddSelectedTargetToSwitch, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'B_CreativePlayerController_C_AddSelectedTargetToSwitch::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_AddSelectedTargetToSwitch, CallFunc_IsValid_ReturnValue_1) == 0x000011, "Member 'B_CreativePlayerController_C_AddSelectedTargetToSwitch::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.AddTargetToSwitch
// 0x0040 (0x0040 - 0x0000)
struct B_CreativePlayerController_C_AddTargetToSwitch final
{
public:
	class AActor*                                 ActorToAdd;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_Switch_C*                           SWITCH;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         TempTargetList;                                    // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_ActionActorSubsystem_C*              CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_Switch_C*                           K2Node_DynamicCast_AsBP_Switch;                    // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSwitchAlreadyConnectedToNetwork_AlreadyConnected; // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActorSwitchable_ReturnValue;            // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_AddTargetToSwitch) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_AddTargetToSwitch");
static_assert(sizeof(B_CreativePlayerController_C_AddTargetToSwitch) == 0x000040, "Wrong size on B_CreativePlayerController_C_AddTargetToSwitch");
static_assert(offsetof(B_CreativePlayerController_C_AddTargetToSwitch, ActorToAdd) == 0x000000, "Member 'B_CreativePlayerController_C_AddTargetToSwitch::ActorToAdd' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_AddTargetToSwitch, SWITCH) == 0x000008, "Member 'B_CreativePlayerController_C_AddTargetToSwitch::SWITCH' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_AddTargetToSwitch, TempTargetList) == 0x000010, "Member 'B_CreativePlayerController_C_AddTargetToSwitch::TempTargetList' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_AddTargetToSwitch, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000020, "Member 'B_CreativePlayerController_C_AddTargetToSwitch::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_AddTargetToSwitch, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x000028, "Member 'B_CreativePlayerController_C_AddTargetToSwitch::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_AddTargetToSwitch, K2Node_DynamicCast_AsBP_Switch) == 0x000030, "Member 'B_CreativePlayerController_C_AddTargetToSwitch::K2Node_DynamicCast_AsBP_Switch' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_AddTargetToSwitch, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'B_CreativePlayerController_C_AddTargetToSwitch::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_AddTargetToSwitch, CallFunc_IsSwitchAlreadyConnectedToNetwork_AlreadyConnected) == 0x000039, "Member 'B_CreativePlayerController_C_AddTargetToSwitch::CallFunc_IsSwitchAlreadyConnectedToNetwork_AlreadyConnected' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_AddTargetToSwitch, CallFunc_IsActorSwitchable_ReturnValue) == 0x00003A, "Member 'B_CreativePlayerController_C_AddTargetToSwitch::CallFunc_IsActorSwitchable_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_AddTargetToSwitch, CallFunc_Not_PreBool_ReturnValue) == 0x00003B, "Member 'B_CreativePlayerController_C_AddTargetToSwitch::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_AddTargetToSwitch, CallFunc_Array_AddUnique_ReturnValue) == 0x00003C, "Member 'B_CreativePlayerController_C_AddTargetToSwitch::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.AddTargetToSwitchServer
// 0x0020 (0x0020 - 0x0000)
struct B_CreativePlayerController_C_AddTargetToSwitchServer final
{
public:
	const class AActor*                           ActorToAdd;                                        // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	const class ABP_Switch_C*                     SWITCH;                                            // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         OldTargetList;                                     // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(B_CreativePlayerController_C_AddTargetToSwitchServer) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_AddTargetToSwitchServer");
static_assert(sizeof(B_CreativePlayerController_C_AddTargetToSwitchServer) == 0x000020, "Wrong size on B_CreativePlayerController_C_AddTargetToSwitchServer");
static_assert(offsetof(B_CreativePlayerController_C_AddTargetToSwitchServer, ActorToAdd) == 0x000000, "Member 'B_CreativePlayerController_C_AddTargetToSwitchServer::ActorToAdd' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_AddTargetToSwitchServer, SWITCH) == 0x000008, "Member 'B_CreativePlayerController_C_AddTargetToSwitchServer::SWITCH' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_AddTargetToSwitchServer, OldTargetList) == 0x000010, "Member 'B_CreativePlayerController_C_AddTargetToSwitchServer::OldTargetList' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.BeginTakingScreenshot
// 0x0038 (0x0038 - 0x0000)
struct B_CreativePlayerController_C_BeginTakingScreenshot final
{
public:
	bool                                          WantsToSubmittToWorkshop_0;                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_CreativeSpectator_C*                 K2Node_DynamicCast_AsB_Creative_Spectator;         // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_BeginTakingScreenshot) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_BeginTakingScreenshot");
static_assert(sizeof(B_CreativePlayerController_C_BeginTakingScreenshot) == 0x000038, "Wrong size on B_CreativePlayerController_C_BeginTakingScreenshot");
static_assert(offsetof(B_CreativePlayerController_C_BeginTakingScreenshot, WantsToSubmittToWorkshop_0) == 0x000000, "Member 'B_CreativePlayerController_C_BeginTakingScreenshot::WantsToSubmittToWorkshop_0' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_BeginTakingScreenshot, CallFunc_GetGameInstance_ReturnValue) == 0x000008, "Member 'B_CreativePlayerController_C_BeginTakingScreenshot::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_BeginTakingScreenshot, K2Node_DynamicCast_AsB_Game_Instance) == 0x000010, "Member 'B_CreativePlayerController_C_BeginTakingScreenshot::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_BeginTakingScreenshot, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'B_CreativePlayerController_C_BeginTakingScreenshot::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_BeginTakingScreenshot, CallFunc_K2_GetPawn_ReturnValue) == 0x000020, "Member 'B_CreativePlayerController_C_BeginTakingScreenshot::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_BeginTakingScreenshot, K2Node_DynamicCast_AsB_Creative_Spectator) == 0x000028, "Member 'B_CreativePlayerController_C_BeginTakingScreenshot::K2Node_DynamicCast_AsB_Creative_Spectator' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_BeginTakingScreenshot, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'B_CreativePlayerController_C_BeginTakingScreenshot::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.CanPlayTestBeToggledSafely
// 0x0040 (0x0040 - 0x0000)
struct B_CreativePlayerController_C_CanPlayTestBeToggledSafely final
{
public:
	bool                                          CanBeToggled;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayTestChangeWaitSeconds;                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              CallFunc_Now_ReturnValue;                          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimespan                              CallFunc_MakeTimespan_ReturnValue;                 // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimespan                              CallFunc_Subtract_DateTimeDateTime_ReturnValue;    // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_TimespanTimespan_ReturnValue; // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_CreativeGameMode_C*                  K2Node_DynamicCast_AsB_Creative_Game_Mode;         // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_CanPlayTestBeToggledSafely) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_CanPlayTestBeToggledSafely");
static_assert(sizeof(B_CreativePlayerController_C_CanPlayTestBeToggledSafely) == 0x000040, "Wrong size on B_CreativePlayerController_C_CanPlayTestBeToggledSafely");
static_assert(offsetof(B_CreativePlayerController_C_CanPlayTestBeToggledSafely, CanBeToggled) == 0x000000, "Member 'B_CreativePlayerController_C_CanPlayTestBeToggledSafely::CanBeToggled' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CanPlayTestBeToggledSafely, PlayTestChangeWaitSeconds) == 0x000004, "Member 'B_CreativePlayerController_C_CanPlayTestBeToggledSafely::PlayTestChangeWaitSeconds' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CanPlayTestBeToggledSafely, CallFunc_Now_ReturnValue) == 0x000008, "Member 'B_CreativePlayerController_C_CanPlayTestBeToggledSafely::CallFunc_Now_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CanPlayTestBeToggledSafely, CallFunc_MakeTimespan_ReturnValue) == 0x000010, "Member 'B_CreativePlayerController_C_CanPlayTestBeToggledSafely::CallFunc_MakeTimespan_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CanPlayTestBeToggledSafely, CallFunc_Subtract_DateTimeDateTime_ReturnValue) == 0x000018, "Member 'B_CreativePlayerController_C_CanPlayTestBeToggledSafely::CallFunc_Subtract_DateTimeDateTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CanPlayTestBeToggledSafely, CallFunc_GetGameMode_ReturnValue) == 0x000020, "Member 'B_CreativePlayerController_C_CanPlayTestBeToggledSafely::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CanPlayTestBeToggledSafely, CallFunc_GreaterEqual_TimespanTimespan_ReturnValue) == 0x000028, "Member 'B_CreativePlayerController_C_CanPlayTestBeToggledSafely::CallFunc_GreaterEqual_TimespanTimespan_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CanPlayTestBeToggledSafely, K2Node_DynamicCast_AsB_Creative_Game_Mode) == 0x000030, "Member 'B_CreativePlayerController_C_CanPlayTestBeToggledSafely::K2Node_DynamicCast_AsB_Creative_Game_Mode' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CanPlayTestBeToggledSafely, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'B_CreativePlayerController_C_CanPlayTestBeToggledSafely::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CanPlayTestBeToggledSafely, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000039, "Member 'B_CreativePlayerController_C_CanPlayTestBeToggledSafely::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.ChangeBrightnessServer
// 0x0010 (0x0010 - 0x0000)
struct B_CreativePlayerController_C_ChangeBrightnessServer final
{
public:
	class ABP_PlaceableLight_C*                   PlaceableLight;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        ChangeValue;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_ChangeBrightnessServer) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_ChangeBrightnessServer");
static_assert(sizeof(B_CreativePlayerController_C_ChangeBrightnessServer) == 0x000010, "Wrong size on B_CreativePlayerController_C_ChangeBrightnessServer");
static_assert(offsetof(B_CreativePlayerController_C_ChangeBrightnessServer, PlaceableLight) == 0x000000, "Member 'B_CreativePlayerController_C_ChangeBrightnessServer::PlaceableLight' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangeBrightnessServer, ChangeValue) == 0x000008, "Member 'B_CreativePlayerController_C_ChangeBrightnessServer::ChangeValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.ChangeLightColorServer
// 0x0020 (0x0020 - 0x0000)
struct B_CreativePlayerController_C_ChangeLightColorServer final
{
public:
	struct FVector                                Color;                                             // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlaceableLight_C*                   TargetLight;                                       // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_ChangeLightColorServer) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_ChangeLightColorServer");
static_assert(sizeof(B_CreativePlayerController_C_ChangeLightColorServer) == 0x000020, "Wrong size on B_CreativePlayerController_C_ChangeLightColorServer");
static_assert(offsetof(B_CreativePlayerController_C_ChangeLightColorServer, Color) == 0x000000, "Member 'B_CreativePlayerController_C_ChangeLightColorServer::Color' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangeLightColorServer, TargetLight) == 0x000018, "Member 'B_CreativePlayerController_C_ChangeLightColorServer::TargetLight' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.ChangeModifyMode
// 0x0004 (0x0004 - 0x0000)
struct B_CreativePlayerController_C_ChangeModifyMode final
{
public:
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Add_ByteByte_ReturnValue;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_ChangeModifyMode) == 0x000001, "Wrong alignment on B_CreativePlayerController_C_ChangeModifyMode");
static_assert(sizeof(B_CreativePlayerController_C_ChangeModifyMode) == 0x000004, "Wrong size on B_CreativePlayerController_C_ChangeModifyMode");
static_assert(offsetof(B_CreativePlayerController_C_ChangeModifyMode, K2Node_SwitchEnum_CmpSuccess) == 0x000000, "Member 'B_CreativePlayerController_C_ChangeModifyMode::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangeModifyMode, CallFunc_Add_ByteByte_ReturnValue) == 0x000001, "Member 'B_CreativePlayerController_C_ChangeModifyMode::CallFunc_Add_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangeModifyMode, CallFunc_GetValidValue_ReturnValue) == 0x000002, "Member 'B_CreativePlayerController_C_ChangeModifyMode::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangeModifyMode, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000003, "Member 'B_CreativePlayerController_C_ChangeModifyMode::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.ChangePlayerMode
// 0x0078 (0x0078 - 0x0000)
struct B_CreativePlayerController_C_ChangePlayerMode final
{
public:
	E_CreativePlayerMode                          NewMode;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 SavedAnchorActor;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CurrentPawn;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_1;            // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_1;            // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_2;            // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_2;            // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasSelectedSomething_HasSelectedActor;    // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B[0x5];                                       // 0x005B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_CreativeSpectator_C*                 K2Node_DynamicCast_AsB_Creative_Spectator;         // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_ChangePlayerMode) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_ChangePlayerMode");
static_assert(sizeof(B_CreativePlayerController_C_ChangePlayerMode) == 0x000078, "Wrong size on B_CreativePlayerController_C_ChangePlayerMode");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerMode, NewMode) == 0x000000, "Member 'B_CreativePlayerController_C_ChangePlayerMode::NewMode' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerMode, SavedAnchorActor) == 0x000008, "Member 'B_CreativePlayerController_C_ChangePlayerMode::SavedAnchorActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerMode, CurrentPawn) == 0x000010, "Member 'B_CreativePlayerController_C_ChangePlayerMode::CurrentPawn' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerMode, CallFunc_GetGameInstance_ReturnValue) == 0x000018, "Member 'B_CreativePlayerController_C_ChangePlayerMode::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerMode, CallFunc_GetGameInstance_ReturnValue_1) == 0x000020, "Member 'B_CreativePlayerController_C_ChangePlayerMode::CallFunc_GetGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerMode, K2Node_DynamicCast_AsB_Game_Instance) == 0x000028, "Member 'B_CreativePlayerController_C_ChangePlayerMode::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerMode, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'B_CreativePlayerController_C_ChangePlayerMode::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerMode, K2Node_DynamicCast_AsB_Game_Instance_1) == 0x000038, "Member 'B_CreativePlayerController_C_ChangePlayerMode::K2Node_DynamicCast_AsB_Game_Instance_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerMode, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'B_CreativePlayerController_C_ChangePlayerMode::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerMode, CallFunc_GetGameInstance_ReturnValue_2) == 0x000048, "Member 'B_CreativePlayerController_C_ChangePlayerMode::CallFunc_GetGameInstance_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerMode, K2Node_DynamicCast_AsB_Game_Instance_2) == 0x000050, "Member 'B_CreativePlayerController_C_ChangePlayerMode::K2Node_DynamicCast_AsB_Game_Instance_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerMode, K2Node_DynamicCast_bSuccess_2) == 0x000058, "Member 'B_CreativePlayerController_C_ChangePlayerMode::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerMode, CallFunc_HasSelectedSomething_HasSelectedActor) == 0x000059, "Member 'B_CreativePlayerController_C_ChangePlayerMode::CallFunc_HasSelectedSomething_HasSelectedActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerMode, K2Node_SwitchEnum_CmpSuccess) == 0x00005A, "Member 'B_CreativePlayerController_C_ChangePlayerMode::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerMode, K2Node_DynamicCast_AsB_Creative_Spectator) == 0x000060, "Member 'B_CreativePlayerController_C_ChangePlayerMode::K2Node_DynamicCast_AsB_Creative_Spectator' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerMode, K2Node_DynamicCast_bSuccess_3) == 0x000068, "Member 'B_CreativePlayerController_C_ChangePlayerMode::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerMode, K2Node_SwitchEnum_CmpSuccess_1) == 0x000069, "Member 'B_CreativePlayerController_C_ChangePlayerMode::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerMode, CallFunc_K2_GetPawn_ReturnValue) == 0x000070, "Member 'B_CreativePlayerController_C_ChangePlayerMode::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.ChangePlayerModeByShortcutKey
// 0x00A8 (0x00A8 - 0x0000)
struct B_CreativePlayerController_C_ChangePlayerModeByShortcutKey final
{
public:
	E_CreativePlayerMode                          NewMode;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_CreativeGameMode_C*                  CreativeGameMode;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_CreativeGameState_C*                 K2Node_DynamicCast_AsB_Creative_Game_State;        // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMapLayoutAlreadySaved_IsAlreadySaved;   // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanPlayTestBeToggledSafely_CanBeToggled;  // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F[0x1];                                       // 0x002F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_QuestionDialog_C*                   CallFunc_ShowQuestionDialog_QuestionDialog;        // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	E_CreativePlayerMode                          K2Node_Select_Default;                             // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_CreativeGameMode_C*                  K2Node_DynamicCast_AsB_Creative_Game_Mode;         // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_1;            // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_2;            // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_1;            // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_2;            // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_4;        // 0x00A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00A3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x00A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_ChangePlayerModeByShortcutKey) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_ChangePlayerModeByShortcutKey");
static_assert(sizeof(B_CreativePlayerController_C_ChangePlayerModeByShortcutKey) == 0x0000A8, "Wrong size on B_CreativePlayerController_C_ChangePlayerModeByShortcutKey");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerModeByShortcutKey, NewMode) == 0x000000, "Member 'B_CreativePlayerController_C_ChangePlayerModeByShortcutKey::NewMode' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerModeByShortcutKey, CreativeGameMode) == 0x000008, "Member 'B_CreativePlayerController_C_ChangePlayerModeByShortcutKey::CreativeGameMode' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerModeByShortcutKey, CallFunc_GetGameState_ReturnValue) == 0x000010, "Member 'B_CreativePlayerController_C_ChangePlayerModeByShortcutKey::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerModeByShortcutKey, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'B_CreativePlayerController_C_ChangePlayerModeByShortcutKey::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerModeByShortcutKey, K2Node_DynamicCast_AsB_Creative_Game_State) == 0x000020, "Member 'B_CreativePlayerController_C_ChangePlayerModeByShortcutKey::K2Node_DynamicCast_AsB_Creative_Game_State' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerModeByShortcutKey, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'B_CreativePlayerController_C_ChangePlayerModeByShortcutKey::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerModeByShortcutKey, CallFunc_IsMapLayoutAlreadySaved_IsAlreadySaved) == 0x000029, "Member 'B_CreativePlayerController_C_ChangePlayerModeByShortcutKey::CallFunc_IsMapLayoutAlreadySaved_IsAlreadySaved' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerModeByShortcutKey, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00002A, "Member 'B_CreativePlayerController_C_ChangePlayerModeByShortcutKey::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerModeByShortcutKey, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00002B, "Member 'B_CreativePlayerController_C_ChangePlayerModeByShortcutKey::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerModeByShortcutKey, CallFunc_BooleanAND_ReturnValue) == 0x00002C, "Member 'B_CreativePlayerController_C_ChangePlayerModeByShortcutKey::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerModeByShortcutKey, CallFunc_CanPlayTestBeToggledSafely_CanBeToggled) == 0x00002D, "Member 'B_CreativePlayerController_C_ChangePlayerModeByShortcutKey::CallFunc_CanPlayTestBeToggledSafely_CanBeToggled' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerModeByShortcutKey, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x00002E, "Member 'B_CreativePlayerController_C_ChangePlayerModeByShortcutKey::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerModeByShortcutKey, CallFunc_GetGameInstance_ReturnValue) == 0x000030, "Member 'B_CreativePlayerController_C_ChangePlayerModeByShortcutKey::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerModeByShortcutKey, CallFunc_IsValid_ReturnValue_1) == 0x000038, "Member 'B_CreativePlayerController_C_ChangePlayerModeByShortcutKey::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerModeByShortcutKey, K2Node_DynamicCast_AsB_Game_Instance) == 0x000040, "Member 'B_CreativePlayerController_C_ChangePlayerModeByShortcutKey::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerModeByShortcutKey, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'B_CreativePlayerController_C_ChangePlayerModeByShortcutKey::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerModeByShortcutKey, Temp_bool_Variable) == 0x000049, "Member 'B_CreativePlayerController_C_ChangePlayerModeByShortcutKey::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerModeByShortcutKey, CallFunc_ShowQuestionDialog_QuestionDialog) == 0x000050, "Member 'B_CreativePlayerController_C_ChangePlayerModeByShortcutKey::CallFunc_ShowQuestionDialog_QuestionDialog' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerModeByShortcutKey, K2Node_Select_Default) == 0x000058, "Member 'B_CreativePlayerController_C_ChangePlayerModeByShortcutKey::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerModeByShortcutKey, CallFunc_GetGameMode_ReturnValue) == 0x000060, "Member 'B_CreativePlayerController_C_ChangePlayerModeByShortcutKey::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerModeByShortcutKey, K2Node_DynamicCast_AsB_Creative_Game_Mode) == 0x000068, "Member 'B_CreativePlayerController_C_ChangePlayerModeByShortcutKey::K2Node_DynamicCast_AsB_Creative_Game_Mode' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerModeByShortcutKey, K2Node_DynamicCast_bSuccess_2) == 0x000070, "Member 'B_CreativePlayerController_C_ChangePlayerModeByShortcutKey::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerModeByShortcutKey, CallFunc_GetGameInstance_ReturnValue_1) == 0x000078, "Member 'B_CreativePlayerController_C_ChangePlayerModeByShortcutKey::CallFunc_GetGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerModeByShortcutKey, CallFunc_GetGameInstance_ReturnValue_2) == 0x000080, "Member 'B_CreativePlayerController_C_ChangePlayerModeByShortcutKey::CallFunc_GetGameInstance_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerModeByShortcutKey, K2Node_DynamicCast_AsB_Game_Instance_1) == 0x000088, "Member 'B_CreativePlayerController_C_ChangePlayerModeByShortcutKey::K2Node_DynamicCast_AsB_Game_Instance_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerModeByShortcutKey, K2Node_DynamicCast_bSuccess_3) == 0x000090, "Member 'B_CreativePlayerController_C_ChangePlayerModeByShortcutKey::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerModeByShortcutKey, K2Node_DynamicCast_AsB_Game_Instance_2) == 0x000098, "Member 'B_CreativePlayerController_C_ChangePlayerModeByShortcutKey::K2Node_DynamicCast_AsB_Game_Instance_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerModeByShortcutKey, K2Node_DynamicCast_bSuccess_4) == 0x0000A0, "Member 'B_CreativePlayerController_C_ChangePlayerModeByShortcutKey::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerModeByShortcutKey, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x0000A1, "Member 'B_CreativePlayerController_C_ChangePlayerModeByShortcutKey::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerModeByShortcutKey, CallFunc_EqualEqual_ByteByte_ReturnValue_4) == 0x0000A2, "Member 'B_CreativePlayerController_C_ChangePlayerModeByShortcutKey::CallFunc_EqualEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerModeByShortcutKey, CallFunc_BooleanOR_ReturnValue) == 0x0000A3, "Member 'B_CreativePlayerController_C_ChangePlayerModeByShortcutKey::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerModeByShortcutKey, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x0000A4, "Member 'B_CreativePlayerController_C_ChangePlayerModeByShortcutKey::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangePlayerModeByShortcutKey, CallFunc_BooleanOR_ReturnValue_1) == 0x0000A5, "Member 'B_CreativePlayerController_C_ChangePlayerModeByShortcutKey::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.ChangeToSpecificModifyMode
// 0x0002 (0x0002 - 0x0000)
struct B_CreativePlayerController_C_ChangeToSpecificModifyMode final
{
public:
	E_ModifyMode                                  ModifyMode_0;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_ChangeToSpecificModifyMode) == 0x000001, "Wrong alignment on B_CreativePlayerController_C_ChangeToSpecificModifyMode");
static_assert(sizeof(B_CreativePlayerController_C_ChangeToSpecificModifyMode) == 0x000002, "Wrong size on B_CreativePlayerController_C_ChangeToSpecificModifyMode");
static_assert(offsetof(B_CreativePlayerController_C_ChangeToSpecificModifyMode, ModifyMode_0) == 0x000000, "Member 'B_CreativePlayerController_C_ChangeToSpecificModifyMode::ModifyMode_0' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ChangeToSpecificModifyMode, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'B_CreativePlayerController_C_ChangeToSpecificModifyMode::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.CheckActorAmountLimits
// 0x0030 (0x0030 - 0x0000)
struct B_CreativePlayerController_C_CheckActorAmountLimits final
{
public:
	class AB_CreativeGameState_C*                 CreativeGameState;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         ActorsToDuplicate;                                 // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          BelowLimit;                                        // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AmountBelowLimit;                                  // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_IncreasePropAndPlaceableActorAmount_PropAmount; // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_IncreasePropAndPlaceableActorAmount_PlaceableActorsAmount; // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_CheckActorAmountLimits) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_CheckActorAmountLimits");
static_assert(sizeof(B_CreativePlayerController_C_CheckActorAmountLimits) == 0x000030, "Wrong size on B_CreativePlayerController_C_CheckActorAmountLimits");
static_assert(offsetof(B_CreativePlayerController_C_CheckActorAmountLimits, CreativeGameState) == 0x000000, "Member 'B_CreativePlayerController_C_CheckActorAmountLimits::CreativeGameState' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CheckActorAmountLimits, ActorsToDuplicate) == 0x000008, "Member 'B_CreativePlayerController_C_CheckActorAmountLimits::ActorsToDuplicate' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CheckActorAmountLimits, BelowLimit) == 0x000018, "Member 'B_CreativePlayerController_C_CheckActorAmountLimits::BelowLimit' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CheckActorAmountLimits, AmountBelowLimit) == 0x000019, "Member 'B_CreativePlayerController_C_CheckActorAmountLimits::AmountBelowLimit' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CheckActorAmountLimits, CallFunc_IncreasePropAndPlaceableActorAmount_PropAmount) == 0x00001C, "Member 'B_CreativePlayerController_C_CheckActorAmountLimits::CallFunc_IncreasePropAndPlaceableActorAmount_PropAmount' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CheckActorAmountLimits, CallFunc_IncreasePropAndPlaceableActorAmount_PlaceableActorsAmount) == 0x000020, "Member 'B_CreativePlayerController_C_CheckActorAmountLimits::CallFunc_IncreasePropAndPlaceableActorAmount_PlaceableActorsAmount' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CheckActorAmountLimits, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'B_CreativePlayerController_C_CheckActorAmountLimits::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CheckActorAmountLimits, CallFunc_Add_IntInt_ReturnValue_1) == 0x000028, "Member 'B_CreativePlayerController_C_CheckActorAmountLimits::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CheckActorAmountLimits, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00002C, "Member 'B_CreativePlayerController_C_CheckActorAmountLimits::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CheckActorAmountLimits, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x00002D, "Member 'B_CreativePlayerController_C_CheckActorAmountLimits::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CheckActorAmountLimits, CallFunc_BooleanAND_ReturnValue) == 0x00002E, "Member 'B_CreativePlayerController_C_CheckActorAmountLimits::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.CheckSizeMultipleAfterAnchorSizeChange
// 0x0138 (0x0138 - 0x0000)
struct B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange final
{
public:
	TArray<class AActor*>                         ActorsToCheck;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_StaticMeshProp_C*                    K2Node_DynamicCast_AsB_Static_Mesh_Prop;           // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlaceableActor_C*                   K2Node_DynamicCast_AsBP_Placeable_Actor;           // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetActorScale3D_ReturnValue;              // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorScale3D_ReturnValue_1;            // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_DetermineClampActorScale_ClampedScale;    // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_DetermineClampActorScale_ClampedScale_1;  // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_DetermineClampActorScale_ClampedScale_2;  // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_DetermineClampActorScale_ClampedScale_3;  // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_DetermineClampActorScale_ClampedScale_4;  // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_DetermineClampActorScale_ClampedScale_5;  // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x00F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetMaxElement_ReturnValue;                // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0118(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange");
static_assert(sizeof(B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange) == 0x000138, "Wrong size on B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange");
static_assert(offsetof(B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange, ActorsToCheck) == 0x000000, "Member 'B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange::ActorsToCheck' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange, Temp_int_Array_Index_Variable) == 0x000014, "Member 'B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange, CallFunc_Array_Get_Item) == 0x000020, "Member 'B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange, K2Node_DynamicCast_AsB_Static_Mesh_Prop) == 0x000028, "Member 'B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange::K2Node_DynamicCast_AsB_Static_Mesh_Prop' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange, K2Node_DynamicCast_AsBP_Placeable_Actor) == 0x000038, "Member 'B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange::K2Node_DynamicCast_AsBP_Placeable_Actor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange, CallFunc_GetActorScale3D_ReturnValue) == 0x000048, "Member 'B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange::CallFunc_GetActorScale3D_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange, CallFunc_GetActorScale3D_ReturnValue_1) == 0x000060, "Member 'B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange::CallFunc_GetActorScale3D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange, CallFunc_BreakVector_X) == 0x000078, "Member 'B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange, CallFunc_BreakVector_Y) == 0x000080, "Member 'B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange, CallFunc_BreakVector_Z) == 0x000088, "Member 'B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange, CallFunc_BreakVector_X_1) == 0x000090, "Member 'B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange, CallFunc_BreakVector_Y_1) == 0x000098, "Member 'B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange, CallFunc_BreakVector_Z_1) == 0x0000A0, "Member 'B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange, CallFunc_DetermineClampActorScale_ClampedScale) == 0x0000A8, "Member 'B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange::CallFunc_DetermineClampActorScale_ClampedScale' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange, CallFunc_DetermineClampActorScale_ClampedScale_1) == 0x0000B0, "Member 'B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange::CallFunc_DetermineClampActorScale_ClampedScale_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange, CallFunc_DetermineClampActorScale_ClampedScale_2) == 0x0000B8, "Member 'B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange::CallFunc_DetermineClampActorScale_ClampedScale_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange, CallFunc_DetermineClampActorScale_ClampedScale_3) == 0x0000C0, "Member 'B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange::CallFunc_DetermineClampActorScale_ClampedScale_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange, CallFunc_DetermineClampActorScale_ClampedScale_4) == 0x0000C8, "Member 'B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange::CallFunc_DetermineClampActorScale_ClampedScale_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange, CallFunc_MakeVector_ReturnValue) == 0x0000D0, "Member 'B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange, CallFunc_DetermineClampActorScale_ClampedScale_5) == 0x0000E8, "Member 'B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange::CallFunc_DetermineClampActorScale_ClampedScale_5' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange, CallFunc_MakeVector_ReturnValue_1) == 0x0000F0, "Member 'B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange, CallFunc_Less_IntInt_ReturnValue) == 0x000108, "Member 'B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange, CallFunc_GetMaxElement_ReturnValue) == 0x000110, "Member 'B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange::CallFunc_GetMaxElement_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000118, "Member 'B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange, CallFunc_Add_IntInt_ReturnValue) == 0x000130, "Member 'B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000134, "Member 'B_CreativePlayerController_C_CheckSizeMultipleAfterAnchorSizeChange::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.ClampScaleOfTargetOrAnchorActor
// 0x0038 (0x0038 - 0x0000)
struct B_CreativePlayerController_C_ClampScaleOfTargetOrAnchorActor final
{
public:
	class AActor*                                 TargetActor_Optional_;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        WantedScale;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ClampedScale;                                      // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 TargetActor;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAnchorActor_AnchorActor;               // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_DetermineClampActorScale_ClampedScale;    // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_ClampScaleOfTargetOrAnchorActor) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_ClampScaleOfTargetOrAnchorActor");
static_assert(sizeof(B_CreativePlayerController_C_ClampScaleOfTargetOrAnchorActor) == 0x000038, "Wrong size on B_CreativePlayerController_C_ClampScaleOfTargetOrAnchorActor");
static_assert(offsetof(B_CreativePlayerController_C_ClampScaleOfTargetOrAnchorActor, TargetActor_Optional_) == 0x000000, "Member 'B_CreativePlayerController_C_ClampScaleOfTargetOrAnchorActor::TargetActor_Optional_' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ClampScaleOfTargetOrAnchorActor, WantedScale) == 0x000008, "Member 'B_CreativePlayerController_C_ClampScaleOfTargetOrAnchorActor::WantedScale' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ClampScaleOfTargetOrAnchorActor, ClampedScale) == 0x000010, "Member 'B_CreativePlayerController_C_ClampScaleOfTargetOrAnchorActor::ClampedScale' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ClampScaleOfTargetOrAnchorActor, TargetActor) == 0x000018, "Member 'B_CreativePlayerController_C_ClampScaleOfTargetOrAnchorActor::TargetActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ClampScaleOfTargetOrAnchorActor, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'B_CreativePlayerController_C_ClampScaleOfTargetOrAnchorActor::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ClampScaleOfTargetOrAnchorActor, CallFunc_GetAnchorActor_AnchorActor) == 0x000028, "Member 'B_CreativePlayerController_C_ClampScaleOfTargetOrAnchorActor::CallFunc_GetAnchorActor_AnchorActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ClampScaleOfTargetOrAnchorActor, CallFunc_DetermineClampActorScale_ClampedScale) == 0x000030, "Member 'B_CreativePlayerController_C_ClampScaleOfTargetOrAnchorActor::CallFunc_DetermineClampActorScale_ClampedScale' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.ClearSwitchConnections
// 0x0020 (0x0020 - 0x0000)
struct B_CreativePlayerController_C_ClearSwitchConnections final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_SwitchConnection_C*                  CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_ClearSwitchConnections) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_ClearSwitchConnections");
static_assert(sizeof(B_CreativePlayerController_C_ClearSwitchConnections) == 0x000020, "Wrong size on B_CreativePlayerController_C_ClearSwitchConnections");
static_assert(offsetof(B_CreativePlayerController_C_ClearSwitchConnections, Temp_int_Array_Index_Variable) == 0x000000, "Member 'B_CreativePlayerController_C_ClearSwitchConnections::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ClearSwitchConnections, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'B_CreativePlayerController_C_ClearSwitchConnections::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ClearSwitchConnections, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'B_CreativePlayerController_C_ClearSwitchConnections::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ClearSwitchConnections, CallFunc_Array_Get_Item) == 0x000010, "Member 'B_CreativePlayerController_C_ClearSwitchConnections::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ClearSwitchConnections, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'B_CreativePlayerController_C_ClearSwitchConnections::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ClearSwitchConnections, CallFunc_Less_IntInt_ReturnValue) == 0x00001C, "Member 'B_CreativePlayerController_C_ClearSwitchConnections::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.CloseAllMenusExceptEditUi
// 0x0038 (0x0038 - 0x0000)
struct B_CreativePlayerController_C_CloseAllMenusExceptEditUi final
{
public:
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_1;            // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_1;            // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_CloseAllMenusExceptEditUi) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_CloseAllMenusExceptEditUi");
static_assert(sizeof(B_CreativePlayerController_C_CloseAllMenusExceptEditUi) == 0x000038, "Wrong size on B_CreativePlayerController_C_CloseAllMenusExceptEditUi");
static_assert(offsetof(B_CreativePlayerController_C_CloseAllMenusExceptEditUi, CallFunc_GetGameInstance_ReturnValue) == 0x000000, "Member 'B_CreativePlayerController_C_CloseAllMenusExceptEditUi::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CloseAllMenusExceptEditUi, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'B_CreativePlayerController_C_CloseAllMenusExceptEditUi::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CloseAllMenusExceptEditUi, K2Node_DynamicCast_AsB_Game_Instance) == 0x000010, "Member 'B_CreativePlayerController_C_CloseAllMenusExceptEditUi::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CloseAllMenusExceptEditUi, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'B_CreativePlayerController_C_CloseAllMenusExceptEditUi::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CloseAllMenusExceptEditUi, CallFunc_GetGameInstance_ReturnValue_1) == 0x000020, "Member 'B_CreativePlayerController_C_CloseAllMenusExceptEditUi::CallFunc_GetGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CloseAllMenusExceptEditUi, K2Node_DynamicCast_AsB_Game_Instance_1) == 0x000028, "Member 'B_CreativePlayerController_C_CloseAllMenusExceptEditUi::K2Node_DynamicCast_AsB_Game_Instance_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CloseAllMenusExceptEditUi, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'B_CreativePlayerController_C_CloseAllMenusExceptEditUi::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CloseAllMenusExceptEditUi, CallFunc_IsValid_ReturnValue_1) == 0x000031, "Member 'B_CreativePlayerController_C_CloseAllMenusExceptEditUi::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CloseAllMenusExceptEditUi, CallFunc_IsValid_ReturnValue_2) == 0x000032, "Member 'B_CreativePlayerController_C_CloseAllMenusExceptEditUi::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CloseAllMenusExceptEditUi, CallFunc_IsValid_ReturnValue_3) == 0x000033, "Member 'B_CreativePlayerController_C_CloseAllMenusExceptEditUi::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.CloseEscMenu
// 0x0028 (0x0028 - 0x0000)
struct B_CreativePlayerController_C_CloseEscMenu final
{
public:
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_CreativeIngameMenu_C*               K2Node_DynamicCast_AsWB_Creative_Ingame_Menu;      // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_CloseEscMenu) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_CloseEscMenu");
static_assert(sizeof(B_CreativePlayerController_C_CloseEscMenu) == 0x000028, "Wrong size on B_CreativePlayerController_C_CloseEscMenu");
static_assert(offsetof(B_CreativePlayerController_C_CloseEscMenu, CallFunc_GetGameInstance_ReturnValue) == 0x000000, "Member 'B_CreativePlayerController_C_CloseEscMenu::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CloseEscMenu, K2Node_DynamicCast_AsB_Game_Instance) == 0x000008, "Member 'B_CreativePlayerController_C_CloseEscMenu::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CloseEscMenu, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'B_CreativePlayerController_C_CloseEscMenu::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CloseEscMenu, K2Node_DynamicCast_AsWB_Creative_Ingame_Menu) == 0x000018, "Member 'B_CreativePlayerController_C_CloseEscMenu::K2Node_DynamicCast_AsWB_Creative_Ingame_Menu' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CloseEscMenu, K2Node_DynamicCast_bSuccess_1) == 0x000020, "Member 'B_CreativePlayerController_C_CloseEscMenu::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CloseEscMenu, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'B_CreativePlayerController_C_CloseEscMenu::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.CloseTabScreen
// 0x0040 (0x0040 - 0x0000)
struct B_CreativePlayerController_C_CloseTabScreen final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CreativePlayerMode                          CallFunc_GetSelectedPlayerMode_SelectedPlayerMode; // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B[0x1];                                       // 0x003B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_CloseTabScreen) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_CloseTabScreen");
static_assert(sizeof(B_CreativePlayerController_C_CloseTabScreen) == 0x000040, "Wrong size on B_CreativePlayerController_C_CloseTabScreen");
static_assert(offsetof(B_CreativePlayerController_C_CloseTabScreen, Temp_int_Array_Index_Variable) == 0x000000, "Member 'B_CreativePlayerController_C_CloseTabScreen::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CloseTabScreen, CallFunc_GetGameInstance_ReturnValue) == 0x000008, "Member 'B_CreativePlayerController_C_CloseTabScreen::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CloseTabScreen, K2Node_DynamicCast_AsB_Game_Instance) == 0x000010, "Member 'B_CreativePlayerController_C_CloseTabScreen::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CloseTabScreen, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'B_CreativePlayerController_C_CloseTabScreen::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CloseTabScreen, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'B_CreativePlayerController_C_CloseTabScreen::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CloseTabScreen, CallFunc_K2_GetPawn_ReturnValue) == 0x000020, "Member 'B_CreativePlayerController_C_CloseTabScreen::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CloseTabScreen, CallFunc_Array_Get_Item) == 0x000028, "Member 'B_CreativePlayerController_C_CloseTabScreen::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CloseTabScreen, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'B_CreativePlayerController_C_CloseTabScreen::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CloseTabScreen, Temp_int_Loop_Counter_Variable) == 0x000034, "Member 'B_CreativePlayerController_C_CloseTabScreen::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CloseTabScreen, CallFunc_GetSelectedPlayerMode_SelectedPlayerMode) == 0x000038, "Member 'B_CreativePlayerController_C_CloseTabScreen::CallFunc_GetSelectedPlayerMode_SelectedPlayerMode' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CloseTabScreen, CallFunc_Less_IntInt_ReturnValue) == 0x000039, "Member 'B_CreativePlayerController_C_CloseTabScreen::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CloseTabScreen, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00003A, "Member 'B_CreativePlayerController_C_CloseTabScreen::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_CloseTabScreen, CallFunc_Add_IntInt_ReturnValue) == 0x00003C, "Member 'B_CreativePlayerController_C_CloseTabScreen::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.ConfirmDuplicate
// 0x0030 (0x0030 - 0x0000)
struct B_CreativePlayerController_C_ConfirmDuplicate final
{
public:
	TArray<class AActor*>                         ActorsToSelect;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Drag;                                              // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_ConfirmDuplicate) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_ConfirmDuplicate");
static_assert(sizeof(B_CreativePlayerController_C_ConfirmDuplicate) == 0x000030, "Wrong size on B_CreativePlayerController_C_ConfirmDuplicate");
static_assert(offsetof(B_CreativePlayerController_C_ConfirmDuplicate, ActorsToSelect) == 0x000000, "Member 'B_CreativePlayerController_C_ConfirmDuplicate::ActorsToSelect' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ConfirmDuplicate, Drag) == 0x000010, "Member 'B_CreativePlayerController_C_ConfirmDuplicate::Drag' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ConfirmDuplicate, Temp_int_Array_Index_Variable) == 0x000014, "Member 'B_CreativePlayerController_C_ConfirmDuplicate::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ConfirmDuplicate, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'B_CreativePlayerController_C_ConfirmDuplicate::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ConfirmDuplicate, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'B_CreativePlayerController_C_ConfirmDuplicate::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ConfirmDuplicate, CallFunc_Array_Get_Item) == 0x000020, "Member 'B_CreativePlayerController_C_ConfirmDuplicate::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ConfirmDuplicate, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'B_CreativePlayerController_C_ConfirmDuplicate::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ConfirmDuplicate, CallFunc_Less_IntInt_ReturnValue) == 0x00002C, "Member 'B_CreativePlayerController_C_ConfirmDuplicate::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ConfirmDuplicate, CallFunc_BooleanAND_ReturnValue) == 0x00002D, "Member 'B_CreativePlayerController_C_ConfirmDuplicate::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.ConfirmDuplicateMultipleServer
// 0x0018 (0x0018 - 0x0000)
struct B_CreativePlayerController_C_ConfirmDuplicateMultipleServer final
{
public:
	TArray<class AActor*>                         ActorsToSelect;                                    // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Drag;                                              // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_ConfirmDuplicateMultipleServer) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_ConfirmDuplicateMultipleServer");
static_assert(sizeof(B_CreativePlayerController_C_ConfirmDuplicateMultipleServer) == 0x000018, "Wrong size on B_CreativePlayerController_C_ConfirmDuplicateMultipleServer");
static_assert(offsetof(B_CreativePlayerController_C_ConfirmDuplicateMultipleServer, ActorsToSelect) == 0x000000, "Member 'B_CreativePlayerController_C_ConfirmDuplicateMultipleServer::ActorsToSelect' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ConfirmDuplicateMultipleServer, Drag) == 0x000010, "Member 'B_CreativePlayerController_C_ConfirmDuplicateMultipleServer::Drag' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.DeleteActorsToPlace
// 0x0050 (0x0050 - 0x0000)
struct B_CreativePlayerController_C_DeleteActorsToPlace final
{
public:
	bool                                          KeepCollisionWallAppearance;                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetAnchorActor_AnchorActor;               // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_CollisionWall_C*                    K2Node_DynamicCast_AsBP_Collision_Wall;            // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_CollisionWall_C*                    K2Node_DynamicCast_AsBP_Collision_Wall_1;          // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_DeleteActorsToPlace) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_DeleteActorsToPlace");
static_assert(sizeof(B_CreativePlayerController_C_DeleteActorsToPlace) == 0x000050, "Wrong size on B_CreativePlayerController_C_DeleteActorsToPlace");
static_assert(offsetof(B_CreativePlayerController_C_DeleteActorsToPlace, KeepCollisionWallAppearance) == 0x000000, "Member 'B_CreativePlayerController_C_DeleteActorsToPlace::KeepCollisionWallAppearance' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeleteActorsToPlace, Temp_int_Array_Index_Variable) == 0x000004, "Member 'B_CreativePlayerController_C_DeleteActorsToPlace::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeleteActorsToPlace, CallFunc_GetAnchorActor_AnchorActor) == 0x000008, "Member 'B_CreativePlayerController_C_DeleteActorsToPlace::CallFunc_GetAnchorActor_AnchorActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeleteActorsToPlace, K2Node_DynamicCast_AsBP_Collision_Wall) == 0x000010, "Member 'B_CreativePlayerController_C_DeleteActorsToPlace::K2Node_DynamicCast_AsBP_Collision_Wall' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeleteActorsToPlace, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'B_CreativePlayerController_C_DeleteActorsToPlace::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeleteActorsToPlace, CallFunc_Not_PreBool_ReturnValue) == 0x000019, "Member 'B_CreativePlayerController_C_DeleteActorsToPlace::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeleteActorsToPlace, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'B_CreativePlayerController_C_DeleteActorsToPlace::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeleteActorsToPlace, CallFunc_BooleanAND_ReturnValue) == 0x000020, "Member 'B_CreativePlayerController_C_DeleteActorsToPlace::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeleteActorsToPlace, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'B_CreativePlayerController_C_DeleteActorsToPlace::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeleteActorsToPlace, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'B_CreativePlayerController_C_DeleteActorsToPlace::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeleteActorsToPlace, CallFunc_Array_Length_ReturnValue) == 0x00002C, "Member 'B_CreativePlayerController_C_DeleteActorsToPlace::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeleteActorsToPlace, CallFunc_Array_Get_Item) == 0x000030, "Member 'B_CreativePlayerController_C_DeleteActorsToPlace::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeleteActorsToPlace, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'B_CreativePlayerController_C_DeleteActorsToPlace::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeleteActorsToPlace, CallFunc_IsValid_ReturnValue_1) == 0x000039, "Member 'B_CreativePlayerController_C_DeleteActorsToPlace::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeleteActorsToPlace, K2Node_DynamicCast_AsBP_Collision_Wall_1) == 0x000040, "Member 'B_CreativePlayerController_C_DeleteActorsToPlace::K2Node_DynamicCast_AsBP_Collision_Wall_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeleteActorsToPlace, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'B_CreativePlayerController_C_DeleteActorsToPlace::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.DeleteMultiple
// 0x00B0 (0x00B0 - 0x0000)
struct B_CreativePlayerController_C_DeleteMultiple final
{
public:
	TArray<class AActor*>                         ActorsToDelete;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class AActor*                                 CurrentActor;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AB_CreativeGameState_C*                 CreativeGameState;                                 // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_StaticMeshProp_C*                    K2Node_DynamicCast_AsB_Static_Mesh_Prop;           // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlaceableActor_C*                   K2Node_DynamicCast_AsBP_Placeable_Actor;           // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_CreativeGameState_C*                 K2Node_DynamicCast_AsB_Creative_Game_State;        // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_DeleteMultiple) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_DeleteMultiple");
static_assert(sizeof(B_CreativePlayerController_C_DeleteMultiple) == 0x0000B0, "Wrong size on B_CreativePlayerController_C_DeleteMultiple");
static_assert(offsetof(B_CreativePlayerController_C_DeleteMultiple, ActorsToDelete) == 0x000000, "Member 'B_CreativePlayerController_C_DeleteMultiple::ActorsToDelete' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeleteMultiple, CurrentActor) == 0x000010, "Member 'B_CreativePlayerController_C_DeleteMultiple::CurrentActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeleteMultiple, CreativeGameState) == 0x000018, "Member 'B_CreativePlayerController_C_DeleteMultiple::CreativeGameState' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeleteMultiple, Temp_int_Variable) == 0x000020, "Member 'B_CreativePlayerController_C_DeleteMultiple::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeleteMultiple, K2Node_DynamicCast_AsB_Static_Mesh_Prop) == 0x000028, "Member 'B_CreativePlayerController_C_DeleteMultiple::K2Node_DynamicCast_AsB_Static_Mesh_Prop' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeleteMultiple, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'B_CreativePlayerController_C_DeleteMultiple::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeleteMultiple, Temp_int_Loop_Counter_Variable) == 0x000034, "Member 'B_CreativePlayerController_C_DeleteMultiple::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeleteMultiple, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'B_CreativePlayerController_C_DeleteMultiple::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeleteMultiple, Temp_int_Array_Index_Variable) == 0x00003C, "Member 'B_CreativePlayerController_C_DeleteMultiple::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeleteMultiple, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000040, "Member 'B_CreativePlayerController_C_DeleteMultiple::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeleteMultiple, K2Node_DynamicCast_AsBP_Placeable_Actor) == 0x000058, "Member 'B_CreativePlayerController_C_DeleteMultiple::K2Node_DynamicCast_AsBP_Placeable_Actor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeleteMultiple, K2Node_DynamicCast_bSuccess_1) == 0x000060, "Member 'B_CreativePlayerController_C_DeleteMultiple::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeleteMultiple, CallFunc_Array_Get_Item) == 0x000068, "Member 'B_CreativePlayerController_C_DeleteMultiple::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeleteMultiple, CallFunc_IsValid_ReturnValue) == 0x000070, "Member 'B_CreativePlayerController_C_DeleteMultiple::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeleteMultiple, CallFunc_Subtract_IntInt_ReturnValue) == 0x000074, "Member 'B_CreativePlayerController_C_DeleteMultiple::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeleteMultiple, CallFunc_Greater_IntInt_ReturnValue) == 0x000078, "Member 'B_CreativePlayerController_C_DeleteMultiple::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeleteMultiple, CallFunc_Array_Length_ReturnValue) == 0x00007C, "Member 'B_CreativePlayerController_C_DeleteMultiple::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeleteMultiple, CallFunc_Less_IntInt_ReturnValue) == 0x000080, "Member 'B_CreativePlayerController_C_DeleteMultiple::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeleteMultiple, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000084, "Member 'B_CreativePlayerController_C_DeleteMultiple::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeleteMultiple, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000088, "Member 'B_CreativePlayerController_C_DeleteMultiple::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeleteMultiple, CallFunc_GetGameState_ReturnValue) == 0x000090, "Member 'B_CreativePlayerController_C_DeleteMultiple::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeleteMultiple, Temp_int_Variable_1) == 0x000098, "Member 'B_CreativePlayerController_C_DeleteMultiple::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeleteMultiple, K2Node_DynamicCast_AsB_Creative_Game_State) == 0x0000A0, "Member 'B_CreativePlayerController_C_DeleteMultiple::K2Node_DynamicCast_AsB_Creative_Game_State' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeleteMultiple, K2Node_DynamicCast_bSuccess_2) == 0x0000A8, "Member 'B_CreativePlayerController_C_DeleteMultiple::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.DeleteMultipleServer
// 0x0010 (0x0010 - 0x0000)
struct B_CreativePlayerController_C_DeleteMultipleServer final
{
public:
	TArray<class AActor*>                         ActorsToDelete;                                    // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(B_CreativePlayerController_C_DeleteMultipleServer) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_DeleteMultipleServer");
static_assert(sizeof(B_CreativePlayerController_C_DeleteMultipleServer) == 0x000010, "Wrong size on B_CreativePlayerController_C_DeleteMultipleServer");
static_assert(offsetof(B_CreativePlayerController_C_DeleteMultipleServer, ActorsToDelete) == 0x000000, "Member 'B_CreativePlayerController_C_DeleteMultipleServer::ActorsToDelete' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.DeletePrefab
// 0x0068 (0x0068 - 0x0000)
struct B_CreativePlayerController_C_DeletePrefab final
{
public:
	struct FPrefabToSave                          PrefabToDelete;                                    // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm)
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameMode_C*                          K2Node_DynamicCast_AsB_Game_Mode;                  // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_CreativeGameMode_C*                  K2Node_DynamicCast_AsB_Creative_Game_Mode;         // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_DeletePrefab) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_DeletePrefab");
static_assert(sizeof(B_CreativePlayerController_C_DeletePrefab) == 0x000068, "Wrong size on B_CreativePlayerController_C_DeletePrefab");
static_assert(offsetof(B_CreativePlayerController_C_DeletePrefab, PrefabToDelete) == 0x000000, "Member 'B_CreativePlayerController_C_DeletePrefab::PrefabToDelete' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeletePrefab, CallFunc_GetGameMode_ReturnValue) == 0x000040, "Member 'B_CreativePlayerController_C_DeletePrefab::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeletePrefab, K2Node_DynamicCast_AsB_Game_Mode) == 0x000048, "Member 'B_CreativePlayerController_C_DeletePrefab::K2Node_DynamicCast_AsB_Game_Mode' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeletePrefab, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'B_CreativePlayerController_C_DeletePrefab::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeletePrefab, K2Node_DynamicCast_AsB_Creative_Game_Mode) == 0x000058, "Member 'B_CreativePlayerController_C_DeletePrefab::K2Node_DynamicCast_AsB_Creative_Game_Mode' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeletePrefab, K2Node_DynamicCast_bSuccess_1) == 0x000060, "Member 'B_CreativePlayerController_C_DeletePrefab::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeletePrefab, CallFunc_Array_RemoveItem_ReturnValue) == 0x000061, "Member 'B_CreativePlayerController_C_DeletePrefab::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.DeselectMultiple
// 0x0038 (0x0038 - 0x0000)
struct B_CreativePlayerController_C_DeselectMultiple final
{
public:
	class AActor*                                 ActorToSave;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsNotEmpty_ReturnValue;             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAnchorActor_AnchorActor;               // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_DeselectMultiple) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_DeselectMultiple");
static_assert(sizeof(B_CreativePlayerController_C_DeselectMultiple) == 0x000038, "Wrong size on B_CreativePlayerController_C_DeselectMultiple");
static_assert(offsetof(B_CreativePlayerController_C_DeselectMultiple, ActorToSave) == 0x000000, "Member 'B_CreativePlayerController_C_DeselectMultiple::ActorToSave' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeselectMultiple, Temp_int_Array_Index_Variable) == 0x000008, "Member 'B_CreativePlayerController_C_DeselectMultiple::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeselectMultiple, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'B_CreativePlayerController_C_DeselectMultiple::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeselectMultiple, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'B_CreativePlayerController_C_DeselectMultiple::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeselectMultiple, CallFunc_Array_IsNotEmpty_ReturnValue) == 0x000014, "Member 'B_CreativePlayerController_C_DeselectMultiple::CallFunc_Array_IsNotEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeselectMultiple, CallFunc_GetAnchorActor_AnchorActor) == 0x000018, "Member 'B_CreativePlayerController_C_DeselectMultiple::CallFunc_GetAnchorActor_AnchorActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeselectMultiple, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'B_CreativePlayerController_C_DeselectMultiple::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeselectMultiple, CallFunc_Array_Get_Item) == 0x000028, "Member 'B_CreativePlayerController_C_DeselectMultiple::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeselectMultiple, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'B_CreativePlayerController_C_DeselectMultiple::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeselectMultiple, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000031, "Member 'B_CreativePlayerController_C_DeselectMultiple::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.DeselectMultipleActors
// 0x0050 (0x0050 - 0x0000)
struct B_CreativePlayerController_C_DeselectMultipleActors final
{
public:
	TArray<class AActor*>                         ActorsToDeselect;                                  // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class AActor*                                 ActorToSave;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsEmpty_ReturnValue;                // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsNotEmpty_ReturnValue;             // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAnchorActor_AnchorActor;               // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_DeselectMultipleActors) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_DeselectMultipleActors");
static_assert(sizeof(B_CreativePlayerController_C_DeselectMultipleActors) == 0x000050, "Wrong size on B_CreativePlayerController_C_DeselectMultipleActors");
static_assert(offsetof(B_CreativePlayerController_C_DeselectMultipleActors, ActorsToDeselect) == 0x000000, "Member 'B_CreativePlayerController_C_DeselectMultipleActors::ActorsToDeselect' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeselectMultipleActors, ActorToSave) == 0x000010, "Member 'B_CreativePlayerController_C_DeselectMultipleActors::ActorToSave' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeselectMultipleActors, Temp_int_Array_Index_Variable) == 0x000018, "Member 'B_CreativePlayerController_C_DeselectMultipleActors::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeselectMultipleActors, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'B_CreativePlayerController_C_DeselectMultipleActors::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeselectMultipleActors, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'B_CreativePlayerController_C_DeselectMultipleActors::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeselectMultipleActors, CallFunc_Array_IsEmpty_ReturnValue) == 0x000024, "Member 'B_CreativePlayerController_C_DeselectMultipleActors::CallFunc_Array_IsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeselectMultipleActors, CallFunc_Array_Get_Item) == 0x000028, "Member 'B_CreativePlayerController_C_DeselectMultipleActors::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeselectMultipleActors, CallFunc_Array_IsNotEmpty_ReturnValue) == 0x000030, "Member 'B_CreativePlayerController_C_DeselectMultipleActors::CallFunc_Array_IsNotEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeselectMultipleActors, CallFunc_Array_RemoveItem_ReturnValue) == 0x000031, "Member 'B_CreativePlayerController_C_DeselectMultipleActors::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeselectMultipleActors, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'B_CreativePlayerController_C_DeselectMultipleActors::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeselectMultipleActors, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'B_CreativePlayerController_C_DeselectMultipleActors::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeselectMultipleActors, CallFunc_GetAnchorActor_AnchorActor) == 0x000040, "Member 'B_CreativePlayerController_C_DeselectMultipleActors::CallFunc_GetAnchorActor_AnchorActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeselectMultipleActors, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000048, "Member 'B_CreativePlayerController_C_DeselectMultipleActors::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.DeselectSingleActor
// 0x0020 (0x0020 - 0x0000)
struct B_CreativePlayerController_C_DeselectSingleActor final
{
public:
	const class AActor*                           ActorToDeselect;                                   // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0008(0x0010)(ConstParm, ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_DeselectSingleActor) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_DeselectSingleActor");
static_assert(sizeof(B_CreativePlayerController_C_DeselectSingleActor) == 0x000020, "Wrong size on B_CreativePlayerController_C_DeselectSingleActor");
static_assert(offsetof(B_CreativePlayerController_C_DeselectSingleActor, ActorToDeselect) == 0x000000, "Member 'B_CreativePlayerController_C_DeselectSingleActor::ActorToDeselect' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeselectSingleActor, K2Node_MakeArray_Array) == 0x000008, "Member 'B_CreativePlayerController_C_DeselectSingleActor::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeselectSingleActor, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'B_CreativePlayerController_C_DeselectSingleActor::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeselectSingleActor, CallFunc_Greater_IntInt_ReturnValue) == 0x00001C, "Member 'B_CreativePlayerController_C_DeselectSingleActor::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DeselectSingleActor, CallFunc_Array_RemoveItem_ReturnValue) == 0x00001D, "Member 'B_CreativePlayerController_C_DeselectSingleActor::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.DetermineClampActorScale
// 0x00E0 (0x00E0 - 0x0000)
struct B_CreativePlayerController_C_DetermineClampActorScale final
{
public:
	class AActor*                                 ActorToCheck;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        InputScale;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ClampedScale;                                      // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinPlaceableActorScale;                            // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxPlaceableActorScale;                            // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlaceableActor_C*                   K2Node_DynamicCast_AsBP_Placeable_Actor;           // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_StaticMeshProp_C*                    K2Node_DynamicCast_AsB_Static_Mesh_Prop;           // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlaceableLight_C*                   K2Node_DynamicCast_AsBP_Placeable_Light;           // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetLocalBounds_Min;                       // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocalBounds_Max;                       // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue_1;                     // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue_2;                     // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue_3;                     // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_DetermineClampActorScale) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_DetermineClampActorScale");
static_assert(sizeof(B_CreativePlayerController_C_DetermineClampActorScale) == 0x0000E0, "Wrong size on B_CreativePlayerController_C_DetermineClampActorScale");
static_assert(offsetof(B_CreativePlayerController_C_DetermineClampActorScale, ActorToCheck) == 0x000000, "Member 'B_CreativePlayerController_C_DetermineClampActorScale::ActorToCheck' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineClampActorScale, InputScale) == 0x000008, "Member 'B_CreativePlayerController_C_DetermineClampActorScale::InputScale' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineClampActorScale, ClampedScale) == 0x000010, "Member 'B_CreativePlayerController_C_DetermineClampActorScale::ClampedScale' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineClampActorScale, MinPlaceableActorScale) == 0x000018, "Member 'B_CreativePlayerController_C_DetermineClampActorScale::MinPlaceableActorScale' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineClampActorScale, MaxPlaceableActorScale) == 0x000020, "Member 'B_CreativePlayerController_C_DetermineClampActorScale::MaxPlaceableActorScale' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineClampActorScale, K2Node_DynamicCast_AsBP_Placeable_Actor) == 0x000028, "Member 'B_CreativePlayerController_C_DetermineClampActorScale::K2Node_DynamicCast_AsBP_Placeable_Actor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineClampActorScale, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'B_CreativePlayerController_C_DetermineClampActorScale::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineClampActorScale, K2Node_DynamicCast_AsB_Static_Mesh_Prop) == 0x000038, "Member 'B_CreativePlayerController_C_DetermineClampActorScale::K2Node_DynamicCast_AsB_Static_Mesh_Prop' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineClampActorScale, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'B_CreativePlayerController_C_DetermineClampActorScale::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineClampActorScale, CallFunc_Not_PreBool_ReturnValue) == 0x000041, "Member 'B_CreativePlayerController_C_DetermineClampActorScale::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineClampActorScale, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000048, "Member 'B_CreativePlayerController_C_DetermineClampActorScale::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineClampActorScale, K2Node_DynamicCast_AsBP_Placeable_Light) == 0x000050, "Member 'B_CreativePlayerController_C_DetermineClampActorScale::K2Node_DynamicCast_AsBP_Placeable_Light' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineClampActorScale, K2Node_DynamicCast_bSuccess_2) == 0x000058, "Member 'B_CreativePlayerController_C_DetermineClampActorScale::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineClampActorScale, CallFunc_GetLocalBounds_Min) == 0x000060, "Member 'B_CreativePlayerController_C_DetermineClampActorScale::CallFunc_GetLocalBounds_Min' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineClampActorScale, CallFunc_GetLocalBounds_Max) == 0x000078, "Member 'B_CreativePlayerController_C_DetermineClampActorScale::CallFunc_GetLocalBounds_Max' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineClampActorScale, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000090, "Member 'B_CreativePlayerController_C_DetermineClampActorScale::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineClampActorScale, CallFunc_VSize_ReturnValue) == 0x0000A8, "Member 'B_CreativePlayerController_C_DetermineClampActorScale::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineClampActorScale, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x0000B0, "Member 'B_CreativePlayerController_C_DetermineClampActorScale::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineClampActorScale, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x0000B8, "Member 'B_CreativePlayerController_C_DetermineClampActorScale::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineClampActorScale, CallFunc_FClamp_ReturnValue) == 0x0000C0, "Member 'B_CreativePlayerController_C_DetermineClampActorScale::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineClampActorScale, CallFunc_FClamp_ReturnValue_1) == 0x0000C8, "Member 'B_CreativePlayerController_C_DetermineClampActorScale::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineClampActorScale, CallFunc_FClamp_ReturnValue_2) == 0x0000D0, "Member 'B_CreativePlayerController_C_DetermineClampActorScale::CallFunc_FClamp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineClampActorScale, CallFunc_FClamp_ReturnValue_3) == 0x0000D8, "Member 'B_CreativePlayerController_C_DetermineClampActorScale::CallFunc_FClamp_ReturnValue_3' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.DetermineTranslationByMousePosition
// 0x01B8 (0x01B8 - 0x0000)
struct B_CreativePlayerController_C_DetermineTranslationByMousePosition final
{
public:
	float                                         Length;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        NewActorY;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NewActorX;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TravelLength;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DirectionY;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DirectionX;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MouseY;                                            // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MouseX;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ActorY;                                            // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ActorX;                                            // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetAnchorActor_AnchorActor;               // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_2;           // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_4;      // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_5;      // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_3;           // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetAnchorActor_AnchorActor_1;             // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_ReturnValue;                   // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0100(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_ProjectWorldLocationToScreen_ScreenLocation; // 0x0118(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ProjectWorldLocationToScreen_ReturnValue; // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetMousePosition_LocationX;               // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMousePosition_LocationY;               // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetMousePosition_ReturnValue;             // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_135[0x3];                                      // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_B_ImplicitCast;     // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_DirectionX_ImplicitCast;        // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_DirectionY_ImplicitCast;        // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_B_ImplicitCast_1;   // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1;   // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_B_ImplicitCast_2;   // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast_2;   // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_B_ImplicitCast_3;   // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast_3;   // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_B_ImplicitCast_4;   // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_B_ImplicitCast_5;   // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_A_ImplicitCast;     // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_A_ImplicitCast_1;   // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_TravelLength_ImplicitCast;      // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_DetermineTranslationByMousePosition) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_DetermineTranslationByMousePosition");
static_assert(sizeof(B_CreativePlayerController_C_DetermineTranslationByMousePosition) == 0x0001B8, "Wrong size on B_CreativePlayerController_C_DetermineTranslationByMousePosition");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, Length) == 0x000000, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::Length' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, NewActorY) == 0x000008, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::NewActorY' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, NewActorX) == 0x000010, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::NewActorX' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, TravelLength) == 0x000018, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::TravelLength' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, DirectionY) == 0x00001C, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::DirectionY' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, DirectionX) == 0x000020, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::DirectionX' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, MouseY) == 0x000024, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::MouseY' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, MouseX) == 0x000028, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::MouseX' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, ActorY) == 0x000030, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::ActorY' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, ActorX) == 0x000038, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::ActorX' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, CallFunc_GetAnchorActor_AnchorActor) == 0x000040, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::CallFunc_GetAnchorActor_AnchorActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000048, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, CallFunc_GetForwardVector_ReturnValue) == 0x000060, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, CallFunc_BreakVector_X) == 0x000078, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, CallFunc_BreakVector_Y) == 0x000080, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, CallFunc_BreakVector_Z) == 0x000088, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000090, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000098, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x0000A0, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x0000A8, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x0000B0, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x0000B8, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, CallFunc_Add_DoubleDouble_ReturnValue_2) == 0x0000C0, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::CallFunc_Add_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x0000C8, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x0000D0, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, CallFunc_Multiply_DoubleDouble_ReturnValue_4) == 0x0000D8, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::CallFunc_Multiply_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, CallFunc_Multiply_DoubleDouble_ReturnValue_5) == 0x0000E0, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::CallFunc_Multiply_DoubleDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, CallFunc_Add_DoubleDouble_ReturnValue_3) == 0x0000E8, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::CallFunc_Add_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, CallFunc_GetAnchorActor_AnchorActor_1) == 0x0000F0, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::CallFunc_GetAnchorActor_AnchorActor_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, CallFunc_SafeDivide_ReturnValue) == 0x0000F8, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::CallFunc_SafeDivide_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000100, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, CallFunc_ProjectWorldLocationToScreen_ScreenLocation) == 0x000118, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::CallFunc_ProjectWorldLocationToScreen_ScreenLocation' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, CallFunc_ProjectWorldLocationToScreen_ReturnValue) == 0x000128, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::CallFunc_ProjectWorldLocationToScreen_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, CallFunc_GetMousePosition_LocationX) == 0x00012C, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::CallFunc_GetMousePosition_LocationX' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, CallFunc_GetMousePosition_LocationY) == 0x000130, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::CallFunc_GetMousePosition_LocationY' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, CallFunc_GetMousePosition_ReturnValue) == 0x000134, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::CallFunc_GetMousePosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, CallFunc_BreakVector2D_X) == 0x000138, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, CallFunc_BreakVector2D_Y) == 0x000140, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, CallFunc_Multiply_DoubleDouble_B_ImplicitCast) == 0x000148, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::CallFunc_Multiply_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, K2Node_VariableSet_DirectionX_ImplicitCast) == 0x000150, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::K2Node_VariableSet_DirectionX_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, K2Node_VariableSet_DirectionY_ImplicitCast) == 0x000154, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::K2Node_VariableSet_DirectionY_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x000158, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, CallFunc_Multiply_DoubleDouble_B_ImplicitCast_1) == 0x000160, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::CallFunc_Multiply_DoubleDouble_B_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1) == 0x000168, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, CallFunc_Multiply_DoubleDouble_B_ImplicitCast_2) == 0x000170, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::CallFunc_Multiply_DoubleDouble_B_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, CallFunc_Multiply_DoubleDouble_A_ImplicitCast_2) == 0x000178, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::CallFunc_Multiply_DoubleDouble_A_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, CallFunc_Multiply_DoubleDouble_B_ImplicitCast_3) == 0x000180, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::CallFunc_Multiply_DoubleDouble_B_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, CallFunc_Multiply_DoubleDouble_A_ImplicitCast_3) == 0x000188, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::CallFunc_Multiply_DoubleDouble_A_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, CallFunc_Multiply_DoubleDouble_B_ImplicitCast_4) == 0x000190, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::CallFunc_Multiply_DoubleDouble_B_ImplicitCast_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, CallFunc_Multiply_DoubleDouble_B_ImplicitCast_5) == 0x000198, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::CallFunc_Multiply_DoubleDouble_B_ImplicitCast_5' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, CallFunc_Subtract_DoubleDouble_A_ImplicitCast) == 0x0001A0, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::CallFunc_Subtract_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, CallFunc_Subtract_DoubleDouble_A_ImplicitCast_1) == 0x0001A8, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::CallFunc_Subtract_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DetermineTranslationByMousePosition, K2Node_VariableSet_TravelLength_ImplicitCast) == 0x0001B0, "Member 'B_CreativePlayerController_C_DetermineTranslationByMousePosition::K2Node_VariableSet_TravelLength_ImplicitCast' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.DuplicateMultipleServer
// 0x0018 (0x0018 - 0x0000)
struct B_CreativePlayerController_C_DuplicateMultipleServer final
{
public:
	TArray<class AActor*>                         ActorsToDuplicate;                                 // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Drag;                                              // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_DuplicateMultipleServer) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_DuplicateMultipleServer");
static_assert(sizeof(B_CreativePlayerController_C_DuplicateMultipleServer) == 0x000018, "Wrong size on B_CreativePlayerController_C_DuplicateMultipleServer");
static_assert(offsetof(B_CreativePlayerController_C_DuplicateMultipleServer, ActorsToDuplicate) == 0x000000, "Member 'B_CreativePlayerController_C_DuplicateMultipleServer::ActorsToDuplicate' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_DuplicateMultipleServer, Drag) == 0x000010, "Member 'B_CreativePlayerController_C_DuplicateMultipleServer::Drag' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.DuplicateSelected
// 0x0001 (0x0001 - 0x0000)
struct B_CreativePlayerController_C_DuplicateSelected final
{
public:
	bool                                          Drag;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_DuplicateSelected) == 0x000001, "Wrong alignment on B_CreativePlayerController_C_DuplicateSelected");
static_assert(sizeof(B_CreativePlayerController_C_DuplicateSelected) == 0x000001, "Wrong size on B_CreativePlayerController_C_DuplicateSelected");
static_assert(offsetof(B_CreativePlayerController_C_DuplicateSelected, Drag) == 0x000000, "Member 'B_CreativePlayerController_C_DuplicateSelected::Drag' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.EndTakingScreenShot
// 0x0048 (0x0048 - 0x0000)
struct B_CreativePlayerController_C_EndTakingScreenShot final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_1;            // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_1;            // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_CreativeHUD_C*                      K2Node_DynamicCast_AsWB_Creative_HUD;              // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_EndTakingScreenShot) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_EndTakingScreenShot");
static_assert(sizeof(B_CreativePlayerController_C_EndTakingScreenShot) == 0x000048, "Wrong size on B_CreativePlayerController_C_EndTakingScreenShot");
static_assert(offsetof(B_CreativePlayerController_C_EndTakingScreenShot, Success) == 0x000000, "Member 'B_CreativePlayerController_C_EndTakingScreenShot::Success' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_EndTakingScreenShot, CallFunc_GetGameInstance_ReturnValue) == 0x000008, "Member 'B_CreativePlayerController_C_EndTakingScreenShot::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_EndTakingScreenShot, CallFunc_GetGameInstance_ReturnValue_1) == 0x000010, "Member 'B_CreativePlayerController_C_EndTakingScreenShot::CallFunc_GetGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_EndTakingScreenShot, K2Node_DynamicCast_AsB_Game_Instance) == 0x000018, "Member 'B_CreativePlayerController_C_EndTakingScreenShot::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_EndTakingScreenShot, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'B_CreativePlayerController_C_EndTakingScreenShot::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_EndTakingScreenShot, K2Node_DynamicCast_AsB_Game_Instance_1) == 0x000028, "Member 'B_CreativePlayerController_C_EndTakingScreenShot::K2Node_DynamicCast_AsB_Game_Instance_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_EndTakingScreenShot, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'B_CreativePlayerController_C_EndTakingScreenShot::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_EndTakingScreenShot, K2Node_DynamicCast_AsWB_Creative_HUD) == 0x000038, "Member 'B_CreativePlayerController_C_EndTakingScreenShot::K2Node_DynamicCast_AsWB_Creative_HUD' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_EndTakingScreenShot, K2Node_DynamicCast_bSuccess_2) == 0x000040, "Member 'B_CreativePlayerController_C_EndTakingScreenShot::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_EndTakingScreenShot, CallFunc_BooleanAND_ReturnValue) == 0x000041, "Member 'B_CreativePlayerController_C_EndTakingScreenShot::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_EndTakingScreenShot, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000042, "Member 'B_CreativePlayerController_C_EndTakingScreenShot::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.ExecuteUbergraph_B_CreativePlayerController
// 0x0970 (0x0970 - 0x0000)
struct B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key;                          // 0x0010(0x0018)(HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputKeyEvent_Key_1;                        // 0x0038(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key_2;                        // 0x0050(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key_3;                        // 0x0068(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key_4;                        // 0x0080(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key_5;                        // 0x0098(0x0018)(HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_1;            // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key_6;                        // 0x00B8(0x0018)(HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_1;            // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputKeyEvent_Key_7;                        // 0x00E0(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen;        // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_1;      // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x00FB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_2;      // 0x00FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_3;      // 0x00FD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x00FE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x00FF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_Location_1;                     // 0x0100(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      CallFunc_SpawnSystemAtLocation_ReturnValue;        // 0x0120(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12A[0x6];                                      // 0x012A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_CustomEvent_ActorsToDelete;                 // 0x0130(0x0010)(ConstParm, ReferenceParm)
	struct FKey                                   K2Node_InputKeyEvent_Key_8;                        // 0x0140(0x0018)(HasGetValueTypeHash)
	class ABP_Switch_C*                           K2Node_CustomEvent_Switch_2;                       // 0x0158(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_BreaksAfterUse_1;               // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_CustomEvent_Location;                       // 0x0168(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class AActor*                           K2Node_CustomEvent_PlacedActor;                    // 0x0180(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key_9;                        // 0x0188(0x0018)(HasGetValueTypeHash)
	class UClass*                                 K2Node_CustomEvent_ActorClass;                     // 0x01A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A8[0x8];                                      // 0x01A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             K2Node_CustomEvent_SpawnTransform;                 // 0x01B0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_HasPrefabInfo;                  // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Activated_1;                    // 0x0211(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_StartAwake_1;                   // 0x0212(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IsFreezed;                      // 0x0213(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_BreaksAfterUse;                 // 0x0214(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_215[0x3];                                      // 0x0215(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_CustomEvent_Color_1;                        // 0x0218(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETeamID                                       K2Node_CustomEvent_Team;                           // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_231[0x7];                                      // 0x0231(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsBP_Placeable_Static_Prop; // 0x0238(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess;                  // 0x0240(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_241[0x7];                                      // 0x0241(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key;                       // 0x0248(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key_10;                       // 0x0260(0x0018)(HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_CustomEvent_ToUnselect;                     // 0x0278(0x0010)(ConstParm, ReferenceParm)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0288(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0290(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_294[0x4];                                      // 0x0294(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_CreativeGameState_C*                 K2Node_DynamicCast_AsB_Creative_Game_State;        // 0x0298(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x02A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A1[0x7];                                      // 0x02A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_1;               // 0x02A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key_11;                       // 0x02B0(0x0018)(HasGetValueTypeHash)
	class AB_CreativeGameState_C*                 K2Node_DynamicCast_AsB_Creative_Game_State_1;      // 0x02C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x02D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D1[0x7];                                      // 0x02D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class AActor*                           K2Node_CustomEvent_SelectedActor;                  // 0x02D8(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             K2Node_CustomEvent_Transform;                      // 0x02E0(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class AActor*                           K2Node_CustomEvent_ActorToAdd;                     // 0x0340(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	const class ABP_Switch_C*                     K2Node_CustomEvent_Switch_1;                       // 0x0348(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_CustomEvent_OldTargetList_1;                // 0x0350(0x0010)(ConstParm, ReferenceParm)
	class AActor*                                 K2Node_CustomEvent_ActorToRemove;                  // 0x0360(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	const class ABP_Switch_C*                     K2Node_CustomEvent_Switch;                         // 0x0368(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_CustomEvent_OldTargetList;                  // 0x0370(0x0010)(ConstParm, ReferenceParm)
	struct FKey                                   K2Node_InputKeyEvent_Key_12;                       // 0x0380(0x0018)(HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_CustomEvent_ActorsToSelect;                 // 0x0398(0x0010)(ConstParm, ReferenceParm)
	bool                                          K2Node_CustomEvent_Drag_1;                         // 0x03A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A9[0x7];                                      // 0x03A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_2;               // 0x03B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_CreativeGameState_C*                 K2Node_DynamicCast_AsB_Creative_Game_State_2;      // 0x03B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x03C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C1[0x7];                                      // 0x03C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_2;            // 0x03C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_2;            // 0x03D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x03D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x03D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DA[0x6];                                      // 0x03DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputKeyEvent_Key_13;                       // 0x03E0(0x0018)(HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_CustomEvent_ActorsToDuplicate;              // 0x03F8(0x0010)(ConstParm, ReferenceParm)
	bool                                          K2Node_CustomEvent_Drag;                           // 0x0408(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_409[0x7];                                      // 0x0409(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlaceableLight_C*                   K2Node_CustomEvent_PlaceableLight;                 // 0x0410(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_CustomEvent_ChangeValue;                    // 0x0418(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_ActorToEdit;                    // 0x0420(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable;                              // 0x0428(0x0018)(HasGetValueTypeHash)
	struct FPrefabToSave                          K2Node_CustomEvent_PrefabToAdd;                    // 0x0440(0x0040)(ConstParm)
	struct FKey                                   K2Node_InputKeyEvent_Key_14;                       // 0x0480(0x0018)(HasGetValueTypeHash)
	class ABP_PlaceableStaticProp_C*              K2Node_CustomEvent_TargetStructure;                // 0x0498(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_BasePlaceableMaterialOverwrite_C*    K2Node_CustomEvent_MaterialOverwrite;              // 0x04A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     K2Node_CustomEvent_NewMaterial;                    // 0x04A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_Index;                          // 0x04B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B4[0x4];                                      // 0x04B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_3;            // 0x04B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_3;            // 0x04C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x04C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C9[0x7];                                      // 0x04C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputKeyEvent_Key_15;                       // 0x04D0(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_4;      // 0x04E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_5;      // 0x04E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_5;                // 0x04EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_6;                // 0x04EB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_6;      // 0x04EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_7;      // 0x04ED(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_7;                // 0x04EE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_8;                // 0x04EF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x04F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F1[0x7];                                      // 0x04F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   Temp_struct_Variable_1;                            // 0x04F8(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x0510(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x0511(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_512[0x6];                                      // 0x0512(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_Actor;                          // 0x0518(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Activated;                      // 0x0520(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_521[0x7];                                      // 0x0521(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_StaticMeshProp_C*                    K2Node_CustomEvent_TargetProp_1;                   // 0x0528(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Freeze;                         // 0x0530(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_531[0x7];                                      // 0x0531(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_StaticMeshProp_C*                    K2Node_CustomEvent_TargetProp;                     // 0x0538(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_StartAwake;                     // 0x0540(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_541[0x7];                                      // 0x0541(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_CustomEvent_Color;                          // 0x0548(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlaceableLight_C*                   K2Node_CustomEvent_TargetLight;                    // 0x0560(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key_16;                       // 0x0568(0x0018)(HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_CustomEvent_Actors;                         // 0x0580(0x0010)(ConstParm, ReferenceParm)
	int32                                         K2Node_CustomEvent_Number;                         // 0x0590(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_594[0x4];                                      // 0x0594(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_SelectedActors                      K2Node_MakeStruct_S_SelectedActors;                // 0x0598(0x0010)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key_17;                       // 0x05A8(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_IsConsoleBuild_ReturnValue;               // 0x05C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C1[0x7];                                      // 0x05C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key_1;                     // 0x05C8(0x0018)(HasGetValueTypeHash)
	float                                         K2Node_InputAxisKeyEvent_AxisValue;                // 0x05E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue_1;                 // 0x05E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue;                   // 0x05E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5EC[0x4];                                      // 0x05EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key_2;                     // 0x05F0(0x0018)(HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0608(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_60C[0x4];                                      // 0x060C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0610(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_618[0x8];                                      // 0x0618(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0620(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_2;                            // 0x0680(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_3;                     // 0x0698(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_4;                     // 0x06B0(0x0018)(HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x06C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x06CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6CD[0x3];                                      // 0x06CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x06D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D4[0x4];                                      // 0x06D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   Temp_struct_Variable_3;                            // 0x06D8(0x0018)(HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_4;            // 0x06F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x06F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F9[0x7];                                      // 0x06F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_4;            // 0x0700(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_7;                     // 0x0708(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_709[0x7];                                      // 0x0709(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key_5;                     // 0x0710(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_6;                     // 0x0728(0x0018)(HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_5;            // 0x0740(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_5;            // 0x0748(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_8;                     // 0x0750(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_751[0x7];                                      // 0x0751(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_6;            // 0x0758(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_6;            // 0x0760(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_9;                     // 0x0768(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_8;      // 0x0769(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_9;      // 0x076A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_10;     // 0x076B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_9;                // 0x076C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_10;               // 0x076D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_11;     // 0x076E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_12;     // 0x076F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_11;               // 0x0770(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_12;               // 0x0771(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_772[0x6];                                      // 0x0772(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key_7;                     // 0x0778(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_6;                 // 0x0790(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_791[0x7];                                      // 0x0791(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key_8;                     // 0x0798(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_7;                 // 0x07B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B1[0x7];                                      // 0x07B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputKeyEvent_Key_18;                       // 0x07B8(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_8;                 // 0x07D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D1[0x7];                                      // 0x07D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   Temp_struct_Variable_4;                            // 0x07D8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_9;                     // 0x07F0(0x0018)(HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_7;            // 0x0808(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_7;            // 0x0810(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_10;                    // 0x0818(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0819(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_13;               // 0x081A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_13;     // 0x081B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_14;     // 0x081C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_14;               // 0x081D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_15;               // 0x081E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_15;     // 0x081F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_16;     // 0x0820(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_16;               // 0x0821(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_17;               // 0x0822(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_9;                 // 0x0823(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_10;                // 0x0824(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_11;                // 0x0825(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_826[0x2];                                      // 0x0826(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_8;            // 0x0828(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_18;               // 0x0830(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_831[0x7];                                      // 0x0831(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_8;            // 0x0838(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_11;                    // 0x0840(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_12;                // 0x0841(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_842[0x6];                                      // 0x0842(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_CreativeHUD_C*                      K2Node_DynamicCast_AsWB_Creative_HUD;              // 0x0848(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_12;                    // 0x0850(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_851[0x7];                                      // 0x0851(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0858(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_CreativeSpectator_C*                 K2Node_DynamicCast_AsB_Creative_Spectator;         // 0x0860(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_13;                    // 0x0868(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_869[0x7];                                      // 0x0869(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key_10;                    // 0x0870(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key_19;                       // 0x0888(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_5;                            // 0x08A0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key_20;                       // 0x08B8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key_21;                       // 0x08D0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key_22;                       // 0x08E8(0x0018)(HasGetValueTypeHash)
	TArray<uint8>                                 Temp_byte_Variable;                                // 0x0900(0x0010)(ReferenceParm)
	TArray<uint8>                                 Temp_byte_Variable_1;                              // 0x0910(0x0010)(ReferenceParm)
	class AActor*                                 CallFunc_PlaceActor_NewPlacedActor;                // 0x0920(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_PlaceActor_NewPlacedActor_1;              // 0x0928(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_ActionActorSubsystem_C*              CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x0930(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0938(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_93C[0x4];                                      // 0x093C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UEditableTextBox*                       CallFunc_TryGetFocusedTransformInputField_FocusedField; // 0x0940(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0948(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocalPlayerController_ReturnValue;      // 0x0949(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasSelectedSomething_HasSelectedActor;    // 0x094A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_13;                // 0x094B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlacing_IsPlacing;                      // 0x094C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94D[0x3];                                      // 0x094D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Handle_Mouse_Wheel_Axis_Axis_ImplicitCast; // 0x0950(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_TickModifyingProp_Horizontal_ImplicitCast; // 0x0958(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_TickModifyingProp_Vertical_ImplicitCast;  // 0x0960(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController) == 0x000010, "Wrong alignment on B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController");
static_assert(sizeof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController) == 0x000970, "Wrong size on B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, EntryPoint) == 0x000000, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::EntryPoint' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_GetGameInstance_ReturnValue) == 0x000008, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_InputKeyEvent_Key) == 0x000010, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_InputKeyEvent_Key' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_DynamicCast_AsB_Game_Instance) == 0x000028, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_InputKeyEvent_Key_1) == 0x000038, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_InputKeyEvent_Key_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_InputKeyEvent_Key_2) == 0x000050, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_InputKeyEvent_Key_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_InputKeyEvent_Key_3) == 0x000068, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_InputKeyEvent_Key_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_InputKeyEvent_Key_4) == 0x000080, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_InputKeyEvent_Key_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_InputKeyEvent_Key_5) == 0x000098, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_InputKeyEvent_Key_5' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_GetGameInstance_ReturnValue_1) == 0x0000B0, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_GetGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_InputKeyEvent_Key_6) == 0x0000B8, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_InputKeyEvent_Key_6' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_DynamicCast_AsB_Game_Instance_1) == 0x0000D0, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_DynamicCast_AsB_Game_Instance_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_DynamicCast_bSuccess_1) == 0x0000D8, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_InputKeyEvent_Key_7) == 0x0000E0, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_InputKeyEvent_Key_7' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen) == 0x0000F8, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_1) == 0x0000F9, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_Not_PreBool_ReturnValue) == 0x0000FA, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_Not_PreBool_ReturnValue_1) == 0x0000FB, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_2) == 0x0000FC, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_3) == 0x0000FD, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_Not_PreBool_ReturnValue_2) == 0x0000FE, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_Not_PreBool_ReturnValue_3) == 0x0000FF, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_CustomEvent_Location_1) == 0x000100, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_CustomEvent_Location_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_BooleanAND_ReturnValue) == 0x000118, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_SpawnSystemAtLocation_ReturnValue) == 0x000120, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_SpawnSystemAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_BooleanAND_ReturnValue_1) == 0x000128, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_BooleanAND_ReturnValue_2) == 0x000129, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_CustomEvent_ActorsToDelete) == 0x000130, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_CustomEvent_ActorsToDelete' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_InputKeyEvent_Key_8) == 0x000140, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_InputKeyEvent_Key_8' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_CustomEvent_Switch_2) == 0x000158, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_CustomEvent_Switch_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_CustomEvent_BreaksAfterUse_1) == 0x000160, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_CustomEvent_BreaksAfterUse_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_CustomEvent_Location) == 0x000168, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_CustomEvent_Location' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_CustomEvent_PlacedActor) == 0x000180, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_CustomEvent_PlacedActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_InputKeyEvent_Key_9) == 0x000188, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_InputKeyEvent_Key_9' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_CustomEvent_ActorClass) == 0x0001A0, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_CustomEvent_ActorClass' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_CustomEvent_SpawnTransform) == 0x0001B0, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_CustomEvent_SpawnTransform' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_CustomEvent_HasPrefabInfo) == 0x000210, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_CustomEvent_HasPrefabInfo' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_CustomEvent_Activated_1) == 0x000211, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_CustomEvent_Activated_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_CustomEvent_StartAwake_1) == 0x000212, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_CustomEvent_StartAwake_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_CustomEvent_IsFreezed) == 0x000213, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_CustomEvent_IsFreezed' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_CustomEvent_BreaksAfterUse) == 0x000214, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_CustomEvent_BreaksAfterUse' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_CustomEvent_Color_1) == 0x000218, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_CustomEvent_Color_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_CustomEvent_Team) == 0x000230, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_CustomEvent_Team' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_ClassDynamicCast_AsBP_Placeable_Static_Prop) == 0x000238, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_ClassDynamicCast_AsBP_Placeable_Static_Prop' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_ClassDynamicCast_bSuccess) == 0x000240, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_ClassDynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_InputActionEvent_Key) == 0x000248, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_InputActionEvent_Key' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_InputKeyEvent_Key_10) == 0x000260, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_InputKeyEvent_Key_10' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_CustomEvent_ToUnselect) == 0x000278, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_CustomEvent_ToUnselect' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_GetGameState_ReturnValue) == 0x000288, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_Array_Length_ReturnValue) == 0x000290, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_DynamicCast_AsB_Creative_Game_State) == 0x000298, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_DynamicCast_AsB_Creative_Game_State' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_DynamicCast_bSuccess_2) == 0x0002A0, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_GetGameState_ReturnValue_1) == 0x0002A8, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_GetGameState_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_InputKeyEvent_Key_11) == 0x0002B0, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_InputKeyEvent_Key_11' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_DynamicCast_AsB_Creative_Game_State_1) == 0x0002C8, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_DynamicCast_AsB_Creative_Game_State_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_DynamicCast_bSuccess_3) == 0x0002D0, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_CustomEvent_SelectedActor) == 0x0002D8, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_CustomEvent_SelectedActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_CustomEvent_Transform) == 0x0002E0, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_CustomEvent_Transform' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_CustomEvent_ActorToAdd) == 0x000340, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_CustomEvent_ActorToAdd' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_CustomEvent_Switch_1) == 0x000348, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_CustomEvent_Switch_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_CustomEvent_OldTargetList_1) == 0x000350, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_CustomEvent_OldTargetList_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_CustomEvent_ActorToRemove) == 0x000360, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_CustomEvent_ActorToRemove' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_CustomEvent_Switch) == 0x000368, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_CustomEvent_Switch' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_CustomEvent_OldTargetList) == 0x000370, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_CustomEvent_OldTargetList' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_InputKeyEvent_Key_12) == 0x000380, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_InputKeyEvent_Key_12' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_CustomEvent_ActorsToSelect) == 0x000398, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_CustomEvent_ActorsToSelect' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_CustomEvent_Drag_1) == 0x0003A8, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_CustomEvent_Drag_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_GetGameState_ReturnValue_2) == 0x0003B0, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_GetGameState_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_DynamicCast_AsB_Creative_Game_State_2) == 0x0003B8, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_DynamicCast_AsB_Creative_Game_State_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_DynamicCast_bSuccess_4) == 0x0003C0, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_GetGameInstance_ReturnValue_2) == 0x0003C8, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_GetGameInstance_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_DynamicCast_AsB_Game_Instance_2) == 0x0003D0, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_DynamicCast_AsB_Game_Instance_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_DynamicCast_bSuccess_5) == 0x0003D8, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_Not_PreBool_ReturnValue_4) == 0x0003D9, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_InputKeyEvent_Key_13) == 0x0003E0, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_InputKeyEvent_Key_13' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_CustomEvent_ActorsToDuplicate) == 0x0003F8, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_CustomEvent_ActorsToDuplicate' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_CustomEvent_Drag) == 0x000408, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_CustomEvent_Drag' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_CustomEvent_PlaceableLight) == 0x000410, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_CustomEvent_PlaceableLight' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_CustomEvent_ChangeValue) == 0x000418, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_CustomEvent_ChangeValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_CustomEvent_ActorToEdit) == 0x000420, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_CustomEvent_ActorToEdit' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, Temp_struct_Variable) == 0x000428, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_CustomEvent_PrefabToAdd) == 0x000440, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_CustomEvent_PrefabToAdd' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_InputKeyEvent_Key_14) == 0x000480, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_InputKeyEvent_Key_14' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_CustomEvent_TargetStructure) == 0x000498, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_CustomEvent_TargetStructure' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_CustomEvent_MaterialOverwrite) == 0x0004A0, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_CustomEvent_MaterialOverwrite' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_CustomEvent_NewMaterial) == 0x0004A8, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_CustomEvent_NewMaterial' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_CustomEvent_Index) == 0x0004B0, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_CustomEvent_Index' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_GetGameInstance_ReturnValue_3) == 0x0004B8, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_GetGameInstance_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_DynamicCast_AsB_Game_Instance_3) == 0x0004C0, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_DynamicCast_AsB_Game_Instance_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_DynamicCast_bSuccess_6) == 0x0004C8, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_InputKeyEvent_Key_15) == 0x0004D0, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_InputKeyEvent_Key_15' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_4) == 0x0004E8, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_5) == 0x0004E9, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_5' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_Not_PreBool_ReturnValue_5) == 0x0004EA, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_Not_PreBool_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_Not_PreBool_ReturnValue_6) == 0x0004EB, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_Not_PreBool_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_6) == 0x0004EC, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_6' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_7) == 0x0004ED, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_7' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_Not_PreBool_ReturnValue_7) == 0x0004EE, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_Not_PreBool_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_Not_PreBool_ReturnValue_8) == 0x0004EF, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_Not_PreBool_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_BooleanAND_ReturnValue_3) == 0x0004F0, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, Temp_struct_Variable_1) == 0x0004F8, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_BooleanAND_ReturnValue_4) == 0x000510, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_BooleanAND_ReturnValue_5) == 0x000511, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_CustomEvent_Actor) == 0x000518, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_CustomEvent_Actor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_CustomEvent_Activated) == 0x000520, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_CustomEvent_Activated' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_CustomEvent_TargetProp_1) == 0x000528, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_CustomEvent_TargetProp_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_CustomEvent_Freeze) == 0x000530, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_CustomEvent_Freeze' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_CustomEvent_TargetProp) == 0x000538, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_CustomEvent_TargetProp' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_CustomEvent_StartAwake) == 0x000540, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_CustomEvent_StartAwake' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_CustomEvent_Color) == 0x000548, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_CustomEvent_Color' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_CustomEvent_TargetLight) == 0x000560, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_CustomEvent_TargetLight' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_InputKeyEvent_Key_16) == 0x000568, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_InputKeyEvent_Key_16' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_CustomEvent_Actors) == 0x000580, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_CustomEvent_Actors' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_CustomEvent_Number) == 0x000590, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_CustomEvent_Number' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_MakeStruct_S_SelectedActors) == 0x000598, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_MakeStruct_S_SelectedActors' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_InputKeyEvent_Key_17) == 0x0005A8, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_InputKeyEvent_Key_17' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_IsConsoleBuild_ReturnValue) == 0x0005C0, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_IsConsoleBuild_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_InputActionEvent_Key_1) == 0x0005C8, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_InputActionEvent_Key_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_InputAxisKeyEvent_AxisValue) == 0x0005E0, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_InputAxisKeyEvent_AxisValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_InputAxisEvent_AxisValue_1) == 0x0005E4, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_InputAxisEvent_AxisValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_InputAxisEvent_AxisValue) == 0x0005E8, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_InputAxisEvent_AxisValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_InputActionEvent_Key_2) == 0x0005F0, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_InputActionEvent_Key_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, Temp_int_Array_Index_Variable) == 0x000608, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_Array_Get_Item) == 0x000610, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_GetTransform_ReturnValue) == 0x000620, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, Temp_struct_Variable_2) == 0x000680, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_InputActionEvent_Key_3) == 0x000698, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_InputActionEvent_Key_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_InputActionEvent_Key_4) == 0x0006B0, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_InputActionEvent_Key_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, Temp_int_Loop_Counter_Variable) == 0x0006C8, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_Less_IntInt_ReturnValue) == 0x0006CC, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_Add_IntInt_ReturnValue) == 0x0006D0, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, Temp_struct_Variable_3) == 0x0006D8, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_GetGameInstance_ReturnValue_4) == 0x0006F0, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_GetGameInstance_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_SwitchEnum_CmpSuccess) == 0x0006F8, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_DynamicCast_AsB_Game_Instance_4) == 0x000700, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_DynamicCast_AsB_Game_Instance_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_DynamicCast_bSuccess_7) == 0x000708, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_DynamicCast_bSuccess_7' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_InputActionEvent_Key_5) == 0x000710, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_InputActionEvent_Key_5' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_InputActionEvent_Key_6) == 0x000728, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_InputActionEvent_Key_6' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_GetGameInstance_ReturnValue_5) == 0x000740, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_GetGameInstance_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_DynamicCast_AsB_Game_Instance_5) == 0x000748, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_DynamicCast_AsB_Game_Instance_5' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_DynamicCast_bSuccess_8) == 0x000750, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_DynamicCast_bSuccess_8' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_GetGameInstance_ReturnValue_6) == 0x000758, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_GetGameInstance_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_DynamicCast_AsB_Game_Instance_6) == 0x000760, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_DynamicCast_AsB_Game_Instance_6' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_DynamicCast_bSuccess_9) == 0x000768, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_DynamicCast_bSuccess_9' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_8) == 0x000769, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_8' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_9) == 0x00076A, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_9' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_10) == 0x00076B, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_10' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_Not_PreBool_ReturnValue_9) == 0x00076C, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_Not_PreBool_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_Not_PreBool_ReturnValue_10) == 0x00076D, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_Not_PreBool_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_11) == 0x00076E, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_11' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_12) == 0x00076F, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_12' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_Not_PreBool_ReturnValue_11) == 0x000770, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_Not_PreBool_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_Not_PreBool_ReturnValue_12) == 0x000771, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_Not_PreBool_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_InputActionEvent_Key_7) == 0x000778, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_InputActionEvent_Key_7' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_BooleanAND_ReturnValue_6) == 0x000790, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_BooleanAND_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_InputActionEvent_Key_8) == 0x000798, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_InputActionEvent_Key_8' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_BooleanAND_ReturnValue_7) == 0x0007B0, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_BooleanAND_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_InputKeyEvent_Key_18) == 0x0007B8, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_InputKeyEvent_Key_18' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_BooleanAND_ReturnValue_8) == 0x0007D0, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_BooleanAND_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, Temp_struct_Variable_4) == 0x0007D8, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_InputActionEvent_Key_9) == 0x0007F0, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_InputActionEvent_Key_9' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_GetGameInstance_ReturnValue_7) == 0x000808, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_GetGameInstance_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_DynamicCast_AsB_Game_Instance_7) == 0x000810, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_DynamicCast_AsB_Game_Instance_7' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_DynamicCast_bSuccess_10) == 0x000818, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_DynamicCast_bSuccess_10' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000819, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_Not_PreBool_ReturnValue_13) == 0x00081A, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_Not_PreBool_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_13) == 0x00081B, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_13' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_14) == 0x00081C, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_14' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_Not_PreBool_ReturnValue_14) == 0x00081D, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_Not_PreBool_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_Not_PreBool_ReturnValue_15) == 0x00081E, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_Not_PreBool_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_15) == 0x00081F, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_15' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_16) == 0x000820, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_16' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_Not_PreBool_ReturnValue_16) == 0x000821, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_Not_PreBool_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_Not_PreBool_ReturnValue_17) == 0x000822, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_Not_PreBool_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_BooleanAND_ReturnValue_9) == 0x000823, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_BooleanAND_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_BooleanAND_ReturnValue_10) == 0x000824, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_BooleanAND_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_BooleanAND_ReturnValue_11) == 0x000825, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_BooleanAND_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_GetGameInstance_ReturnValue_8) == 0x000828, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_GetGameInstance_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_Not_PreBool_ReturnValue_18) == 0x000830, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_Not_PreBool_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_DynamicCast_AsB_Game_Instance_8) == 0x000838, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_DynamicCast_AsB_Game_Instance_8' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_DynamicCast_bSuccess_11) == 0x000840, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_DynamicCast_bSuccess_11' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_BooleanAND_ReturnValue_12) == 0x000841, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_BooleanAND_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_DynamicCast_AsWB_Creative_HUD) == 0x000848, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_DynamicCast_AsWB_Creative_HUD' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_DynamicCast_bSuccess_12) == 0x000850, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_DynamicCast_bSuccess_12' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_K2_GetPawn_ReturnValue) == 0x000858, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_DynamicCast_AsB_Creative_Spectator) == 0x000860, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_DynamicCast_AsB_Creative_Spectator' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_DynamicCast_bSuccess_13) == 0x000868, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_DynamicCast_bSuccess_13' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_InputActionEvent_Key_10) == 0x000870, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_InputActionEvent_Key_10' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_InputKeyEvent_Key_19) == 0x000888, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_InputKeyEvent_Key_19' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, Temp_struct_Variable_5) == 0x0008A0, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_InputKeyEvent_Key_20) == 0x0008B8, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_InputKeyEvent_Key_20' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_InputKeyEvent_Key_21) == 0x0008D0, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_InputKeyEvent_Key_21' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_InputKeyEvent_Key_22) == 0x0008E8, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_InputKeyEvent_Key_22' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, Temp_byte_Variable) == 0x000900, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, Temp_byte_Variable_1) == 0x000910, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_PlaceActor_NewPlacedActor) == 0x000920, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_PlaceActor_NewPlacedActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_PlaceActor_NewPlacedActor_1) == 0x000928, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_PlaceActor_NewPlacedActor_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x000930, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, K2Node_Event_DeltaSeconds) == 0x000938, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_TryGetFocusedTransformInputField_FocusedField) == 0x000940, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_TryGetFocusedTransformInputField_FocusedField' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_IsValid_ReturnValue) == 0x000948, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_IsLocalPlayerController_ReturnValue) == 0x000949, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_IsLocalPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_HasSelectedSomething_HasSelectedActor) == 0x00094A, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_HasSelectedSomething_HasSelectedActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_BooleanAND_ReturnValue_13) == 0x00094B, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_BooleanAND_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_IsPlacing_IsPlacing) == 0x00094C, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_IsPlacing_IsPlacing' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_Handle_Mouse_Wheel_Axis_Axis_ImplicitCast) == 0x000950, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_Handle_Mouse_Wheel_Axis_Axis_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_TickModifyingProp_Horizontal_ImplicitCast) == 0x000958, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_TickModifyingProp_Horizontal_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController, CallFunc_TickModifyingProp_Vertical_ImplicitCast) == 0x000960, "Member 'B_CreativePlayerController_C_ExecuteUbergraph_B_CreativePlayerController::CallFunc_TickModifyingProp_Vertical_ImplicitCast' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.FireSelectActor
// 0x00D8 (0x00D8 - 0x0000)
struct B_CreativePlayerController_C_FireSelectActor final
{
public:
	int32                                         ModifyingAxisNumber;                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 HitActor;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	E_Axis                                        ModifyingAxis;                                     // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen;        // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlaceableStaticProp_C*              K2Node_DynamicCast_AsBP_Placeable_Static_Prop;     // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_StaticMeshProp_C*                    K2Node_DynamicCast_AsB_Static_Mesh_Prop;           // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0056(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_57[0x1];                                       // 0x0057(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAnchorActor_AnchorActor;               // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_2;                    // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasSelectedSomething_HasSelectedActor;    // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0063(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_3;                    // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_66[0x2];                                       // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAnchorActor_AnchorActor_1;             // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Switch_C*                           K2Node_DynamicCast_AsBP_Switch;                    // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAnchorActor_AnchorActor_2;             // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetAnchorActor_AnchorActor_3;             // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue_1;      // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_2;    // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x009A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x009B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_1;            // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_1;            // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x00B3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_TransformTrace_Actor;                     // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	E_Axis                                        CallFunc_TransformTrace_ModifyingAxis;             // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_FireSelectActor) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_FireSelectActor");
static_assert(sizeof(B_CreativePlayerController_C_FireSelectActor) == 0x0000D8, "Wrong size on B_CreativePlayerController_C_FireSelectActor");
static_assert(offsetof(B_CreativePlayerController_C_FireSelectActor, ModifyingAxisNumber) == 0x000000, "Member 'B_CreativePlayerController_C_FireSelectActor::ModifyingAxisNumber' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FireSelectActor, HitActor) == 0x000008, "Member 'B_CreativePlayerController_C_FireSelectActor::HitActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FireSelectActor, ModifyingAxis) == 0x000010, "Member 'B_CreativePlayerController_C_FireSelectActor::ModifyingAxis' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FireSelectActor, CallFunc_GetGameInstance_ReturnValue) == 0x000018, "Member 'B_CreativePlayerController_C_FireSelectActor::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FireSelectActor, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'B_CreativePlayerController_C_FireSelectActor::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FireSelectActor, K2Node_DynamicCast_AsB_Game_Instance) == 0x000028, "Member 'B_CreativePlayerController_C_FireSelectActor::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FireSelectActor, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'B_CreativePlayerController_C_FireSelectActor::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FireSelectActor, CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen) == 0x000031, "Member 'B_CreativePlayerController_C_FireSelectActor::CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FireSelectActor, CallFunc_IsValid_ReturnValue_1) == 0x000032, "Member 'B_CreativePlayerController_C_FireSelectActor::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FireSelectActor, K2Node_DynamicCast_AsBP_Placeable_Static_Prop) == 0x000038, "Member 'B_CreativePlayerController_C_FireSelectActor::K2Node_DynamicCast_AsBP_Placeable_Static_Prop' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FireSelectActor, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'B_CreativePlayerController_C_FireSelectActor::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FireSelectActor, K2Node_DynamicCast_AsB_Static_Mesh_Prop) == 0x000048, "Member 'B_CreativePlayerController_C_FireSelectActor::K2Node_DynamicCast_AsB_Static_Mesh_Prop' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FireSelectActor, K2Node_DynamicCast_bSuccess_2) == 0x000050, "Member 'B_CreativePlayerController_C_FireSelectActor::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FireSelectActor, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000051, "Member 'B_CreativePlayerController_C_FireSelectActor::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FireSelectActor, CallFunc_Not_PreBool_ReturnValue) == 0x000052, "Member 'B_CreativePlayerController_C_FireSelectActor::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FireSelectActor, CallFunc_Not_PreBool_ReturnValue_1) == 0x000053, "Member 'B_CreativePlayerController_C_FireSelectActor::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FireSelectActor, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x000054, "Member 'B_CreativePlayerController_C_FireSelectActor::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FireSelectActor, K2Node_SwitchEnum_CmpSuccess) == 0x000055, "Member 'B_CreativePlayerController_C_FireSelectActor::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FireSelectActor, K2Node_SwitchEnum_CmpSuccess_1) == 0x000056, "Member 'B_CreativePlayerController_C_FireSelectActor::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FireSelectActor, CallFunc_GetAnchorActor_AnchorActor) == 0x000058, "Member 'B_CreativePlayerController_C_FireSelectActor::CallFunc_GetAnchorActor_AnchorActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FireSelectActor, CallFunc_IsValid_ReturnValue_2) == 0x000060, "Member 'B_CreativePlayerController_C_FireSelectActor::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FireSelectActor, K2Node_SwitchEnum_CmpSuccess_2) == 0x000061, "Member 'B_CreativePlayerController_C_FireSelectActor::K2Node_SwitchEnum_CmpSuccess_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FireSelectActor, CallFunc_HasSelectedSomething_HasSelectedActor) == 0x000062, "Member 'B_CreativePlayerController_C_FireSelectActor::CallFunc_HasSelectedSomething_HasSelectedActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FireSelectActor, CallFunc_Not_PreBool_ReturnValue_2) == 0x000063, "Member 'B_CreativePlayerController_C_FireSelectActor::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FireSelectActor, K2Node_SwitchEnum_CmpSuccess_3) == 0x000064, "Member 'B_CreativePlayerController_C_FireSelectActor::K2Node_SwitchEnum_CmpSuccess_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FireSelectActor, CallFunc_BooleanAND_ReturnValue) == 0x000065, "Member 'B_CreativePlayerController_C_FireSelectActor::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FireSelectActor, CallFunc_GetAnchorActor_AnchorActor_1) == 0x000068, "Member 'B_CreativePlayerController_C_FireSelectActor::CallFunc_GetAnchorActor_AnchorActor_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FireSelectActor, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000070, "Member 'B_CreativePlayerController_C_FireSelectActor::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FireSelectActor, K2Node_DynamicCast_AsBP_Switch) == 0x000078, "Member 'B_CreativePlayerController_C_FireSelectActor::K2Node_DynamicCast_AsBP_Switch' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FireSelectActor, K2Node_DynamicCast_bSuccess_3) == 0x000080, "Member 'B_CreativePlayerController_C_FireSelectActor::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FireSelectActor, CallFunc_GetAnchorActor_AnchorActor_2) == 0x000088, "Member 'B_CreativePlayerController_C_FireSelectActor::CallFunc_GetAnchorActor_AnchorActor_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FireSelectActor, CallFunc_GetAnchorActor_AnchorActor_3) == 0x000090, "Member 'B_CreativePlayerController_C_FireSelectActor::CallFunc_GetAnchorActor_AnchorActor_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FireSelectActor, CallFunc_NotEqual_ObjectObject_ReturnValue_1) == 0x000098, "Member 'B_CreativePlayerController_C_FireSelectActor::CallFunc_NotEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FireSelectActor, CallFunc_EqualEqual_ObjectObject_ReturnValue_2) == 0x000099, "Member 'B_CreativePlayerController_C_FireSelectActor::CallFunc_EqualEqual_ObjectObject_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FireSelectActor, CallFunc_BooleanAND_ReturnValue_1) == 0x00009A, "Member 'B_CreativePlayerController_C_FireSelectActor::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FireSelectActor, CallFunc_Not_PreBool_ReturnValue_3) == 0x00009B, "Member 'B_CreativePlayerController_C_FireSelectActor::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FireSelectActor, CallFunc_GetGameInstance_ReturnValue_1) == 0x0000A0, "Member 'B_CreativePlayerController_C_FireSelectActor::CallFunc_GetGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FireSelectActor, K2Node_DynamicCast_AsB_Game_Instance_1) == 0x0000A8, "Member 'B_CreativePlayerController_C_FireSelectActor::K2Node_DynamicCast_AsB_Game_Instance_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FireSelectActor, K2Node_DynamicCast_bSuccess_4) == 0x0000B0, "Member 'B_CreativePlayerController_C_FireSelectActor::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FireSelectActor, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000B1, "Member 'B_CreativePlayerController_C_FireSelectActor::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FireSelectActor, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0000B2, "Member 'B_CreativePlayerController_C_FireSelectActor::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FireSelectActor, CallFunc_BooleanAND_ReturnValue_2) == 0x0000B3, "Member 'B_CreativePlayerController_C_FireSelectActor::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FireSelectActor, CallFunc_K2_GetPawn_ReturnValue) == 0x0000B8, "Member 'B_CreativePlayerController_C_FireSelectActor::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FireSelectActor, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x0000C0, "Member 'B_CreativePlayerController_C_FireSelectActor::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FireSelectActor, CallFunc_TransformTrace_Actor) == 0x0000C8, "Member 'B_CreativePlayerController_C_FireSelectActor::CallFunc_TransformTrace_Actor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FireSelectActor, CallFunc_TransformTrace_ModifyingAxis) == 0x0000D0, "Member 'B_CreativePlayerController_C_FireSelectActor::CallFunc_TransformTrace_ModifyingAxis' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.FixNumberedSelectionsAfterDuplicate
// 0x00D0 (0x00D0 - 0x0000)
struct B_CreativePlayerController_C_FixNumberedSelectionsAfterDuplicate final
{
public:
	TMap<class AActor*, class AActor*>            DuplicatedActors;                                  // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, Parm)
	TArray<class AActor*>                         NewNumberedSelection;                              // 0x0050(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_SelectedActors                      K2Node_MakeStruct_S_SelectedActors;                // 0x0070(0x0010)(HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_SelectedActors                      CallFunc_Array_Get_Item;                           // 0x0088(0x0010)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item_1;                         // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Map_Find_Value;                           // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Contains_ReturnValue;                 // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_FixNumberedSelectionsAfterDuplicate) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_FixNumberedSelectionsAfterDuplicate");
static_assert(sizeof(B_CreativePlayerController_C_FixNumberedSelectionsAfterDuplicate) == 0x0000D0, "Wrong size on B_CreativePlayerController_C_FixNumberedSelectionsAfterDuplicate");
static_assert(offsetof(B_CreativePlayerController_C_FixNumberedSelectionsAfterDuplicate, DuplicatedActors) == 0x000000, "Member 'B_CreativePlayerController_C_FixNumberedSelectionsAfterDuplicate::DuplicatedActors' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FixNumberedSelectionsAfterDuplicate, NewNumberedSelection) == 0x000050, "Member 'B_CreativePlayerController_C_FixNumberedSelectionsAfterDuplicate::NewNumberedSelection' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FixNumberedSelectionsAfterDuplicate, Temp_int_Loop_Counter_Variable) == 0x000060, "Member 'B_CreativePlayerController_C_FixNumberedSelectionsAfterDuplicate::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FixNumberedSelectionsAfterDuplicate, CallFunc_Add_IntInt_ReturnValue) == 0x000064, "Member 'B_CreativePlayerController_C_FixNumberedSelectionsAfterDuplicate::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FixNumberedSelectionsAfterDuplicate, Temp_int_Array_Index_Variable) == 0x000068, "Member 'B_CreativePlayerController_C_FixNumberedSelectionsAfterDuplicate::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FixNumberedSelectionsAfterDuplicate, K2Node_MakeStruct_S_SelectedActors) == 0x000070, "Member 'B_CreativePlayerController_C_FixNumberedSelectionsAfterDuplicate::K2Node_MakeStruct_S_SelectedActors' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FixNumberedSelectionsAfterDuplicate, Temp_int_Array_Index_Variable_1) == 0x000080, "Member 'B_CreativePlayerController_C_FixNumberedSelectionsAfterDuplicate::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FixNumberedSelectionsAfterDuplicate, Temp_int_Loop_Counter_Variable_1) == 0x000084, "Member 'B_CreativePlayerController_C_FixNumberedSelectionsAfterDuplicate::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FixNumberedSelectionsAfterDuplicate, CallFunc_Array_Get_Item) == 0x000088, "Member 'B_CreativePlayerController_C_FixNumberedSelectionsAfterDuplicate::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FixNumberedSelectionsAfterDuplicate, CallFunc_Array_Length_ReturnValue) == 0x000098, "Member 'B_CreativePlayerController_C_FixNumberedSelectionsAfterDuplicate::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FixNumberedSelectionsAfterDuplicate, CallFunc_Less_IntInt_ReturnValue) == 0x00009C, "Member 'B_CreativePlayerController_C_FixNumberedSelectionsAfterDuplicate::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FixNumberedSelectionsAfterDuplicate, CallFunc_Array_Get_Item_1) == 0x0000A0, "Member 'B_CreativePlayerController_C_FixNumberedSelectionsAfterDuplicate::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FixNumberedSelectionsAfterDuplicate, CallFunc_Map_Find_Value) == 0x0000A8, "Member 'B_CreativePlayerController_C_FixNumberedSelectionsAfterDuplicate::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FixNumberedSelectionsAfterDuplicate, CallFunc_Map_Find_ReturnValue) == 0x0000B0, "Member 'B_CreativePlayerController_C_FixNumberedSelectionsAfterDuplicate::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FixNumberedSelectionsAfterDuplicate, CallFunc_Array_Add_ReturnValue) == 0x0000B4, "Member 'B_CreativePlayerController_C_FixNumberedSelectionsAfterDuplicate::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FixNumberedSelectionsAfterDuplicate, CallFunc_Array_Add_ReturnValue_1) == 0x0000B8, "Member 'B_CreativePlayerController_C_FixNumberedSelectionsAfterDuplicate::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FixNumberedSelectionsAfterDuplicate, CallFunc_Map_Contains_ReturnValue) == 0x0000BC, "Member 'B_CreativePlayerController_C_FixNumberedSelectionsAfterDuplicate::CallFunc_Map_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FixNumberedSelectionsAfterDuplicate, CallFunc_Array_Length_ReturnValue_1) == 0x0000C0, "Member 'B_CreativePlayerController_C_FixNumberedSelectionsAfterDuplicate::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FixNumberedSelectionsAfterDuplicate, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000C4, "Member 'B_CreativePlayerController_C_FixNumberedSelectionsAfterDuplicate::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_FixNumberedSelectionsAfterDuplicate, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000C8, "Member 'B_CreativePlayerController_C_FixNumberedSelectionsAfterDuplicate::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.GetMouseTraceStartAndEndPoints
// 0x00A0 (0x00A0 - 0x0000)
struct B_CreativePlayerController_C_GetMouseTraceStartAndEndPoints final
{
public:
	double                                        Distance;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StartPoint;                                        // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EndPoint;                                          // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_DeprojectMousePositionToWorld_WorldLocation; // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_DeprojectMousePositionToWorld_WorldDirection; // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DeprojectMousePositionToWorld_ReturnValue; // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_GetMouseTraceStartAndEndPoints) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_GetMouseTraceStartAndEndPoints");
static_assert(sizeof(B_CreativePlayerController_C_GetMouseTraceStartAndEndPoints) == 0x0000A0, "Wrong size on B_CreativePlayerController_C_GetMouseTraceStartAndEndPoints");
static_assert(offsetof(B_CreativePlayerController_C_GetMouseTraceStartAndEndPoints, Distance) == 0x000000, "Member 'B_CreativePlayerController_C_GetMouseTraceStartAndEndPoints::Distance' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetMouseTraceStartAndEndPoints, StartPoint) == 0x000008, "Member 'B_CreativePlayerController_C_GetMouseTraceStartAndEndPoints::StartPoint' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetMouseTraceStartAndEndPoints, EndPoint) == 0x000020, "Member 'B_CreativePlayerController_C_GetMouseTraceStartAndEndPoints::EndPoint' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetMouseTraceStartAndEndPoints, CallFunc_DeprojectMousePositionToWorld_WorldLocation) == 0x000038, "Member 'B_CreativePlayerController_C_GetMouseTraceStartAndEndPoints::CallFunc_DeprojectMousePositionToWorld_WorldLocation' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetMouseTraceStartAndEndPoints, CallFunc_DeprojectMousePositionToWorld_WorldDirection) == 0x000050, "Member 'B_CreativePlayerController_C_GetMouseTraceStartAndEndPoints::CallFunc_DeprojectMousePositionToWorld_WorldDirection' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetMouseTraceStartAndEndPoints, CallFunc_DeprojectMousePositionToWorld_ReturnValue) == 0x000068, "Member 'B_CreativePlayerController_C_GetMouseTraceStartAndEndPoints::CallFunc_DeprojectMousePositionToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetMouseTraceStartAndEndPoints, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000070, "Member 'B_CreativePlayerController_C_GetMouseTraceStartAndEndPoints::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetMouseTraceStartAndEndPoints, CallFunc_Add_VectorVector_ReturnValue) == 0x000088, "Member 'B_CreativePlayerController_C_GetMouseTraceStartAndEndPoints::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.GetPrefabInfo
// 0x00B0 (0x00B0 - 0x0000)
struct B_CreativePlayerController_C_GetPrefabInfo final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          HasExtraInfo;                                      // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Activated;                                         // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StartAwake;                                        // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFreezed;                                         // 0x000B(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BreaksAfterUse;                                    // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Color;                                             // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Breakable;                                         // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LightColor;                                        // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Freezed;                                           // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StartsAwake;                                       // 0x0049(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsActivated;                                       // 0x004A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B[0x5];                                       // 0x004B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_StaticMeshProp_C*                    K2Node_DynamicCast_AsB_Static_Mesh_Prop;           // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Switch_C*                           K2Node_DynamicCast_AsBP_Switch;                    // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlaceableLight_C*                   K2Node_DynamicCast_AsBP_Placeable_Light;           // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_StaticMeshActionProp_C*              K2Node_DynamicCast_AsB_Static_Mesh_Action_Prop;    // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlaceableActor_C*                   K2Node_DynamicCast_AsBP_Placeable_Actor;           // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ActionPlacable_C*                   K2Node_DynamicCast_AsBP_Action_Placable;           // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_GetPrefabInfo) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_GetPrefabInfo");
static_assert(sizeof(B_CreativePlayerController_C_GetPrefabInfo) == 0x0000B0, "Wrong size on B_CreativePlayerController_C_GetPrefabInfo");
static_assert(offsetof(B_CreativePlayerController_C_GetPrefabInfo, Actor) == 0x000000, "Member 'B_CreativePlayerController_C_GetPrefabInfo::Actor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetPrefabInfo, HasExtraInfo) == 0x000008, "Member 'B_CreativePlayerController_C_GetPrefabInfo::HasExtraInfo' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetPrefabInfo, Activated) == 0x000009, "Member 'B_CreativePlayerController_C_GetPrefabInfo::Activated' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetPrefabInfo, StartAwake) == 0x00000A, "Member 'B_CreativePlayerController_C_GetPrefabInfo::StartAwake' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetPrefabInfo, IsFreezed) == 0x00000B, "Member 'B_CreativePlayerController_C_GetPrefabInfo::IsFreezed' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetPrefabInfo, BreaksAfterUse) == 0x00000C, "Member 'B_CreativePlayerController_C_GetPrefabInfo::BreaksAfterUse' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetPrefabInfo, Color) == 0x000010, "Member 'B_CreativePlayerController_C_GetPrefabInfo::Color' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetPrefabInfo, Breakable) == 0x000028, "Member 'B_CreativePlayerController_C_GetPrefabInfo::Breakable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetPrefabInfo, LightColor) == 0x000030, "Member 'B_CreativePlayerController_C_GetPrefabInfo::LightColor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetPrefabInfo, Freezed) == 0x000048, "Member 'B_CreativePlayerController_C_GetPrefabInfo::Freezed' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetPrefabInfo, StartsAwake) == 0x000049, "Member 'B_CreativePlayerController_C_GetPrefabInfo::StartsAwake' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetPrefabInfo, IsActivated) == 0x00004A, "Member 'B_CreativePlayerController_C_GetPrefabInfo::IsActivated' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetPrefabInfo, K2Node_DynamicCast_AsB_Static_Mesh_Prop) == 0x000050, "Member 'B_CreativePlayerController_C_GetPrefabInfo::K2Node_DynamicCast_AsB_Static_Mesh_Prop' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetPrefabInfo, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'B_CreativePlayerController_C_GetPrefabInfo::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetPrefabInfo, K2Node_DynamicCast_AsBP_Switch) == 0x000060, "Member 'B_CreativePlayerController_C_GetPrefabInfo::K2Node_DynamicCast_AsBP_Switch' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetPrefabInfo, K2Node_DynamicCast_bSuccess_1) == 0x000068, "Member 'B_CreativePlayerController_C_GetPrefabInfo::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetPrefabInfo, K2Node_DynamicCast_AsBP_Placeable_Light) == 0x000070, "Member 'B_CreativePlayerController_C_GetPrefabInfo::K2Node_DynamicCast_AsBP_Placeable_Light' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetPrefabInfo, K2Node_DynamicCast_bSuccess_2) == 0x000078, "Member 'B_CreativePlayerController_C_GetPrefabInfo::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetPrefabInfo, K2Node_DynamicCast_AsB_Static_Mesh_Action_Prop) == 0x000080, "Member 'B_CreativePlayerController_C_GetPrefabInfo::K2Node_DynamicCast_AsB_Static_Mesh_Action_Prop' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetPrefabInfo, K2Node_DynamicCast_bSuccess_3) == 0x000088, "Member 'B_CreativePlayerController_C_GetPrefabInfo::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetPrefabInfo, K2Node_DynamicCast_AsBP_Placeable_Actor) == 0x000090, "Member 'B_CreativePlayerController_C_GetPrefabInfo::K2Node_DynamicCast_AsBP_Placeable_Actor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetPrefabInfo, K2Node_DynamicCast_bSuccess_4) == 0x000098, "Member 'B_CreativePlayerController_C_GetPrefabInfo::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetPrefabInfo, K2Node_DynamicCast_AsBP_Action_Placable) == 0x0000A0, "Member 'B_CreativePlayerController_C_GetPrefabInfo::K2Node_DynamicCast_AsBP_Action_Placable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetPrefabInfo, K2Node_DynamicCast_bSuccess_5) == 0x0000A8, "Member 'B_CreativePlayerController_C_GetPrefabInfo::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.GetRotationFromCurrentMode
// 0x0660 (0x0660 - 0x0000)
struct B_CreativePlayerController_C_GetRotationFromCurrentMode final
{
public:
	double                                        Horizontal;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Vertical;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             EditingTransform;                                  // 0x0010(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x0070(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              Projected;                                         // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             UsedTransform;                                     // 0x00A0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MouseY;                                            // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MouseX;                                            // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ActorStartY;                                       // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ActorStartX;                                       // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable;                                // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable_1;                              // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_2;                              // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable_3;                              // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_4;                              // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_151[0x7];                                      // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable_5;                              // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_6;                              // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_169[0x7];                                      // 0x0169(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable_7;                              // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_181[0x7];                                      // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0198(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x01B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x01C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x01E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x01F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x0210(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x0228(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x0240(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0258(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x0270(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0288(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x02A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_ProjectWorldLocationToScreen_ScreenLocation; // 0x02B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ProjectWorldLocationToScreen_ReturnValue; // 0x02C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C9[0x7];                                      // 0x02C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x02D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x02E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_ProjectWorldLocationToScreen_ScreenLocation_1; // 0x02F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ProjectWorldLocationToScreen_ReturnValue_1; // 0x0308(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_309[0x7];                                      // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x0310(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0318(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0320(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x0321(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_322[0x6];                                      // 0x0322(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default;                             // 0x0328(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default_1;                           // 0x0330(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0338(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x0340(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0348(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_4;      // 0x0350(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue_1;  // 0x0358(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x0368(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x0380(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x0388(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_2;       // 0x0390(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_3;       // 0x0391(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_392[0x6];                                      // 0x0392(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default_2;                           // 0x0398(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default_3;                           // 0x03A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_5;      // 0x03A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_6;      // 0x03B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_2;           // 0x03B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_2;                // 0x03C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_2;                // 0x03D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_2;                   // 0x03F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_2;                // 0x0408(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_ProjectWorldLocationToScreen_ScreenLocation_2; // 0x0420(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ProjectWorldLocationToScreen_ReturnValue_2; // 0x0430(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_431[0x7];                                      // 0x0431(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location_3;                // 0x0438(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_3;                // 0x0450(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_3;                   // 0x0468(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0480(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMousePosition_LocationX;               // 0x04E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMousePosition_LocationY;               // 0x04E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetMousePosition_ReturnValue;             // 0x04E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4E9[0x7];                                      // 0x04E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             K2Node_Select_Default_4;                           // 0x04F0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_4;                // 0x0550(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_4;                // 0x0568(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_4;                   // 0x0580(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_598[0x8];                                      // 0x0598(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x05A0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetAnchorActor_AnchorActor;               // 0x0600(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0608(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_ProjectWorldLocationToScreen_ScreenLocation_3; // 0x0620(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ProjectWorldLocationToScreen_ReturnValue_3; // 0x0630(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_631[0x7];                                      // 0x0631(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X_2;                        // 0x0638(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_2;                        // 0x0640(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0648(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_649[0x3];                                      // 0x0649(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x064C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast;           // 0x0650(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Roll_ImplicitCast;            // 0x0654(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_GetRotationFromCurrentMode) == 0x000010, "Wrong alignment on B_CreativePlayerController_C_GetRotationFromCurrentMode");
static_assert(sizeof(B_CreativePlayerController_C_GetRotationFromCurrentMode) == 0x000660, "Wrong size on B_CreativePlayerController_C_GetRotationFromCurrentMode");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, Horizontal) == 0x000000, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::Horizontal' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, Vertical) == 0x000008, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::Vertical' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, EditingTransform) == 0x000010, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::EditingTransform' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, Rotation) == 0x000070, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::Rotation' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, Projected) == 0x000088, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::Projected' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, UsedTransform) == 0x0000A0, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::UsedTransform' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, MouseY) == 0x000100, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::MouseY' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, MouseX) == 0x000104, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::MouseX' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, ActorStartY) == 0x000108, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::ActorStartY' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, ActorStartX) == 0x000110, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::ActorStartX' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, Temp_real_Variable) == 0x000118, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, Temp_bool_Variable) == 0x000120, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, Temp_real_Variable_1) == 0x000128, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, Temp_real_Variable_2) == 0x000130, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::Temp_real_Variable_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, Temp_bool_Variable_1) == 0x000138, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, Temp_real_Variable_3) == 0x000140, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::Temp_real_Variable_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, Temp_real_Variable_4) == 0x000148, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::Temp_real_Variable_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, Temp_bool_Variable_2) == 0x000150, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, Temp_real_Variable_5) == 0x000158, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::Temp_real_Variable_5' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, Temp_real_Variable_6) == 0x000160, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::Temp_real_Variable_6' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, Temp_bool_Variable_3) == 0x000168, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, Temp_real_Variable_7) == 0x000170, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::Temp_real_Variable_7' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000178, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, Temp_bool_Variable_4) == 0x000180, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000188, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000190, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_MakeRotator_ReturnValue) == 0x000198, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_BreakTransform_Location) == 0x0001B0, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_BreakTransform_Rotation) == 0x0001C8, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_BreakTransform_Scale) == 0x0001E0, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_GetForwardVector_ReturnValue) == 0x0001F8, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_BreakTransform_Location_1) == 0x000210, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_BreakTransform_Rotation_1) == 0x000228, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_BreakTransform_Scale_1) == 0x000240, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000258, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_GetRightVector_ReturnValue) == 0x000270, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_Add_VectorVector_ReturnValue) == 0x000288, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x0002A0, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_ProjectWorldLocationToScreen_ScreenLocation) == 0x0002B8, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_ProjectWorldLocationToScreen_ScreenLocation' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_ProjectWorldLocationToScreen_ReturnValue) == 0x0002C8, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_ProjectWorldLocationToScreen_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0002D0, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x0002E8, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_ProjectWorldLocationToScreen_ScreenLocation_1) == 0x0002F8, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_ProjectWorldLocationToScreen_ScreenLocation_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_ProjectWorldLocationToScreen_ReturnValue_1) == 0x000308, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_ProjectWorldLocationToScreen_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_BreakVector2D_X) == 0x000310, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_BreakVector2D_Y) == 0x000318, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000320, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x000321, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, K2Node_Select_Default) == 0x000328, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, K2Node_Select_Default_1) == 0x000330, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000338, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x000340, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000348, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_Multiply_DoubleDouble_ReturnValue_4) == 0x000350, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_Multiply_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_Subtract_Vector2DVector2D_ReturnValue_1) == 0x000358, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_Subtract_Vector2DVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_MakeRotator_ReturnValue_1) == 0x000368, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_BreakVector2D_X_1) == 0x000380, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_BreakVector2D_Y_1) == 0x000388, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_Greater_DoubleDouble_ReturnValue_2) == 0x000390, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_Greater_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_Greater_DoubleDouble_ReturnValue_3) == 0x000391, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_Greater_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, K2Node_Select_Default_2) == 0x000398, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, K2Node_Select_Default_3) == 0x0003A0, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_Multiply_DoubleDouble_ReturnValue_5) == 0x0003A8, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_Multiply_DoubleDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_Multiply_DoubleDouble_ReturnValue_6) == 0x0003B0, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_Multiply_DoubleDouble_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_Add_DoubleDouble_ReturnValue_2) == 0x0003B8, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_Add_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_BreakTransform_Location_2) == 0x0003C0, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_BreakTransform_Location_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_BreakTransform_Rotation_2) == 0x0003D8, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_BreakTransform_Rotation_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_BreakTransform_Scale_2) == 0x0003F0, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_BreakTransform_Scale_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_MakeRotator_ReturnValue_2) == 0x000408, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_MakeRotator_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_ProjectWorldLocationToScreen_ScreenLocation_2) == 0x000420, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_ProjectWorldLocationToScreen_ScreenLocation_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_ProjectWorldLocationToScreen_ReturnValue_2) == 0x000430, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_ProjectWorldLocationToScreen_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_BreakTransform_Location_3) == 0x000438, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_BreakTransform_Location_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_BreakTransform_Rotation_3) == 0x000450, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_BreakTransform_Rotation_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_BreakTransform_Scale_3) == 0x000468, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_BreakTransform_Scale_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_MakeTransform_ReturnValue) == 0x000480, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_GetMousePosition_LocationX) == 0x0004E0, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_GetMousePosition_LocationX' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_GetMousePosition_LocationY) == 0x0004E4, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_GetMousePosition_LocationY' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_GetMousePosition_ReturnValue) == 0x0004E8, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_GetMousePosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, K2Node_Select_Default_4) == 0x0004F0, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_BreakTransform_Location_4) == 0x000550, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_BreakTransform_Location_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_BreakTransform_Rotation_4) == 0x000568, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_BreakTransform_Rotation_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_BreakTransform_Scale_4) == 0x000580, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_BreakTransform_Scale_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_MakeTransform_ReturnValue_1) == 0x0005A0, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_GetAnchorActor_AnchorActor) == 0x000600, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_GetAnchorActor_AnchorActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000608, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_ProjectWorldLocationToScreen_ScreenLocation_3) == 0x000620, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_ProjectWorldLocationToScreen_ScreenLocation_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_ProjectWorldLocationToScreen_ReturnValue_3) == 0x000630, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_ProjectWorldLocationToScreen_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_BreakVector2D_X_2) == 0x000638, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_BreakVector2D_X_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_BreakVector2D_Y_2) == 0x000640, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_BreakVector2D_Y_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, K2Node_SwitchEnum_CmpSuccess) == 0x000648, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x00064C, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_MakeRotator_Pitch_ImplicitCast) == 0x000650, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_MakeRotator_Pitch_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetRotationFromCurrentMode, CallFunc_MakeRotator_Roll_ImplicitCast) == 0x000654, "Member 'B_CreativePlayerController_C_GetRotationFromCurrentMode::CallFunc_MakeRotator_Roll_ImplicitCast' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.GetSelectedTransform
// 0x0180 (0x0180 - 0x0000)
struct B_CreativePlayerController_C_GetSelectedTransform final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetAnchorActor_AnchorActor;               // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0070(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0108(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0120(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_GetSelectedTransform) == 0x000010, "Wrong alignment on B_CreativePlayerController_C_GetSelectedTransform");
static_assert(sizeof(B_CreativePlayerController_C_GetSelectedTransform) == 0x000180, "Wrong size on B_CreativePlayerController_C_GetSelectedTransform");
static_assert(offsetof(B_CreativePlayerController_C_GetSelectedTransform, Transform) == 0x000000, "Member 'B_CreativePlayerController_C_GetSelectedTransform::Transform' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetSelectedTransform, CallFunc_GetAnchorActor_AnchorActor) == 0x000060, "Member 'B_CreativePlayerController_C_GetSelectedTransform::CallFunc_GetAnchorActor_AnchorActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetSelectedTransform, CallFunc_GetTransform_ReturnValue) == 0x000070, "Member 'B_CreativePlayerController_C_GetSelectedTransform::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetSelectedTransform, CallFunc_IsValid_ReturnValue) == 0x0000D0, "Member 'B_CreativePlayerController_C_GetSelectedTransform::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetSelectedTransform, CallFunc_BreakTransform_Location) == 0x0000D8, "Member 'B_CreativePlayerController_C_GetSelectedTransform::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetSelectedTransform, CallFunc_BreakTransform_Rotation) == 0x0000F0, "Member 'B_CreativePlayerController_C_GetSelectedTransform::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetSelectedTransform, CallFunc_BreakTransform_Scale) == 0x000108, "Member 'B_CreativePlayerController_C_GetSelectedTransform::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetSelectedTransform, CallFunc_MakeTransform_ReturnValue) == 0x000120, "Member 'B_CreativePlayerController_C_GetSelectedTransform::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.GetSwitchTargetsFromPrefabToPlace
// 0x00A8 (0x00A8 - 0x0000)
struct B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace final
{
public:
	TArray<int32>                                 TargetIndices;                                     // 0x0000(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item_1;                         // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item_2;                         // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_Switch_C*                           K2Node_DynamicCast_AsBP_Switch;                    // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Switch_C*                           K2Node_DynamicCast_AsBP_Switch_1;                  // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item_3;                         // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue_1;           // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x00A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue_1;             // 0x00A6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace");
static_assert(sizeof(B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace) == 0x0000A8, "Wrong size on B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace");
static_assert(offsetof(B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace, TargetIndices) == 0x000000, "Member 'B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace::TargetIndices' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace, Temp_int_Array_Index_Variable) == 0x000010, "Member 'B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace, Temp_bool_True_if_break_was_hit_Variable) == 0x000014, "Member 'B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace, CallFunc_Not_PreBool_ReturnValue) == 0x000015, "Member 'B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace, Temp_int_Array_Index_Variable_1) == 0x000020, "Member 'B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace, Temp_int_Loop_Counter_Variable_1) == 0x000024, "Member 'B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace, CallFunc_Add_IntInt_ReturnValue_1) == 0x000028, "Member 'B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace, Temp_int_Array_Index_Variable_2) == 0x00002C, "Member 'B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace, CallFunc_Array_RemoveItem_ReturnValue) == 0x000030, "Member 'B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace, CallFunc_Array_Contains_ReturnValue) == 0x000031, "Member 'B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace, CallFunc_Array_Get_Item) == 0x000038, "Member 'B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace, Temp_int_Loop_Counter_Variable_2) == 0x000044, "Member 'B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace, CallFunc_Add_IntInt_ReturnValue_2) == 0x00004C, "Member 'B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace, CallFunc_BooleanAND_ReturnValue) == 0x000050, "Member 'B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace, CallFunc_Array_Get_Item_1) == 0x000058, "Member 'B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace, CallFunc_Array_Get_Item_2) == 0x000060, "Member 'B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace, K2Node_DynamicCast_AsBP_Switch) == 0x000068, "Member 'B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace::K2Node_DynamicCast_AsBP_Switch' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace, K2Node_DynamicCast_bSuccess) == 0x000070, "Member 'B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace, K2Node_DynamicCast_AsBP_Switch_1) == 0x000078, "Member 'B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace::K2Node_DynamicCast_AsBP_Switch_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace, K2Node_DynamicCast_bSuccess_1) == 0x000080, "Member 'B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace, CallFunc_Array_Add_ReturnValue) == 0x000084, "Member 'B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace, CallFunc_Array_Get_Item_3) == 0x000088, "Member 'B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace, CallFunc_Array_Length_ReturnValue_1) == 0x000090, "Member 'B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace, CallFunc_Array_Find_ReturnValue) == 0x000094, "Member 'B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace, CallFunc_Less_IntInt_ReturnValue_1) == 0x000098, "Member 'B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace, CallFunc_Array_Add_ReturnValue_1) == 0x00009C, "Member 'B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace, CallFunc_Array_Length_ReturnValue_2) == 0x0000A0, "Member 'B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace, CallFunc_Array_RemoveItem_ReturnValue_1) == 0x0000A4, "Member 'B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace::CallFunc_Array_RemoveItem_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace, CallFunc_Less_IntInt_ReturnValue_2) == 0x0000A5, "Member 'B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace, CallFunc_Array_Contains_ReturnValue_1) == 0x0000A6, "Member 'B_CreativePlayerController_C_GetSwitchTargetsFromPrefabToPlace::CallFunc_Array_Contains_ReturnValue_1' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.GetTranslationFromCurrentMode
// 0x06C0 (0x06C0 - 0x0000)
struct B_CreativePlayerController_C_GetTranslationFromCurrentMode final
{
public:
	class AActor*                                 EditingActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Translation;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ProjectedVector;                                   // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DirectionY;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DirectionX;                                        // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ActorStartY;                                       // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ActorStartX;                                       // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MouseY;                                            // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MouseX;                                            // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             UsedTransform;                                     // 0x0060(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Projected;                                         // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Cross;                                             // 0x00D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue_1;                 // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0110(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0128(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x0140(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0158(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_1;                     // 0x0170(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0188(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue_2;                 // 0x01A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x01A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_2;      // 0x01C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x01D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_2;                     // 0x01F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue;                 // 0x0208(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorUpVector_ReturnValue;             // 0x0220(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue_1;        // 0x0238(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue_1;               // 0x0250(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorUpVector_ReturnValue_1;           // 0x0268(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue_2;               // 0x0280(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0298(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorUpVector_ReturnValue_2;           // 0x02B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorRightVector_ReturnValue;          // 0x02C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorRightVector_ReturnValue_1;        // 0x02E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue_1;      // 0x02F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue_2;      // 0x0310(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue_2;        // 0x0328(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorRightVector_ReturnValue_2;        // 0x0340(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0358(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_359[0x7];                                      // 0x0359(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_SelectVector_ReturnValue_3;               // 0x0360(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue_4;               // 0x0378(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue_5;               // 0x0390(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Dot_VectorVector_ReturnValue;             // 0x03A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue_6;               // 0x03B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue;                          // 0x03C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Dot_VectorVector_ReturnValue_1;           // 0x03D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x03D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D9[0x7];                                      // 0x03D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Abs_ReturnValue_1;                        // 0x03E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue_7;               // 0x03E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x0400(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_401[0x7];                                      // 0x0401(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_SelectVector_ReturnValue_8;               // 0x0408(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_DeprojectMousePositionToWorld_WorldLocation; // 0x0420(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_DeprojectMousePositionToWorld_WorldDirection; // 0x0438(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DeprojectMousePositionToWorld_ReturnValue; // 0x0450(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_451[0x7];                                      // 0x0451(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0458(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0470(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_DeprojectMousePositionToWorld_WorldLocation_1; // 0x0488(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_DeprojectMousePositionToWorld_WorldDirection_1; // 0x04A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DeprojectMousePositionToWorld_ReturnValue_1; // 0x04B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B9[0x3];                                      // 0x04B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_LinePlaneIntersection_OriginNormal_T;     // 0x04BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_LinePlaneIntersection_OriginNormal_Intersection; // 0x04C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LinePlaneIntersection_OriginNormal_ReturnValue; // 0x04D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D9[0x7];                                      // 0x04D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_3;      // 0x04E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_1;      // 0x04F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ProjectVectorOnToVector_ReturnValue;      // 0x0510(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x0528(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinePlaneIntersection_OriginNormal_T_1;   // 0x0540(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_544[0x4];                                      // 0x0544(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_LinePlaneIntersection_OriginNormal_Intersection_1; // 0x0548(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LinePlaneIntersection_OriginNormal_ReturnValue_1; // 0x0560(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_561[0x7];                                      // 0x0561(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_SelectVector_ReturnValue_9;               // 0x0568(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_4;      // 0x0580(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ProjectVectorOnToVector_ReturnValue_1;    // 0x0598(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue_10;              // 0x05B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Dot_VectorVector_ReturnValue_2;           // 0x05C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue_2;                        // 0x05D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_2;       // 0x05D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D9[0x7];                                      // 0x05D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_DeprojectMousePositionToWorld_WorldLocation_2; // 0x05E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_DeprojectMousePositionToWorld_WorldDirection_2; // 0x05F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DeprojectMousePositionToWorld_ReturnValue_2; // 0x0610(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_611[0x7];                                      // 0x0611(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_SelectVector_ReturnValue_11;              // 0x0618(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_2;      // 0x0630(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_3;           // 0x0648(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinePlaneIntersection_OriginNormal_T_2;   // 0x0660(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_664[0x4];                                      // 0x0664(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_LinePlaneIntersection_OriginNormal_Intersection_2; // 0x0668(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LinePlaneIntersection_OriginNormal_ReturnValue_2; // 0x0680(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_681[0x7];                                      // 0x0681(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_5;      // 0x0688(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ProjectVectorOnToVector_ReturnValue_2;    // 0x06A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_GetTranslationFromCurrentMode) == 0x000010, "Wrong alignment on B_CreativePlayerController_C_GetTranslationFromCurrentMode");
static_assert(sizeof(B_CreativePlayerController_C_GetTranslationFromCurrentMode) == 0x0006C0, "Wrong size on B_CreativePlayerController_C_GetTranslationFromCurrentMode");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, EditingActor) == 0x000000, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::EditingActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, Translation) == 0x000008, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::Translation' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, ProjectedVector) == 0x000020, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::ProjectedVector' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, DirectionY) == 0x000038, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::DirectionY' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, DirectionX) == 0x000040, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::DirectionX' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, ActorStartY) == 0x000048, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::ActorStartY' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, ActorStartX) == 0x000050, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::ActorStartX' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, MouseY) == 0x000058, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::MouseY' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, MouseX) == 0x00005C, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::MouseX' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, UsedTransform) == 0x000060, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::UsedTransform' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, Projected) == 0x0000C0, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::Projected' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, Cross) == 0x0000D0, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::Cross' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_K2_GetPawn_ReturnValue) == 0x0000E8, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_K2_GetPawn_ReturnValue_1) == 0x0000F0, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_K2_GetPawn_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000F8, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000110, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000128, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x000140, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_Normal_ReturnValue) == 0x000158, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_Normal_ReturnValue_1) == 0x000170, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_Normal_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000188, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_K2_GetPawn_ReturnValue_2) == 0x0001A0, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_K2_GetPawn_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x0001A8, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_Subtract_VectorVector_ReturnValue_2) == 0x0001C0, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_Subtract_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_GetActorForwardVector_ReturnValue) == 0x0001D8, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_Normal_ReturnValue_2) == 0x0001F0, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_Normal_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_SelectVector_ReturnValue) == 0x000208, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_SelectVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_GetActorUpVector_ReturnValue) == 0x000220, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_GetActorUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_Conv_DoubleToVector_ReturnValue_1) == 0x000238, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_Conv_DoubleToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_SelectVector_ReturnValue_1) == 0x000250, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_SelectVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_GetActorUpVector_ReturnValue_1) == 0x000268, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_GetActorUpVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_SelectVector_ReturnValue_2) == 0x000280, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_SelectVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_Add_VectorVector_ReturnValue) == 0x000298, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_GetActorUpVector_ReturnValue_2) == 0x0002B0, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_GetActorUpVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_GetActorRightVector_ReturnValue) == 0x0002C8, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_GetActorRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_GetActorRightVector_ReturnValue_1) == 0x0002E0, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_GetActorRightVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_GetActorForwardVector_ReturnValue_1) == 0x0002F8, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_GetActorForwardVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_GetActorForwardVector_ReturnValue_2) == 0x000310, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_GetActorForwardVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_Conv_DoubleToVector_ReturnValue_2) == 0x000328, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_Conv_DoubleToVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_GetActorRightVector_ReturnValue_2) == 0x000340, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_GetActorRightVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, K2Node_SwitchEnum_CmpSuccess) == 0x000358, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_SelectVector_ReturnValue_3) == 0x000360, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_SelectVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_SelectVector_ReturnValue_4) == 0x000378, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_SelectVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_SelectVector_ReturnValue_5) == 0x000390, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_SelectVector_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_Dot_VectorVector_ReturnValue) == 0x0003A8, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_SelectVector_ReturnValue_6) == 0x0003B0, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_SelectVector_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_Abs_ReturnValue) == 0x0003C8, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_Dot_VectorVector_ReturnValue_1) == 0x0003D0, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_Dot_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x0003D8, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_Abs_ReturnValue_1) == 0x0003E0, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_SelectVector_ReturnValue_7) == 0x0003E8, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_SelectVector_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x000400, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_SelectVector_ReturnValue_8) == 0x000408, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_SelectVector_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_DeprojectMousePositionToWorld_WorldLocation) == 0x000420, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_DeprojectMousePositionToWorld_WorldLocation' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_DeprojectMousePositionToWorld_WorldDirection) == 0x000438, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_DeprojectMousePositionToWorld_WorldDirection' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_DeprojectMousePositionToWorld_ReturnValue) == 0x000450, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_DeprojectMousePositionToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000458, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000470, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_DeprojectMousePositionToWorld_WorldLocation_1) == 0x000488, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_DeprojectMousePositionToWorld_WorldLocation_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_DeprojectMousePositionToWorld_WorldDirection_1) == 0x0004A0, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_DeprojectMousePositionToWorld_WorldDirection_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_DeprojectMousePositionToWorld_ReturnValue_1) == 0x0004B8, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_DeprojectMousePositionToWorld_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_LinePlaneIntersection_OriginNormal_T) == 0x0004BC, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_LinePlaneIntersection_OriginNormal_T' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_LinePlaneIntersection_OriginNormal_Intersection) == 0x0004C0, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_LinePlaneIntersection_OriginNormal_Intersection' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_LinePlaneIntersection_OriginNormal_ReturnValue) == 0x0004D8, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_LinePlaneIntersection_OriginNormal_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_Subtract_VectorVector_ReturnValue_3) == 0x0004E0, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_Subtract_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_Multiply_VectorVector_ReturnValue_1) == 0x0004F8, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_Multiply_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_ProjectVectorOnToVector_ReturnValue) == 0x000510, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_ProjectVectorOnToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_Add_VectorVector_ReturnValue_2) == 0x000528, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_LinePlaneIntersection_OriginNormal_T_1) == 0x000540, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_LinePlaneIntersection_OriginNormal_T_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_LinePlaneIntersection_OriginNormal_Intersection_1) == 0x000548, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_LinePlaneIntersection_OriginNormal_Intersection_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_LinePlaneIntersection_OriginNormal_ReturnValue_1) == 0x000560, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_LinePlaneIntersection_OriginNormal_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_SelectVector_ReturnValue_9) == 0x000568, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_SelectVector_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_Subtract_VectorVector_ReturnValue_4) == 0x000580, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_Subtract_VectorVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_ProjectVectorOnToVector_ReturnValue_1) == 0x000598, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_ProjectVectorOnToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_SelectVector_ReturnValue_10) == 0x0005B0, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_SelectVector_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_Dot_VectorVector_ReturnValue_2) == 0x0005C8, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_Dot_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_Abs_ReturnValue_2) == 0x0005D0, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_Abs_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_Greater_DoubleDouble_ReturnValue_2) == 0x0005D8, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_Greater_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_DeprojectMousePositionToWorld_WorldLocation_2) == 0x0005E0, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_DeprojectMousePositionToWorld_WorldLocation_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_DeprojectMousePositionToWorld_WorldDirection_2) == 0x0005F8, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_DeprojectMousePositionToWorld_WorldDirection_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_DeprojectMousePositionToWorld_ReturnValue_2) == 0x000610, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_DeprojectMousePositionToWorld_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_SelectVector_ReturnValue_11) == 0x000618, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_SelectVector_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_Multiply_VectorVector_ReturnValue_2) == 0x000630, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_Multiply_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_Add_VectorVector_ReturnValue_3) == 0x000648, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_Add_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_LinePlaneIntersection_OriginNormal_T_2) == 0x000660, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_LinePlaneIntersection_OriginNormal_T_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_LinePlaneIntersection_OriginNormal_Intersection_2) == 0x000668, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_LinePlaneIntersection_OriginNormal_Intersection_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_LinePlaneIntersection_OriginNormal_ReturnValue_2) == 0x000680, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_LinePlaneIntersection_OriginNormal_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_Subtract_VectorVector_ReturnValue_5) == 0x000688, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_Subtract_VectorVector_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetTranslationFromCurrentMode, CallFunc_ProjectVectorOnToVector_ReturnValue_2) == 0x0006A0, "Member 'B_CreativePlayerController_C_GetTranslationFromCurrentMode::CallFunc_ProjectVectorOnToVector_ReturnValue_2' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.Handle Mouse Wheel Axis
// 0x0260 (0x0260 - 0x0000)
struct B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis final
{
public:
	double                                        Axis;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AddScaleValue;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 EditingActor;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlacing_IsPlacing;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_DoubleDouble_ReturnValue;        // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAnchorActor_AnchorActor;               // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetAnchorActor_AnchorActor_1;             // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlacingPrefab_Placing_Group;            // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_StaticMeshProp_C*                    K2Node_DynamicCast_AsB_Static_Mesh_Prop;           // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlacingPrefab_Placing_Group_1;          // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_CreativeSpectator_C*                 K2Node_DynamicCast_AsB_Creative_Spectator;         // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_AddToMovementSpeedMutliplier_NewMovementSpeedMultiplier; // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddToMovementSpeedMutliplier_ValueChanged; // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_CreativeHUD_C*                      K2Node_DynamicCast_AsWB_Creative_HUD;              // 0x0098(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_AddActorWorldRotation_SweepHitResult;  // 0x00C8(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D4[0x4];                                      // 0x01D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x01E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Add_VectorFloat_ReturnValue;              // 0x01F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_ClampScaleOfTargetOrAnchorActor_ClampedScale; // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0230(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24C[0x4];                                      // 0x024C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_B_ImplicitCast;          // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast_1;           // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis");
static_assert(sizeof(B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis) == 0x000260, "Wrong size on B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis");
static_assert(offsetof(B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis, Axis) == 0x000000, "Member 'B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis::Axis' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis, AddScaleValue) == 0x000008, "Member 'B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis::AddScaleValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis, EditingActor) == 0x000010, "Member 'B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis::EditingActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis, CallFunc_IsPlacing_IsPlacing) == 0x000018, "Member 'B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis::CallFunc_IsPlacing_IsPlacing' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis, CallFunc_NotEqual_DoubleDouble_ReturnValue) == 0x000019, "Member 'B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis::CallFunc_NotEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis, CallFunc_GetAnchorActor_AnchorActor) == 0x000020, "Member 'B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis::CallFunc_GetAnchorActor_AnchorActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis, CallFunc_GetAnchorActor_AnchorActor_1) == 0x000028, "Member 'B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis::CallFunc_GetAnchorActor_AnchorActor_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis, CallFunc_IsPlacingPrefab_Placing_Group) == 0x000030, "Member 'B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis::CallFunc_IsPlacingPrefab_Placing_Group' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis, K2Node_DynamicCast_AsB_Static_Mesh_Prop) == 0x000038, "Member 'B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis::K2Node_DynamicCast_AsB_Static_Mesh_Prop' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000048, "Member 'B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis, CallFunc_IsPlacingPrefab_Placing_Group_1) == 0x000050, "Member 'B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis::CallFunc_IsPlacingPrefab_Placing_Group_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis, CallFunc_K2_GetPawn_ReturnValue) == 0x000058, "Member 'B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis, CallFunc_GetGameInstance_ReturnValue) == 0x000060, "Member 'B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis, K2Node_DynamicCast_AsB_Creative_Spectator) == 0x000068, "Member 'B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis::K2Node_DynamicCast_AsB_Creative_Spectator' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis, K2Node_DynamicCast_bSuccess_1) == 0x000070, "Member 'B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis, K2Node_DynamicCast_AsB_Game_Instance) == 0x000078, "Member 'B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis, K2Node_DynamicCast_bSuccess_2) == 0x000080, "Member 'B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis, CallFunc_AddToMovementSpeedMutliplier_NewMovementSpeedMultiplier) == 0x000088, "Member 'B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis::CallFunc_AddToMovementSpeedMutliplier_NewMovementSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis, CallFunc_AddToMovementSpeedMutliplier_ValueChanged) == 0x000090, "Member 'B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis::CallFunc_AddToMovementSpeedMutliplier_ValueChanged' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis, K2Node_DynamicCast_AsWB_Creative_HUD) == 0x000098, "Member 'B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis::K2Node_DynamicCast_AsWB_Creative_HUD' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis, K2Node_DynamicCast_bSuccess_3) == 0x0000A0, "Member 'B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x0000A8, "Member 'B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis, CallFunc_MakeRotator_ReturnValue) == 0x0000B0, "Member 'B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis, CallFunc_K2_AddActorWorldRotation_SweepHitResult) == 0x0000C8, "Member 'B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis::CallFunc_K2_AddActorWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x0001C0, "Member 'B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis, CallFunc_BreakRotator_Roll) == 0x0001C8, "Member 'B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis, CallFunc_BreakRotator_Pitch) == 0x0001CC, "Member 'B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis, CallFunc_BreakRotator_Yaw) == 0x0001D0, "Member 'B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis, CallFunc_Add_DoubleDouble_ReturnValue) == 0x0001D8, "Member 'B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis, CallFunc_MakeRotator_ReturnValue_1) == 0x0001E0, "Member 'B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis, CallFunc_Add_VectorFloat_ReturnValue) == 0x0001F8, "Member 'B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis::CallFunc_Add_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis, CallFunc_BreakVector_X) == 0x000210, "Member 'B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis, CallFunc_BreakVector_Y) == 0x000218, "Member 'B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis, CallFunc_BreakVector_Z) == 0x000220, "Member 'B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis, CallFunc_ClampScaleOfTargetOrAnchorActor_ClampedScale) == 0x000228, "Member 'B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis::CallFunc_ClampScaleOfTargetOrAnchorActor_ClampedScale' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000230, "Member 'B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x000248, "Member 'B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis, CallFunc_Add_DoubleDouble_B_ImplicitCast) == 0x000250, "Member 'B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis::CallFunc_Add_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis, CallFunc_MakeRotator_Yaw_ImplicitCast_1) == 0x000258, "Member 'B_CreativePlayerController_C_Handle_Mouse_Wheel_Axis::CallFunc_MakeRotator_Yaw_ImplicitCast_1' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.HandleDelete
// 0x0028 (0x0028 - 0x0000)
struct B_CreativePlayerController_C_HandleDelete final
{
public:
	class ABP_PlaceableActor_C*                   PlaceableActorToDelete;                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AB_StaticMeshProp_C*                    PropToDelete;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasSelectedSomething_HasSelectedActor;    // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_HandleDelete) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_HandleDelete");
static_assert(sizeof(B_CreativePlayerController_C_HandleDelete) == 0x000028, "Wrong size on B_CreativePlayerController_C_HandleDelete");
static_assert(offsetof(B_CreativePlayerController_C_HandleDelete, PlaceableActorToDelete) == 0x000000, "Member 'B_CreativePlayerController_C_HandleDelete::PlaceableActorToDelete' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_HandleDelete, PropToDelete) == 0x000008, "Member 'B_CreativePlayerController_C_HandleDelete::PropToDelete' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_HandleDelete, CallFunc_GetGameInstance_ReturnValue) == 0x000010, "Member 'B_CreativePlayerController_C_HandleDelete::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_HandleDelete, K2Node_DynamicCast_AsB_Game_Instance) == 0x000018, "Member 'B_CreativePlayerController_C_HandleDelete::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_HandleDelete, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'B_CreativePlayerController_C_HandleDelete::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_HandleDelete, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000021, "Member 'B_CreativePlayerController_C_HandleDelete::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_HandleDelete, CallFunc_HasSelectedSomething_HasSelectedActor) == 0x000022, "Member 'B_CreativePlayerController_C_HandleDelete::CallFunc_HasSelectedSomething_HasSelectedActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_HandleDelete, CallFunc_BooleanAND_ReturnValue) == 0x000023, "Member 'B_CreativePlayerController_C_HandleDelete::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.HandleMiddleMouseButton
// 0x0003 (0x0003 - 0x0000)
struct B_CreativePlayerController_C_HandleMiddleMouseButton final
{
public:
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_HandleMiddleMouseButton) == 0x000001, "Wrong alignment on B_CreativePlayerController_C_HandleMiddleMouseButton");
static_assert(sizeof(B_CreativePlayerController_C_HandleMiddleMouseButton) == 0x000003, "Wrong size on B_CreativePlayerController_C_HandleMiddleMouseButton");
static_assert(offsetof(B_CreativePlayerController_C_HandleMiddleMouseButton, K2Node_SwitchEnum_CmpSuccess) == 0x000000, "Member 'B_CreativePlayerController_C_HandleMiddleMouseButton::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_HandleMiddleMouseButton, K2Node_SwitchEnum_CmpSuccess_1) == 0x000001, "Member 'B_CreativePlayerController_C_HandleMiddleMouseButton::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_HandleMiddleMouseButton, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'B_CreativePlayerController_C_HandleMiddleMouseButton::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.HandleResetScale
// 0x0090 (0x0090 - 0x0000)
struct B_CreativePlayerController_C_HandleResetScale final
{
public:
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlacing_IsPlacing;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item_1;                         // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetAnchorActor_AnchorActor;               // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetAnchorActor_AnchorActor_1;             // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_StaticMeshProp_C*                    K2Node_DynamicCast_AsB_Static_Mesh_Prop;           // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlaceableActor_C*                   K2Node_DynamicCast_AsBP_Placeable_Actor;           // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_HandleResetScale) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_HandleResetScale");
static_assert(sizeof(B_CreativePlayerController_C_HandleResetScale) == 0x000090, "Wrong size on B_CreativePlayerController_C_HandleResetScale");
static_assert(offsetof(B_CreativePlayerController_C_HandleResetScale, Temp_int_Loop_Counter_Variable) == 0x000000, "Member 'B_CreativePlayerController_C_HandleResetScale::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_HandleResetScale, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'B_CreativePlayerController_C_HandleResetScale::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_HandleResetScale, Temp_int_Array_Index_Variable) == 0x000008, "Member 'B_CreativePlayerController_C_HandleResetScale::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_HandleResetScale, CallFunc_IsPlacing_IsPlacing) == 0x00000C, "Member 'B_CreativePlayerController_C_HandleResetScale::CallFunc_IsPlacing_IsPlacing' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_HandleResetScale, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'B_CreativePlayerController_C_HandleResetScale::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_HandleResetScale, K2Node_SwitchEnum_CmpSuccess) == 0x000014, "Member 'B_CreativePlayerController_C_HandleResetScale::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_HandleResetScale, Temp_int_Loop_Counter_Variable_1) == 0x000018, "Member 'B_CreativePlayerController_C_HandleResetScale::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_HandleResetScale, CallFunc_Less_IntInt_ReturnValue) == 0x00001C, "Member 'B_CreativePlayerController_C_HandleResetScale::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_HandleResetScale, CallFunc_Array_Get_Item) == 0x000020, "Member 'B_CreativePlayerController_C_HandleResetScale::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_HandleResetScale, CallFunc_Array_Length_ReturnValue_1) == 0x000028, "Member 'B_CreativePlayerController_C_HandleResetScale::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_HandleResetScale, CallFunc_Add_IntInt_ReturnValue_1) == 0x00002C, "Member 'B_CreativePlayerController_C_HandleResetScale::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_HandleResetScale, CallFunc_Less_IntInt_ReturnValue_1) == 0x000030, "Member 'B_CreativePlayerController_C_HandleResetScale::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_HandleResetScale, Temp_int_Array_Index_Variable_1) == 0x000034, "Member 'B_CreativePlayerController_C_HandleResetScale::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_HandleResetScale, K2Node_SwitchEnum_CmpSuccess_1) == 0x000038, "Member 'B_CreativePlayerController_C_HandleResetScale::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_HandleResetScale, CallFunc_Array_Get_Item_1) == 0x000040, "Member 'B_CreativePlayerController_C_HandleResetScale::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_HandleResetScale, CallFunc_GetAnchorActor_AnchorActor) == 0x000048, "Member 'B_CreativePlayerController_C_HandleResetScale::CallFunc_GetAnchorActor_AnchorActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_HandleResetScale, CallFunc_GetAnchorActor_AnchorActor_1) == 0x000050, "Member 'B_CreativePlayerController_C_HandleResetScale::CallFunc_GetAnchorActor_AnchorActor_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_HandleResetScale, K2Node_DynamicCast_AsB_Static_Mesh_Prop) == 0x000058, "Member 'B_CreativePlayerController_C_HandleResetScale::K2Node_DynamicCast_AsB_Static_Mesh_Prop' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_HandleResetScale, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'B_CreativePlayerController_C_HandleResetScale::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_HandleResetScale, K2Node_DynamicCast_AsBP_Placeable_Actor) == 0x000068, "Member 'B_CreativePlayerController_C_HandleResetScale::K2Node_DynamicCast_AsBP_Placeable_Actor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_HandleResetScale, K2Node_DynamicCast_bSuccess_1) == 0x000070, "Member 'B_CreativePlayerController_C_HandleResetScale::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_HandleResetScale, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000078, "Member 'B_CreativePlayerController_C_HandleResetScale::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.HasSelectedSomething
// 0x000C (0x000C - 0x0000)
struct B_CreativePlayerController_C_HasSelectedSomething final
{
public:
	bool                                          HasSelectedActor;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_HasSelectedSomething) == 0x000004, "Wrong alignment on B_CreativePlayerController_C_HasSelectedSomething");
static_assert(sizeof(B_CreativePlayerController_C_HasSelectedSomething) == 0x00000C, "Wrong size on B_CreativePlayerController_C_HasSelectedSomething");
static_assert(offsetof(B_CreativePlayerController_C_HasSelectedSomething, HasSelectedActor) == 0x000000, "Member 'B_CreativePlayerController_C_HasSelectedSomething::HasSelectedActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_HasSelectedSomething, CallFunc_Array_Length_ReturnValue) == 0x000004, "Member 'B_CreativePlayerController_C_HasSelectedSomething::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_HasSelectedSomething, CallFunc_Greater_IntInt_ReturnValue) == 0x000008, "Member 'B_CreativePlayerController_C_HasSelectedSomething::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.IncreasePropAndPlaceableActorAmount
// 0x0070 (0x0070 - 0x0000)
struct B_CreativePlayerController_C_IncreasePropAndPlaceableActorAmount final
{
public:
	TArray<class AActor*>                         ActorsToTest;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         PropAmount;                                        // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PlaceableActorsAmount;                             // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PlaceableActorCount;                               // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PropCount;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_PlaceableActor_C*                   K2Node_DynamicCast_AsBP_Placeable_Actor;           // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_StaticMeshProp_C*                    K2Node_DynamicCast_AsB_Static_Mesh_Prop;           // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_IncreasePropAndPlaceableActorAmount) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_IncreasePropAndPlaceableActorAmount");
static_assert(sizeof(B_CreativePlayerController_C_IncreasePropAndPlaceableActorAmount) == 0x000070, "Wrong size on B_CreativePlayerController_C_IncreasePropAndPlaceableActorAmount");
static_assert(offsetof(B_CreativePlayerController_C_IncreasePropAndPlaceableActorAmount, ActorsToTest) == 0x000000, "Member 'B_CreativePlayerController_C_IncreasePropAndPlaceableActorAmount::ActorsToTest' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_IncreasePropAndPlaceableActorAmount, PropAmount) == 0x000010, "Member 'B_CreativePlayerController_C_IncreasePropAndPlaceableActorAmount::PropAmount' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_IncreasePropAndPlaceableActorAmount, PlaceableActorsAmount) == 0x000014, "Member 'B_CreativePlayerController_C_IncreasePropAndPlaceableActorAmount::PlaceableActorsAmount' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_IncreasePropAndPlaceableActorAmount, PlaceableActorCount) == 0x000018, "Member 'B_CreativePlayerController_C_IncreasePropAndPlaceableActorAmount::PlaceableActorCount' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_IncreasePropAndPlaceableActorAmount, PropCount) == 0x00001C, "Member 'B_CreativePlayerController_C_IncreasePropAndPlaceableActorAmount::PropCount' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_IncreasePropAndPlaceableActorAmount, Temp_int_Variable) == 0x000020, "Member 'B_CreativePlayerController_C_IncreasePropAndPlaceableActorAmount::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_IncreasePropAndPlaceableActorAmount, CallFunc_Array_Length_ReturnValue) == 0x000024, "Member 'B_CreativePlayerController_C_IncreasePropAndPlaceableActorAmount::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_IncreasePropAndPlaceableActorAmount, Temp_int_Variable_1) == 0x000028, "Member 'B_CreativePlayerController_C_IncreasePropAndPlaceableActorAmount::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_IncreasePropAndPlaceableActorAmount, Temp_int_Loop_Counter_Variable) == 0x00002C, "Member 'B_CreativePlayerController_C_IncreasePropAndPlaceableActorAmount::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_IncreasePropAndPlaceableActorAmount, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'B_CreativePlayerController_C_IncreasePropAndPlaceableActorAmount::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_IncreasePropAndPlaceableActorAmount, CallFunc_Add_IntInt_ReturnValue) == 0x000034, "Member 'B_CreativePlayerController_C_IncreasePropAndPlaceableActorAmount::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_IncreasePropAndPlaceableActorAmount, Temp_int_Array_Index_Variable) == 0x000038, "Member 'B_CreativePlayerController_C_IncreasePropAndPlaceableActorAmount::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_IncreasePropAndPlaceableActorAmount, CallFunc_Array_Get_Item) == 0x000040, "Member 'B_CreativePlayerController_C_IncreasePropAndPlaceableActorAmount::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_IncreasePropAndPlaceableActorAmount, K2Node_DynamicCast_AsBP_Placeable_Actor) == 0x000048, "Member 'B_CreativePlayerController_C_IncreasePropAndPlaceableActorAmount::K2Node_DynamicCast_AsBP_Placeable_Actor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_IncreasePropAndPlaceableActorAmount, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'B_CreativePlayerController_C_IncreasePropAndPlaceableActorAmount::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_IncreasePropAndPlaceableActorAmount, K2Node_DynamicCast_AsB_Static_Mesh_Prop) == 0x000058, "Member 'B_CreativePlayerController_C_IncreasePropAndPlaceableActorAmount::K2Node_DynamicCast_AsB_Static_Mesh_Prop' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_IncreasePropAndPlaceableActorAmount, K2Node_DynamicCast_bSuccess_1) == 0x000060, "Member 'B_CreativePlayerController_C_IncreasePropAndPlaceableActorAmount::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_IncreasePropAndPlaceableActorAmount, CallFunc_Add_IntInt_ReturnValue_1) == 0x000064, "Member 'B_CreativePlayerController_C_IncreasePropAndPlaceableActorAmount::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_IncreasePropAndPlaceableActorAmount, CallFunc_Add_IntInt_ReturnValue_2) == 0x000068, "Member 'B_CreativePlayerController_C_IncreasePropAndPlaceableActorAmount::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.InpActEvt_Action_K2Node_InputActionEvent_2
// 0x0018 (0x0018 - 0x0000)
struct B_CreativePlayerController_C_InpActEvt_Action_K2Node_InputActionEvent_2 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_InpActEvt_Action_K2Node_InputActionEvent_2) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_InpActEvt_Action_K2Node_InputActionEvent_2");
static_assert(sizeof(B_CreativePlayerController_C_InpActEvt_Action_K2Node_InputActionEvent_2) == 0x000018, "Wrong size on B_CreativePlayerController_C_InpActEvt_Action_K2Node_InputActionEvent_2");
static_assert(offsetof(B_CreativePlayerController_C_InpActEvt_Action_K2Node_InputActionEvent_2, Key) == 0x000000, "Member 'B_CreativePlayerController_C_InpActEvt_Action_K2Node_InputActionEvent_2::Key' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.InpActEvt_ActivateUtilitySkill_K2Node_InputActionEvent_8
// 0x0018 (0x0018 - 0x0000)
struct B_CreativePlayerController_C_InpActEvt_ActivateUtilitySkill_K2Node_InputActionEvent_8 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_InpActEvt_ActivateUtilitySkill_K2Node_InputActionEvent_8) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_InpActEvt_ActivateUtilitySkill_K2Node_InputActionEvent_8");
static_assert(sizeof(B_CreativePlayerController_C_InpActEvt_ActivateUtilitySkill_K2Node_InputActionEvent_8) == 0x000018, "Wrong size on B_CreativePlayerController_C_InpActEvt_ActivateUtilitySkill_K2Node_InputActionEvent_8");
static_assert(offsetof(B_CreativePlayerController_C_InpActEvt_ActivateUtilitySkill_K2Node_InputActionEvent_8, Key) == 0x000000, "Member 'B_CreativePlayerController_C_InpActEvt_ActivateUtilitySkill_K2Node_InputActionEvent_8::Key' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.InpActEvt_Delete_K2Node_InputKeyEvent_22
// 0x0018 (0x0018 - 0x0000)
struct B_CreativePlayerController_C_InpActEvt_Delete_K2Node_InputKeyEvent_22 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_InpActEvt_Delete_K2Node_InputKeyEvent_22) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_InpActEvt_Delete_K2Node_InputKeyEvent_22");
static_assert(sizeof(B_CreativePlayerController_C_InpActEvt_Delete_K2Node_InputKeyEvent_22) == 0x000018, "Wrong size on B_CreativePlayerController_C_InpActEvt_Delete_K2Node_InputKeyEvent_22");
static_assert(offsetof(B_CreativePlayerController_C_InpActEvt_Delete_K2Node_InputKeyEvent_22, Key) == 0x000000, "Member 'B_CreativePlayerController_C_InpActEvt_Delete_K2Node_InputKeyEvent_22::Key' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.InpActEvt_DragRightMouseButton_K2Node_InputActionEvent_3
// 0x0018 (0x0018 - 0x0000)
struct B_CreativePlayerController_C_InpActEvt_DragRightMouseButton_K2Node_InputActionEvent_3 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_InpActEvt_DragRightMouseButton_K2Node_InputActionEvent_3) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_InpActEvt_DragRightMouseButton_K2Node_InputActionEvent_3");
static_assert(sizeof(B_CreativePlayerController_C_InpActEvt_DragRightMouseButton_K2Node_InputActionEvent_3) == 0x000018, "Wrong size on B_CreativePlayerController_C_InpActEvt_DragRightMouseButton_K2Node_InputActionEvent_3");
static_assert(offsetof(B_CreativePlayerController_C_InpActEvt_DragRightMouseButton_K2Node_InputActionEvent_3, Key) == 0x000000, "Member 'B_CreativePlayerController_C_InpActEvt_DragRightMouseButton_K2Node_InputActionEvent_3::Key' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.InpActEvt_DragRightMouseButton_K2Node_InputActionEvent_4
// 0x0018 (0x0018 - 0x0000)
struct B_CreativePlayerController_C_InpActEvt_DragRightMouseButton_K2Node_InputActionEvent_4 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_InpActEvt_DragRightMouseButton_K2Node_InputActionEvent_4) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_InpActEvt_DragRightMouseButton_K2Node_InputActionEvent_4");
static_assert(sizeof(B_CreativePlayerController_C_InpActEvt_DragRightMouseButton_K2Node_InputActionEvent_4) == 0x000018, "Wrong size on B_CreativePlayerController_C_InpActEvt_DragRightMouseButton_K2Node_InputActionEvent_4");
static_assert(offsetof(B_CreativePlayerController_C_InpActEvt_DragRightMouseButton_K2Node_InputActionEvent_4, Key) == 0x000000, "Member 'B_CreativePlayerController_C_InpActEvt_DragRightMouseButton_K2Node_InputActionEvent_4::Key' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.InpActEvt_Eight_K2Node_InputKeyEvent_5
// 0x0018 (0x0018 - 0x0000)
struct B_CreativePlayerController_C_InpActEvt_Eight_K2Node_InputKeyEvent_5 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_InpActEvt_Eight_K2Node_InputKeyEvent_5) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_InpActEvt_Eight_K2Node_InputKeyEvent_5");
static_assert(sizeof(B_CreativePlayerController_C_InpActEvt_Eight_K2Node_InputKeyEvent_5) == 0x000018, "Wrong size on B_CreativePlayerController_C_InpActEvt_Eight_K2Node_InputKeyEvent_5");
static_assert(offsetof(B_CreativePlayerController_C_InpActEvt_Eight_K2Node_InputKeyEvent_5, Key) == 0x000000, "Member 'B_CreativePlayerController_C_InpActEvt_Eight_K2Node_InputKeyEvent_5::Key' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.InpActEvt_F2_K2Node_InputKeyEvent_3
// 0x0018 (0x0018 - 0x0000)
struct B_CreativePlayerController_C_InpActEvt_F2_K2Node_InputKeyEvent_3 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_InpActEvt_F2_K2Node_InputKeyEvent_3) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_InpActEvt_F2_K2Node_InputKeyEvent_3");
static_assert(sizeof(B_CreativePlayerController_C_InpActEvt_F2_K2Node_InputKeyEvent_3) == 0x000018, "Wrong size on B_CreativePlayerController_C_InpActEvt_F2_K2Node_InputKeyEvent_3");
static_assert(offsetof(B_CreativePlayerController_C_InpActEvt_F2_K2Node_InputKeyEvent_3, Key) == 0x000000, "Member 'B_CreativePlayerController_C_InpActEvt_F2_K2Node_InputKeyEvent_3::Key' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.InpActEvt_F3_K2Node_InputKeyEvent_2
// 0x0018 (0x0018 - 0x0000)
struct B_CreativePlayerController_C_InpActEvt_F3_K2Node_InputKeyEvent_2 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_InpActEvt_F3_K2Node_InputKeyEvent_2) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_InpActEvt_F3_K2Node_InputKeyEvent_2");
static_assert(sizeof(B_CreativePlayerController_C_InpActEvt_F3_K2Node_InputKeyEvent_2) == 0x000018, "Wrong size on B_CreativePlayerController_C_InpActEvt_F3_K2Node_InputKeyEvent_2");
static_assert(offsetof(B_CreativePlayerController_C_InpActEvt_F3_K2Node_InputKeyEvent_2, Key) == 0x000000, "Member 'B_CreativePlayerController_C_InpActEvt_F3_K2Node_InputKeyEvent_2::Key' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.InpActEvt_F4_K2Node_InputKeyEvent_1
// 0x0018 (0x0018 - 0x0000)
struct B_CreativePlayerController_C_InpActEvt_F4_K2Node_InputKeyEvent_1 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_InpActEvt_F4_K2Node_InputKeyEvent_1) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_InpActEvt_F4_K2Node_InputKeyEvent_1");
static_assert(sizeof(B_CreativePlayerController_C_InpActEvt_F4_K2Node_InputKeyEvent_1) == 0x000018, "Wrong size on B_CreativePlayerController_C_InpActEvt_F4_K2Node_InputKeyEvent_1");
static_assert(offsetof(B_CreativePlayerController_C_InpActEvt_F4_K2Node_InputKeyEvent_1, Key) == 0x000000, "Member 'B_CreativePlayerController_C_InpActEvt_F4_K2Node_InputKeyEvent_1::Key' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.InpActEvt_F5_K2Node_InputKeyEvent_0
// 0x0018 (0x0018 - 0x0000)
struct B_CreativePlayerController_C_InpActEvt_F5_K2Node_InputKeyEvent_0 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_InpActEvt_F5_K2Node_InputKeyEvent_0) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_InpActEvt_F5_K2Node_InputKeyEvent_0");
static_assert(sizeof(B_CreativePlayerController_C_InpActEvt_F5_K2Node_InputKeyEvent_0) == 0x000018, "Wrong size on B_CreativePlayerController_C_InpActEvt_F5_K2Node_InputKeyEvent_0");
static_assert(offsetof(B_CreativePlayerController_C_InpActEvt_F5_K2Node_InputKeyEvent_0, Key) == 0x000000, "Member 'B_CreativePlayerController_C_InpActEvt_F5_K2Node_InputKeyEvent_0::Key' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.InpActEvt_Fire_K2Node_InputActionEvent_10
// 0x0018 (0x0018 - 0x0000)
struct B_CreativePlayerController_C_InpActEvt_Fire_K2Node_InputActionEvent_10 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_InpActEvt_Fire_K2Node_InputActionEvent_10) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_InpActEvt_Fire_K2Node_InputActionEvent_10");
static_assert(sizeof(B_CreativePlayerController_C_InpActEvt_Fire_K2Node_InputActionEvent_10) == 0x000018, "Wrong size on B_CreativePlayerController_C_InpActEvt_Fire_K2Node_InputActionEvent_10");
static_assert(offsetof(B_CreativePlayerController_C_InpActEvt_Fire_K2Node_InputActionEvent_10, Key) == 0x000000, "Member 'B_CreativePlayerController_C_InpActEvt_Fire_K2Node_InputActionEvent_10::Key' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.InpActEvt_Fire_K2Node_InputActionEvent_9
// 0x0018 (0x0018 - 0x0000)
struct B_CreativePlayerController_C_InpActEvt_Fire_K2Node_InputActionEvent_9 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_InpActEvt_Fire_K2Node_InputActionEvent_9) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_InpActEvt_Fire_K2Node_InputActionEvent_9");
static_assert(sizeof(B_CreativePlayerController_C_InpActEvt_Fire_K2Node_InputActionEvent_9) == 0x000018, "Wrong size on B_CreativePlayerController_C_InpActEvt_Fire_K2Node_InputActionEvent_9");
static_assert(offsetof(B_CreativePlayerController_C_InpActEvt_Fire_K2Node_InputActionEvent_9, Key) == 0x000000, "Member 'B_CreativePlayerController_C_InpActEvt_Fire_K2Node_InputActionEvent_9::Key' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.InpActEvt_Five_K2Node_InputKeyEvent_12
// 0x0018 (0x0018 - 0x0000)
struct B_CreativePlayerController_C_InpActEvt_Five_K2Node_InputKeyEvent_12 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_InpActEvt_Five_K2Node_InputKeyEvent_12) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_InpActEvt_Five_K2Node_InputKeyEvent_12");
static_assert(sizeof(B_CreativePlayerController_C_InpActEvt_Five_K2Node_InputKeyEvent_12) == 0x000018, "Wrong size on B_CreativePlayerController_C_InpActEvt_Five_K2Node_InputKeyEvent_12");
static_assert(offsetof(B_CreativePlayerController_C_InpActEvt_Five_K2Node_InputKeyEvent_12, Key) == 0x000000, "Member 'B_CreativePlayerController_C_InpActEvt_Five_K2Node_InputKeyEvent_12::Key' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.InpActEvt_Four_K2Node_InputKeyEvent_13
// 0x0018 (0x0018 - 0x0000)
struct B_CreativePlayerController_C_InpActEvt_Four_K2Node_InputKeyEvent_13 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_InpActEvt_Four_K2Node_InputKeyEvent_13) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_InpActEvt_Four_K2Node_InputKeyEvent_13");
static_assert(sizeof(B_CreativePlayerController_C_InpActEvt_Four_K2Node_InputKeyEvent_13) == 0x000018, "Wrong size on B_CreativePlayerController_C_InpActEvt_Four_K2Node_InputKeyEvent_13");
static_assert(offsetof(B_CreativePlayerController_C_InpActEvt_Four_K2Node_InputKeyEvent_13, Key) == 0x000000, "Member 'B_CreativePlayerController_C_InpActEvt_Four_K2Node_InputKeyEvent_13::Key' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.InpActEvt_LeftAlt_K2Node_InputKeyEvent_16
// 0x0018 (0x0018 - 0x0000)
struct B_CreativePlayerController_C_InpActEvt_LeftAlt_K2Node_InputKeyEvent_16 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_InpActEvt_LeftAlt_K2Node_InputKeyEvent_16) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_InpActEvt_LeftAlt_K2Node_InputKeyEvent_16");
static_assert(sizeof(B_CreativePlayerController_C_InpActEvt_LeftAlt_K2Node_InputKeyEvent_16) == 0x000018, "Wrong size on B_CreativePlayerController_C_InpActEvt_LeftAlt_K2Node_InputKeyEvent_16");
static_assert(offsetof(B_CreativePlayerController_C_InpActEvt_LeftAlt_K2Node_InputKeyEvent_16, Key) == 0x000000, "Member 'B_CreativePlayerController_C_InpActEvt_LeftAlt_K2Node_InputKeyEvent_16::Key' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.InpActEvt_LeftAlt_K2Node_InputKeyEvent_17
// 0x0018 (0x0018 - 0x0000)
struct B_CreativePlayerController_C_InpActEvt_LeftAlt_K2Node_InputKeyEvent_17 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_InpActEvt_LeftAlt_K2Node_InputKeyEvent_17) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_InpActEvt_LeftAlt_K2Node_InputKeyEvent_17");
static_assert(sizeof(B_CreativePlayerController_C_InpActEvt_LeftAlt_K2Node_InputKeyEvent_17) == 0x000018, "Wrong size on B_CreativePlayerController_C_InpActEvt_LeftAlt_K2Node_InputKeyEvent_17");
static_assert(offsetof(B_CreativePlayerController_C_InpActEvt_LeftAlt_K2Node_InputKeyEvent_17, Key) == 0x000000, "Member 'B_CreativePlayerController_C_InpActEvt_LeftAlt_K2Node_InputKeyEvent_17::Key' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.InpActEvt_LeftShift_K2Node_InputKeyEvent_20
// 0x0018 (0x0018 - 0x0000)
struct B_CreativePlayerController_C_InpActEvt_LeftShift_K2Node_InputKeyEvent_20 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_InpActEvt_LeftShift_K2Node_InputKeyEvent_20) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_InpActEvt_LeftShift_K2Node_InputKeyEvent_20");
static_assert(sizeof(B_CreativePlayerController_C_InpActEvt_LeftShift_K2Node_InputKeyEvent_20) == 0x000018, "Wrong size on B_CreativePlayerController_C_InpActEvt_LeftShift_K2Node_InputKeyEvent_20");
static_assert(offsetof(B_CreativePlayerController_C_InpActEvt_LeftShift_K2Node_InputKeyEvent_20, Key) == 0x000000, "Member 'B_CreativePlayerController_C_InpActEvt_LeftShift_K2Node_InputKeyEvent_20::Key' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.InpActEvt_LeftShift_K2Node_InputKeyEvent_21
// 0x0018 (0x0018 - 0x0000)
struct B_CreativePlayerController_C_InpActEvt_LeftShift_K2Node_InputKeyEvent_21 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_InpActEvt_LeftShift_K2Node_InputKeyEvent_21) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_InpActEvt_LeftShift_K2Node_InputKeyEvent_21");
static_assert(sizeof(B_CreativePlayerController_C_InpActEvt_LeftShift_K2Node_InputKeyEvent_21) == 0x000018, "Wrong size on B_CreativePlayerController_C_InpActEvt_LeftShift_K2Node_InputKeyEvent_21");
static_assert(offsetof(B_CreativePlayerController_C_InpActEvt_LeftShift_K2Node_InputKeyEvent_21, Key) == 0x000000, "Member 'B_CreativePlayerController_C_InpActEvt_LeftShift_K2Node_InputKeyEvent_21::Key' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.InpActEvt_Menu_K2Node_InputActionEvent_7
// 0x0018 (0x0018 - 0x0000)
struct B_CreativePlayerController_C_InpActEvt_Menu_K2Node_InputActionEvent_7 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_InpActEvt_Menu_K2Node_InputActionEvent_7) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_InpActEvt_Menu_K2Node_InputActionEvent_7");
static_assert(sizeof(B_CreativePlayerController_C_InpActEvt_Menu_K2Node_InputActionEvent_7) == 0x000018, "Wrong size on B_CreativePlayerController_C_InpActEvt_Menu_K2Node_InputActionEvent_7");
static_assert(offsetof(B_CreativePlayerController_C_InpActEvt_Menu_K2Node_InputActionEvent_7, Key) == 0x000000, "Member 'B_CreativePlayerController_C_InpActEvt_Menu_K2Node_InputActionEvent_7::Key' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.InpActEvt_MiddleMouseButton_K2Node_InputKeyEvent_19
// 0x0018 (0x0018 - 0x0000)
struct B_CreativePlayerController_C_InpActEvt_MiddleMouseButton_K2Node_InputKeyEvent_19 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_InpActEvt_MiddleMouseButton_K2Node_InputKeyEvent_19) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_InpActEvt_MiddleMouseButton_K2Node_InputKeyEvent_19");
static_assert(sizeof(B_CreativePlayerController_C_InpActEvt_MiddleMouseButton_K2Node_InputKeyEvent_19) == 0x000018, "Wrong size on B_CreativePlayerController_C_InpActEvt_MiddleMouseButton_K2Node_InputKeyEvent_19");
static_assert(offsetof(B_CreativePlayerController_C_InpActEvt_MiddleMouseButton_K2Node_InputKeyEvent_19, Key) == 0x000000, "Member 'B_CreativePlayerController_C_InpActEvt_MiddleMouseButton_K2Node_InputKeyEvent_19::Key' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.InpActEvt_Nine_K2Node_InputKeyEvent_4
// 0x0018 (0x0018 - 0x0000)
struct B_CreativePlayerController_C_InpActEvt_Nine_K2Node_InputKeyEvent_4 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_InpActEvt_Nine_K2Node_InputKeyEvent_4) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_InpActEvt_Nine_K2Node_InputKeyEvent_4");
static_assert(sizeof(B_CreativePlayerController_C_InpActEvt_Nine_K2Node_InputKeyEvent_4) == 0x000018, "Wrong size on B_CreativePlayerController_C_InpActEvt_Nine_K2Node_InputKeyEvent_4");
static_assert(offsetof(B_CreativePlayerController_C_InpActEvt_Nine_K2Node_InputKeyEvent_4, Key) == 0x000000, "Member 'B_CreativePlayerController_C_InpActEvt_Nine_K2Node_InputKeyEvent_4::Key' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.InpActEvt_One_K2Node_InputKeyEvent_9
// 0x0018 (0x0018 - 0x0000)
struct B_CreativePlayerController_C_InpActEvt_One_K2Node_InputKeyEvent_9 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_InpActEvt_One_K2Node_InputKeyEvent_9) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_InpActEvt_One_K2Node_InputKeyEvent_9");
static_assert(sizeof(B_CreativePlayerController_C_InpActEvt_One_K2Node_InputKeyEvent_9) == 0x000018, "Wrong size on B_CreativePlayerController_C_InpActEvt_One_K2Node_InputKeyEvent_9");
static_assert(offsetof(B_CreativePlayerController_C_InpActEvt_One_K2Node_InputKeyEvent_9, Key) == 0x000000, "Member 'B_CreativePlayerController_C_InpActEvt_One_K2Node_InputKeyEvent_9::Key' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.InpActEvt_PlayerList_K2Node_InputActionEvent_5
// 0x0018 (0x0018 - 0x0000)
struct B_CreativePlayerController_C_InpActEvt_PlayerList_K2Node_InputActionEvent_5 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_InpActEvt_PlayerList_K2Node_InputActionEvent_5) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_InpActEvt_PlayerList_K2Node_InputActionEvent_5");
static_assert(sizeof(B_CreativePlayerController_C_InpActEvt_PlayerList_K2Node_InputActionEvent_5) == 0x000018, "Wrong size on B_CreativePlayerController_C_InpActEvt_PlayerList_K2Node_InputActionEvent_5");
static_assert(offsetof(B_CreativePlayerController_C_InpActEvt_PlayerList_K2Node_InputActionEvent_5, Key) == 0x000000, "Member 'B_CreativePlayerController_C_InpActEvt_PlayerList_K2Node_InputActionEvent_5::Key' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.InpActEvt_PlayerList_K2Node_InputActionEvent_6
// 0x0018 (0x0018 - 0x0000)
struct B_CreativePlayerController_C_InpActEvt_PlayerList_K2Node_InputActionEvent_6 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_InpActEvt_PlayerList_K2Node_InputActionEvent_6) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_InpActEvt_PlayerList_K2Node_InputActionEvent_6");
static_assert(sizeof(B_CreativePlayerController_C_InpActEvt_PlayerList_K2Node_InputActionEvent_6) == 0x000018, "Wrong size on B_CreativePlayerController_C_InpActEvt_PlayerList_K2Node_InputActionEvent_6");
static_assert(offsetof(B_CreativePlayerController_C_InpActEvt_PlayerList_K2Node_InputActionEvent_6, Key) == 0x000000, "Member 'B_CreativePlayerController_C_InpActEvt_PlayerList_K2Node_InputActionEvent_6::Key' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.InpActEvt_R_K2Node_InputKeyEvent_18
// 0x0018 (0x0018 - 0x0000)
struct B_CreativePlayerController_C_InpActEvt_R_K2Node_InputKeyEvent_18 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_InpActEvt_R_K2Node_InputKeyEvent_18) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_InpActEvt_R_K2Node_InputKeyEvent_18");
static_assert(sizeof(B_CreativePlayerController_C_InpActEvt_R_K2Node_InputKeyEvent_18) == 0x000018, "Wrong size on B_CreativePlayerController_C_InpActEvt_R_K2Node_InputKeyEvent_18");
static_assert(offsetof(B_CreativePlayerController_C_InpActEvt_R_K2Node_InputKeyEvent_18, Key) == 0x000000, "Member 'B_CreativePlayerController_C_InpActEvt_R_K2Node_InputKeyEvent_18::Key' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.InpActEvt_RightAlt_K2Node_InputKeyEvent_14
// 0x0018 (0x0018 - 0x0000)
struct B_CreativePlayerController_C_InpActEvt_RightAlt_K2Node_InputKeyEvent_14 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_InpActEvt_RightAlt_K2Node_InputKeyEvent_14) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_InpActEvt_RightAlt_K2Node_InputKeyEvent_14");
static_assert(sizeof(B_CreativePlayerController_C_InpActEvt_RightAlt_K2Node_InputKeyEvent_14) == 0x000018, "Wrong size on B_CreativePlayerController_C_InpActEvt_RightAlt_K2Node_InputKeyEvent_14");
static_assert(offsetof(B_CreativePlayerController_C_InpActEvt_RightAlt_K2Node_InputKeyEvent_14, Key) == 0x000000, "Member 'B_CreativePlayerController_C_InpActEvt_RightAlt_K2Node_InputKeyEvent_14::Key' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.InpActEvt_RightAlt_K2Node_InputKeyEvent_15
// 0x0018 (0x0018 - 0x0000)
struct B_CreativePlayerController_C_InpActEvt_RightAlt_K2Node_InputKeyEvent_15 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_InpActEvt_RightAlt_K2Node_InputKeyEvent_15) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_InpActEvt_RightAlt_K2Node_InputKeyEvent_15");
static_assert(sizeof(B_CreativePlayerController_C_InpActEvt_RightAlt_K2Node_InputKeyEvent_15) == 0x000018, "Wrong size on B_CreativePlayerController_C_InpActEvt_RightAlt_K2Node_InputKeyEvent_15");
static_assert(offsetof(B_CreativePlayerController_C_InpActEvt_RightAlt_K2Node_InputKeyEvent_15, Key) == 0x000000, "Member 'B_CreativePlayerController_C_InpActEvt_RightAlt_K2Node_InputKeyEvent_15::Key' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.InpActEvt_Seven_K2Node_InputKeyEvent_6
// 0x0018 (0x0018 - 0x0000)
struct B_CreativePlayerController_C_InpActEvt_Seven_K2Node_InputKeyEvent_6 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_InpActEvt_Seven_K2Node_InputKeyEvent_6) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_InpActEvt_Seven_K2Node_InputKeyEvent_6");
static_assert(sizeof(B_CreativePlayerController_C_InpActEvt_Seven_K2Node_InputKeyEvent_6) == 0x000018, "Wrong size on B_CreativePlayerController_C_InpActEvt_Seven_K2Node_InputKeyEvent_6");
static_assert(offsetof(B_CreativePlayerController_C_InpActEvt_Seven_K2Node_InputKeyEvent_6, Key) == 0x000000, "Member 'B_CreativePlayerController_C_InpActEvt_Seven_K2Node_InputKeyEvent_6::Key' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.InpActEvt_Six_K2Node_InputKeyEvent_11
// 0x0018 (0x0018 - 0x0000)
struct B_CreativePlayerController_C_InpActEvt_Six_K2Node_InputKeyEvent_11 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_InpActEvt_Six_K2Node_InputKeyEvent_11) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_InpActEvt_Six_K2Node_InputKeyEvent_11");
static_assert(sizeof(B_CreativePlayerController_C_InpActEvt_Six_K2Node_InputKeyEvent_11) == 0x000018, "Wrong size on B_CreativePlayerController_C_InpActEvt_Six_K2Node_InputKeyEvent_11");
static_assert(offsetof(B_CreativePlayerController_C_InpActEvt_Six_K2Node_InputKeyEvent_11, Key) == 0x000000, "Member 'B_CreativePlayerController_C_InpActEvt_Six_K2Node_InputKeyEvent_11::Key' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.InpActEvt_Three_K2Node_InputKeyEvent_7
// 0x0018 (0x0018 - 0x0000)
struct B_CreativePlayerController_C_InpActEvt_Three_K2Node_InputKeyEvent_7 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_InpActEvt_Three_K2Node_InputKeyEvent_7) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_InpActEvt_Three_K2Node_InputKeyEvent_7");
static_assert(sizeof(B_CreativePlayerController_C_InpActEvt_Three_K2Node_InputKeyEvent_7) == 0x000018, "Wrong size on B_CreativePlayerController_C_InpActEvt_Three_K2Node_InputKeyEvent_7");
static_assert(offsetof(B_CreativePlayerController_C_InpActEvt_Three_K2Node_InputKeyEvent_7, Key) == 0x000000, "Member 'B_CreativePlayerController_C_InpActEvt_Three_K2Node_InputKeyEvent_7::Key' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.InpActEvt_Two_K2Node_InputKeyEvent_8
// 0x0018 (0x0018 - 0x0000)
struct B_CreativePlayerController_C_InpActEvt_Two_K2Node_InputKeyEvent_8 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_InpActEvt_Two_K2Node_InputKeyEvent_8) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_InpActEvt_Two_K2Node_InputKeyEvent_8");
static_assert(sizeof(B_CreativePlayerController_C_InpActEvt_Two_K2Node_InputKeyEvent_8) == 0x000018, "Wrong size on B_CreativePlayerController_C_InpActEvt_Two_K2Node_InputKeyEvent_8");
static_assert(offsetof(B_CreativePlayerController_C_InpActEvt_Two_K2Node_InputKeyEvent_8, Key) == 0x000000, "Member 'B_CreativePlayerController_C_InpActEvt_Two_K2Node_InputKeyEvent_8::Key' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.InpActEvt_TypeChatMessage_K2Node_InputActionEvent_0
// 0x0018 (0x0018 - 0x0000)
struct B_CreativePlayerController_C_InpActEvt_TypeChatMessage_K2Node_InputActionEvent_0 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_InpActEvt_TypeChatMessage_K2Node_InputActionEvent_0) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_InpActEvt_TypeChatMessage_K2Node_InputActionEvent_0");
static_assert(sizeof(B_CreativePlayerController_C_InpActEvt_TypeChatMessage_K2Node_InputActionEvent_0) == 0x000018, "Wrong size on B_CreativePlayerController_C_InpActEvt_TypeChatMessage_K2Node_InputActionEvent_0");
static_assert(offsetof(B_CreativePlayerController_C_InpActEvt_TypeChatMessage_K2Node_InputActionEvent_0, Key) == 0x000000, "Member 'B_CreativePlayerController_C_InpActEvt_TypeChatMessage_K2Node_InputActionEvent_0::Key' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.InpActEvt_TypeTeamChatMessage_K2Node_InputActionEvent_1
// 0x0018 (0x0018 - 0x0000)
struct B_CreativePlayerController_C_InpActEvt_TypeTeamChatMessage_K2Node_InputActionEvent_1 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_InpActEvt_TypeTeamChatMessage_K2Node_InputActionEvent_1) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_InpActEvt_TypeTeamChatMessage_K2Node_InputActionEvent_1");
static_assert(sizeof(B_CreativePlayerController_C_InpActEvt_TypeTeamChatMessage_K2Node_InputActionEvent_1) == 0x000018, "Wrong size on B_CreativePlayerController_C_InpActEvt_TypeTeamChatMessage_K2Node_InputActionEvent_1");
static_assert(offsetof(B_CreativePlayerController_C_InpActEvt_TypeTeamChatMessage_K2Node_InputActionEvent_1, Key) == 0x000000, "Member 'B_CreativePlayerController_C_InpActEvt_TypeTeamChatMessage_K2Node_InputActionEvent_1::Key' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.InpActEvt_Zero_K2Node_InputKeyEvent_10
// 0x0018 (0x0018 - 0x0000)
struct B_CreativePlayerController_C_InpActEvt_Zero_K2Node_InputKeyEvent_10 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_InpActEvt_Zero_K2Node_InputKeyEvent_10) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_InpActEvt_Zero_K2Node_InputKeyEvent_10");
static_assert(sizeof(B_CreativePlayerController_C_InpActEvt_Zero_K2Node_InputKeyEvent_10) == 0x000018, "Wrong size on B_CreativePlayerController_C_InpActEvt_Zero_K2Node_InputKeyEvent_10");
static_assert(offsetof(B_CreativePlayerController_C_InpActEvt_Zero_K2Node_InputKeyEvent_10, Key) == 0x000000, "Member 'B_CreativePlayerController_C_InpActEvt_Zero_K2Node_InputKeyEvent_10::Key' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.InpAxisEvt_LookUp_K2Node_InputAxisEvent_1
// 0x0004 (0x0004 - 0x0000)
struct B_CreativePlayerController_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_1 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_1) == 0x000004, "Wrong alignment on B_CreativePlayerController_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_1");
static_assert(sizeof(B_CreativePlayerController_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_1) == 0x000004, "Wrong size on B_CreativePlayerController_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_1");
static_assert(offsetof(B_CreativePlayerController_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_1, AxisValue) == 0x000000, "Member 'B_CreativePlayerController_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_1::AxisValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.InpAxisEvt_Turn_K2Node_InputAxisEvent_0
// 0x0004 (0x0004 - 0x0000)
struct B_CreativePlayerController_C_InpAxisEvt_Turn_K2Node_InputAxisEvent_0 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_InpAxisEvt_Turn_K2Node_InputAxisEvent_0) == 0x000004, "Wrong alignment on B_CreativePlayerController_C_InpAxisEvt_Turn_K2Node_InputAxisEvent_0");
static_assert(sizeof(B_CreativePlayerController_C_InpAxisEvt_Turn_K2Node_InputAxisEvent_0) == 0x000004, "Wrong size on B_CreativePlayerController_C_InpAxisEvt_Turn_K2Node_InputAxisEvent_0");
static_assert(offsetof(B_CreativePlayerController_C_InpAxisEvt_Turn_K2Node_InputAxisEvent_0, AxisValue) == 0x000000, "Member 'B_CreativePlayerController_C_InpAxisEvt_Turn_K2Node_InputAxisEvent_0::AxisValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.InpAxisKeyEvt_MouseWheelAxis_K2Node_InputAxisKeyEvent_0
// 0x0004 (0x0004 - 0x0000)
struct B_CreativePlayerController_C_InpAxisKeyEvt_MouseWheelAxis_K2Node_InputAxisKeyEvent_0 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_InpAxisKeyEvt_MouseWheelAxis_K2Node_InputAxisKeyEvent_0) == 0x000004, "Wrong alignment on B_CreativePlayerController_C_InpAxisKeyEvt_MouseWheelAxis_K2Node_InputAxisKeyEvent_0");
static_assert(sizeof(B_CreativePlayerController_C_InpAxisKeyEvt_MouseWheelAxis_K2Node_InputAxisKeyEvent_0) == 0x000004, "Wrong size on B_CreativePlayerController_C_InpAxisKeyEvt_MouseWheelAxis_K2Node_InputAxisKeyEvent_0");
static_assert(offsetof(B_CreativePlayerController_C_InpAxisKeyEvt_MouseWheelAxis_K2Node_InputAxisKeyEvent_0, AxisValue) == 0x000000, "Member 'B_CreativePlayerController_C_InpAxisKeyEvt_MouseWheelAxis_K2Node_InputAxisKeyEvent_0::AxisValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.IsPlacingPrefab
// 0x000C (0x000C - 0x0000)
struct B_CreativePlayerController_C_IsPlacingPrefab final
{
public:
	bool                                          Placing_Group;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_IsPlacingPrefab) == 0x000004, "Wrong alignment on B_CreativePlayerController_C_IsPlacingPrefab");
static_assert(sizeof(B_CreativePlayerController_C_IsPlacingPrefab) == 0x00000C, "Wrong size on B_CreativePlayerController_C_IsPlacingPrefab");
static_assert(offsetof(B_CreativePlayerController_C_IsPlacingPrefab, Placing_Group) == 0x000000, "Member 'B_CreativePlayerController_C_IsPlacingPrefab::Placing_Group' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_IsPlacingPrefab, CallFunc_Array_Length_ReturnValue) == 0x000004, "Member 'B_CreativePlayerController_C_IsPlacingPrefab::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_IsPlacingPrefab, CallFunc_Greater_IntInt_ReturnValue) == 0x000008, "Member 'B_CreativePlayerController_C_IsPlacingPrefab::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.IsPlayerPawnInvalid
// 0x0040 (0x0040 - 0x0000)
struct B_CreativePlayerController_C_IsPlayerPawnInvalid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         ValidPawns;                                        // 0x0008(0x0010)(Edit, BlueprintVisible)
	TArray<class UClass*>                         K2Node_MakeArray_Array;                            // 0x0018(0x0010)(ReferenceParm)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_IsPlayerPawnInvalid) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_IsPlayerPawnInvalid");
static_assert(sizeof(B_CreativePlayerController_C_IsPlayerPawnInvalid) == 0x000040, "Wrong size on B_CreativePlayerController_C_IsPlayerPawnInvalid");
static_assert(offsetof(B_CreativePlayerController_C_IsPlayerPawnInvalid, ReturnValue) == 0x000000, "Member 'B_CreativePlayerController_C_IsPlayerPawnInvalid::ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_IsPlayerPawnInvalid, ValidPawns) == 0x000008, "Member 'B_CreativePlayerController_C_IsPlayerPawnInvalid::ValidPawns' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_IsPlayerPawnInvalid, K2Node_MakeArray_Array) == 0x000018, "Member 'B_CreativePlayerController_C_IsPlayerPawnInvalid::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_IsPlayerPawnInvalid, CallFunc_K2_GetPawn_ReturnValue) == 0x000028, "Member 'B_CreativePlayerController_C_IsPlayerPawnInvalid::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_IsPlayerPawnInvalid, CallFunc_GetObjectClass_ReturnValue) == 0x000030, "Member 'B_CreativePlayerController_C_IsPlayerPawnInvalid::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_IsPlayerPawnInvalid, CallFunc_Array_Contains_ReturnValue) == 0x000038, "Member 'B_CreativePlayerController_C_IsPlayerPawnInvalid::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_IsPlayerPawnInvalid, CallFunc_Not_PreBool_ReturnValue) == 0x000039, "Member 'B_CreativePlayerController_C_IsPlayerPawnInvalid::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.IsSwitchAlreadyConnectedToNetwork
// 0x0048 (0x0048 - 0x0000)
struct B_CreativePlayerController_C_IsSwitchAlreadyConnectedToNetwork final
{
public:
	class ABP_Switch_C*                           SwitchUnderTest;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_Switch_C*                           PossibleParent;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          AlreadyConnected;                                  // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsParentSwitch;                                    // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_Switch_C*                           K2Node_DynamicCast_AsBP_Switch;                    // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSwitchAlreadyConnectedToNetwork_AlreadyConnected; // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B[0x1];                                       // 0x003B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_IsSwitchAlreadyConnectedToNetwork) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_IsSwitchAlreadyConnectedToNetwork");
static_assert(sizeof(B_CreativePlayerController_C_IsSwitchAlreadyConnectedToNetwork) == 0x000048, "Wrong size on B_CreativePlayerController_C_IsSwitchAlreadyConnectedToNetwork");
static_assert(offsetof(B_CreativePlayerController_C_IsSwitchAlreadyConnectedToNetwork, SwitchUnderTest) == 0x000000, "Member 'B_CreativePlayerController_C_IsSwitchAlreadyConnectedToNetwork::SwitchUnderTest' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_IsSwitchAlreadyConnectedToNetwork, PossibleParent) == 0x000008, "Member 'B_CreativePlayerController_C_IsSwitchAlreadyConnectedToNetwork::PossibleParent' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_IsSwitchAlreadyConnectedToNetwork, AlreadyConnected) == 0x000010, "Member 'B_CreativePlayerController_C_IsSwitchAlreadyConnectedToNetwork::AlreadyConnected' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_IsSwitchAlreadyConnectedToNetwork, IsParentSwitch) == 0x000011, "Member 'B_CreativePlayerController_C_IsSwitchAlreadyConnectedToNetwork::IsParentSwitch' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_IsSwitchAlreadyConnectedToNetwork, Temp_bool_True_if_break_was_hit_Variable) == 0x000012, "Member 'B_CreativePlayerController_C_IsSwitchAlreadyConnectedToNetwork::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_IsSwitchAlreadyConnectedToNetwork, Temp_int_Array_Index_Variable) == 0x000014, "Member 'B_CreativePlayerController_C_IsSwitchAlreadyConnectedToNetwork::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_IsSwitchAlreadyConnectedToNetwork, CallFunc_Not_PreBool_ReturnValue) == 0x000018, "Member 'B_CreativePlayerController_C_IsSwitchAlreadyConnectedToNetwork::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_IsSwitchAlreadyConnectedToNetwork, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'B_CreativePlayerController_C_IsSwitchAlreadyConnectedToNetwork::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_IsSwitchAlreadyConnectedToNetwork, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'B_CreativePlayerController_C_IsSwitchAlreadyConnectedToNetwork::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_IsSwitchAlreadyConnectedToNetwork, CallFunc_Array_Get_Item) == 0x000028, "Member 'B_CreativePlayerController_C_IsSwitchAlreadyConnectedToNetwork::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_IsSwitchAlreadyConnectedToNetwork, K2Node_DynamicCast_AsBP_Switch) == 0x000030, "Member 'B_CreativePlayerController_C_IsSwitchAlreadyConnectedToNetwork::K2Node_DynamicCast_AsBP_Switch' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_IsSwitchAlreadyConnectedToNetwork, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'B_CreativePlayerController_C_IsSwitchAlreadyConnectedToNetwork::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_IsSwitchAlreadyConnectedToNetwork, CallFunc_Array_Contains_ReturnValue) == 0x000039, "Member 'B_CreativePlayerController_C_IsSwitchAlreadyConnectedToNetwork::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_IsSwitchAlreadyConnectedToNetwork, CallFunc_IsSwitchAlreadyConnectedToNetwork_AlreadyConnected) == 0x00003A, "Member 'B_CreativePlayerController_C_IsSwitchAlreadyConnectedToNetwork::CallFunc_IsSwitchAlreadyConnectedToNetwork_AlreadyConnected' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_IsSwitchAlreadyConnectedToNetwork, CallFunc_Array_Length_ReturnValue) == 0x00003C, "Member 'B_CreativePlayerController_C_IsSwitchAlreadyConnectedToNetwork::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_IsSwitchAlreadyConnectedToNetwork, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'B_CreativePlayerController_C_IsSwitchAlreadyConnectedToNetwork::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_IsSwitchAlreadyConnectedToNetwork, CallFunc_BooleanAND_ReturnValue) == 0x000041, "Member 'B_CreativePlayerController_C_IsSwitchAlreadyConnectedToNetwork::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.MakePrefab
// 0x0160 (0x0160 - 0x0000)
struct B_CreativePlayerController_C_MakePrefab final
{
public:
	struct FPrefabToSave                          Prefab;                                            // 0x0000(0x0040)(Parm, OutParm)
	TMap<class AActor*, int32>                    SwitchIdMap;                                       // 0x0040(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         CurrentSwitchId;                                   // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0xC];                                       // 0x0094(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CurrentTransform;                                  // 0x00A0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPrimaryAssetId                        CurrentAssetId;                                    // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<struct FSwitchToSave>                  Switches;                                          // 0x0110(0x0010)(Edit, BlueprintVisible)
	TArray<struct FPlaceableLightToSave>          Lights;                                            // 0x0120(0x0010)(Edit, BlueprintVisible)
	TArray<struct FPlaceableStaticToSave>         Structures;                                        // 0x0130(0x0010)(Edit, BlueprintVisible)
	TArray<struct FPropToSave>                    Props;                                             // 0x0140(0x0010)(Edit, BlueprintVisible)
	class AActor*                                 CurrentActor;                                      // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          IsActivated;                                       // 0x0158(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_MakePrefab) == 0x000010, "Wrong alignment on B_CreativePlayerController_C_MakePrefab");
static_assert(sizeof(B_CreativePlayerController_C_MakePrefab) == 0x000160, "Wrong size on B_CreativePlayerController_C_MakePrefab");
static_assert(offsetof(B_CreativePlayerController_C_MakePrefab, Prefab) == 0x000000, "Member 'B_CreativePlayerController_C_MakePrefab::Prefab' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_MakePrefab, SwitchIdMap) == 0x000040, "Member 'B_CreativePlayerController_C_MakePrefab::SwitchIdMap' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_MakePrefab, CurrentSwitchId) == 0x000090, "Member 'B_CreativePlayerController_C_MakePrefab::CurrentSwitchId' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_MakePrefab, CurrentTransform) == 0x0000A0, "Member 'B_CreativePlayerController_C_MakePrefab::CurrentTransform' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_MakePrefab, CurrentAssetId) == 0x000100, "Member 'B_CreativePlayerController_C_MakePrefab::CurrentAssetId' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_MakePrefab, Switches) == 0x000110, "Member 'B_CreativePlayerController_C_MakePrefab::Switches' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_MakePrefab, Lights) == 0x000120, "Member 'B_CreativePlayerController_C_MakePrefab::Lights' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_MakePrefab, Structures) == 0x000130, "Member 'B_CreativePlayerController_C_MakePrefab::Structures' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_MakePrefab, Props) == 0x000140, "Member 'B_CreativePlayerController_C_MakePrefab::Props' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_MakePrefab, CurrentActor) == 0x000150, "Member 'B_CreativePlayerController_C_MakePrefab::CurrentActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_MakePrefab, IsActivated) == 0x000158, "Member 'B_CreativePlayerController_C_MakePrefab::IsActivated' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.NumberPressed
// 0x0200 (0x0200 - 0x0000)
struct B_CreativePlayerController_C_NumberPressed final
{
public:
	int32                                         Number;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToDeselect;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	bool                                          ShouldZoomToSelection;                             // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SelectedActorsCount;                               // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         ActorsToRemove;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class AActor*>                         SavedSelectedActors;                               // 0x0030(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A[0x2];                                       // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlacing_IsPlacing;                      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_CreativeSpectator_C*                 K2Node_DynamicCast_AsB_Creative_Spectator;         // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetActorArrayBounds_Center;               // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorArrayBounds_BoxExtent;            // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x00E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_NegateVector_ReturnValue;                 // 0x0108(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FMax_ReturnValue;                         // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue_1;        // 0x0128(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0140(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_1;      // 0x0160(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0178(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlacing_IsPlacing_1;                    // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0191(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_192[0x6];                                      // 0x0192(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item_1;                         // 0x0198(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x01A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A5[0x3];                                      // 0x01A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlaceableStaticProp_C*              K2Node_DynamicCast_AsBP_Placeable_Static_Prop;     // 0x01A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x01B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x01B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B3[0x5];                                      // 0x01B3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_StaticMeshProp_C*                    K2Node_DynamicCast_AsB_Static_Mesh_Prop;           // 0x01B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x01C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x01C3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x01C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C5[0x3];                                      // 0x01C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsNotEmpty_ReturnValue;             // 0x01CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1CD[0x3];                                      // 0x01CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D4[0x4];                                      // 0x01D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item_2;                         // 0x01D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x01E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x01E5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E6[0x2];                                      // 0x01E6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_2;                    // 0x01EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1ED[0x3];                                      // 0x01ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_SelectedActors                      CallFunc_Array_Get_Item_3;                         // 0x01F0(0x0010)(HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_NumberPressed) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_NumberPressed");
static_assert(sizeof(B_CreativePlayerController_C_NumberPressed) == 0x000200, "Wrong size on B_CreativePlayerController_C_NumberPressed");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, Number) == 0x000000, "Member 'B_CreativePlayerController_C_NumberPressed::Number' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, ActorsToDeselect) == 0x000008, "Member 'B_CreativePlayerController_C_NumberPressed::ActorsToDeselect' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, ShouldZoomToSelection) == 0x000018, "Member 'B_CreativePlayerController_C_NumberPressed::ShouldZoomToSelection' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, SelectedActorsCount) == 0x00001C, "Member 'B_CreativePlayerController_C_NumberPressed::SelectedActorsCount' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, ActorsToRemove) == 0x000020, "Member 'B_CreativePlayerController_C_NumberPressed::ActorsToRemove' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, SavedSelectedActors) == 0x000030, "Member 'B_CreativePlayerController_C_NumberPressed::SavedSelectedActors' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, Temp_int_Array_Index_Variable) == 0x000040, "Member 'B_CreativePlayerController_C_NumberPressed::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, Temp_int_Loop_Counter_Variable) == 0x000044, "Member 'B_CreativePlayerController_C_NumberPressed::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, CallFunc_Add_IntInt_ReturnValue) == 0x000048, "Member 'B_CreativePlayerController_C_NumberPressed::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, Temp_int_Loop_Counter_Variable_1) == 0x00004C, "Member 'B_CreativePlayerController_C_NumberPressed::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, CallFunc_Add_IntInt_ReturnValue_1) == 0x000050, "Member 'B_CreativePlayerController_C_NumberPressed::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, Temp_int_Array_Index_Variable_1) == 0x000054, "Member 'B_CreativePlayerController_C_NumberPressed::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, CallFunc_Greater_IntInt_ReturnValue) == 0x000058, "Member 'B_CreativePlayerController_C_NumberPressed::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, Temp_int_Loop_Counter_Variable_2) == 0x00005C, "Member 'B_CreativePlayerController_C_NumberPressed::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, CallFunc_Array_Length_ReturnValue) == 0x000060, "Member 'B_CreativePlayerController_C_NumberPressed::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, CallFunc_Add_IntInt_ReturnValue_2) == 0x000064, "Member 'B_CreativePlayerController_C_NumberPressed::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, CallFunc_Less_IntInt_ReturnValue) == 0x000068, "Member 'B_CreativePlayerController_C_NumberPressed::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, K2Node_SwitchEnum_CmpSuccess) == 0x000069, "Member 'B_CreativePlayerController_C_NumberPressed::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, Temp_int_Array_Index_Variable_2) == 0x00006C, "Member 'B_CreativePlayerController_C_NumberPressed::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, CallFunc_IsPlacing_IsPlacing) == 0x000070, "Member 'B_CreativePlayerController_C_NumberPressed::CallFunc_IsPlacing_IsPlacing' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, CallFunc_Array_Get_Item) == 0x000078, "Member 'B_CreativePlayerController_C_NumberPressed::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, CallFunc_Array_Add_ReturnValue) == 0x000080, "Member 'B_CreativePlayerController_C_NumberPressed::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, CallFunc_Array_Contains_ReturnValue) == 0x000084, "Member 'B_CreativePlayerController_C_NumberPressed::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000088, "Member 'B_CreativePlayerController_C_NumberPressed::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, CallFunc_K2_GetPawn_ReturnValue) == 0x0000A0, "Member 'B_CreativePlayerController_C_NumberPressed::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, K2Node_DynamicCast_AsB_Creative_Spectator) == 0x0000A8, "Member 'B_CreativePlayerController_C_NumberPressed::K2Node_DynamicCast_AsB_Creative_Spectator' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, K2Node_DynamicCast_bSuccess) == 0x0000B0, "Member 'B_CreativePlayerController_C_NumberPressed::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, CallFunc_GetActorArrayBounds_Center) == 0x0000B8, "Member 'B_CreativePlayerController_C_NumberPressed::CallFunc_GetActorArrayBounds_Center' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, CallFunc_GetActorArrayBounds_BoxExtent) == 0x0000D0, "Member 'B_CreativePlayerController_C_NumberPressed::CallFunc_GetActorArrayBounds_BoxExtent' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, CallFunc_GetActorForwardVector_ReturnValue) == 0x0000E8, "Member 'B_CreativePlayerController_C_NumberPressed::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, CallFunc_VSize_ReturnValue) == 0x000100, "Member 'B_CreativePlayerController_C_NumberPressed::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, CallFunc_NegateVector_ReturnValue) == 0x000108, "Member 'B_CreativePlayerController_C_NumberPressed::CallFunc_NegateVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, CallFunc_FMax_ReturnValue) == 0x000120, "Member 'B_CreativePlayerController_C_NumberPressed::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, CallFunc_Conv_DoubleToVector_ReturnValue_1) == 0x000128, "Member 'B_CreativePlayerController_C_NumberPressed::CallFunc_Conv_DoubleToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000140, "Member 'B_CreativePlayerController_C_NumberPressed::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000158, "Member 'B_CreativePlayerController_C_NumberPressed::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, CallFunc_Multiply_VectorVector_ReturnValue_1) == 0x000160, "Member 'B_CreativePlayerController_C_NumberPressed::CallFunc_Multiply_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, CallFunc_Add_VectorVector_ReturnValue) == 0x000178, "Member 'B_CreativePlayerController_C_NumberPressed::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, CallFunc_IsPlacing_IsPlacing_1) == 0x000190, "Member 'B_CreativePlayerController_C_NumberPressed::CallFunc_IsPlacing_IsPlacing_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, K2Node_SwitchEnum_CmpSuccess_1) == 0x000191, "Member 'B_CreativePlayerController_C_NumberPressed::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, CallFunc_Array_Get_Item_1) == 0x000198, "Member 'B_CreativePlayerController_C_NumberPressed::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, CallFunc_Array_Length_ReturnValue_1) == 0x0001A0, "Member 'B_CreativePlayerController_C_NumberPressed::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, CallFunc_Less_IntInt_ReturnValue_1) == 0x0001A4, "Member 'B_CreativePlayerController_C_NumberPressed::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, K2Node_DynamicCast_AsBP_Placeable_Static_Prop) == 0x0001A8, "Member 'B_CreativePlayerController_C_NumberPressed::K2Node_DynamicCast_AsBP_Placeable_Static_Prop' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, K2Node_DynamicCast_bSuccess_1) == 0x0001B0, "Member 'B_CreativePlayerController_C_NumberPressed::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0001B1, "Member 'B_CreativePlayerController_C_NumberPressed::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, CallFunc_Not_PreBool_ReturnValue) == 0x0001B2, "Member 'B_CreativePlayerController_C_NumberPressed::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, K2Node_DynamicCast_AsB_Static_Mesh_Prop) == 0x0001B8, "Member 'B_CreativePlayerController_C_NumberPressed::K2Node_DynamicCast_AsB_Static_Mesh_Prop' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, K2Node_DynamicCast_bSuccess_2) == 0x0001C0, "Member 'B_CreativePlayerController_C_NumberPressed::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, CallFunc_IsValid_ReturnValue) == 0x0001C1, "Member 'B_CreativePlayerController_C_NumberPressed::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x0001C2, "Member 'B_CreativePlayerController_C_NumberPressed::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, CallFunc_Not_PreBool_ReturnValue_1) == 0x0001C3, "Member 'B_CreativePlayerController_C_NumberPressed::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, CallFunc_Greater_IntInt_ReturnValue_1) == 0x0001C4, "Member 'B_CreativePlayerController_C_NumberPressed::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, CallFunc_Add_IntInt_ReturnValue_3) == 0x0001C8, "Member 'B_CreativePlayerController_C_NumberPressed::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, CallFunc_Array_IsNotEmpty_ReturnValue) == 0x0001CC, "Member 'B_CreativePlayerController_C_NumberPressed::CallFunc_Array_IsNotEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, Temp_int_Variable) == 0x0001D0, "Member 'B_CreativePlayerController_C_NumberPressed::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, CallFunc_Array_Get_Item_2) == 0x0001D8, "Member 'B_CreativePlayerController_C_NumberPressed::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, CallFunc_Array_Length_ReturnValue_2) == 0x0001E0, "Member 'B_CreativePlayerController_C_NumberPressed::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, CallFunc_Array_RemoveItem_ReturnValue) == 0x0001E4, "Member 'B_CreativePlayerController_C_NumberPressed::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, CallFunc_Less_IntInt_ReturnValue_2) == 0x0001E5, "Member 'B_CreativePlayerController_C_NumberPressed::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, CallFunc_Array_Add_ReturnValue_1) == 0x0001E8, "Member 'B_CreativePlayerController_C_NumberPressed::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, K2Node_SwitchEnum_CmpSuccess_2) == 0x0001EC, "Member 'B_CreativePlayerController_C_NumberPressed::K2Node_SwitchEnum_CmpSuccess_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_NumberPressed, CallFunc_Array_Get_Item_3) == 0x0001F0, "Member 'B_CreativePlayerController_C_NumberPressed::CallFunc_Array_Get_Item_3' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.OpenEditUi
// 0x0060 (0x0060 - 0x0000)
struct B_CreativePlayerController_C_OpenEditUi final
{
public:
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAnchorActor_AnchorActor;               // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_1;            // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_1;            // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_PlaceAndEditUI_C*                   CallFunc_Create_ReturnValue;                       // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_2;            // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_2;            // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen;        // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_OpenEditUi) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_OpenEditUi");
static_assert(sizeof(B_CreativePlayerController_C_OpenEditUi) == 0x000060, "Wrong size on B_CreativePlayerController_C_OpenEditUi");
static_assert(offsetof(B_CreativePlayerController_C_OpenEditUi, CallFunc_GetGameInstance_ReturnValue) == 0x000000, "Member 'B_CreativePlayerController_C_OpenEditUi::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_OpenEditUi, CallFunc_Not_PreBool_ReturnValue) == 0x000008, "Member 'B_CreativePlayerController_C_OpenEditUi::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_OpenEditUi, K2Node_DynamicCast_AsB_Game_Instance) == 0x000010, "Member 'B_CreativePlayerController_C_OpenEditUi::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_OpenEditUi, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'B_CreativePlayerController_C_OpenEditUi::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_OpenEditUi, CallFunc_GetAnchorActor_AnchorActor) == 0x000020, "Member 'B_CreativePlayerController_C_OpenEditUi::CallFunc_GetAnchorActor_AnchorActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_OpenEditUi, CallFunc_GetGameInstance_ReturnValue_1) == 0x000028, "Member 'B_CreativePlayerController_C_OpenEditUi::CallFunc_GetGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_OpenEditUi, K2Node_DynamicCast_AsB_Game_Instance_1) == 0x000030, "Member 'B_CreativePlayerController_C_OpenEditUi::K2Node_DynamicCast_AsB_Game_Instance_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_OpenEditUi, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'B_CreativePlayerController_C_OpenEditUi::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_OpenEditUi, CallFunc_IsValid_ReturnValue) == 0x000039, "Member 'B_CreativePlayerController_C_OpenEditUi::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_OpenEditUi, CallFunc_Create_ReturnValue) == 0x000040, "Member 'B_CreativePlayerController_C_OpenEditUi::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_OpenEditUi, CallFunc_GetGameInstance_ReturnValue_2) == 0x000048, "Member 'B_CreativePlayerController_C_OpenEditUi::CallFunc_GetGameInstance_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_OpenEditUi, K2Node_DynamicCast_AsB_Game_Instance_2) == 0x000050, "Member 'B_CreativePlayerController_C_OpenEditUi::K2Node_DynamicCast_AsB_Game_Instance_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_OpenEditUi, K2Node_DynamicCast_bSuccess_2) == 0x000058, "Member 'B_CreativePlayerController_C_OpenEditUi::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_OpenEditUi, CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen) == 0x000059, "Member 'B_CreativePlayerController_C_OpenEditUi::CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.OpenTabScreen
// 0x00C0 (0x00C0 - 0x0000)
struct B_CreativePlayerController_C_OpenTabScreen final
{
public:
	bool                                          IsPlayTest;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRequiredScreen;                                  // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayTest_0;                                      // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            ActiveWidget;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_1;            // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_1;            // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            K2Node_Select_Default;                             // 0x0068(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            K2Node_Select_Default_1;                           // 0x0070(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_TeamSelectionCreative_C*            CallFunc_Create_ReturnValue;                       // 0x0080(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_PlayerListCreative_C*               CallFunc_Create_ReturnValue_1;                     // 0x0090(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_2;            // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_2;            // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x00BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x00BB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_OpenTabScreen) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_OpenTabScreen");
static_assert(sizeof(B_CreativePlayerController_C_OpenTabScreen) == 0x0000C0, "Wrong size on B_CreativePlayerController_C_OpenTabScreen");
static_assert(offsetof(B_CreativePlayerController_C_OpenTabScreen, IsPlayTest) == 0x000000, "Member 'B_CreativePlayerController_C_OpenTabScreen::IsPlayTest' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_OpenTabScreen, IsRequiredScreen) == 0x000001, "Member 'B_CreativePlayerController_C_OpenTabScreen::IsRequiredScreen' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_OpenTabScreen, IsPlayTest_0) == 0x000002, "Member 'B_CreativePlayerController_C_OpenTabScreen::IsPlayTest_0' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_OpenTabScreen, ActiveWidget) == 0x000008, "Member 'B_CreativePlayerController_C_OpenTabScreen::ActiveWidget' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_OpenTabScreen, Temp_int_Array_Index_Variable) == 0x000010, "Member 'B_CreativePlayerController_C_OpenTabScreen::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_OpenTabScreen, CallFunc_GetGameInstance_ReturnValue) == 0x000018, "Member 'B_CreativePlayerController_C_OpenTabScreen::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_OpenTabScreen, K2Node_DynamicCast_AsB_Game_Instance) == 0x000020, "Member 'B_CreativePlayerController_C_OpenTabScreen::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_OpenTabScreen, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'B_CreativePlayerController_C_OpenTabScreen::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_OpenTabScreen, Temp_bool_Variable) == 0x000029, "Member 'B_CreativePlayerController_C_OpenTabScreen::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_OpenTabScreen, Temp_bool_Variable_1) == 0x00002A, "Member 'B_CreativePlayerController_C_OpenTabScreen::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_OpenTabScreen, CallFunc_GetGameInstance_ReturnValue_1) == 0x000030, "Member 'B_CreativePlayerController_C_OpenTabScreen::CallFunc_GetGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_OpenTabScreen, K2Node_DynamicCast_AsB_Game_Instance_1) == 0x000038, "Member 'B_CreativePlayerController_C_OpenTabScreen::K2Node_DynamicCast_AsB_Game_Instance_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_OpenTabScreen, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'B_CreativePlayerController_C_OpenTabScreen::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_OpenTabScreen, CallFunc_K2_GetPawn_ReturnValue) == 0x000048, "Member 'B_CreativePlayerController_C_OpenTabScreen::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_OpenTabScreen, CallFunc_Array_Get_Item) == 0x000050, "Member 'B_CreativePlayerController_C_OpenTabScreen::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_OpenTabScreen, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000058, "Member 'B_CreativePlayerController_C_OpenTabScreen::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_OpenTabScreen, CallFunc_Array_Length_ReturnValue) == 0x00005C, "Member 'B_CreativePlayerController_C_OpenTabScreen::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_OpenTabScreen, Temp_byte_Variable) == 0x000060, "Member 'B_CreativePlayerController_C_OpenTabScreen::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_OpenTabScreen, K2Node_Select_Default) == 0x000068, "Member 'B_CreativePlayerController_C_OpenTabScreen::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_OpenTabScreen, K2Node_Select_Default_1) == 0x000070, "Member 'B_CreativePlayerController_C_OpenTabScreen::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_OpenTabScreen, CallFunc_IsValid_ReturnValue) == 0x000078, "Member 'B_CreativePlayerController_C_OpenTabScreen::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_OpenTabScreen, CallFunc_Create_ReturnValue) == 0x000080, "Member 'B_CreativePlayerController_C_OpenTabScreen::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_OpenTabScreen, Temp_byte_Variable_1) == 0x000088, "Member 'B_CreativePlayerController_C_OpenTabScreen::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_OpenTabScreen, CallFunc_Create_ReturnValue_1) == 0x000090, "Member 'B_CreativePlayerController_C_OpenTabScreen::CallFunc_Create_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_OpenTabScreen, Temp_int_Loop_Counter_Variable) == 0x000098, "Member 'B_CreativePlayerController_C_OpenTabScreen::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_OpenTabScreen, CallFunc_Less_IntInt_ReturnValue) == 0x00009C, "Member 'B_CreativePlayerController_C_OpenTabScreen::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_OpenTabScreen, CallFunc_Add_IntInt_ReturnValue) == 0x0000A0, "Member 'B_CreativePlayerController_C_OpenTabScreen::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_OpenTabScreen, CallFunc_GetGameInstance_ReturnValue_2) == 0x0000A8, "Member 'B_CreativePlayerController_C_OpenTabScreen::CallFunc_GetGameInstance_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_OpenTabScreen, K2Node_DynamicCast_AsB_Game_Instance_2) == 0x0000B0, "Member 'B_CreativePlayerController_C_OpenTabScreen::K2Node_DynamicCast_AsB_Game_Instance_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_OpenTabScreen, K2Node_DynamicCast_bSuccess_2) == 0x0000B8, "Member 'B_CreativePlayerController_C_OpenTabScreen::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_OpenTabScreen, CallFunc_IsValid_ReturnValue_1) == 0x0000B9, "Member 'B_CreativePlayerController_C_OpenTabScreen::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_OpenTabScreen, Temp_bool_Variable_2) == 0x0000BA, "Member 'B_CreativePlayerController_C_OpenTabScreen::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_OpenTabScreen, K2Node_Select_Default_2) == 0x0000BB, "Member 'B_CreativePlayerController_C_OpenTabScreen::K2Node_Select_Default_2' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.PlaceActor
// 0x0270 (0x0270 - 0x0000)
struct B_CreativePlayerController_C_PlaceActor final
{
public:
	class UClass*                                 ActorClass;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnTransform;                                    // 0x0010(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasPrefabInfo;                                     // 0x0070(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Activated;                                         // 0x0071(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StartAwake;                                        // 0x0072(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFreezed;                                         // 0x0073(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BreaksAfterUse;                                    // 0x0074(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Color;                                             // 0x0078(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<uint8>                                 MaterialIndices;                                   // 0x0090(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class AActor*                                 NewPlacedActor;                                    // 0x00A0(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 PlacedActor;                                       // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          BelowAmountLimit;                                  // 0x00B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_CreativeGameState_C*                 CreativeGameState;                                 // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_CollisionWall_C*                    K2Node_DynamicCast_AsBP_Collision_Wall;            // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsBP_Placeable_Actor;      // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess;                  // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsBP_Placeable_Actor_1;    // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_1;                // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsBP_Placeable_Static_Prop; // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_2;                // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsBP_Action_Placable;      // 0x0108(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_3;                // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0118(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_ClassDynamicCast_AsBP_Switch;               // 0x0120(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_4;                // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlaceableStaticProp_C*              CallFunc_FinishSpawningActor_ReturnValue;          // 0x0130(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_ClassDynamicCast_AsBP_Placeable_Light;      // 0x0138(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_5;                // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsB_Static_Mesh_Prop;      // 0x0148(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_6;                // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_151[0x7];                                      // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsB_Static_Mesh_Prop_1;    // 0x0158(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_7;                // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_161[0x3];                                      // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_ClassDynamicCast_AsB_Static_Mesh_Action_Prop; // 0x0168(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_8;                // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_171[0x7];                                      // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1; // 0x0178(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Switch_C*                           CallFunc_FinishSpawningActor_ReturnValue_1;        // 0x0188(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0190(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x01A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x01C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_3;                  // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_2; // 0x01E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_4;                  // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F4[0x4];                                      // 0x01F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlaceableActor_C*                   CallFunc_FinishSpawningActor_ReturnValue_2;        // 0x01F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_3; // 0x0200(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_ActionPlacable_C*                   CallFunc_FinishSpawningActor_ReturnValue_3;        // 0x0208(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_4; // 0x0210(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_StaticMeshProp_C*                    CallFunc_FinishSpawningActor_ReturnValue_4;        // 0x0218(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_5; // 0x0220(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_StaticMeshActionProp_C*              CallFunc_FinishSpawningActor_ReturnValue_5;        // 0x0228(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_6; // 0x0230(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_239[0x7];                                      // 0x0239(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlaceableLight_C*                   CallFunc_FinishSpawningActor_ReturnValue_6;        // 0x0240(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0249(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24A[0x6];                                      // 0x024A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0250(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_CreativeGameState_C*                 K2Node_DynamicCast_AsB_Creative_Game_State;        // 0x0258(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0260(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_261[0x3];                                      // 0x0261(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_5;                  // 0x0264(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_6;                  // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_PlaceActor) == 0x000010, "Wrong alignment on B_CreativePlayerController_C_PlaceActor");
static_assert(sizeof(B_CreativePlayerController_C_PlaceActor) == 0x000270, "Wrong size on B_CreativePlayerController_C_PlaceActor");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, ActorClass) == 0x000000, "Member 'B_CreativePlayerController_C_PlaceActor::ActorClass' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, SpawnTransform) == 0x000010, "Member 'B_CreativePlayerController_C_PlaceActor::SpawnTransform' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, HasPrefabInfo) == 0x000070, "Member 'B_CreativePlayerController_C_PlaceActor::HasPrefabInfo' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, Activated) == 0x000071, "Member 'B_CreativePlayerController_C_PlaceActor::Activated' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, StartAwake) == 0x000072, "Member 'B_CreativePlayerController_C_PlaceActor::StartAwake' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, IsFreezed) == 0x000073, "Member 'B_CreativePlayerController_C_PlaceActor::IsFreezed' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, BreaksAfterUse) == 0x000074, "Member 'B_CreativePlayerController_C_PlaceActor::BreaksAfterUse' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, Color) == 0x000078, "Member 'B_CreativePlayerController_C_PlaceActor::Color' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, MaterialIndices) == 0x000090, "Member 'B_CreativePlayerController_C_PlaceActor::MaterialIndices' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, NewPlacedActor) == 0x0000A0, "Member 'B_CreativePlayerController_C_PlaceActor::NewPlacedActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, PlacedActor) == 0x0000A8, "Member 'B_CreativePlayerController_C_PlaceActor::PlacedActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, BelowAmountLimit) == 0x0000B0, "Member 'B_CreativePlayerController_C_PlaceActor::BelowAmountLimit' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, CreativeGameState) == 0x0000B8, "Member 'B_CreativePlayerController_C_PlaceActor::CreativeGameState' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, Temp_int_Variable) == 0x0000C0, "Member 'B_CreativePlayerController_C_PlaceActor::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, Temp_int_Variable_1) == 0x0000C4, "Member 'B_CreativePlayerController_C_PlaceActor::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, K2Node_DynamicCast_AsBP_Collision_Wall) == 0x0000C8, "Member 'B_CreativePlayerController_C_PlaceActor::K2Node_DynamicCast_AsBP_Collision_Wall' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, K2Node_DynamicCast_bSuccess) == 0x0000D0, "Member 'B_CreativePlayerController_C_PlaceActor::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, K2Node_ClassDynamicCast_AsBP_Placeable_Actor) == 0x0000D8, "Member 'B_CreativePlayerController_C_PlaceActor::K2Node_ClassDynamicCast_AsBP_Placeable_Actor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, K2Node_ClassDynamicCast_bSuccess) == 0x0000E0, "Member 'B_CreativePlayerController_C_PlaceActor::K2Node_ClassDynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, K2Node_ClassDynamicCast_AsBP_Placeable_Actor_1) == 0x0000E8, "Member 'B_CreativePlayerController_C_PlaceActor::K2Node_ClassDynamicCast_AsBP_Placeable_Actor_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, K2Node_ClassDynamicCast_bSuccess_1) == 0x0000F0, "Member 'B_CreativePlayerController_C_PlaceActor::K2Node_ClassDynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, K2Node_ClassDynamicCast_AsBP_Placeable_Static_Prop) == 0x0000F8, "Member 'B_CreativePlayerController_C_PlaceActor::K2Node_ClassDynamicCast_AsBP_Placeable_Static_Prop' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, K2Node_ClassDynamicCast_bSuccess_2) == 0x000100, "Member 'B_CreativePlayerController_C_PlaceActor::K2Node_ClassDynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, K2Node_ClassDynamicCast_AsBP_Action_Placable) == 0x000108, "Member 'B_CreativePlayerController_C_PlaceActor::K2Node_ClassDynamicCast_AsBP_Action_Placable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, K2Node_ClassDynamicCast_bSuccess_3) == 0x000110, "Member 'B_CreativePlayerController_C_PlaceActor::K2Node_ClassDynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000118, "Member 'B_CreativePlayerController_C_PlaceActor::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, K2Node_ClassDynamicCast_AsBP_Switch) == 0x000120, "Member 'B_CreativePlayerController_C_PlaceActor::K2Node_ClassDynamicCast_AsBP_Switch' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, K2Node_ClassDynamicCast_bSuccess_4) == 0x000128, "Member 'B_CreativePlayerController_C_PlaceActor::K2Node_ClassDynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, CallFunc_FinishSpawningActor_ReturnValue) == 0x000130, "Member 'B_CreativePlayerController_C_PlaceActor::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, K2Node_ClassDynamicCast_AsBP_Placeable_Light) == 0x000138, "Member 'B_CreativePlayerController_C_PlaceActor::K2Node_ClassDynamicCast_AsBP_Placeable_Light' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, K2Node_ClassDynamicCast_bSuccess_5) == 0x000140, "Member 'B_CreativePlayerController_C_PlaceActor::K2Node_ClassDynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, K2Node_ClassDynamicCast_AsB_Static_Mesh_Prop) == 0x000148, "Member 'B_CreativePlayerController_C_PlaceActor::K2Node_ClassDynamicCast_AsB_Static_Mesh_Prop' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, K2Node_ClassDynamicCast_bSuccess_6) == 0x000150, "Member 'B_CreativePlayerController_C_PlaceActor::K2Node_ClassDynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, K2Node_ClassDynamicCast_AsB_Static_Mesh_Prop_1) == 0x000158, "Member 'B_CreativePlayerController_C_PlaceActor::K2Node_ClassDynamicCast_AsB_Static_Mesh_Prop_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, K2Node_ClassDynamicCast_bSuccess_7) == 0x000160, "Member 'B_CreativePlayerController_C_PlaceActor::K2Node_ClassDynamicCast_bSuccess_7' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, CallFunc_Array_Add_ReturnValue) == 0x000164, "Member 'B_CreativePlayerController_C_PlaceActor::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, K2Node_ClassDynamicCast_AsB_Static_Mesh_Action_Prop) == 0x000168, "Member 'B_CreativePlayerController_C_PlaceActor::K2Node_ClassDynamicCast_AsB_Static_Mesh_Action_Prop' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, K2Node_ClassDynamicCast_bSuccess_8) == 0x000170, "Member 'B_CreativePlayerController_C_PlaceActor::K2Node_ClassDynamicCast_bSuccess_8' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1) == 0x000178, "Member 'B_CreativePlayerController_C_PlaceActor::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, CallFunc_Array_Add_ReturnValue_1) == 0x000180, "Member 'B_CreativePlayerController_C_PlaceActor::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, CallFunc_FinishSpawningActor_ReturnValue_1) == 0x000188, "Member 'B_CreativePlayerController_C_PlaceActor::CallFunc_FinishSpawningActor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, CallFunc_BreakTransform_Location) == 0x000190, "Member 'B_CreativePlayerController_C_PlaceActor::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, CallFunc_BreakTransform_Rotation) == 0x0001A8, "Member 'B_CreativePlayerController_C_PlaceActor::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, CallFunc_BreakTransform_Scale) == 0x0001C0, "Member 'B_CreativePlayerController_C_PlaceActor::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, CallFunc_Add_IntInt_ReturnValue) == 0x0001D8, "Member 'B_CreativePlayerController_C_PlaceActor::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, CallFunc_Add_IntInt_ReturnValue_1) == 0x0001DC, "Member 'B_CreativePlayerController_C_PlaceActor::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, CallFunc_Array_Add_ReturnValue_2) == 0x0001E0, "Member 'B_CreativePlayerController_C_PlaceActor::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, CallFunc_Array_Add_ReturnValue_3) == 0x0001E4, "Member 'B_CreativePlayerController_C_PlaceActor::CallFunc_Array_Add_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_2) == 0x0001E8, "Member 'B_CreativePlayerController_C_PlaceActor::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, CallFunc_Array_Add_ReturnValue_4) == 0x0001F0, "Member 'B_CreativePlayerController_C_PlaceActor::CallFunc_Array_Add_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, CallFunc_FinishSpawningActor_ReturnValue_2) == 0x0001F8, "Member 'B_CreativePlayerController_C_PlaceActor::CallFunc_FinishSpawningActor_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_3) == 0x000200, "Member 'B_CreativePlayerController_C_PlaceActor::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, CallFunc_FinishSpawningActor_ReturnValue_3) == 0x000208, "Member 'B_CreativePlayerController_C_PlaceActor::CallFunc_FinishSpawningActor_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_4) == 0x000210, "Member 'B_CreativePlayerController_C_PlaceActor::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, CallFunc_FinishSpawningActor_ReturnValue_4) == 0x000218, "Member 'B_CreativePlayerController_C_PlaceActor::CallFunc_FinishSpawningActor_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_5) == 0x000220, "Member 'B_CreativePlayerController_C_PlaceActor::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, CallFunc_FinishSpawningActor_ReturnValue_5) == 0x000228, "Member 'B_CreativePlayerController_C_PlaceActor::CallFunc_FinishSpawningActor_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_6) == 0x000230, "Member 'B_CreativePlayerController_C_PlaceActor::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, CallFunc_Not_PreBool_ReturnValue) == 0x000238, "Member 'B_CreativePlayerController_C_PlaceActor::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, CallFunc_FinishSpawningActor_ReturnValue_6) == 0x000240, "Member 'B_CreativePlayerController_C_PlaceActor::CallFunc_FinishSpawningActor_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, CallFunc_Less_IntInt_ReturnValue) == 0x000248, "Member 'B_CreativePlayerController_C_PlaceActor::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, CallFunc_Less_IntInt_ReturnValue_1) == 0x000249, "Member 'B_CreativePlayerController_C_PlaceActor::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, CallFunc_GetGameState_ReturnValue) == 0x000250, "Member 'B_CreativePlayerController_C_PlaceActor::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, K2Node_DynamicCast_AsB_Creative_Game_State) == 0x000258, "Member 'B_CreativePlayerController_C_PlaceActor::K2Node_DynamicCast_AsB_Creative_Game_State' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, K2Node_DynamicCast_bSuccess_1) == 0x000260, "Member 'B_CreativePlayerController_C_PlaceActor::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, CallFunc_Array_Add_ReturnValue_5) == 0x000264, "Member 'B_CreativePlayerController_C_PlaceActor::CallFunc_Array_Add_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActor, CallFunc_Array_Add_ReturnValue_6) == 0x000268, "Member 'B_CreativePlayerController_C_PlaceActor::CallFunc_Array_Add_ReturnValue_6' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.PlaceActorMulti
// 0x0020 (0x0020 - 0x0000)
struct B_CreativePlayerController_C_PlaceActorMulti final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class AActor*                           PlacedActor;                                       // 0x0018(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_PlaceActorMulti) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_PlaceActorMulti");
static_assert(sizeof(B_CreativePlayerController_C_PlaceActorMulti) == 0x000020, "Wrong size on B_CreativePlayerController_C_PlaceActorMulti");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActorMulti, Location) == 0x000000, "Member 'B_CreativePlayerController_C_PlaceActorMulti::Location' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActorMulti, PlacedActor) == 0x000018, "Member 'B_CreativePlayerController_C_PlaceActorMulti::PlacedActor' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.PlaceActors
// 0x00C0 (0x00C0 - 0x0000)
struct B_CreativePlayerController_C_PlaceActors final
{
public:
	class UClass*                                 CurrentClass;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPrefab;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlacingPrefab_Placing_Group;            // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetPrefabInfo_Activated;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetPrefabInfo_StartAwake;                 // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetPrefabInfo_IsFreezed;                  // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetPrefabInfo_BreaksAfterUse;             // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetPrefabInfo_Color;                      // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0050(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_PlaceActors) == 0x000010, "Wrong alignment on B_CreativePlayerController_C_PlaceActors");
static_assert(sizeof(B_CreativePlayerController_C_PlaceActors) == 0x0000C0, "Wrong size on B_CreativePlayerController_C_PlaceActors");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActors, CurrentClass) == 0x000000, "Member 'B_CreativePlayerController_C_PlaceActors::CurrentClass' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActors, IsPrefab) == 0x000008, "Member 'B_CreativePlayerController_C_PlaceActors::IsPrefab' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActors, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'B_CreativePlayerController_C_PlaceActors::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActors, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'B_CreativePlayerController_C_PlaceActors::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActors, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'B_CreativePlayerController_C_PlaceActors::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActors, CallFunc_Not_PreBool_ReturnValue) == 0x000018, "Member 'B_CreativePlayerController_C_PlaceActors::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActors, CallFunc_IsPlacingPrefab_Placing_Group) == 0x000019, "Member 'B_CreativePlayerController_C_PlaceActors::CallFunc_IsPlacingPrefab_Placing_Group' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActors, CallFunc_Array_Get_Item) == 0x000020, "Member 'B_CreativePlayerController_C_PlaceActors::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActors, CallFunc_GetPrefabInfo_Activated) == 0x000028, "Member 'B_CreativePlayerController_C_PlaceActors::CallFunc_GetPrefabInfo_Activated' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActors, CallFunc_GetPrefabInfo_StartAwake) == 0x000029, "Member 'B_CreativePlayerController_C_PlaceActors::CallFunc_GetPrefabInfo_StartAwake' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActors, CallFunc_GetPrefabInfo_IsFreezed) == 0x00002A, "Member 'B_CreativePlayerController_C_PlaceActors::CallFunc_GetPrefabInfo_IsFreezed' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActors, CallFunc_GetPrefabInfo_BreaksAfterUse) == 0x00002B, "Member 'B_CreativePlayerController_C_PlaceActors::CallFunc_GetPrefabInfo_BreaksAfterUse' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActors, CallFunc_GetPrefabInfo_Color) == 0x000030, "Member 'B_CreativePlayerController_C_PlaceActors::CallFunc_GetPrefabInfo_Color' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActors, CallFunc_GetTransform_ReturnValue) == 0x000050, "Member 'B_CreativePlayerController_C_PlaceActors::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActors, CallFunc_GetObjectClass_ReturnValue) == 0x0000B0, "Member 'B_CreativePlayerController_C_PlaceActors::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActors, CallFunc_Array_Length_ReturnValue) == 0x0000B8, "Member 'B_CreativePlayerController_C_PlaceActors::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActors, CallFunc_Less_IntInt_ReturnValue) == 0x0000BC, "Member 'B_CreativePlayerController_C_PlaceActors::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.PlaceActorServer
// 0x0090 (0x0090 - 0x0000)
struct B_CreativePlayerController_C_PlaceActorServer final
{
public:
	class UClass*                                 ActorClass;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnTransform;                                    // 0x0010(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasPrefabInfo;                                     // 0x0070(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Activated;                                         // 0x0071(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StartAwake;                                        // 0x0072(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFreezed;                                         // 0x0073(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BreaksAfterUse;                                    // 0x0074(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Color;                                             // 0x0078(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_PlaceActorServer) == 0x000010, "Wrong alignment on B_CreativePlayerController_C_PlaceActorServer");
static_assert(sizeof(B_CreativePlayerController_C_PlaceActorServer) == 0x000090, "Wrong size on B_CreativePlayerController_C_PlaceActorServer");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActorServer, ActorClass) == 0x000000, "Member 'B_CreativePlayerController_C_PlaceActorServer::ActorClass' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActorServer, SpawnTransform) == 0x000010, "Member 'B_CreativePlayerController_C_PlaceActorServer::SpawnTransform' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActorServer, HasPrefabInfo) == 0x000070, "Member 'B_CreativePlayerController_C_PlaceActorServer::HasPrefabInfo' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActorServer, Activated) == 0x000071, "Member 'B_CreativePlayerController_C_PlaceActorServer::Activated' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActorServer, StartAwake) == 0x000072, "Member 'B_CreativePlayerController_C_PlaceActorServer::StartAwake' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActorServer, IsFreezed) == 0x000073, "Member 'B_CreativePlayerController_C_PlaceActorServer::IsFreezed' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActorServer, BreaksAfterUse) == 0x000074, "Member 'B_CreativePlayerController_C_PlaceActorServer::BreaksAfterUse' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_PlaceActorServer, Color) == 0x000078, "Member 'B_CreativePlayerController_C_PlaceActorServer::Color' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.PlayDeleteSoundMulti
// 0x0018 (0x0018 - 0x0000)
struct B_CreativePlayerController_C_PlayDeleteSoundMulti final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_PlayDeleteSoundMulti) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_PlayDeleteSoundMulti");
static_assert(sizeof(B_CreativePlayerController_C_PlayDeleteSoundMulti) == 0x000018, "Wrong size on B_CreativePlayerController_C_PlayDeleteSoundMulti");
static_assert(offsetof(B_CreativePlayerController_C_PlayDeleteSoundMulti, Location) == 0x000000, "Member 'B_CreativePlayerController_C_PlayDeleteSoundMulti::Location' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.PlayerDeselectMultipleForEditingServer
// 0x0010 (0x0010 - 0x0000)
struct B_CreativePlayerController_C_PlayerDeselectMultipleForEditingServer final
{
public:
	TArray<class AActor*>                         ToUnselect;                                        // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(B_CreativePlayerController_C_PlayerDeselectMultipleForEditingServer) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_PlayerDeselectMultipleForEditingServer");
static_assert(sizeof(B_CreativePlayerController_C_PlayerDeselectMultipleForEditingServer) == 0x000010, "Wrong size on B_CreativePlayerController_C_PlayerDeselectMultipleForEditingServer");
static_assert(offsetof(B_CreativePlayerController_C_PlayerDeselectMultipleForEditingServer, ToUnselect) == 0x000000, "Member 'B_CreativePlayerController_C_PlayerDeselectMultipleForEditingServer::ToUnselect' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct B_CreativePlayerController_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_ReceiveTick) == 0x000004, "Wrong alignment on B_CreativePlayerController_C_ReceiveTick");
static_assert(sizeof(B_CreativePlayerController_C_ReceiveTick) == 0x000004, "Wrong size on B_CreativePlayerController_C_ReceiveTick");
static_assert(offsetof(B_CreativePlayerController_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'B_CreativePlayerController_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.RefreshPawn
// 0x01A0 (0x01A0 - 0x0000)
struct B_CreativePlayerController_C_RefreshPawn final
{
public:
	class AB_CreativePropPawnPhysics_C*           NewPawn;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AB_CreativePropPawnPhysics_C*           OldPawn;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0xF];                                       // 0x0011(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0020(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_SpawnProp_SpawnedProp;                    // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSRuntimePropData                      CallFunc_SpawnProp_LastRuntimePropData;            // 0x0090(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetControlRotation_ReturnValue;           // 0x00C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetValues_MaximumMana;                    // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetValues_CurrentMana;                    // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetValues_CurrentManaRegenPerSecond;      // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetHealth_ReturnHealth;                   // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_108[0x8];                                      // 0x0108(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue_1;               // 0x0110(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0170(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0178(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_CreativePropPawnPhysics_C*           K2Node_DynamicCast_AsB_Creative_Prop_Pawn_Physics; // 0x0180(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_CreativePropPawnPhysics_C*           CallFunc_FinishSpawningActor_ReturnValue;          // 0x0190(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_RefreshPawn) == 0x000010, "Wrong alignment on B_CreativePlayerController_C_RefreshPawn");
static_assert(sizeof(B_CreativePlayerController_C_RefreshPawn) == 0x0001A0, "Wrong size on B_CreativePlayerController_C_RefreshPawn");
static_assert(offsetof(B_CreativePlayerController_C_RefreshPawn, NewPawn) == 0x000000, "Member 'B_CreativePlayerController_C_RefreshPawn::NewPawn' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RefreshPawn, OldPawn) == 0x000008, "Member 'B_CreativePlayerController_C_RefreshPawn::OldPawn' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RefreshPawn, CallFunc_HasAuthority_ReturnValue) == 0x000010, "Member 'B_CreativePlayerController_C_RefreshPawn::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RefreshPawn, CallFunc_GetTransform_ReturnValue) == 0x000020, "Member 'B_CreativePlayerController_C_RefreshPawn::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RefreshPawn, CallFunc_IsValid_ReturnValue) == 0x000080, "Member 'B_CreativePlayerController_C_RefreshPawn::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RefreshPawn, CallFunc_SpawnProp_SpawnedProp) == 0x000088, "Member 'B_CreativePlayerController_C_RefreshPawn::CallFunc_SpawnProp_SpawnedProp' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RefreshPawn, CallFunc_SpawnProp_LastRuntimePropData) == 0x000090, "Member 'B_CreativePlayerController_C_RefreshPawn::CallFunc_SpawnProp_LastRuntimePropData' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RefreshPawn, CallFunc_GetControlRotation_ReturnValue) == 0x0000C8, "Member 'B_CreativePlayerController_C_RefreshPawn::CallFunc_GetControlRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RefreshPawn, CallFunc_K2_SetActorRotation_ReturnValue) == 0x0000E0, "Member 'B_CreativePlayerController_C_RefreshPawn::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RefreshPawn, CallFunc_GetValues_MaximumMana) == 0x0000E8, "Member 'B_CreativePlayerController_C_RefreshPawn::CallFunc_GetValues_MaximumMana' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RefreshPawn, CallFunc_GetValues_CurrentMana) == 0x0000F0, "Member 'B_CreativePlayerController_C_RefreshPawn::CallFunc_GetValues_CurrentMana' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RefreshPawn, CallFunc_GetValues_CurrentManaRegenPerSecond) == 0x0000F8, "Member 'B_CreativePlayerController_C_RefreshPawn::CallFunc_GetValues_CurrentManaRegenPerSecond' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RefreshPawn, CallFunc_GetHealth_ReturnHealth) == 0x000100, "Member 'B_CreativePlayerController_C_RefreshPawn::CallFunc_GetHealth_ReturnHealth' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RefreshPawn, CallFunc_GetTransform_ReturnValue_1) == 0x000110, "Member 'B_CreativePlayerController_C_RefreshPawn::CallFunc_GetTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RefreshPawn, CallFunc_K2_GetPawn_ReturnValue) == 0x000170, "Member 'B_CreativePlayerController_C_RefreshPawn::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RefreshPawn, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000178, "Member 'B_CreativePlayerController_C_RefreshPawn::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RefreshPawn, K2Node_DynamicCast_AsB_Creative_Prop_Pawn_Physics) == 0x000180, "Member 'B_CreativePlayerController_C_RefreshPawn::K2Node_DynamicCast_AsB_Creative_Prop_Pawn_Physics' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RefreshPawn, K2Node_DynamicCast_bSuccess) == 0x000188, "Member 'B_CreativePlayerController_C_RefreshPawn::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RefreshPawn, CallFunc_FinishSpawningActor_ReturnValue) == 0x000190, "Member 'B_CreativePlayerController_C_RefreshPawn::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.RemoveSelectedTargetFromSwitch
// 0x0038 (0x0038 - 0x0000)
struct B_CreativePlayerController_C_RemoveSelectedTargetFromSwitch final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_Switch_C*                           TargetSwitch;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AB_SwitchConnection_C*                  CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_RemoveSelectedTargetFromSwitch) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_RemoveSelectedTargetFromSwitch");
static_assert(sizeof(B_CreativePlayerController_C_RemoveSelectedTargetFromSwitch) == 0x000038, "Wrong size on B_CreativePlayerController_C_RemoveSelectedTargetFromSwitch");
static_assert(offsetof(B_CreativePlayerController_C_RemoveSelectedTargetFromSwitch, TargetActor) == 0x000000, "Member 'B_CreativePlayerController_C_RemoveSelectedTargetFromSwitch::TargetActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RemoveSelectedTargetFromSwitch, TargetSwitch) == 0x000008, "Member 'B_CreativePlayerController_C_RemoveSelectedTargetFromSwitch::TargetSwitch' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RemoveSelectedTargetFromSwitch, Temp_bool_True_if_break_was_hit_Variable) == 0x000010, "Member 'B_CreativePlayerController_C_RemoveSelectedTargetFromSwitch::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RemoveSelectedTargetFromSwitch, Temp_int_Array_Index_Variable) == 0x000014, "Member 'B_CreativePlayerController_C_RemoveSelectedTargetFromSwitch::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RemoveSelectedTargetFromSwitch, CallFunc_Not_PreBool_ReturnValue) == 0x000018, "Member 'B_CreativePlayerController_C_RemoveSelectedTargetFromSwitch::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RemoveSelectedTargetFromSwitch, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'B_CreativePlayerController_C_RemoveSelectedTargetFromSwitch::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RemoveSelectedTargetFromSwitch, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'B_CreativePlayerController_C_RemoveSelectedTargetFromSwitch::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RemoveSelectedTargetFromSwitch, CallFunc_Array_Length_ReturnValue) == 0x000024, "Member 'B_CreativePlayerController_C_RemoveSelectedTargetFromSwitch::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RemoveSelectedTargetFromSwitch, CallFunc_Array_Get_Item) == 0x000028, "Member 'B_CreativePlayerController_C_RemoveSelectedTargetFromSwitch::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RemoveSelectedTargetFromSwitch, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'B_CreativePlayerController_C_RemoveSelectedTargetFromSwitch::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RemoveSelectedTargetFromSwitch, CallFunc_BooleanAND_ReturnValue) == 0x000031, "Member 'B_CreativePlayerController_C_RemoveSelectedTargetFromSwitch::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RemoveSelectedTargetFromSwitch, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000032, "Member 'B_CreativePlayerController_C_RemoveSelectedTargetFromSwitch::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RemoveSelectedTargetFromSwitch, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x000033, "Member 'B_CreativePlayerController_C_RemoveSelectedTargetFromSwitch::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RemoveSelectedTargetFromSwitch, CallFunc_BooleanAND_ReturnValue_1) == 0x000034, "Member 'B_CreativePlayerController_C_RemoveSelectedTargetFromSwitch::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.RemoveSelectedTargetsFromSwitch
// 0x0030 (0x0030 - 0x0000)
struct B_CreativePlayerController_C_RemoveSelectedTargetsFromSwitch final
{
public:
	class AActor*                                 SelectedActor;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_RemoveSelectedTargetsFromSwitch) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_RemoveSelectedTargetsFromSwitch");
static_assert(sizeof(B_CreativePlayerController_C_RemoveSelectedTargetsFromSwitch) == 0x000030, "Wrong size on B_CreativePlayerController_C_RemoveSelectedTargetsFromSwitch");
static_assert(offsetof(B_CreativePlayerController_C_RemoveSelectedTargetsFromSwitch, SelectedActor) == 0x000000, "Member 'B_CreativePlayerController_C_RemoveSelectedTargetsFromSwitch::SelectedActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RemoveSelectedTargetsFromSwitch, Temp_int_Array_Index_Variable) == 0x000008, "Member 'B_CreativePlayerController_C_RemoveSelectedTargetsFromSwitch::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RemoveSelectedTargetsFromSwitch, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'B_CreativePlayerController_C_RemoveSelectedTargetsFromSwitch::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RemoveSelectedTargetsFromSwitch, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000010, "Member 'B_CreativePlayerController_C_RemoveSelectedTargetsFromSwitch::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RemoveSelectedTargetsFromSwitch, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'B_CreativePlayerController_C_RemoveSelectedTargetsFromSwitch::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RemoveSelectedTargetsFromSwitch, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'B_CreativePlayerController_C_RemoveSelectedTargetsFromSwitch::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RemoveSelectedTargetsFromSwitch, CallFunc_Array_Get_Item) == 0x000020, "Member 'B_CreativePlayerController_C_RemoveSelectedTargetsFromSwitch::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RemoveSelectedTargetsFromSwitch, CallFunc_Less_IntInt_ReturnValue) == 0x000028, "Member 'B_CreativePlayerController_C_RemoveSelectedTargetsFromSwitch::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.RemoveTargetFromSwitch
// 0x0038 (0x0038 - 0x0000)
struct B_CreativePlayerController_C_RemoveTargetFromSwitch final
{
public:
	class AActor*                                 Actor_to_Remove;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_Switch_C*                           SWITCH;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         TempTargetList;                                    // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<class AActor*>                         Temp;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_RemoveTargetFromSwitch) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_RemoveTargetFromSwitch");
static_assert(sizeof(B_CreativePlayerController_C_RemoveTargetFromSwitch) == 0x000038, "Wrong size on B_CreativePlayerController_C_RemoveTargetFromSwitch");
static_assert(offsetof(B_CreativePlayerController_C_RemoveTargetFromSwitch, Actor_to_Remove) == 0x000000, "Member 'B_CreativePlayerController_C_RemoveTargetFromSwitch::Actor_to_Remove' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RemoveTargetFromSwitch, SWITCH) == 0x000008, "Member 'B_CreativePlayerController_C_RemoveTargetFromSwitch::SWITCH' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RemoveTargetFromSwitch, TempTargetList) == 0x000010, "Member 'B_CreativePlayerController_C_RemoveTargetFromSwitch::TempTargetList' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RemoveTargetFromSwitch, Temp) == 0x000020, "Member 'B_CreativePlayerController_C_RemoveTargetFromSwitch::Temp' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RemoveTargetFromSwitch, CallFunc_Array_RemoveItem_ReturnValue) == 0x000030, "Member 'B_CreativePlayerController_C_RemoveTargetFromSwitch::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RemoveTargetFromSwitch, CallFunc_Array_Contains_ReturnValue) == 0x000031, "Member 'B_CreativePlayerController_C_RemoveTargetFromSwitch::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.RemoveTargetFromSwitchServer
// 0x0020 (0x0020 - 0x0000)
struct B_CreativePlayerController_C_RemoveTargetFromSwitchServer final
{
public:
	class AActor*                                 ActorToRemove;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	const class ABP_Switch_C*                     SWITCH;                                            // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         OldTargetList;                                     // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(B_CreativePlayerController_C_RemoveTargetFromSwitchServer) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_RemoveTargetFromSwitchServer");
static_assert(sizeof(B_CreativePlayerController_C_RemoveTargetFromSwitchServer) == 0x000020, "Wrong size on B_CreativePlayerController_C_RemoveTargetFromSwitchServer");
static_assert(offsetof(B_CreativePlayerController_C_RemoveTargetFromSwitchServer, ActorToRemove) == 0x000000, "Member 'B_CreativePlayerController_C_RemoveTargetFromSwitchServer::ActorToRemove' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RemoveTargetFromSwitchServer, SWITCH) == 0x000008, "Member 'B_CreativePlayerController_C_RemoveTargetFromSwitchServer::SWITCH' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RemoveTargetFromSwitchServer, OldTargetList) == 0x000010, "Member 'B_CreativePlayerController_C_RemoveTargetFromSwitchServer::OldTargetList' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.ResetPawnTilt
// 0x0050 (0x0050 - 0x0000)
struct B_CreativePlayerController_C_ResetPawnTilt final
{
public:
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_ResetPawnTilt) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_ResetPawnTilt");
static_assert(sizeof(B_CreativePlayerController_C_ResetPawnTilt) == 0x000050, "Wrong size on B_CreativePlayerController_C_ResetPawnTilt");
static_assert(offsetof(B_CreativePlayerController_C_ResetPawnTilt, CallFunc_K2_GetPawn_ReturnValue) == 0x000000, "Member 'B_CreativePlayerController_C_ResetPawnTilt::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ResetPawnTilt, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000008, "Member 'B_CreativePlayerController_C_ResetPawnTilt::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ResetPawnTilt, CallFunc_BreakRotator_Roll) == 0x000020, "Member 'B_CreativePlayerController_C_ResetPawnTilt::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ResetPawnTilt, CallFunc_BreakRotator_Pitch) == 0x000024, "Member 'B_CreativePlayerController_C_ResetPawnTilt::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ResetPawnTilt, CallFunc_BreakRotator_Yaw) == 0x000028, "Member 'B_CreativePlayerController_C_ResetPawnTilt::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ResetPawnTilt, CallFunc_MakeRotator_ReturnValue) == 0x000030, "Member 'B_CreativePlayerController_C_ResetPawnTilt::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ResetPawnTilt, CallFunc_K2_SetActorRotation_ReturnValue) == 0x000048, "Member 'B_CreativePlayerController_C_ResetPawnTilt::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.RespawnPlayerPawn
// 0x0040 (0x0040 - 0x0000)
struct B_CreativePlayerController_C_RespawnPlayerPawn final
{
public:
	ETeamID                                       Team;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_CreativeGameMode_C*                  CreativeGameMode;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 PawnClass;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_CreativeGameMode_C*                  K2Node_DynamicCast_AsB_Creative_Game_Mode;         // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_RespawnPlayerPawn) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_RespawnPlayerPawn");
static_assert(sizeof(B_CreativePlayerController_C_RespawnPlayerPawn) == 0x000040, "Wrong size on B_CreativePlayerController_C_RespawnPlayerPawn");
static_assert(offsetof(B_CreativePlayerController_C_RespawnPlayerPawn, Team) == 0x000000, "Member 'B_CreativePlayerController_C_RespawnPlayerPawn::Team' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RespawnPlayerPawn, CreativeGameMode) == 0x000008, "Member 'B_CreativePlayerController_C_RespawnPlayerPawn::CreativeGameMode' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RespawnPlayerPawn, PawnClass) == 0x000010, "Member 'B_CreativePlayerController_C_RespawnPlayerPawn::PawnClass' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RespawnPlayerPawn, K2Node_DynamicCast_AsB_Player_State) == 0x000018, "Member 'B_CreativePlayerController_C_RespawnPlayerPawn::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RespawnPlayerPawn, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'B_CreativePlayerController_C_RespawnPlayerPawn::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RespawnPlayerPawn, K2Node_SwitchEnum_CmpSuccess) == 0x000021, "Member 'B_CreativePlayerController_C_RespawnPlayerPawn::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RespawnPlayerPawn, CallFunc_GetGameMode_ReturnValue) == 0x000028, "Member 'B_CreativePlayerController_C_RespawnPlayerPawn::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RespawnPlayerPawn, K2Node_DynamicCast_AsB_Creative_Game_Mode) == 0x000030, "Member 'B_CreativePlayerController_C_RespawnPlayerPawn::K2Node_DynamicCast_AsB_Creative_Game_Mode' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_RespawnPlayerPawn, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'B_CreativePlayerController_C_RespawnPlayerPawn::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.RespawnPlayerPawnServer
// 0x0001 (0x0001 - 0x0000)
struct B_CreativePlayerController_C_RespawnPlayerPawnServer final
{
public:
	ETeamID                                       Team;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_RespawnPlayerPawnServer) == 0x000001, "Wrong alignment on B_CreativePlayerController_C_RespawnPlayerPawnServer");
static_assert(sizeof(B_CreativePlayerController_C_RespawnPlayerPawnServer) == 0x000001, "Wrong size on B_CreativePlayerController_C_RespawnPlayerPawnServer");
static_assert(offsetof(B_CreativePlayerController_C_RespawnPlayerPawnServer, Team) == 0x000000, "Member 'B_CreativePlayerController_C_RespawnPlayerPawnServer::Team' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.SaveMousePosition
// 0x0088 (0x0088 - 0x0000)
struct B_CreativePlayerController_C_SaveMousePosition final
{
public:
	struct FVector2D                              CallFunc_GetViewportSize_ReturnValue;              // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetMousePosition_Success;                 // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetMousePosition_X;                       // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMousePosition_Y;                       // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue;                        // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue_1;                      // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_2;           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_3;           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_SaveMousePosition) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_SaveMousePosition");
static_assert(sizeof(B_CreativePlayerController_C_SaveMousePosition) == 0x000088, "Wrong size on B_CreativePlayerController_C_SaveMousePosition");
static_assert(offsetof(B_CreativePlayerController_C_SaveMousePosition, CallFunc_GetViewportSize_ReturnValue) == 0x000000, "Member 'B_CreativePlayerController_C_SaveMousePosition::CallFunc_GetViewportSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SaveMousePosition, CallFunc_GetMousePosition_Success) == 0x000010, "Member 'B_CreativePlayerController_C_SaveMousePosition::CallFunc_GetMousePosition_Success' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SaveMousePosition, CallFunc_GetMousePosition_X) == 0x000014, "Member 'B_CreativePlayerController_C_SaveMousePosition::CallFunc_GetMousePosition_X' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SaveMousePosition, CallFunc_GetMousePosition_Y) == 0x000018, "Member 'B_CreativePlayerController_C_SaveMousePosition::CallFunc_GetMousePosition_Y' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SaveMousePosition, CallFunc_BreakVector2D_X) == 0x000020, "Member 'B_CreativePlayerController_C_SaveMousePosition::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SaveMousePosition, CallFunc_BreakVector2D_Y) == 0x000028, "Member 'B_CreativePlayerController_C_SaveMousePosition::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SaveMousePosition, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000030, "Member 'B_CreativePlayerController_C_SaveMousePosition::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SaveMousePosition, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000038, "Member 'B_CreativePlayerController_C_SaveMousePosition::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SaveMousePosition, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x000040, "Member 'B_CreativePlayerController_C_SaveMousePosition::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SaveMousePosition, CallFunc_Round_ReturnValue) == 0x000048, "Member 'B_CreativePlayerController_C_SaveMousePosition::CallFunc_Round_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SaveMousePosition, CallFunc_Round_ReturnValue_1) == 0x00004C, "Member 'B_CreativePlayerController_C_SaveMousePosition::CallFunc_Round_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SaveMousePosition, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x000050, "Member 'B_CreativePlayerController_C_SaveMousePosition::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SaveMousePosition, CallFunc_Conv_IntToDouble_ReturnValue_2) == 0x000058, "Member 'B_CreativePlayerController_C_SaveMousePosition::CallFunc_Conv_IntToDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SaveMousePosition, CallFunc_Conv_IntToDouble_ReturnValue_3) == 0x000060, "Member 'B_CreativePlayerController_C_SaveMousePosition::CallFunc_Conv_IntToDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SaveMousePosition, CallFunc_MakeVector2D_ReturnValue) == 0x000068, "Member 'B_CreativePlayerController_C_SaveMousePosition::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SaveMousePosition, CallFunc_MakeVector2D_ReturnValue_1) == 0x000078, "Member 'B_CreativePlayerController_C_SaveMousePosition::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.SaveNumberedSelectionServer
// 0x0018 (0x0018 - 0x0000)
struct B_CreativePlayerController_C_SaveNumberedSelectionServer final
{
public:
	TArray<class AActor*>                         Actors;                                            // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         Number;                                            // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_SaveNumberedSelectionServer) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_SaveNumberedSelectionServer");
static_assert(sizeof(B_CreativePlayerController_C_SaveNumberedSelectionServer) == 0x000018, "Wrong size on B_CreativePlayerController_C_SaveNumberedSelectionServer");
static_assert(offsetof(B_CreativePlayerController_C_SaveNumberedSelectionServer, Actors) == 0x000000, "Member 'B_CreativePlayerController_C_SaveNumberedSelectionServer::Actors' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SaveNumberedSelectionServer, Number) == 0x000010, "Member 'B_CreativePlayerController_C_SaveNumberedSelectionServer::Number' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.SelectActor
// 0x0020 (0x0020 - 0x0000)
struct B_CreativePlayerController_C_SelectActor final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_CreativeGameState_C*                 K2Node_DynamicCast_AsB_Creative_Game_State;        // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_SelectActor) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_SelectActor");
static_assert(sizeof(B_CreativePlayerController_C_SelectActor) == 0x000020, "Wrong size on B_CreativePlayerController_C_SelectActor");
static_assert(offsetof(B_CreativePlayerController_C_SelectActor, TargetActor) == 0x000000, "Member 'B_CreativePlayerController_C_SelectActor::TargetActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SelectActor, CallFunc_GetGameState_ReturnValue) == 0x000008, "Member 'B_CreativePlayerController_C_SelectActor::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SelectActor, K2Node_DynamicCast_AsB_Creative_Game_State) == 0x000010, "Member 'B_CreativePlayerController_C_SelectActor::K2Node_DynamicCast_AsB_Creative_Game_State' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SelectActor, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'B_CreativePlayerController_C_SelectActor::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.SelectActorSever
// 0x0008 (0x0008 - 0x0000)
struct B_CreativePlayerController_C_SelectActorSever final
{
public:
	class AActor*                                 ActorToEdit;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_SelectActorSever) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_SelectActorSever");
static_assert(sizeof(B_CreativePlayerController_C_SelectActorSever) == 0x000008, "Wrong size on B_CreativePlayerController_C_SelectActorSever");
static_assert(offsetof(B_CreativePlayerController_C_SelectActorSever, ActorToEdit) == 0x000000, "Member 'B_CreativePlayerController_C_SelectActorSever::ActorToEdit' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.SelectMultiple
// 0x0120 (0x0120 - 0x0000)
struct B_CreativePlayerController_C_SelectMultiple final
{
public:
	class AActor*                                 HitActor;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         CurrentTargetActors;                               // 0x0008(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	class ABP_Switch_C*                           SwitchAnchor;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CurrentTransform;                                  // 0x0020(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CurrentActor;                                      // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AB_CreativeGameState_C*                 GameState;                                         // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	int32                                         Amount;                                            // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlaceableStaticProp_C*              K2Node_DynamicCast_AsBP_Placeable_Static_Prop;     // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BB[0x5];                                       // 0x00BB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_StaticMeshProp_C*                    K2Node_DynamicCast_AsB_Static_Mesh_Prop;           // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x00D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D3[0x5];                                       // 0x00D3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_CollisionWall_C*                    K2Node_DynamicCast_AsBP_Collision_Wall;            // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAnchorActor_AnchorActor;               // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetAnchorActor_AnchorActor_1;             // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_AttachToActor_ReturnValue;             // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue_1;      // 0x00FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FB[0x5];                                       // 0x00FB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x010C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x010D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10E[0x2];                                      // 0x010E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_SelectMultiple) == 0x000010, "Wrong alignment on B_CreativePlayerController_C_SelectMultiple");
static_assert(sizeof(B_CreativePlayerController_C_SelectMultiple) == 0x000120, "Wrong size on B_CreativePlayerController_C_SelectMultiple");
static_assert(offsetof(B_CreativePlayerController_C_SelectMultiple, HitActor) == 0x000000, "Member 'B_CreativePlayerController_C_SelectMultiple::HitActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SelectMultiple, CurrentTargetActors) == 0x000008, "Member 'B_CreativePlayerController_C_SelectMultiple::CurrentTargetActors' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SelectMultiple, SwitchAnchor) == 0x000018, "Member 'B_CreativePlayerController_C_SelectMultiple::SwitchAnchor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SelectMultiple, CurrentTransform) == 0x000020, "Member 'B_CreativePlayerController_C_SelectMultiple::CurrentTransform' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SelectMultiple, CurrentActor) == 0x000080, "Member 'B_CreativePlayerController_C_SelectMultiple::CurrentActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SelectMultiple, GameState) == 0x000088, "Member 'B_CreativePlayerController_C_SelectMultiple::GameState' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SelectMultiple, Amount) == 0x000090, "Member 'B_CreativePlayerController_C_SelectMultiple::Amount' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SelectMultiple, Temp_int_Loop_Counter_Variable) == 0x000094, "Member 'B_CreativePlayerController_C_SelectMultiple::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SelectMultiple, CallFunc_Add_IntInt_ReturnValue) == 0x000098, "Member 'B_CreativePlayerController_C_SelectMultiple::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SelectMultiple, Temp_int_Array_Index_Variable) == 0x00009C, "Member 'B_CreativePlayerController_C_SelectMultiple::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SelectMultiple, CallFunc_IsValid_ReturnValue) == 0x0000A0, "Member 'B_CreativePlayerController_C_SelectMultiple::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SelectMultiple, CallFunc_Array_Length_ReturnValue) == 0x0000A4, "Member 'B_CreativePlayerController_C_SelectMultiple::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SelectMultiple, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0000A8, "Member 'B_CreativePlayerController_C_SelectMultiple::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SelectMultiple, K2Node_DynamicCast_AsBP_Placeable_Static_Prop) == 0x0000B0, "Member 'B_CreativePlayerController_C_SelectMultiple::K2Node_DynamicCast_AsBP_Placeable_Static_Prop' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SelectMultiple, K2Node_DynamicCast_bSuccess) == 0x0000B8, "Member 'B_CreativePlayerController_C_SelectMultiple::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SelectMultiple, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0000B9, "Member 'B_CreativePlayerController_C_SelectMultiple::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SelectMultiple, CallFunc_Not_PreBool_ReturnValue) == 0x0000BA, "Member 'B_CreativePlayerController_C_SelectMultiple::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SelectMultiple, K2Node_DynamicCast_AsB_Static_Mesh_Prop) == 0x0000C0, "Member 'B_CreativePlayerController_C_SelectMultiple::K2Node_DynamicCast_AsB_Static_Mesh_Prop' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SelectMultiple, K2Node_DynamicCast_bSuccess_1) == 0x0000C8, "Member 'B_CreativePlayerController_C_SelectMultiple::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SelectMultiple, CallFunc_Array_Length_ReturnValue_1) == 0x0000CC, "Member 'B_CreativePlayerController_C_SelectMultiple::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SelectMultiple, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x0000D0, "Member 'B_CreativePlayerController_C_SelectMultiple::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SelectMultiple, CallFunc_Greater_IntInt_ReturnValue) == 0x0000D1, "Member 'B_CreativePlayerController_C_SelectMultiple::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SelectMultiple, CallFunc_Not_PreBool_ReturnValue_1) == 0x0000D2, "Member 'B_CreativePlayerController_C_SelectMultiple::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SelectMultiple, K2Node_DynamicCast_AsBP_Collision_Wall) == 0x0000D8, "Member 'B_CreativePlayerController_C_SelectMultiple::K2Node_DynamicCast_AsBP_Collision_Wall' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SelectMultiple, K2Node_DynamicCast_bSuccess_2) == 0x0000E0, "Member 'B_CreativePlayerController_C_SelectMultiple::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SelectMultiple, CallFunc_GetAnchorActor_AnchorActor) == 0x0000E8, "Member 'B_CreativePlayerController_C_SelectMultiple::CallFunc_GetAnchorActor_AnchorActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SelectMultiple, CallFunc_GetAnchorActor_AnchorActor_1) == 0x0000F0, "Member 'B_CreativePlayerController_C_SelectMultiple::CallFunc_GetAnchorActor_AnchorActor_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SelectMultiple, CallFunc_K2_AttachToActor_ReturnValue) == 0x0000F8, "Member 'B_CreativePlayerController_C_SelectMultiple::CallFunc_K2_AttachToActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SelectMultiple, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x0000F9, "Member 'B_CreativePlayerController_C_SelectMultiple::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SelectMultiple, CallFunc_NotEqual_ObjectObject_ReturnValue_1) == 0x0000FA, "Member 'B_CreativePlayerController_C_SelectMultiple::CallFunc_NotEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SelectMultiple, CallFunc_Array_Get_Item) == 0x000100, "Member 'B_CreativePlayerController_C_SelectMultiple::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SelectMultiple, CallFunc_Array_Length_ReturnValue_2) == 0x000108, "Member 'B_CreativePlayerController_C_SelectMultiple::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SelectMultiple, CallFunc_Less_IntInt_ReturnValue) == 0x00010C, "Member 'B_CreativePlayerController_C_SelectMultiple::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SelectMultiple, CallFunc_Less_IntInt_ReturnValue_1) == 0x00010D, "Member 'B_CreativePlayerController_C_SelectMultiple::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SelectMultiple, CallFunc_Array_AddUnique_ReturnValue) == 0x000110, "Member 'B_CreativePlayerController_C_SelectMultiple::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SelectMultiple, CallFunc_Array_Length_ReturnValue_3) == 0x000114, "Member 'B_CreativePlayerController_C_SelectMultiple::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SelectMultiple, CallFunc_Array_Contains_ReturnValue) == 0x000118, "Member 'B_CreativePlayerController_C_SelectMultiple::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SelectMultiple, CallFunc_Not_PreBool_ReturnValue_2) == 0x000119, "Member 'B_CreativePlayerController_C_SelectMultiple::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.SetActorDefaultRotation
// 0x0010 (0x0010 - 0x0000)
struct B_CreativePlayerController_C_SetActorDefaultRotation final
{
public:
	class AActor*                                 ActorToEdit;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_SetActorDefaultRotation) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_SetActorDefaultRotation");
static_assert(sizeof(B_CreativePlayerController_C_SetActorDefaultRotation) == 0x000010, "Wrong size on B_CreativePlayerController_C_SetActorDefaultRotation");
static_assert(offsetof(B_CreativePlayerController_C_SetActorDefaultRotation, ActorToEdit) == 0x000000, "Member 'B_CreativePlayerController_C_SetActorDefaultRotation::ActorToEdit' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorDefaultRotation, CallFunc_K2_SetActorRotation_ReturnValue) == 0x000008, "Member 'B_CreativePlayerController_C_SetActorDefaultRotation::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.SetActorDefaultScale
// 0x0040 (0x0040 - 0x0000)
struct B_CreativePlayerController_C_SetActorDefaultScale final
{
public:
	class AActor*                                 ActorToEdit;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_StaticMeshProp_C*                    K2Node_DynamicCast_AsB_Static_Mesh_Prop;           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlaceableActor_C*                   K2Node_DynamicCast_AsBP_Placeable_Actor;           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_SetActorDefaultScale) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_SetActorDefaultScale");
static_assert(sizeof(B_CreativePlayerController_C_SetActorDefaultScale) == 0x000040, "Wrong size on B_CreativePlayerController_C_SetActorDefaultScale");
static_assert(offsetof(B_CreativePlayerController_C_SetActorDefaultScale, ActorToEdit) == 0x000000, "Member 'B_CreativePlayerController_C_SetActorDefaultScale::ActorToEdit' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorDefaultScale, K2Node_DynamicCast_AsB_Static_Mesh_Prop) == 0x000008, "Member 'B_CreativePlayerController_C_SetActorDefaultScale::K2Node_DynamicCast_AsB_Static_Mesh_Prop' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorDefaultScale, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'B_CreativePlayerController_C_SetActorDefaultScale::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorDefaultScale, K2Node_DynamicCast_AsBP_Placeable_Actor) == 0x000018, "Member 'B_CreativePlayerController_C_SetActorDefaultScale::K2Node_DynamicCast_AsBP_Placeable_Actor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorDefaultScale, K2Node_DynamicCast_bSuccess_1) == 0x000020, "Member 'B_CreativePlayerController_C_SetActorDefaultScale::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorDefaultScale, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000028, "Member 'B_CreativePlayerController_C_SetActorDefaultScale::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.SetActorToPlace
// 0x03B0 (0x03B0 - 0x0000)
struct B_CreativePlayerController_C_SetActorToPlace final
{
public:
	class UClass*                                 ActorClass;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class USkeletalMeshComponent*>         SkeletalMeshes;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	class UMeshComponent*                         CurrentMesh;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ABP_PlaceableActor_C*                   PlaceableActorToPlace;                             // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AB_StaticMeshProp_C*                    PropToPlace;                                       // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 PropClass;                                         // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 PlacableActorClass;                                // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class UMeshComponent*>                 MeshComponents;                                    // 0x0040(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	TArray<class UStaticMeshComponent*>           StaticMeshes;                                      // 0x0050(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	TArray<class UBoxComponent*>                  BoxCollisions;                                     // 0x0060(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   CallFunc_Array_Get_Item;                           // 0x0088(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_4;                   // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_5;                   // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_CollisionWall_C*                    K2Node_DynamicCast_AsBP_Collision_Wall;            // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_4;                  // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 CallFunc_Array_Get_Item_1;                         // 0x00D0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USkeletalMeshComponent*>         CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x00E8(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UStaticMeshComponent*                   K2Node_DynamicCast_AsStatic_Mesh_Component;        // 0x00F8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetLocalBounds_Min;                       // 0x0108(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocalBounds_Max;                       // 0x0120(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0138(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMeshComponent*>                 CallFunc_K2_GetComponentsByClass_ReturnValue_1;    // 0x0150(0x0010)(ReferenceParm, ContainsInstancedReference)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UBoxComponent*>                  CallFunc_K2_GetComponentsByClass_ReturnValue_2;    // 0x0168(0x0010)(ReferenceParm, ContainsInstancedReference)
	TArray<class UStaticMeshComponent*>           CallFunc_K2_GetComponentsByClass_ReturnValue_3;    // 0x0178(0x0010)(ReferenceParm, ContainsInstancedReference)
	TArray<class UStaticMeshComponent*>           CallFunc_K2_GetComponentsByClass_ReturnValue_4;    // 0x0188(0x0010)(ReferenceParm, ContainsInstancedReference)
	TArray<class UParticleSystemComponent*>       CallFunc_K2_GetComponentsByClass_ReturnValue_5;    // 0x0198(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UParticleSystemComponent*               CallFunc_Array_Get_Item_2;                         // 0x01A8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x01B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B5[0x3];                                      // 0x01B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue_1;            // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_ClassDynamicCast_AsBP_Placeable_Actor;      // 0x01C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess;                  // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C9[0x7];                                      // 0x01C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsB_Static_Mesh_Prop;      // 0x01D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_1;                // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D9[0x3];                                      // 0x01D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_5;                  // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E1[0x3];                                      // 0x01E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_6;                 // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x01E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   CallFunc_Array_Get_Item_3;                         // 0x0200(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x020C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_20D[0x3];                                      // 0x020D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0210(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0270(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          CallFunc_Array_Get_Item_4;                         // 0x0278(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AB_PlacePropCheckerCube_C*              CallFunc_FinishSpawningActor_ReturnValue;          // 0x0280(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x028C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28D[0x3];                                      // 0x028D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x0290(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1; // 0x02F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x02F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0300(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0308(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_309[0x7];                                      // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_StaticMeshProp_C*                    CallFunc_FinishSpawningActor_ReturnValue_1;        // 0x0310(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMeshComponent*                         CallFunc_Array_Get_Item_5;                         // 0x0318(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_5;               // 0x0320(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_5;                // 0x0324(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_325[0x3];                                      // 0x0325(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetNumMaterials_ReturnValue;              // 0x0328(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x032C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x032D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32E[0x2];                                      // 0x032E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetComponent*                       K2Node_DynamicCast_AsWidget_Component;             // 0x0330(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0338(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_339[0x7];                                      // 0x0339(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_2;              // 0x0340(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_2; // 0x03A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_PlaceableActor_C*                   CallFunc_FinishSpawningActor_ReturnValue_2;        // 0x03A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_SetActorToPlace) == 0x000010, "Wrong alignment on B_CreativePlayerController_C_SetActorToPlace");
static_assert(sizeof(B_CreativePlayerController_C_SetActorToPlace) == 0x0003B0, "Wrong size on B_CreativePlayerController_C_SetActorToPlace");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, ActorClass) == 0x000000, "Member 'B_CreativePlayerController_C_SetActorToPlace::ActorClass' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, SkeletalMeshes) == 0x000008, "Member 'B_CreativePlayerController_C_SetActorToPlace::SkeletalMeshes' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CurrentMesh) == 0x000018, "Member 'B_CreativePlayerController_C_SetActorToPlace::CurrentMesh' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, PlaceableActorToPlace) == 0x000020, "Member 'B_CreativePlayerController_C_SetActorToPlace::PlaceableActorToPlace' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, PropToPlace) == 0x000028, "Member 'B_CreativePlayerController_C_SetActorToPlace::PropToPlace' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, PropClass) == 0x000030, "Member 'B_CreativePlayerController_C_SetActorToPlace::PropClass' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, PlacableActorClass) == 0x000038, "Member 'B_CreativePlayerController_C_SetActorToPlace::PlacableActorClass' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, MeshComponents) == 0x000040, "Member 'B_CreativePlayerController_C_SetActorToPlace::MeshComponents' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, StaticMeshes) == 0x000050, "Member 'B_CreativePlayerController_C_SetActorToPlace::StaticMeshes' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, BoxCollisions) == 0x000060, "Member 'B_CreativePlayerController_C_SetActorToPlace::BoxCollisions' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, Temp_int_Array_Index_Variable) == 0x000070, "Member 'B_CreativePlayerController_C_SetActorToPlace::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, Temp_int_Array_Index_Variable_1) == 0x000074, "Member 'B_CreativePlayerController_C_SetActorToPlace::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, Temp_int_Loop_Counter_Variable) == 0x000078, "Member 'B_CreativePlayerController_C_SetActorToPlace::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_Add_IntInt_ReturnValue) == 0x00007C, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, Temp_int_Array_Index_Variable_2) == 0x000080, "Member 'B_CreativePlayerController_C_SetActorToPlace::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, Temp_int_Loop_Counter_Variable_1) == 0x000084, "Member 'B_CreativePlayerController_C_SetActorToPlace::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_Array_Get_Item) == 0x000088, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_Array_Length_ReturnValue) == 0x000090, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_Add_IntInt_ReturnValue_1) == 0x000094, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, Temp_int_Loop_Counter_Variable_2) == 0x000098, "Member 'B_CreativePlayerController_C_SetActorToPlace::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_Add_IntInt_ReturnValue_2) == 0x00009C, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, Temp_int_Array_Index_Variable_3) == 0x0000A0, "Member 'B_CreativePlayerController_C_SetActorToPlace::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, Temp_int_Variable) == 0x0000A4, "Member 'B_CreativePlayerController_C_SetActorToPlace::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_Add_IntInt_ReturnValue_3) == 0x0000A8, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, Temp_int_Array_Index_Variable_4) == 0x0000AC, "Member 'B_CreativePlayerController_C_SetActorToPlace::Temp_int_Array_Index_Variable_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, Temp_int_Loop_Counter_Variable_3) == 0x0000B0, "Member 'B_CreativePlayerController_C_SetActorToPlace::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_Add_IntInt_ReturnValue_4) == 0x0000B4, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, Temp_int_Array_Index_Variable_5) == 0x0000B8, "Member 'B_CreativePlayerController_C_SetActorToPlace::Temp_int_Array_Index_Variable_5' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_Not_PreBool_ReturnValue) == 0x0000BC, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, K2Node_DynamicCast_AsBP_Collision_Wall) == 0x0000C0, "Member 'B_CreativePlayerController_C_SetActorToPlace::K2Node_DynamicCast_AsBP_Collision_Wall' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, K2Node_DynamicCast_bSuccess) == 0x0000C8, "Member 'B_CreativePlayerController_C_SetActorToPlace::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, Temp_int_Loop_Counter_Variable_4) == 0x0000CC, "Member 'B_CreativePlayerController_C_SetActorToPlace::Temp_int_Loop_Counter_Variable_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_Array_Get_Item_1) == 0x0000D0, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_Less_IntInt_ReturnValue) == 0x0000D8, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_Add_IntInt_ReturnValue_5) == 0x0000DC, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_Array_Length_ReturnValue_1) == 0x0000E0, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x0000E8, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, K2Node_DynamicCast_AsStatic_Mesh_Component) == 0x0000F8, "Member 'B_CreativePlayerController_C_SetActorToPlace::K2Node_DynamicCast_AsStatic_Mesh_Component' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, K2Node_DynamicCast_bSuccess_1) == 0x000100, "Member 'B_CreativePlayerController_C_SetActorToPlace::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_GetLocalBounds_Min) == 0x000108, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_GetLocalBounds_Min' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_GetLocalBounds_Max) == 0x000120, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_GetLocalBounds_Max' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000138, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_K2_GetComponentsByClass_ReturnValue_1) == 0x000150, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_K2_GetComponentsByClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_VSize_ReturnValue) == 0x000160, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_K2_GetComponentsByClass_ReturnValue_2) == 0x000168, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_K2_GetComponentsByClass_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_K2_GetComponentsByClass_ReturnValue_3) == 0x000178, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_K2_GetComponentsByClass_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_K2_GetComponentsByClass_ReturnValue_4) == 0x000188, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_K2_GetComponentsByClass_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_K2_GetComponentsByClass_ReturnValue_5) == 0x000198, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_K2_GetComponentsByClass_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_Array_Get_Item_2) == 0x0001A8, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_Array_Length_ReturnValue_2) == 0x0001B0, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_Less_IntInt_ReturnValue_1) == 0x0001B4, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_Array_AddUnique_ReturnValue) == 0x0001B8, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_Array_AddUnique_ReturnValue_1) == 0x0001BC, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_Array_AddUnique_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, K2Node_ClassDynamicCast_AsBP_Placeable_Actor) == 0x0001C0, "Member 'B_CreativePlayerController_C_SetActorToPlace::K2Node_ClassDynamicCast_AsBP_Placeable_Actor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, K2Node_ClassDynamicCast_bSuccess) == 0x0001C8, "Member 'B_CreativePlayerController_C_SetActorToPlace::K2Node_ClassDynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, K2Node_ClassDynamicCast_AsB_Static_Mesh_Prop) == 0x0001D0, "Member 'B_CreativePlayerController_C_SetActorToPlace::K2Node_ClassDynamicCast_AsB_Static_Mesh_Prop' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, K2Node_ClassDynamicCast_bSuccess_1) == 0x0001D8, "Member 'B_CreativePlayerController_C_SetActorToPlace::K2Node_ClassDynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, Temp_int_Loop_Counter_Variable_5) == 0x0001DC, "Member 'B_CreativePlayerController_C_SetActorToPlace::Temp_int_Loop_Counter_Variable_5' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_Less_IntInt_ReturnValue_2) == 0x0001E0, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_Add_IntInt_ReturnValue_6) == 0x0001E4, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_Add_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x0001E8, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_Array_Get_Item_3) == 0x000200, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_Array_Length_ReturnValue_3) == 0x000208, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_Less_IntInt_ReturnValue_3) == 0x00020C, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_MakeTransform_ReturnValue) == 0x000210, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000270, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_Array_Get_Item_4) == 0x000278, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_FinishSpawningActor_ReturnValue) == 0x000280, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_Array_Length_ReturnValue_4) == 0x000288, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_Less_IntInt_ReturnValue_4) == 0x00028C, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_MakeTransform_ReturnValue_1) == 0x000290, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1) == 0x0002F0, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_GetGameInstance_ReturnValue) == 0x0002F8, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, K2Node_DynamicCast_AsB_Game_Instance) == 0x000300, "Member 'B_CreativePlayerController_C_SetActorToPlace::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, K2Node_DynamicCast_bSuccess_2) == 0x000308, "Member 'B_CreativePlayerController_C_SetActorToPlace::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_FinishSpawningActor_ReturnValue_1) == 0x000310, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_FinishSpawningActor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_Array_Get_Item_5) == 0x000318, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_Array_Get_Item_5' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_Array_Length_ReturnValue_5) == 0x000320, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_Array_Length_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_Less_IntInt_ReturnValue_5) == 0x000324, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_Less_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_GetNumMaterials_ReturnValue) == 0x000328, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_GetNumMaterials_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00032C, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_IsValid_ReturnValue) == 0x00032D, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, K2Node_DynamicCast_AsWidget_Component) == 0x000330, "Member 'B_CreativePlayerController_C_SetActorToPlace::K2Node_DynamicCast_AsWidget_Component' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, K2Node_DynamicCast_bSuccess_3) == 0x000338, "Member 'B_CreativePlayerController_C_SetActorToPlace::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_MakeTransform_ReturnValue_2) == 0x000340, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_MakeTransform_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_2) == 0x0003A0, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetActorToPlace, CallFunc_FinishSpawningActor_ReturnValue_2) == 0x0003A8, "Member 'B_CreativePlayerController_C_SetActorToPlace::CallFunc_FinishSpawningActor_ReturnValue_2' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.SetCollisionWallAppearance
// 0x0048 (0x0048 - 0x0000)
struct B_CreativePlayerController_C_SetCollisionWallAppearance final
{
public:
	bool                                          NeedsToBeSeen;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_CollisionWall_C*>            CollisionWalls;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_CollisionWall_C*                    CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_CollisionWall_C*>            CallFunc_GetAllActorsOfClass_OutActors;            // 0x0038(0x0010)(ReferenceParm)
};
static_assert(alignof(B_CreativePlayerController_C_SetCollisionWallAppearance) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_SetCollisionWallAppearance");
static_assert(sizeof(B_CreativePlayerController_C_SetCollisionWallAppearance) == 0x000048, "Wrong size on B_CreativePlayerController_C_SetCollisionWallAppearance");
static_assert(offsetof(B_CreativePlayerController_C_SetCollisionWallAppearance, NeedsToBeSeen) == 0x000000, "Member 'B_CreativePlayerController_C_SetCollisionWallAppearance::NeedsToBeSeen' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetCollisionWallAppearance, CollisionWalls) == 0x000008, "Member 'B_CreativePlayerController_C_SetCollisionWallAppearance::CollisionWalls' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetCollisionWallAppearance, Temp_int_Array_Index_Variable) == 0x000018, "Member 'B_CreativePlayerController_C_SetCollisionWallAppearance::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetCollisionWallAppearance, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'B_CreativePlayerController_C_SetCollisionWallAppearance::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetCollisionWallAppearance, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'B_CreativePlayerController_C_SetCollisionWallAppearance::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetCollisionWallAppearance, CallFunc_Array_Get_Item) == 0x000028, "Member 'B_CreativePlayerController_C_SetCollisionWallAppearance::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetCollisionWallAppearance, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'B_CreativePlayerController_C_SetCollisionWallAppearance::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetCollisionWallAppearance, CallFunc_Less_IntInt_ReturnValue) == 0x000034, "Member 'B_CreativePlayerController_C_SetCollisionWallAppearance::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetCollisionWallAppearance, CallFunc_GetAllActorsOfClass_OutActors) == 0x000038, "Member 'B_CreativePlayerController_C_SetCollisionWallAppearance::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.SetMousePositionToMiddleOfScreen
// 0x0038 (0x0038 - 0x0000)
struct B_CreativePlayerController_C_SetMousePositionToMiddleOfScreen final
{
public:
	struct FVector2D                              CallFunc_GetViewportSize_ReturnValue;              // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue;                        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue_1;                      // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_SetMousePositionToMiddleOfScreen) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_SetMousePositionToMiddleOfScreen");
static_assert(sizeof(B_CreativePlayerController_C_SetMousePositionToMiddleOfScreen) == 0x000038, "Wrong size on B_CreativePlayerController_C_SetMousePositionToMiddleOfScreen");
static_assert(offsetof(B_CreativePlayerController_C_SetMousePositionToMiddleOfScreen, CallFunc_GetViewportSize_ReturnValue) == 0x000000, "Member 'B_CreativePlayerController_C_SetMousePositionToMiddleOfScreen::CallFunc_GetViewportSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetMousePositionToMiddleOfScreen, CallFunc_BreakVector2D_X) == 0x000010, "Member 'B_CreativePlayerController_C_SetMousePositionToMiddleOfScreen::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetMousePositionToMiddleOfScreen, CallFunc_BreakVector2D_Y) == 0x000018, "Member 'B_CreativePlayerController_C_SetMousePositionToMiddleOfScreen::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetMousePositionToMiddleOfScreen, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000020, "Member 'B_CreativePlayerController_C_SetMousePositionToMiddleOfScreen::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetMousePositionToMiddleOfScreen, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x000028, "Member 'B_CreativePlayerController_C_SetMousePositionToMiddleOfScreen::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetMousePositionToMiddleOfScreen, CallFunc_Round_ReturnValue) == 0x000030, "Member 'B_CreativePlayerController_C_SetMousePositionToMiddleOfScreen::CallFunc_Round_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetMousePositionToMiddleOfScreen, CallFunc_Round_ReturnValue_1) == 0x000034, "Member 'B_CreativePlayerController_C_SetMousePositionToMiddleOfScreen::CallFunc_Round_ReturnValue_1' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.SetMouseToSavedPosition
// 0x0020 (0x0020 - 0x0000)
struct B_CreativePlayerController_C_SetMouseToSavedPosition final
{
public:
	bool                                          CallFunc_IsPlacing_IsPlacing;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_SetMouseToSavedPosition) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_SetMouseToSavedPosition");
static_assert(sizeof(B_CreativePlayerController_C_SetMouseToSavedPosition) == 0x000020, "Wrong size on B_CreativePlayerController_C_SetMouseToSavedPosition");
static_assert(offsetof(B_CreativePlayerController_C_SetMouseToSavedPosition, CallFunc_IsPlacing_IsPlacing) == 0x000000, "Member 'B_CreativePlayerController_C_SetMouseToSavedPosition::CallFunc_IsPlacing_IsPlacing' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetMouseToSavedPosition, CallFunc_BreakVector2D_X) == 0x000008, "Member 'B_CreativePlayerController_C_SetMouseToSavedPosition::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetMouseToSavedPosition, CallFunc_BreakVector2D_Y) == 0x000010, "Member 'B_CreativePlayerController_C_SetMouseToSavedPosition::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetMouseToSavedPosition, CallFunc_FTrunc_ReturnValue) == 0x000018, "Member 'B_CreativePlayerController_C_SetMouseToSavedPosition::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetMouseToSavedPosition, CallFunc_FTrunc_ReturnValue_1) == 0x00001C, "Member 'B_CreativePlayerController_C_SetMouseToSavedPosition::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.SetPrefabToPlace
// 0x07B0 (0x07B0 - 0x0000)
struct B_CreativePlayerController_C_SetPrefabToPlace final
{
public:
	struct FPrefabToSave                          Prefab;                                            // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          Breakable;                                         // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Color;                                             // 0x0048(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFreezed;                                         // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StartAwake;                                        // 0x0061(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_Switch_C*>                   Switches;                                          // 0x0068(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class AActor*>                         SwitchTargets;                                     // 0x0078(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TMap<int32, class AActor*>                    SwitchIdMap;                                       // 0x0088(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate)
	bool                                          IsActivated;                                       // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CurrentTransform;                                  // 0x00E0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMeshComponent*>                 MeshComponents;                                    // 0x0140(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	TArray<class UStaticMeshComponent*>           StaticMeshes;                                      // 0x0150(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	TArray<class UBoxComponent*>                  BoxCollisions;                                     // 0x0160(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	class AActor*                                 ActorToPlace;                                      // 0x0170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_181[0x3];                                      // 0x0181(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_189[0x3];                                      // 0x0189(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable_1;        // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_199[0x3];                                      // 0x0199(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x01A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A5[0x3];                                      // 0x01A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable_2;        // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x01B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B2[0x2];                                      // 0x01B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable_3;        // 0x01BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1BD[0x3];                                      // 0x01BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x01C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C5[0x3];                                      // 0x01C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_4;                  // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D4[0x4];                                      // 0x01D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Switch_C*                           K2Node_DynamicCast_AsBP_Switch;                    // 0x01D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E1[0x3];                                      // 0x01E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_5;                  // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x01EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1ED[0x3];                                      // 0x01ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_4;                   // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_5;                   // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1FC[0x4];                                      // 0x01FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshComponent*                         CallFunc_Array_Get_Item;                           // 0x0200(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumMaterials_ReturnValue;              // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable_4;        // 0x020C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_20D[0x3];                                      // 0x020D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_6;                  // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0214(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_215[0x3];                                      // 0x0215(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_6;                 // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x021C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21D[0x3];                                      // 0x021D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_6;                   // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          CallFunc_Array_Get_Item_1;                         // 0x0228(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_231[0x3];                                      // 0x0231(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_7;                 // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_7;                  // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x023C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23D[0x3];                                      // 0x023D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_8;                 // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_7;                   // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_8;                  // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24C[0x4];                                      // 0x024C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   CallFunc_Array_Get_Item_2;                         // 0x0250(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_9;                 // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x025C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSwitchToSave                          CallFunc_Array_Get_Item_3;                         // 0x0260(0x0078)()
	struct FPlaceableStaticToSave                 CallFunc_Array_Get_Item_4;                         // 0x02D8(0x0070)()
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0348(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x034C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34D[0x3];                                      // 0x034D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0350(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSubclassOf<class UObject>                    CallFunc_GetClassFromPrimaryAssetId_ReturnValue;   // 0x03B0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x03B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BC[0x4];                                      // 0x03BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsBP_Placeable_Actor;      // 0x03C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess;                  // 0x03C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x03C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3CA[0x6];                                      // 0x03CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsBP_Action_Placable;      // 0x03D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_1;                // 0x03D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x03D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DA[0x2];                                      // 0x03DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_5;               // 0x03DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_5;                // 0x03E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x03E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E2[0x6];                                      // 0x03E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPropToSave                            CallFunc_Array_Get_Item_5;                         // 0x03E8(0x0068)(NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue_6;               // 0x0450(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_6;                // 0x0454(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0455(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_456[0xA];                                      // 0x0456(0x000A)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x0460(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSubclassOf<class UObject>                    CallFunc_GetClassFromPrimaryAssetId_ReturnValue_1; // 0x04C0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UClass*                                 K2Node_ClassDynamicCast_AsB_Static_Mesh_Prop;      // 0x04C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_2;                // 0x04D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D1[0x7];                                      // 0x04D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsB_Static_Mesh_Action_Prop; // 0x04D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_3;                // 0x04E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4E1[0x7];                                      // 0x04E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlaceableLightToSave                  CallFunc_Array_Get_Item_6;                         // 0x04E8(0x0078)(NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue_7;               // 0x0560(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_7;                // 0x0564(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0565(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_566[0xA];                                      // 0x0566(0x000A)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_2;              // 0x0570(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSubclassOf<class UObject>                    CallFunc_GetClassFromPrimaryAssetId_ReturnValue_2; // 0x05D0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UClass*                                 K2Node_ClassDynamicCast_AsBP_Placeable_Light;      // 0x05D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_4;                // 0x05E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5E1[0x7];                                      // 0x05E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x05E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSwitchToSave                          CallFunc_Array_Get_Item_7;                         // 0x05F0(0x0078)()
	int32                                         CallFunc_Array_Length_ReturnValue_8;               // 0x0668(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_8;                // 0x066C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x066D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_66E[0x2];                                      // 0x066E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_3;              // 0x0670(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSubclassOf<class UObject>                    CallFunc_GetClassFromPrimaryAssetId_ReturnValue_3; // 0x06D0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UClass*                                 K2Node_ClassDynamicCast_AsBP_Switch;               // 0x06D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_5;                // 0x06E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E1[0x7];                                      // 0x06E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1; // 0x06E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_PlaceableLight_C*                   CallFunc_FinishSpawningActor_ReturnValue;          // 0x06F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_Switch_C*                           CallFunc_FinishSpawningActor_ReturnValue_1;        // 0x06F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_Switch_C*                           CallFunc_Array_Get_Item_8;                         // 0x0700(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_2; // 0x0708(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_3; // 0x0710(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_PlaceableActor_C*                   CallFunc_FinishSpawningActor_ReturnValue_2;        // 0x0718(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_StaticMeshProp_C*                    CallFunc_FinishSpawningActor_ReturnValue_3;        // 0x0720(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_4; // 0x0728(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_5; // 0x0730(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_StaticMeshActionProp_C*              CallFunc_FinishSpawningActor_ReturnValue_4;        // 0x0738(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_ActionPlacable_C*                   CallFunc_FinishSpawningActor_ReturnValue_5;        // 0x0740(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item_9;                         // 0x0748(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0750(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_751[0x3];                                      // 0x0751(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0754(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_10;                // 0x0758(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_AttachToActor_ReturnValue;             // 0x075C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_75D[0x3];                                      // 0x075D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_8;                   // 0x0760(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item_10;                        // 0x0764(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UBoxComponent*>                  CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0768(0x0010)(ReferenceParm, ContainsInstancedReference)
	class AActor*                                 CallFunc_Map_Find_Value;                           // 0x0778(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0780(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_781[0x3];                                      // 0x0781(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x0784(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UStaticMeshComponent*>           CallFunc_K2_GetComponentsByClass_ReturnValue_1;    // 0x0788(0x0010)(ReferenceParm, ContainsInstancedReference)
	TArray<class UMeshComponent*>                 CallFunc_K2_GetComponentsByClass_ReturnValue_2;    // 0x0798(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         Temp_int_Variable_1;                               // 0x07A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_SetPrefabToPlace) == 0x000010, "Wrong alignment on B_CreativePlayerController_C_SetPrefabToPlace");
static_assert(sizeof(B_CreativePlayerController_C_SetPrefabToPlace) == 0x0007B0, "Wrong size on B_CreativePlayerController_C_SetPrefabToPlace");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, Prefab) == 0x000000, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::Prefab' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, Breakable) == 0x000040, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::Breakable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, Color) == 0x000048, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::Color' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, IsFreezed) == 0x000060, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::IsFreezed' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, StartAwake) == 0x000061, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::StartAwake' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, Switches) == 0x000068, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::Switches' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, SwitchTargets) == 0x000078, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::SwitchTargets' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, SwitchIdMap) == 0x000088, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::SwitchIdMap' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, IsActivated) == 0x0000D8, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::IsActivated' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CurrentTransform) == 0x0000E0, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CurrentTransform' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, MeshComponents) == 0x000140, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::MeshComponents' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, StaticMeshes) == 0x000150, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::StaticMeshes' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, BoxCollisions) == 0x000160, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::BoxCollisions' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, ActorToPlace) == 0x000170, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::ActorToPlace' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, Temp_int_Loop_Counter_Variable) == 0x000178, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Add_IntInt_ReturnValue) == 0x00017C, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, Temp_bool_True_if_break_was_hit_Variable) == 0x000180, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, Temp_int_Array_Index_Variable) == 0x000184, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Not_PreBool_ReturnValue) == 0x000188, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, Temp_int_Array_Index_Variable_1) == 0x00018C, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, Temp_int_Loop_Counter_Variable_1) == 0x000190, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Add_IntInt_ReturnValue_1) == 0x000194, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, Temp_bool_True_if_break_was_hit_Variable_1) == 0x000198, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::Temp_bool_True_if_break_was_hit_Variable_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, Temp_int_Loop_Counter_Variable_2) == 0x00019C, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Add_IntInt_ReturnValue_2) == 0x0001A0, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Not_PreBool_ReturnValue_1) == 0x0001A4, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, Temp_int_Array_Index_Variable_2) == 0x0001A8, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Array_Length_ReturnValue) == 0x0001AC, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, Temp_bool_True_if_break_was_hit_Variable_2) == 0x0001B0, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::Temp_bool_True_if_break_was_hit_Variable_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Not_PreBool_ReturnValue_2) == 0x0001B1, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, Temp_int_Loop_Counter_Variable_3) == 0x0001B4, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Add_IntInt_ReturnValue_3) == 0x0001B8, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, Temp_bool_True_if_break_was_hit_Variable_3) == 0x0001BC, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::Temp_bool_True_if_break_was_hit_Variable_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, Temp_int_Array_Index_Variable_3) == 0x0001C0, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Not_PreBool_ReturnValue_3) == 0x0001C4, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, Temp_int_Loop_Counter_Variable_4) == 0x0001C8, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::Temp_int_Loop_Counter_Variable_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Array_Length_ReturnValue_1) == 0x0001CC, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Add_IntInt_ReturnValue_4) == 0x0001D0, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, K2Node_DynamicCast_AsBP_Switch) == 0x0001D8, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::K2Node_DynamicCast_AsBP_Switch' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, K2Node_DynamicCast_bSuccess) == 0x0001E0, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Array_Length_ReturnValue_2) == 0x0001E4, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, Temp_int_Loop_Counter_Variable_5) == 0x0001E8, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::Temp_int_Loop_Counter_Variable_5' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Less_IntInt_ReturnValue) == 0x0001EC, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Add_IntInt_ReturnValue_5) == 0x0001F0, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, Temp_int_Array_Index_Variable_4) == 0x0001F4, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::Temp_int_Array_Index_Variable_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, Temp_int_Array_Index_Variable_5) == 0x0001F8, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::Temp_int_Array_Index_Variable_5' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Array_Get_Item) == 0x000200, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_GetNumMaterials_ReturnValue) == 0x000208, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_GetNumMaterials_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, Temp_bool_True_if_break_was_hit_Variable_4) == 0x00020C, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::Temp_bool_True_if_break_was_hit_Variable_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, Temp_int_Loop_Counter_Variable_6) == 0x000210, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::Temp_int_Loop_Counter_Variable_6' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Less_IntInt_ReturnValue_1) == 0x000214, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Add_IntInt_ReturnValue_6) == 0x000218, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Add_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Not_PreBool_ReturnValue_4) == 0x00021C, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, Temp_int_Array_Index_Variable_6) == 0x000220, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::Temp_int_Array_Index_Variable_6' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, Temp_int_Variable) == 0x000224, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Array_Get_Item_1) == 0x000228, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000230, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Add_IntInt_ReturnValue_7) == 0x000234, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Add_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, Temp_int_Loop_Counter_Variable_7) == 0x000238, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::Temp_int_Loop_Counter_Variable_7' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Less_IntInt_ReturnValue_2) == 0x00023C, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Add_IntInt_ReturnValue_8) == 0x000240, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Add_IntInt_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, Temp_int_Array_Index_Variable_7) == 0x000244, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::Temp_int_Array_Index_Variable_7' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, Temp_int_Loop_Counter_Variable_8) == 0x000248, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::Temp_int_Loop_Counter_Variable_8' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Array_Get_Item_2) == 0x000250, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Add_IntInt_ReturnValue_9) == 0x000258, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Add_IntInt_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Array_Add_ReturnValue) == 0x00025C, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Array_Get_Item_3) == 0x000260, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Array_Get_Item_4) == 0x0002D8, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Array_Length_ReturnValue_3) == 0x000348, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Less_IntInt_ReturnValue_3) == 0x00034C, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_MakeTransform_ReturnValue) == 0x000350, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_GetClassFromPrimaryAssetId_ReturnValue) == 0x0003B0, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_GetClassFromPrimaryAssetId_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Array_Length_ReturnValue_4) == 0x0003B8, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, K2Node_ClassDynamicCast_AsBP_Placeable_Actor) == 0x0003C0, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::K2Node_ClassDynamicCast_AsBP_Placeable_Actor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, K2Node_ClassDynamicCast_bSuccess) == 0x0003C8, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::K2Node_ClassDynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Less_IntInt_ReturnValue_4) == 0x0003C9, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, K2Node_ClassDynamicCast_AsBP_Action_Placable) == 0x0003D0, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::K2Node_ClassDynamicCast_AsBP_Action_Placable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, K2Node_ClassDynamicCast_bSuccess_1) == 0x0003D8, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::K2Node_ClassDynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_BooleanAND_ReturnValue) == 0x0003D9, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Array_Length_ReturnValue_5) == 0x0003DC, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Array_Length_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Less_IntInt_ReturnValue_5) == 0x0003E0, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Less_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_BooleanAND_ReturnValue_1) == 0x0003E1, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Array_Get_Item_5) == 0x0003E8, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Array_Get_Item_5' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Array_Length_ReturnValue_6) == 0x000450, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Array_Length_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Less_IntInt_ReturnValue_6) == 0x000454, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Less_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_BooleanAND_ReturnValue_2) == 0x000455, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_MakeTransform_ReturnValue_1) == 0x000460, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_GetClassFromPrimaryAssetId_ReturnValue_1) == 0x0004C0, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_GetClassFromPrimaryAssetId_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, K2Node_ClassDynamicCast_AsB_Static_Mesh_Prop) == 0x0004C8, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::K2Node_ClassDynamicCast_AsB_Static_Mesh_Prop' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, K2Node_ClassDynamicCast_bSuccess_2) == 0x0004D0, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::K2Node_ClassDynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, K2Node_ClassDynamicCast_AsB_Static_Mesh_Action_Prop) == 0x0004D8, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::K2Node_ClassDynamicCast_AsB_Static_Mesh_Action_Prop' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, K2Node_ClassDynamicCast_bSuccess_3) == 0x0004E0, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::K2Node_ClassDynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Array_Get_Item_6) == 0x0004E8, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Array_Get_Item_6' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Array_Length_ReturnValue_7) == 0x000560, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Array_Length_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Less_IntInt_ReturnValue_7) == 0x000564, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Less_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_BooleanAND_ReturnValue_3) == 0x000565, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_MakeTransform_ReturnValue_2) == 0x000570, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_MakeTransform_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_GetClassFromPrimaryAssetId_ReturnValue_2) == 0x0005D0, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_GetClassFromPrimaryAssetId_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, K2Node_ClassDynamicCast_AsBP_Placeable_Light) == 0x0005D8, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::K2Node_ClassDynamicCast_AsBP_Placeable_Light' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, K2Node_ClassDynamicCast_bSuccess_4) == 0x0005E0, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::K2Node_ClassDynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x0005E8, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Array_Get_Item_7) == 0x0005F0, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Array_Get_Item_7' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Array_Length_ReturnValue_8) == 0x000668, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Array_Length_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Less_IntInt_ReturnValue_8) == 0x00066C, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Less_IntInt_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_BooleanAND_ReturnValue_4) == 0x00066D, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_MakeTransform_ReturnValue_3) == 0x000670, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_MakeTransform_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_GetClassFromPrimaryAssetId_ReturnValue_3) == 0x0006D0, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_GetClassFromPrimaryAssetId_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, K2Node_ClassDynamicCast_AsBP_Switch) == 0x0006D8, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::K2Node_ClassDynamicCast_AsBP_Switch' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, K2Node_ClassDynamicCast_bSuccess_5) == 0x0006E0, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::K2Node_ClassDynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1) == 0x0006E8, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_FinishSpawningActor_ReturnValue) == 0x0006F0, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_FinishSpawningActor_ReturnValue_1) == 0x0006F8, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_FinishSpawningActor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Array_Get_Item_8) == 0x000700, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Array_Get_Item_8' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_2) == 0x000708, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_3) == 0x000710, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_FinishSpawningActor_ReturnValue_2) == 0x000718, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_FinishSpawningActor_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_FinishSpawningActor_ReturnValue_3) == 0x000720, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_FinishSpawningActor_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_4) == 0x000728, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_5) == 0x000730, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_FinishSpawningActor_ReturnValue_4) == 0x000738, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_FinishSpawningActor_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_FinishSpawningActor_ReturnValue_5) == 0x000740, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_FinishSpawningActor_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Array_Get_Item_9) == 0x000748, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Array_Get_Item_9' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000750, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Array_Add_ReturnValue_1) == 0x000754, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Add_IntInt_ReturnValue_10) == 0x000758, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Add_IntInt_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_K2_AttachToActor_ReturnValue) == 0x00075C, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_K2_AttachToActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, Temp_int_Array_Index_Variable_8) == 0x000760, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::Temp_int_Array_Index_Variable_8' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Array_Get_Item_10) == 0x000764, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Array_Get_Item_10' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000768, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Map_Find_Value) == 0x000778, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Map_Find_ReturnValue) == 0x000780, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_Array_Add_ReturnValue_2) == 0x000784, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_K2_GetComponentsByClass_ReturnValue_1) == 0x000788, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_K2_GetComponentsByClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, CallFunc_K2_GetComponentsByClass_ReturnValue_2) == 0x000798, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::CallFunc_K2_GetComponentsByClass_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SetPrefabToPlace, Temp_int_Variable_1) == 0x0007A8, "Member 'B_CreativePlayerController_C_SetPrefabToPlace::Temp_int_Variable_1' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.SetScopeMode
// 0x0001 (0x0001 - 0x0000)
struct B_CreativePlayerController_C_SetScopeMode final
{
public:
	bool                                          Active;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_SetScopeMode) == 0x000001, "Wrong alignment on B_CreativePlayerController_C_SetScopeMode");
static_assert(sizeof(B_CreativePlayerController_C_SetScopeMode) == 0x000001, "Wrong size on B_CreativePlayerController_C_SetScopeMode");
static_assert(offsetof(B_CreativePlayerController_C_SetScopeMode, Active) == 0x000000, "Member 'B_CreativePlayerController_C_SetScopeMode::Active' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.ShowPlayerListMenu
// 0x0030 (0x0030 - 0x0000)
struct B_CreativePlayerController_C_ShowPlayerListMenu final
{
public:
	bool                                          WasRelease;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            ActiveWidget;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen;        // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_1;      // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_2;      // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_3;      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_ShowPlayerListMenu) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_ShowPlayerListMenu");
static_assert(sizeof(B_CreativePlayerController_C_ShowPlayerListMenu) == 0x000030, "Wrong size on B_CreativePlayerController_C_ShowPlayerListMenu");
static_assert(offsetof(B_CreativePlayerController_C_ShowPlayerListMenu, WasRelease) == 0x000000, "Member 'B_CreativePlayerController_C_ShowPlayerListMenu::WasRelease' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ShowPlayerListMenu, ActiveWidget) == 0x000008, "Member 'B_CreativePlayerController_C_ShowPlayerListMenu::ActiveWidget' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ShowPlayerListMenu, CallFunc_GetGameInstance_ReturnValue) == 0x000010, "Member 'B_CreativePlayerController_C_ShowPlayerListMenu::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ShowPlayerListMenu, K2Node_DynamicCast_AsB_Game_Instance) == 0x000018, "Member 'B_CreativePlayerController_C_ShowPlayerListMenu::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ShowPlayerListMenu, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'B_CreativePlayerController_C_ShowPlayerListMenu::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ShowPlayerListMenu, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000021, "Member 'B_CreativePlayerController_C_ShowPlayerListMenu::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ShowPlayerListMenu, CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen) == 0x000022, "Member 'B_CreativePlayerController_C_ShowPlayerListMenu::CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ShowPlayerListMenu, CallFunc_Not_PreBool_ReturnValue) == 0x000023, "Member 'B_CreativePlayerController_C_ShowPlayerListMenu::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ShowPlayerListMenu, CallFunc_Not_PreBool_ReturnValue_1) == 0x000024, "Member 'B_CreativePlayerController_C_ShowPlayerListMenu::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ShowPlayerListMenu, CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_1) == 0x000025, "Member 'B_CreativePlayerController_C_ShowPlayerListMenu::CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ShowPlayerListMenu, CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_2) == 0x000026, "Member 'B_CreativePlayerController_C_ShowPlayerListMenu::CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ShowPlayerListMenu, CallFunc_Not_PreBool_ReturnValue_2) == 0x000027, "Member 'B_CreativePlayerController_C_ShowPlayerListMenu::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ShowPlayerListMenu, CallFunc_Not_PreBool_ReturnValue_3) == 0x000028, "Member 'B_CreativePlayerController_C_ShowPlayerListMenu::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ShowPlayerListMenu, CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_3) == 0x000029, "Member 'B_CreativePlayerController_C_ShowPlayerListMenu::CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ShowPlayerListMenu, CallFunc_Not_PreBool_ReturnValue_4) == 0x00002A, "Member 'B_CreativePlayerController_C_ShowPlayerListMenu::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ShowPlayerListMenu, CallFunc_BooleanAND_ReturnValue) == 0x00002B, "Member 'B_CreativePlayerController_C_ShowPlayerListMenu::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ShowPlayerListMenu, CallFunc_BooleanAND_ReturnValue_1) == 0x00002C, "Member 'B_CreativePlayerController_C_ShowPlayerListMenu::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ShowPlayerListMenu, CallFunc_BooleanAND_ReturnValue_2) == 0x00002D, "Member 'B_CreativePlayerController_C_ShowPlayerListMenu::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.SpawnDuplicatedActors
// 0x0170 (0x0170 - 0x0000)
struct B_CreativePlayerController_C_SpawnDuplicatedActors final
{
public:
	TArray<class AActor*>                         ActorsToDuplicate;                                 // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<uint8>                                 Materials;                                         // 0x0010(0x0010)(Edit, BlueprintVisible)
	TMap<class AActor*, class AActor*>            OriginalToDuplicatedActor;                         // 0x0020(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate)
	bool                                          BelowLimit;                                        // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 SpawnedActor;                                      // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class ABP_PlaceableActor_C*                   CurrentPlaceableActor;                             // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CurrentActor;                                      // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlaceableStaticProp_C*              K2Node_DynamicCast_AsBP_Placeable_Static_Prop;     // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x00B0(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0110(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetPrefabInfo_Activated;                  // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetPrefabInfo_StartAwake;                 // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetPrefabInfo_IsFreezed;                  // 0x011A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetPrefabInfo_BreaksAfterUse;             // 0x011B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetPrefabInfo_Color;                      // 0x0120(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_PlaceActor_NewPlacedActor;                // 0x0138(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0148(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_CreativeGameState_C*                 K2Node_DynamicCast_AsB_Creative_Game_State;        // 0x0150(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_159[0x3];                                      // 0x0159(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0160(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_SpawnDuplicatedActors) == 0x000010, "Wrong alignment on B_CreativePlayerController_C_SpawnDuplicatedActors");
static_assert(sizeof(B_CreativePlayerController_C_SpawnDuplicatedActors) == 0x000170, "Wrong size on B_CreativePlayerController_C_SpawnDuplicatedActors");
static_assert(offsetof(B_CreativePlayerController_C_SpawnDuplicatedActors, ActorsToDuplicate) == 0x000000, "Member 'B_CreativePlayerController_C_SpawnDuplicatedActors::ActorsToDuplicate' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SpawnDuplicatedActors, Materials) == 0x000010, "Member 'B_CreativePlayerController_C_SpawnDuplicatedActors::Materials' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SpawnDuplicatedActors, OriginalToDuplicatedActor) == 0x000020, "Member 'B_CreativePlayerController_C_SpawnDuplicatedActors::OriginalToDuplicatedActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SpawnDuplicatedActors, BelowLimit) == 0x000070, "Member 'B_CreativePlayerController_C_SpawnDuplicatedActors::BelowLimit' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SpawnDuplicatedActors, SpawnedActor) == 0x000078, "Member 'B_CreativePlayerController_C_SpawnDuplicatedActors::SpawnedActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SpawnDuplicatedActors, CurrentPlaceableActor) == 0x000080, "Member 'B_CreativePlayerController_C_SpawnDuplicatedActors::CurrentPlaceableActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SpawnDuplicatedActors, CurrentActor) == 0x000088, "Member 'B_CreativePlayerController_C_SpawnDuplicatedActors::CurrentActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SpawnDuplicatedActors, Temp_int_Loop_Counter_Variable) == 0x000090, "Member 'B_CreativePlayerController_C_SpawnDuplicatedActors::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SpawnDuplicatedActors, CallFunc_Add_IntInt_ReturnValue) == 0x000094, "Member 'B_CreativePlayerController_C_SpawnDuplicatedActors::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SpawnDuplicatedActors, Temp_int_Array_Index_Variable) == 0x000098, "Member 'B_CreativePlayerController_C_SpawnDuplicatedActors::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SpawnDuplicatedActors, K2Node_DynamicCast_AsBP_Placeable_Static_Prop) == 0x0000A0, "Member 'B_CreativePlayerController_C_SpawnDuplicatedActors::K2Node_DynamicCast_AsBP_Placeable_Static_Prop' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SpawnDuplicatedActors, K2Node_DynamicCast_bSuccess) == 0x0000A8, "Member 'B_CreativePlayerController_C_SpawnDuplicatedActors::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SpawnDuplicatedActors, CallFunc_GetTransform_ReturnValue) == 0x0000B0, "Member 'B_CreativePlayerController_C_SpawnDuplicatedActors::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SpawnDuplicatedActors, CallFunc_GetObjectClass_ReturnValue) == 0x000110, "Member 'B_CreativePlayerController_C_SpawnDuplicatedActors::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SpawnDuplicatedActors, CallFunc_GetPrefabInfo_Activated) == 0x000118, "Member 'B_CreativePlayerController_C_SpawnDuplicatedActors::CallFunc_GetPrefabInfo_Activated' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SpawnDuplicatedActors, CallFunc_GetPrefabInfo_StartAwake) == 0x000119, "Member 'B_CreativePlayerController_C_SpawnDuplicatedActors::CallFunc_GetPrefabInfo_StartAwake' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SpawnDuplicatedActors, CallFunc_GetPrefabInfo_IsFreezed) == 0x00011A, "Member 'B_CreativePlayerController_C_SpawnDuplicatedActors::CallFunc_GetPrefabInfo_IsFreezed' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SpawnDuplicatedActors, CallFunc_GetPrefabInfo_BreaksAfterUse) == 0x00011B, "Member 'B_CreativePlayerController_C_SpawnDuplicatedActors::CallFunc_GetPrefabInfo_BreaksAfterUse' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SpawnDuplicatedActors, CallFunc_GetPrefabInfo_Color) == 0x000120, "Member 'B_CreativePlayerController_C_SpawnDuplicatedActors::CallFunc_GetPrefabInfo_Color' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SpawnDuplicatedActors, CallFunc_PlaceActor_NewPlacedActor) == 0x000138, "Member 'B_CreativePlayerController_C_SpawnDuplicatedActors::CallFunc_PlaceActor_NewPlacedActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SpawnDuplicatedActors, CallFunc_IsValid_ReturnValue) == 0x000140, "Member 'B_CreativePlayerController_C_SpawnDuplicatedActors::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SpawnDuplicatedActors, CallFunc_GetGameState_ReturnValue) == 0x000148, "Member 'B_CreativePlayerController_C_SpawnDuplicatedActors::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SpawnDuplicatedActors, K2Node_DynamicCast_AsB_Creative_Game_State) == 0x000150, "Member 'B_CreativePlayerController_C_SpawnDuplicatedActors::K2Node_DynamicCast_AsB_Creative_Game_State' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SpawnDuplicatedActors, K2Node_DynamicCast_bSuccess_1) == 0x000158, "Member 'B_CreativePlayerController_C_SpawnDuplicatedActors::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SpawnDuplicatedActors, CallFunc_Array_Length_ReturnValue) == 0x00015C, "Member 'B_CreativePlayerController_C_SpawnDuplicatedActors::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SpawnDuplicatedActors, CallFunc_Array_Get_Item) == 0x000160, "Member 'B_CreativePlayerController_C_SpawnDuplicatedActors::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SpawnDuplicatedActors, CallFunc_Less_IntInt_ReturnValue) == 0x000168, "Member 'B_CreativePlayerController_C_SpawnDuplicatedActors::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.StartDraggingSelectedActor
// 0x0060 (0x0060 - 0x0000)
struct B_CreativePlayerController_C_StartDraggingSelectedActor final
{
public:
	class AActor*                                 ActorToDrag;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetMousePosition_Success;                 // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetMousePosition_X;                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMousePosition_Y;                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetAnchorActor_AnchorActor;               // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue;         // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_StartDraggingSelectedActor) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_StartDraggingSelectedActor");
static_assert(sizeof(B_CreativePlayerController_C_StartDraggingSelectedActor) == 0x000060, "Wrong size on B_CreativePlayerController_C_StartDraggingSelectedActor");
static_assert(offsetof(B_CreativePlayerController_C_StartDraggingSelectedActor, ActorToDrag) == 0x000000, "Member 'B_CreativePlayerController_C_StartDraggingSelectedActor::ActorToDrag' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_StartDraggingSelectedActor, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'B_CreativePlayerController_C_StartDraggingSelectedActor::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_StartDraggingSelectedActor, CallFunc_IsValid_ReturnValue_1) == 0x000009, "Member 'B_CreativePlayerController_C_StartDraggingSelectedActor::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_StartDraggingSelectedActor, CallFunc_GetMousePosition_Success) == 0x00000A, "Member 'B_CreativePlayerController_C_StartDraggingSelectedActor::CallFunc_GetMousePosition_Success' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_StartDraggingSelectedActor, CallFunc_GetMousePosition_X) == 0x00000C, "Member 'B_CreativePlayerController_C_StartDraggingSelectedActor::CallFunc_GetMousePosition_X' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_StartDraggingSelectedActor, CallFunc_GetMousePosition_Y) == 0x000010, "Member 'B_CreativePlayerController_C_StartDraggingSelectedActor::CallFunc_GetMousePosition_Y' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_StartDraggingSelectedActor, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000018, "Member 'B_CreativePlayerController_C_StartDraggingSelectedActor::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_StartDraggingSelectedActor, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x000020, "Member 'B_CreativePlayerController_C_StartDraggingSelectedActor::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_StartDraggingSelectedActor, CallFunc_MakeVector2D_ReturnValue) == 0x000028, "Member 'B_CreativePlayerController_C_StartDraggingSelectedActor::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_StartDraggingSelectedActor, CallFunc_GetAnchorActor_AnchorActor) == 0x000038, "Member 'B_CreativePlayerController_C_StartDraggingSelectedActor::CallFunc_GetAnchorActor_AnchorActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_StartDraggingSelectedActor, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000040, "Member 'B_CreativePlayerController_C_StartDraggingSelectedActor::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_StartDraggingSelectedActor, CallFunc_K2_AttachToComponent_ReturnValue) == 0x000058, "Member 'B_CreativePlayerController_C_StartDraggingSelectedActor::CallFunc_K2_AttachToComponent_ReturnValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.StopModifyingAndDraggingActor
// 0x0038 (0x0038 - 0x0000)
struct B_CreativePlayerController_C_StopModifyingAndDraggingActor final
{
public:
	class AActor*                                 CurrentActor;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetAnchorActor_AnchorActor;               // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_AttachToActor_ReturnValue;             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_StopModifyingAndDraggingActor) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_StopModifyingAndDraggingActor");
static_assert(sizeof(B_CreativePlayerController_C_StopModifyingAndDraggingActor) == 0x000038, "Wrong size on B_CreativePlayerController_C_StopModifyingAndDraggingActor");
static_assert(offsetof(B_CreativePlayerController_C_StopModifyingAndDraggingActor, CurrentActor) == 0x000000, "Member 'B_CreativePlayerController_C_StopModifyingAndDraggingActor::CurrentActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_StopModifyingAndDraggingActor, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'B_CreativePlayerController_C_StopModifyingAndDraggingActor::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_StopModifyingAndDraggingActor, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'B_CreativePlayerController_C_StopModifyingAndDraggingActor::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_StopModifyingAndDraggingActor, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'B_CreativePlayerController_C_StopModifyingAndDraggingActor::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_StopModifyingAndDraggingActor, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'B_CreativePlayerController_C_StopModifyingAndDraggingActor::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_StopModifyingAndDraggingActor, CallFunc_GetAnchorActor_AnchorActor) == 0x000018, "Member 'B_CreativePlayerController_C_StopModifyingAndDraggingActor::CallFunc_GetAnchorActor_AnchorActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_StopModifyingAndDraggingActor, CallFunc_K2_AttachToActor_ReturnValue) == 0x000020, "Member 'B_CreativePlayerController_C_StopModifyingAndDraggingActor::CallFunc_K2_AttachToActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_StopModifyingAndDraggingActor, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000021, "Member 'B_CreativePlayerController_C_StopModifyingAndDraggingActor::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_StopModifyingAndDraggingActor, CallFunc_Array_Get_Item) == 0x000028, "Member 'B_CreativePlayerController_C_StopModifyingAndDraggingActor::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_StopModifyingAndDraggingActor, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'B_CreativePlayerController_C_StopModifyingAndDraggingActor::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_StopModifyingAndDraggingActor, CallFunc_Less_IntInt_ReturnValue) == 0x000034, "Member 'B_CreativePlayerController_C_StopModifyingAndDraggingActor::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.StopPlacingAndEnableUiUse
// 0x0002 (0x0002 - 0x0000)
struct B_CreativePlayerController_C_StopPlacingAndEnableUiUse final
{
public:
	bool                                          CallFunc_IsPlacing_IsPlacing;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_StopPlacingAndEnableUiUse) == 0x000001, "Wrong alignment on B_CreativePlayerController_C_StopPlacingAndEnableUiUse");
static_assert(sizeof(B_CreativePlayerController_C_StopPlacingAndEnableUiUse) == 0x000002, "Wrong size on B_CreativePlayerController_C_StopPlacingAndEnableUiUse");
static_assert(offsetof(B_CreativePlayerController_C_StopPlacingAndEnableUiUse, CallFunc_IsPlacing_IsPlacing) == 0x000000, "Member 'B_CreativePlayerController_C_StopPlacingAndEnableUiUse::CallFunc_IsPlacing_IsPlacing' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_StopPlacingAndEnableUiUse, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'B_CreativePlayerController_C_StopPlacingAndEnableUiUse::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.SwitchConnectionAlreadyDrawn
// 0x0038 (0x0038 - 0x0000)
struct B_CreativePlayerController_C_SwitchConnectionAlreadyDrawn final
{
public:
	class AActor*                                 TestStartActor;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 TestEndActor;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          AlreadyDrawn;                                      // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AlreadyExists;                                     // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AB_SwitchConnection_C*                  CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_SwitchConnectionAlreadyDrawn) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_SwitchConnectionAlreadyDrawn");
static_assert(sizeof(B_CreativePlayerController_C_SwitchConnectionAlreadyDrawn) == 0x000038, "Wrong size on B_CreativePlayerController_C_SwitchConnectionAlreadyDrawn");
static_assert(offsetof(B_CreativePlayerController_C_SwitchConnectionAlreadyDrawn, TestStartActor) == 0x000000, "Member 'B_CreativePlayerController_C_SwitchConnectionAlreadyDrawn::TestStartActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SwitchConnectionAlreadyDrawn, TestEndActor) == 0x000008, "Member 'B_CreativePlayerController_C_SwitchConnectionAlreadyDrawn::TestEndActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SwitchConnectionAlreadyDrawn, AlreadyDrawn) == 0x000010, "Member 'B_CreativePlayerController_C_SwitchConnectionAlreadyDrawn::AlreadyDrawn' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SwitchConnectionAlreadyDrawn, AlreadyExists) == 0x000011, "Member 'B_CreativePlayerController_C_SwitchConnectionAlreadyDrawn::AlreadyExists' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SwitchConnectionAlreadyDrawn, Temp_bool_True_if_break_was_hit_Variable) == 0x000012, "Member 'B_CreativePlayerController_C_SwitchConnectionAlreadyDrawn::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SwitchConnectionAlreadyDrawn, Temp_int_Array_Index_Variable) == 0x000014, "Member 'B_CreativePlayerController_C_SwitchConnectionAlreadyDrawn::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SwitchConnectionAlreadyDrawn, CallFunc_Not_PreBool_ReturnValue) == 0x000018, "Member 'B_CreativePlayerController_C_SwitchConnectionAlreadyDrawn::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SwitchConnectionAlreadyDrawn, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'B_CreativePlayerController_C_SwitchConnectionAlreadyDrawn::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SwitchConnectionAlreadyDrawn, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'B_CreativePlayerController_C_SwitchConnectionAlreadyDrawn::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SwitchConnectionAlreadyDrawn, CallFunc_Array_Length_ReturnValue) == 0x000024, "Member 'B_CreativePlayerController_C_SwitchConnectionAlreadyDrawn::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SwitchConnectionAlreadyDrawn, CallFunc_Array_Get_Item) == 0x000028, "Member 'B_CreativePlayerController_C_SwitchConnectionAlreadyDrawn::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SwitchConnectionAlreadyDrawn, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'B_CreativePlayerController_C_SwitchConnectionAlreadyDrawn::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SwitchConnectionAlreadyDrawn, CallFunc_BooleanAND_ReturnValue) == 0x000031, "Member 'B_CreativePlayerController_C_SwitchConnectionAlreadyDrawn::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SwitchConnectionAlreadyDrawn, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000032, "Member 'B_CreativePlayerController_C_SwitchConnectionAlreadyDrawn::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SwitchConnectionAlreadyDrawn, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x000033, "Member 'B_CreativePlayerController_C_SwitchConnectionAlreadyDrawn::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_SwitchConnectionAlreadyDrawn, CallFunc_BooleanAND_ReturnValue_1) == 0x000034, "Member 'B_CreativePlayerController_C_SwitchConnectionAlreadyDrawn::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.TickEditAndPlayTestHighlights
// 0x0010 (0x0010 - 0x0000)
struct B_CreativePlayerController_C_TickEditAndPlayTestHighlights final
{
public:
	bool                                          CallFunc_IsLocalPlayerController_ReturnValue;      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_TickEditHighlights_OutTargetActor;        // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_TickEditAndPlayTestHighlights) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_TickEditAndPlayTestHighlights");
static_assert(sizeof(B_CreativePlayerController_C_TickEditAndPlayTestHighlights) == 0x000010, "Wrong size on B_CreativePlayerController_C_TickEditAndPlayTestHighlights");
static_assert(offsetof(B_CreativePlayerController_C_TickEditAndPlayTestHighlights, CallFunc_IsLocalPlayerController_ReturnValue) == 0x000000, "Member 'B_CreativePlayerController_C_TickEditAndPlayTestHighlights::CallFunc_IsLocalPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickEditAndPlayTestHighlights, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'B_CreativePlayerController_C_TickEditAndPlayTestHighlights::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickEditAndPlayTestHighlights, CallFunc_TickEditHighlights_OutTargetActor) == 0x000008, "Member 'B_CreativePlayerController_C_TickEditAndPlayTestHighlights::CallFunc_TickEditHighlights_OutTargetActor' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.TickEditHighlights
// 0x00B8 (0x00B8 - 0x0000)
struct B_CreativePlayerController_C_TickEditHighlights final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OutTargetActor;                                    // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 LocalTargetActor;                                  // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlacing_IsPlacing;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IIHighlightable_C>     K2Node_DynamicCast_AsIHighlightable;               // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetHighlight_ForcedBoolean;               // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen;        // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_1;      // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_2;      // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x0056(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_5;                // 0x0057(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_3;      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_6;                // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IIHighlightable_C>     K2Node_DynamicCast_AsIHighlightable_1;             // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetHighlight_ForcedBoolean_1;             // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0073(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ShouldShowWitchOutlines_ReturnValue;      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue_1;                 // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_TransformTrace_Actor;                     // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	E_Axis                                        CallFunc_TransformTrace_ModifyingAxis;             // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IIHighlightable_C>     K2Node_DynamicCast_AsIHighlightable_2;             // 0x00A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_TickEditHighlights) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_TickEditHighlights");
static_assert(sizeof(B_CreativePlayerController_C_TickEditHighlights) == 0x0000B8, "Wrong size on B_CreativePlayerController_C_TickEditHighlights");
static_assert(offsetof(B_CreativePlayerController_C_TickEditHighlights, TargetActor) == 0x000000, "Member 'B_CreativePlayerController_C_TickEditHighlights::TargetActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickEditHighlights, OutTargetActor) == 0x000008, "Member 'B_CreativePlayerController_C_TickEditHighlights::OutTargetActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickEditHighlights, LocalTargetActor) == 0x000010, "Member 'B_CreativePlayerController_C_TickEditHighlights::LocalTargetActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickEditHighlights, CallFunc_IsPlacing_IsPlacing) == 0x000018, "Member 'B_CreativePlayerController_C_TickEditHighlights::CallFunc_IsPlacing_IsPlacing' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickEditHighlights, CallFunc_Not_PreBool_ReturnValue) == 0x000019, "Member 'B_CreativePlayerController_C_TickEditHighlights::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickEditHighlights, CallFunc_Not_PreBool_ReturnValue_1) == 0x00001A, "Member 'B_CreativePlayerController_C_TickEditHighlights::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickEditHighlights, CallFunc_IsValid_ReturnValue) == 0x00001B, "Member 'B_CreativePlayerController_C_TickEditHighlights::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickEditHighlights, CallFunc_Not_PreBool_ReturnValue_2) == 0x00001C, "Member 'B_CreativePlayerController_C_TickEditHighlights::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickEditHighlights, CallFunc_BooleanAND_ReturnValue) == 0x00001D, "Member 'B_CreativePlayerController_C_TickEditHighlights::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickEditHighlights, CallFunc_BooleanAND_ReturnValue_1) == 0x00001E, "Member 'B_CreativePlayerController_C_TickEditHighlights::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickEditHighlights, K2Node_DynamicCast_AsIHighlightable) == 0x000020, "Member 'B_CreativePlayerController_C_TickEditHighlights::K2Node_DynamicCast_AsIHighlightable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickEditHighlights, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'B_CreativePlayerController_C_TickEditHighlights::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickEditHighlights, CallFunc_GetGameInstance_ReturnValue) == 0x000038, "Member 'B_CreativePlayerController_C_TickEditHighlights::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickEditHighlights, CallFunc_SetHighlight_ForcedBoolean) == 0x000040, "Member 'B_CreativePlayerController_C_TickEditHighlights::CallFunc_SetHighlight_ForcedBoolean' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickEditHighlights, K2Node_DynamicCast_AsB_Game_Instance) == 0x000048, "Member 'B_CreativePlayerController_C_TickEditHighlights::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickEditHighlights, K2Node_DynamicCast_bSuccess_1) == 0x000050, "Member 'B_CreativePlayerController_C_TickEditHighlights::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickEditHighlights, CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen) == 0x000051, "Member 'B_CreativePlayerController_C_TickEditHighlights::CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickEditHighlights, CallFunc_IsValid_ReturnValue_1) == 0x000052, "Member 'B_CreativePlayerController_C_TickEditHighlights::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickEditHighlights, CallFunc_Not_PreBool_ReturnValue_3) == 0x000053, "Member 'B_CreativePlayerController_C_TickEditHighlights::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickEditHighlights, CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_1) == 0x000054, "Member 'B_CreativePlayerController_C_TickEditHighlights::CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickEditHighlights, CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_2) == 0x000055, "Member 'B_CreativePlayerController_C_TickEditHighlights::CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickEditHighlights, CallFunc_Not_PreBool_ReturnValue_4) == 0x000056, "Member 'B_CreativePlayerController_C_TickEditHighlights::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickEditHighlights, CallFunc_Not_PreBool_ReturnValue_5) == 0x000057, "Member 'B_CreativePlayerController_C_TickEditHighlights::CallFunc_Not_PreBool_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickEditHighlights, CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_3) == 0x000058, "Member 'B_CreativePlayerController_C_TickEditHighlights::CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickEditHighlights, CallFunc_Not_PreBool_ReturnValue_6) == 0x000059, "Member 'B_CreativePlayerController_C_TickEditHighlights::CallFunc_Not_PreBool_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickEditHighlights, K2Node_DynamicCast_AsIHighlightable_1) == 0x000060, "Member 'B_CreativePlayerController_C_TickEditHighlights::K2Node_DynamicCast_AsIHighlightable_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickEditHighlights, K2Node_DynamicCast_bSuccess_2) == 0x000070, "Member 'B_CreativePlayerController_C_TickEditHighlights::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickEditHighlights, CallFunc_BooleanAND_ReturnValue_2) == 0x000071, "Member 'B_CreativePlayerController_C_TickEditHighlights::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickEditHighlights, CallFunc_SetHighlight_ForcedBoolean_1) == 0x000072, "Member 'B_CreativePlayerController_C_TickEditHighlights::CallFunc_SetHighlight_ForcedBoolean_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickEditHighlights, CallFunc_BooleanAND_ReturnValue_3) == 0x000073, "Member 'B_CreativePlayerController_C_TickEditHighlights::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickEditHighlights, CallFunc_BooleanAND_ReturnValue_4) == 0x000074, "Member 'B_CreativePlayerController_C_TickEditHighlights::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickEditHighlights, CallFunc_K2_GetPawn_ReturnValue) == 0x000078, "Member 'B_CreativePlayerController_C_TickEditHighlights::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickEditHighlights, CallFunc_ShouldShowWitchOutlines_ReturnValue) == 0x000080, "Member 'B_CreativePlayerController_C_TickEditHighlights::CallFunc_ShouldShowWitchOutlines_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickEditHighlights, CallFunc_K2_GetPawn_ReturnValue_1) == 0x000088, "Member 'B_CreativePlayerController_C_TickEditHighlights::CallFunc_K2_GetPawn_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickEditHighlights, CallFunc_TransformTrace_Actor) == 0x000090, "Member 'B_CreativePlayerController_C_TickEditHighlights::CallFunc_TransformTrace_Actor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickEditHighlights, CallFunc_TransformTrace_ModifyingAxis) == 0x000098, "Member 'B_CreativePlayerController_C_TickEditHighlights::CallFunc_TransformTrace_ModifyingAxis' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickEditHighlights, K2Node_DynamicCast_AsIHighlightable_2) == 0x0000A0, "Member 'B_CreativePlayerController_C_TickEditHighlights::K2Node_DynamicCast_AsIHighlightable_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickEditHighlights, K2Node_DynamicCast_bSuccess_3) == 0x0000B0, "Member 'B_CreativePlayerController_C_TickEditHighlights::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickEditHighlights, CallFunc_IsValid_ReturnValue_2) == 0x0000B1, "Member 'B_CreativePlayerController_C_TickEditHighlights::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.TickModifyingProp
// 0x0550 (0x0550 - 0x0000)
struct B_CreativePlayerController_C_TickModifyingProp final
{
public:
	double                                        Horizontal;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Vertical;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ResetLocalModifyValue;                             // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MaxScaleProp;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NewScaleZ;                                         // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NewScaleY;                                         // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NewScaleX;                                         // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxScalePropFactor;                                // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinScaleProp;                                      // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RotationDistanceVector;                            // 0x0048(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RotationDirectionVector;                           // 0x0060(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 EditingActor;                                      // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	double                                        Speed;                                             // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_CreativeHUD_C*                      CreativeHUD;                                       // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastTransform;                                     // 0x0090(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetTranslationFromCurrentMode_Translation; // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x00F0(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E9[0x7];                                      // 0x01E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_WeatherVane_C*                      K2Node_DynamicCast_AsBP_Weather_Vane;              // 0x01F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F9[0x7];                                      // 0x01F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAnchorActor_AnchorActor;               // 0x0200(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_StaticMeshProp_C*                    K2Node_DynamicCast_AsB_Static_Mesh_Prop;           // 0x0208(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_211[0xF];                                      // 0x0211(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSelectedTransform_Transform;           // 0x0220(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0288(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0290(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetRotationFromCurrentMode_Rotation;      // 0x0298(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetTranslationFromCurrentMode_Translation_1; // 0x02B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorScale3D_ReturnValue;              // 0x02C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorScale3D_ReturnValue_1;            // 0x02E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetMaxElement_ReturnValue;                // 0x02F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorFloat_ReturnValue;              // 0x0300(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0318(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0330(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0338(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0340(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0348(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_ClampScaleOfTargetOrAnchorActor_ClampedScale; // 0x0360(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0368(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_ClampScaleOfTargetOrAnchorActor_ClampedScale_1; // 0x0380(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0388(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0390(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x0398(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_ClampScaleOfTargetOrAnchorActor_ClampedScale_2; // 0x03A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_ClampScaleOfTargetOrAnchorActor_ClampedScale_3; // 0x03A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x03B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_ClampScaleOfTargetOrAnchorActor_ClampedScale_4; // 0x03C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetMaxElement_ReturnValue_1;              // 0x03D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_ClampScaleOfTargetOrAnchorActor_ClampedScale_5; // 0x03D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x03E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x03E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0400(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0418(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0419(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x041A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41B[0x5];                                      // 0x041B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_AddActorLocalRotation_SweepHitResult;  // 0x0420(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0518(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x0530(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x0548(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_TickModifyingProp) == 0x000010, "Wrong alignment on B_CreativePlayerController_C_TickModifyingProp");
static_assert(sizeof(B_CreativePlayerController_C_TickModifyingProp) == 0x000550, "Wrong size on B_CreativePlayerController_C_TickModifyingProp");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, Horizontal) == 0x000000, "Member 'B_CreativePlayerController_C_TickModifyingProp::Horizontal' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, Vertical) == 0x000008, "Member 'B_CreativePlayerController_C_TickModifyingProp::Vertical' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, ResetLocalModifyValue) == 0x000010, "Member 'B_CreativePlayerController_C_TickModifyingProp::ResetLocalModifyValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, MaxScaleProp) == 0x000018, "Member 'B_CreativePlayerController_C_TickModifyingProp::MaxScaleProp' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, NewScaleZ) == 0x000020, "Member 'B_CreativePlayerController_C_TickModifyingProp::NewScaleZ' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, NewScaleY) == 0x000028, "Member 'B_CreativePlayerController_C_TickModifyingProp::NewScaleY' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, NewScaleX) == 0x000030, "Member 'B_CreativePlayerController_C_TickModifyingProp::NewScaleX' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, MaxScalePropFactor) == 0x000038, "Member 'B_CreativePlayerController_C_TickModifyingProp::MaxScalePropFactor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, MinScaleProp) == 0x000040, "Member 'B_CreativePlayerController_C_TickModifyingProp::MinScaleProp' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, RotationDistanceVector) == 0x000048, "Member 'B_CreativePlayerController_C_TickModifyingProp::RotationDistanceVector' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, RotationDirectionVector) == 0x000060, "Member 'B_CreativePlayerController_C_TickModifyingProp::RotationDirectionVector' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, EditingActor) == 0x000078, "Member 'B_CreativePlayerController_C_TickModifyingProp::EditingActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, Speed) == 0x000080, "Member 'B_CreativePlayerController_C_TickModifyingProp::Speed' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, CreativeHUD) == 0x000088, "Member 'B_CreativePlayerController_C_TickModifyingProp::CreativeHUD' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, LastTransform) == 0x000090, "Member 'B_CreativePlayerController_C_TickModifyingProp::LastTransform' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, CallFunc_GetTranslationFromCurrentMode_Translation) == 0x0000A8, "Member 'B_CreativePlayerController_C_TickModifyingProp::CallFunc_GetTranslationFromCurrentMode_Translation' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000C0, "Member 'B_CreativePlayerController_C_TickModifyingProp::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, CallFunc_Add_VectorVector_ReturnValue) == 0x0000D8, "Member 'B_CreativePlayerController_C_TickModifyingProp::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x0000F0, "Member 'B_CreativePlayerController_C_TickModifyingProp::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, CallFunc_K2_SetActorLocation_ReturnValue) == 0x0001E8, "Member 'B_CreativePlayerController_C_TickModifyingProp::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, K2Node_DynamicCast_AsBP_Weather_Vane) == 0x0001F0, "Member 'B_CreativePlayerController_C_TickModifyingProp::K2Node_DynamicCast_AsBP_Weather_Vane' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, K2Node_DynamicCast_bSuccess) == 0x0001F8, "Member 'B_CreativePlayerController_C_TickModifyingProp::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, CallFunc_GetAnchorActor_AnchorActor) == 0x000200, "Member 'B_CreativePlayerController_C_TickModifyingProp::CallFunc_GetAnchorActor_AnchorActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, K2Node_DynamicCast_AsB_Static_Mesh_Prop) == 0x000208, "Member 'B_CreativePlayerController_C_TickModifyingProp::K2Node_DynamicCast_AsB_Static_Mesh_Prop' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, K2Node_DynamicCast_bSuccess_1) == 0x000210, "Member 'B_CreativePlayerController_C_TickModifyingProp::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, CallFunc_GetSelectedTransform_Transform) == 0x000220, "Member 'B_CreativePlayerController_C_TickModifyingProp::CallFunc_GetSelectedTransform_Transform' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000280, "Member 'B_CreativePlayerController_C_TickModifyingProp::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000288, "Member 'B_CreativePlayerController_C_TickModifyingProp::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000290, "Member 'B_CreativePlayerController_C_TickModifyingProp::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, CallFunc_GetRotationFromCurrentMode_Rotation) == 0x000298, "Member 'B_CreativePlayerController_C_TickModifyingProp::CallFunc_GetRotationFromCurrentMode_Rotation' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, CallFunc_GetTranslationFromCurrentMode_Translation_1) == 0x0002B0, "Member 'B_CreativePlayerController_C_TickModifyingProp::CallFunc_GetTranslationFromCurrentMode_Translation_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, CallFunc_GetActorScale3D_ReturnValue) == 0x0002C8, "Member 'B_CreativePlayerController_C_TickModifyingProp::CallFunc_GetActorScale3D_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, CallFunc_GetActorScale3D_ReturnValue_1) == 0x0002E0, "Member 'B_CreativePlayerController_C_TickModifyingProp::CallFunc_GetActorScale3D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, CallFunc_GetMaxElement_ReturnValue) == 0x0002F8, "Member 'B_CreativePlayerController_C_TickModifyingProp::CallFunc_GetMaxElement_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, CallFunc_Add_VectorFloat_ReturnValue) == 0x000300, "Member 'B_CreativePlayerController_C_TickModifyingProp::CallFunc_Add_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000318, "Member 'B_CreativePlayerController_C_TickModifyingProp::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, CallFunc_BreakVector_X) == 0x000330, "Member 'B_CreativePlayerController_C_TickModifyingProp::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, CallFunc_BreakVector_Y) == 0x000338, "Member 'B_CreativePlayerController_C_TickModifyingProp::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, CallFunc_BreakVector_Z) == 0x000340, "Member 'B_CreativePlayerController_C_TickModifyingProp::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000348, "Member 'B_CreativePlayerController_C_TickModifyingProp::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, CallFunc_ClampScaleOfTargetOrAnchorActor_ClampedScale) == 0x000360, "Member 'B_CreativePlayerController_C_TickModifyingProp::CallFunc_ClampScaleOfTargetOrAnchorActor_ClampedScale' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000368, "Member 'B_CreativePlayerController_C_TickModifyingProp::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, CallFunc_ClampScaleOfTargetOrAnchorActor_ClampedScale_1) == 0x000380, "Member 'B_CreativePlayerController_C_TickModifyingProp::CallFunc_ClampScaleOfTargetOrAnchorActor_ClampedScale_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, CallFunc_BreakVector_X_1) == 0x000388, "Member 'B_CreativePlayerController_C_TickModifyingProp::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, CallFunc_BreakVector_Y_1) == 0x000390, "Member 'B_CreativePlayerController_C_TickModifyingProp::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, CallFunc_BreakVector_Z_1) == 0x000398, "Member 'B_CreativePlayerController_C_TickModifyingProp::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, CallFunc_ClampScaleOfTargetOrAnchorActor_ClampedScale_2) == 0x0003A0, "Member 'B_CreativePlayerController_C_TickModifyingProp::CallFunc_ClampScaleOfTargetOrAnchorActor_ClampedScale_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, CallFunc_ClampScaleOfTargetOrAnchorActor_ClampedScale_3) == 0x0003A8, "Member 'B_CreativePlayerController_C_TickModifyingProp::CallFunc_ClampScaleOfTargetOrAnchorActor_ClampedScale_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, CallFunc_MakeVector_ReturnValue) == 0x0003B0, "Member 'B_CreativePlayerController_C_TickModifyingProp::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, CallFunc_ClampScaleOfTargetOrAnchorActor_ClampedScale_4) == 0x0003C8, "Member 'B_CreativePlayerController_C_TickModifyingProp::CallFunc_ClampScaleOfTargetOrAnchorActor_ClampedScale_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, CallFunc_GetMaxElement_ReturnValue_1) == 0x0003D0, "Member 'B_CreativePlayerController_C_TickModifyingProp::CallFunc_GetMaxElement_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, CallFunc_ClampScaleOfTargetOrAnchorActor_ClampedScale_5) == 0x0003D8, "Member 'B_CreativePlayerController_C_TickModifyingProp::CallFunc_ClampScaleOfTargetOrAnchorActor_ClampedScale_5' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x0003E0, "Member 'B_CreativePlayerController_C_TickModifyingProp::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, CallFunc_MakeVector_ReturnValue_1) == 0x0003E8, "Member 'B_CreativePlayerController_C_TickModifyingProp::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000400, "Member 'B_CreativePlayerController_C_TickModifyingProp::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000418, "Member 'B_CreativePlayerController_C_TickModifyingProp::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, K2Node_SwitchEnum_CmpSuccess) == 0x000419, "Member 'B_CreativePlayerController_C_TickModifyingProp::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, CallFunc_BooleanOR_ReturnValue) == 0x00041A, "Member 'B_CreativePlayerController_C_TickModifyingProp::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, CallFunc_K2_AddActorLocalRotation_SweepHitResult) == 0x000420, "Member 'B_CreativePlayerController_C_TickModifyingProp::CallFunc_K2_AddActorLocalRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000518, "Member 'B_CreativePlayerController_C_TickModifyingProp::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, CallFunc_ComposeRotators_ReturnValue) == 0x000530, "Member 'B_CreativePlayerController_C_TickModifyingProp::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TickModifyingProp, CallFunc_K2_SetActorRotation_ReturnValue) == 0x000548, "Member 'B_CreativePlayerController_C_TickModifyingProp::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.ToggleActionActor
// 0x0040 (0x0040 - 0x0000)
struct B_CreativePlayerController_C_ToggleActionActor final
{
public:
	class AActor*                                 ActorToToggle;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ClassToToggle;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_ActionActorSubsystem_C*              CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActorReadyForActivation_Togglable;      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ActionPlacable_C*                   K2Node_DynamicCast_AsBP_Action_Placable;           // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_StaticMeshActionProp_C*              K2Node_DynamicCast_AsB_Static_Mesh_Action_Prop;    // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Action_ForcedBoolean;                     // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_ToggleActionActor) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_ToggleActionActor");
static_assert(sizeof(B_CreativePlayerController_C_ToggleActionActor) == 0x000040, "Wrong size on B_CreativePlayerController_C_ToggleActionActor");
static_assert(offsetof(B_CreativePlayerController_C_ToggleActionActor, ActorToToggle) == 0x000000, "Member 'B_CreativePlayerController_C_ToggleActionActor::ActorToToggle' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleActionActor, ClassToToggle) == 0x000008, "Member 'B_CreativePlayerController_C_ToggleActionActor::ClassToToggle' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleActionActor, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x000010, "Member 'B_CreativePlayerController_C_ToggleActionActor::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleActionActor, CallFunc_IsActorReadyForActivation_Togglable) == 0x000018, "Member 'B_CreativePlayerController_C_ToggleActionActor::CallFunc_IsActorReadyForActivation_Togglable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleActionActor, K2Node_DynamicCast_AsBP_Action_Placable) == 0x000020, "Member 'B_CreativePlayerController_C_ToggleActionActor::K2Node_DynamicCast_AsBP_Action_Placable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleActionActor, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'B_CreativePlayerController_C_ToggleActionActor::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleActionActor, K2Node_DynamicCast_AsB_Static_Mesh_Action_Prop) == 0x000030, "Member 'B_CreativePlayerController_C_ToggleActionActor::K2Node_DynamicCast_AsB_Static_Mesh_Action_Prop' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleActionActor, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'B_CreativePlayerController_C_ToggleActionActor::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleActionActor, CallFunc_Action_ForcedBoolean) == 0x000039, "Member 'B_CreativePlayerController_C_ToggleActionActor::CallFunc_Action_ForcedBoolean' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.ToggleEscMenu
// 0x0098 (0x0098 - 0x0000)
struct B_CreativePlayerController_C_ToggleEscMenu final
{
public:
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_1;            // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_1;            // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen;        // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_2;            // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_3;            // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_2;            // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_3;            // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_1;      // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_2;      // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_3;      // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x005E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_4;      // 0x005F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_4;            // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_4;            // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasSelectedSomething_HasSelectedActor;    // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlacing_IsPlacing;                      // 0x0092(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlacing_IsPlacing_1;                    // 0x0093(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0095(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_ToggleEscMenu) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_ToggleEscMenu");
static_assert(sizeof(B_CreativePlayerController_C_ToggleEscMenu) == 0x000098, "Wrong size on B_CreativePlayerController_C_ToggleEscMenu");
static_assert(offsetof(B_CreativePlayerController_C_ToggleEscMenu, CallFunc_GetGameInstance_ReturnValue) == 0x000000, "Member 'B_CreativePlayerController_C_ToggleEscMenu::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleEscMenu, CallFunc_GetGameInstance_ReturnValue_1) == 0x000008, "Member 'B_CreativePlayerController_C_ToggleEscMenu::CallFunc_GetGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleEscMenu, K2Node_DynamicCast_AsB_Game_Instance) == 0x000010, "Member 'B_CreativePlayerController_C_ToggleEscMenu::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleEscMenu, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'B_CreativePlayerController_C_ToggleEscMenu::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleEscMenu, K2Node_DynamicCast_AsB_Game_Instance_1) == 0x000020, "Member 'B_CreativePlayerController_C_ToggleEscMenu::K2Node_DynamicCast_AsB_Game_Instance_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleEscMenu, K2Node_DynamicCast_bSuccess_1) == 0x000028, "Member 'B_CreativePlayerController_C_ToggleEscMenu::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleEscMenu, CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen) == 0x000029, "Member 'B_CreativePlayerController_C_ToggleEscMenu::CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleEscMenu, CallFunc_GetGameInstance_ReturnValue_2) == 0x000030, "Member 'B_CreativePlayerController_C_ToggleEscMenu::CallFunc_GetGameInstance_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleEscMenu, CallFunc_GetGameInstance_ReturnValue_3) == 0x000038, "Member 'B_CreativePlayerController_C_ToggleEscMenu::CallFunc_GetGameInstance_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleEscMenu, K2Node_DynamicCast_AsB_Game_Instance_2) == 0x000040, "Member 'B_CreativePlayerController_C_ToggleEscMenu::K2Node_DynamicCast_AsB_Game_Instance_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleEscMenu, K2Node_DynamicCast_bSuccess_2) == 0x000048, "Member 'B_CreativePlayerController_C_ToggleEscMenu::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleEscMenu, K2Node_DynamicCast_AsB_Game_Instance_3) == 0x000050, "Member 'B_CreativePlayerController_C_ToggleEscMenu::K2Node_DynamicCast_AsB_Game_Instance_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleEscMenu, K2Node_DynamicCast_bSuccess_3) == 0x000058, "Member 'B_CreativePlayerController_C_ToggleEscMenu::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleEscMenu, CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_1) == 0x000059, "Member 'B_CreativePlayerController_C_ToggleEscMenu::CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleEscMenu, CallFunc_Not_PreBool_ReturnValue) == 0x00005A, "Member 'B_CreativePlayerController_C_ToggleEscMenu::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleEscMenu, CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_2) == 0x00005B, "Member 'B_CreativePlayerController_C_ToggleEscMenu::CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleEscMenu, CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_3) == 0x00005C, "Member 'B_CreativePlayerController_C_ToggleEscMenu::CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleEscMenu, CallFunc_Not_PreBool_ReturnValue_1) == 0x00005D, "Member 'B_CreativePlayerController_C_ToggleEscMenu::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleEscMenu, CallFunc_Not_PreBool_ReturnValue_2) == 0x00005E, "Member 'B_CreativePlayerController_C_ToggleEscMenu::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleEscMenu, CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_4) == 0x00005F, "Member 'B_CreativePlayerController_C_ToggleEscMenu::CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleEscMenu, CallFunc_Not_PreBool_ReturnValue_3) == 0x000060, "Member 'B_CreativePlayerController_C_ToggleEscMenu::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleEscMenu, CallFunc_K2_GetPawn_ReturnValue) == 0x000068, "Member 'B_CreativePlayerController_C_ToggleEscMenu::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleEscMenu, CallFunc_BooleanAND_ReturnValue) == 0x000070, "Member 'B_CreativePlayerController_C_ToggleEscMenu::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleEscMenu, CallFunc_BooleanAND_ReturnValue_1) == 0x000071, "Member 'B_CreativePlayerController_C_ToggleEscMenu::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleEscMenu, CallFunc_GetGameInstance_ReturnValue_4) == 0x000078, "Member 'B_CreativePlayerController_C_ToggleEscMenu::CallFunc_GetGameInstance_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleEscMenu, CallFunc_BooleanAND_ReturnValue_2) == 0x000080, "Member 'B_CreativePlayerController_C_ToggleEscMenu::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleEscMenu, K2Node_DynamicCast_AsB_Game_Instance_4) == 0x000088, "Member 'B_CreativePlayerController_C_ToggleEscMenu::K2Node_DynamicCast_AsB_Game_Instance_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleEscMenu, K2Node_DynamicCast_bSuccess_4) == 0x000090, "Member 'B_CreativePlayerController_C_ToggleEscMenu::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleEscMenu, CallFunc_HasSelectedSomething_HasSelectedActor) == 0x000091, "Member 'B_CreativePlayerController_C_ToggleEscMenu::CallFunc_HasSelectedSomething_HasSelectedActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleEscMenu, CallFunc_IsPlacing_IsPlacing) == 0x000092, "Member 'B_CreativePlayerController_C_ToggleEscMenu::CallFunc_IsPlacing_IsPlacing' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleEscMenu, CallFunc_IsPlacing_IsPlacing_1) == 0x000093, "Member 'B_CreativePlayerController_C_ToggleEscMenu::CallFunc_IsPlacing_IsPlacing_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleEscMenu, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000094, "Member 'B_CreativePlayerController_C_ToggleEscMenu::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleEscMenu, CallFunc_BooleanOR_ReturnValue) == 0x000095, "Member 'B_CreativePlayerController_C_ToggleEscMenu::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.ToggleFreeMouse
// 0x0028 (0x0028 - 0x0000)
struct B_CreativePlayerController_C_ToggleFreeMouse final
{
public:
	bool                                          DisableTurn;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                NewLocalVar_0;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_CreativeSpectator_C*                 K2Node_DynamicCast_AsB_Creative_Spectator;         // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_ToggleFreeMouse) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_ToggleFreeMouse");
static_assert(sizeof(B_CreativePlayerController_C_ToggleFreeMouse) == 0x000028, "Wrong size on B_CreativePlayerController_C_ToggleFreeMouse");
static_assert(offsetof(B_CreativePlayerController_C_ToggleFreeMouse, DisableTurn) == 0x000000, "Member 'B_CreativePlayerController_C_ToggleFreeMouse::DisableTurn' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleFreeMouse, NewLocalVar_0) == 0x000008, "Member 'B_CreativePlayerController_C_ToggleFreeMouse::NewLocalVar_0' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleFreeMouse, CallFunc_K2_GetPawn_ReturnValue) == 0x000010, "Member 'B_CreativePlayerController_C_ToggleFreeMouse::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleFreeMouse, K2Node_DynamicCast_AsB_Creative_Spectator) == 0x000018, "Member 'B_CreativePlayerController_C_ToggleFreeMouse::K2Node_DynamicCast_AsB_Creative_Spectator' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleFreeMouse, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'B_CreativePlayerController_C_ToggleFreeMouse::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.ToggleGravityApplication
// 0x0068 (0x0068 - 0x0000)
struct B_CreativePlayerController_C_ToggleGravityApplication final
{
public:
	bool                                          UsePhysicsNow;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsNotAnchor;                                       // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CurrentActor;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetAnchorActor_AnchorActor;               // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_StaticMeshProp_C*                    K2Node_DynamicCast_AsB_Static_Mesh_Prop;           // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAnchorActor_AnchorActor_1;             // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_AttachToActor_ReturnValue;             // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_ToggleGravityApplication) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_ToggleGravityApplication");
static_assert(sizeof(B_CreativePlayerController_C_ToggleGravityApplication) == 0x000068, "Wrong size on B_CreativePlayerController_C_ToggleGravityApplication");
static_assert(offsetof(B_CreativePlayerController_C_ToggleGravityApplication, UsePhysicsNow) == 0x000000, "Member 'B_CreativePlayerController_C_ToggleGravityApplication::UsePhysicsNow' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleGravityApplication, IsNotAnchor) == 0x000001, "Member 'B_CreativePlayerController_C_ToggleGravityApplication::IsNotAnchor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleGravityApplication, CurrentActor) == 0x000008, "Member 'B_CreativePlayerController_C_ToggleGravityApplication::CurrentActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleGravityApplication, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'B_CreativePlayerController_C_ToggleGravityApplication::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleGravityApplication, CallFunc_Subtract_IntInt_ReturnValue) == 0x000014, "Member 'B_CreativePlayerController_C_ToggleGravityApplication::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleGravityApplication, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000018, "Member 'B_CreativePlayerController_C_ToggleGravityApplication::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleGravityApplication, Temp_int_Array_Index_Variable) == 0x00001C, "Member 'B_CreativePlayerController_C_ToggleGravityApplication::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleGravityApplication, CallFunc_GetAnchorActor_AnchorActor) == 0x000020, "Member 'B_CreativePlayerController_C_ToggleGravityApplication::CallFunc_GetAnchorActor_AnchorActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleGravityApplication, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000028, "Member 'B_CreativePlayerController_C_ToggleGravityApplication::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleGravityApplication, K2Node_DynamicCast_AsB_Static_Mesh_Prop) == 0x000030, "Member 'B_CreativePlayerController_C_ToggleGravityApplication::K2Node_DynamicCast_AsB_Static_Mesh_Prop' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleGravityApplication, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'B_CreativePlayerController_C_ToggleGravityApplication::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleGravityApplication, CallFunc_Not_PreBool_ReturnValue) == 0x000039, "Member 'B_CreativePlayerController_C_ToggleGravityApplication::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleGravityApplication, CallFunc_GetAnchorActor_AnchorActor_1) == 0x000040, "Member 'B_CreativePlayerController_C_ToggleGravityApplication::CallFunc_GetAnchorActor_AnchorActor_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleGravityApplication, CallFunc_K2_AttachToActor_ReturnValue) == 0x000048, "Member 'B_CreativePlayerController_C_ToggleGravityApplication::CallFunc_K2_AttachToActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleGravityApplication, CallFunc_Array_Get_Item) == 0x000050, "Member 'B_CreativePlayerController_C_ToggleGravityApplication::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleGravityApplication, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'B_CreativePlayerController_C_ToggleGravityApplication::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleGravityApplication, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x00005C, "Member 'B_CreativePlayerController_C_ToggleGravityApplication::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleGravityApplication, CallFunc_Max_ReturnValue) == 0x000060, "Member 'B_CreativePlayerController_C_ToggleGravityApplication::CallFunc_Max_ReturnValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.TogglePlayTest
// 0x0030 (0x0030 - 0x0000)
struct B_CreativePlayerController_C_TogglePlayTest final
{
public:
	E_CreativePlayerMode                          NewMode;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              CallFunc_Now_ReturnValue;                          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_CreativeGameMode_C*                  K2Node_DynamicCast_AsB_Creative_Game_Mode;         // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_TogglePlayTest) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_TogglePlayTest");
static_assert(sizeof(B_CreativePlayerController_C_TogglePlayTest) == 0x000030, "Wrong size on B_CreativePlayerController_C_TogglePlayTest");
static_assert(offsetof(B_CreativePlayerController_C_TogglePlayTest, NewMode) == 0x000000, "Member 'B_CreativePlayerController_C_TogglePlayTest::NewMode' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TogglePlayTest, CallFunc_Now_ReturnValue) == 0x000008, "Member 'B_CreativePlayerController_C_TogglePlayTest::CallFunc_Now_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TogglePlayTest, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000010, "Member 'B_CreativePlayerController_C_TogglePlayTest::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TogglePlayTest, CallFunc_GetGameMode_ReturnValue) == 0x000018, "Member 'B_CreativePlayerController_C_TogglePlayTest::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TogglePlayTest, K2Node_DynamicCast_AsB_Creative_Game_Mode) == 0x000020, "Member 'B_CreativePlayerController_C_TogglePlayTest::K2Node_DynamicCast_AsB_Creative_Game_Mode' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TogglePlayTest, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'B_CreativePlayerController_C_TogglePlayTest::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.ToggleSwitchBreaksAfterUse
// 0x0010 (0x0010 - 0x0000)
struct B_CreativePlayerController_C_ToggleSwitchBreaksAfterUse final
{
public:
	class ABP_Switch_C*                           SWITCH;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          BreaksAfterUse;                                    // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_ToggleSwitchBreaksAfterUse) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_ToggleSwitchBreaksAfterUse");
static_assert(sizeof(B_CreativePlayerController_C_ToggleSwitchBreaksAfterUse) == 0x000010, "Wrong size on B_CreativePlayerController_C_ToggleSwitchBreaksAfterUse");
static_assert(offsetof(B_CreativePlayerController_C_ToggleSwitchBreaksAfterUse, SWITCH) == 0x000000, "Member 'B_CreativePlayerController_C_ToggleSwitchBreaksAfterUse::SWITCH' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleSwitchBreaksAfterUse, BreaksAfterUse) == 0x000008, "Member 'B_CreativePlayerController_C_ToggleSwitchBreaksAfterUse::BreaksAfterUse' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleSwitchBreaksAfterUse, CallFunc_Not_PreBool_ReturnValue) == 0x000009, "Member 'B_CreativePlayerController_C_ToggleSwitchBreaksAfterUse::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.ToggleSwitchBreaksServer
// 0x0010 (0x0010 - 0x0000)
struct B_CreativePlayerController_C_ToggleSwitchBreaksServer final
{
public:
	class ABP_Switch_C*                           SWITCH;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          BreaksAfterUse;                                    // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_ToggleSwitchBreaksServer) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_ToggleSwitchBreaksServer");
static_assert(sizeof(B_CreativePlayerController_C_ToggleSwitchBreaksServer) == 0x000010, "Wrong size on B_CreativePlayerController_C_ToggleSwitchBreaksServer");
static_assert(offsetof(B_CreativePlayerController_C_ToggleSwitchBreaksServer, SWITCH) == 0x000000, "Member 'B_CreativePlayerController_C_ToggleSwitchBreaksServer::SWITCH' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_ToggleSwitchBreaksServer, BreaksAfterUse) == 0x000008, "Member 'B_CreativePlayerController_C_ToggleSwitchBreaksServer::BreaksAfterUse' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.TraceActorToPlace
// 0x0D90 (0x0D90 - 0x0000)
struct B_CreativePlayerController_C_TraceActorToPlace final
{
public:
	struct FVector                                NewPosition;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlaceableActor_C*                   PlaceableActorToPlace;                             // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AB_StaticMeshProp_C*                    PropToPlace;                                       // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LocationShift;                                     // 0x0028(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitLocation;                                       // 0x0040(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0058(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_IsPlacing_IsPlacing;                      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A[0x2];                                       // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable_1;                            // 0x0078(0x0010)(ConstParm, ReferenceParm)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetMouseTraceStartAndEndPoints_StartPoint; // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetMouseTraceStartAndEndPoints_EndPoint;  // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetMouseTraceStartAndEndPoints_StartPoint_1; // 0x00C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetMouseTraceStartAndEndPoints_EndPoint_1; // 0x00E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0110(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocalPlayerController_ReturnValue;      // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x011A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen;        // 0x011B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_1;      // 0x011D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_2;      // 0x011E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x011F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_3;      // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x0122(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_123[0x5];                                      // 0x0123(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0128(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_132[0x2];                                      // 0x0132(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0139(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13A[0x6];                                      // 0x013A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item_1;                         // 0x0140(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_149[0x3];                                      // 0x0149(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_151[0x7];                                      // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetMouseTraceStartAndEndPoints_StartPoint_2; // 0x0158(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetMouseTraceStartAndEndPoints_EndPoint_2; // 0x0170(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetMouseTraceStartAndEndPoints_StartPoint_3; // 0x0188(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetMouseTraceStartAndEndPoints_EndPoint_3; // 0x01A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetAnchorActor_AnchorActor;               // 0x01B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorScale3D_ReturnValue;              // 0x01C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AB_StaticMeshProp_C*                    K2Node_DynamicCast_AsB_Static_Mesh_Prop;           // 0x01D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E1[0x7];                                      // 0x01E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetCenter_Center;                         // 0x01E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0200(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetAnchorActor_AnchorActor_1;             // 0x0218(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_PlaceableActor_C*                   K2Node_DynamicCast_AsBP_Placeable_Actor;           // 0x0220(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_229[0x7];                                      // 0x0229(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0230(0x0010)(ConstParm, ReferenceParm)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x0240(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x0338(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_339[0x7];                                      // 0x0339(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector_X;                            // 0x0340(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0348(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0350(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0358(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0359(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35A[0x2];                                      // 0x035A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x035C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0360(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_364[0x4];                                      // 0x0364(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0368(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0380(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0398(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x03B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x03C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x03D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x03D8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x03E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x03E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x03F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x03F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x03F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FC[0x4];                                      // 0x03FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0400(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0418(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default;                             // 0x0430(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_448[0x8];                                      // 0x0448(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0450(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorTransform_SweepHitResult;      // 0x04B0(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorTransform_ReturnValue;         // 0x05A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A9[0x7];                                      // 0x05A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x05B0(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0610(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0628(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0640(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0658(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0670(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_671[0xF];                                      // 0x0671(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x0680(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorTransform_SweepHitResult_1;    // 0x06E0(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorTransform_ReturnValue_1;       // 0x07D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D9[0x7];                                      // 0x07D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x07E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x07E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array_1;                          // 0x07F0(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0800(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit_1;       // 0x0818(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue_1;  // 0x0910(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_1;            // 0x0911(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_1;         // 0x0912(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_913[0x1];                                      // 0x0913(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_1;                    // 0x0914(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_1;                // 0x0918(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91C[0x4];                                      // 0x091C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location_1;                // 0x0920(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_1;             // 0x0938(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_1;                  // 0x0950(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_1;            // 0x0968(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_1;                 // 0x0980(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_1;                // 0x0988(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_1;            // 0x0990(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_1;             // 0x0998(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName_1;                // 0x09A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_1;                 // 0x09A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_1;            // 0x09AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_1;               // 0x09B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9B4[0x4];                                      // 0x09B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart_1;              // 0x09B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_1;                // 0x09D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue_1;                 // 0x09E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_1;                           // 0x09F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A08[0x8];                                      // 0x0A08(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue_1;               // 0x0A10(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_2;              // 0x0A70(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x0AD0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x0AE8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x0B00(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorTransform_SweepHitResult_2;    // 0x0B18(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorTransform_ReturnValue_2;       // 0x0C10(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C11[0x7];                                      // 0x0C11(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0C18(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_3;              // 0x0C30(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorTransform_SweepHitResult_3;    // 0x0C90(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorTransform_ReturnValue_3;       // 0x0D88(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_TraceActorToPlace) == 0x000010, "Wrong alignment on B_CreativePlayerController_C_TraceActorToPlace");
static_assert(sizeof(B_CreativePlayerController_C_TraceActorToPlace) == 0x000D90, "Wrong size on B_CreativePlayerController_C_TraceActorToPlace");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, NewPosition) == 0x000000, "Member 'B_CreativePlayerController_C_TraceActorToPlace::NewPosition' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, PlaceableActorToPlace) == 0x000018, "Member 'B_CreativePlayerController_C_TraceActorToPlace::PlaceableActorToPlace' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, PropToPlace) == 0x000020, "Member 'B_CreativePlayerController_C_TraceActorToPlace::PropToPlace' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, LocationShift) == 0x000028, "Member 'B_CreativePlayerController_C_TraceActorToPlace::LocationShift' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, HitLocation) == 0x000040, "Member 'B_CreativePlayerController_C_TraceActorToPlace::HitLocation' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, Temp_object_Variable) == 0x000058, "Member 'B_CreativePlayerController_C_TraceActorToPlace::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_IsPlacing_IsPlacing) == 0x000068, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_IsPlacing_IsPlacing' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, Temp_bool_Variable) == 0x000069, "Member 'B_CreativePlayerController_C_TraceActorToPlace::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, Temp_int_Loop_Counter_Variable) == 0x00006C, "Member 'B_CreativePlayerController_C_TraceActorToPlace::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_Add_IntInt_ReturnValue) == 0x000070, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, Temp_int_Array_Index_Variable) == 0x000074, "Member 'B_CreativePlayerController_C_TraceActorToPlace::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, Temp_object_Variable_1) == 0x000078, "Member 'B_CreativePlayerController_C_TraceActorToPlace::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, Temp_int_Loop_Counter_Variable_1) == 0x000088, "Member 'B_CreativePlayerController_C_TraceActorToPlace::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_Add_IntInt_ReturnValue_1) == 0x00008C, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, Temp_int_Array_Index_Variable_1) == 0x000090, "Member 'B_CreativePlayerController_C_TraceActorToPlace::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_GetMouseTraceStartAndEndPoints_StartPoint) == 0x000098, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_GetMouseTraceStartAndEndPoints_StartPoint' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_GetMouseTraceStartAndEndPoints_EndPoint) == 0x0000B0, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_GetMouseTraceStartAndEndPoints_EndPoint' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_GetMouseTraceStartAndEndPoints_StartPoint_1) == 0x0000C8, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_GetMouseTraceStartAndEndPoints_StartPoint_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_GetMouseTraceStartAndEndPoints_EndPoint_1) == 0x0000E0, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_GetMouseTraceStartAndEndPoints_EndPoint_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_K2_GetPawn_ReturnValue) == 0x0000F8, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_GetGameInstance_ReturnValue) == 0x000100, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_IsValid_ReturnValue) == 0x000108, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, K2Node_DynamicCast_AsB_Game_Instance) == 0x000110, "Member 'B_CreativePlayerController_C_TraceActorToPlace::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, K2Node_DynamicCast_bSuccess) == 0x000118, "Member 'B_CreativePlayerController_C_TraceActorToPlace::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_IsLocalPlayerController_ReturnValue) == 0x000119, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_IsLocalPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_BooleanAND_ReturnValue) == 0x00011A, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen) == 0x00011B, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_Not_PreBool_ReturnValue) == 0x00011C, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_1) == 0x00011D, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_2) == 0x00011E, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_Not_PreBool_ReturnValue_1) == 0x00011F, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_Not_PreBool_ReturnValue_2) == 0x000120, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_3) == 0x000121, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_IsWidgetAlreadyOpen_IsAlreadyOpen_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_Not_PreBool_ReturnValue_3) == 0x000122, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_Array_Get_Item) == 0x000128, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_BooleanAND_ReturnValue_1) == 0x000130, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_BooleanAND_ReturnValue_2) == 0x000131, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_Array_Length_ReturnValue) == 0x000134, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_BooleanAND_ReturnValue_3) == 0x000138, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_Less_IntInt_ReturnValue) == 0x000139, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_Array_Get_Item_1) == 0x000140, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_Not_PreBool_ReturnValue_4) == 0x000148, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_Array_Length_ReturnValue_1) == 0x00014C, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_Less_IntInt_ReturnValue_1) == 0x000150, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_GetMouseTraceStartAndEndPoints_StartPoint_2) == 0x000158, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_GetMouseTraceStartAndEndPoints_StartPoint_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_GetMouseTraceStartAndEndPoints_EndPoint_2) == 0x000170, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_GetMouseTraceStartAndEndPoints_EndPoint_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_GetMouseTraceStartAndEndPoints_StartPoint_3) == 0x000188, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_GetMouseTraceStartAndEndPoints_StartPoint_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_GetMouseTraceStartAndEndPoints_EndPoint_3) == 0x0001A0, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_GetMouseTraceStartAndEndPoints_EndPoint_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_GetAnchorActor_AnchorActor) == 0x0001B8, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_GetAnchorActor_AnchorActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_GetActorScale3D_ReturnValue) == 0x0001C0, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_GetActorScale3D_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, K2Node_DynamicCast_AsB_Static_Mesh_Prop) == 0x0001D8, "Member 'B_CreativePlayerController_C_TraceActorToPlace::K2Node_DynamicCast_AsB_Static_Mesh_Prop' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, K2Node_DynamicCast_bSuccess_1) == 0x0001E0, "Member 'B_CreativePlayerController_C_TraceActorToPlace::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_GetCenter_Center) == 0x0001E8, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_GetCenter_Center' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000200, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_GetAnchorActor_AnchorActor_1) == 0x000218, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_GetAnchorActor_AnchorActor_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, K2Node_DynamicCast_AsBP_Placeable_Actor) == 0x000220, "Member 'B_CreativePlayerController_C_TraceActorToPlace::K2Node_DynamicCast_AsBP_Placeable_Actor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, K2Node_DynamicCast_bSuccess_2) == 0x000228, "Member 'B_CreativePlayerController_C_TraceActorToPlace::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, K2Node_MakeArray_Array) == 0x000230, "Member 'B_CreativePlayerController_C_TraceActorToPlace::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_LineTraceSingleForObjects_OutHit) == 0x000240, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x000338, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_BreakVector_X) == 0x000340, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_BreakVector_Y) == 0x000348, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_BreakVector_Z) == 0x000350, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_BreakHitResult_bBlockingHit) == 0x000358, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_BreakHitResult_bInitialOverlap) == 0x000359, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_BreakHitResult_Time) == 0x00035C, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_BreakHitResult_Distance) == 0x000360, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_BreakHitResult_Location) == 0x000368, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_BreakHitResult_ImpactPoint) == 0x000380, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_BreakHitResult_Normal) == 0x000398, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_BreakHitResult_ImpactNormal) == 0x0003B0, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_BreakHitResult_PhysMat) == 0x0003C8, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_BreakHitResult_HitActor) == 0x0003D0, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_BreakHitResult_HitComponent) == 0x0003D8, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_BreakHitResult_HitBoneName) == 0x0003E0, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_BreakHitResult_BoneName) == 0x0003E8, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_BreakHitResult_HitItem) == 0x0003F0, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_BreakHitResult_ElementIndex) == 0x0003F4, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_BreakHitResult_FaceIndex) == 0x0003F8, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_BreakHitResult_TraceStart) == 0x000400, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_BreakHitResult_TraceEnd) == 0x000418, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, K2Node_Select_Default) == 0x000430, "Member 'B_CreativePlayerController_C_TraceActorToPlace::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_MakeTransform_ReturnValue) == 0x000450, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_K2_SetActorTransform_SweepHitResult) == 0x0004B0, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_K2_SetActorTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_K2_SetActorTransform_ReturnValue) == 0x0005A8, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_K2_SetActorTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_GetTransform_ReturnValue) == 0x0005B0, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_BreakTransform_Location) == 0x000610, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_BreakTransform_Rotation) == 0x000628, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_BreakTransform_Scale) == 0x000640, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000658, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, Temp_bool_Variable_1) == 0x000670, "Member 'B_CreativePlayerController_C_TraceActorToPlace::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_MakeTransform_ReturnValue_1) == 0x000680, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_K2_SetActorTransform_SweepHitResult_1) == 0x0006E0, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_K2_SetActorTransform_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_K2_SetActorTransform_ReturnValue_1) == 0x0007D8, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_K2_SetActorTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0007E0, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x0007E8, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, K2Node_MakeArray_Array_1) == 0x0007F0, "Member 'B_CreativePlayerController_C_TraceActorToPlace::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_MakeVector_ReturnValue) == 0x000800, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_LineTraceSingleForObjects_OutHit_1) == 0x000818, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_LineTraceSingleForObjects_OutHit_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_LineTraceSingleForObjects_ReturnValue_1) == 0x000910, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_LineTraceSingleForObjects_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_BreakHitResult_bBlockingHit_1) == 0x000911, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_BreakHitResult_bBlockingHit_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_BreakHitResult_bInitialOverlap_1) == 0x000912, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_BreakHitResult_bInitialOverlap_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_BreakHitResult_Time_1) == 0x000914, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_BreakHitResult_Time_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_BreakHitResult_Distance_1) == 0x000918, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_BreakHitResult_Distance_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_BreakHitResult_Location_1) == 0x000920, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_BreakHitResult_Location_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_BreakHitResult_ImpactPoint_1) == 0x000938, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_BreakHitResult_ImpactPoint_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_BreakHitResult_Normal_1) == 0x000950, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_BreakHitResult_Normal_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_BreakHitResult_ImpactNormal_1) == 0x000968, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_BreakHitResult_ImpactNormal_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_BreakHitResult_PhysMat_1) == 0x000980, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_BreakHitResult_PhysMat_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_BreakHitResult_HitActor_1) == 0x000988, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_BreakHitResult_HitActor_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_BreakHitResult_HitComponent_1) == 0x000990, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_BreakHitResult_HitComponent_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_BreakHitResult_HitBoneName_1) == 0x000998, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_BreakHitResult_HitBoneName_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_BreakHitResult_BoneName_1) == 0x0009A0, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_BreakHitResult_BoneName_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_BreakHitResult_HitItem_1) == 0x0009A8, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_BreakHitResult_HitItem_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_BreakHitResult_ElementIndex_1) == 0x0009AC, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_BreakHitResult_ElementIndex_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_BreakHitResult_FaceIndex_1) == 0x0009B0, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_BreakHitResult_FaceIndex_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_BreakHitResult_TraceStart_1) == 0x0009B8, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_BreakHitResult_TraceStart_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_BreakHitResult_TraceEnd_1) == 0x0009D0, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_BreakHitResult_TraceEnd_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_K2_GetPawn_ReturnValue_1) == 0x0009E8, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_K2_GetPawn_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, K2Node_Select_Default_1) == 0x0009F0, "Member 'B_CreativePlayerController_C_TraceActorToPlace::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_GetTransform_ReturnValue_1) == 0x000A10, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_GetTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_MakeTransform_ReturnValue_2) == 0x000A70, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_MakeTransform_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_BreakTransform_Location_1) == 0x000AD0, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_BreakTransform_Rotation_1) == 0x000AE8, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_BreakTransform_Scale_1) == 0x000B00, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_K2_SetActorTransform_SweepHitResult_2) == 0x000B18, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_K2_SetActorTransform_SweepHitResult_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_K2_SetActorTransform_ReturnValue_2) == 0x000C10, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_K2_SetActorTransform_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_Add_VectorVector_ReturnValue) == 0x000C18, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_MakeTransform_ReturnValue_3) == 0x000C30, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_MakeTransform_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_K2_SetActorTransform_SweepHitResult_3) == 0x000C90, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_K2_SetActorTransform_SweepHitResult_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TraceActorToPlace, CallFunc_K2_SetActorTransform_ReturnValue_3) == 0x000D88, "Member 'B_CreativePlayerController_C_TraceActorToPlace::CallFunc_K2_SetActorTransform_ReturnValue_3' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.TransformTrace
// 0x0528 (0x0528 - 0x0000)
struct B_CreativePlayerController_C_TransformTrace final
{
public:
	class APawn*                                  Pawn_0;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	E_Axis                                        ModifyingAxis;                                     // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 HitActor;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EndPoint;                                          // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StartPoint;                                        // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AB_BaseGizmo_C*                         Gizmo;                                             // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	E_Axis                                        ReturnAxis;                                        // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         ClassesToIgnore;                                   // 0x0060(0x0010)(Edit, BlueprintVisible)
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0070(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class UClass*>                         K2Node_MakeArray_Array;                            // 0x0080(0x0010)(ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlaceableStaticProp_C*              K2Node_DynamicCast_AsBP_Placeable_Static_Prop;     // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_StaticMeshProp_C*                    K2Node_DynamicCast_AsB_Static_Mesh_Prop;           // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array_1;                          // 0x00C0(0x0010)(ReferenceParm)
	struct FVector                                CallFunc_GetMouseTraceStartAndEndPoints_StartPoint; // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetMouseTraceStartAndEndPoints_EndPoint;  // 0x00E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0100(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_SetHighlightAxis_forcedBool;              // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetHighlightAxis_forcedBool_1;            // 0x0111(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetHighlightAxis_forcedBool_2;            // 0x0112(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetHighlightAxis_forcedBool_3;            // 0x0113(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0118(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0122(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetHighlightAxis_forcedBool_4;            // 0x0123(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array_2;                          // 0x0128(0x0010)(ConstParm, ReferenceParm)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x0138(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0231(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0232(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_233[0x1];                                      // 0x0233(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23C[0x4];                                      // 0x023C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0240(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0258(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0270(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0288(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x02A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x02A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x02B0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x02B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x02C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x02C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x02CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x02D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D4[0x4];                                      // 0x02D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x02D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x02F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array_3;                          // 0x0308(0x0010)(ConstParm, ReferenceParm)
	class FString                                 CallFunc_GetObjectName_ReturnValue;                // 0x0318(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TArray<struct FHitResult>                     CallFunc_LineTraceMultiForObjects_OutHits;         // 0x0328(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceMultiForObjects_ReturnValue;     // 0x0338(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_StartsWith_ReturnValue;                   // 0x0339(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33A[0x6];                                      // 0x033A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_Array_Get_Item;                           // 0x0340(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0438(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_1;            // 0x043C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_1;         // 0x043D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_43E[0x2];                                      // 0x043E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_1;                    // 0x0440(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_1;                // 0x0444(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_1;                // 0x0448(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_1;             // 0x0460(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_1;                  // 0x0478(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_1;            // 0x0490(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_1;                 // 0x04A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_1;                // 0x04B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_1;            // 0x04B8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_1;             // 0x04C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName_1;                // 0x04C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_1;                 // 0x04D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_1;            // 0x04D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_1;               // 0x04D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4DC[0x4];                                      // 0x04DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart_1;              // 0x04E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_1;                // 0x04F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0510(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_StartsWith_ReturnValue_1;                 // 0x0511(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_StartsWith_ReturnValue_2;                 // 0x0512(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_StartsWith_ReturnValue_3;                 // 0x0513(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_514[0x4];                                      // 0x0514(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_BaseGizmo_C*                         K2Node_DynamicCast_AsB_Base_Gizmo;                 // 0x0518(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0520(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_TransformTrace) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_TransformTrace");
static_assert(sizeof(B_CreativePlayerController_C_TransformTrace) == 0x000528, "Wrong size on B_CreativePlayerController_C_TransformTrace");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, Pawn_0) == 0x000000, "Member 'B_CreativePlayerController_C_TransformTrace::Pawn_0' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, Actor) == 0x000008, "Member 'B_CreativePlayerController_C_TransformTrace::Actor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, ModifyingAxis) == 0x000010, "Member 'B_CreativePlayerController_C_TransformTrace::ModifyingAxis' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, HitActor) == 0x000018, "Member 'B_CreativePlayerController_C_TransformTrace::HitActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, EndPoint) == 0x000020, "Member 'B_CreativePlayerController_C_TransformTrace::EndPoint' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, StartPoint) == 0x000038, "Member 'B_CreativePlayerController_C_TransformTrace::StartPoint' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, Gizmo) == 0x000050, "Member 'B_CreativePlayerController_C_TransformTrace::Gizmo' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, ReturnAxis) == 0x000058, "Member 'B_CreativePlayerController_C_TransformTrace::ReturnAxis' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, ClassesToIgnore) == 0x000060, "Member 'B_CreativePlayerController_C_TransformTrace::ClassesToIgnore' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, ActorsToIgnore) == 0x000070, "Member 'B_CreativePlayerController_C_TransformTrace::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, K2Node_MakeArray_Array) == 0x000080, "Member 'B_CreativePlayerController_C_TransformTrace::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, Temp_int_Array_Index_Variable) == 0x000090, "Member 'B_CreativePlayerController_C_TransformTrace::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, Temp_int_Loop_Counter_Variable) == 0x000094, "Member 'B_CreativePlayerController_C_TransformTrace::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_Add_IntInt_ReturnValue) == 0x000098, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_IsValid_ReturnValue) == 0x00009C, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, K2Node_DynamicCast_AsBP_Placeable_Static_Prop) == 0x0000A0, "Member 'B_CreativePlayerController_C_TransformTrace::K2Node_DynamicCast_AsBP_Placeable_Static_Prop' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, K2Node_DynamicCast_bSuccess) == 0x0000A8, "Member 'B_CreativePlayerController_C_TransformTrace::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, K2Node_DynamicCast_AsB_Static_Mesh_Prop) == 0x0000B0, "Member 'B_CreativePlayerController_C_TransformTrace::K2Node_DynamicCast_AsB_Static_Mesh_Prop' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, K2Node_DynamicCast_bSuccess_1) == 0x0000B8, "Member 'B_CreativePlayerController_C_TransformTrace::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, K2Node_MakeArray_Array_1) == 0x0000C0, "Member 'B_CreativePlayerController_C_TransformTrace::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_GetMouseTraceStartAndEndPoints_StartPoint) == 0x0000D0, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_GetMouseTraceStartAndEndPoints_StartPoint' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_GetMouseTraceStartAndEndPoints_EndPoint) == 0x0000E8, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_GetMouseTraceStartAndEndPoints_EndPoint' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, Temp_object_Variable) == 0x000100, "Member 'B_CreativePlayerController_C_TransformTrace::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_SetHighlightAxis_forcedBool) == 0x000110, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_SetHighlightAxis_forcedBool' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_SetHighlightAxis_forcedBool_1) == 0x000111, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_SetHighlightAxis_forcedBool_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_SetHighlightAxis_forcedBool_2) == 0x000112, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_SetHighlightAxis_forcedBool_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_SetHighlightAxis_forcedBool_3) == 0x000113, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_SetHighlightAxis_forcedBool_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_GetObjectClass_ReturnValue) == 0x000118, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_Array_Contains_ReturnValue) == 0x000120, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_Not_PreBool_ReturnValue) == 0x000121, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_IsValid_ReturnValue_1) == 0x000122, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_SetHighlightAxis_forcedBool_4) == 0x000123, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_SetHighlightAxis_forcedBool_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, K2Node_MakeArray_Array_2) == 0x000128, "Member 'B_CreativePlayerController_C_TransformTrace::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_LineTraceSingleForObjects_OutHit) == 0x000138, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x000230, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_BreakHitResult_bBlockingHit) == 0x000231, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_BreakHitResult_bInitialOverlap) == 0x000232, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_BreakHitResult_Time) == 0x000234, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_BreakHitResult_Distance) == 0x000238, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_BreakHitResult_Location) == 0x000240, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_BreakHitResult_ImpactPoint) == 0x000258, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_BreakHitResult_Normal) == 0x000270, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_BreakHitResult_ImpactNormal) == 0x000288, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_BreakHitResult_PhysMat) == 0x0002A0, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_BreakHitResult_HitActor) == 0x0002A8, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_BreakHitResult_HitComponent) == 0x0002B0, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_BreakHitResult_HitBoneName) == 0x0002B8, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_BreakHitResult_BoneName) == 0x0002C0, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_BreakHitResult_HitItem) == 0x0002C8, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_BreakHitResult_ElementIndex) == 0x0002CC, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_BreakHitResult_FaceIndex) == 0x0002D0, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_BreakHitResult_TraceStart) == 0x0002D8, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_BreakHitResult_TraceEnd) == 0x0002F0, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, K2Node_MakeArray_Array_3) == 0x000308, "Member 'B_CreativePlayerController_C_TransformTrace::K2Node_MakeArray_Array_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_GetObjectName_ReturnValue) == 0x000318, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_GetObjectName_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_LineTraceMultiForObjects_OutHits) == 0x000328, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_LineTraceMultiForObjects_OutHits' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_LineTraceMultiForObjects_ReturnValue) == 0x000338, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_LineTraceMultiForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_StartsWith_ReturnValue) == 0x000339, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_StartsWith_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_Array_Get_Item) == 0x000340, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_Array_Length_ReturnValue) == 0x000438, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_BreakHitResult_bBlockingHit_1) == 0x00043C, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_BreakHitResult_bBlockingHit_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_BreakHitResult_bInitialOverlap_1) == 0x00043D, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_BreakHitResult_bInitialOverlap_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_BreakHitResult_Time_1) == 0x000440, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_BreakHitResult_Time_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_BreakHitResult_Distance_1) == 0x000444, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_BreakHitResult_Distance_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_BreakHitResult_Location_1) == 0x000448, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_BreakHitResult_Location_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_BreakHitResult_ImpactPoint_1) == 0x000460, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_BreakHitResult_ImpactPoint_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_BreakHitResult_Normal_1) == 0x000478, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_BreakHitResult_Normal_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_BreakHitResult_ImpactNormal_1) == 0x000490, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_BreakHitResult_ImpactNormal_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_BreakHitResult_PhysMat_1) == 0x0004A8, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_BreakHitResult_PhysMat_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_BreakHitResult_HitActor_1) == 0x0004B0, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_BreakHitResult_HitActor_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_BreakHitResult_HitComponent_1) == 0x0004B8, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_BreakHitResult_HitComponent_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_BreakHitResult_HitBoneName_1) == 0x0004C0, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_BreakHitResult_HitBoneName_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_BreakHitResult_BoneName_1) == 0x0004C8, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_BreakHitResult_BoneName_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_BreakHitResult_HitItem_1) == 0x0004D0, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_BreakHitResult_HitItem_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_BreakHitResult_ElementIndex_1) == 0x0004D4, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_BreakHitResult_ElementIndex_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_BreakHitResult_FaceIndex_1) == 0x0004D8, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_BreakHitResult_FaceIndex_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_BreakHitResult_TraceStart_1) == 0x0004E0, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_BreakHitResult_TraceStart_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_BreakHitResult_TraceEnd_1) == 0x0004F8, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_BreakHitResult_TraceEnd_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_Less_IntInt_ReturnValue) == 0x000510, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_StartsWith_ReturnValue_1) == 0x000511, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_StartsWith_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_StartsWith_ReturnValue_2) == 0x000512, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_StartsWith_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, CallFunc_StartsWith_ReturnValue_3) == 0x000513, "Member 'B_CreativePlayerController_C_TransformTrace::CallFunc_StartsWith_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, K2Node_DynamicCast_AsB_Base_Gizmo) == 0x000518, "Member 'B_CreativePlayerController_C_TransformTrace::K2Node_DynamicCast_AsB_Base_Gizmo' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TransformTrace, K2Node_DynamicCast_bSuccess_2) == 0x000520, "Member 'B_CreativePlayerController_C_TransformTrace::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.TurnPropMeshIntoPlaceModeMesh
// 0x0018 (0x0018 - 0x0000)
struct B_CreativePlayerController_C_TurnPropMeshIntoPlaceModeMesh final
{
public:
	class UPrimitiveComponent*                    CurrentMesh;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumMaterials_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_TurnPropMeshIntoPlaceModeMesh) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_TurnPropMeshIntoPlaceModeMesh");
static_assert(sizeof(B_CreativePlayerController_C_TurnPropMeshIntoPlaceModeMesh) == 0x000018, "Wrong size on B_CreativePlayerController_C_TurnPropMeshIntoPlaceModeMesh");
static_assert(offsetof(B_CreativePlayerController_C_TurnPropMeshIntoPlaceModeMesh, CurrentMesh) == 0x000000, "Member 'B_CreativePlayerController_C_TurnPropMeshIntoPlaceModeMesh::CurrentMesh' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TurnPropMeshIntoPlaceModeMesh, Temp_int_Variable) == 0x000008, "Member 'B_CreativePlayerController_C_TurnPropMeshIntoPlaceModeMesh::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TurnPropMeshIntoPlaceModeMesh, CallFunc_GetNumMaterials_ReturnValue) == 0x00000C, "Member 'B_CreativePlayerController_C_TurnPropMeshIntoPlaceModeMesh::CallFunc_GetNumMaterials_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TurnPropMeshIntoPlaceModeMesh, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000010, "Member 'B_CreativePlayerController_C_TurnPropMeshIntoPlaceModeMesh::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_TurnPropMeshIntoPlaceModeMesh, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'B_CreativePlayerController_C_TurnPropMeshIntoPlaceModeMesh::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.UpdateActionBoolServer
// 0x0010 (0x0010 - 0x0000)
struct B_CreativePlayerController_C_UpdateActionBoolServer final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Activated;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_UpdateActionBoolServer) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_UpdateActionBoolServer");
static_assert(sizeof(B_CreativePlayerController_C_UpdateActionBoolServer) == 0x000010, "Wrong size on B_CreativePlayerController_C_UpdateActionBoolServer");
static_assert(offsetof(B_CreativePlayerController_C_UpdateActionBoolServer, Actor) == 0x000000, "Member 'B_CreativePlayerController_C_UpdateActionBoolServer::Actor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateActionBoolServer, Activated) == 0x000008, "Member 'B_CreativePlayerController_C_UpdateActionBoolServer::Activated' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.UpdateActorTransformServer
// 0x0070 (0x0070 - 0x0000)
struct B_CreativePlayerController_C_UpdateActorTransformServer final
{
public:
	const class AActor*                           SelectedActor;                                     // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_UpdateActorTransformServer) == 0x000010, "Wrong alignment on B_CreativePlayerController_C_UpdateActorTransformServer");
static_assert(sizeof(B_CreativePlayerController_C_UpdateActorTransformServer) == 0x000070, "Wrong size on B_CreativePlayerController_C_UpdateActorTransformServer");
static_assert(offsetof(B_CreativePlayerController_C_UpdateActorTransformServer, SelectedActor) == 0x000000, "Member 'B_CreativePlayerController_C_UpdateActorTransformServer::SelectedActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateActorTransformServer, Transform) == 0x000010, "Member 'B_CreativePlayerController_C_UpdateActorTransformServer::Transform' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.UpdateDraggedPropRotation
// 0x0010 (0x0010 - 0x0000)
struct B_CreativePlayerController_C_UpdateDraggedPropRotation final
{
public:
	class AActor*                                 CallFunc_GetAnchorActor_AnchorActor;               // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_UpdateDraggedPropRotation) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_UpdateDraggedPropRotation");
static_assert(sizeof(B_CreativePlayerController_C_UpdateDraggedPropRotation) == 0x000010, "Wrong size on B_CreativePlayerController_C_UpdateDraggedPropRotation");
static_assert(offsetof(B_CreativePlayerController_C_UpdateDraggedPropRotation, CallFunc_GetAnchorActor_AnchorActor) == 0x000000, "Member 'B_CreativePlayerController_C_UpdateDraggedPropRotation::CallFunc_GetAnchorActor_AnchorActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateDraggedPropRotation, CallFunc_K2_SetActorRotation_ReturnValue) == 0x000008, "Member 'B_CreativePlayerController_C_UpdateDraggedPropRotation::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.UpdateFreezeServer
// 0x0010 (0x0010 - 0x0000)
struct B_CreativePlayerController_C_UpdateFreezeServer final
{
public:
	class AB_StaticMeshProp_C*                    TargetProp_0;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Freeze;                                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_UpdateFreezeServer) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_UpdateFreezeServer");
static_assert(sizeof(B_CreativePlayerController_C_UpdateFreezeServer) == 0x000010, "Wrong size on B_CreativePlayerController_C_UpdateFreezeServer");
static_assert(offsetof(B_CreativePlayerController_C_UpdateFreezeServer, TargetProp_0) == 0x000000, "Member 'B_CreativePlayerController_C_UpdateFreezeServer::TargetProp_0' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateFreezeServer, Freeze) == 0x000008, "Member 'B_CreativePlayerController_C_UpdateFreezeServer::Freeze' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.UpdateGizmoActor
// 0x02A0 (0x02A0 - 0x0000)
struct B_CreativePlayerController_C_UpdateGizmoActor final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Temp_struct_Variable;                              // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlacing_IsPlacing;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAnchorActor_AnchorActor;               // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAnchorActor_AnchorActor_1;             // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_GetSelectedTransform_Transform;           // 0x0060(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x0108(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0201(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_202[0x6];                                      // 0x0202(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               K2Node_Select_Default;                             // 0x0208(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_221[0x7];                                      // 0x0221(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0228(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0240(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0258(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0280(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_UpdateGizmoActor) == 0x000010, "Wrong alignment on B_CreativePlayerController_C_UpdateGizmoActor");
static_assert(sizeof(B_CreativePlayerController_C_UpdateGizmoActor) == 0x0002A0, "Wrong size on B_CreativePlayerController_C_UpdateGizmoActor");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoActor, Temp_bool_Variable) == 0x000000, "Member 'B_CreativePlayerController_C_UpdateGizmoActor::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoActor, Temp_struct_Variable) == 0x000008, "Member 'B_CreativePlayerController_C_UpdateGizmoActor::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoActor, CallFunc_IsPlacing_IsPlacing) == 0x000020, "Member 'B_CreativePlayerController_C_UpdateGizmoActor::CallFunc_IsPlacing_IsPlacing' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoActor, CallFunc_GetAnchorActor_AnchorActor) == 0x000028, "Member 'B_CreativePlayerController_C_UpdateGizmoActor::CallFunc_GetAnchorActor_AnchorActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoActor, CallFunc_Not_PreBool_ReturnValue) == 0x000030, "Member 'B_CreativePlayerController_C_UpdateGizmoActor::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoActor, CallFunc_IsValid_ReturnValue) == 0x000031, "Member 'B_CreativePlayerController_C_UpdateGizmoActor::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoActor, CallFunc_BooleanAND_ReturnValue) == 0x000032, "Member 'B_CreativePlayerController_C_UpdateGizmoActor::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoActor, CallFunc_IsValid_ReturnValue_1) == 0x000033, "Member 'B_CreativePlayerController_C_UpdateGizmoActor::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoActor, CallFunc_GetAnchorActor_AnchorActor_1) == 0x000038, "Member 'B_CreativePlayerController_C_UpdateGizmoActor::CallFunc_GetAnchorActor_AnchorActor_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoActor, CallFunc_IsValid_ReturnValue_2) == 0x000040, "Member 'B_CreativePlayerController_C_UpdateGizmoActor::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoActor, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000041, "Member 'B_CreativePlayerController_C_UpdateGizmoActor::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoActor, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000048, "Member 'B_CreativePlayerController_C_UpdateGizmoActor::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoActor, CallFunc_GetSelectedTransform_Transform) == 0x000060, "Member 'B_CreativePlayerController_C_UpdateGizmoActor::CallFunc_GetSelectedTransform_Transform' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoActor, CallFunc_BreakTransform_Location) == 0x0000C0, "Member 'B_CreativePlayerController_C_UpdateGizmoActor::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoActor, CallFunc_BreakTransform_Rotation) == 0x0000D8, "Member 'B_CreativePlayerController_C_UpdateGizmoActor::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoActor, CallFunc_BreakTransform_Scale) == 0x0000F0, "Member 'B_CreativePlayerController_C_UpdateGizmoActor::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoActor, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x000108, "Member 'B_CreativePlayerController_C_UpdateGizmoActor::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoActor, CallFunc_K2_SetActorLocation_ReturnValue) == 0x000200, "Member 'B_CreativePlayerController_C_UpdateGizmoActor::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoActor, CallFunc_BooleanOR_ReturnValue) == 0x000201, "Member 'B_CreativePlayerController_C_UpdateGizmoActor::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoActor, K2Node_Select_Default) == 0x000208, "Member 'B_CreativePlayerController_C_UpdateGizmoActor::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoActor, CallFunc_K2_SetActorRotation_ReturnValue) == 0x000220, "Member 'B_CreativePlayerController_C_UpdateGizmoActor::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoActor, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000228, "Member 'B_CreativePlayerController_C_UpdateGizmoActor::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoActor, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000240, "Member 'B_CreativePlayerController_C_UpdateGizmoActor::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoActor, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000258, "Member 'B_CreativePlayerController_C_UpdateGizmoActor::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoActor, CallFunc_VSize_ReturnValue) == 0x000270, "Member 'B_CreativePlayerController_C_UpdateGizmoActor::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoActor, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000278, "Member 'B_CreativePlayerController_C_UpdateGizmoActor::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoActor, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000280, "Member 'B_CreativePlayerController_C_UpdateGizmoActor::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.UpdateGizmoVisibility
// 0x01A0 (0x01A0 - 0x0000)
struct B_CreativePlayerController_C_UpdateGizmoVisibility final
{
public:
	class UClass*                                 Temp_class_Variable;                               // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Temp_class_Variable_1;                             // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSelectedTransform_Transform;           // 0x0030(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_CreativeHUD_C*                      K2Node_DynamicCast_AsWB_Creative_HUD;              // 0x0090(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x00F0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasSelectedSomething_HasSelectedActor;    // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_151[0x7];                                      // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 Temp_class_Variable_2;                             // 0x0158(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Temp_class_Variable_3;                             // 0x0160(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	E_ModifyMode                                  Temp_byte_Variable;                                // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0169(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16A[0x6];                                      // 0x016A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_Select_Default;                             // 0x0170(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0178(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_FinishSpawningActor_ReturnValue;          // 0x0180(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_BaseGizmo_C*                         K2Node_DynamicCast_AsB_Base_Gizmo;                 // 0x0190(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0199(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_UpdateGizmoVisibility) == 0x000010, "Wrong alignment on B_CreativePlayerController_C_UpdateGizmoVisibility");
static_assert(sizeof(B_CreativePlayerController_C_UpdateGizmoVisibility) == 0x0001A0, "Wrong size on B_CreativePlayerController_C_UpdateGizmoVisibility");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoVisibility, Temp_class_Variable) == 0x000000, "Member 'B_CreativePlayerController_C_UpdateGizmoVisibility::Temp_class_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoVisibility, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'B_CreativePlayerController_C_UpdateGizmoVisibility::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoVisibility, CallFunc_GetGameInstance_ReturnValue) == 0x000010, "Member 'B_CreativePlayerController_C_UpdateGizmoVisibility::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoVisibility, Temp_class_Variable_1) == 0x000018, "Member 'B_CreativePlayerController_C_UpdateGizmoVisibility::Temp_class_Variable_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoVisibility, K2Node_DynamicCast_AsB_Game_Instance) == 0x000020, "Member 'B_CreativePlayerController_C_UpdateGizmoVisibility::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoVisibility, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'B_CreativePlayerController_C_UpdateGizmoVisibility::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoVisibility, CallFunc_GetSelectedTransform_Transform) == 0x000030, "Member 'B_CreativePlayerController_C_UpdateGizmoVisibility::CallFunc_GetSelectedTransform_Transform' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoVisibility, K2Node_DynamicCast_AsWB_Creative_HUD) == 0x000090, "Member 'B_CreativePlayerController_C_UpdateGizmoVisibility::K2Node_DynamicCast_AsWB_Creative_HUD' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoVisibility, K2Node_DynamicCast_bSuccess_1) == 0x000098, "Member 'B_CreativePlayerController_C_UpdateGizmoVisibility::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoVisibility, CallFunc_BreakTransform_Location) == 0x0000A0, "Member 'B_CreativePlayerController_C_UpdateGizmoVisibility::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoVisibility, CallFunc_BreakTransform_Rotation) == 0x0000B8, "Member 'B_CreativePlayerController_C_UpdateGizmoVisibility::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoVisibility, CallFunc_BreakTransform_Scale) == 0x0000D0, "Member 'B_CreativePlayerController_C_UpdateGizmoVisibility::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoVisibility, CallFunc_MakeTransform_ReturnValue) == 0x0000F0, "Member 'B_CreativePlayerController_C_UpdateGizmoVisibility::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoVisibility, CallFunc_HasSelectedSomething_HasSelectedActor) == 0x000150, "Member 'B_CreativePlayerController_C_UpdateGizmoVisibility::CallFunc_HasSelectedSomething_HasSelectedActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoVisibility, Temp_class_Variable_2) == 0x000158, "Member 'B_CreativePlayerController_C_UpdateGizmoVisibility::Temp_class_Variable_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoVisibility, Temp_class_Variable_3) == 0x000160, "Member 'B_CreativePlayerController_C_UpdateGizmoVisibility::Temp_class_Variable_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoVisibility, Temp_byte_Variable) == 0x000168, "Member 'B_CreativePlayerController_C_UpdateGizmoVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoVisibility, CallFunc_IsValid_ReturnValue_1) == 0x000169, "Member 'B_CreativePlayerController_C_UpdateGizmoVisibility::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoVisibility, K2Node_Select_Default) == 0x000170, "Member 'B_CreativePlayerController_C_UpdateGizmoVisibility::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoVisibility, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000178, "Member 'B_CreativePlayerController_C_UpdateGizmoVisibility::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoVisibility, CallFunc_FinishSpawningActor_ReturnValue) == 0x000180, "Member 'B_CreativePlayerController_C_UpdateGizmoVisibility::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoVisibility, CallFunc_Not_PreBool_ReturnValue) == 0x000188, "Member 'B_CreativePlayerController_C_UpdateGizmoVisibility::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoVisibility, K2Node_DynamicCast_AsB_Base_Gizmo) == 0x000190, "Member 'B_CreativePlayerController_C_UpdateGizmoVisibility::K2Node_DynamicCast_AsB_Base_Gizmo' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoVisibility, K2Node_DynamicCast_bSuccess_2) == 0x000198, "Member 'B_CreativePlayerController_C_UpdateGizmoVisibility::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateGizmoVisibility, CallFunc_BooleanAND_ReturnValue) == 0x000199, "Member 'B_CreativePlayerController_C_UpdateGizmoVisibility::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.UpdateMaterialServer
// 0x0020 (0x0020 - 0x0000)
struct B_CreativePlayerController_C_UpdateMaterialServer final
{
public:
	class ABP_PlaceableStaticProp_C*              TargetStructure;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_BasePlaceableMaterialOverwrite_C*    MaterialOverwrite;                                 // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     NewMaterial;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Index_0;                                           // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_UpdateMaterialServer) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_UpdateMaterialServer");
static_assert(sizeof(B_CreativePlayerController_C_UpdateMaterialServer) == 0x000020, "Wrong size on B_CreativePlayerController_C_UpdateMaterialServer");
static_assert(offsetof(B_CreativePlayerController_C_UpdateMaterialServer, TargetStructure) == 0x000000, "Member 'B_CreativePlayerController_C_UpdateMaterialServer::TargetStructure' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateMaterialServer, MaterialOverwrite) == 0x000008, "Member 'B_CreativePlayerController_C_UpdateMaterialServer::MaterialOverwrite' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateMaterialServer, NewMaterial) == 0x000010, "Member 'B_CreativePlayerController_C_UpdateMaterialServer::NewMaterial' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateMaterialServer, Index_0) == 0x000018, "Member 'B_CreativePlayerController_C_UpdateMaterialServer::Index_0' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.UpdatePlayerModeByPlayTestState
// 0x0006 (0x0006 - 0x0000)
struct B_CreativePlayerController_C_UpdatePlayerModeByPlayTestState final
{
public:
	bool                                          HasPlayTestStarted;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CreativePlayerMode                          NewMode;                                           // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CreativePlayerMode                          Temp_byte_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CreativePlayerMode                          K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_UpdatePlayerModeByPlayTestState) == 0x000001, "Wrong alignment on B_CreativePlayerController_C_UpdatePlayerModeByPlayTestState");
static_assert(sizeof(B_CreativePlayerController_C_UpdatePlayerModeByPlayTestState) == 0x000006, "Wrong size on B_CreativePlayerController_C_UpdatePlayerModeByPlayTestState");
static_assert(offsetof(B_CreativePlayerController_C_UpdatePlayerModeByPlayTestState, HasPlayTestStarted) == 0x000000, "Member 'B_CreativePlayerController_C_UpdatePlayerModeByPlayTestState::HasPlayTestStarted' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdatePlayerModeByPlayTestState, NewMode) == 0x000001, "Member 'B_CreativePlayerController_C_UpdatePlayerModeByPlayTestState::NewMode' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdatePlayerModeByPlayTestState, Temp_bool_Variable) == 0x000002, "Member 'B_CreativePlayerController_C_UpdatePlayerModeByPlayTestState::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdatePlayerModeByPlayTestState, Temp_byte_Variable) == 0x000003, "Member 'B_CreativePlayerController_C_UpdatePlayerModeByPlayTestState::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdatePlayerModeByPlayTestState, K2Node_Select_Default) == 0x000004, "Member 'B_CreativePlayerController_C_UpdatePlayerModeByPlayTestState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdatePlayerModeByPlayTestState, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000005, "Member 'B_CreativePlayerController_C_UpdatePlayerModeByPlayTestState::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.UpdatePrefabSizeToPlace
// 0x00C0 (0x00C0 - 0x0000)
struct B_CreativePlayerController_C_UpdatePrefabSizeToPlace final
{
public:
	double                                        Axis;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ActorToPlace;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	double                                        AddScaleValue;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_DoubleDouble_ReturnValue;        // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorScale3D_ReturnValue;              // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlaceableActor_C*                   K2Node_DynamicCast_AsBP_Placeable_Actor;           // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_StaticMeshProp_C*                    K2Node_DynamicCast_AsB_Static_Mesh_Prop;           // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorFloat_ReturnValue;              // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_DetermineClampActorScale_ClampedScale;    // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_UpdatePrefabSizeToPlace) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_UpdatePrefabSizeToPlace");
static_assert(sizeof(B_CreativePlayerController_C_UpdatePrefabSizeToPlace) == 0x0000C0, "Wrong size on B_CreativePlayerController_C_UpdatePrefabSizeToPlace");
static_assert(offsetof(B_CreativePlayerController_C_UpdatePrefabSizeToPlace, Axis) == 0x000000, "Member 'B_CreativePlayerController_C_UpdatePrefabSizeToPlace::Axis' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdatePrefabSizeToPlace, ActorToPlace) == 0x000008, "Member 'B_CreativePlayerController_C_UpdatePrefabSizeToPlace::ActorToPlace' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdatePrefabSizeToPlace, AddScaleValue) == 0x000010, "Member 'B_CreativePlayerController_C_UpdatePrefabSizeToPlace::AddScaleValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdatePrefabSizeToPlace, CallFunc_NotEqual_DoubleDouble_ReturnValue) == 0x000018, "Member 'B_CreativePlayerController_C_UpdatePrefabSizeToPlace::CallFunc_NotEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdatePrefabSizeToPlace, CallFunc_Array_Get_Item) == 0x000020, "Member 'B_CreativePlayerController_C_UpdatePrefabSizeToPlace::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdatePrefabSizeToPlace, CallFunc_GetActorScale3D_ReturnValue) == 0x000028, "Member 'B_CreativePlayerController_C_UpdatePrefabSizeToPlace::CallFunc_GetActorScale3D_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdatePrefabSizeToPlace, K2Node_DynamicCast_AsBP_Placeable_Actor) == 0x000040, "Member 'B_CreativePlayerController_C_UpdatePrefabSizeToPlace::K2Node_DynamicCast_AsBP_Placeable_Actor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdatePrefabSizeToPlace, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'B_CreativePlayerController_C_UpdatePrefabSizeToPlace::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdatePrefabSizeToPlace, K2Node_DynamicCast_AsB_Static_Mesh_Prop) == 0x000050, "Member 'B_CreativePlayerController_C_UpdatePrefabSizeToPlace::K2Node_DynamicCast_AsB_Static_Mesh_Prop' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdatePrefabSizeToPlace, K2Node_DynamicCast_bSuccess_1) == 0x000058, "Member 'B_CreativePlayerController_C_UpdatePrefabSizeToPlace::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdatePrefabSizeToPlace, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000060, "Member 'B_CreativePlayerController_C_UpdatePrefabSizeToPlace::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdatePrefabSizeToPlace, CallFunc_Add_VectorFloat_ReturnValue) == 0x000068, "Member 'B_CreativePlayerController_C_UpdatePrefabSizeToPlace::CallFunc_Add_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdatePrefabSizeToPlace, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000080, "Member 'B_CreativePlayerController_C_UpdatePrefabSizeToPlace::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdatePrefabSizeToPlace, CallFunc_BreakVector_X) == 0x000088, "Member 'B_CreativePlayerController_C_UpdatePrefabSizeToPlace::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdatePrefabSizeToPlace, CallFunc_BreakVector_Y) == 0x000090, "Member 'B_CreativePlayerController_C_UpdatePrefabSizeToPlace::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdatePrefabSizeToPlace, CallFunc_BreakVector_Z) == 0x000098, "Member 'B_CreativePlayerController_C_UpdatePrefabSizeToPlace::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdatePrefabSizeToPlace, CallFunc_DetermineClampActorScale_ClampedScale) == 0x0000A0, "Member 'B_CreativePlayerController_C_UpdatePrefabSizeToPlace::CallFunc_DetermineClampActorScale_ClampedScale' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdatePrefabSizeToPlace, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x0000A8, "Member 'B_CreativePlayerController_C_UpdatePrefabSizeToPlace::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.UpdateSelectedActorsTransforms
// 0x0210 (0x0210 - 0x0000)
struct B_CreativePlayerController_C_UpdateSelectedActorsTransforms final
{
public:
	class AActor*                                 CurrentActor;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0xC];                                       // 0x0024(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0030(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_Map_Find_Value;                           // 0x0090(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F1[0xF];                                       // 0x00F1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue_1;               // 0x0100(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_TransformTransform_ReturnValue; // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0161(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_162[0xE];                                      // 0x0162(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue_2;               // 0x0170(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_Map_Keys_Keys;                            // 0x01D0(0x0010)(ReferenceParm)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x01E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x01EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x01ED(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Remove_ReturnValue;                   // 0x01EE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1EF[0x1];                                      // 0x01EF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F4[0x4];                                      // 0x01F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item_1;                         // 0x01F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_UpdateSelectedActorsTransforms) == 0x000010, "Wrong alignment on B_CreativePlayerController_C_UpdateSelectedActorsTransforms");
static_assert(sizeof(B_CreativePlayerController_C_UpdateSelectedActorsTransforms) == 0x000210, "Wrong size on B_CreativePlayerController_C_UpdateSelectedActorsTransforms");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSelectedActorsTransforms, CurrentActor) == 0x000000, "Member 'B_CreativePlayerController_C_UpdateSelectedActorsTransforms::CurrentActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSelectedActorsTransforms, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'B_CreativePlayerController_C_UpdateSelectedActorsTransforms::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSelectedActorsTransforms, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'B_CreativePlayerController_C_UpdateSelectedActorsTransforms::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSelectedActorsTransforms, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'B_CreativePlayerController_C_UpdateSelectedActorsTransforms::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSelectedActorsTransforms, Temp_int_Array_Index_Variable) == 0x000014, "Member 'B_CreativePlayerController_C_UpdateSelectedActorsTransforms::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSelectedActorsTransforms, Temp_int_Loop_Counter_Variable_1) == 0x000018, "Member 'B_CreativePlayerController_C_UpdateSelectedActorsTransforms::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSelectedActorsTransforms, CallFunc_Add_IntInt_ReturnValue_1) == 0x00001C, "Member 'B_CreativePlayerController_C_UpdateSelectedActorsTransforms::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSelectedActorsTransforms, Temp_int_Array_Index_Variable_1) == 0x000020, "Member 'B_CreativePlayerController_C_UpdateSelectedActorsTransforms::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSelectedActorsTransforms, CallFunc_GetTransform_ReturnValue) == 0x000030, "Member 'B_CreativePlayerController_C_UpdateSelectedActorsTransforms::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSelectedActorsTransforms, CallFunc_Map_Find_Value) == 0x000090, "Member 'B_CreativePlayerController_C_UpdateSelectedActorsTransforms::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSelectedActorsTransforms, CallFunc_Map_Find_ReturnValue) == 0x0000F0, "Member 'B_CreativePlayerController_C_UpdateSelectedActorsTransforms::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSelectedActorsTransforms, CallFunc_GetTransform_ReturnValue_1) == 0x000100, "Member 'B_CreativePlayerController_C_UpdateSelectedActorsTransforms::CallFunc_GetTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSelectedActorsTransforms, CallFunc_NearlyEqual_TransformTransform_ReturnValue) == 0x000160, "Member 'B_CreativePlayerController_C_UpdateSelectedActorsTransforms::CallFunc_NearlyEqual_TransformTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSelectedActorsTransforms, CallFunc_Not_PreBool_ReturnValue) == 0x000161, "Member 'B_CreativePlayerController_C_UpdateSelectedActorsTransforms::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSelectedActorsTransforms, CallFunc_GetTransform_ReturnValue_2) == 0x000170, "Member 'B_CreativePlayerController_C_UpdateSelectedActorsTransforms::CallFunc_GetTransform_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSelectedActorsTransforms, CallFunc_Map_Keys_Keys) == 0x0001D0, "Member 'B_CreativePlayerController_C_UpdateSelectedActorsTransforms::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSelectedActorsTransforms, CallFunc_Array_Get_Item) == 0x0001E0, "Member 'B_CreativePlayerController_C_UpdateSelectedActorsTransforms::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSelectedActorsTransforms, CallFunc_Array_Length_ReturnValue) == 0x0001E8, "Member 'B_CreativePlayerController_C_UpdateSelectedActorsTransforms::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSelectedActorsTransforms, CallFunc_IsValid_ReturnValue_1) == 0x0001EC, "Member 'B_CreativePlayerController_C_UpdateSelectedActorsTransforms::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSelectedActorsTransforms, CallFunc_Less_IntInt_ReturnValue) == 0x0001ED, "Member 'B_CreativePlayerController_C_UpdateSelectedActorsTransforms::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSelectedActorsTransforms, CallFunc_Map_Remove_ReturnValue) == 0x0001EE, "Member 'B_CreativePlayerController_C_UpdateSelectedActorsTransforms::CallFunc_Map_Remove_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSelectedActorsTransforms, CallFunc_Array_Length_ReturnValue_1) == 0x0001F0, "Member 'B_CreativePlayerController_C_UpdateSelectedActorsTransforms::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSelectedActorsTransforms, CallFunc_Array_Get_Item_1) == 0x0001F8, "Member 'B_CreativePlayerController_C_UpdateSelectedActorsTransforms::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSelectedActorsTransforms, CallFunc_Less_IntInt_ReturnValue_1) == 0x000200, "Member 'B_CreativePlayerController_C_UpdateSelectedActorsTransforms::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.UpdateSkills
// 0x00F0 (0x00F0 - 0x0000)
struct B_CreativePlayerController_C_UpdateSkills final
{
public:
	class AB_CreativePropPawnPhysics_C*           PropPawnPhysicsPawn;                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AB_CreativeWitch_C*                     WitchPawn;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 HunterMovementSkill;                               // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 HunterUtilitySkill;                                // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 WitchMovementSkill;                                // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 WitchUtilitySkill;                                 // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UActorComponent*                        CallFunc_AddActorComponent_ReturnValue;            // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UActorComponent*                        CallFunc_AddActorComponent_ReturnValue_1;          // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UB_BaseWitchSkill_C*                    K2Node_DynamicCast_AsB_Base_Witch_Skill;           // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_BaseWitchSkill_C*                    K2Node_DynamicCast_AsB_Base_Witch_Skill_1;         // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UActorComponent*                        CallFunc_AddActorComponent_ReturnValue_2;          // 0x0060(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UB_BaseWitchSkill_C*                    K2Node_DynamicCast_AsB_Base_Witch_Skill_2;         // 0x0068(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UActorComponent*                        CallFunc_AddActorComponent_ReturnValue_3;          // 0x0078(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UB_BaseWitchSkill_C*                    K2Node_DynamicCast_AsB_Base_Witch_Skill_3;         // 0x0080(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_CreativePropPawnPhysics_C*           K2Node_DynamicCast_AsB_Creative_Prop_Pawn_Physics; // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetHunterMovementSkill_ReturnValue;       // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetHunterUtilitySkill_ReturnValue;        // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetWitchMovementSkill_ReturnValue;        // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetWitchUtilitySkill_ReturnValue;         // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_CreativeWitch_C*                     K2Node_DynamicCast_AsB_Creative_Witch;             // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_CreativeHunter_C*                    K2Node_DynamicCast_AsB_Creative_Hunter;            // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_7;                     // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_UpdateSkills) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_UpdateSkills");
static_assert(sizeof(B_CreativePlayerController_C_UpdateSkills) == 0x0000F0, "Wrong size on B_CreativePlayerController_C_UpdateSkills");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSkills, PropPawnPhysicsPawn) == 0x000000, "Member 'B_CreativePlayerController_C_UpdateSkills::PropPawnPhysicsPawn' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSkills, WitchPawn) == 0x000008, "Member 'B_CreativePlayerController_C_UpdateSkills::WitchPawn' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSkills, HunterMovementSkill) == 0x000010, "Member 'B_CreativePlayerController_C_UpdateSkills::HunterMovementSkill' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSkills, HunterUtilitySkill) == 0x000018, "Member 'B_CreativePlayerController_C_UpdateSkills::HunterUtilitySkill' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSkills, WitchMovementSkill) == 0x000020, "Member 'B_CreativePlayerController_C_UpdateSkills::WitchMovementSkill' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSkills, WitchUtilitySkill) == 0x000028, "Member 'B_CreativePlayerController_C_UpdateSkills::WitchUtilitySkill' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSkills, CallFunc_AddActorComponent_ReturnValue) == 0x000030, "Member 'B_CreativePlayerController_C_UpdateSkills::CallFunc_AddActorComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSkills, CallFunc_AddActorComponent_ReturnValue_1) == 0x000038, "Member 'B_CreativePlayerController_C_UpdateSkills::CallFunc_AddActorComponent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSkills, K2Node_DynamicCast_AsB_Base_Witch_Skill) == 0x000040, "Member 'B_CreativePlayerController_C_UpdateSkills::K2Node_DynamicCast_AsB_Base_Witch_Skill' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSkills, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'B_CreativePlayerController_C_UpdateSkills::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSkills, K2Node_DynamicCast_AsB_Base_Witch_Skill_1) == 0x000050, "Member 'B_CreativePlayerController_C_UpdateSkills::K2Node_DynamicCast_AsB_Base_Witch_Skill_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSkills, K2Node_DynamicCast_bSuccess_1) == 0x000058, "Member 'B_CreativePlayerController_C_UpdateSkills::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSkills, CallFunc_AddActorComponent_ReturnValue_2) == 0x000060, "Member 'B_CreativePlayerController_C_UpdateSkills::CallFunc_AddActorComponent_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSkills, K2Node_DynamicCast_AsB_Base_Witch_Skill_2) == 0x000068, "Member 'B_CreativePlayerController_C_UpdateSkills::K2Node_DynamicCast_AsB_Base_Witch_Skill_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSkills, K2Node_DynamicCast_bSuccess_2) == 0x000070, "Member 'B_CreativePlayerController_C_UpdateSkills::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSkills, CallFunc_AddActorComponent_ReturnValue_3) == 0x000078, "Member 'B_CreativePlayerController_C_UpdateSkills::CallFunc_AddActorComponent_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSkills, K2Node_DynamicCast_AsB_Base_Witch_Skill_3) == 0x000080, "Member 'B_CreativePlayerController_C_UpdateSkills::K2Node_DynamicCast_AsB_Base_Witch_Skill_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSkills, K2Node_DynamicCast_bSuccess_3) == 0x000088, "Member 'B_CreativePlayerController_C_UpdateSkills::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSkills, K2Node_DynamicCast_AsB_Creative_Prop_Pawn_Physics) == 0x000090, "Member 'B_CreativePlayerController_C_UpdateSkills::K2Node_DynamicCast_AsB_Creative_Prop_Pawn_Physics' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSkills, K2Node_DynamicCast_bSuccess_4) == 0x000098, "Member 'B_CreativePlayerController_C_UpdateSkills::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSkills, K2Node_DynamicCast_AsB_Player_State) == 0x0000A0, "Member 'B_CreativePlayerController_C_UpdateSkills::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSkills, K2Node_DynamicCast_bSuccess_5) == 0x0000A8, "Member 'B_CreativePlayerController_C_UpdateSkills::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSkills, CallFunc_GetHunterMovementSkill_ReturnValue) == 0x0000B0, "Member 'B_CreativePlayerController_C_UpdateSkills::CallFunc_GetHunterMovementSkill_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSkills, CallFunc_GetHunterUtilitySkill_ReturnValue) == 0x0000B8, "Member 'B_CreativePlayerController_C_UpdateSkills::CallFunc_GetHunterUtilitySkill_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSkills, CallFunc_GetWitchMovementSkill_ReturnValue) == 0x0000C0, "Member 'B_CreativePlayerController_C_UpdateSkills::CallFunc_GetWitchMovementSkill_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSkills, CallFunc_GetWitchUtilitySkill_ReturnValue) == 0x0000C8, "Member 'B_CreativePlayerController_C_UpdateSkills::CallFunc_GetWitchUtilitySkill_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSkills, K2Node_DynamicCast_AsB_Creative_Witch) == 0x0000D0, "Member 'B_CreativePlayerController_C_UpdateSkills::K2Node_DynamicCast_AsB_Creative_Witch' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSkills, K2Node_DynamicCast_bSuccess_6) == 0x0000D8, "Member 'B_CreativePlayerController_C_UpdateSkills::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSkills, K2Node_DynamicCast_AsB_Creative_Hunter) == 0x0000E0, "Member 'B_CreativePlayerController_C_UpdateSkills::K2Node_DynamicCast_AsB_Creative_Hunter' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateSkills, K2Node_DynamicCast_bSuccess_7) == 0x0000E8, "Member 'B_CreativePlayerController_C_UpdateSkills::K2Node_DynamicCast_bSuccess_7' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.UpdateStartAwakeServer
// 0x0010 (0x0010 - 0x0000)
struct B_CreativePlayerController_C_UpdateStartAwakeServer final
{
public:
	class AB_StaticMeshProp_C*                    TargetProp_0;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          StartAwake;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_UpdateStartAwakeServer) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_UpdateStartAwakeServer");
static_assert(sizeof(B_CreativePlayerController_C_UpdateStartAwakeServer) == 0x000010, "Wrong size on B_CreativePlayerController_C_UpdateStartAwakeServer");
static_assert(offsetof(B_CreativePlayerController_C_UpdateStartAwakeServer, TargetProp_0) == 0x000000, "Member 'B_CreativePlayerController_C_UpdateStartAwakeServer::TargetProp_0' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateStartAwakeServer, StartAwake) == 0x000008, "Member 'B_CreativePlayerController_C_UpdateStartAwakeServer::StartAwake' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.UpdateVisibleSwitchConnections
// 0x0010 (0x0010 - 0x0000)
struct B_CreativePlayerController_C_UpdateVisibleSwitchConnections final
{
public:
	class AActor*                                 CallFunc_GetAnchorActor_AnchorActor;               // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_UpdateVisibleSwitchConnections) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_UpdateVisibleSwitchConnections");
static_assert(sizeof(B_CreativePlayerController_C_UpdateVisibleSwitchConnections) == 0x000010, "Wrong size on B_CreativePlayerController_C_UpdateVisibleSwitchConnections");
static_assert(offsetof(B_CreativePlayerController_C_UpdateVisibleSwitchConnections, CallFunc_GetAnchorActor_AnchorActor) == 0x000000, "Member 'B_CreativePlayerController_C_UpdateVisibleSwitchConnections::CallFunc_GetAnchorActor_AnchorActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateVisibleSwitchConnections, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000008, "Member 'B_CreativePlayerController_C_UpdateVisibleSwitchConnections::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UpdateVisibleSwitchConnections, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'B_CreativePlayerController_C_UpdateVisibleSwitchConnections::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.useEnterKeyInputForEditUi
// 0x0018 (0x0018 - 0x0000)
struct B_CreativePlayerController_C_UseEnterKeyInputForEditUi final
{
public:
	class UEditableTextBox*                       FocusedTransformField;                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UEditableTextBox*                       CallFunc_TryGetFocusedTransformInputField_FocusedField; // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_UseEnterKeyInputForEditUi) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_UseEnterKeyInputForEditUi");
static_assert(sizeof(B_CreativePlayerController_C_UseEnterKeyInputForEditUi) == 0x000018, "Wrong size on B_CreativePlayerController_C_UseEnterKeyInputForEditUi");
static_assert(offsetof(B_CreativePlayerController_C_UseEnterKeyInputForEditUi, FocusedTransformField) == 0x000000, "Member 'B_CreativePlayerController_C_UseEnterKeyInputForEditUi::FocusedTransformField' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UseEnterKeyInputForEditUi, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'B_CreativePlayerController_C_UseEnterKeyInputForEditUi::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UseEnterKeyInputForEditUi, K2Node_SwitchEnum_CmpSuccess) == 0x000009, "Member 'B_CreativePlayerController_C_UseEnterKeyInputForEditUi::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_UseEnterKeyInputForEditUi, CallFunc_TryGetFocusedTransformInputField_FocusedField) == 0x000010, "Member 'B_CreativePlayerController_C_UseEnterKeyInputForEditUi::CallFunc_TryGetFocusedTransformInputField_FocusedField' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.VisualizeSingleSwitchConnection
// 0x00A0 (0x00A0 - 0x0000)
struct B_CreativePlayerController_C_VisualizeSingleSwitchConnection final
{
public:
	class AActor*                                 StartActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 EndActor;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0010(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SwitchConnectionAlreadyDrawn_AlreadyDrawn; // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_SwitchConnection_C*                  CallFunc_FinishSpawningActor_ReturnValue;          // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_VisualizeSingleSwitchConnection) == 0x000010, "Wrong alignment on B_CreativePlayerController_C_VisualizeSingleSwitchConnection");
static_assert(sizeof(B_CreativePlayerController_C_VisualizeSingleSwitchConnection) == 0x0000A0, "Wrong size on B_CreativePlayerController_C_VisualizeSingleSwitchConnection");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSingleSwitchConnection, StartActor) == 0x000000, "Member 'B_CreativePlayerController_C_VisualizeSingleSwitchConnection::StartActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSingleSwitchConnection, EndActor) == 0x000008, "Member 'B_CreativePlayerController_C_VisualizeSingleSwitchConnection::EndActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSingleSwitchConnection, CallFunc_MakeTransform_ReturnValue) == 0x000010, "Member 'B_CreativePlayerController_C_VisualizeSingleSwitchConnection::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSingleSwitchConnection, CallFunc_SwitchConnectionAlreadyDrawn_AlreadyDrawn) == 0x000070, "Member 'B_CreativePlayerController_C_VisualizeSingleSwitchConnection::CallFunc_SwitchConnectionAlreadyDrawn_AlreadyDrawn' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSingleSwitchConnection, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000078, "Member 'B_CreativePlayerController_C_VisualizeSingleSwitchConnection::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSingleSwitchConnection, CallFunc_Not_PreBool_ReturnValue) == 0x000080, "Member 'B_CreativePlayerController_C_VisualizeSingleSwitchConnection::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSingleSwitchConnection, CallFunc_FinishSpawningActor_ReturnValue) == 0x000088, "Member 'B_CreativePlayerController_C_VisualizeSingleSwitchConnection::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSingleSwitchConnection, CallFunc_Array_Add_ReturnValue) == 0x000090, "Member 'B_CreativePlayerController_C_VisualizeSingleSwitchConnection::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.VisualizeSwitchConnections
// 0x0110 (0x0110 - 0x0000)
struct B_CreativePlayerController_C_VisualizeSwitchConnections final
{
public:
	class AActor*                                 InspectedActor;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_Switch_C*>                   NewLocalVar;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	class ABP_Switch_C*                           AnchorSwitch;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          AlreadyDrawn;                                      // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CurrentTarget;                                     // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetFirstLocalPlayerController_PlayerController; // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Switch_C*                           CallFunc_Array_Get_Item;                           // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item_1;                         // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_Switch_C*>                   CallFunc_GetAllActorsOfClass_OutActors;            // 0x0098(0x0010)(ReferenceParm)
	TArray<class ABP_Switch_C*>                   CallFunc_GetAllActorsOfClass_OutActors_1;          // 0x00A8(0x0010)(ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Switch_C*                           CallFunc_Array_Get_Item_2;                         // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item_3;                         // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Switch_C*                           K2Node_DynamicCast_AsBP_Switch;                    // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EA[0x2];                                       // 0x00EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F2[0x2];                                       // 0x00F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Switch_C*                           K2Node_DynamicCast_AsBP_Switch_1;                  // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_VisualizeSwitchConnections) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_VisualizeSwitchConnections");
static_assert(sizeof(B_CreativePlayerController_C_VisualizeSwitchConnections) == 0x000110, "Wrong size on B_CreativePlayerController_C_VisualizeSwitchConnections");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSwitchConnections, InspectedActor) == 0x000000, "Member 'B_CreativePlayerController_C_VisualizeSwitchConnections::InspectedActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSwitchConnections, NewLocalVar) == 0x000008, "Member 'B_CreativePlayerController_C_VisualizeSwitchConnections::NewLocalVar' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSwitchConnections, AnchorSwitch) == 0x000018, "Member 'B_CreativePlayerController_C_VisualizeSwitchConnections::AnchorSwitch' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSwitchConnections, AlreadyDrawn) == 0x000020, "Member 'B_CreativePlayerController_C_VisualizeSwitchConnections::AlreadyDrawn' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSwitchConnections, CurrentTarget) == 0x000028, "Member 'B_CreativePlayerController_C_VisualizeSwitchConnections::CurrentTarget' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSwitchConnections, CallFunc_GetGameInstance_ReturnValue) == 0x000030, "Member 'B_CreativePlayerController_C_VisualizeSwitchConnections::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSwitchConnections, K2Node_DynamicCast_AsB_Game_Instance) == 0x000038, "Member 'B_CreativePlayerController_C_VisualizeSwitchConnections::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSwitchConnections, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'B_CreativePlayerController_C_VisualizeSwitchConnections::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSwitchConnections, CallFunc_Array_Length_ReturnValue) == 0x000044, "Member 'B_CreativePlayerController_C_VisualizeSwitchConnections::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSwitchConnections, CallFunc_GetFirstLocalPlayerController_PlayerController) == 0x000048, "Member 'B_CreativePlayerController_C_VisualizeSwitchConnections::CallFunc_GetFirstLocalPlayerController_PlayerController' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSwitchConnections, Temp_int_Loop_Counter_Variable) == 0x000050, "Member 'B_CreativePlayerController_C_VisualizeSwitchConnections::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSwitchConnections, CallFunc_Add_IntInt_ReturnValue) == 0x000054, "Member 'B_CreativePlayerController_C_VisualizeSwitchConnections::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSwitchConnections, CallFunc_Array_Length_ReturnValue_1) == 0x000058, "Member 'B_CreativePlayerController_C_VisualizeSwitchConnections::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSwitchConnections, CallFunc_Less_IntInt_ReturnValue) == 0x00005C, "Member 'B_CreativePlayerController_C_VisualizeSwitchConnections::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSwitchConnections, Temp_int_Loop_Counter_Variable_1) == 0x000060, "Member 'B_CreativePlayerController_C_VisualizeSwitchConnections::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSwitchConnections, CallFunc_Less_IntInt_ReturnValue_1) == 0x000064, "Member 'B_CreativePlayerController_C_VisualizeSwitchConnections::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSwitchConnections, CallFunc_Add_IntInt_ReturnValue_1) == 0x000068, "Member 'B_CreativePlayerController_C_VisualizeSwitchConnections::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSwitchConnections, Temp_int_Array_Index_Variable) == 0x00006C, "Member 'B_CreativePlayerController_C_VisualizeSwitchConnections::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSwitchConnections, CallFunc_Array_Get_Item) == 0x000070, "Member 'B_CreativePlayerController_C_VisualizeSwitchConnections::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSwitchConnections, CallFunc_Array_Length_ReturnValue_2) == 0x000078, "Member 'B_CreativePlayerController_C_VisualizeSwitchConnections::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSwitchConnections, Temp_int_Array_Index_Variable_1) == 0x00007C, "Member 'B_CreativePlayerController_C_VisualizeSwitchConnections::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSwitchConnections, CallFunc_Array_Get_Item_1) == 0x000080, "Member 'B_CreativePlayerController_C_VisualizeSwitchConnections::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSwitchConnections, Temp_int_Loop_Counter_Variable_2) == 0x000088, "Member 'B_CreativePlayerController_C_VisualizeSwitchConnections::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSwitchConnections, CallFunc_Add_IntInt_ReturnValue_2) == 0x00008C, "Member 'B_CreativePlayerController_C_VisualizeSwitchConnections::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSwitchConnections, Temp_int_Array_Index_Variable_2) == 0x000090, "Member 'B_CreativePlayerController_C_VisualizeSwitchConnections::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSwitchConnections, K2Node_SwitchEnum_CmpSuccess) == 0x000094, "Member 'B_CreativePlayerController_C_VisualizeSwitchConnections::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSwitchConnections, CallFunc_GetAllActorsOfClass_OutActors) == 0x000098, "Member 'B_CreativePlayerController_C_VisualizeSwitchConnections::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSwitchConnections, CallFunc_GetAllActorsOfClass_OutActors_1) == 0x0000A8, "Member 'B_CreativePlayerController_C_VisualizeSwitchConnections::CallFunc_GetAllActorsOfClass_OutActors_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSwitchConnections, Temp_int_Array_Index_Variable_3) == 0x0000B8, "Member 'B_CreativePlayerController_C_VisualizeSwitchConnections::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSwitchConnections, CallFunc_IsValid_ReturnValue) == 0x0000BC, "Member 'B_CreativePlayerController_C_VisualizeSwitchConnections::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSwitchConnections, CallFunc_Array_Get_Item_2) == 0x0000C0, "Member 'B_CreativePlayerController_C_VisualizeSwitchConnections::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSwitchConnections, K2Node_SwitchEnum_CmpSuccess_1) == 0x0000C8, "Member 'B_CreativePlayerController_C_VisualizeSwitchConnections::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSwitchConnections, CallFunc_Array_Get_Item_3) == 0x0000D0, "Member 'B_CreativePlayerController_C_VisualizeSwitchConnections::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSwitchConnections, CallFunc_Array_Length_ReturnValue_3) == 0x0000D8, "Member 'B_CreativePlayerController_C_VisualizeSwitchConnections::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSwitchConnections, CallFunc_Less_IntInt_ReturnValue_2) == 0x0000DC, "Member 'B_CreativePlayerController_C_VisualizeSwitchConnections::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSwitchConnections, K2Node_DynamicCast_AsBP_Switch) == 0x0000E0, "Member 'B_CreativePlayerController_C_VisualizeSwitchConnections::K2Node_DynamicCast_AsBP_Switch' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSwitchConnections, K2Node_DynamicCast_bSuccess_1) == 0x0000E8, "Member 'B_CreativePlayerController_C_VisualizeSwitchConnections::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSwitchConnections, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0000E9, "Member 'B_CreativePlayerController_C_VisualizeSwitchConnections::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSwitchConnections, Temp_int_Loop_Counter_Variable_3) == 0x0000EC, "Member 'B_CreativePlayerController_C_VisualizeSwitchConnections::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSwitchConnections, CallFunc_BooleanAND_ReturnValue) == 0x0000F0, "Member 'B_CreativePlayerController_C_VisualizeSwitchConnections::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSwitchConnections, CallFunc_Less_IntInt_ReturnValue_3) == 0x0000F1, "Member 'B_CreativePlayerController_C_VisualizeSwitchConnections::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSwitchConnections, CallFunc_Add_IntInt_ReturnValue_3) == 0x0000F4, "Member 'B_CreativePlayerController_C_VisualizeSwitchConnections::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSwitchConnections, CallFunc_Array_Contains_ReturnValue) == 0x0000F8, "Member 'B_CreativePlayerController_C_VisualizeSwitchConnections::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSwitchConnections, K2Node_DynamicCast_AsBP_Switch_1) == 0x000100, "Member 'B_CreativePlayerController_C_VisualizeSwitchConnections::K2Node_DynamicCast_AsBP_Switch_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_VisualizeSwitchConnections, K2Node_DynamicCast_bSuccess_2) == 0x000108, "Member 'B_CreativePlayerController_C_VisualizeSwitchConnections::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.GetAnchorActor
// 0x0030 (0x0030 - 0x0000)
struct B_CreativePlayerController_C_GetAnchorActor final
{
public:
	class AActor*                                 AnchorActor;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlacing_IsPlacing;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item_1;                         // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_GetAnchorActor) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_GetAnchorActor");
static_assert(sizeof(B_CreativePlayerController_C_GetAnchorActor) == 0x000030, "Wrong size on B_CreativePlayerController_C_GetAnchorActor");
static_assert(offsetof(B_CreativePlayerController_C_GetAnchorActor, AnchorActor) == 0x000000, "Member 'B_CreativePlayerController_C_GetAnchorActor::AnchorActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetAnchorActor, CallFunc_IsPlacing_IsPlacing) == 0x000008, "Member 'B_CreativePlayerController_C_GetAnchorActor::CallFunc_IsPlacing_IsPlacing' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetAnchorActor, CallFunc_Array_Get_Item) == 0x000010, "Member 'B_CreativePlayerController_C_GetAnchorActor::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetAnchorActor, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'B_CreativePlayerController_C_GetAnchorActor::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetAnchorActor, CallFunc_Greater_IntInt_ReturnValue) == 0x00001C, "Member 'B_CreativePlayerController_C_GetAnchorActor::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetAnchorActor, CallFunc_Array_Get_Item_1) == 0x000020, "Member 'B_CreativePlayerController_C_GetAnchorActor::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetAnchorActor, CallFunc_Array_Length_ReturnValue_1) == 0x000028, "Member 'B_CreativePlayerController_C_GetAnchorActor::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetAnchorActor, CallFunc_Greater_IntInt_ReturnValue_1) == 0x00002C, "Member 'B_CreativePlayerController_C_GetAnchorActor::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.GetNameForSingleActorOrGroup
// 0x0120 (0x0120 - 0x0000)
struct B_CreativePlayerController_C_GetNameForSingleActorOrGroup final
{
public:
	bool                                          IsGroupName;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TargetActor;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   FullName;                                          // 0x0010(0x0010)(Parm, OutParm)
	class AActor*                                 ActorToName;                                       // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class FString                                 Name_0;                                            // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_StaticMeshProp_C*                    K2Node_DynamicCast_AsB_Static_Mesh_Prop;           // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IIProp_C>              CallFunc_GetName_self_CastInput;                   // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetName_Name;                             // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class ABP_PlaceableActor_C*                   K2Node_DynamicCast_AsBP_Placeable_Actor;           // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetAnchorActor_AnchorActor;               // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x00B0(0x0010)()
	class FText                                   CallFunc_MakeLiteralText_ReturnValue;              // 0x00C0(0x0010)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue_1;          // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_String__CombineStrings_Multi_ReturnValue; // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_String__CombineStrings_Multi_ReturnValue_1; // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_String__CombineStrings_Multi_ReturnValue_2; // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_String__CombineStrings_Multi_ReturnValue_3; // 0x0110(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_GetNameForSingleActorOrGroup) == 0x000008, "Wrong alignment on B_CreativePlayerController_C_GetNameForSingleActorOrGroup");
static_assert(sizeof(B_CreativePlayerController_C_GetNameForSingleActorOrGroup) == 0x000120, "Wrong size on B_CreativePlayerController_C_GetNameForSingleActorOrGroup");
static_assert(offsetof(B_CreativePlayerController_C_GetNameForSingleActorOrGroup, IsGroupName) == 0x000000, "Member 'B_CreativePlayerController_C_GetNameForSingleActorOrGroup::IsGroupName' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetNameForSingleActorOrGroup, TargetActor) == 0x000008, "Member 'B_CreativePlayerController_C_GetNameForSingleActorOrGroup::TargetActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetNameForSingleActorOrGroup, FullName) == 0x000010, "Member 'B_CreativePlayerController_C_GetNameForSingleActorOrGroup::FullName' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetNameForSingleActorOrGroup, ActorToName) == 0x000020, "Member 'B_CreativePlayerController_C_GetNameForSingleActorOrGroup::ActorToName' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetNameForSingleActorOrGroup, Name_0) == 0x000028, "Member 'B_CreativePlayerController_C_GetNameForSingleActorOrGroup::Name_0' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetNameForSingleActorOrGroup, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'B_CreativePlayerController_C_GetNameForSingleActorOrGroup::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetNameForSingleActorOrGroup, K2Node_DynamicCast_AsB_Static_Mesh_Prop) == 0x000040, "Member 'B_CreativePlayerController_C_GetNameForSingleActorOrGroup::K2Node_DynamicCast_AsB_Static_Mesh_Prop' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetNameForSingleActorOrGroup, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'B_CreativePlayerController_C_GetNameForSingleActorOrGroup::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetNameForSingleActorOrGroup, CallFunc_GetName_self_CastInput) == 0x000050, "Member 'B_CreativePlayerController_C_GetNameForSingleActorOrGroup::CallFunc_GetName_self_CastInput' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetNameForSingleActorOrGroup, CallFunc_GetName_Name) == 0x000060, "Member 'B_CreativePlayerController_C_GetNameForSingleActorOrGroup::CallFunc_GetName_Name' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetNameForSingleActorOrGroup, K2Node_DynamicCast_AsBP_Placeable_Actor) == 0x000070, "Member 'B_CreativePlayerController_C_GetNameForSingleActorOrGroup::K2Node_DynamicCast_AsBP_Placeable_Actor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetNameForSingleActorOrGroup, K2Node_DynamicCast_bSuccess_1) == 0x000078, "Member 'B_CreativePlayerController_C_GetNameForSingleActorOrGroup::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetNameForSingleActorOrGroup, CallFunc_Conv_TextToString_ReturnValue) == 0x000080, "Member 'B_CreativePlayerController_C_GetNameForSingleActorOrGroup::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetNameForSingleActorOrGroup, CallFunc_GetAnchorActor_AnchorActor) == 0x000090, "Member 'B_CreativePlayerController_C_GetNameForSingleActorOrGroup::CallFunc_GetAnchorActor_AnchorActor' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetNameForSingleActorOrGroup, CallFunc_Array_Length_ReturnValue) == 0x000098, "Member 'B_CreativePlayerController_C_GetNameForSingleActorOrGroup::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetNameForSingleActorOrGroup, CallFunc_Conv_IntToString_ReturnValue) == 0x0000A0, "Member 'B_CreativePlayerController_C_GetNameForSingleActorOrGroup::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetNameForSingleActorOrGroup, CallFunc_Conv_StringToText_ReturnValue) == 0x0000B0, "Member 'B_CreativePlayerController_C_GetNameForSingleActorOrGroup::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetNameForSingleActorOrGroup, CallFunc_MakeLiteralText_ReturnValue) == 0x0000C0, "Member 'B_CreativePlayerController_C_GetNameForSingleActorOrGroup::CallFunc_MakeLiteralText_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetNameForSingleActorOrGroup, CallFunc_Conv_TextToString_ReturnValue_1) == 0x0000D0, "Member 'B_CreativePlayerController_C_GetNameForSingleActorOrGroup::CallFunc_Conv_TextToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetNameForSingleActorOrGroup, CallFunc_String__CombineStrings_Multi_ReturnValue) == 0x0000E0, "Member 'B_CreativePlayerController_C_GetNameForSingleActorOrGroup::CallFunc_String__CombineStrings_Multi_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetNameForSingleActorOrGroup, CallFunc_String__CombineStrings_Multi_ReturnValue_1) == 0x0000F0, "Member 'B_CreativePlayerController_C_GetNameForSingleActorOrGroup::CallFunc_String__CombineStrings_Multi_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetNameForSingleActorOrGroup, CallFunc_String__CombineStrings_Multi_ReturnValue_2) == 0x000100, "Member 'B_CreativePlayerController_C_GetNameForSingleActorOrGroup::CallFunc_String__CombineStrings_Multi_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_GetNameForSingleActorOrGroup, CallFunc_String__CombineStrings_Multi_ReturnValue_3) == 0x000110, "Member 'B_CreativePlayerController_C_GetNameForSingleActorOrGroup::CallFunc_String__CombineStrings_Multi_ReturnValue_3' has a wrong offset!");

// Function B_CreativePlayerController.B_CreativePlayerController_C.IsPlacing
// 0x000C (0x000C - 0x0000)
struct B_CreativePlayerController_C_IsPlacing final
{
public:
	bool                                          IsPlacing_0;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativePlayerController_C_IsPlacing) == 0x000004, "Wrong alignment on B_CreativePlayerController_C_IsPlacing");
static_assert(sizeof(B_CreativePlayerController_C_IsPlacing) == 0x00000C, "Wrong size on B_CreativePlayerController_C_IsPlacing");
static_assert(offsetof(B_CreativePlayerController_C_IsPlacing, IsPlacing_0) == 0x000000, "Member 'B_CreativePlayerController_C_IsPlacing::IsPlacing_0' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_IsPlacing, CallFunc_Array_Length_ReturnValue) == 0x000004, "Member 'B_CreativePlayerController_C_IsPlacing::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativePlayerController_C_IsPlacing, CallFunc_Greater_IntInt_ReturnValue) == 0x000008, "Member 'B_CreativePlayerController_C_IsPlacing::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

}

