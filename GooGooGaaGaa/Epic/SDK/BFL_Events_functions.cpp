#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BFL_Events

#include "Basic.hpp"

#include "BFL_Events_classes.hpp"
#include "BFL_Events_parameters.hpp"


namespace SDK
{

// Function BFL_Events.BFL_Events_C.AreAllIngredientsFound
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FSNeededIngredient>       NeededIngredients                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<int32>                           IngredientCounters                                     (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBFL_Events_C::AreAllIngredientsFound(TArray<struct FSNeededIngredient>& NeededIngredients, TArray<int32>& IngredientCounters, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFL_Events_C", "AreAllIngredientsFound");

	Params::BFL_Events_C_AreAllIngredientsFound Parms{};

	Parms.NeededIngredients = std::move(NeededIngredients);
	Parms.IngredientCounters = std::move(IngredientCounters);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	NeededIngredients = std::move(Parms.NeededIngredients);
	IngredientCounters = std::move(Parms.IngredientCounters);

	return Parms.ReturnValue;
}


// Function BFL_Events.BFL_Events_C.FillIngredientsArray
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FBlueprintOnlineItem>     AllItems                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FSNeededIngredient>       NeededIngredients                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FBlueprintOnlineItem>     IngredientsArrayRef                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBFL_Events_C::FillIngredientsArray(TArray<struct FBlueprintOnlineItem>& AllItems, TArray<struct FSNeededIngredient>& NeededIngredients, TArray<struct FBlueprintOnlineItem>& IngredientsArrayRef, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFL_Events_C", "FillIngredientsArray");

	Params::BFL_Events_C_FillIngredientsArray Parms{};

	Parms.AllItems = std::move(AllItems);
	Parms.NeededIngredients = std::move(NeededIngredients);
	Parms.IngredientsArrayRef = std::move(IngredientsArrayRef);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	AllItems = std::move(Parms.AllItems);
	NeededIngredients = std::move(Parms.NeededIngredients);
	IngredientsArrayRef = std::move(Parms.IngredientsArrayRef);
}


// Function BFL_Events.BFL_Events_C.InitIngredientCounters
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           IngredientCountersRef                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FSNeededIngredient>       NeededIngredients                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBFL_Events_C::InitIngredientCounters(const TArray<int32>& IngredientCountersRef, const TArray<struct FSNeededIngredient>& NeededIngredients, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFL_Events_C", "InitIngredientCounters");

	Params::BFL_Events_C_InitIngredientCounters Parms{};

	Parms.IngredientCountersRef = std::move(IngredientCountersRef);
	Parms.NeededIngredients = std::move(NeededIngredients);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BFL_Events.BFL_Events_C.WasUsedAsIngredient
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FBlueprintOnlineItem>     Ingredients                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FBlueprintOnlineItem             Item                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBFL_Events_C::WasUsedAsIngredient(TArray<struct FBlueprintOnlineItem>& Ingredients, const struct FBlueprintOnlineItem& Item, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFL_Events_C", "WasUsedAsIngredient");

	Params::BFL_Events_C_WasUsedAsIngredient Parms{};

	Parms.Ingredients = std::move(Ingredients);
	Parms.Item = std::move(Item);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Ingredients = std::move(Parms.Ingredients);

	return Parms.ReturnValue;
}

}

