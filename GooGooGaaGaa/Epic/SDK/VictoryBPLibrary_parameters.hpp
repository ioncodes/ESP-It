#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VictoryBPLibrary

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "VictoryBPLibrary_structs.hpp"
#include "Engine_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function VictoryBPLibrary.RamaColorPicker.SetJoyColor
// 0x0014 (0x0014 - 0x0000)
struct RamaColorPicker_SetJoyColor final
{
public:
	struct FLinearColor                           NewColor;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SkipAnimation;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RamaColorPicker_SetJoyColor) == 0x000004, "Wrong alignment on RamaColorPicker_SetJoyColor");
static_assert(sizeof(RamaColorPicker_SetJoyColor) == 0x000014, "Wrong size on RamaColorPicker_SetJoyColor");
static_assert(offsetof(RamaColorPicker_SetJoyColor, NewColor) == 0x000000, "Member 'RamaColorPicker_SetJoyColor::NewColor' has a wrong offset!");
static_assert(offsetof(RamaColorPicker_SetJoyColor, SkipAnimation) == 0x000010, "Member 'RamaColorPicker_SetJoyColor::SkipAnimation' has a wrong offset!");

// Function VictoryBPLibrary.RamaVictoryPluginCreateProcessPipe.CreatePipe
// 0x0001 (0x0001 - 0x0000)
struct RamaVictoryPluginCreateProcessPipe_CreatePipe final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RamaVictoryPluginCreateProcessPipe_CreatePipe) == 0x000001, "Wrong alignment on RamaVictoryPluginCreateProcessPipe_CreatePipe");
static_assert(sizeof(RamaVictoryPluginCreateProcessPipe_CreatePipe) == 0x000001, "Wrong size on RamaVictoryPluginCreateProcessPipe_CreatePipe");
static_assert(offsetof(RamaVictoryPluginCreateProcessPipe_CreatePipe, ReturnValue) == 0x000000, "Member 'RamaVictoryPluginCreateProcessPipe_CreatePipe::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.RamaVictoryPluginCreateProcessPipe.PipeIsValid
// 0x0001 (0x0001 - 0x0000)
struct RamaVictoryPluginCreateProcessPipe_PipeIsValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RamaVictoryPluginCreateProcessPipe_PipeIsValid) == 0x000001, "Wrong alignment on RamaVictoryPluginCreateProcessPipe_PipeIsValid");
static_assert(sizeof(RamaVictoryPluginCreateProcessPipe_PipeIsValid) == 0x000001, "Wrong size on RamaVictoryPluginCreateProcessPipe_PipeIsValid");
static_assert(offsetof(RamaVictoryPluginCreateProcessPipe_PipeIsValid, ReturnValue) == 0x000000, "Member 'RamaVictoryPluginCreateProcessPipe_PipeIsValid::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.RamaVictoryPluginCreateProcessPipe.ReadFromPipe
// 0x0018 (0x0018 - 0x0000)
struct RamaVictoryPluginCreateProcessPipe_ReadFromPipe final
{
public:
	class FString                                 PipeContents;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RamaVictoryPluginCreateProcessPipe_ReadFromPipe) == 0x000008, "Wrong alignment on RamaVictoryPluginCreateProcessPipe_ReadFromPipe");
static_assert(sizeof(RamaVictoryPluginCreateProcessPipe_ReadFromPipe) == 0x000018, "Wrong size on RamaVictoryPluginCreateProcessPipe_ReadFromPipe");
static_assert(offsetof(RamaVictoryPluginCreateProcessPipe_ReadFromPipe, PipeContents) == 0x000000, "Member 'RamaVictoryPluginCreateProcessPipe_ReadFromPipe::PipeContents' has a wrong offset!");
static_assert(offsetof(RamaVictoryPluginCreateProcessPipe_ReadFromPipe, ReturnValue) == 0x000010, "Member 'RamaVictoryPluginCreateProcessPipe_ReadFromPipe::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Accessor__GetNameAsString
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_Accessor__GetNameAsString final
{
public:
	const class UObject*                          TheObject;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_Accessor__GetNameAsString) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Accessor__GetNameAsString");
static_assert(sizeof(VictoryBPFunctionLibrary_Accessor__GetNameAsString) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_Accessor__GetNameAsString");
static_assert(offsetof(VictoryBPFunctionLibrary_Accessor__GetNameAsString, TheObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_Accessor__GetNameAsString::TheObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Accessor__GetNameAsString, ReturnValue) == 0x000008, "Member 'VictoryBPFunctionLibrary_Accessor__GetNameAsString::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Accessor__GetPlayerController
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_Accessor__GetPlayerController final
{
public:
	class AActor*                                 TheCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_Accessor__GetPlayerController) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Accessor__GetPlayerController");
static_assert(sizeof(VictoryBPFunctionLibrary_Accessor__GetPlayerController) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_Accessor__GetPlayerController");
static_assert(offsetof(VictoryBPFunctionLibrary_Accessor__GetPlayerController, TheCharacter) == 0x000000, "Member 'VictoryBPFunctionLibrary_Accessor__GetPlayerController::TheCharacter' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Accessor__GetPlayerController, IsValid) == 0x000008, "Member 'VictoryBPFunctionLibrary_Accessor__GetPlayerController::IsValid' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Accessor__GetPlayerController, ReturnValue) == 0x000010, "Member 'VictoryBPFunctionLibrary_Accessor__GetPlayerController::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Animation__GetAimOffsets
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_Animation__GetAimOffsets final
{
public:
	class AActor*                                 AnimBPOwner;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pitch;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Animation__GetAimOffsets) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Animation__GetAimOffsets");
static_assert(sizeof(VictoryBPFunctionLibrary_Animation__GetAimOffsets) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_Animation__GetAimOffsets");
static_assert(offsetof(VictoryBPFunctionLibrary_Animation__GetAimOffsets, AnimBPOwner) == 0x000000, "Member 'VictoryBPFunctionLibrary_Animation__GetAimOffsets::AnimBPOwner' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Animation__GetAimOffsets, Pitch) == 0x000008, "Member 'VictoryBPFunctionLibrary_Animation__GetAimOffsets::Pitch' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Animation__GetAimOffsets, Yaw) == 0x00000C, "Member 'VictoryBPFunctionLibrary_Animation__GetAimOffsets::Yaw' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Animation__GetAimOffsets, ReturnValue) == 0x000010, "Member 'VictoryBPFunctionLibrary_Animation__GetAimOffsets::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Animation__GetAimOffsetsFromRotation
// 0x0030 (0x0030 - 0x0000)
struct VictoryBPFunctionLibrary_Animation__GetAimOffsetsFromRotation final
{
public:
	class AActor*                                 AnimBPOwner;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               TheRotation;                                       // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Pitch;                                             // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Animation__GetAimOffsetsFromRotation) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Animation__GetAimOffsetsFromRotation");
static_assert(sizeof(VictoryBPFunctionLibrary_Animation__GetAimOffsetsFromRotation) == 0x000030, "Wrong size on VictoryBPFunctionLibrary_Animation__GetAimOffsetsFromRotation");
static_assert(offsetof(VictoryBPFunctionLibrary_Animation__GetAimOffsetsFromRotation, AnimBPOwner) == 0x000000, "Member 'VictoryBPFunctionLibrary_Animation__GetAimOffsetsFromRotation::AnimBPOwner' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Animation__GetAimOffsetsFromRotation, TheRotation) == 0x000008, "Member 'VictoryBPFunctionLibrary_Animation__GetAimOffsetsFromRotation::TheRotation' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Animation__GetAimOffsetsFromRotation, Pitch) == 0x000020, "Member 'VictoryBPFunctionLibrary_Animation__GetAimOffsetsFromRotation::Pitch' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Animation__GetAimOffsetsFromRotation, Yaw) == 0x000024, "Member 'VictoryBPFunctionLibrary_Animation__GetAimOffsetsFromRotation::Yaw' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Animation__GetAimOffsetsFromRotation, ReturnValue) == 0x000028, "Member 'VictoryBPFunctionLibrary_Animation__GetAimOffsetsFromRotation::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.AppendMultiple
// 0x0030 (0x0030 - 0x0000)
struct VictoryBPFunctionLibrary_AppendMultiple final
{
public:
	class FString                                 A;                                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 B;                                                 // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_AppendMultiple) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_AppendMultiple");
static_assert(sizeof(VictoryBPFunctionLibrary_AppendMultiple) == 0x000030, "Wrong size on VictoryBPFunctionLibrary_AppendMultiple");
static_assert(offsetof(VictoryBPFunctionLibrary_AppendMultiple, A) == 0x000000, "Member 'VictoryBPFunctionLibrary_AppendMultiple::A' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_AppendMultiple, B) == 0x000010, "Member 'VictoryBPFunctionLibrary_AppendMultiple::B' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_AppendMultiple, ReturnValue) == 0x000020, "Member 'VictoryBPFunctionLibrary_AppendMultiple::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Array_Sort
// 0x0020 (0x0020 - 0x0000)
struct VictoryBPFunctionLibrary_Array_Sort final
{
public:
	TArray<int32>                                 TargetArray;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bAscendingOrder;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   VariableName;                                      // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Array_Sort) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Array_Sort");
static_assert(sizeof(VictoryBPFunctionLibrary_Array_Sort) == 0x000020, "Wrong size on VictoryBPFunctionLibrary_Array_Sort");
static_assert(offsetof(VictoryBPFunctionLibrary_Array_Sort, TargetArray) == 0x000000, "Member 'VictoryBPFunctionLibrary_Array_Sort::TargetArray' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Array_Sort, bAscendingOrder) == 0x000010, "Member 'VictoryBPFunctionLibrary_Array_Sort::bAscendingOrder' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Array_Sort, VariableName) == 0x000014, "Member 'VictoryBPFunctionLibrary_Array_Sort::VariableName' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Capture2D_Project
// 0x0038 (0x0038 - 0x0000)
struct VictoryBPFunctionLibrary_Capture2D_Project final
{
public:
	class ASceneCapture2D*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutPixelLocation;                                  // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Capture2D_Project) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Capture2D_Project");
static_assert(sizeof(VictoryBPFunctionLibrary_Capture2D_Project) == 0x000038, "Wrong size on VictoryBPFunctionLibrary_Capture2D_Project");
static_assert(offsetof(VictoryBPFunctionLibrary_Capture2D_Project, Target) == 0x000000, "Member 'VictoryBPFunctionLibrary_Capture2D_Project::Target' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Capture2D_Project, Location) == 0x000008, "Member 'VictoryBPFunctionLibrary_Capture2D_Project::Location' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Capture2D_Project, OutPixelLocation) == 0x000020, "Member 'VictoryBPFunctionLibrary_Capture2D_Project::OutPixelLocation' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Capture2D_Project, ReturnValue) == 0x000030, "Member 'VictoryBPFunctionLibrary_Capture2D_Project::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Capture2D_SaveImage
// 0x0030 (0x0030 - 0x0000)
struct VictoryBPFunctionLibrary_Capture2D_SaveImage final
{
public:
	class ASceneCapture2D*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ImagePath;                                         // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ClearColour;                                       // 0x0018(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Capture2D_SaveImage) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Capture2D_SaveImage");
static_assert(sizeof(VictoryBPFunctionLibrary_Capture2D_SaveImage) == 0x000030, "Wrong size on VictoryBPFunctionLibrary_Capture2D_SaveImage");
static_assert(offsetof(VictoryBPFunctionLibrary_Capture2D_SaveImage, Target) == 0x000000, "Member 'VictoryBPFunctionLibrary_Capture2D_SaveImage::Target' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Capture2D_SaveImage, ImagePath) == 0x000008, "Member 'VictoryBPFunctionLibrary_Capture2D_SaveImage::ImagePath' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Capture2D_SaveImage, ClearColour) == 0x000018, "Member 'VictoryBPFunctionLibrary_Capture2D_SaveImage::ClearColour' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Capture2D_SaveImage, ReturnValue) == 0x000028, "Member 'VictoryBPFunctionLibrary_Capture2D_SaveImage::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.CaptureComponent2D_Project
// 0x0038 (0x0038 - 0x0000)
struct VictoryBPFunctionLibrary_CaptureComponent2D_Project final
{
public:
	class USceneCaptureComponent2D*               Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutPixelLocation;                                  // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_CaptureComponent2D_Project) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_CaptureComponent2D_Project");
static_assert(sizeof(VictoryBPFunctionLibrary_CaptureComponent2D_Project) == 0x000038, "Wrong size on VictoryBPFunctionLibrary_CaptureComponent2D_Project");
static_assert(offsetof(VictoryBPFunctionLibrary_CaptureComponent2D_Project, Target) == 0x000000, "Member 'VictoryBPFunctionLibrary_CaptureComponent2D_Project::Target' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_CaptureComponent2D_Project, Location) == 0x000008, "Member 'VictoryBPFunctionLibrary_CaptureComponent2D_Project::Location' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_CaptureComponent2D_Project, OutPixelLocation) == 0x000020, "Member 'VictoryBPFunctionLibrary_CaptureComponent2D_Project::OutPixelLocation' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_CaptureComponent2D_Project, ReturnValue) == 0x000030, "Member 'VictoryBPFunctionLibrary_CaptureComponent2D_Project::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.CaptureComponent2D_SaveImage
// 0x0030 (0x0030 - 0x0000)
struct VictoryBPFunctionLibrary_CaptureComponent2D_SaveImage final
{
public:
	class USceneCaptureComponent2D*               Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ImagePath;                                         // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ClearColour;                                       // 0x0018(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_CaptureComponent2D_SaveImage) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_CaptureComponent2D_SaveImage");
static_assert(sizeof(VictoryBPFunctionLibrary_CaptureComponent2D_SaveImage) == 0x000030, "Wrong size on VictoryBPFunctionLibrary_CaptureComponent2D_SaveImage");
static_assert(offsetof(VictoryBPFunctionLibrary_CaptureComponent2D_SaveImage, Target) == 0x000000, "Member 'VictoryBPFunctionLibrary_CaptureComponent2D_SaveImage::Target' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_CaptureComponent2D_SaveImage, ImagePath) == 0x000008, "Member 'VictoryBPFunctionLibrary_CaptureComponent2D_SaveImage::ImagePath' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_CaptureComponent2D_SaveImage, ClearColour) == 0x000018, "Member 'VictoryBPFunctionLibrary_CaptureComponent2D_SaveImage::ClearColour' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_CaptureComponent2D_SaveImage, ReturnValue) == 0x000028, "Member 'VictoryBPFunctionLibrary_CaptureComponent2D_SaveImage::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.ClientWindow__GameWindowIsForeGroundInOS
// 0x0001 (0x0001 - 0x0000)
struct VictoryBPFunctionLibrary_ClientWindow__GameWindowIsForeGroundInOS final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_ClientWindow__GameWindowIsForeGroundInOS) == 0x000001, "Wrong alignment on VictoryBPFunctionLibrary_ClientWindow__GameWindowIsForeGroundInOS");
static_assert(sizeof(VictoryBPFunctionLibrary_ClientWindow__GameWindowIsForeGroundInOS) == 0x000001, "Wrong size on VictoryBPFunctionLibrary_ClientWindow__GameWindowIsForeGroundInOS");
static_assert(offsetof(VictoryBPFunctionLibrary_ClientWindow__GameWindowIsForeGroundInOS, ReturnValue) == 0x000000, "Member 'VictoryBPFunctionLibrary_ClientWindow__GameWindowIsForeGroundInOS::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.ClosestPointsOfLineSegments
// 0x0090 (0x0090 - 0x0000)
struct VictoryBPFunctionLibrary_ClosestPointsOfLineSegments final
{
public:
	struct FVector                                Line1Start;                                        // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Line1End;                                          // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Line2Start;                                        // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Line2End;                                          // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LinePoint1;                                        // 0x0060(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LinePoint2;                                        // 0x0078(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_ClosestPointsOfLineSegments) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_ClosestPointsOfLineSegments");
static_assert(sizeof(VictoryBPFunctionLibrary_ClosestPointsOfLineSegments) == 0x000090, "Wrong size on VictoryBPFunctionLibrary_ClosestPointsOfLineSegments");
static_assert(offsetof(VictoryBPFunctionLibrary_ClosestPointsOfLineSegments, Line1Start) == 0x000000, "Member 'VictoryBPFunctionLibrary_ClosestPointsOfLineSegments::Line1Start' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_ClosestPointsOfLineSegments, Line1End) == 0x000018, "Member 'VictoryBPFunctionLibrary_ClosestPointsOfLineSegments::Line1End' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_ClosestPointsOfLineSegments, Line2Start) == 0x000030, "Member 'VictoryBPFunctionLibrary_ClosestPointsOfLineSegments::Line2Start' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_ClosestPointsOfLineSegments, Line2End) == 0x000048, "Member 'VictoryBPFunctionLibrary_ClosestPointsOfLineSegments::Line2End' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_ClosestPointsOfLineSegments, LinePoint1) == 0x000060, "Member 'VictoryBPFunctionLibrary_ClosestPointsOfLineSegments::LinePoint1' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_ClosestPointsOfLineSegments, LinePoint2) == 0x000078, "Member 'VictoryBPFunctionLibrary_ClosestPointsOfLineSegments::LinePoint2' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.ClosestPointsOnTwoLines
// 0x0098 (0x0098 - 0x0000)
struct VictoryBPFunctionLibrary_ClosestPointsOnTwoLines final
{
public:
	struct FVector                                ClosestPointLine1;                                 // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ClosestPointLine2;                                 // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LinePoint1;                                        // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LineVec1;                                          // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LinePoint2;                                        // 0x0060(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LineVec2;                                          // 0x0078(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_ClosestPointsOnTwoLines) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_ClosestPointsOnTwoLines");
static_assert(sizeof(VictoryBPFunctionLibrary_ClosestPointsOnTwoLines) == 0x000098, "Wrong size on VictoryBPFunctionLibrary_ClosestPointsOnTwoLines");
static_assert(offsetof(VictoryBPFunctionLibrary_ClosestPointsOnTwoLines, ClosestPointLine1) == 0x000000, "Member 'VictoryBPFunctionLibrary_ClosestPointsOnTwoLines::ClosestPointLine1' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_ClosestPointsOnTwoLines, ClosestPointLine2) == 0x000018, "Member 'VictoryBPFunctionLibrary_ClosestPointsOnTwoLines::ClosestPointLine2' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_ClosestPointsOnTwoLines, LinePoint1) == 0x000030, "Member 'VictoryBPFunctionLibrary_ClosestPointsOnTwoLines::LinePoint1' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_ClosestPointsOnTwoLines, LineVec1) == 0x000048, "Member 'VictoryBPFunctionLibrary_ClosestPointsOnTwoLines::LineVec1' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_ClosestPointsOnTwoLines, LinePoint2) == 0x000060, "Member 'VictoryBPFunctionLibrary_ClosestPointsOnTwoLines::LinePoint2' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_ClosestPointsOnTwoLines, LineVec2) == 0x000078, "Member 'VictoryBPFunctionLibrary_ClosestPointsOnTwoLines::LineVec2' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_ClosestPointsOnTwoLines, ReturnValue) == 0x000090, "Member 'VictoryBPFunctionLibrary_ClosestPointsOnTwoLines::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.CreateStaticMeshAssetFromDynamicMesh
// 0x0048 (0x0048 - 0x0000)
struct VictoryBPFunctionLibrary_CreateStaticMeshAssetFromDynamicMesh final
{
public:
	class FString                                 ContentFolderPath;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMeshComponent*                  DynamicMeshComp;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Status;                                            // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewAssetFilePath;                                  // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_CreateStaticMeshAssetFromDynamicMesh) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_CreateStaticMeshAssetFromDynamicMesh");
static_assert(sizeof(VictoryBPFunctionLibrary_CreateStaticMeshAssetFromDynamicMesh) == 0x000048, "Wrong size on VictoryBPFunctionLibrary_CreateStaticMeshAssetFromDynamicMesh");
static_assert(offsetof(VictoryBPFunctionLibrary_CreateStaticMeshAssetFromDynamicMesh, ContentFolderPath) == 0x000000, "Member 'VictoryBPFunctionLibrary_CreateStaticMeshAssetFromDynamicMesh::ContentFolderPath' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_CreateStaticMeshAssetFromDynamicMesh, DynamicMeshComp) == 0x000010, "Member 'VictoryBPFunctionLibrary_CreateStaticMeshAssetFromDynamicMesh::DynamicMeshComp' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_CreateStaticMeshAssetFromDynamicMesh, Status) == 0x000018, "Member 'VictoryBPFunctionLibrary_CreateStaticMeshAssetFromDynamicMesh::Status' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_CreateStaticMeshAssetFromDynamicMesh, NewAssetFilePath) == 0x000028, "Member 'VictoryBPFunctionLibrary_CreateStaticMeshAssetFromDynamicMesh::NewAssetFilePath' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_CreateStaticMeshAssetFromDynamicMesh, Success) == 0x000038, "Member 'VictoryBPFunctionLibrary_CreateStaticMeshAssetFromDynamicMesh::Success' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_CreateStaticMeshAssetFromDynamicMesh, ReturnValue) == 0x000040, "Member 'VictoryBPFunctionLibrary_CreateStaticMeshAssetFromDynamicMesh::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.DoesMaterialHaveParameter
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_DoesMaterialHaveParameter final
{
public:
	class UMaterialInterface*                     Mat;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Parameter;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_DoesMaterialHaveParameter) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_DoesMaterialHaveParameter");
static_assert(sizeof(VictoryBPFunctionLibrary_DoesMaterialHaveParameter) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_DoesMaterialHaveParameter");
static_assert(offsetof(VictoryBPFunctionLibrary_DoesMaterialHaveParameter, Mat) == 0x000000, "Member 'VictoryBPFunctionLibrary_DoesMaterialHaveParameter::Mat' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_DoesMaterialHaveParameter, Parameter) == 0x000008, "Member 'VictoryBPFunctionLibrary_DoesMaterialHaveParameter::Parameter' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_DoesMaterialHaveParameter, ReturnValue) == 0x000010, "Member 'VictoryBPFunctionLibrary_DoesMaterialHaveParameter::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.FileIO__SaveStringArrayToFile
// 0x0038 (0x0038 - 0x0000)
struct VictoryBPFunctionLibrary_FileIO__SaveStringArrayToFile final
{
public:
	class FString                                 SaveDirectory;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 JoyfulFileName;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         SaveText;                                          // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          AllowOverWriting;                                  // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowAppend;                                       // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0032(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_FileIO__SaveStringArrayToFile) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_FileIO__SaveStringArrayToFile");
static_assert(sizeof(VictoryBPFunctionLibrary_FileIO__SaveStringArrayToFile) == 0x000038, "Wrong size on VictoryBPFunctionLibrary_FileIO__SaveStringArrayToFile");
static_assert(offsetof(VictoryBPFunctionLibrary_FileIO__SaveStringArrayToFile, SaveDirectory) == 0x000000, "Member 'VictoryBPFunctionLibrary_FileIO__SaveStringArrayToFile::SaveDirectory' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_FileIO__SaveStringArrayToFile, JoyfulFileName) == 0x000010, "Member 'VictoryBPFunctionLibrary_FileIO__SaveStringArrayToFile::JoyfulFileName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_FileIO__SaveStringArrayToFile, SaveText) == 0x000020, "Member 'VictoryBPFunctionLibrary_FileIO__SaveStringArrayToFile::SaveText' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_FileIO__SaveStringArrayToFile, AllowOverWriting) == 0x000030, "Member 'VictoryBPFunctionLibrary_FileIO__SaveStringArrayToFile::AllowOverWriting' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_FileIO__SaveStringArrayToFile, AllowAppend) == 0x000031, "Member 'VictoryBPFunctionLibrary_FileIO__SaveStringArrayToFile::AllowAppend' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_FileIO__SaveStringArrayToFile, ReturnValue) == 0x000032, "Member 'VictoryBPFunctionLibrary_FileIO__SaveStringArrayToFile::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.FileIO__SaveStringTextToFile
// 0x0038 (0x0038 - 0x0000)
struct VictoryBPFunctionLibrary_FileIO__SaveStringTextToFile final
{
public:
	class FString                                 SaveDirectory;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 JoyfulFileName;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SaveText;                                          // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowOverWriting;                                  // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowAppend;                                       // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0032(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_FileIO__SaveStringTextToFile) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_FileIO__SaveStringTextToFile");
static_assert(sizeof(VictoryBPFunctionLibrary_FileIO__SaveStringTextToFile) == 0x000038, "Wrong size on VictoryBPFunctionLibrary_FileIO__SaveStringTextToFile");
static_assert(offsetof(VictoryBPFunctionLibrary_FileIO__SaveStringTextToFile, SaveDirectory) == 0x000000, "Member 'VictoryBPFunctionLibrary_FileIO__SaveStringTextToFile::SaveDirectory' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_FileIO__SaveStringTextToFile, JoyfulFileName) == 0x000010, "Member 'VictoryBPFunctionLibrary_FileIO__SaveStringTextToFile::JoyfulFileName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_FileIO__SaveStringTextToFile, SaveText) == 0x000020, "Member 'VictoryBPFunctionLibrary_FileIO__SaveStringTextToFile::SaveText' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_FileIO__SaveStringTextToFile, AllowOverWriting) == 0x000030, "Member 'VictoryBPFunctionLibrary_FileIO__SaveStringTextToFile::AllowOverWriting' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_FileIO__SaveStringTextToFile, AllowAppend) == 0x000031, "Member 'VictoryBPFunctionLibrary_FileIO__SaveStringTextToFile::AllowAppend' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_FileIO__SaveStringTextToFile, ReturnValue) == 0x000032, "Member 'VictoryBPFunctionLibrary_FileIO__SaveStringTextToFile::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.FlashGameOnTaskBar
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_FlashGameOnTaskBar final
{
public:
	class APlayerController*                      PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FlashContinuous;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxFlashCount;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FlashFrequencyMilliseconds;                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_FlashGameOnTaskBar) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_FlashGameOnTaskBar");
static_assert(sizeof(VictoryBPFunctionLibrary_FlashGameOnTaskBar) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_FlashGameOnTaskBar");
static_assert(offsetof(VictoryBPFunctionLibrary_FlashGameOnTaskBar, PC) == 0x000000, "Member 'VictoryBPFunctionLibrary_FlashGameOnTaskBar::PC' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_FlashGameOnTaskBar, FlashContinuous) == 0x000008, "Member 'VictoryBPFunctionLibrary_FlashGameOnTaskBar::FlashContinuous' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_FlashGameOnTaskBar, MaxFlashCount) == 0x00000C, "Member 'VictoryBPFunctionLibrary_FlashGameOnTaskBar::MaxFlashCount' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_FlashGameOnTaskBar, FlashFrequencyMilliseconds) == 0x000010, "Member 'VictoryBPFunctionLibrary_FlashGameOnTaskBar::FlashFrequencyMilliseconds' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.GenerateUniqueContentRelativeFileName
// 0x0038 (0x0038 - 0x0000)
struct VictoryBPFunctionLibrary_GenerateUniqueContentRelativeFileName final
{
public:
	class FString                                 ContentRelativeFilePath;                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContentRelativeNewFileName;                        // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AbsolutePath;                                      // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CreateFolderTree;                                  // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_GenerateUniqueContentRelativeFileName) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_GenerateUniqueContentRelativeFileName");
static_assert(sizeof(VictoryBPFunctionLibrary_GenerateUniqueContentRelativeFileName) == 0x000038, "Wrong size on VictoryBPFunctionLibrary_GenerateUniqueContentRelativeFileName");
static_assert(offsetof(VictoryBPFunctionLibrary_GenerateUniqueContentRelativeFileName, ContentRelativeFilePath) == 0x000000, "Member 'VictoryBPFunctionLibrary_GenerateUniqueContentRelativeFileName::ContentRelativeFilePath' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GenerateUniqueContentRelativeFileName, ContentRelativeNewFileName) == 0x000010, "Member 'VictoryBPFunctionLibrary_GenerateUniqueContentRelativeFileName::ContentRelativeNewFileName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GenerateUniqueContentRelativeFileName, AbsolutePath) == 0x000020, "Member 'VictoryBPFunctionLibrary_GenerateUniqueContentRelativeFileName::AbsolutePath' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GenerateUniqueContentRelativeFileName, CreateFolderTree) == 0x000030, "Member 'VictoryBPFunctionLibrary_GenerateUniqueContentRelativeFileName::CreateFolderTree' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GenerateUniqueContentRelativeFileName, ReturnValue) == 0x000031, "Member 'VictoryBPFunctionLibrary_GenerateUniqueContentRelativeFileName::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetAllBoneNamesBelowBone
// 0x0028 (0x0028 - 0x0000)
struct VictoryBPFunctionLibrary_GetAllBoneNamesBelowBone final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComp;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartingBoneName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           BoneNames;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_GetAllBoneNamesBelowBone) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_GetAllBoneNamesBelowBone");
static_assert(sizeof(VictoryBPFunctionLibrary_GetAllBoneNamesBelowBone) == 0x000028, "Wrong size on VictoryBPFunctionLibrary_GetAllBoneNamesBelowBone");
static_assert(offsetof(VictoryBPFunctionLibrary_GetAllBoneNamesBelowBone, SkeletalMeshComp) == 0x000000, "Member 'VictoryBPFunctionLibrary_GetAllBoneNamesBelowBone::SkeletalMeshComp' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetAllBoneNamesBelowBone, StartingBoneName) == 0x000008, "Member 'VictoryBPFunctionLibrary_GetAllBoneNamesBelowBone::StartingBoneName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetAllBoneNamesBelowBone, BoneNames) == 0x000010, "Member 'VictoryBPFunctionLibrary_GetAllBoneNamesBelowBone::BoneNames' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetAllBoneNamesBelowBone, ReturnValue) == 0x000020, "Member 'VictoryBPFunctionLibrary_GetAllBoneNamesBelowBone::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetClosestActorOfClassInRadiusOfActor
// 0x0028 (0x0028 - 0x0000)
struct VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfActor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ActorCenter;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfActor) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfActor");
static_assert(sizeof(VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfActor) == 0x000028, "Wrong size on VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfActor");
static_assert(offsetof(VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfActor, WorldContextObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfActor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfActor, ActorClass) == 0x000008, "Member 'VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfActor::ActorClass' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfActor, ActorCenter) == 0x000010, "Member 'VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfActor::ActorCenter' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfActor, Radius) == 0x000018, "Member 'VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfActor::Radius' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfActor, IsValid) == 0x00001C, "Member 'VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfActor::IsValid' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfActor, ReturnValue) == 0x000020, "Member 'VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfActor::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetClosestActorOfClassInRadiusOfLocation
// 0x0038 (0x0038 - 0x0000)
struct VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfLocation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Center;                                            // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfLocation) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfLocation");
static_assert(sizeof(VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfLocation) == 0x000038, "Wrong size on VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfLocation");
static_assert(offsetof(VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfLocation, WorldContextObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfLocation, ActorClass) == 0x000008, "Member 'VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfLocation::ActorClass' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfLocation, Center) == 0x000010, "Member 'VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfLocation::Center' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfLocation, Radius) == 0x000028, "Member 'VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfLocation::Radius' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfLocation, IsValid) == 0x00002C, "Member 'VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfLocation::IsValid' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfLocation, ReturnValue) == 0x000030, "Member 'VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfLocation::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetFirstWidgetOfClass
// 0x0020 (0x0020 - 0x0000)
struct VictoryBPFunctionLibrary_GetFirstWidgetOfClass final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                WidgetClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TopLevelOnly;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_GetFirstWidgetOfClass) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_GetFirstWidgetOfClass");
static_assert(sizeof(VictoryBPFunctionLibrary_GetFirstWidgetOfClass) == 0x000020, "Wrong size on VictoryBPFunctionLibrary_GetFirstWidgetOfClass");
static_assert(offsetof(VictoryBPFunctionLibrary_GetFirstWidgetOfClass, WorldContextObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_GetFirstWidgetOfClass::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetFirstWidgetOfClass, WidgetClass) == 0x000008, "Member 'VictoryBPFunctionLibrary_GetFirstWidgetOfClass::WidgetClass' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetFirstWidgetOfClass, TopLevelOnly) == 0x000010, "Member 'VictoryBPFunctionLibrary_GetFirstWidgetOfClass::TopLevelOnly' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetFirstWidgetOfClass, ReturnValue) == 0x000018, "Member 'VictoryBPFunctionLibrary_GetFirstWidgetOfClass::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetNamesOfLoadedLevels
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_GetNamesOfLoadedLevels final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         NamesOfLoadedLevels;                               // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_GetNamesOfLoadedLevels) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_GetNamesOfLoadedLevels");
static_assert(sizeof(VictoryBPFunctionLibrary_GetNamesOfLoadedLevels) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_GetNamesOfLoadedLevels");
static_assert(offsetof(VictoryBPFunctionLibrary_GetNamesOfLoadedLevels, WorldContextObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_GetNamesOfLoadedLevels::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetNamesOfLoadedLevels, NamesOfLoadedLevels) == 0x000008, "Member 'VictoryBPFunctionLibrary_GetNamesOfLoadedLevels::NamesOfLoadedLevels' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetObjectPath
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_GetObjectPath final
{
public:
	class UObject*                                Obj;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_GetObjectPath) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_GetObjectPath");
static_assert(sizeof(VictoryBPFunctionLibrary_GetObjectPath) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_GetObjectPath");
static_assert(offsetof(VictoryBPFunctionLibrary_GetObjectPath, Obj) == 0x000000, "Member 'VictoryBPFunctionLibrary_GetObjectPath::Obj' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetObjectPath, ReturnValue) == 0x000008, "Member 'VictoryBPFunctionLibrary_GetObjectPath::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetStaticMeshVertexLocations
// 0x0020 (0x0020 - 0x0000)
struct VictoryBPFunctionLibrary_GetStaticMeshVertexLocations final
{
public:
	class UStaticMeshComponent*                   Comp;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        VertexPositions;                                   // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         LODIndex;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_GetStaticMeshVertexLocations) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_GetStaticMeshVertexLocations");
static_assert(sizeof(VictoryBPFunctionLibrary_GetStaticMeshVertexLocations) == 0x000020, "Wrong size on VictoryBPFunctionLibrary_GetStaticMeshVertexLocations");
static_assert(offsetof(VictoryBPFunctionLibrary_GetStaticMeshVertexLocations, Comp) == 0x000000, "Member 'VictoryBPFunctionLibrary_GetStaticMeshVertexLocations::Comp' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetStaticMeshVertexLocations, VertexPositions) == 0x000008, "Member 'VictoryBPFunctionLibrary_GetStaticMeshVertexLocations::VertexPositions' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetStaticMeshVertexLocations, LODIndex) == 0x000018, "Member 'VictoryBPFunctionLibrary_GetStaticMeshVertexLocations::LODIndex' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetStaticMeshVertexLocations, ReturnValue) == 0x00001C, "Member 'VictoryBPFunctionLibrary_GetStaticMeshVertexLocations::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetUnixTimeStamp
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_GetUnixTimeStamp final
{
public:
	struct FDateTime                              UTCTime;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_GetUnixTimeStamp) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_GetUnixTimeStamp");
static_assert(sizeof(VictoryBPFunctionLibrary_GetUnixTimeStamp) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_GetUnixTimeStamp");
static_assert(offsetof(VictoryBPFunctionLibrary_GetUnixTimeStamp, UTCTime) == 0x000000, "Member 'VictoryBPFunctionLibrary_GetUnixTimeStamp::UTCTime' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetUnixTimeStamp, ReturnValue) == 0x000008, "Member 'VictoryBPFunctionLibrary_GetUnixTimeStamp::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetUTCFromUnixTimeStamp
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_GetUTCFromUnixTimeStamp final
{
public:
	int64                                         UnixTimeStamp;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UTCTime;                                           // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_GetUTCFromUnixTimeStamp) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_GetUTCFromUnixTimeStamp");
static_assert(sizeof(VictoryBPFunctionLibrary_GetUTCFromUnixTimeStamp) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_GetUTCFromUnixTimeStamp");
static_assert(offsetof(VictoryBPFunctionLibrary_GetUTCFromUnixTimeStamp, UnixTimeStamp) == 0x000000, "Member 'VictoryBPFunctionLibrary_GetUTCFromUnixTimeStamp::UnixTimeStamp' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetUTCFromUnixTimeStamp, UTCTime) == 0x000008, "Member 'VictoryBPFunctionLibrary_GetUTCFromUnixTimeStamp::UTCTime' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetWidgetFromName
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_GetWidgetFromName final
{
public:
	class UUserWidget*                            ParentUserWidget;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_GetWidgetFromName) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_GetWidgetFromName");
static_assert(sizeof(VictoryBPFunctionLibrary_GetWidgetFromName) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_GetWidgetFromName");
static_assert(offsetof(VictoryBPFunctionLibrary_GetWidgetFromName, ParentUserWidget) == 0x000000, "Member 'VictoryBPFunctionLibrary_GetWidgetFromName::ParentUserWidget' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetWidgetFromName, Name_0) == 0x000008, "Member 'VictoryBPFunctionLibrary_GetWidgetFromName::Name_0' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetWidgetFromName, ReturnValue) == 0x000010, "Member 'VictoryBPFunctionLibrary_GetWidgetFromName::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.HasSubstring
// 0x0028 (0x0028 - 0x0000)
struct VictoryBPFunctionLibrary_HasSubstring final
{
public:
	class FString                                 SearchIn;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Substring;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESearchCase                                   SearchCase;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESearchDir                                    SearchDir;                                         // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0022(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_HasSubstring) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_HasSubstring");
static_assert(sizeof(VictoryBPFunctionLibrary_HasSubstring) == 0x000028, "Wrong size on VictoryBPFunctionLibrary_HasSubstring");
static_assert(offsetof(VictoryBPFunctionLibrary_HasSubstring, SearchIn) == 0x000000, "Member 'VictoryBPFunctionLibrary_HasSubstring::SearchIn' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_HasSubstring, Substring) == 0x000010, "Member 'VictoryBPFunctionLibrary_HasSubstring::Substring' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_HasSubstring, SearchCase) == 0x000020, "Member 'VictoryBPFunctionLibrary_HasSubstring::SearchCase' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_HasSubstring, SearchDir) == 0x000021, "Member 'VictoryBPFunctionLibrary_HasSubstring::SearchDir' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_HasSubstring, ReturnValue) == 0x000022, "Member 'VictoryBPFunctionLibrary_HasSubstring::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.IsAlphaNumeric
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_IsAlphaNumeric final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_IsAlphaNumeric) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_IsAlphaNumeric");
static_assert(sizeof(VictoryBPFunctionLibrary_IsAlphaNumeric) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_IsAlphaNumeric");
static_assert(offsetof(VictoryBPFunctionLibrary_IsAlphaNumeric, String) == 0x000000, "Member 'VictoryBPFunctionLibrary_IsAlphaNumeric::String' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_IsAlphaNumeric, ReturnValue) == 0x000010, "Member 'VictoryBPFunctionLibrary_IsAlphaNumeric::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.IsWidgetOfClassInViewport
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_IsWidgetOfClassInViewport final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                WidgetClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_IsWidgetOfClassInViewport) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_IsWidgetOfClassInViewport");
static_assert(sizeof(VictoryBPFunctionLibrary_IsWidgetOfClassInViewport) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_IsWidgetOfClassInViewport");
static_assert(offsetof(VictoryBPFunctionLibrary_IsWidgetOfClassInViewport, WorldContextObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_IsWidgetOfClassInViewport::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_IsWidgetOfClassInViewport, WidgetClass) == 0x000008, "Member 'VictoryBPFunctionLibrary_IsWidgetOfClassInViewport::WidgetClass' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_IsWidgetOfClassInViewport, ReturnValue) == 0x000010, "Member 'VictoryBPFunctionLibrary_IsWidgetOfClassInViewport::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.LoadObjectFromAssetPath
// 0x0020 (0x0020 - 0x0000)
struct VictoryBPFunctionLibrary_LoadObjectFromAssetPath final
{
public:
	TSubclassOf<class UObject>                    ObjectClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Path;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_LoadObjectFromAssetPath) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_LoadObjectFromAssetPath");
static_assert(sizeof(VictoryBPFunctionLibrary_LoadObjectFromAssetPath) == 0x000020, "Wrong size on VictoryBPFunctionLibrary_LoadObjectFromAssetPath");
static_assert(offsetof(VictoryBPFunctionLibrary_LoadObjectFromAssetPath, ObjectClass) == 0x000000, "Member 'VictoryBPFunctionLibrary_LoadObjectFromAssetPath::ObjectClass' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_LoadObjectFromAssetPath, Path) == 0x000008, "Member 'VictoryBPFunctionLibrary_LoadObjectFromAssetPath::Path' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_LoadObjectFromAssetPath, IsValid) == 0x000010, "Member 'VictoryBPFunctionLibrary_LoadObjectFromAssetPath::IsValid' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_LoadObjectFromAssetPath, ReturnValue) == 0x000018, "Member 'VictoryBPFunctionLibrary_LoadObjectFromAssetPath::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.LoadStringArrayFromFile
// 0x0030 (0x0030 - 0x0000)
struct VictoryBPFunctionLibrary_LoadStringArrayFromFile final
{
public:
	TArray<class FString>                         StringArray;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ArraySize;                                         // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FullFilePath;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExcludeEmptyLines;                                 // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_LoadStringArrayFromFile) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_LoadStringArrayFromFile");
static_assert(sizeof(VictoryBPFunctionLibrary_LoadStringArrayFromFile) == 0x000030, "Wrong size on VictoryBPFunctionLibrary_LoadStringArrayFromFile");
static_assert(offsetof(VictoryBPFunctionLibrary_LoadStringArrayFromFile, StringArray) == 0x000000, "Member 'VictoryBPFunctionLibrary_LoadStringArrayFromFile::StringArray' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_LoadStringArrayFromFile, ArraySize) == 0x000010, "Member 'VictoryBPFunctionLibrary_LoadStringArrayFromFile::ArraySize' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_LoadStringArrayFromFile, FullFilePath) == 0x000018, "Member 'VictoryBPFunctionLibrary_LoadStringArrayFromFile::FullFilePath' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_LoadStringArrayFromFile, ExcludeEmptyLines) == 0x000028, "Member 'VictoryBPFunctionLibrary_LoadStringArrayFromFile::ExcludeEmptyLines' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_LoadStringArrayFromFile, ReturnValue) == 0x000029, "Member 'VictoryBPFunctionLibrary_LoadStringArrayFromFile::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.LoadStringFromFile
// 0x0028 (0x0028 - 0x0000)
struct VictoryBPFunctionLibrary_LoadStringFromFile final
{
public:
	class FString                                 Result;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FullFilePath;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_LoadStringFromFile) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_LoadStringFromFile");
static_assert(sizeof(VictoryBPFunctionLibrary_LoadStringFromFile) == 0x000028, "Wrong size on VictoryBPFunctionLibrary_LoadStringFromFile");
static_assert(offsetof(VictoryBPFunctionLibrary_LoadStringFromFile, Result) == 0x000000, "Member 'VictoryBPFunctionLibrary_LoadStringFromFile::Result' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_LoadStringFromFile, FullFilePath) == 0x000010, "Member 'VictoryBPFunctionLibrary_LoadStringFromFile::FullFilePath' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_LoadStringFromFile, ReturnValue) == 0x000020, "Member 'VictoryBPFunctionLibrary_LoadStringFromFile::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Open_URL_In_Web_Browser
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_Open_URL_In_Web_Browser final
{
public:
	class FString                                 TheURL;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_Open_URL_In_Web_Browser) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Open_URL_In_Web_Browser");
static_assert(sizeof(VictoryBPFunctionLibrary_Open_URL_In_Web_Browser) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_Open_URL_In_Web_Browser");
static_assert(offsetof(VictoryBPFunctionLibrary_Open_URL_In_Web_Browser, TheURL) == 0x000000, "Member 'VictoryBPFunctionLibrary_Open_URL_In_Web_Browser::TheURL' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.RealWorldTime__GetCurrentOSTime
// 0x0030 (0x0030 - 0x0000)
struct VictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime final
{
public:
	int32                                         Milliseconds;                                      // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Seconds;                                           // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minutes;                                           // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Hours12;                                           // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Hours24;                                           // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Day;                                               // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Month;                                             // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Year;                                              // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime");
static_assert(sizeof(VictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime) == 0x000030, "Wrong size on VictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime");
static_assert(offsetof(VictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime, Milliseconds) == 0x000000, "Member 'VictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime::Milliseconds' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime, Seconds) == 0x000004, "Member 'VictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime::Seconds' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime, Minutes) == 0x000008, "Member 'VictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime::Minutes' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime, Hours12) == 0x00000C, "Member 'VictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime::Hours12' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime, Hours24) == 0x000010, "Member 'VictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime::Hours24' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime, Day) == 0x000014, "Member 'VictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime::Day' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime, Month) == 0x000018, "Member 'VictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime::Month' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime, Year) == 0x00001C, "Member 'VictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime::Year' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime, ReturnValue) == 0x000020, "Member 'VictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.RealWorldTime__GetTimePassedSincePreviousTime
// 0x0020 (0x0020 - 0x0000)
struct VictoryBPFunctionLibrary_RealWorldTime__GetTimePassedSincePreviousTime final
{
public:
	class FString                                 PreviousTime;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Milliseconds;                                      // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Seconds;                                           // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Minutes;                                           // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Hours;                                             // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_RealWorldTime__GetTimePassedSincePreviousTime) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_RealWorldTime__GetTimePassedSincePreviousTime");
static_assert(sizeof(VictoryBPFunctionLibrary_RealWorldTime__GetTimePassedSincePreviousTime) == 0x000020, "Wrong size on VictoryBPFunctionLibrary_RealWorldTime__GetTimePassedSincePreviousTime");
static_assert(offsetof(VictoryBPFunctionLibrary_RealWorldTime__GetTimePassedSincePreviousTime, PreviousTime) == 0x000000, "Member 'VictoryBPFunctionLibrary_RealWorldTime__GetTimePassedSincePreviousTime::PreviousTime' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_RealWorldTime__GetTimePassedSincePreviousTime, Milliseconds) == 0x000010, "Member 'VictoryBPFunctionLibrary_RealWorldTime__GetTimePassedSincePreviousTime::Milliseconds' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_RealWorldTime__GetTimePassedSincePreviousTime, Seconds) == 0x000014, "Member 'VictoryBPFunctionLibrary_RealWorldTime__GetTimePassedSincePreviousTime::Seconds' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_RealWorldTime__GetTimePassedSincePreviousTime, Minutes) == 0x000018, "Member 'VictoryBPFunctionLibrary_RealWorldTime__GetTimePassedSincePreviousTime::Minutes' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_RealWorldTime__GetTimePassedSincePreviousTime, Hours) == 0x00001C, "Member 'VictoryBPFunctionLibrary_RealWorldTime__GetTimePassedSincePreviousTime::Hours' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.RemoveAllWidgetsOfClass
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_RemoveAllWidgetsOfClass final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                WidgetClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_RemoveAllWidgetsOfClass) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_RemoveAllWidgetsOfClass");
static_assert(sizeof(VictoryBPFunctionLibrary_RemoveAllWidgetsOfClass) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_RemoveAllWidgetsOfClass");
static_assert(offsetof(VictoryBPFunctionLibrary_RemoveAllWidgetsOfClass, WorldContextObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_RemoveAllWidgetsOfClass::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_RemoveAllWidgetsOfClass, WidgetClass) == 0x000008, "Member 'VictoryBPFunctionLibrary_RemoveAllWidgetsOfClass::WidgetClass' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.SaveGameObject_GetAllSaveSlotFileNames
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_SaveGameObject_GetAllSaveSlotFileNames final
{
public:
	TArray<class FString>                         FileNames;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_SaveGameObject_GetAllSaveSlotFileNames) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_SaveGameObject_GetAllSaveSlotFileNames");
static_assert(sizeof(VictoryBPFunctionLibrary_SaveGameObject_GetAllSaveSlotFileNames) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_SaveGameObject_GetAllSaveSlotFileNames");
static_assert(offsetof(VictoryBPFunctionLibrary_SaveGameObject_GetAllSaveSlotFileNames, FileNames) == 0x000000, "Member 'VictoryBPFunctionLibrary_SaveGameObject_GetAllSaveSlotFileNames::FileNames' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.ServerTravel
// 0x0020 (0x0020 - 0x0000)
struct VictoryBPFunctionLibrary_ServerTravel final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapName;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipNotifyPlayers;                                // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_ServerTravel) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_ServerTravel");
static_assert(sizeof(VictoryBPFunctionLibrary_ServerTravel) == 0x000020, "Wrong size on VictoryBPFunctionLibrary_ServerTravel");
static_assert(offsetof(VictoryBPFunctionLibrary_ServerTravel, WorldContextObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_ServerTravel::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_ServerTravel, MapName) == 0x000008, "Member 'VictoryBPFunctionLibrary_ServerTravel::MapName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_ServerTravel, bSkipNotifyPlayers) == 0x000018, "Member 'VictoryBPFunctionLibrary_ServerTravel::bSkipNotifyPlayers' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.String__CombineStrings
// 0x0060 (0x0060 - 0x0000)
struct VictoryBPFunctionLibrary_String__CombineStrings final
{
public:
	class FString                                 StringFirst;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringSecond;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Separator;                                         // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringFirstLabel;                                  // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringSecondLabel;                                 // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_String__CombineStrings) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_String__CombineStrings");
static_assert(sizeof(VictoryBPFunctionLibrary_String__CombineStrings) == 0x000060, "Wrong size on VictoryBPFunctionLibrary_String__CombineStrings");
static_assert(offsetof(VictoryBPFunctionLibrary_String__CombineStrings, StringFirst) == 0x000000, "Member 'VictoryBPFunctionLibrary_String__CombineStrings::StringFirst' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_String__CombineStrings, StringSecond) == 0x000010, "Member 'VictoryBPFunctionLibrary_String__CombineStrings::StringSecond' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_String__CombineStrings, Separator) == 0x000020, "Member 'VictoryBPFunctionLibrary_String__CombineStrings::Separator' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_String__CombineStrings, StringFirstLabel) == 0x000030, "Member 'VictoryBPFunctionLibrary_String__CombineStrings::StringFirstLabel' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_String__CombineStrings, StringSecondLabel) == 0x000040, "Member 'VictoryBPFunctionLibrary_String__CombineStrings::StringSecondLabel' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_String__CombineStrings, ReturnValue) == 0x000050, "Member 'VictoryBPFunctionLibrary_String__CombineStrings::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.String__CombineStrings_Multi
// 0x0030 (0x0030 - 0x0000)
struct VictoryBPFunctionLibrary_String__CombineStrings_Multi final
{
public:
	class FString                                 A;                                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 B;                                                 // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_String__CombineStrings_Multi) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_String__CombineStrings_Multi");
static_assert(sizeof(VictoryBPFunctionLibrary_String__CombineStrings_Multi) == 0x000030, "Wrong size on VictoryBPFunctionLibrary_String__CombineStrings_Multi");
static_assert(offsetof(VictoryBPFunctionLibrary_String__CombineStrings_Multi, A) == 0x000000, "Member 'VictoryBPFunctionLibrary_String__CombineStrings_Multi::A' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_String__CombineStrings_Multi, B) == 0x000010, "Member 'VictoryBPFunctionLibrary_String__CombineStrings_Multi::B' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_String__CombineStrings_Multi, ReturnValue) == 0x000020, "Member 'VictoryBPFunctionLibrary_String__CombineStrings_Multi::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.StringIsEmpty
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_StringIsEmpty final
{
public:
	class FString                                 Target;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_StringIsEmpty) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_StringIsEmpty");
static_assert(sizeof(VictoryBPFunctionLibrary_StringIsEmpty) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_StringIsEmpty");
static_assert(offsetof(VictoryBPFunctionLibrary_StringIsEmpty, Target) == 0x000000, "Member 'VictoryBPFunctionLibrary_StringIsEmpty::Target' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_StringIsEmpty, ReturnValue) == 0x000010, "Member 'VictoryBPFunctionLibrary_StringIsEmpty::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Text_IsNumeric
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_Text_IsNumeric final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Text_IsNumeric) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Text_IsNumeric");
static_assert(sizeof(VictoryBPFunctionLibrary_Text_IsNumeric) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_Text_IsNumeric");
static_assert(offsetof(VictoryBPFunctionLibrary_Text_IsNumeric, Text) == 0x000000, "Member 'VictoryBPFunctionLibrary_Text_IsNumeric::Text' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Text_IsNumeric, ReturnValue) == 0x000010, "Member 'VictoryBPFunctionLibrary_Text_IsNumeric::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Text_ToFloat
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_Text_ToFloat final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          UseDotForThousands;                                // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_Text_ToFloat) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Text_ToFloat");
static_assert(sizeof(VictoryBPFunctionLibrary_Text_ToFloat) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_Text_ToFloat");
static_assert(offsetof(VictoryBPFunctionLibrary_Text_ToFloat, Text) == 0x000000, "Member 'VictoryBPFunctionLibrary_Text_ToFloat::Text' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Text_ToFloat, UseDotForThousands) == 0x000010, "Member 'VictoryBPFunctionLibrary_Text_ToFloat::UseDotForThousands' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Text_ToFloat, ReturnValue) == 0x000014, "Member 'VictoryBPFunctionLibrary_Text_ToFloat::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Text_ToInt
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_Text_ToInt final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          UseDotForThousands;                                // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_Text_ToInt) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Text_ToInt");
static_assert(sizeof(VictoryBPFunctionLibrary_Text_ToInt) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_Text_ToInt");
static_assert(offsetof(VictoryBPFunctionLibrary_Text_ToInt, Text) == 0x000000, "Member 'VictoryBPFunctionLibrary_Text_ToInt::Text' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Text_ToInt, UseDotForThousands) == 0x000010, "Member 'VictoryBPFunctionLibrary_Text_ToInt::UseDotForThousands' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Text_ToInt, ReturnValue) == 0x000014, "Member 'VictoryBPFunctionLibrary_Text_ToInt::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.UTCToLocal
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_UTCToLocal final
{
public:
	struct FDateTime                              UTCTime;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              LocalTime;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_UTCToLocal) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_UTCToLocal");
static_assert(sizeof(VictoryBPFunctionLibrary_UTCToLocal) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_UTCToLocal");
static_assert(offsetof(VictoryBPFunctionLibrary_UTCToLocal, UTCTime) == 0x000000, "Member 'VictoryBPFunctionLibrary_UTCToLocal::UTCTime' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_UTCToLocal, LocalTime) == 0x000008, "Member 'VictoryBPFunctionLibrary_UTCToLocal::LocalTime' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Victory_Get_Pixel
// 0x0030 (0x0030 - 0x0000)
struct VictoryBPFunctionLibrary_Victory_Get_Pixel final
{
public:
	TArray<struct FLinearColor>                   Pixels;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ImageHeight;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         X;                                                 // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FoundColor;                                        // 0x001C(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Victory_Get_Pixel) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Victory_Get_Pixel");
static_assert(sizeof(VictoryBPFunctionLibrary_Victory_Get_Pixel) == 0x000030, "Wrong size on VictoryBPFunctionLibrary_Victory_Get_Pixel");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_Get_Pixel, Pixels) == 0x000000, "Member 'VictoryBPFunctionLibrary_Victory_Get_Pixel::Pixels' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_Get_Pixel, ImageHeight) == 0x000010, "Member 'VictoryBPFunctionLibrary_Victory_Get_Pixel::ImageHeight' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_Get_Pixel, X) == 0x000014, "Member 'VictoryBPFunctionLibrary_Victory_Get_Pixel::X' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_Get_Pixel, Y) == 0x000018, "Member 'VictoryBPFunctionLibrary_Victory_Get_Pixel::Y' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_Get_Pixel, FoundColor) == 0x00001C, "Member 'VictoryBPFunctionLibrary_Victory_Get_Pixel::FoundColor' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_Get_Pixel, ReturnValue) == 0x00002C, "Member 'VictoryBPFunctionLibrary_Victory_Get_Pixel::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Victory_GetFiles
// 0x0038 (0x0038 - 0x0000)
struct VictoryBPFunctionLibrary_Victory_GetFiles final
{
public:
	TArray<class FString>                         Files;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 RootFolderFullPath;                                // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ext;                                               // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Victory_GetFiles) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Victory_GetFiles");
static_assert(sizeof(VictoryBPFunctionLibrary_Victory_GetFiles) == 0x000038, "Wrong size on VictoryBPFunctionLibrary_Victory_GetFiles");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_GetFiles, Files) == 0x000000, "Member 'VictoryBPFunctionLibrary_Victory_GetFiles::Files' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_GetFiles, RootFolderFullPath) == 0x000010, "Member 'VictoryBPFunctionLibrary_Victory_GetFiles::RootFolderFullPath' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_GetFiles, Ext) == 0x000020, "Member 'VictoryBPFunctionLibrary_Victory_GetFiles::Ext' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_GetFiles, ReturnValue) == 0x000030, "Member 'VictoryBPFunctionLibrary_Victory_GetFiles::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Victory_GetFilesInRootAndAllSubFolders
// 0x0038 (0x0038 - 0x0000)
struct VictoryBPFunctionLibrary_Victory_GetFilesInRootAndAllSubFolders final
{
public:
	TArray<class FString>                         Files;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 RootFolderFullPath;                                // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ext;                                               // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Victory_GetFilesInRootAndAllSubFolders) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Victory_GetFilesInRootAndAllSubFolders");
static_assert(sizeof(VictoryBPFunctionLibrary_Victory_GetFilesInRootAndAllSubFolders) == 0x000038, "Wrong size on VictoryBPFunctionLibrary_Victory_GetFilesInRootAndAllSubFolders");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_GetFilesInRootAndAllSubFolders, Files) == 0x000000, "Member 'VictoryBPFunctionLibrary_Victory_GetFilesInRootAndAllSubFolders::Files' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_GetFilesInRootAndAllSubFolders, RootFolderFullPath) == 0x000010, "Member 'VictoryBPFunctionLibrary_Victory_GetFilesInRootAndAllSubFolders::RootFolderFullPath' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_GetFilesInRootAndAllSubFolders, Ext) == 0x000020, "Member 'VictoryBPFunctionLibrary_Victory_GetFilesInRootAndAllSubFolders::Ext' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_GetFilesInRootAndAllSubFolders, ReturnValue) == 0x000030, "Member 'VictoryBPFunctionLibrary_Victory_GetFilesInRootAndAllSubFolders::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Victory_GetFileTimeStamp
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_Victory_GetFileTimeStamp final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_Victory_GetFileTimeStamp) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Victory_GetFileTimeStamp");
static_assert(sizeof(VictoryBPFunctionLibrary_Victory_GetFileTimeStamp) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_Victory_GetFileTimeStamp");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_GetFileTimeStamp, File) == 0x000000, "Member 'VictoryBPFunctionLibrary_Victory_GetFileTimeStamp::File' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_GetFileTimeStamp, ReturnValue) == 0x000010, "Member 'VictoryBPFunctionLibrary_Victory_GetFileTimeStamp::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Victory_GetPixelFromT2D
// 0x0028 (0x0028 - 0x0000)
struct VictoryBPFunctionLibrary_Victory_GetPixelFromT2D final
{
public:
	class UTexture2D*                             T2D;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         X;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           PixelColor;                                        // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Victory_GetPixelFromT2D) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Victory_GetPixelFromT2D");
static_assert(sizeof(VictoryBPFunctionLibrary_Victory_GetPixelFromT2D) == 0x000028, "Wrong size on VictoryBPFunctionLibrary_Victory_GetPixelFromT2D");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_GetPixelFromT2D, T2D) == 0x000000, "Member 'VictoryBPFunctionLibrary_Victory_GetPixelFromT2D::T2D' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_GetPixelFromT2D, X) == 0x000008, "Member 'VictoryBPFunctionLibrary_Victory_GetPixelFromT2D::X' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_GetPixelFromT2D, Y) == 0x00000C, "Member 'VictoryBPFunctionLibrary_Victory_GetPixelFromT2D::Y' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_GetPixelFromT2D, PixelColor) == 0x000010, "Member 'VictoryBPFunctionLibrary_Victory_GetPixelFromT2D::PixelColor' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_GetPixelFromT2D, ReturnValue) == 0x000020, "Member 'VictoryBPFunctionLibrary_Victory_GetPixelFromT2D::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Victory_GetPixelsArrayFromT2D
// 0x0028 (0x0028 - 0x0000)
struct VictoryBPFunctionLibrary_Victory_GetPixelsArrayFromT2D final
{
public:
	class UTexture2D*                             T2D;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TextureWidth;                                      // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TextureHeight;                                     // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                   PixelArray;                                        // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Victory_GetPixelsArrayFromT2D) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Victory_GetPixelsArrayFromT2D");
static_assert(sizeof(VictoryBPFunctionLibrary_Victory_GetPixelsArrayFromT2D) == 0x000028, "Wrong size on VictoryBPFunctionLibrary_Victory_GetPixelsArrayFromT2D");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_GetPixelsArrayFromT2D, T2D) == 0x000000, "Member 'VictoryBPFunctionLibrary_Victory_GetPixelsArrayFromT2D::T2D' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_GetPixelsArrayFromT2D, TextureWidth) == 0x000008, "Member 'VictoryBPFunctionLibrary_Victory_GetPixelsArrayFromT2D::TextureWidth' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_GetPixelsArrayFromT2D, TextureHeight) == 0x00000C, "Member 'VictoryBPFunctionLibrary_Victory_GetPixelsArrayFromT2D::TextureHeight' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_GetPixelsArrayFromT2D, PixelArray) == 0x000010, "Member 'VictoryBPFunctionLibrary_Victory_GetPixelsArrayFromT2D::PixelArray' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_GetPixelsArrayFromT2D, ReturnValue) == 0x000020, "Member 'VictoryBPFunctionLibrary_Victory_GetPixelsArrayFromT2D::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Victory_GetStringFromOSClipboard
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_Victory_GetStringFromOSClipboard final
{
public:
	class FString                                 FromClipboard;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_Victory_GetStringFromOSClipboard) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Victory_GetStringFromOSClipboard");
static_assert(sizeof(VictoryBPFunctionLibrary_Victory_GetStringFromOSClipboard) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_Victory_GetStringFromOSClipboard");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_GetStringFromOSClipboard, FromClipboard) == 0x000000, "Member 'VictoryBPFunctionLibrary_Victory_GetStringFromOSClipboard::FromClipboard' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Victory_LoadTexture2D_FromFile
// 0x0028 (0x0028 - 0x0000)
struct VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile final
{
public:
	class FString                                 FullFilePath;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Width;                                             // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile");
static_assert(sizeof(VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile) == 0x000028, "Wrong size on VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile, FullFilePath) == 0x000000, "Member 'VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile::FullFilePath' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile, IsValid) == 0x000010, "Member 'VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile::IsValid' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile, Width) == 0x000014, "Member 'VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile::Width' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile, Height) == 0x000018, "Member 'VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile::Height' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile, ReturnValue) == 0x000020, "Member 'VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Victory_LoadTexture2D_FromFile_Pixels
// 0x0038 (0x0038 - 0x0000)
struct VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile_Pixels final
{
public:
	class FString                                 FullFilePath;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJoyImageFormats                              ImageFormat;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Width;                                             // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLinearColor>                   OutPixels;                                         // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile_Pixels) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile_Pixels");
static_assert(sizeof(VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile_Pixels) == 0x000038, "Wrong size on VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile_Pixels");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile_Pixels, FullFilePath) == 0x000000, "Member 'VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile_Pixels::FullFilePath' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile_Pixels, ImageFormat) == 0x000010, "Member 'VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile_Pixels::ImageFormat' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile_Pixels, IsValid) == 0x000011, "Member 'VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile_Pixels::IsValid' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile_Pixels, Width) == 0x000014, "Member 'VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile_Pixels::Width' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile_Pixels, Height) == 0x000018, "Member 'VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile_Pixels::Height' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile_Pixels, OutPixels) == 0x000020, "Member 'VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile_Pixels::OutPixels' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile_Pixels, ReturnValue) == 0x000030, "Member 'VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile_Pixels::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Victory_LoadTexture2D_FromFileByExtension
// 0x0028 (0x0028 - 0x0000)
struct VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFileByExtension final
{
public:
	class FString                                 FullFilePath;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJoyImageFormats                              ImageFormat;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Width;                                             // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFileByExtension) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFileByExtension");
static_assert(sizeof(VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFileByExtension) == 0x000028, "Wrong size on VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFileByExtension");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFileByExtension, FullFilePath) == 0x000000, "Member 'VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFileByExtension::FullFilePath' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFileByExtension, ImageFormat) == 0x000010, "Member 'VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFileByExtension::ImageFormat' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFileByExtension, IsValid) == 0x000011, "Member 'VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFileByExtension::IsValid' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFileByExtension, Width) == 0x000014, "Member 'VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFileByExtension::Width' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFileByExtension, Height) == 0x000018, "Member 'VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFileByExtension::Height' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFileByExtension, ReturnValue) == 0x000020, "Member 'VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFileByExtension::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Victory_SavePixels
// 0x0048 (0x0048 - 0x0000)
struct VictoryBPFunctionLibrary_Victory_SavePixels final
{
public:
	class FString                                 FullFilePath;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                   ImagePixels;                                       // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          SaveAsBMP;                                         // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SRGB;                                              // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorString;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Victory_SavePixels) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Victory_SavePixels");
static_assert(sizeof(VictoryBPFunctionLibrary_Victory_SavePixels) == 0x000048, "Wrong size on VictoryBPFunctionLibrary_Victory_SavePixels");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_SavePixels, FullFilePath) == 0x000000, "Member 'VictoryBPFunctionLibrary_Victory_SavePixels::FullFilePath' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_SavePixels, Width) == 0x000010, "Member 'VictoryBPFunctionLibrary_Victory_SavePixels::Width' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_SavePixels, Height) == 0x000014, "Member 'VictoryBPFunctionLibrary_Victory_SavePixels::Height' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_SavePixels, ImagePixels) == 0x000018, "Member 'VictoryBPFunctionLibrary_Victory_SavePixels::ImagePixels' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_SavePixels, SaveAsBMP) == 0x000028, "Member 'VictoryBPFunctionLibrary_Victory_SavePixels::SaveAsBMP' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_SavePixels, SRGB) == 0x000029, "Member 'VictoryBPFunctionLibrary_Victory_SavePixels::SRGB' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_SavePixels, ErrorString) == 0x000030, "Member 'VictoryBPFunctionLibrary_Victory_SavePixels::ErrorString' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_SavePixels, ReturnValue) == 0x000040, "Member 'VictoryBPFunctionLibrary_Victory_SavePixels::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Victory_SaveStringToOSClipboard
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_Victory_SaveStringToOSClipboard final
{
public:
	class FString                                 ToClipboard;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_Victory_SaveStringToOSClipboard) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Victory_SaveStringToOSClipboard");
static_assert(sizeof(VictoryBPFunctionLibrary_Victory_SaveStringToOSClipboard) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_Victory_SaveStringToOSClipboard");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_SaveStringToOSClipboard, ToClipboard) == 0x000000, "Member 'VictoryBPFunctionLibrary_Victory_SaveStringToOSClipboard::ToClipboard' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Victory_SetTimeStamp
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_Victory_SetTimeStamp final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Timestamp;                                         // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_Victory_SetTimeStamp) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Victory_SetTimeStamp");
static_assert(sizeof(VictoryBPFunctionLibrary_Victory_SetTimeStamp) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_Victory_SetTimeStamp");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_SetTimeStamp, File) == 0x000000, "Member 'VictoryBPFunctionLibrary_Victory_SetTimeStamp::File' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_SetTimeStamp, Timestamp) == 0x000010, "Member 'VictoryBPFunctionLibrary_Victory_SetTimeStamp::Timestamp' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryCreateProc
// 0x0048 (0x0048 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryCreateProc final
{
public:
	int32                                         ProcessId;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FullPathOfProgramToRun;                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         CommandlineArgs;                                   // 0x0018(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Detach;                                            // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Hidden;                                            // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Priority;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OptionalWorkingDirectory;                          // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URamaVictoryPluginCreateProcessPipe*    ReadPipeObject;                                    // 0x0040(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryCreateProc) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryCreateProc");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryCreateProc) == 0x000048, "Wrong size on VictoryBPFunctionLibrary_VictoryCreateProc");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryCreateProc, ProcessId) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryCreateProc::ProcessId' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryCreateProc, FullPathOfProgramToRun) == 0x000008, "Member 'VictoryBPFunctionLibrary_VictoryCreateProc::FullPathOfProgramToRun' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryCreateProc, CommandlineArgs) == 0x000018, "Member 'VictoryBPFunctionLibrary_VictoryCreateProc::CommandlineArgs' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryCreateProc, Detach) == 0x000028, "Member 'VictoryBPFunctionLibrary_VictoryCreateProc::Detach' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryCreateProc, Hidden) == 0x000029, "Member 'VictoryBPFunctionLibrary_VictoryCreateProc::Hidden' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryCreateProc, Priority) == 0x00002C, "Member 'VictoryBPFunctionLibrary_VictoryCreateProc::Priority' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryCreateProc, OptionalWorkingDirectory) == 0x000030, "Member 'VictoryBPFunctionLibrary_VictoryCreateProc::OptionalWorkingDirectory' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryCreateProc, ReadPipeObject) == 0x000040, "Member 'VictoryBPFunctionLibrary_VictoryCreateProc::ReadPipeObject' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryFloatMinusEquals
// 0x000C (0x000C - 0x0000)
struct VictoryBPFunctionLibrary_VictoryFloatMinusEquals final
{
public:
	float                                         Float;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Sub;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatOut;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryFloatMinusEquals) == 0x000004, "Wrong alignment on VictoryBPFunctionLibrary_VictoryFloatMinusEquals");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryFloatMinusEquals) == 0x00000C, "Wrong size on VictoryBPFunctionLibrary_VictoryFloatMinusEquals");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryFloatMinusEquals, Float) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryFloatMinusEquals::Float' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryFloatMinusEquals, Sub) == 0x000004, "Member 'VictoryBPFunctionLibrary_VictoryFloatMinusEquals::Sub' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryFloatMinusEquals, FloatOut) == 0x000008, "Member 'VictoryBPFunctionLibrary_VictoryFloatMinusEquals::FloatOut' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryFloatPlusEquals
// 0x000C (0x000C - 0x0000)
struct VictoryBPFunctionLibrary_VictoryFloatPlusEquals final
{
public:
	float                                         Float;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Add;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatOut;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryFloatPlusEquals) == 0x000004, "Wrong alignment on VictoryBPFunctionLibrary_VictoryFloatPlusEquals");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryFloatPlusEquals) == 0x00000C, "Wrong size on VictoryBPFunctionLibrary_VictoryFloatPlusEquals");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryFloatPlusEquals, Float) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryFloatPlusEquals::Float' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryFloatPlusEquals, Add) == 0x000004, "Member 'VictoryBPFunctionLibrary_VictoryFloatPlusEquals::Add' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryFloatPlusEquals, FloatOut) == 0x000008, "Member 'VictoryBPFunctionLibrary_VictoryFloatPlusEquals::FloatOut' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryGetApplicationName
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryGetApplicationName final
{
public:
	int32                                         ProcessId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryGetApplicationName) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryGetApplicationName");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryGetApplicationName) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_VictoryGetApplicationName");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetApplicationName, ProcessId) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryGetApplicationName::ProcessId' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetApplicationName, ReturnValue) == 0x000008, "Member 'VictoryBPFunctionLibrary_VictoryGetApplicationName::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryGetCustomConfigVar_Bool
// 0x0028 (0x0028 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Bool final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Bool) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Bool");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Bool) == 0x000028, "Wrong size on VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Bool");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Bool, SectionName) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Bool::SectionName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Bool, VariableName) == 0x000010, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Bool::VariableName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Bool, IsValid) == 0x000020, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Bool::IsValid' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Bool, ReturnValue) == 0x000021, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Bool::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryGetCustomConfigVar_Color
// 0x0038 (0x0038 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Color final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ReturnValue;                                       // 0x0024(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Color) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Color");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Color) == 0x000038, "Wrong size on VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Color");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Color, SectionName) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Color::SectionName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Color, VariableName) == 0x000010, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Color::VariableName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Color, IsValid) == 0x000020, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Color::IsValid' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Color, ReturnValue) == 0x000024, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Color::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryGetCustomConfigVar_Float
// 0x0028 (0x0028 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Float final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Float) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Float");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Float) == 0x000028, "Wrong size on VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Float");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Float, SectionName) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Float::SectionName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Float, VariableName) == 0x000010, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Float::VariableName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Float, IsValid) == 0x000020, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Float::IsValid' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Float, ReturnValue) == 0x000024, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Float::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryGetCustomConfigVar_Int
// 0x0028 (0x0028 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Int final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Int) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Int");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Int) == 0x000028, "Wrong size on VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Int");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Int, SectionName) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Int::SectionName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Int, VariableName) == 0x000010, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Int::VariableName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Int, IsValid) == 0x000020, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Int::IsValid' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Int, ReturnValue) == 0x000024, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Int::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryGetCustomConfigVar_Rotator
// 0x0040 (0x0040 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Rotator final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               ReturnValue;                                       // 0x0028(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Rotator) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Rotator");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Rotator) == 0x000040, "Wrong size on VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Rotator");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Rotator, SectionName) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Rotator::SectionName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Rotator, VariableName) == 0x000010, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Rotator::VariableName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Rotator, IsValid) == 0x000020, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Rotator::IsValid' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Rotator, ReturnValue) == 0x000028, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Rotator::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryGetCustomConfigVar_String
// 0x0038 (0x0038 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_String final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_String) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_String");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_String) == 0x000038, "Wrong size on VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_String");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_String, SectionName) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_String::SectionName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_String, VariableName) == 0x000010, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_String::VariableName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_String, IsValid) == 0x000020, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_String::IsValid' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_String, ReturnValue) == 0x000028, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_String::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryGetCustomConfigVar_Vector
// 0x0040 (0x0040 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0028(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector) == 0x000040, "Wrong size on VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector, SectionName) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector::SectionName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector, VariableName) == 0x000010, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector::VariableName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector, IsValid) == 0x000020, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector::IsValid' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector, ReturnValue) == 0x000028, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryGetCustomConfigVar_Vector2D
// 0x0038 (0x0038 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector2D final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector2D) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector2D");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector2D) == 0x000038, "Wrong size on VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector2D");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector2D, SectionName) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector2D::SectionName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector2D, VariableName) == 0x000010, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector2D::VariableName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector2D, IsValid) == 0x000020, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector2D::IsValid' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector2D, ReturnValue) == 0x000028, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector2D::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryIntMinusEquals
// 0x000C (0x000C - 0x0000)
struct VictoryBPFunctionLibrary_VictoryIntMinusEquals final
{
public:
	int32                                         Int;                                               // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Sub;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntOut;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryIntMinusEquals) == 0x000004, "Wrong alignment on VictoryBPFunctionLibrary_VictoryIntMinusEquals");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryIntMinusEquals) == 0x00000C, "Wrong size on VictoryBPFunctionLibrary_VictoryIntMinusEquals");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryIntMinusEquals, Int) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryIntMinusEquals::Int' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryIntMinusEquals, Sub) == 0x000004, "Member 'VictoryBPFunctionLibrary_VictoryIntMinusEquals::Sub' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryIntMinusEquals, IntOut) == 0x000008, "Member 'VictoryBPFunctionLibrary_VictoryIntMinusEquals::IntOut' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryIntPlusEquals
// 0x000C (0x000C - 0x0000)
struct VictoryBPFunctionLibrary_VictoryIntPlusEquals final
{
public:
	int32                                         Int;                                               // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Add;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntOut;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryIntPlusEquals) == 0x000004, "Wrong alignment on VictoryBPFunctionLibrary_VictoryIntPlusEquals");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryIntPlusEquals) == 0x00000C, "Wrong size on VictoryBPFunctionLibrary_VictoryIntPlusEquals");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryIntPlusEquals, Int) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryIntPlusEquals::Int' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryIntPlusEquals, Add) == 0x000004, "Member 'VictoryBPFunctionLibrary_VictoryIntPlusEquals::Add' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryIntPlusEquals, IntOut) == 0x000008, "Member 'VictoryBPFunctionLibrary_VictoryIntPlusEquals::IntOut' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryIsApplicationRunning
// 0x0008 (0x0008 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryIsApplicationRunning final
{
public:
	int32                                         ProcessId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryIsApplicationRunning) == 0x000004, "Wrong alignment on VictoryBPFunctionLibrary_VictoryIsApplicationRunning");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryIsApplicationRunning) == 0x000008, "Wrong size on VictoryBPFunctionLibrary_VictoryIsApplicationRunning");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryIsApplicationRunning, ProcessId) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryIsApplicationRunning::ProcessId' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryIsApplicationRunning, ReturnValue) == 0x000004, "Member 'VictoryBPFunctionLibrary_VictoryIsApplicationRunning::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryPaths__SavedDir
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryPaths__SavedDir final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryPaths__SavedDir) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryPaths__SavedDir");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryPaths__SavedDir) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_VictoryPaths__SavedDir");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryPaths__SavedDir, ReturnValue) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryPaths__SavedDir::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictorySetCustomConfigVar_Bool
// 0x0028 (0x0028 - 0x0000)
struct VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Bool final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Bool) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Bool");
static_assert(sizeof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Bool) == 0x000028, "Wrong size on VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Bool");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Bool, SectionName) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Bool::SectionName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Bool, VariableName) == 0x000010, "Member 'VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Bool::VariableName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Bool, Value) == 0x000020, "Member 'VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Bool::Value' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictorySetCustomConfigVar_Color
// 0x0030 (0x0030 - 0x0000)
struct VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Color final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Value;                                             // 0x0020(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Color) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Color");
static_assert(sizeof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Color) == 0x000030, "Wrong size on VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Color");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Color, SectionName) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Color::SectionName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Color, VariableName) == 0x000010, "Member 'VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Color::VariableName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Color, Value) == 0x000020, "Member 'VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Color::Value' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictorySetCustomConfigVar_Float
// 0x0028 (0x0028 - 0x0000)
struct VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Float final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Float) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Float");
static_assert(sizeof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Float) == 0x000028, "Wrong size on VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Float");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Float, SectionName) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Float::SectionName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Float, VariableName) == 0x000010, "Member 'VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Float::VariableName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Float, Value) == 0x000020, "Member 'VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Float::Value' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictorySetCustomConfigVar_Int
// 0x0028 (0x0028 - 0x0000)
struct VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Int final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Int) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Int");
static_assert(sizeof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Int) == 0x000028, "Wrong size on VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Int");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Int, SectionName) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Int::SectionName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Int, VariableName) == 0x000010, "Member 'VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Int::VariableName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Int, Value) == 0x000020, "Member 'VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Int::Value' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictorySetCustomConfigVar_Rotator
// 0x0038 (0x0038 - 0x0000)
struct VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Rotator final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Value;                                             // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Rotator) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Rotator");
static_assert(sizeof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Rotator) == 0x000038, "Wrong size on VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Rotator");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Rotator, SectionName) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Rotator::SectionName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Rotator, VariableName) == 0x000010, "Member 'VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Rotator::VariableName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Rotator, Value) == 0x000020, "Member 'VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Rotator::Value' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictorySetCustomConfigVar_String
// 0x0030 (0x0030 - 0x0000)
struct VictoryBPFunctionLibrary_VictorySetCustomConfigVar_String final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_String) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictorySetCustomConfigVar_String");
static_assert(sizeof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_String) == 0x000030, "Wrong size on VictoryBPFunctionLibrary_VictorySetCustomConfigVar_String");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_String, SectionName) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictorySetCustomConfigVar_String::SectionName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_String, VariableName) == 0x000010, "Member 'VictoryBPFunctionLibrary_VictorySetCustomConfigVar_String::VariableName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_String, Value) == 0x000020, "Member 'VictoryBPFunctionLibrary_VictorySetCustomConfigVar_String::Value' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictorySetCustomConfigVar_Vector
// 0x0038 (0x0038 - 0x0000)
struct VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Value;                                             // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector");
static_assert(sizeof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector) == 0x000038, "Wrong size on VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector, SectionName) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector::SectionName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector, VariableName) == 0x000010, "Member 'VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector::VariableName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector, Value) == 0x000020, "Member 'VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector::Value' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictorySetCustomConfigVar_Vector2D
// 0x0030 (0x0030 - 0x0000)
struct VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector2D final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Value;                                             // 0x0020(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector2D) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector2D");
static_assert(sizeof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector2D) == 0x000030, "Wrong size on VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector2D");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector2D, SectionName) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector2D::SectionName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector2D, VariableName) == 0x000010, "Member 'VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector2D::VariableName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector2D, Value) == 0x000020, "Member 'VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector2D::Value' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictorySimulateKeyPress
// 0x0028 (0x0028 - 0x0000)
struct VictoryBPFunctionLibrary_VictorySimulateKeyPress final
{
public:
	class APlayerController*                      ThePC;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   Key;                                               // 0x0008(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputEvent                                   EventType;                                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_VictorySimulateKeyPress) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictorySimulateKeyPress");
static_assert(sizeof(VictoryBPFunctionLibrary_VictorySimulateKeyPress) == 0x000028, "Wrong size on VictoryBPFunctionLibrary_VictorySimulateKeyPress");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySimulateKeyPress, ThePC) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictorySimulateKeyPress::ThePC' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySimulateKeyPress, Key) == 0x000008, "Member 'VictoryBPFunctionLibrary_VictorySimulateKeyPress::Key' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySimulateKeyPress, EventType) == 0x000020, "Member 'VictoryBPFunctionLibrary_VictorySimulateKeyPress::EventType' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictorySimulateMouseWheel
// 0x0004 (0x0004 - 0x0000)
struct VictoryBPFunctionLibrary_VictorySimulateMouseWheel final
{
public:
	float                                         Delta;                                             // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictorySimulateMouseWheel) == 0x000004, "Wrong alignment on VictoryBPFunctionLibrary_VictorySimulateMouseWheel");
static_assert(sizeof(VictoryBPFunctionLibrary_VictorySimulateMouseWheel) == 0x000004, "Wrong size on VictoryBPFunctionLibrary_VictorySimulateMouseWheel");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySimulateMouseWheel, Delta) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictorySimulateMouseWheel::Delta' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictorySortFloatArray
// 0x0020 (0x0020 - 0x0000)
struct VictoryBPFunctionLibrary_VictorySortFloatArray final
{
public:
	TArray<float>                                 FloatArray;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<float>                                 FloatArrayRef;                                     // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictorySortFloatArray) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictorySortFloatArray");
static_assert(sizeof(VictoryBPFunctionLibrary_VictorySortFloatArray) == 0x000020, "Wrong size on VictoryBPFunctionLibrary_VictorySortFloatArray");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySortFloatArray, FloatArray) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictorySortFloatArray::FloatArray' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySortFloatArray, FloatArrayRef) == 0x000010, "Member 'VictoryBPFunctionLibrary_VictorySortFloatArray::FloatArrayRef' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictorySortIntArray
// 0x0020 (0x0020 - 0x0000)
struct VictoryBPFunctionLibrary_VictorySortIntArray final
{
public:
	TArray<int32>                                 IntArray;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 IntArrayRef;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictorySortIntArray) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictorySortIntArray");
static_assert(sizeof(VictoryBPFunctionLibrary_VictorySortIntArray) == 0x000020, "Wrong size on VictoryBPFunctionLibrary_VictorySortIntArray");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySortIntArray, IntArray) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictorySortIntArray::IntArray' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySortIntArray, IntArrayRef) == 0x000010, "Member 'VictoryBPFunctionLibrary_VictorySortIntArray::IntArrayRef' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictorySortStringArray
// 0x0020 (0x0020 - 0x0000)
struct VictoryBPFunctionLibrary_VictorySortStringArray final
{
public:
	TArray<class FString>                         StringArray;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         StringArrayRef;                                    // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictorySortStringArray) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictorySortStringArray");
static_assert(sizeof(VictoryBPFunctionLibrary_VictorySortStringArray) == 0x000020, "Wrong size on VictoryBPFunctionLibrary_VictorySortStringArray");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySortStringArray, StringArray) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictorySortStringArray::StringArray' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySortStringArray, StringArrayRef) == 0x000010, "Member 'VictoryBPFunctionLibrary_VictorySortStringArray::StringArrayRef' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Viewport__GetCenterOfViewport
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_Viewport__GetCenterOfViewport final
{
public:
	const class APlayerController*                ThePC;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosX;                                              // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosY;                                              // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Viewport__GetCenterOfViewport) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Viewport__GetCenterOfViewport");
static_assert(sizeof(VictoryBPFunctionLibrary_Viewport__GetCenterOfViewport) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_Viewport__GetCenterOfViewport");
static_assert(offsetof(VictoryBPFunctionLibrary_Viewport__GetCenterOfViewport, ThePC) == 0x000000, "Member 'VictoryBPFunctionLibrary_Viewport__GetCenterOfViewport::ThePC' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Viewport__GetCenterOfViewport, PosX) == 0x000008, "Member 'VictoryBPFunctionLibrary_Viewport__GetCenterOfViewport::PosX' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Viewport__GetCenterOfViewport, PosY) == 0x00000C, "Member 'VictoryBPFunctionLibrary_Viewport__GetCenterOfViewport::PosY' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Viewport__GetCenterOfViewport, ReturnValue) == 0x000010, "Member 'VictoryBPFunctionLibrary_Viewport__GetCenterOfViewport::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Viewport__GetMousePosition
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_Viewport__GetMousePosition final
{
public:
	const class APlayerController*                ThePC;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosX;                                              // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosY;                                              // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Viewport__GetMousePosition) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Viewport__GetMousePosition");
static_assert(sizeof(VictoryBPFunctionLibrary_Viewport__GetMousePosition) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_Viewport__GetMousePosition");
static_assert(offsetof(VictoryBPFunctionLibrary_Viewport__GetMousePosition, ThePC) == 0x000000, "Member 'VictoryBPFunctionLibrary_Viewport__GetMousePosition::ThePC' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Viewport__GetMousePosition, PosX) == 0x000008, "Member 'VictoryBPFunctionLibrary_Viewport__GetMousePosition::PosX' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Viewport__GetMousePosition, PosY) == 0x00000C, "Member 'VictoryBPFunctionLibrary_Viewport__GetMousePosition::PosY' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Viewport__GetMousePosition, ReturnValue) == 0x000010, "Member 'VictoryBPFunctionLibrary_Viewport__GetMousePosition::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Viewport__SetMousePosition
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_Viewport__SetMousePosition final
{
public:
	const class APlayerController*                ThePC;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosX;                                              // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosY;                                              // 0x000C(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Viewport__SetMousePosition) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Viewport__SetMousePosition");
static_assert(sizeof(VictoryBPFunctionLibrary_Viewport__SetMousePosition) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_Viewport__SetMousePosition");
static_assert(offsetof(VictoryBPFunctionLibrary_Viewport__SetMousePosition, ThePC) == 0x000000, "Member 'VictoryBPFunctionLibrary_Viewport__SetMousePosition::ThePC' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Viewport__SetMousePosition, PosX) == 0x000008, "Member 'VictoryBPFunctionLibrary_Viewport__SetMousePosition::PosX' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Viewport__SetMousePosition, PosY) == 0x00000C, "Member 'VictoryBPFunctionLibrary_Viewport__SetMousePosition::PosY' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Viewport__SetMousePosition, ReturnValue) == 0x000010, "Member 'VictoryBPFunctionLibrary_Viewport__SetMousePosition::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.ViewportPositionDeproject
// 0x0050 (0x0050 - 0x0000)
struct VictoryBPFunctionLibrary_ViewportPositionDeproject final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ViewportPosition;                                  // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutWorldOrigin;                                    // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutWorldDirection;                                 // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_ViewportPositionDeproject) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_ViewportPositionDeproject");
static_assert(sizeof(VictoryBPFunctionLibrary_ViewportPositionDeproject) == 0x000050, "Wrong size on VictoryBPFunctionLibrary_ViewportPositionDeproject");
static_assert(offsetof(VictoryBPFunctionLibrary_ViewportPositionDeproject, WorldContextObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_ViewportPositionDeproject::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_ViewportPositionDeproject, ViewportPosition) == 0x000008, "Member 'VictoryBPFunctionLibrary_ViewportPositionDeproject::ViewportPosition' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_ViewportPositionDeproject, OutWorldOrigin) == 0x000018, "Member 'VictoryBPFunctionLibrary_ViewportPositionDeproject::OutWorldOrigin' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_ViewportPositionDeproject, OutWorldDirection) == 0x000030, "Member 'VictoryBPFunctionLibrary_ViewportPositionDeproject::OutWorldDirection' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_ViewportPositionDeproject, ReturnValue) == 0x000048, "Member 'VictoryBPFunctionLibrary_ViewportPositionDeproject::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.WidgetGetChildrenOfClass
// 0x0028 (0x0028 - 0x0000)
struct VictoryBPFunctionLibrary_WidgetGetChildrenOfClass final
{
public:
	class UWidget*                                ParentWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UUserWidget*>                    ChildWidgets;                                      // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                WidgetClass;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImmediateOnly;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_WidgetGetChildrenOfClass) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_WidgetGetChildrenOfClass");
static_assert(sizeof(VictoryBPFunctionLibrary_WidgetGetChildrenOfClass) == 0x000028, "Wrong size on VictoryBPFunctionLibrary_WidgetGetChildrenOfClass");
static_assert(offsetof(VictoryBPFunctionLibrary_WidgetGetChildrenOfClass, ParentWidget) == 0x000000, "Member 'VictoryBPFunctionLibrary_WidgetGetChildrenOfClass::ParentWidget' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_WidgetGetChildrenOfClass, ChildWidgets) == 0x000008, "Member 'VictoryBPFunctionLibrary_WidgetGetChildrenOfClass::ChildWidgets' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_WidgetGetChildrenOfClass, WidgetClass) == 0x000018, "Member 'VictoryBPFunctionLibrary_WidgetGetChildrenOfClass::WidgetClass' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_WidgetGetChildrenOfClass, bImmediateOnly) == 0x000020, "Member 'VictoryBPFunctionLibrary_WidgetGetChildrenOfClass::bImmediateOnly' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.WidgetGetParentOfClass
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_WidgetGetParentOfClass final
{
public:
	class UWidget*                                ChildWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                WidgetClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_WidgetGetParentOfClass) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_WidgetGetParentOfClass");
static_assert(sizeof(VictoryBPFunctionLibrary_WidgetGetParentOfClass) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_WidgetGetParentOfClass");
static_assert(offsetof(VictoryBPFunctionLibrary_WidgetGetParentOfClass, ChildWidget) == 0x000000, "Member 'VictoryBPFunctionLibrary_WidgetGetParentOfClass::ChildWidget' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_WidgetGetParentOfClass, WidgetClass) == 0x000008, "Member 'VictoryBPFunctionLibrary_WidgetGetParentOfClass::WidgetClass' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_WidgetGetParentOfClass, ReturnValue) == 0x000010, "Member 'VictoryBPFunctionLibrary_WidgetGetParentOfClass::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.WorldType__InEditorWorld
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_WorldType__InEditorWorld final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_WorldType__InEditorWorld) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_WorldType__InEditorWorld");
static_assert(sizeof(VictoryBPFunctionLibrary_WorldType__InEditorWorld) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_WorldType__InEditorWorld");
static_assert(offsetof(VictoryBPFunctionLibrary_WorldType__InEditorWorld, WorldContextObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_WorldType__InEditorWorld::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_WorldType__InEditorWorld, ReturnValue) == 0x000008, "Member 'VictoryBPFunctionLibrary_WorldType__InEditorWorld::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.WorldType__InGameInstanceWorld
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_WorldType__InGameInstanceWorld final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_WorldType__InGameInstanceWorld) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_WorldType__InGameInstanceWorld");
static_assert(sizeof(VictoryBPFunctionLibrary_WorldType__InGameInstanceWorld) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_WorldType__InGameInstanceWorld");
static_assert(offsetof(VictoryBPFunctionLibrary_WorldType__InGameInstanceWorld, WorldContextObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_WorldType__InGameInstanceWorld::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_WorldType__InGameInstanceWorld, ReturnValue) == 0x000008, "Member 'VictoryBPFunctionLibrary_WorldType__InGameInstanceWorld::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.WorldType__InPIEWorld
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_WorldType__InPIEWorld final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_WorldType__InPIEWorld) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_WorldType__InPIEWorld");
static_assert(sizeof(VictoryBPFunctionLibrary_WorldType__InPIEWorld) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_WorldType__InPIEWorld");
static_assert(offsetof(VictoryBPFunctionLibrary_WorldType__InPIEWorld, WorldContextObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_WorldType__InPIEWorld::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_WorldType__InPIEWorld, ReturnValue) == 0x000008, "Member 'VictoryBPFunctionLibrary_WorldType__InPIEWorld::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.TKMathFunctionLibrary.NegateFloat
// 0x0008 (0x0008 - 0x0000)
struct TKMathFunctionLibrary_NegateFloat final
{
public:
	float                                         A;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TKMathFunctionLibrary_NegateFloat) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_NegateFloat");
static_assert(sizeof(TKMathFunctionLibrary_NegateFloat) == 0x000008, "Wrong size on TKMathFunctionLibrary_NegateFloat");
static_assert(offsetof(TKMathFunctionLibrary_NegateFloat, A) == 0x000000, "Member 'TKMathFunctionLibrary_NegateFloat::A' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_NegateFloat, ReturnValue) == 0x000004, "Member 'TKMathFunctionLibrary_NegateFloat::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.TKMathFunctionLibrary.NegateInt
// 0x0008 (0x0008 - 0x0000)
struct TKMathFunctionLibrary_NegateInt final
{
public:
	int32                                         A;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TKMathFunctionLibrary_NegateInt) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_NegateInt");
static_assert(sizeof(TKMathFunctionLibrary_NegateInt) == 0x000008, "Wrong size on TKMathFunctionLibrary_NegateInt");
static_assert(offsetof(TKMathFunctionLibrary_NegateInt, A) == 0x000000, "Member 'TKMathFunctionLibrary_NegateInt::A' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_NegateInt, ReturnValue) == 0x000004, "Member 'TKMathFunctionLibrary_NegateInt::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.TKMathFunctionLibrary.NegateVector2D
// 0x0020 (0x0020 - 0x0000)
struct TKMathFunctionLibrary_NegateVector2D final
{
public:
	struct FVector2D                              A;                                                 // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TKMathFunctionLibrary_NegateVector2D) == 0x000008, "Wrong alignment on TKMathFunctionLibrary_NegateVector2D");
static_assert(sizeof(TKMathFunctionLibrary_NegateVector2D) == 0x000020, "Wrong size on TKMathFunctionLibrary_NegateVector2D");
static_assert(offsetof(TKMathFunctionLibrary_NegateVector2D, A) == 0x000000, "Member 'TKMathFunctionLibrary_NegateVector2D::A' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_NegateVector2D, ReturnValue) == 0x000010, "Member 'TKMathFunctionLibrary_NegateVector2D::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.TKMathFunctionLibrary.SetVectorLength
// 0x0038 (0x0038 - 0x0000)
struct TKMathFunctionLibrary_SetVectorLength final
{
public:
	struct FVector                                A;                                                 // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Size;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TKMathFunctionLibrary_SetVectorLength) == 0x000008, "Wrong alignment on TKMathFunctionLibrary_SetVectorLength");
static_assert(sizeof(TKMathFunctionLibrary_SetVectorLength) == 0x000038, "Wrong size on TKMathFunctionLibrary_SetVectorLength");
static_assert(offsetof(TKMathFunctionLibrary_SetVectorLength, A) == 0x000000, "Member 'TKMathFunctionLibrary_SetVectorLength::A' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_SetVectorLength, Size) == 0x000018, "Member 'TKMathFunctionLibrary_SetVectorLength::Size' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_SetVectorLength, ReturnValue) == 0x000020, "Member 'TKMathFunctionLibrary_SetVectorLength::ReturnValue' has a wrong offset!");

}

