#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_MapCycleObject

#include "Basic.hpp"

#include "B_MapCycleObject_classes.hpp"
#include "B_MapCycleObject_parameters.hpp"


namespace SDK
{

// Function B_MapCycleObject.B_MapCycleObject_C.AddItemToMapCycle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Filename                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash)
// int32                                   AllowedAmountOfMaps                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_MapCycleObject_C::AddItemToMapCycle(const class FString& Filename, int32 AllowedAmountOfMaps, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MapCycleObject_C", "AddItemToMapCycle");

	Params::B_MapCycleObject_C_AddItemToMapCycle Parms{};

	Parms.Filename = std::move(Filename);
	Parms.AllowedAmountOfMaps = AllowedAmountOfMaps;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function B_MapCycleObject.B_MapCycleObject_C.ClearMapCycle
// (Public, BlueprintCallable, BlueprintEvent)

void UB_MapCycleObject_C::ClearMapCycle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MapCycleObject_C", "ClearMapCycle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_MapCycleObject.B_MapCycleObject_C.MapCycleContainsItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           Filename                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Index_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UB_MapCycleObject_C::MapCycleContainsItem(const class FString& Filename, int32* Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MapCycleObject_C", "MapCycleContainsItem");

	Params::B_MapCycleObject_C_MapCycleContainsItem Parms{};

	Parms.Filename = std::move(Filename);

	UObject::ProcessEvent(Func, &Parms);

	if (Index_0 != nullptr)
		*Index_0 = Parms.Index_0;

	return Parms.ReturnValue;
}


// Function B_MapCycleObject.B_MapCycleObject_C.MapCycleIsEmpty
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsEmpty                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_MapCycleObject_C::MapCycleIsEmpty(bool* IsEmpty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MapCycleObject_C", "MapCycleIsEmpty");

	Params::B_MapCycleObject_C_MapCycleIsEmpty Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsEmpty != nullptr)
		*IsEmpty = Parms.IsEmpty;
}


// Function B_MapCycleObject.B_MapCycleObject_C.RemoveMapFromMapCycle
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   IndexToRemove                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_MapCycleObject_C::RemoveMapFromMapCycle(int32 IndexToRemove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MapCycleObject_C", "RemoveMapFromMapCycle");

	Params::B_MapCycleObject_C_RemoveMapFromMapCycle Parms{};

	Parms.IndexToRemove = IndexToRemove;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_MapCycleObject.B_MapCycleObject_C.CompareWithMapCycle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UB_MapCycleObject_C*              MapCycleObject                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    IsMatch                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_MapCycleObject_C::CompareWithMapCycle(class UB_MapCycleObject_C* MapCycleObject, bool* IsMatch) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MapCycleObject_C", "CompareWithMapCycle");

	Params::B_MapCycleObject_C_CompareWithMapCycle Parms{};

	Parms.MapCycleObject = MapCycleObject;

	UObject::ProcessEvent(Func, &Parms);

	if (IsMatch != nullptr)
		*IsMatch = Parms.IsMatch;
}


// Function B_MapCycleObject.B_MapCycleObject_C.GetAmountOfMapsInCycle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   AmountOfMaps                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_MapCycleObject_C::GetAmountOfMapsInCycle(int32* AmountOfMaps) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MapCycleObject_C", "GetAmountOfMapsInCycle");

	Params::B_MapCycleObject_C_GetAmountOfMapsInCycle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AmountOfMaps != nullptr)
		*AmountOfMaps = Parms.AmountOfMaps;
}


// Function B_MapCycleObject.B_MapCycleObject_C.MapCycleHasNoName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    HasNoName                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_MapCycleObject_C::MapCycleHasNoName(bool* HasNoName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MapCycleObject_C", "MapCycleHasNoName");

	Params::B_MapCycleObject_C_MapCycleHasNoName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HasNoName != nullptr)
		*HasNoName = Parms.HasNoName;
}

}

