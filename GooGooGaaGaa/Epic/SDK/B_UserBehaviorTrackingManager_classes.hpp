#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_UserBehaviorTrackingManager

#include "Basic.hpp"

#include "LowEntryJson_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "MasterServerPlugin_structs.hpp"
#include "MasterServerPlugin_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_UserBehaviorTrackingManager.B_UserBehaviorTrackingManager_C
// 0x0040 (0x0078 - 0x0038)
class UB_UserBehaviorTrackingManager_C final : public UBaseUserBehaviorTrackingManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0038(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          IsEnabled;                                         // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UVaRestRequestJSON*                     TempRequest;                                       // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UB_NewMasterServerManager_C*            CachedNewMasterServerManager;                      // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<struct FUserBehaviorEvent>             CachedEvents;                                      // 0x0058(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FDateTime                              LastUploadTimestamp;                               // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDedicatedServer;                                 // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddEvent(ENativeUserBehaviorEventType EventType, const class FString& EventData, bool DirectUpload);
	void BPTick(float DeltaTime);
	void CreateJsonEventArray(TArray<struct FUserBehaviorEvent>& Events, class ULowEntryJsonArray** JsonObject);
	void CreateJsonObject(ENativeUserBehaviorEventType& EventType, class FString& EventData, class ULowEntryJsonObject** JsonObject);
	void CreateJsonObjectExt(ENativeUserBehaviorEventType& EventType, class FString& EventData, struct FDateTime& Timestamp, class ULowEntryJsonObject** JsonObject);
	void ExecuteUbergraph_B_UserBehaviorTrackingManager(int32 EntryPoint);
	void HandleDidReceiveAccessToken();
	void Init();
	void OnMultipleRequestComplete(class UVaRestRequestJSON* Request);
	void OnMultipleRequestFail(class UVaRestRequestJSON* Request);
	void OnRequestComplete(class UVaRestRequestJSON* Request);
	void OnRequestFail(class UVaRestRequestJSON* Request);
	void SetEnabled(bool IsEnabled_0);
	void UploadCachedEvents();
	void UploadSingleData(const class UB_NewMasterServerManager_C*& NewMasterServerManager, const ENativeUserBehaviorEventType& EventType, const class FString& EventData);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_UserBehaviorTrackingManager_C">();
	}
	static class UB_UserBehaviorTrackingManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UB_UserBehaviorTrackingManager_C>();
	}
};
static_assert(alignof(UB_UserBehaviorTrackingManager_C) == 0x000008, "Wrong alignment on UB_UserBehaviorTrackingManager_C");
static_assert(sizeof(UB_UserBehaviorTrackingManager_C) == 0x000078, "Wrong size on UB_UserBehaviorTrackingManager_C");
static_assert(offsetof(UB_UserBehaviorTrackingManager_C, UberGraphFrame) == 0x000038, "Member 'UB_UserBehaviorTrackingManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UB_UserBehaviorTrackingManager_C, IsEnabled) == 0x000040, "Member 'UB_UserBehaviorTrackingManager_C::IsEnabled' has a wrong offset!");
static_assert(offsetof(UB_UserBehaviorTrackingManager_C, TempRequest) == 0x000048, "Member 'UB_UserBehaviorTrackingManager_C::TempRequest' has a wrong offset!");
static_assert(offsetof(UB_UserBehaviorTrackingManager_C, CachedNewMasterServerManager) == 0x000050, "Member 'UB_UserBehaviorTrackingManager_C::CachedNewMasterServerManager' has a wrong offset!");
static_assert(offsetof(UB_UserBehaviorTrackingManager_C, CachedEvents) == 0x000058, "Member 'UB_UserBehaviorTrackingManager_C::CachedEvents' has a wrong offset!");
static_assert(offsetof(UB_UserBehaviorTrackingManager_C, LastUploadTimestamp) == 0x000068, "Member 'UB_UserBehaviorTrackingManager_C::LastUploadTimestamp' has a wrong offset!");
static_assert(offsetof(UB_UserBehaviorTrackingManager_C, IsDedicatedServer) == 0x000070, "Member 'UB_UserBehaviorTrackingManager_C::IsDedicatedServer' has a wrong offset!");

}

