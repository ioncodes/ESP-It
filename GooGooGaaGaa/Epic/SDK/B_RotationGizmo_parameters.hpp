#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_RotationGizmo

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "E_Axis_structs.hpp"


namespace SDK::Params
{

// Function B_RotationGizmo.B_RotationGizmo_C.ExecuteUbergraph_B_RotationGizmo
// 0x0040 (0x0040 - 0x0000)
struct B_RotationGizmo_C_ExecuteUbergraph_B_RotationGizmo final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStaticMeshComponent*>           K2Node_MakeArray_Array;                            // 0x0008(0x0010)(ReferenceParm, ContainsInstancedReference)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStaticMeshComponent*>           K2Node_MakeArray_Array_1;                          // 0x0020(0x0010)(ReferenceParm, ContainsInstancedReference)
	TArray<class UStaticMeshComponent*>           K2Node_MakeArray_Array_2;                          // 0x0030(0x0010)(ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(B_RotationGizmo_C_ExecuteUbergraph_B_RotationGizmo) == 0x000008, "Wrong alignment on B_RotationGizmo_C_ExecuteUbergraph_B_RotationGizmo");
static_assert(sizeof(B_RotationGizmo_C_ExecuteUbergraph_B_RotationGizmo) == 0x000040, "Wrong size on B_RotationGizmo_C_ExecuteUbergraph_B_RotationGizmo");
static_assert(offsetof(B_RotationGizmo_C_ExecuteUbergraph_B_RotationGizmo, EntryPoint) == 0x000000, "Member 'B_RotationGizmo_C_ExecuteUbergraph_B_RotationGizmo::EntryPoint' has a wrong offset!");
static_assert(offsetof(B_RotationGizmo_C_ExecuteUbergraph_B_RotationGizmo, K2Node_MakeArray_Array) == 0x000008, "Member 'B_RotationGizmo_C_ExecuteUbergraph_B_RotationGizmo::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(B_RotationGizmo_C_ExecuteUbergraph_B_RotationGizmo, K2Node_Event_DeltaSeconds) == 0x000018, "Member 'B_RotationGizmo_C_ExecuteUbergraph_B_RotationGizmo::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(B_RotationGizmo_C_ExecuteUbergraph_B_RotationGizmo, K2Node_MakeArray_Array_1) == 0x000020, "Member 'B_RotationGizmo_C_ExecuteUbergraph_B_RotationGizmo::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(B_RotationGizmo_C_ExecuteUbergraph_B_RotationGizmo, K2Node_MakeArray_Array_2) == 0x000030, "Member 'B_RotationGizmo_C_ExecuteUbergraph_B_RotationGizmo::K2Node_MakeArray_Array_2' has a wrong offset!");

// Function B_RotationGizmo.B_RotationGizmo_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct B_RotationGizmo_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_RotationGizmo_C_ReceiveTick) == 0x000004, "Wrong alignment on B_RotationGizmo_C_ReceiveTick");
static_assert(sizeof(B_RotationGizmo_C_ReceiveTick) == 0x000004, "Wrong size on B_RotationGizmo_C_ReceiveTick");
static_assert(offsetof(B_RotationGizmo_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'B_RotationGizmo_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function B_RotationGizmo.B_RotationGizmo_C.SetHighlightAxis
// 0x0070 (0x0070 - 0x0000)
struct B_RotationGizmo_C_SetHighlightAxis final
{
public:
	E_Axis                                        Axis;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ForcedBool;                                        // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMeshComponent*>                 K2Node_MakeArray_Array;                            // 0x0008(0x0010)(ReferenceParm, ContainsInstancedReference)
	TArray<class UMeshComponent*>                 K2Node_MakeArray_Array_1;                          // 0x0018(0x0010)(ReferenceParm, ContainsInstancedReference)
	TArray<class UMeshComponent*>                 K2Node_MakeArray_Array_2;                          // 0x0028(0x0010)(ReferenceParm, ContainsInstancedReference)
	TArray<class UMeshComponent*>                 K2Node_MakeArray_Array_3;                          // 0x0038(0x0010)(ReferenceParm, ContainsInstancedReference)
	TArray<class UMeshComponent*>                 K2Node_MakeArray_Array_4;                          // 0x0048(0x0010)(ReferenceParm, ContainsInstancedReference)
	TArray<class UMeshComponent*>                 K2Node_MakeArray_Array_5;                          // 0x0058(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_RotationGizmo_C_SetHighlightAxis) == 0x000008, "Wrong alignment on B_RotationGizmo_C_SetHighlightAxis");
static_assert(sizeof(B_RotationGizmo_C_SetHighlightAxis) == 0x000070, "Wrong size on B_RotationGizmo_C_SetHighlightAxis");
static_assert(offsetof(B_RotationGizmo_C_SetHighlightAxis, Axis) == 0x000000, "Member 'B_RotationGizmo_C_SetHighlightAxis::Axis' has a wrong offset!");
static_assert(offsetof(B_RotationGizmo_C_SetHighlightAxis, ForcedBool) == 0x000001, "Member 'B_RotationGizmo_C_SetHighlightAxis::ForcedBool' has a wrong offset!");
static_assert(offsetof(B_RotationGizmo_C_SetHighlightAxis, K2Node_MakeArray_Array) == 0x000008, "Member 'B_RotationGizmo_C_SetHighlightAxis::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(B_RotationGizmo_C_SetHighlightAxis, K2Node_MakeArray_Array_1) == 0x000018, "Member 'B_RotationGizmo_C_SetHighlightAxis::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(B_RotationGizmo_C_SetHighlightAxis, K2Node_MakeArray_Array_2) == 0x000028, "Member 'B_RotationGizmo_C_SetHighlightAxis::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(B_RotationGizmo_C_SetHighlightAxis, K2Node_MakeArray_Array_3) == 0x000038, "Member 'B_RotationGizmo_C_SetHighlightAxis::K2Node_MakeArray_Array_3' has a wrong offset!");
static_assert(offsetof(B_RotationGizmo_C_SetHighlightAxis, K2Node_MakeArray_Array_4) == 0x000048, "Member 'B_RotationGizmo_C_SetHighlightAxis::K2Node_MakeArray_Array_4' has a wrong offset!");
static_assert(offsetof(B_RotationGizmo_C_SetHighlightAxis, K2Node_MakeArray_Array_5) == 0x000058, "Member 'B_RotationGizmo_C_SetHighlightAxis::K2Node_MakeArray_Array_5' has a wrong offset!");
static_assert(offsetof(B_RotationGizmo_C_SetHighlightAxis, K2Node_SwitchEnum_CmpSuccess) == 0x000068, "Member 'B_RotationGizmo_C_SetHighlightAxis::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function B_RotationGizmo.B_RotationGizmo_C.ShowOnlyLowestDistanceToCamera
// 0x00E8 (0x00E8 - 0x0000)
struct B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera final
{
public:
	TArray<class UStaticMeshComponent*>           Components;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	struct FVector                                CameraLocation;                                    // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SmallestDistanceToCamera;                          // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   NearestComponent;                                  // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   CallFunc_Array_Get_Item_1;                         // 0x0068(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSizeSquared_ReturnValue;                 // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetFirstLocalPlayerController_ReturnValue; // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetCameraLocation_ReturnValue;            // 0x00C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera) == 0x000008, "Wrong alignment on B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera");
static_assert(sizeof(B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera) == 0x0000E8, "Wrong size on B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera");
static_assert(offsetof(B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera, Components) == 0x000000, "Member 'B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera::Components' has a wrong offset!");
static_assert(offsetof(B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera, CameraLocation) == 0x000010, "Member 'B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera::CameraLocation' has a wrong offset!");
static_assert(offsetof(B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera, SmallestDistanceToCamera) == 0x000028, "Member 'B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera::SmallestDistanceToCamera' has a wrong offset!");
static_assert(offsetof(B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera, NearestComponent) == 0x000030, "Member 'B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera::NearestComponent' has a wrong offset!");
static_assert(offsetof(B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera, Temp_int_Array_Index_Variable) == 0x000038, "Member 'B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera, Temp_int_Loop_Counter_Variable) == 0x00003C, "Member 'B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera, CallFunc_Add_IntInt_ReturnValue) == 0x000040, "Member 'B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera, Temp_int_Array_Index_Variable_1) == 0x000044, "Member 'B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera, Temp_int_Loop_Counter_Variable_1) == 0x000048, "Member 'B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera, CallFunc_Array_Get_Item) == 0x000050, "Member 'B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000058, "Member 'B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera, CallFunc_Add_IntInt_ReturnValue_1) == 0x00005C, "Member 'B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera, CallFunc_Array_Length_ReturnValue) == 0x000060, "Member 'B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera, CallFunc_Less_IntInt_ReturnValue) == 0x000064, "Member 'B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera, CallFunc_Array_Get_Item_1) == 0x000068, "Member 'B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000070, "Member 'B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera, CallFunc_Array_Length_ReturnValue_1) == 0x000088, "Member 'B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera, CallFunc_Less_IntInt_ReturnValue_1) == 0x00008C, "Member 'B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000090, "Member 'B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera, CallFunc_GetGameInstance_ReturnValue) == 0x0000A8, "Member 'B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera, CallFunc_VSizeSquared_ReturnValue) == 0x0000B0, "Member 'B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera::CallFunc_VSizeSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera, CallFunc_GetFirstLocalPlayerController_ReturnValue) == 0x0000B8, "Member 'B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera::CallFunc_GetFirstLocalPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera, CallFunc_Less_DoubleDouble_ReturnValue) == 0x0000C0, "Member 'B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera, CallFunc_GetCameraLocation_ReturnValue) == 0x0000C8, "Member 'B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera::CallFunc_GetCameraLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera, CallFunc_IsValid_ReturnValue) == 0x0000E0, "Member 'B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera, CallFunc_Not_PreBool_ReturnValue) == 0x0000E1, "Member 'B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera, CallFunc_BooleanOR_ReturnValue) == 0x0000E2, "Member 'B_RotationGizmo_C_ShowOnlyLowestDistanceToCamera::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

}

