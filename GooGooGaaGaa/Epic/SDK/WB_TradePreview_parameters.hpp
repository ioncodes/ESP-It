#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_TradePreview

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "MasterServerPlugin_structs.hpp"
#include "S_ItemInfo_structs.hpp"
#include "S_RecipeInfo_structs.hpp"
#include "ESalvageCategory_structs.hpp"


namespace SDK::Params
{

// Function WB_TradePreview.WB_TradePreview_C.GetSkinAndRecipeInfos
// 0x0220 (0x0220 - 0x0000)
struct WB_TradePreview_C_GetSkinAndRecipeInfos final
{
public:
	struct FTradingItem                           TradingItem;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FS_ItemInfo                            SkinInfo;                                          // 0x0008(0x0078)(Parm, OutParm, HasGetValueTypeHash)
	struct FS_RecipeInfo                          RecipeInfo;                                        // 0x0080(0x0078)(Parm, OutParm, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_ItemInfo                            CallFunc_GetSkinItem_ReturnValue;                  // 0x0110(0x0078)(HasGetValueTypeHash)
	bool                                          CallFunc_GetSkinItem_Found;                        // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_1;            // 0x0190(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_1;            // 0x0198(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A1[0x7];                                      // 0x01A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_RecipeInfo                          CallFunc_GetRecipe_ReturnValue;                    // 0x01A8(0x0078)(HasGetValueTypeHash)
};
static_assert(alignof(WB_TradePreview_C_GetSkinAndRecipeInfos) == 0x000008, "Wrong alignment on WB_TradePreview_C_GetSkinAndRecipeInfos");
static_assert(sizeof(WB_TradePreview_C_GetSkinAndRecipeInfos) == 0x000220, "Wrong size on WB_TradePreview_C_GetSkinAndRecipeInfos");
static_assert(offsetof(WB_TradePreview_C_GetSkinAndRecipeInfos, TradingItem) == 0x000000, "Member 'WB_TradePreview_C_GetSkinAndRecipeInfos::TradingItem' has a wrong offset!");
static_assert(offsetof(WB_TradePreview_C_GetSkinAndRecipeInfos, SkinInfo) == 0x000008, "Member 'WB_TradePreview_C_GetSkinAndRecipeInfos::SkinInfo' has a wrong offset!");
static_assert(offsetof(WB_TradePreview_C_GetSkinAndRecipeInfos, RecipeInfo) == 0x000080, "Member 'WB_TradePreview_C_GetSkinAndRecipeInfos::RecipeInfo' has a wrong offset!");
static_assert(offsetof(WB_TradePreview_C_GetSkinAndRecipeInfos, CallFunc_GetGameInstance_ReturnValue) == 0x0000F8, "Member 'WB_TradePreview_C_GetSkinAndRecipeInfos::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_TradePreview_C_GetSkinAndRecipeInfos, K2Node_DynamicCast_AsB_Game_Instance) == 0x000100, "Member 'WB_TradePreview_C_GetSkinAndRecipeInfos::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(WB_TradePreview_C_GetSkinAndRecipeInfos, K2Node_DynamicCast_bSuccess) == 0x000108, "Member 'WB_TradePreview_C_GetSkinAndRecipeInfos::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WB_TradePreview_C_GetSkinAndRecipeInfos, CallFunc_GetSkinItem_ReturnValue) == 0x000110, "Member 'WB_TradePreview_C_GetSkinAndRecipeInfos::CallFunc_GetSkinItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_TradePreview_C_GetSkinAndRecipeInfos, CallFunc_GetSkinItem_Found) == 0x000188, "Member 'WB_TradePreview_C_GetSkinAndRecipeInfos::CallFunc_GetSkinItem_Found' has a wrong offset!");
static_assert(offsetof(WB_TradePreview_C_GetSkinAndRecipeInfos, CallFunc_GetGameInstance_ReturnValue_1) == 0x000190, "Member 'WB_TradePreview_C_GetSkinAndRecipeInfos::CallFunc_GetGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_TradePreview_C_GetSkinAndRecipeInfos, K2Node_DynamicCast_AsB_Game_Instance_1) == 0x000198, "Member 'WB_TradePreview_C_GetSkinAndRecipeInfos::K2Node_DynamicCast_AsB_Game_Instance_1' has a wrong offset!");
static_assert(offsetof(WB_TradePreview_C_GetSkinAndRecipeInfos, K2Node_DynamicCast_bSuccess_1) == 0x0001A0, "Member 'WB_TradePreview_C_GetSkinAndRecipeInfos::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WB_TradePreview_C_GetSkinAndRecipeInfos, CallFunc_GetRecipe_ReturnValue) == 0x0001A8, "Member 'WB_TradePreview_C_GetSkinAndRecipeInfos::CallFunc_GetRecipe_ReturnValue' has a wrong offset!");

// Function WB_TradePreview.WB_TradePreview_C.AddNewItem
// 0x0100 (0x0100 - 0x0000)
struct WB_TradePreview_C_AddNewItem final
{
public:
	struct FTradingItem                           TradingItem;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FS_ItemInfo                            CallFunc_GetSkinAndRecipeInfos_SkinInfo;           // 0x0008(0x0078)(HasGetValueTypeHash)
	struct FS_RecipeInfo                          CallFunc_GetSkinAndRecipeInfos_RecipeInfo;         // 0x0080(0x0078)(HasGetValueTypeHash)
	class UB_TradingItemData_C*                   CallFunc_GetTradingButtonData_Data;                // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_TradePreview_C_AddNewItem) == 0x000008, "Wrong alignment on WB_TradePreview_C_AddNewItem");
static_assert(sizeof(WB_TradePreview_C_AddNewItem) == 0x000100, "Wrong size on WB_TradePreview_C_AddNewItem");
static_assert(offsetof(WB_TradePreview_C_AddNewItem, TradingItem) == 0x000000, "Member 'WB_TradePreview_C_AddNewItem::TradingItem' has a wrong offset!");
static_assert(offsetof(WB_TradePreview_C_AddNewItem, CallFunc_GetSkinAndRecipeInfos_SkinInfo) == 0x000008, "Member 'WB_TradePreview_C_AddNewItem::CallFunc_GetSkinAndRecipeInfos_SkinInfo' has a wrong offset!");
static_assert(offsetof(WB_TradePreview_C_AddNewItem, CallFunc_GetSkinAndRecipeInfos_RecipeInfo) == 0x000080, "Member 'WB_TradePreview_C_AddNewItem::CallFunc_GetSkinAndRecipeInfos_RecipeInfo' has a wrong offset!");
static_assert(offsetof(WB_TradePreview_C_AddNewItem, CallFunc_GetTradingButtonData_Data) == 0x0000F8, "Member 'WB_TradePreview_C_AddNewItem::CallFunc_GetTradingButtonData_Data' has a wrong offset!");

// Function WB_TradePreview.WB_TradePreview_C.GetIndividualItemDataAndFocus
// 0x0188 (0x0188 - 0x0000)
struct WB_TradePreview_C_GetIndividualItemDataAndFocus final
{
public:
	class UUserWidget*                            CategoryButton;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ESalvageCategory                              SalvageCategory;                                   // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UB_TileViewData_C*>              Data;                                              // 0x0010(0x0010)(Parm, OutParm)
	TArray<bool>                                  FocusNeeded;                                       // 0x0020(0x0010)(Parm, OutParm)
	TArray<bool>                                  Focus;                                             // 0x0030(0x0010)(Edit, BlueprintVisible)
	TArray<class UB_TileViewData_C*>              ButtonData;                                        // 0x0040(0x0010)(Edit, BlueprintVisible)
	TArray<struct FTradingItem>                   Items;                                             // 0x0050(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x006C(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTradingItem                           CallFunc_Array_Get_Item;                           // 0x0070(0x0008)(NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_ItemInfo                            CallFunc_GetSkinAndRecipeInfos_SkinInfo;           // 0x0080(0x0078)(HasGetValueTypeHash)
	struct FS_RecipeInfo                          CallFunc_GetSkinAndRecipeInfos_RecipeInfo;         // 0x00F8(0x0078)(HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_171[0x3];                                      // 0x0171(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UB_TradingItemData_C*                   CallFunc_GetTradingButtonData_Data;                // 0x0178(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_TradePreview_C_GetIndividualItemDataAndFocus) == 0x000008, "Wrong alignment on WB_TradePreview_C_GetIndividualItemDataAndFocus");
static_assert(sizeof(WB_TradePreview_C_GetIndividualItemDataAndFocus) == 0x000188, "Wrong size on WB_TradePreview_C_GetIndividualItemDataAndFocus");
static_assert(offsetof(WB_TradePreview_C_GetIndividualItemDataAndFocus, CategoryButton) == 0x000000, "Member 'WB_TradePreview_C_GetIndividualItemDataAndFocus::CategoryButton' has a wrong offset!");
static_assert(offsetof(WB_TradePreview_C_GetIndividualItemDataAndFocus, SalvageCategory) == 0x000008, "Member 'WB_TradePreview_C_GetIndividualItemDataAndFocus::SalvageCategory' has a wrong offset!");
static_assert(offsetof(WB_TradePreview_C_GetIndividualItemDataAndFocus, Data) == 0x000010, "Member 'WB_TradePreview_C_GetIndividualItemDataAndFocus::Data' has a wrong offset!");
static_assert(offsetof(WB_TradePreview_C_GetIndividualItemDataAndFocus, FocusNeeded) == 0x000020, "Member 'WB_TradePreview_C_GetIndividualItemDataAndFocus::FocusNeeded' has a wrong offset!");
static_assert(offsetof(WB_TradePreview_C_GetIndividualItemDataAndFocus, Focus) == 0x000030, "Member 'WB_TradePreview_C_GetIndividualItemDataAndFocus::Focus' has a wrong offset!");
static_assert(offsetof(WB_TradePreview_C_GetIndividualItemDataAndFocus, ButtonData) == 0x000040, "Member 'WB_TradePreview_C_GetIndividualItemDataAndFocus::ButtonData' has a wrong offset!");
static_assert(offsetof(WB_TradePreview_C_GetIndividualItemDataAndFocus, Items) == 0x000050, "Member 'WB_TradePreview_C_GetIndividualItemDataAndFocus::Items' has a wrong offset!");
static_assert(offsetof(WB_TradePreview_C_GetIndividualItemDataAndFocus, Temp_int_Array_Index_Variable) == 0x000060, "Member 'WB_TradePreview_C_GetIndividualItemDataAndFocus::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WB_TradePreview_C_GetIndividualItemDataAndFocus, Temp_int_Loop_Counter_Variable) == 0x000064, "Member 'WB_TradePreview_C_GetIndividualItemDataAndFocus::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WB_TradePreview_C_GetIndividualItemDataAndFocus, CallFunc_Add_IntInt_ReturnValue) == 0x000068, "Member 'WB_TradePreview_C_GetIndividualItemDataAndFocus::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_TradePreview_C_GetIndividualItemDataAndFocus, Temp_bool_Variable) == 0x00006C, "Member 'WB_TradePreview_C_GetIndividualItemDataAndFocus::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WB_TradePreview_C_GetIndividualItemDataAndFocus, CallFunc_Array_Get_Item) == 0x000070, "Member 'WB_TradePreview_C_GetIndividualItemDataAndFocus::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WB_TradePreview_C_GetIndividualItemDataAndFocus, CallFunc_Array_Length_ReturnValue) == 0x000078, "Member 'WB_TradePreview_C_GetIndividualItemDataAndFocus::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_TradePreview_C_GetIndividualItemDataAndFocus, CallFunc_GetSkinAndRecipeInfos_SkinInfo) == 0x000080, "Member 'WB_TradePreview_C_GetIndividualItemDataAndFocus::CallFunc_GetSkinAndRecipeInfos_SkinInfo' has a wrong offset!");
static_assert(offsetof(WB_TradePreview_C_GetIndividualItemDataAndFocus, CallFunc_GetSkinAndRecipeInfos_RecipeInfo) == 0x0000F8, "Member 'WB_TradePreview_C_GetIndividualItemDataAndFocus::CallFunc_GetSkinAndRecipeInfos_RecipeInfo' has a wrong offset!");
static_assert(offsetof(WB_TradePreview_C_GetIndividualItemDataAndFocus, CallFunc_Less_IntInt_ReturnValue) == 0x000170, "Member 'WB_TradePreview_C_GetIndividualItemDataAndFocus::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_TradePreview_C_GetIndividualItemDataAndFocus, CallFunc_Array_Add_ReturnValue) == 0x000174, "Member 'WB_TradePreview_C_GetIndividualItemDataAndFocus::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_TradePreview_C_GetIndividualItemDataAndFocus, CallFunc_GetTradingButtonData_Data) == 0x000178, "Member 'WB_TradePreview_C_GetIndividualItemDataAndFocus::CallFunc_GetTradingButtonData_Data' has a wrong offset!");
static_assert(offsetof(WB_TradePreview_C_GetIndividualItemDataAndFocus, CallFunc_Array_Add_ReturnValue_1) == 0x000180, "Member 'WB_TradePreview_C_GetIndividualItemDataAndFocus::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");

// Function WB_TradePreview.WB_TradePreview_C.GetTileView
// 0x0008 (0x0008 - 0x0000)
struct WB_TradePreview_C_GetTileView final
{
public:
	class UTileView*                              TileView;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_TradePreview_C_GetTileView) == 0x000008, "Wrong alignment on WB_TradePreview_C_GetTileView");
static_assert(sizeof(WB_TradePreview_C_GetTileView) == 0x000008, "Wrong size on WB_TradePreview_C_GetTileView");
static_assert(offsetof(WB_TradePreview_C_GetTileView, TileView) == 0x000000, "Member 'WB_TradePreview_C_GetTileView::TileView' has a wrong offset!");

// Function WB_TradePreview.WB_TradePreview_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WB_TradePreview_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_TradePreview_C_PreConstruct) == 0x000001, "Wrong alignment on WB_TradePreview_C_PreConstruct");
static_assert(sizeof(WB_TradePreview_C_PreConstruct) == 0x000001, "Wrong size on WB_TradePreview_C_PreConstruct");
static_assert(offsetof(WB_TradePreview_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WB_TradePreview_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WB_TradePreview.WB_TradePreview_C.ExecuteUbergraph_WB_TradePreview
// 0x0020 (0x0020 - 0x0000)
struct WB_TradePreview_C_ExecuteUbergraph_WB_TradePreview final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetEntryWidth_NewWidth_ImplicitCast;      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetEntryHeight_NewHeight_ImplicitCast;    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_TradePreview_C_ExecuteUbergraph_WB_TradePreview) == 0x000004, "Wrong alignment on WB_TradePreview_C_ExecuteUbergraph_WB_TradePreview");
static_assert(sizeof(WB_TradePreview_C_ExecuteUbergraph_WB_TradePreview) == 0x000020, "Wrong size on WB_TradePreview_C_ExecuteUbergraph_WB_TradePreview");
static_assert(offsetof(WB_TradePreview_C_ExecuteUbergraph_WB_TradePreview, EntryPoint) == 0x000000, "Member 'WB_TradePreview_C_ExecuteUbergraph_WB_TradePreview::EntryPoint' has a wrong offset!");
static_assert(offsetof(WB_TradePreview_C_ExecuteUbergraph_WB_TradePreview, K2Node_Event_IsDesignTime) == 0x000004, "Member 'WB_TradePreview_C_ExecuteUbergraph_WB_TradePreview::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WB_TradePreview_C_ExecuteUbergraph_WB_TradePreview, K2Node_MakeStruct_LinearColor) == 0x000008, "Member 'WB_TradePreview_C_ExecuteUbergraph_WB_TradePreview::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(WB_TradePreview_C_ExecuteUbergraph_WB_TradePreview, CallFunc_SetEntryWidth_NewWidth_ImplicitCast) == 0x000018, "Member 'WB_TradePreview_C_ExecuteUbergraph_WB_TradePreview::CallFunc_SetEntryWidth_NewWidth_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WB_TradePreview_C_ExecuteUbergraph_WB_TradePreview, CallFunc_SetEntryHeight_NewHeight_ImplicitCast) == 0x00001C, "Member 'WB_TradePreview_C_ExecuteUbergraph_WB_TradePreview::CallFunc_SetEntryHeight_NewHeight_ImplicitCast' has a wrong offset!");

}

