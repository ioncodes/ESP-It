#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PropWitchHuntModule

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum PropWitchHuntModule.UGCCreateItemResult
// NumValues: 0x0010
enum class EUGCCreateItemResult : uint8
{
	UGCResultOK                              = 0,
	UGCResultInsufficientPrivilege           = 1,
	UGCResultBanned                          = 2,
	UGCResultTimeout                         = 3,
	UGCResultNotLoggedOn                     = 4,
	UGCResultServiceUnavailable              = 5,
	UGCResultInvalidParam                    = 6,
	UGCResultAccessDenied                    = 7,
	UGCResultLimitExceeded                   = 8,
	UGCResultFileNotFound                    = 9,
	UGCResultDuplicateRequest                = 10,
	UGCResultDuplicateName                   = 11,
	UGCResultServiceReadOnly                 = 12,
	UGCResultUnkownError                     = 13,
	UGCResultSteamNotRunning                 = 14,
	UGCCreateItemResult_MAX                  = 15,
};

// Enum PropWitchHuntModule.UGCUpdateItemResult
// NumValues: 0x000A
enum class EUGCUpdateItemResult : uint8
{
	UGCUpdateItemResultOK                    = 0,
	UGCUpdateItemResultFail                  = 1,
	UGCUpdateItemResultInvalidParam          = 2,
	UGCUpdateItemResultAccessDenied          = 3,
	UGCUpdateItemResultFileNotFound          = 4,
	UGCUpdateItemResultLockingFailed         = 5,
	UGCUpdateItemResultLimitExceeded         = 6,
	UGCUpdateItemResultUnkownError           = 7,
	UGCUpdateItemResultSteamNotRunning       = 8,
	UGCUpdateItemResult_MAX                  = 9,
};

// Enum PropWitchHuntModule.EResultBRGBP
// NumValues: 0x006D
enum class EResultBRGBP : uint8
{
	R_INVALIDRESULT                          = 0,
	R_Ok                                     = 1,
	R_Fail                                   = 2,
	R_NoConnection                           = 3,
	R_InvalidPassword                        = 5,
	R_LoggedInElsewhere                      = 6,
	R_InvalidProtocolVer                     = 7,
	R_InvalidParam                           = 8,
	R_FileNotFound                           = 9,
	R_Busy                                   = 10,
	R_InvalidState                           = 11,
	R_InvalidName                            = 12,
	R_InvalidEmail                           = 13,
	R_DuplicateName                          = 14,
	R_AccessDenied                           = 15,
	R_Timeout                                = 16,
	R_Banned                                 = 17,
	R_AccountNotFound                        = 18,
	R_InvalidSteamID                         = 19,
	R_ServiceUnavailable                     = 20,
	R_NotLoggedOn                            = 21,
	R_Pending                                = 22,
	R_EncryptionFailure                      = 23,
	R_InsufficientPrivilege                  = 24,
	R_LimitExceeded                          = 25,
	R_Revoked                                = 26,
	R_Expired                                = 27,
	R_AlreadyRedeemed                        = 28,
	R_DuplicateRequest                       = 29,
	R_AlreadyOwned                           = 30,
	R_IPNotFound                             = 31,
	R_PersistFailed                          = 32,
	R_LockingFailed                          = 33,
	R_LogonSessionReplaced                   = 34,
	R_ConnectFailed                          = 35,
	R_HandshakeFailed                        = 36,
	R_IOFailure                              = 37,
	R_RemoteDisconnect                       = 38,
	R_ShoppingCartNotFound                   = 39,
	R_Blocked                                = 40,
	R_Ignored                                = 41,
	R_NoMatch                                = 42,
	R_AccountDisabled                        = 43,
	R_ServiceReadOnly                        = 44,
	R_AccountNotFeatured                     = 45,
	R_AdministratorOK                        = 46,
	R_ContentVersion                         = 47,
	R_TryAnotherCM                           = 48,
	R_PasswordRequiredToKickSession          = 49,
	R_AlreadyLoggedInElsewhere               = 50,
	R_Suspended                              = 51,
	R_Cancelled                              = 52,
	R_DataCorruption                         = 53,
	R_DiskFull                               = 54,
	R_RemoteCallFailed                       = 55,
	R_PasswordUnset                          = 56,
	R_ExternalAccountUnlinked                = 57,
	R_PSNTicketInvalid                       = 58,
	R_ExternalAccountAlreadyLinked           = 59,
	R_RemoteFileConflict                     = 60,
	R_IllegalPassword                        = 61,
	R_SameAsPreviousValue                    = 62,
	R_AccountLogonDenied                     = 63,
	R_CannotUseOldPassword                   = 64,
	R_InvalidLoginAuthCode                   = 65,
	R_AccountLogonDeniedNoMail               = 66,
	R_HardwareNotCapableOfIPT                = 67,
	R_IPTInitError                           = 68,
	R_ParentalControlRestricted              = 69,
	R_FacebookQueryError                     = 70,
	R_ExpiredLoginAuthCode                   = 71,
	R_IPLoginRestrictionFailed               = 72,
	R_AccountLockedDown                      = 73,
	R_AccountLogonDeniedVerifiedEmailRequired = 74,
	R_NoMatchingURL                          = 75,
	R_BadResponse                            = 76,
	R_RequirePasswordReEntry                 = 77,
	R_ValueOutOfRange                        = 78,
	R_UnexpectedError                        = 79,
	R_Disabled                               = 80,
	R_InvalidCEGSubmission                   = 81,
	R_RestrictedDevice                       = 82,
	R_RegionLocked                           = 83,
	R_RateLimitExceeded                      = 84,
	R_AccountLoginDeniedNeedTwoFactor        = 85,
	R_ItemDeleted                            = 86,
	R_AccountLoginDeniedThrottle             = 87,
	R_TwoFactorCodeMismatch                  = 88,
	R_TwoFactorActivationCodeMismatch        = 89,
	R_AccountAssociatedToMultiplePartners    = 90,
	R_NotModified                            = 91,
	R_NoMobileDevice                         = 92,
	R_TimeNotSynced                          = 93,
	R_SmsCodeFailed                          = 94,
	R_AccountLimitExceeded                   = 95,
	R_AccountActivityLimitExceeded           = 96,
	R_PhoneActivityLimitExceeded             = 97,
	R_RefundToWallet                         = 98,
	R_EmailSendFailure                       = 99,
	R_NotSettled                             = 100,
	R_NeedCaptcha                            = 101,
	R_GSLTDenied                             = 102,
	R_GSOwnerDenied                          = 103,
	R_InvalidItemType                        = 104,
	R_IPBanned                               = 105,
	R_GSLTExpired                            = 106,
	R_InsufficientFunds                      = 107,
	R_TooManyPending                         = 108,
	R_MAX                                    = 109,
};

// Enum PropWitchHuntModule.EItemVisibility
// NumValues: 0x0004
enum class EItemVisibility : uint8
{
	SIV_Public                               = 0,
	SIV_FriendsOnly                          = 1,
	SIV_Private                              = 2,
	SIV_MAX                                  = 3,
};

// Enum PropWitchHuntModule.ESupportedLanguages
// NumValues: 0x001C
enum class ESupportedLanguages : uint8
{
	Arabic                                   = 0,
	Bulgarian                                = 1,
	ChineseSimplified                        = 2,
	ChineseTraditional                       = 3,
	Czech                                    = 4,
	Danish                                   = 5,
	Dutch                                    = 6,
	English                                  = 7,
	Finnish                                  = 8,
	French                                   = 9,
	German                                   = 10,
	Greek                                    = 11,
	Hungarian                                = 12,
	Italian                                  = 13,
	Japanese                                 = 14,
	Korean                                   = 15,
	Norwegian                                = 16,
	Polish                                   = 17,
	Portuguese                               = 18,
	PortugueseBrazil                         = 19,
	Romanian                                 = 20,
	Russian                                  = 21,
	Spanish                                  = 22,
	Swedish                                  = 23,
	Thai                                     = 24,
	Turkish                                  = 25,
	Ukrainian                                = 26,
	ESupportedLanguages_MAX                  = 27,
};

// Enum PropWitchHuntModule.EItemPreviewTypeBRGBP
// NumValues: 0x0007
enum class EItemPreviewTypeBRGBP : uint8
{
	PT_Image                                 = 0,
	PT_YouTubeVideo                          = 1,
	PT_Sketchfab                             = 2,
	PT_EnvironmentMap_HorizontalCross        = 3,
	PT_EnvironmentMap_LatLong                = 4,
	PT_ReservedMax                           = 255,
	PT_MAX                                   = 256,
};

// Enum PropWitchHuntModule.EWorkshopFileTypeBRGBP
// NumValues: 0x0012
enum class EWorkshopFileTypeBRGBP : uint8
{
	WFT_First                                = 0,
	WFT_Community                            = 0,
	WFT_Microtransaction                     = 1,
	WFT_Collection                           = 2,
	WFT_Art                                  = 3,
	WFT_Video                                = 4,
	WFT_Screenshot                           = 5,
	WFT_Game                                 = 6,
	WFT_Software                             = 7,
	WFT_Concept                              = 8,
	WFT_WebGuide                             = 9,
	WFT_IntegratedGuide                      = 10,
	WFT_Merch                                = 11,
	WFT_ControllerBinding                    = 12,
	WFT_SteamworksAccessInvite               = 13,
	WFT_SteamVideo                           = 14,
	WFT_GameManagedItem                      = 15,
	WFT_Max                                  = 16,
};

// Enum PropWitchHuntModule.EEstablishUserReason
// NumValues: 0x0007
enum class EEstablishUserReason : uint8
{
	NONE                                     = 0,
	INITIAL_USER                             = 1,
	USER_WAS_INVALID                         = 2,
	CTRL_DISCONNECTED                        = 3,
	SIGNED_OUT                               = 4,
	REQUESTED                                = 5,
	EEstablishUserReason_MAX                 = 6,
};

// Enum PropWitchHuntModule.EUserControllerState
// NumValues: 0x0006
enum class EUserControllerState : uint8
{
	UNINITIALIZED                            = 0,
	INITIALIZED                              = 1,
	ESTABLISHING_INITIAL_USER                = 2,
	RUNNING                                  = 3,
	REESTABLISHING_USER                      = 4,
	EUserControllerState_MAX                 = 5,
};

// Enum PropWitchHuntModule.SkillInputType
// NumValues: 0x0003
enum class ESkillInputType : uint8
{
	SIT_Pressed                              = 0,
	SIT_IsPressed                            = 1,
	SIT_MAX                                  = 2,
};

// Enum PropWitchHuntModule.EInputMode
// NumValues: 0x0005
enum class EInputMode : uint8
{
	IM_GameOnly                              = 0,
	IM_UIOnly                                = 1,
	IM_GameAndUI                             = 2,
	IM_Invalid                               = 3,
	IM_MAX                                   = 4,
};

// Enum PropWitchHuntModule.EOverallQualityLevel
// NumValues: 0x0006
enum class EOverallQualityLevel : uint8
{
	Custom                                   = 0,
	Low                                      = 1,
	Medium                                   = 2,
	High                                     = 3,
	Epic                                     = 4,
	EOverallQualityLevel_MAX                 = 5,
};

// Enum PropWitchHuntModule.EUnrealPath
// NumValues: 0x0030
enum class EUnrealPath : uint8
{
	AutomationDir                            = 0,
	AutomationLogDir                         = 1,
	AutomationTransientDir                   = 2,
	BugItDir                                 = 3,
	CloudDir                                 = 4,
	DiffDir                                  = 5,
	EngineConfigDir                          = 6,
	EngineContentDir                         = 7,
	EngineDir                                = 8,
	EnginePluginsDir                         = 9,
	EngineSavedDir                           = 10,
	EngineSourceDir                          = 11,
	EngineUserDir                            = 12,
	EngineVersionAgnosticUserDir             = 13,
	EnterpriseDir                            = 14,
	EnterpriseFeaturePackDir                 = 15,
	EnterprisePluginsDir                     = 16,
	FeaturePackDir                           = 17,
	GameAgnosticSavedDir                     = 18,
	GameConfigDir                            = 19,
	GameContentDir                           = 20,
	GameDevelopersDir                        = 21,
	GameDir                                  = 22,
	GameLogDir                               = 23,
	GamePersistentDownloadDir                = 24,
	GamePluginsDir                           = 25,
	GameSavedDir                             = 26,
	GameSourceDir                            = 27,
	GameUserDeveloperDir                     = 28,
	GameUserDir                              = 29,
	GeneratedConfigDir                       = 30,
	LaunchDir                                = 31,
	ProfilingDir                             = 32,
	ProjectConfigDir                         = 33,
	ProjectContentDir                        = 34,
	ProjectDir                               = 35,
	ProjectLogDir                            = 36,
	ProjectModsDir                           = 37,
	ProjectPersistentDownloadDir             = 38,
	ProjectPluginsDir                        = 39,
	ProjectSavedDir                          = 40,
	ProjectUserDir                           = 41,
	RootDir                                  = 42,
	SandboxesDir                             = 43,
	ScreenShotDir                            = 44,
	SourceConfigDir                          = 45,
	VideoCaptureDir                          = 46,
	EUnrealPath_MAX                          = 47,
};

// Enum PropWitchHuntModule.EUpdateMatchStatus
// NumValues: 0x0005
enum class EUpdateMatchStatus : uint8
{
	Invalid                                  = 0,
	InProgress                               = 1,
	Paused                                   = 2,
	Aborted                                  = 3,
	EUpdateMatchStatus_MAX                   = 4,
};

// Enum PropWitchHuntModule.UGCItemVisibility
// NumValues: 0x0004
enum class EUGCItemVisibility : uint8
{
	UGCPublic                                = 0,
	UGCFriendsOnly                           = 1,
	UGCPrivate                               = 2,
	UGCItemVisibility_MAX                    = 3,
};

// Enum PropWitchHuntModule.EUserUGCListBRGBP
// NumValues: 0x000A
enum class EUserUGCListBRGBP : uint8
{
	L_Published                              = 0,
	L_VotedOn                                = 1,
	L_VotedUp                                = 2,
	L_VotedDown                              = 3,
	L_WillVoteLater                          = 4,
	L_Favorited                              = 5,
	L_Subscribed                             = 6,
	L_UsedOrPlayed                           = 7,
	L_Followed                               = 8,
	L_MAX                                    = 9,
};

// Enum PropWitchHuntModule.EUGCMatchingUGCTypeBRGBP
// NumValues: 0x000F
enum class EUGCMatchingUGCTypeBRGBP : uint8
{
	T_Items                                  = 0,
	T_Items_Mtx                              = 1,
	T_Items_ReadyToUse                       = 2,
	T_Collections                            = 3,
	T_Artwork                                = 4,
	T_Videos                                 = 5,
	T_Screenshots                            = 6,
	T_AllGuides                              = 7,
	T_WebGuides                              = 8,
	T_IntegratedGuides                       = 9,
	T_UsableInGame                           = 10,
	T_ControllerBindings                     = 11,
	T_GameManagedItems                       = 12,
	T_All                                    = 255,
	T_MAX                                    = 256,
};

// Enum PropWitchHuntModule.EUserUGCListSortOrderBRGBP
// NumValues: 0x0008
enum class EUserUGCListSortOrderBRGBP : uint8
{
	SO_CreationOrderDesc                     = 0,
	SO_CreationOrderAsc                      = 1,
	SO_TitleAsc                              = 2,
	SO_LastUpdatedDesc                       = 3,
	SO_SubscriptionDateDesc                  = 4,
	SO_VoteScoreDesc                         = 5,
	SO_ForModeration                         = 6,
	SO_MAX                                   = 7,
};

// Enum PropWitchHuntModule.EUGCQueryBRGBP
// NumValues: 0x0014
enum class EUGCQueryBRGBP : uint8
{
	UQ_RankedByVote                          = 0,
	UQ_RankedByPublicationDate               = 1,
	UQ_AcceptedForGameRankedByAcceptanceDate = 2,
	UQ_RankedByTrend                         = 3,
	UQ_FavoritedByFriendsRankedByPublicationDate = 4,
	UQ_CreatedByFriendsRankedByPublicationDate = 5,
	UQ_RankedByNumTimesReported              = 6,
	UQ_CreatedByFollowedUsersRankedByPublicationDate = 7,
	UQ_NotYetRated                           = 8,
	UQ_RankedByTotalVotesAsc                 = 9,
	UQ_RankedByVotesUp                       = 10,
	UQ_RankedByTextSearch                    = 11,
	UQ_RankedByTotalUniqueSubscriptions      = 12,
	UQ_RankedByPlaytimeTrend                 = 13,
	UQ_RankedByTotalPlaytime                 = 14,
	UQ_RankedByAveragePlaytimeTrend          = 15,
	UQ_RankedByLifetimeAveragePlaytime       = 16,
	UQ_RankedByPlaytimeSessionsTrend         = 17,
	UQ_RankedByLifetimePlaytimeSessions      = 18,
	UQ_MAX                                   = 19,
};

// ScriptStruct PropWitchHuntModule.KeyValuePairBRG
// 0x0020 (0x0020 - 0x0000)
struct FKeyValuePairBRG final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKeyValuePairBRG) == 0x000008, "Wrong alignment on FKeyValuePairBRG");
static_assert(sizeof(FKeyValuePairBRG) == 0x000020, "Wrong size on FKeyValuePairBRG");
static_assert(offsetof(FKeyValuePairBRG, Key) == 0x000000, "Member 'FKeyValuePairBRG::Key' has a wrong offset!");
static_assert(offsetof(FKeyValuePairBRG, Value) == 0x000010, "Member 'FKeyValuePairBRG::Value' has a wrong offset!");

// ScriptStruct PropWitchHuntModule.ResultBRG
// 0x0001 (0x0001 - 0x0000)
struct FResultBRG
{
public:
	EResultBRGBP                                  Result;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResultBRG) == 0x000001, "Wrong alignment on FResultBRG");
static_assert(sizeof(FResultBRG) == 0x000001, "Wrong size on FResultBRG");
static_assert(offsetof(FResultBRG, Result) == 0x000000, "Member 'FResultBRG::Result' has a wrong offset!");

// ScriptStruct PropWitchHuntModule.UInt64BRG
// 0x0008 (0x0008 - 0x0000)
struct FUInt64BRG final
{
public:
	uint64                                        Value;                                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUInt64BRG) == 0x000008, "Wrong alignment on FUInt64BRG");
static_assert(sizeof(FUInt64BRG) == 0x000008, "Wrong size on FUInt64BRG");
static_assert(offsetof(FUInt64BRG, Value) == 0x000000, "Member 'FUInt64BRG::Value' has a wrong offset!");

// ScriptStruct PropWitchHuntModule.UGCItemId
// 0x0008 (0x0008 - 0x0000)
struct FUGCItemId final
{
public:
	struct FUInt64BRG                             ID;                                                // 0x0000(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUGCItemId) == 0x000008, "Wrong alignment on FUGCItemId");
static_assert(sizeof(FUGCItemId) == 0x000008, "Wrong size on FUGCItemId");
static_assert(offsetof(FUGCItemId, ID) == 0x000000, "Member 'FUGCItemId::ID' has a wrong offset!");

// ScriptStruct PropWitchHuntModule.GeneralWorkshopItemResultBRG
// 0x000F (0x0010 - 0x0001)
struct FGeneralWorkshopItemResultBRG : public FResultBRG
{
public:
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUGCItemId                             WorkshopItemID;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeneralWorkshopItemResultBRG) == 0x000008, "Wrong alignment on FGeneralWorkshopItemResultBRG");
static_assert(sizeof(FGeneralWorkshopItemResultBRG) == 0x000010, "Wrong size on FGeneralWorkshopItemResultBRG");
static_assert(offsetof(FGeneralWorkshopItemResultBRG, WorkshopItemID) == 0x000008, "Member 'FGeneralWorkshopItemResultBRG::WorkshopItemID' has a wrong offset!");

// ScriptStruct PropWitchHuntModule.UGCQueryParameterTagsAllUserDetails
// 0x0010 (0x0010 - 0x0000)
struct FUGCQueryParameterTagsAllUserDetails
{
public:
	TArray<struct FKeyValuePairBRG>               RequiredKeyValueTags;                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUGCQueryParameterTagsAllUserDetails) == 0x000008, "Wrong alignment on FUGCQueryParameterTagsAllUserDetails");
static_assert(sizeof(FUGCQueryParameterTagsAllUserDetails) == 0x000010, "Wrong size on FUGCQueryParameterTagsAllUserDetails");
static_assert(offsetof(FUGCQueryParameterTagsAllUserDetails, RequiredKeyValueTags) == 0x000000, "Member 'FUGCQueryParameterTagsAllUserDetails::RequiredKeyValueTags' has a wrong offset!");

// ScriptStruct PropWitchHuntModule.UGCQueryParameterTagsAllUser
// 0x0020 (0x0030 - 0x0010)
struct FUGCQueryParameterTagsAllUser final : public FUGCQueryParameterTagsAllUserDetails
{
public:
	TArray<class FString>                         RequiredTags;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class FString>                         ExcludedTags;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUGCQueryParameterTagsAllUser) == 0x000008, "Wrong alignment on FUGCQueryParameterTagsAllUser");
static_assert(sizeof(FUGCQueryParameterTagsAllUser) == 0x000030, "Wrong size on FUGCQueryParameterTagsAllUser");
static_assert(offsetof(FUGCQueryParameterTagsAllUser, RequiredTags) == 0x000010, "Member 'FUGCQueryParameterTagsAllUser::RequiredTags' has a wrong offset!");
static_assert(offsetof(FUGCQueryParameterTagsAllUser, ExcludedTags) == 0x000020, "Member 'FUGCQueryParameterTagsAllUser::ExcludedTags' has a wrong offset!");

// ScriptStruct PropWitchHuntModule.UGCQueryParameterAllUserDetails
// 0x0014 (0x0014 - 0x0000)
struct FUGCQueryParameterAllUserDetails
{
public:
	int32                                         PageId;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESupportedLanguages                           Language;                                          // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AllowedCacheResponseTime;                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumDaysPlaytime;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bReturnPreviewUrl : 1;                             // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bReturnKeyValueTags : 1;                           // 0x0010(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bReturnFullDescription : 1;                        // 0x0010(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bReturnMetaData : 1;                               // 0x0010(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bReturnChildIds : 1;                               // 0x0010(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bReturnAdditionalPreviews : 1;                     // 0x0010(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUGCQueryParameterAllUserDetails) == 0x000004, "Wrong alignment on FUGCQueryParameterAllUserDetails");
static_assert(sizeof(FUGCQueryParameterAllUserDetails) == 0x000014, "Wrong size on FUGCQueryParameterAllUserDetails");
static_assert(offsetof(FUGCQueryParameterAllUserDetails, PageId) == 0x000000, "Member 'FUGCQueryParameterAllUserDetails::PageId' has a wrong offset!");
static_assert(offsetof(FUGCQueryParameterAllUserDetails, Language) == 0x000004, "Member 'FUGCQueryParameterAllUserDetails::Language' has a wrong offset!");
static_assert(offsetof(FUGCQueryParameterAllUserDetails, AllowedCacheResponseTime) == 0x000008, "Member 'FUGCQueryParameterAllUserDetails::AllowedCacheResponseTime' has a wrong offset!");
static_assert(offsetof(FUGCQueryParameterAllUserDetails, NumDaysPlaytime) == 0x00000C, "Member 'FUGCQueryParameterAllUserDetails::NumDaysPlaytime' has a wrong offset!");

// ScriptStruct PropWitchHuntModule.UGCQueryParameterAllUser
// 0x003C (0x0050 - 0x0014)
struct FUGCQueryParameterAllUser : public FUGCQueryParameterAllUserDetails
{
public:
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUGCQueryParameterTagsAllUser          TagParameter;                                      // 0x0018(0x0030)(Edit, BlueprintVisible, EditConst, NativeAccessSpecifierPublic)
	bool                                          bReturnTotalOnly;                                  // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReturnIdsOnly;                                    // 0x0049(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUGCQueryParameterAllUser) == 0x000008, "Wrong alignment on FUGCQueryParameterAllUser");
static_assert(sizeof(FUGCQueryParameterAllUser) == 0x000050, "Wrong size on FUGCQueryParameterAllUser");
static_assert(offsetof(FUGCQueryParameterAllUser, TagParameter) == 0x000018, "Member 'FUGCQueryParameterAllUser::TagParameter' has a wrong offset!");
static_assert(offsetof(FUGCQueryParameterAllUser, bReturnTotalOnly) == 0x000048, "Member 'FUGCQueryParameterAllUser::bReturnTotalOnly' has a wrong offset!");
static_assert(offsetof(FUGCQueryParameterAllUser, bReturnIdsOnly) == 0x000049, "Member 'FUGCQueryParameterAllUser::bReturnIdsOnly' has a wrong offset!");

// ScriptStruct PropWitchHuntModule.UGCQueryParameterAll
// 0x0018 (0x0068 - 0x0050)
struct FUGCQueryParameterAll final : public FUGCQueryParameterAllUser
{
public:
	class FString                                 SearchText;                                        // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankedByTrendDays;                                 // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchAnyTag;                                      // 0x0064(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUGCQueryBRGBP                                QueryType;                                         // 0x0065(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUGCMatchingUGCTypeBRGBP                      FileType;                                          // 0x0066(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_67[0x1];                                       // 0x0067(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUGCQueryParameterAll) == 0x000008, "Wrong alignment on FUGCQueryParameterAll");
static_assert(sizeof(FUGCQueryParameterAll) == 0x000068, "Wrong size on FUGCQueryParameterAll");
static_assert(offsetof(FUGCQueryParameterAll, SearchText) == 0x000050, "Member 'FUGCQueryParameterAll::SearchText' has a wrong offset!");
static_assert(offsetof(FUGCQueryParameterAll, RankedByTrendDays) == 0x000060, "Member 'FUGCQueryParameterAll::RankedByTrendDays' has a wrong offset!");
static_assert(offsetof(FUGCQueryParameterAll, bMatchAnyTag) == 0x000064, "Member 'FUGCQueryParameterAll::bMatchAnyTag' has a wrong offset!");
static_assert(offsetof(FUGCQueryParameterAll, QueryType) == 0x000065, "Member 'FUGCQueryParameterAll::QueryType' has a wrong offset!");
static_assert(offsetof(FUGCQueryParameterAll, FileType) == 0x000066, "Member 'FUGCQueryParameterAll::FileType' has a wrong offset!");

// ScriptStruct PropWitchHuntModule.UGCQueryParameterUser
// 0x0018 (0x0068 - 0x0050)
struct FUGCQueryParameterUser final : public FUGCQueryParameterAllUser
{
public:
	class FString                                 FilenameFilter;                                    // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUserUGCListBRGBP                             List;                                              // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUGCMatchingUGCTypeBRGBP                      Type;                                              // 0x0061(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUserUGCListSortOrderBRGBP                    SortOrder;                                         // 0x0062(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_63[0x5];                                       // 0x0063(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUGCQueryParameterUser) == 0x000008, "Wrong alignment on FUGCQueryParameterUser");
static_assert(sizeof(FUGCQueryParameterUser) == 0x000068, "Wrong size on FUGCQueryParameterUser");
static_assert(offsetof(FUGCQueryParameterUser, FilenameFilter) == 0x000050, "Member 'FUGCQueryParameterUser::FilenameFilter' has a wrong offset!");
static_assert(offsetof(FUGCQueryParameterUser, List) == 0x000060, "Member 'FUGCQueryParameterUser::List' has a wrong offset!");
static_assert(offsetof(FUGCQueryParameterUser, Type) == 0x000061, "Member 'FUGCQueryParameterUser::Type' has a wrong offset!");
static_assert(offsetof(FUGCQueryParameterUser, SortOrder) == 0x000062, "Member 'FUGCQueryParameterUser::SortOrder' has a wrong offset!");

// ScriptStruct PropWitchHuntModule.UpdateWorkshopItemResultBRG
// 0x0008 (0x0018 - 0x0010)
struct FUpdateWorkshopItemResultBRG : public FGeneralWorkshopItemResultBRG
{
public:
	bool                                          bUserNeedsToAcceptWorkshopLegalAgreement;          // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUpdateWorkshopItemResultBRG) == 0x000008, "Wrong alignment on FUpdateWorkshopItemResultBRG");
static_assert(sizeof(FUpdateWorkshopItemResultBRG) == 0x000018, "Wrong size on FUpdateWorkshopItemResultBRG");
static_assert(offsetof(FUpdateWorkshopItemResultBRG, bUserNeedsToAcceptWorkshopLegalAgreement) == 0x000010, "Member 'FUpdateWorkshopItemResultBRG::bUserNeedsToAcceptWorkshopLegalAgreement' has a wrong offset!");

// ScriptStruct PropWitchHuntModule.WorkshopUpdateDetails
// 0x00D0 (0x00D0 - 0x0000)
struct FWorkshopUpdateDetails final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UpdateNotice;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESupportedLanguages                           UpdateLanguage;                                    // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MetaData;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemVisibility                               Visibility;                                        // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Tags;                                              // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FKeyValuePairBRG>               KeyValueTags;                                      // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class FString                                 ContentDirectory;                                  // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PreviewImage;                                      // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         AdditionalImages;                                  // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class FString>                         YoutubeVideoIDs;                                   // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class FString>                         KeysOfKeyValueTagsToRemove;                        // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<int32>                                 IndexOfPreviewToRemove;                            // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWorkshopUpdateDetails) == 0x000008, "Wrong alignment on FWorkshopUpdateDetails");
static_assert(sizeof(FWorkshopUpdateDetails) == 0x0000D0, "Wrong size on FWorkshopUpdateDetails");
static_assert(offsetof(FWorkshopUpdateDetails, Title) == 0x000000, "Member 'FWorkshopUpdateDetails::Title' has a wrong offset!");
static_assert(offsetof(FWorkshopUpdateDetails, Description) == 0x000010, "Member 'FWorkshopUpdateDetails::Description' has a wrong offset!");
static_assert(offsetof(FWorkshopUpdateDetails, UpdateNotice) == 0x000020, "Member 'FWorkshopUpdateDetails::UpdateNotice' has a wrong offset!");
static_assert(offsetof(FWorkshopUpdateDetails, UpdateLanguage) == 0x000030, "Member 'FWorkshopUpdateDetails::UpdateLanguage' has a wrong offset!");
static_assert(offsetof(FWorkshopUpdateDetails, MetaData) == 0x000038, "Member 'FWorkshopUpdateDetails::MetaData' has a wrong offset!");
static_assert(offsetof(FWorkshopUpdateDetails, Visibility) == 0x000048, "Member 'FWorkshopUpdateDetails::Visibility' has a wrong offset!");
static_assert(offsetof(FWorkshopUpdateDetails, Tags) == 0x000050, "Member 'FWorkshopUpdateDetails::Tags' has a wrong offset!");
static_assert(offsetof(FWorkshopUpdateDetails, KeyValueTags) == 0x000060, "Member 'FWorkshopUpdateDetails::KeyValueTags' has a wrong offset!");
static_assert(offsetof(FWorkshopUpdateDetails, ContentDirectory) == 0x000070, "Member 'FWorkshopUpdateDetails::ContentDirectory' has a wrong offset!");
static_assert(offsetof(FWorkshopUpdateDetails, PreviewImage) == 0x000080, "Member 'FWorkshopUpdateDetails::PreviewImage' has a wrong offset!");
static_assert(offsetof(FWorkshopUpdateDetails, AdditionalImages) == 0x000090, "Member 'FWorkshopUpdateDetails::AdditionalImages' has a wrong offset!");
static_assert(offsetof(FWorkshopUpdateDetails, YoutubeVideoIDs) == 0x0000A0, "Member 'FWorkshopUpdateDetails::YoutubeVideoIDs' has a wrong offset!");
static_assert(offsetof(FWorkshopUpdateDetails, KeysOfKeyValueTagsToRemove) == 0x0000B0, "Member 'FWorkshopUpdateDetails::KeysOfKeyValueTagsToRemove' has a wrong offset!");
static_assert(offsetof(FWorkshopUpdateDetails, IndexOfPreviewToRemove) == 0x0000C0, "Member 'FWorkshopUpdateDetails::IndexOfPreviewToRemove' has a wrong offset!");

// ScriptStruct PropWitchHuntModule.CreateWorkshopItemResultBRG
// 0x00D0 (0x00E8 - 0x0018)
struct FCreateWorkshopItemResultBRG final : public FUpdateWorkshopItemResultBRG
{
public:
	struct FWorkshopUpdateDetails                 ItemDetails;                                       // 0x0018(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCreateWorkshopItemResultBRG) == 0x000008, "Wrong alignment on FCreateWorkshopItemResultBRG");
static_assert(sizeof(FCreateWorkshopItemResultBRG) == 0x0000E8, "Wrong size on FCreateWorkshopItemResultBRG");
static_assert(offsetof(FCreateWorkshopItemResultBRG, ItemDetails) == 0x000018, "Member 'FCreateWorkshopItemResultBRG::ItemDetails' has a wrong offset!");

// ScriptStruct PropWitchHuntModule.UGCQueryHandle
// 0x0008 (0x0008 - 0x0000)
struct FUGCQueryHandle final
{
public:
	struct FUInt64BRG                             Handle;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUGCQueryHandle) == 0x000008, "Wrong alignment on FUGCQueryHandle");
static_assert(sizeof(FUGCQueryHandle) == 0x000008, "Wrong size on FUGCQueryHandle");
static_assert(offsetof(FUGCQueryHandle, Handle) == 0x000000, "Member 'FUGCQueryHandle::Handle' has a wrong offset!");

// ScriptStruct PropWitchHuntModule.UInt32BRG
// 0x0004 (0x0004 - 0x0000)
struct FUInt32BRG final
{
public:
	uint32                                        Value;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUInt32BRG) == 0x000004, "Wrong alignment on FUInt32BRG");
static_assert(sizeof(FUInt32BRG) == 0x000004, "Wrong size on FUInt32BRG");
static_assert(offsetof(FUInt32BRG, Value) == 0x000000, "Member 'FUInt32BRG::Value' has a wrong offset!");

// ScriptStruct PropWitchHuntModule.AppIdBRG
// 0x0004 (0x0004 - 0x0000)
struct FAppIdBRG final
{
public:
	struct FUInt32BRG                             ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, EditConst, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAppIdBRG) == 0x000004, "Wrong alignment on FAppIdBRG");
static_assert(sizeof(FAppIdBRG) == 0x000004, "Wrong size on FAppIdBRG");
static_assert(offsetof(FAppIdBRG, ID) == 0x000000, "Member 'FAppIdBRG::ID' has a wrong offset!");

// ScriptStruct PropWitchHuntModule.UGCHandle
// 0x0008 (0x0008 - 0x0000)
struct FUGCHandle final
{
public:
	struct FUInt64BRG                             Handle;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUGCHandle) == 0x000008, "Wrong alignment on FUGCHandle");
static_assert(sizeof(FUGCHandle) == 0x000008, "Wrong size on FUGCHandle");
static_assert(offsetof(FUGCHandle, Handle) == 0x000000, "Member 'FUGCHandle::Handle' has a wrong offset!");

// ScriptStruct PropWitchHuntModule.ItemPreviewDetailsBRG
// 0x0028 (0x0028 - 0x0000)
struct FItemPreviewDetailsBRG final
{
public:
	class FString                                 UrlOrVideoId;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OriginalFileName;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemPreviewTypeBRGBP                         ItemType;                                          // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemPreviewDetailsBRG) == 0x000008, "Wrong alignment on FItemPreviewDetailsBRG");
static_assert(sizeof(FItemPreviewDetailsBRG) == 0x000028, "Wrong size on FItemPreviewDetailsBRG");
static_assert(offsetof(FItemPreviewDetailsBRG, UrlOrVideoId) == 0x000000, "Member 'FItemPreviewDetailsBRG::UrlOrVideoId' has a wrong offset!");
static_assert(offsetof(FItemPreviewDetailsBRG, OriginalFileName) == 0x000010, "Member 'FItemPreviewDetailsBRG::OriginalFileName' has a wrong offset!");
static_assert(offsetof(FItemPreviewDetailsBRG, ItemType) == 0x000020, "Member 'FItemPreviewDetailsBRG::ItemType' has a wrong offset!");

// ScriptStruct PropWitchHuntModule.WorkshopItemDetails
// 0x0110 (0x0110 - 0x0000)
struct FWorkshopItemDetails final
{
public:
	EResultBRGBP                                  Result;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUGCItemId                             WorkshopItemID;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	EWorkshopFileTypeBRGBP                        FileType;                                          // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAppIdBRG                              AppIdCreatingApp;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FAppIdBRG                              AppIdUsingApp;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Title;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUInt64BRG                             UserIdItemCreator;                                 // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FDateTime                              TimeStampCreated;                                  // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              TimeStampUpdated;                                  // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              TimeStampAddedToUserList;                          // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemVisibility                               Visibility;                                        // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bItemIsBanned;                                     // 0x0061(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bItemWasAcceptedByDevelopers;                      // 0x0062(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTagsTruncated;                                    // 0x0063(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Tags;                                              // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	struct FUGCHandle                             PrimaryFileHandle;                                 // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FUGCHandle                             PreviewImageHandle;                                // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 PrimaryFileCloudFilename;                          // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PrimaryFileSize;                                   // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreviewImageSize;                                  // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WebsiteURL;                                        // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VotesUp;                                           // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VotesDown;                                         // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Score;                                             // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUInt32BRG                             NumChildren;                                       // 0x00BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 PreviewUrl;                                        // 0x00C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FItemPreviewDetailsBRG>         AdditionalPreviews;                                // 0x00D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FUGCItemId>                     ChildItemIds;                                      // 0x00E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FKeyValuePairBRG>               KeyValueTags;                                      // 0x00F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class FString                                 MetaData;                                          // 0x0100(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWorkshopItemDetails) == 0x000008, "Wrong alignment on FWorkshopItemDetails");
static_assert(sizeof(FWorkshopItemDetails) == 0x000110, "Wrong size on FWorkshopItemDetails");
static_assert(offsetof(FWorkshopItemDetails, Result) == 0x000000, "Member 'FWorkshopItemDetails::Result' has a wrong offset!");
static_assert(offsetof(FWorkshopItemDetails, WorkshopItemID) == 0x000008, "Member 'FWorkshopItemDetails::WorkshopItemID' has a wrong offset!");
static_assert(offsetof(FWorkshopItemDetails, FileType) == 0x000010, "Member 'FWorkshopItemDetails::FileType' has a wrong offset!");
static_assert(offsetof(FWorkshopItemDetails, AppIdCreatingApp) == 0x000014, "Member 'FWorkshopItemDetails::AppIdCreatingApp' has a wrong offset!");
static_assert(offsetof(FWorkshopItemDetails, AppIdUsingApp) == 0x000018, "Member 'FWorkshopItemDetails::AppIdUsingApp' has a wrong offset!");
static_assert(offsetof(FWorkshopItemDetails, Title) == 0x000020, "Member 'FWorkshopItemDetails::Title' has a wrong offset!");
static_assert(offsetof(FWorkshopItemDetails, Description) == 0x000030, "Member 'FWorkshopItemDetails::Description' has a wrong offset!");
static_assert(offsetof(FWorkshopItemDetails, UserIdItemCreator) == 0x000040, "Member 'FWorkshopItemDetails::UserIdItemCreator' has a wrong offset!");
static_assert(offsetof(FWorkshopItemDetails, TimeStampCreated) == 0x000048, "Member 'FWorkshopItemDetails::TimeStampCreated' has a wrong offset!");
static_assert(offsetof(FWorkshopItemDetails, TimeStampUpdated) == 0x000050, "Member 'FWorkshopItemDetails::TimeStampUpdated' has a wrong offset!");
static_assert(offsetof(FWorkshopItemDetails, TimeStampAddedToUserList) == 0x000058, "Member 'FWorkshopItemDetails::TimeStampAddedToUserList' has a wrong offset!");
static_assert(offsetof(FWorkshopItemDetails, Visibility) == 0x000060, "Member 'FWorkshopItemDetails::Visibility' has a wrong offset!");
static_assert(offsetof(FWorkshopItemDetails, bItemIsBanned) == 0x000061, "Member 'FWorkshopItemDetails::bItemIsBanned' has a wrong offset!");
static_assert(offsetof(FWorkshopItemDetails, bItemWasAcceptedByDevelopers) == 0x000062, "Member 'FWorkshopItemDetails::bItemWasAcceptedByDevelopers' has a wrong offset!");
static_assert(offsetof(FWorkshopItemDetails, bTagsTruncated) == 0x000063, "Member 'FWorkshopItemDetails::bTagsTruncated' has a wrong offset!");
static_assert(offsetof(FWorkshopItemDetails, Tags) == 0x000068, "Member 'FWorkshopItemDetails::Tags' has a wrong offset!");
static_assert(offsetof(FWorkshopItemDetails, PrimaryFileHandle) == 0x000078, "Member 'FWorkshopItemDetails::PrimaryFileHandle' has a wrong offset!");
static_assert(offsetof(FWorkshopItemDetails, PreviewImageHandle) == 0x000080, "Member 'FWorkshopItemDetails::PreviewImageHandle' has a wrong offset!");
static_assert(offsetof(FWorkshopItemDetails, PrimaryFileCloudFilename) == 0x000088, "Member 'FWorkshopItemDetails::PrimaryFileCloudFilename' has a wrong offset!");
static_assert(offsetof(FWorkshopItemDetails, PrimaryFileSize) == 0x000098, "Member 'FWorkshopItemDetails::PrimaryFileSize' has a wrong offset!");
static_assert(offsetof(FWorkshopItemDetails, PreviewImageSize) == 0x00009C, "Member 'FWorkshopItemDetails::PreviewImageSize' has a wrong offset!");
static_assert(offsetof(FWorkshopItemDetails, WebsiteURL) == 0x0000A0, "Member 'FWorkshopItemDetails::WebsiteURL' has a wrong offset!");
static_assert(offsetof(FWorkshopItemDetails, VotesUp) == 0x0000B0, "Member 'FWorkshopItemDetails::VotesUp' has a wrong offset!");
static_assert(offsetof(FWorkshopItemDetails, VotesDown) == 0x0000B4, "Member 'FWorkshopItemDetails::VotesDown' has a wrong offset!");
static_assert(offsetof(FWorkshopItemDetails, Score) == 0x0000B8, "Member 'FWorkshopItemDetails::Score' has a wrong offset!");
static_assert(offsetof(FWorkshopItemDetails, NumChildren) == 0x0000BC, "Member 'FWorkshopItemDetails::NumChildren' has a wrong offset!");
static_assert(offsetof(FWorkshopItemDetails, PreviewUrl) == 0x0000C0, "Member 'FWorkshopItemDetails::PreviewUrl' has a wrong offset!");
static_assert(offsetof(FWorkshopItemDetails, AdditionalPreviews) == 0x0000D0, "Member 'FWorkshopItemDetails::AdditionalPreviews' has a wrong offset!");
static_assert(offsetof(FWorkshopItemDetails, ChildItemIds) == 0x0000E0, "Member 'FWorkshopItemDetails::ChildItemIds' has a wrong offset!");
static_assert(offsetof(FWorkshopItemDetails, KeyValueTags) == 0x0000F0, "Member 'FWorkshopItemDetails::KeyValueTags' has a wrong offset!");
static_assert(offsetof(FWorkshopItemDetails, MetaData) == 0x000100, "Member 'FWorkshopItemDetails::MetaData' has a wrong offset!");

// ScriptStruct PropWitchHuntModule.QueryWorkshopForItemsResultBRG
// 0x002F (0x0030 - 0x0001)
struct FQueryWorkshopForItemsResultBRG : public FResultBRG
{
public:
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUGCQueryHandle                        QueryHandle;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FUInt32BRG                             NumResultsReturned;                                // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FUInt32BRG                             NumMatchingResults;                                // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bHasMorePages;                                     // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRetrievedDataWasCached;                           // 0x0019(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWorkshopItemDetails>           Items;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQueryWorkshopForItemsResultBRG) == 0x000008, "Wrong alignment on FQueryWorkshopForItemsResultBRG");
static_assert(sizeof(FQueryWorkshopForItemsResultBRG) == 0x000030, "Wrong size on FQueryWorkshopForItemsResultBRG");
static_assert(offsetof(FQueryWorkshopForItemsResultBRG, QueryHandle) == 0x000008, "Member 'FQueryWorkshopForItemsResultBRG::QueryHandle' has a wrong offset!");
static_assert(offsetof(FQueryWorkshopForItemsResultBRG, NumResultsReturned) == 0x000010, "Member 'FQueryWorkshopForItemsResultBRG::NumResultsReturned' has a wrong offset!");
static_assert(offsetof(FQueryWorkshopForItemsResultBRG, NumMatchingResults) == 0x000014, "Member 'FQueryWorkshopForItemsResultBRG::NumMatchingResults' has a wrong offset!");
static_assert(offsetof(FQueryWorkshopForItemsResultBRG, bHasMorePages) == 0x000018, "Member 'FQueryWorkshopForItemsResultBRG::bHasMorePages' has a wrong offset!");
static_assert(offsetof(FQueryWorkshopForItemsResultBRG, bRetrievedDataWasCached) == 0x000019, "Member 'FQueryWorkshopForItemsResultBRG::bRetrievedDataWasCached' has a wrong offset!");
static_assert(offsetof(FQueryWorkshopForItemsResultBRG, Items) == 0x000020, "Member 'FQueryWorkshopForItemsResultBRG::Items' has a wrong offset!");

// ScriptStruct PropWitchHuntModule.MatchTeamResult
// 0x0018 (0x0018 - 0x0000)
struct FMatchTeamResult final
{
public:
	class FString                                 TeamID;                                            // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchTeamResult) == 0x000008, "Wrong alignment on FMatchTeamResult");
static_assert(sizeof(FMatchTeamResult) == 0x000018, "Wrong size on FMatchTeamResult");
static_assert(offsetof(FMatchTeamResult, TeamID) == 0x000000, "Member 'FMatchTeamResult::TeamID' has a wrong offset!");
static_assert(offsetof(FMatchTeamResult, Rank) == 0x000010, "Member 'FMatchTeamResult::Rank' has a wrong offset!");

// ScriptStruct PropWitchHuntModule.ActorToSave
// 0x0060 (0x0060 - 0x0000)
struct FActorToSave
{
public:
	struct FPrimaryAssetId                        PrimaryAssetId;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0028(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0040(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Activated;                                         // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ID;                                                // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActorToSave) == 0x000008, "Wrong alignment on FActorToSave");
static_assert(sizeof(FActorToSave) == 0x000060, "Wrong size on FActorToSave");
static_assert(offsetof(FActorToSave, PrimaryAssetId) == 0x000000, "Member 'FActorToSave::PrimaryAssetId' has a wrong offset!");
static_assert(offsetof(FActorToSave, Location) == 0x000010, "Member 'FActorToSave::Location' has a wrong offset!");
static_assert(offsetof(FActorToSave, Rotation) == 0x000028, "Member 'FActorToSave::Rotation' has a wrong offset!");
static_assert(offsetof(FActorToSave, Scale) == 0x000040, "Member 'FActorToSave::Scale' has a wrong offset!");
static_assert(offsetof(FActorToSave, Activated) == 0x000058, "Member 'FActorToSave::Activated' has a wrong offset!");
static_assert(offsetof(FActorToSave, ID) == 0x00005C, "Member 'FActorToSave::ID' has a wrong offset!");

// ScriptStruct PropWitchHuntModule.PropToSave
// 0x0008 (0x0068 - 0x0060)
struct FPropToSave final : public FActorToSave
{
public:
	bool                                          StartAwake;                                        // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFreezed;                                         // 0x0061(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPropToSave) == 0x000008, "Wrong alignment on FPropToSave");
static_assert(sizeof(FPropToSave) == 0x000068, "Wrong size on FPropToSave");
static_assert(offsetof(FPropToSave, StartAwake) == 0x000060, "Member 'FPropToSave::StartAwake' has a wrong offset!");
static_assert(offsetof(FPropToSave, IsFreezed) == 0x000061, "Member 'FPropToSave::IsFreezed' has a wrong offset!");

// ScriptStruct PropWitchHuntModule.UGCQueryParameterDetails
// 0x0024 (0x0038 - 0x0014)
struct FUGCQueryParameterDetails final : public FUGCQueryParameterAllUserDetails
{
public:
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUGCQueryParameterTagsAllUserDetails   TagParameter;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FUGCItemId>                     WorkshopItemIds;                                   // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUGCQueryParameterDetails) == 0x000008, "Wrong alignment on FUGCQueryParameterDetails");
static_assert(sizeof(FUGCQueryParameterDetails) == 0x000038, "Wrong size on FUGCQueryParameterDetails");
static_assert(offsetof(FUGCQueryParameterDetails, TagParameter) == 0x000018, "Member 'FUGCQueryParameterDetails::TagParameter' has a wrong offset!");
static_assert(offsetof(FUGCQueryParameterDetails, WorkshopItemIds) == 0x000028, "Member 'FUGCQueryParameterDetails::WorkshopItemIds' has a wrong offset!");

// ScriptStruct PropWitchHuntModule.QueryWorkshopForItemDetailsResultBRG
// 0x0038 (0x0068 - 0x0030)
struct FQueryWorkshopForItemDetailsResultBRG final : public FQueryWorkshopForItemsResultBRG
{
public:
	struct FUGCQueryParameterDetails              QueryParams;                                       // 0x0030(0x0038)(Edit, BlueprintVisible, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQueryWorkshopForItemDetailsResultBRG) == 0x000008, "Wrong alignment on FQueryWorkshopForItemDetailsResultBRG");
static_assert(sizeof(FQueryWorkshopForItemDetailsResultBRG) == 0x000068, "Wrong size on FQueryWorkshopForItemDetailsResultBRG");
static_assert(offsetof(FQueryWorkshopForItemDetailsResultBRG, QueryParams) == 0x000030, "Member 'FQueryWorkshopForItemDetailsResultBRG::QueryParams' has a wrong offset!");

// ScriptStruct PropWitchHuntModule.UIParameterData
// 0x0058 (0x0060 - 0x0008)
struct FUIParameterData final : public FTableRowBase
{
public:
	class FName                                   Name;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ToolTip;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Units;                                             // 0x0030(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          IsBoolParameter;                                   // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DefaultBoolValue;                                  // 0x0041(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RoundToInt;                                        // 0x0042(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43[0x1];                                       // 0x0043(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UIMultiplyFactor;                                  // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultFloatValue;                                 // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatRange                            ValueRange;                                        // 0x004C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StepSize;                                          // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUIParameterData) == 0x000008, "Wrong alignment on FUIParameterData");
static_assert(sizeof(FUIParameterData) == 0x000060, "Wrong size on FUIParameterData");
static_assert(offsetof(FUIParameterData, Name) == 0x000008, "Member 'FUIParameterData::Name' has a wrong offset!");
static_assert(offsetof(FUIParameterData, DisplayName) == 0x000010, "Member 'FUIParameterData::DisplayName' has a wrong offset!");
static_assert(offsetof(FUIParameterData, ToolTip) == 0x000020, "Member 'FUIParameterData::ToolTip' has a wrong offset!");
static_assert(offsetof(FUIParameterData, Units) == 0x000030, "Member 'FUIParameterData::Units' has a wrong offset!");
static_assert(offsetof(FUIParameterData, IsBoolParameter) == 0x000040, "Member 'FUIParameterData::IsBoolParameter' has a wrong offset!");
static_assert(offsetof(FUIParameterData, DefaultBoolValue) == 0x000041, "Member 'FUIParameterData::DefaultBoolValue' has a wrong offset!");
static_assert(offsetof(FUIParameterData, RoundToInt) == 0x000042, "Member 'FUIParameterData::RoundToInt' has a wrong offset!");
static_assert(offsetof(FUIParameterData, UIMultiplyFactor) == 0x000044, "Member 'FUIParameterData::UIMultiplyFactor' has a wrong offset!");
static_assert(offsetof(FUIParameterData, DefaultFloatValue) == 0x000048, "Member 'FUIParameterData::DefaultFloatValue' has a wrong offset!");
static_assert(offsetof(FUIParameterData, ValueRange) == 0x00004C, "Member 'FUIParameterData::ValueRange' has a wrong offset!");
static_assert(offsetof(FUIParameterData, StepSize) == 0x00005C, "Member 'FUIParameterData::StepSize' has a wrong offset!");

// ScriptStruct PropWitchHuntModule.RuntimePropData
// 0x0038 (0x0038 - 0x0000)
struct FRuntimePropData final
{
public:
	struct FVector                                LinearVelocity;                                    // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AngularVelocity;                                   // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Size;                                              // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRuntimePropData) == 0x000008, "Wrong alignment on FRuntimePropData");
static_assert(sizeof(FRuntimePropData) == 0x000038, "Wrong size on FRuntimePropData");
static_assert(offsetof(FRuntimePropData, LinearVelocity) == 0x000000, "Member 'FRuntimePropData::LinearVelocity' has a wrong offset!");
static_assert(offsetof(FRuntimePropData, AngularVelocity) == 0x000018, "Member 'FRuntimePropData::AngularVelocity' has a wrong offset!");
static_assert(offsetof(FRuntimePropData, Size) == 0x000030, "Member 'FRuntimePropData::Size' has a wrong offset!");

// ScriptStruct PropWitchHuntModule.PlaceableStaticToSave
// 0x0010 (0x0070 - 0x0060)
struct FPlaceableStaticToSave final : public FActorToSave
{
public:
	TArray<uint8>                                 MaterialIndices;                                   // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlaceableStaticToSave) == 0x000008, "Wrong alignment on FPlaceableStaticToSave");
static_assert(sizeof(FPlaceableStaticToSave) == 0x000070, "Wrong size on FPlaceableStaticToSave");
static_assert(offsetof(FPlaceableStaticToSave, MaterialIndices) == 0x000060, "Member 'FPlaceableStaticToSave::MaterialIndices' has a wrong offset!");

// ScriptStruct PropWitchHuntModule.UGCUpdateHandle
// 0x0008 (0x0008 - 0x0000)
struct FUGCUpdateHandle final
{
public:
	struct FUInt64BRG                             Handle;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUGCUpdateHandle) == 0x000008, "Wrong alignment on FUGCUpdateHandle");
static_assert(sizeof(FUGCUpdateHandle) == 0x000008, "Wrong size on FUGCUpdateHandle");
static_assert(offsetof(FUGCUpdateHandle, Handle) == 0x000000, "Member 'FUGCUpdateHandle::Handle' has a wrong offset!");

// ScriptStruct PropWitchHuntModule.SupportedResolution
// 0x0018 (0x0018 - 0x0000)
struct FSupportedResolution final
{
public:
	int32                                         Width;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayString;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSupportedResolution) == 0x000008, "Wrong alignment on FSupportedResolution");
static_assert(sizeof(FSupportedResolution) == 0x000018, "Wrong size on FSupportedResolution");
static_assert(offsetof(FSupportedResolution, Width) == 0x000000, "Member 'FSupportedResolution::Width' has a wrong offset!");
static_assert(offsetof(FSupportedResolution, Height) == 0x000004, "Member 'FSupportedResolution::Height' has a wrong offset!");
static_assert(offsetof(FSupportedResolution, DisplayString) == 0x000008, "Member 'FSupportedResolution::DisplayString' has a wrong offset!");

// ScriptStruct PropWitchHuntModule.MatchPlayer
// 0x0058 (0x0058 - 0x0000)
struct FMatchPlayer final
{
public:
	struct FUniqueNetIdRepl                       PlayerId;                                          // 0x0000(0x0030)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TeamID;                                            // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPSNPlayer;                                       // 0x0050(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchPlayer) == 0x000008, "Wrong alignment on FMatchPlayer");
static_assert(sizeof(FMatchPlayer) == 0x000058, "Wrong size on FMatchPlayer");
static_assert(offsetof(FMatchPlayer, PlayerId) == 0x000000, "Member 'FMatchPlayer::PlayerId' has a wrong offset!");
static_assert(offsetof(FMatchPlayer, PlayerName) == 0x000030, "Member 'FMatchPlayer::PlayerName' has a wrong offset!");
static_assert(offsetof(FMatchPlayer, TeamID) == 0x000040, "Member 'FMatchPlayer::TeamID' has a wrong offset!");
static_assert(offsetof(FMatchPlayer, IsPSNPlayer) == 0x000050, "Member 'FMatchPlayer::IsPSNPlayer' has a wrong offset!");

// ScriptStruct PropWitchHuntModule.MatchTeam
// 0x0030 (0x0030 - 0x0000)
struct FMatchTeam final
{
public:
	class FString                                 TeamName;                                          // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TeamID;                                            // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FUniqueNetIdRepl>               TeamMembers;                                       // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchTeam) == 0x000008, "Wrong alignment on FMatchTeam");
static_assert(sizeof(FMatchTeam) == 0x000030, "Wrong size on FMatchTeam");
static_assert(offsetof(FMatchTeam, TeamName) == 0x000000, "Member 'FMatchTeam::TeamName' has a wrong offset!");
static_assert(offsetof(FMatchTeam, TeamID) == 0x000010, "Member 'FMatchTeam::TeamID' has a wrong offset!");
static_assert(offsetof(FMatchTeam, TeamMembers) == 0x000020, "Member 'FMatchTeam::TeamMembers' has a wrong offset!");

// ScriptStruct PropWitchHuntModule.PingCacheEntry
// 0x0008 (0x0008 - 0x0000)
struct FPingCacheEntry final
{
public:
	float                                         PingInMs;                                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CreationTime;                                      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPingCacheEntry) == 0x000004, "Wrong alignment on FPingCacheEntry");
static_assert(sizeof(FPingCacheEntry) == 0x000008, "Wrong size on FPingCacheEntry");
static_assert(offsetof(FPingCacheEntry, PingInMs) == 0x000000, "Member 'FPingCacheEntry::PingInMs' has a wrong offset!");
static_assert(offsetof(FPingCacheEntry, CreationTime) == 0x000004, "Member 'FPingCacheEntry::CreationTime' has a wrong offset!");

// ScriptStruct PropWitchHuntModule.HunterSkin
// 0x0038 (0x0038 - 0x0000)
struct FHunterSkin final
{
public:
	TSubclassOf<class AActor>                     HeadSkinClass;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     UpperBodySkinClass;                                // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     LowerBodySkinClass;                                // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     HatSkinClass;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     RangedWeaponSkinClass;                             // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     MeleeWeaponSkinClass;                              // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     SkinColorSkinClass;                                // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHunterSkin) == 0x000008, "Wrong alignment on FHunterSkin");
static_assert(sizeof(FHunterSkin) == 0x000038, "Wrong size on FHunterSkin");
static_assert(offsetof(FHunterSkin, HeadSkinClass) == 0x000000, "Member 'FHunterSkin::HeadSkinClass' has a wrong offset!");
static_assert(offsetof(FHunterSkin, UpperBodySkinClass) == 0x000008, "Member 'FHunterSkin::UpperBodySkinClass' has a wrong offset!");
static_assert(offsetof(FHunterSkin, LowerBodySkinClass) == 0x000010, "Member 'FHunterSkin::LowerBodySkinClass' has a wrong offset!");
static_assert(offsetof(FHunterSkin, HatSkinClass) == 0x000018, "Member 'FHunterSkin::HatSkinClass' has a wrong offset!");
static_assert(offsetof(FHunterSkin, RangedWeaponSkinClass) == 0x000020, "Member 'FHunterSkin::RangedWeaponSkinClass' has a wrong offset!");
static_assert(offsetof(FHunterSkin, MeleeWeaponSkinClass) == 0x000028, "Member 'FHunterSkin::MeleeWeaponSkinClass' has a wrong offset!");
static_assert(offsetof(FHunterSkin, SkinColorSkinClass) == 0x000030, "Member 'FHunterSkin::SkinColorSkinClass' has a wrong offset!");

// ScriptStruct PropWitchHuntModule.WitchSkin
// 0x0028 (0x0028 - 0x0000)
struct FWitchSkin final
{
public:
	TSubclassOf<class AActor>                     HeadSkinClass;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     BodySkinClass;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     HatSkinClass;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     BroomSkinClass;                                    // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     SkinColorSkinClass;                                // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWitchSkin) == 0x000008, "Wrong alignment on FWitchSkin");
static_assert(sizeof(FWitchSkin) == 0x000028, "Wrong size on FWitchSkin");
static_assert(offsetof(FWitchSkin, HeadSkinClass) == 0x000000, "Member 'FWitchSkin::HeadSkinClass' has a wrong offset!");
static_assert(offsetof(FWitchSkin, BodySkinClass) == 0x000008, "Member 'FWitchSkin::BodySkinClass' has a wrong offset!");
static_assert(offsetof(FWitchSkin, HatSkinClass) == 0x000010, "Member 'FWitchSkin::HatSkinClass' has a wrong offset!");
static_assert(offsetof(FWitchSkin, BroomSkinClass) == 0x000018, "Member 'FWitchSkin::BroomSkinClass' has a wrong offset!");
static_assert(offsetof(FWitchSkin, SkinColorSkinClass) == 0x000020, "Member 'FWitchSkin::SkinColorSkinClass' has a wrong offset!");

// ScriptStruct PropWitchHuntModule.PlaceableLightToSave
// 0x0018 (0x0078 - 0x0060)
struct FPlaceableLightToSave final : public FActorToSave
{
public:
	struct FVector                                Color;                                             // 0x0060(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlaceableLightToSave) == 0x000008, "Wrong alignment on FPlaceableLightToSave");
static_assert(sizeof(FPlaceableLightToSave) == 0x000078, "Wrong size on FPlaceableLightToSave");
static_assert(offsetof(FPlaceableLightToSave, Color) == 0x000060, "Member 'FPlaceableLightToSave::Color' has a wrong offset!");

// ScriptStruct PropWitchHuntModule.SwitchToSave
// 0x0018 (0x0078 - 0x0060)
struct FSwitchToSave final : public FActorToSave
{
public:
	TArray<int32>                                 SwitchTargets;                                     // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Breakable;                                         // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSwitchToSave) == 0x000008, "Wrong alignment on FSwitchToSave");
static_assert(sizeof(FSwitchToSave) == 0x000078, "Wrong size on FSwitchToSave");
static_assert(offsetof(FSwitchToSave, SwitchTargets) == 0x000060, "Member 'FSwitchToSave::SwitchTargets' has a wrong offset!");
static_assert(offsetof(FSwitchToSave, Breakable) == 0x000070, "Member 'FSwitchToSave::Breakable' has a wrong offset!");

// ScriptStruct PropWitchHuntModule.PrefabToSave
// 0x0040 (0x0040 - 0x0000)
struct FPrefabToSave final
{
public:
	TArray<struct FPropToSave>                    Props;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPlaceableStaticToSave>         Structures;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPlaceableLightToSave>          Lights;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSwitchToSave>                  Switches;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPrefabToSave) == 0x000008, "Wrong alignment on FPrefabToSave");
static_assert(sizeof(FPrefabToSave) == 0x000040, "Wrong size on FPrefabToSave");
static_assert(offsetof(FPrefabToSave, Props) == 0x000000, "Member 'FPrefabToSave::Props' has a wrong offset!");
static_assert(offsetof(FPrefabToSave, Structures) == 0x000010, "Member 'FPrefabToSave::Structures' has a wrong offset!");
static_assert(offsetof(FPrefabToSave, Lights) == 0x000020, "Member 'FPrefabToSave::Lights' has a wrong offset!");
static_assert(offsetof(FPrefabToSave, Switches) == 0x000030, "Member 'FPrefabToSave::Switches' has a wrong offset!");

// ScriptStruct PropWitchHuntModule.UIParam
// 0x0014 (0x0014 - 0x0000)
struct FUIParam final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatValue;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntValue;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BoolValue;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUIParam) == 0x000004, "Wrong alignment on FUIParam");
static_assert(sizeof(FUIParam) == 0x000014, "Wrong size on FUIParam");
static_assert(offsetof(FUIParam, Name) == 0x000000, "Member 'FUIParam::Name' has a wrong offset!");
static_assert(offsetof(FUIParam, FloatValue) == 0x000008, "Member 'FUIParam::FloatValue' has a wrong offset!");
static_assert(offsetof(FUIParam, IntValue) == 0x00000C, "Member 'FUIParam::IntValue' has a wrong offset!");
static_assert(offsetof(FUIParam, BoolValue) == 0x000010, "Member 'FUIParam::BoolValue' has a wrong offset!");

// ScriptStruct PropWitchHuntModule.WorkshopItemInstallInfo
// 0x0028 (0x0028 - 0x0000)
struct FWorkshopItemInstallInfo final
{
public:
	struct FUInt64BRG                             SizeOnDiskBytes;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         SizeOnDiskMBytes;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Directory;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              TimeStampLastUpdate;                               // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWorkshopItemInstallInfo) == 0x000008, "Wrong alignment on FWorkshopItemInstallInfo");
static_assert(sizeof(FWorkshopItemInstallInfo) == 0x000028, "Wrong size on FWorkshopItemInstallInfo");
static_assert(offsetof(FWorkshopItemInstallInfo, SizeOnDiskBytes) == 0x000000, "Member 'FWorkshopItemInstallInfo::SizeOnDiskBytes' has a wrong offset!");
static_assert(offsetof(FWorkshopItemInstallInfo, SizeOnDiskMBytes) == 0x000008, "Member 'FWorkshopItemInstallInfo::SizeOnDiskMBytes' has a wrong offset!");
static_assert(offsetof(FWorkshopItemInstallInfo, Directory) == 0x000010, "Member 'FWorkshopItemInstallInfo::Directory' has a wrong offset!");
static_assert(offsetof(FWorkshopItemInstallInfo, TimeStampLastUpdate) == 0x000020, "Member 'FWorkshopItemInstallInfo::TimeStampLastUpdate' has a wrong offset!");

// ScriptStruct PropWitchHuntModule.QueryWorkshopForUserItemsResultBRG
// 0x0068 (0x0098 - 0x0030)
struct FQueryWorkshopForUserItemsResultBRG final : public FQueryWorkshopForItemsResultBRG
{
public:
	struct FUGCQueryParameterUser                 QueryParams;                                       // 0x0030(0x0068)(Edit, BlueprintVisible, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQueryWorkshopForUserItemsResultBRG) == 0x000008, "Wrong alignment on FQueryWorkshopForUserItemsResultBRG");
static_assert(sizeof(FQueryWorkshopForUserItemsResultBRG) == 0x000098, "Wrong size on FQueryWorkshopForUserItemsResultBRG");
static_assert(offsetof(FQueryWorkshopForUserItemsResultBRG, QueryParams) == 0x000030, "Member 'FQueryWorkshopForUserItemsResultBRG::QueryParams' has a wrong offset!");

// ScriptStruct PropWitchHuntModule.QueryWorkshopForAllItemsResultBRG
// 0x0068 (0x0098 - 0x0030)
struct FQueryWorkshopForAllItemsResultBRG final : public FQueryWorkshopForItemsResultBRG
{
public:
	struct FUGCQueryParameterAll                  QueryParams;                                       // 0x0030(0x0068)(Edit, BlueprintVisible, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQueryWorkshopForAllItemsResultBRG) == 0x000008, "Wrong alignment on FQueryWorkshopForAllItemsResultBRG");
static_assert(sizeof(FQueryWorkshopForAllItemsResultBRG) == 0x000098, "Wrong size on FQueryWorkshopForAllItemsResultBRG");
static_assert(offsetof(FQueryWorkshopForAllItemsResultBRG, QueryParams) == 0x000030, "Member 'FQueryWorkshopForAllItemsResultBRG::QueryParams' has a wrong offset!");

}

