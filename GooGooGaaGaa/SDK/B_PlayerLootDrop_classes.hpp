#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_PlayerLootDrop

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_PlayerLootDrop.B_PlayerLootDrop_C
// 0x0040 (0x0068 - 0x0028)
class UB_PlayerLootDrop_C final : public UObject
{
public:
	class UGameInstance*                          GameInstance;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class APlayerState*                           PlayerState;                                       // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         ItemDropExperience;                                // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxDropExperience;                                 // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 ItemDropDefIds;                                    // 0x0040(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 OverrideItemDropDefIds;                            // 0x0050(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   StatItemDropExperience;                            // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ClampItemDropExperience();
	void GrantExp(int32 Exp, int32* AmountOfExpToSubtract, bool* bIsInFaultState);
	void HandleDropSuccess();
	void InitializeGS(class UGameInstance* GameInstance_0, class APlayerState* PlayerState_0);

	void CalculateAmountOfItemsToGrant(int32* NumberOfItems) const;
	void GetStatsAndAchievementsManager(class UB_NewStatsAndAchievementsManager_C** Result) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_PlayerLootDrop_C">();
	}
	static class UB_PlayerLootDrop_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UB_PlayerLootDrop_C>();
	}
};
static_assert(alignof(UB_PlayerLootDrop_C) == 0x000008, "Wrong alignment on UB_PlayerLootDrop_C");
static_assert(sizeof(UB_PlayerLootDrop_C) == 0x000068, "Wrong size on UB_PlayerLootDrop_C");
static_assert(offsetof(UB_PlayerLootDrop_C, GameInstance) == 0x000028, "Member 'UB_PlayerLootDrop_C::GameInstance' has a wrong offset!");
static_assert(offsetof(UB_PlayerLootDrop_C, PlayerState) == 0x000030, "Member 'UB_PlayerLootDrop_C::PlayerState' has a wrong offset!");
static_assert(offsetof(UB_PlayerLootDrop_C, ItemDropExperience) == 0x000038, "Member 'UB_PlayerLootDrop_C::ItemDropExperience' has a wrong offset!");
static_assert(offsetof(UB_PlayerLootDrop_C, MaxDropExperience) == 0x00003C, "Member 'UB_PlayerLootDrop_C::MaxDropExperience' has a wrong offset!");
static_assert(offsetof(UB_PlayerLootDrop_C, ItemDropDefIds) == 0x000040, "Member 'UB_PlayerLootDrop_C::ItemDropDefIds' has a wrong offset!");
static_assert(offsetof(UB_PlayerLootDrop_C, OverrideItemDropDefIds) == 0x000050, "Member 'UB_PlayerLootDrop_C::OverrideItemDropDefIds' has a wrong offset!");
static_assert(offsetof(UB_PlayerLootDrop_C, StatItemDropExperience) == 0x000060, "Member 'UB_PlayerLootDrop_C::StatItemDropExperience' has a wrong offset!");

}

