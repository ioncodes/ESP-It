#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_MoveOrDamageModifierActor

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function B_MoveOrDamageModifierActor.B_MoveOrDamageModifierActor_C.AddCurrentPlayerToStopped
// 0x0028 (0x0028 - 0x0000)
struct B_MoveOrDamageModifierActor_C_AddCurrentPlayerToStopped final
{
public:
	double                                        DeltaTime;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UB_ModParametersSubsystem_C*            CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Map_Find_Value;                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_MoveOrDamageModifierActor_C_AddCurrentPlayerToStopped) == 0x000008, "Wrong alignment on B_MoveOrDamageModifierActor_C_AddCurrentPlayerToStopped");
static_assert(sizeof(B_MoveOrDamageModifierActor_C_AddCurrentPlayerToStopped) == 0x000028, "Wrong size on B_MoveOrDamageModifierActor_C_AddCurrentPlayerToStopped");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_AddCurrentPlayerToStopped, DeltaTime) == 0x000000, "Member 'B_MoveOrDamageModifierActor_C_AddCurrentPlayerToStopped::DeltaTime' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_AddCurrentPlayerToStopped, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000008, "Member 'B_MoveOrDamageModifierActor_C_AddCurrentPlayerToStopped::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_AddCurrentPlayerToStopped, CallFunc_Map_Find_Value) == 0x000010, "Member 'B_MoveOrDamageModifierActor_C_AddCurrentPlayerToStopped::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_AddCurrentPlayerToStopped, CallFunc_Map_Find_ReturnValue) == 0x000018, "Member 'B_MoveOrDamageModifierActor_C_AddCurrentPlayerToStopped::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_AddCurrentPlayerToStopped, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000020, "Member 'B_MoveOrDamageModifierActor_C_AddCurrentPlayerToStopped::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");

// Function B_MoveOrDamageModifierActor.B_MoveOrDamageModifierActor_C.ApplyDamage
// 0x0060 (0x0060 - 0x0000)
struct B_MoveOrDamageModifierActor_C_ApplyDamage final
{
public:
	class APawn*                                  DamagedPawn;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TSubclassOf<class UDamageType>                Temp_class_Variable;                               // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class AB_PropPawnPhysics_C*                   K2Node_DynamicCast_AsB_Prop_Pawn_Physics;          // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_Witch_C*                             K2Node_DynamicCast_AsB_Witch;                      // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UDamageType>                Temp_class_Variable_1;                             // 0x0030(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_ModParametersSubsystem_C*            CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_ModParametersSubsystem_C*            CallFunc_GetWorldSubsystem_ReturnValue_1;          // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TSubclassOf<class UDamageType>                K2Node_Select_Default;                             // 0x0050(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         CallFunc_ApplyDamage_ReturnValue;                  // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ApplyDamage_BaseDamage_ImplicitCast;      // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_MoveOrDamageModifierActor_C_ApplyDamage) == 0x000008, "Wrong alignment on B_MoveOrDamageModifierActor_C_ApplyDamage");
static_assert(sizeof(B_MoveOrDamageModifierActor_C_ApplyDamage) == 0x000060, "Wrong size on B_MoveOrDamageModifierActor_C_ApplyDamage");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_ApplyDamage, DamagedPawn) == 0x000000, "Member 'B_MoveOrDamageModifierActor_C_ApplyDamage::DamagedPawn' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_ApplyDamage, Temp_class_Variable) == 0x000008, "Member 'B_MoveOrDamageModifierActor_C_ApplyDamage::Temp_class_Variable' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_ApplyDamage, K2Node_DynamicCast_AsB_Prop_Pawn_Physics) == 0x000010, "Member 'B_MoveOrDamageModifierActor_C_ApplyDamage::K2Node_DynamicCast_AsB_Prop_Pawn_Physics' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_ApplyDamage, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'B_MoveOrDamageModifierActor_C_ApplyDamage::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_ApplyDamage, K2Node_DynamicCast_AsB_Witch) == 0x000020, "Member 'B_MoveOrDamageModifierActor_C_ApplyDamage::K2Node_DynamicCast_AsB_Witch' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_ApplyDamage, K2Node_DynamicCast_bSuccess_1) == 0x000028, "Member 'B_MoveOrDamageModifierActor_C_ApplyDamage::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_ApplyDamage, Temp_class_Variable_1) == 0x000030, "Member 'B_MoveOrDamageModifierActor_C_ApplyDamage::Temp_class_Variable_1' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_ApplyDamage, Temp_bool_Variable) == 0x000038, "Member 'B_MoveOrDamageModifierActor_C_ApplyDamage::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_ApplyDamage, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000040, "Member 'B_MoveOrDamageModifierActor_C_ApplyDamage::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_ApplyDamage, CallFunc_GetWorldSubsystem_ReturnValue_1) == 0x000048, "Member 'B_MoveOrDamageModifierActor_C_ApplyDamage::CallFunc_GetWorldSubsystem_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_ApplyDamage, K2Node_Select_Default) == 0x000050, "Member 'B_MoveOrDamageModifierActor_C_ApplyDamage::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_ApplyDamage, CallFunc_ApplyDamage_ReturnValue) == 0x000058, "Member 'B_MoveOrDamageModifierActor_C_ApplyDamage::CallFunc_ApplyDamage_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_ApplyDamage, CallFunc_ApplyDamage_BaseDamage_ImplicitCast) == 0x00005C, "Member 'B_MoveOrDamageModifierActor_C_ApplyDamage::CallFunc_ApplyDamage_BaseDamage_ImplicitCast' has a wrong offset!");

// Function B_MoveOrDamageModifierActor.B_MoveOrDamageModifierActor_C.CheckForEnoughVelocity
// 0x0088 (0x0088 - 0x0000)
struct B_MoveOrDamageModifierActor_C_CheckForEnoughVelocity final
{
public:
	class APawn*                                  PlayerPawn;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          FastEnough;                                        // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PropPawnPhysics_C*                   K2Node_DynamicCast_AsB_Prop_Pawn_Physics;          // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_Witch_C*                             K2Node_DynamicCast_AsB_Witch;                      // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVelocity_ReturnValue_1;                // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue_1;                      // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UB_ModParametersSubsystem_C*            CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_ModParametersSubsystem_C*            CallFunc_GetWorldSubsystem_ReturnValue_1;          // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_1;          // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_MoveOrDamageModifierActor_C_CheckForEnoughVelocity) == 0x000008, "Wrong alignment on B_MoveOrDamageModifierActor_C_CheckForEnoughVelocity");
static_assert(sizeof(B_MoveOrDamageModifierActor_C_CheckForEnoughVelocity) == 0x000088, "Wrong size on B_MoveOrDamageModifierActor_C_CheckForEnoughVelocity");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_CheckForEnoughVelocity, PlayerPawn) == 0x000000, "Member 'B_MoveOrDamageModifierActor_C_CheckForEnoughVelocity::PlayerPawn' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_CheckForEnoughVelocity, FastEnough) == 0x000008, "Member 'B_MoveOrDamageModifierActor_C_CheckForEnoughVelocity::FastEnough' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_CheckForEnoughVelocity, K2Node_DynamicCast_AsB_Prop_Pawn_Physics) == 0x000010, "Member 'B_MoveOrDamageModifierActor_C_CheckForEnoughVelocity::K2Node_DynamicCast_AsB_Prop_Pawn_Physics' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_CheckForEnoughVelocity, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'B_MoveOrDamageModifierActor_C_CheckForEnoughVelocity::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_CheckForEnoughVelocity, K2Node_DynamicCast_AsB_Witch) == 0x000020, "Member 'B_MoveOrDamageModifierActor_C_CheckForEnoughVelocity::K2Node_DynamicCast_AsB_Witch' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_CheckForEnoughVelocity, K2Node_DynamicCast_bSuccess_1) == 0x000028, "Member 'B_MoveOrDamageModifierActor_C_CheckForEnoughVelocity::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_CheckForEnoughVelocity, CallFunc_GetVelocity_ReturnValue) == 0x000030, "Member 'B_MoveOrDamageModifierActor_C_CheckForEnoughVelocity::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_CheckForEnoughVelocity, CallFunc_GetVelocity_ReturnValue_1) == 0x000048, "Member 'B_MoveOrDamageModifierActor_C_CheckForEnoughVelocity::CallFunc_GetVelocity_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_CheckForEnoughVelocity, CallFunc_VSize_ReturnValue) == 0x000060, "Member 'B_MoveOrDamageModifierActor_C_CheckForEnoughVelocity::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_CheckForEnoughVelocity, CallFunc_VSize_ReturnValue_1) == 0x000068, "Member 'B_MoveOrDamageModifierActor_C_CheckForEnoughVelocity::CallFunc_VSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_CheckForEnoughVelocity, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000070, "Member 'B_MoveOrDamageModifierActor_C_CheckForEnoughVelocity::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_CheckForEnoughVelocity, CallFunc_GetWorldSubsystem_ReturnValue_1) == 0x000078, "Member 'B_MoveOrDamageModifierActor_C_CheckForEnoughVelocity::CallFunc_GetWorldSubsystem_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_CheckForEnoughVelocity, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000080, "Member 'B_MoveOrDamageModifierActor_C_CheckForEnoughVelocity::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_CheckForEnoughVelocity, CallFunc_Less_DoubleDouble_ReturnValue_1) == 0x000081, "Member 'B_MoveOrDamageModifierActor_C_CheckForEnoughVelocity::CallFunc_Less_DoubleDouble_ReturnValue_1' has a wrong offset!");

// Function B_MoveOrDamageModifierActor.B_MoveOrDamageModifierActor_C.CleanUpMod
// 0x0038 (0x0038 - 0x0000)
struct B_MoveOrDamageModifierActor_C_CleanUpMod final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_MoveOrDamageModifierActor_C_CleanUpMod) == 0x000008, "Wrong alignment on B_MoveOrDamageModifierActor_C_CleanUpMod");
static_assert(sizeof(B_MoveOrDamageModifierActor_C_CleanUpMod) == 0x000038, "Wrong size on B_MoveOrDamageModifierActor_C_CleanUpMod");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_CleanUpMod, Temp_int_Array_Index_Variable) == 0x000000, "Member 'B_MoveOrDamageModifierActor_C_CleanUpMod::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_CleanUpMod, CallFunc_GetGameState_ReturnValue) == 0x000008, "Member 'B_MoveOrDamageModifierActor_C_CleanUpMod::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_CleanUpMod, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'B_MoveOrDamageModifierActor_C_CleanUpMod::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_CleanUpMod, CallFunc_Array_Get_Item) == 0x000018, "Member 'B_MoveOrDamageModifierActor_C_CleanUpMod::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_CleanUpMod, K2Node_DynamicCast_AsB_Player_State) == 0x000020, "Member 'B_MoveOrDamageModifierActor_C_CleanUpMod::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_CleanUpMod, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'B_MoveOrDamageModifierActor_C_CleanUpMod::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_CleanUpMod, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'B_MoveOrDamageModifierActor_C_CleanUpMod::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_CleanUpMod, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'B_MoveOrDamageModifierActor_C_CleanUpMod::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_CleanUpMod, CallFunc_Less_IntInt_ReturnValue) == 0x000034, "Member 'B_MoveOrDamageModifierActor_C_CleanUpMod::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function B_MoveOrDamageModifierActor.B_MoveOrDamageModifierActor_C.CreateHUDExtensionIfRequired
// 0x0003 (0x0003 - 0x0000)
struct B_MoveOrDamageModifierActor_C_CreateHUDExtensionIfRequired final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_Value;                           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_MoveOrDamageModifierActor_C_CreateHUDExtensionIfRequired) == 0x000001, "Wrong alignment on B_MoveOrDamageModifierActor_C_CreateHUDExtensionIfRequired");
static_assert(sizeof(B_MoveOrDamageModifierActor_C_CreateHUDExtensionIfRequired) == 0x000003, "Wrong size on B_MoveOrDamageModifierActor_C_CreateHUDExtensionIfRequired");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_CreateHUDExtensionIfRequired, Temp_bool_Variable) == 0x000000, "Member 'B_MoveOrDamageModifierActor_C_CreateHUDExtensionIfRequired::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_CreateHUDExtensionIfRequired, CallFunc_Map_Find_Value) == 0x000001, "Member 'B_MoveOrDamageModifierActor_C_CreateHUDExtensionIfRequired::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_CreateHUDExtensionIfRequired, CallFunc_Map_Find_ReturnValue) == 0x000002, "Member 'B_MoveOrDamageModifierActor_C_CreateHUDExtensionIfRequired::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function B_MoveOrDamageModifierActor.B_MoveOrDamageModifierActor_C.ExecuteUbergraph_B_MoveOrDamageModifierActor
// 0x0060 (0x0060 - 0x0000)
struct B_MoveOrDamageModifierActor_C_ExecuteUbergraph_B_MoveOrDamageModifierActor final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0020(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_SeekGameState_C*                     K2Node_DynamicCast_AsB_Seek_Game_State;            // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameMode_C*                          K2Node_DynamicCast_AsB_Game_Mode;                  // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_TickAllPlayersDamage_DeltaSeconds_ImplicitCast; // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_MoveOrDamageModifierActor_C_ExecuteUbergraph_B_MoveOrDamageModifierActor) == 0x000008, "Wrong alignment on B_MoveOrDamageModifierActor_C_ExecuteUbergraph_B_MoveOrDamageModifierActor");
static_assert(sizeof(B_MoveOrDamageModifierActor_C_ExecuteUbergraph_B_MoveOrDamageModifierActor) == 0x000060, "Wrong size on B_MoveOrDamageModifierActor_C_ExecuteUbergraph_B_MoveOrDamageModifierActor");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_ExecuteUbergraph_B_MoveOrDamageModifierActor, EntryPoint) == 0x000000, "Member 'B_MoveOrDamageModifierActor_C_ExecuteUbergraph_B_MoveOrDamageModifierActor::EntryPoint' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_ExecuteUbergraph_B_MoveOrDamageModifierActor, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'B_MoveOrDamageModifierActor_C_ExecuteUbergraph_B_MoveOrDamageModifierActor::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_ExecuteUbergraph_B_MoveOrDamageModifierActor, K2Node_Event_DeltaSeconds) == 0x000014, "Member 'B_MoveOrDamageModifierActor_C_ExecuteUbergraph_B_MoveOrDamageModifierActor::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_ExecuteUbergraph_B_MoveOrDamageModifierActor, CallFunc_GetGameState_ReturnValue) == 0x000018, "Member 'B_MoveOrDamageModifierActor_C_ExecuteUbergraph_B_MoveOrDamageModifierActor::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_ExecuteUbergraph_B_MoveOrDamageModifierActor, K2Node_CreateDelegate_OutputDelegate_1) == 0x000020, "Member 'B_MoveOrDamageModifierActor_C_ExecuteUbergraph_B_MoveOrDamageModifierActor::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_ExecuteUbergraph_B_MoveOrDamageModifierActor, K2Node_DynamicCast_AsB_Seek_Game_State) == 0x000030, "Member 'B_MoveOrDamageModifierActor_C_ExecuteUbergraph_B_MoveOrDamageModifierActor::K2Node_DynamicCast_AsB_Seek_Game_State' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_ExecuteUbergraph_B_MoveOrDamageModifierActor, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'B_MoveOrDamageModifierActor_C_ExecuteUbergraph_B_MoveOrDamageModifierActor::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_ExecuteUbergraph_B_MoveOrDamageModifierActor, CallFunc_GetGameMode_ReturnValue) == 0x000040, "Member 'B_MoveOrDamageModifierActor_C_ExecuteUbergraph_B_MoveOrDamageModifierActor::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_ExecuteUbergraph_B_MoveOrDamageModifierActor, K2Node_DynamicCast_AsB_Game_Mode) == 0x000048, "Member 'B_MoveOrDamageModifierActor_C_ExecuteUbergraph_B_MoveOrDamageModifierActor::K2Node_DynamicCast_AsB_Game_Mode' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_ExecuteUbergraph_B_MoveOrDamageModifierActor, K2Node_DynamicCast_bSuccess_1) == 0x000050, "Member 'B_MoveOrDamageModifierActor_C_ExecuteUbergraph_B_MoveOrDamageModifierActor::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_ExecuteUbergraph_B_MoveOrDamageModifierActor, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000051, "Member 'B_MoveOrDamageModifierActor_C_ExecuteUbergraph_B_MoveOrDamageModifierActor::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_ExecuteUbergraph_B_MoveOrDamageModifierActor, CallFunc_TickAllPlayersDamage_DeltaSeconds_ImplicitCast) == 0x000058, "Member 'B_MoveOrDamageModifierActor_C_ExecuteUbergraph_B_MoveOrDamageModifierActor::CallFunc_TickAllPlayersDamage_DeltaSeconds_ImplicitCast' has a wrong offset!");

// Function B_MoveOrDamageModifierActor.B_MoveOrDamageModifierActor_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct B_MoveOrDamageModifierActor_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_MoveOrDamageModifierActor_C_ReceiveTick) == 0x000004, "Wrong alignment on B_MoveOrDamageModifierActor_C_ReceiveTick");
static_assert(sizeof(B_MoveOrDamageModifierActor_C_ReceiveTick) == 0x000004, "Wrong size on B_MoveOrDamageModifierActor_C_ReceiveTick");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'B_MoveOrDamageModifierActor_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function B_MoveOrDamageModifierActor.B_MoveOrDamageModifierActor_C.RemoveCurrentPlayerFromStopped
// 0x0001 (0x0001 - 0x0000)
struct B_MoveOrDamageModifierActor_C_RemoveCurrentPlayerFromStopped final
{
public:
	bool                                          CallFunc_Map_Remove_ReturnValue;                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_MoveOrDamageModifierActor_C_RemoveCurrentPlayerFromStopped) == 0x000001, "Wrong alignment on B_MoveOrDamageModifierActor_C_RemoveCurrentPlayerFromStopped");
static_assert(sizeof(B_MoveOrDamageModifierActor_C_RemoveCurrentPlayerFromStopped) == 0x000001, "Wrong size on B_MoveOrDamageModifierActor_C_RemoveCurrentPlayerFromStopped");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_RemoveCurrentPlayerFromStopped, CallFunc_Map_Remove_ReturnValue) == 0x000000, "Member 'B_MoveOrDamageModifierActor_C_RemoveCurrentPlayerFromStopped::CallFunc_Map_Remove_ReturnValue' has a wrong offset!");

// Function B_MoveOrDamageModifierActor.B_MoveOrDamageModifierActor_C.ShouldPlayerTakeDamage
// 0x0020 (0x0020 - 0x0000)
struct B_MoveOrDamageModifierActor_C_ShouldPlayerTakeDamage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_ModParametersSubsystem_C*            CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Map_Find_Value;                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_MoveOrDamageModifierActor_C_ShouldPlayerTakeDamage) == 0x000008, "Wrong alignment on B_MoveOrDamageModifierActor_C_ShouldPlayerTakeDamage");
static_assert(sizeof(B_MoveOrDamageModifierActor_C_ShouldPlayerTakeDamage) == 0x000020, "Wrong size on B_MoveOrDamageModifierActor_C_ShouldPlayerTakeDamage");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_ShouldPlayerTakeDamage, ReturnValue) == 0x000000, "Member 'B_MoveOrDamageModifierActor_C_ShouldPlayerTakeDamage::ReturnValue' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_ShouldPlayerTakeDamage, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000008, "Member 'B_MoveOrDamageModifierActor_C_ShouldPlayerTakeDamage::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_ShouldPlayerTakeDamage, CallFunc_Map_Find_Value) == 0x000010, "Member 'B_MoveOrDamageModifierActor_C_ShouldPlayerTakeDamage::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_ShouldPlayerTakeDamage, CallFunc_Map_Find_ReturnValue) == 0x000018, "Member 'B_MoveOrDamageModifierActor_C_ShouldPlayerTakeDamage::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_ShouldPlayerTakeDamage, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000019, "Member 'B_MoveOrDamageModifierActor_C_ShouldPlayerTakeDamage::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");

// Function B_MoveOrDamageModifierActor.B_MoveOrDamageModifierActor_C.StartMod
// 0x0038 (0x0038 - 0x0000)
struct B_MoveOrDamageModifierActor_C_StartMod final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_MoveOrDamageModifierActor_C_StartMod) == 0x000008, "Wrong alignment on B_MoveOrDamageModifierActor_C_StartMod");
static_assert(sizeof(B_MoveOrDamageModifierActor_C_StartMod) == 0x000038, "Wrong size on B_MoveOrDamageModifierActor_C_StartMod");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_StartMod, Temp_int_Array_Index_Variable) == 0x000000, "Member 'B_MoveOrDamageModifierActor_C_StartMod::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_StartMod, Temp_bool_Variable) == 0x000004, "Member 'B_MoveOrDamageModifierActor_C_StartMod::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_StartMod, CallFunc_GetGameState_ReturnValue) == 0x000008, "Member 'B_MoveOrDamageModifierActor_C_StartMod::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_StartMod, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'B_MoveOrDamageModifierActor_C_StartMod::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_StartMod, CallFunc_Array_Get_Item) == 0x000018, "Member 'B_MoveOrDamageModifierActor_C_StartMod::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_StartMod, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'B_MoveOrDamageModifierActor_C_StartMod::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_StartMod, K2Node_DynamicCast_AsB_Player_State) == 0x000028, "Member 'B_MoveOrDamageModifierActor_C_StartMod::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_StartMod, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'B_MoveOrDamageModifierActor_C_StartMod::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_StartMod, CallFunc_Less_IntInt_ReturnValue) == 0x000031, "Member 'B_MoveOrDamageModifierActor_C_StartMod::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_StartMod, CallFunc_Add_IntInt_ReturnValue) == 0x000034, "Member 'B_MoveOrDamageModifierActor_C_StartMod::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function B_MoveOrDamageModifierActor.B_MoveOrDamageModifierActor_C.TickAllPlayersDamage
// 0x0068 (0x0068 - 0x0000)
struct B_MoveOrDamageModifierActor_C_TickAllPlayersDamage final
{
public:
	double                                        DeltaSeconds;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AB_PlayerState_C*>               CallFunc_Map_Values_Values;                        // 0x0018(0x0010)(ReferenceParm)
	TArray<class AB_PlayerState_C*>               CallFunc_Map_Keys_Keys;                            // 0x0028(0x0010)(ReferenceParm)
	int32                                         CallFunc_Map_Length_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckForEnoughVelocity_FastEnough;        // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ShouldPlayerTakeDamage_ReturnValue;       // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue_1;                 // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_MoveOrDamageModifierActor_C_TickAllPlayersDamage) == 0x000008, "Wrong alignment on B_MoveOrDamageModifierActor_C_TickAllPlayersDamage");
static_assert(sizeof(B_MoveOrDamageModifierActor_C_TickAllPlayersDamage) == 0x000068, "Wrong size on B_MoveOrDamageModifierActor_C_TickAllPlayersDamage");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_TickAllPlayersDamage, DeltaSeconds) == 0x000000, "Member 'B_MoveOrDamageModifierActor_C_TickAllPlayersDamage::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_TickAllPlayersDamage, Temp_int_Array_Index_Variable) == 0x000008, "Member 'B_MoveOrDamageModifierActor_C_TickAllPlayersDamage::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_TickAllPlayersDamage, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'B_MoveOrDamageModifierActor_C_TickAllPlayersDamage::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_TickAllPlayersDamage, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'B_MoveOrDamageModifierActor_C_TickAllPlayersDamage::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_TickAllPlayersDamage, CallFunc_IsValid_ReturnValue) == 0x000014, "Member 'B_MoveOrDamageModifierActor_C_TickAllPlayersDamage::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_TickAllPlayersDamage, CallFunc_Map_Values_Values) == 0x000018, "Member 'B_MoveOrDamageModifierActor_C_TickAllPlayersDamage::CallFunc_Map_Values_Values' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_TickAllPlayersDamage, CallFunc_Map_Keys_Keys) == 0x000028, "Member 'B_MoveOrDamageModifierActor_C_TickAllPlayersDamage::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_TickAllPlayersDamage, CallFunc_Map_Length_ReturnValue) == 0x000038, "Member 'B_MoveOrDamageModifierActor_C_TickAllPlayersDamage::CallFunc_Map_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_TickAllPlayersDamage, CallFunc_Array_Get_Item) == 0x000040, "Member 'B_MoveOrDamageModifierActor_C_TickAllPlayersDamage::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_TickAllPlayersDamage, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'B_MoveOrDamageModifierActor_C_TickAllPlayersDamage::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_TickAllPlayersDamage, CallFunc_IsValid_ReturnValue_1) == 0x000049, "Member 'B_MoveOrDamageModifierActor_C_TickAllPlayersDamage::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_TickAllPlayersDamage, CallFunc_K2_GetPawn_ReturnValue) == 0x000050, "Member 'B_MoveOrDamageModifierActor_C_TickAllPlayersDamage::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_TickAllPlayersDamage, CallFunc_CheckForEnoughVelocity_FastEnough) == 0x000058, "Member 'B_MoveOrDamageModifierActor_C_TickAllPlayersDamage::CallFunc_CheckForEnoughVelocity_FastEnough' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_TickAllPlayersDamage, CallFunc_ShouldPlayerTakeDamage_ReturnValue) == 0x000059, "Member 'B_MoveOrDamageModifierActor_C_TickAllPlayersDamage::CallFunc_ShouldPlayerTakeDamage_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_TickAllPlayersDamage, CallFunc_K2_GetPawn_ReturnValue_1) == 0x000060, "Member 'B_MoveOrDamageModifierActor_C_TickAllPlayersDamage::CallFunc_K2_GetPawn_ReturnValue_1' has a wrong offset!");

// Function B_MoveOrDamageModifierActor.B_MoveOrDamageModifierActor_C.UpdateJoinedPlayers
// 0x0040 (0x0040 - 0x0000)
struct B_MoveOrDamageModifierActor_C_UpdateJoinedPlayers final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Contains_ReturnValue;                 // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_MoveOrDamageModifierActor_C_UpdateJoinedPlayers) == 0x000008, "Wrong alignment on B_MoveOrDamageModifierActor_C_UpdateJoinedPlayers");
static_assert(sizeof(B_MoveOrDamageModifierActor_C_UpdateJoinedPlayers) == 0x000040, "Wrong size on B_MoveOrDamageModifierActor_C_UpdateJoinedPlayers");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_UpdateJoinedPlayers, Temp_int_Array_Index_Variable) == 0x000000, "Member 'B_MoveOrDamageModifierActor_C_UpdateJoinedPlayers::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_UpdateJoinedPlayers, Temp_bool_Variable) == 0x000004, "Member 'B_MoveOrDamageModifierActor_C_UpdateJoinedPlayers::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_UpdateJoinedPlayers, CallFunc_GetGameState_ReturnValue) == 0x000008, "Member 'B_MoveOrDamageModifierActor_C_UpdateJoinedPlayers::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_UpdateJoinedPlayers, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'B_MoveOrDamageModifierActor_C_UpdateJoinedPlayers::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_UpdateJoinedPlayers, CallFunc_Array_Get_Item) == 0x000018, "Member 'B_MoveOrDamageModifierActor_C_UpdateJoinedPlayers::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_UpdateJoinedPlayers, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'B_MoveOrDamageModifierActor_C_UpdateJoinedPlayers::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_UpdateJoinedPlayers, K2Node_DynamicCast_AsB_Player_State) == 0x000028, "Member 'B_MoveOrDamageModifierActor_C_UpdateJoinedPlayers::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_UpdateJoinedPlayers, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'B_MoveOrDamageModifierActor_C_UpdateJoinedPlayers::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_UpdateJoinedPlayers, CallFunc_Less_IntInt_ReturnValue) == 0x000031, "Member 'B_MoveOrDamageModifierActor_C_UpdateJoinedPlayers::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_UpdateJoinedPlayers, CallFunc_Add_IntInt_ReturnValue) == 0x000034, "Member 'B_MoveOrDamageModifierActor_C_UpdateJoinedPlayers::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_UpdateJoinedPlayers, CallFunc_Map_Contains_ReturnValue) == 0x000038, "Member 'B_MoveOrDamageModifierActor_C_UpdateJoinedPlayers::CallFunc_Map_Contains_ReturnValue' has a wrong offset!");

// Function B_MoveOrDamageModifierActor.B_MoveOrDamageModifierActor_C.UpdateTimeUntilNextDamage
// 0x0018 (0x0018 - 0x0000)
struct B_MoveOrDamageModifierActor_C_UpdateTimeUntilNextDamage final
{
public:
	class UB_ModParametersSubsystem_C*            CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_ModParametersSubsystem_C*            CallFunc_GetWorldSubsystem_ReturnValue_1;          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_MoveOrDamageModifierActor_C_UpdateTimeUntilNextDamage) == 0x000008, "Wrong alignment on B_MoveOrDamageModifierActor_C_UpdateTimeUntilNextDamage");
static_assert(sizeof(B_MoveOrDamageModifierActor_C_UpdateTimeUntilNextDamage) == 0x000018, "Wrong size on B_MoveOrDamageModifierActor_C_UpdateTimeUntilNextDamage");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_UpdateTimeUntilNextDamage, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000000, "Member 'B_MoveOrDamageModifierActor_C_UpdateTimeUntilNextDamage::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_UpdateTimeUntilNextDamage, CallFunc_GetWorldSubsystem_ReturnValue_1) == 0x000008, "Member 'B_MoveOrDamageModifierActor_C_UpdateTimeUntilNextDamage::CallFunc_GetWorldSubsystem_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_MoveOrDamageModifierActor_C_UpdateTimeUntilNextDamage, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000010, "Member 'B_MoveOrDamageModifierActor_C_UpdateTimeUntilNextDamage::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");

}

