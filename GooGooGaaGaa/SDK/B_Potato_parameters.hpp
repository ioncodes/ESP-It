#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_Potato

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function B_Potato.B_Potato_C.AddImpulseToHitComponent
// 0x0080 (0x0080 - 0x0000)
struct B_Potato_C_AddImpulseToHitComponent final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Velocity;                                          // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSimulatingPhysics_ReturnValue;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50D9[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UB_SkillParametersSubsystem_C*          CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50DA[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AB_Hunter_C*                            K2Node_DynamicCast_AsB_Hunter;                     // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Potato_C_AddImpulseToHitComponent) == 0x000008, "Wrong alignment on B_Potato_C_AddImpulseToHitComponent");
static_assert(sizeof(B_Potato_C_AddImpulseToHitComponent) == 0x000080, "Wrong size on B_Potato_C_AddImpulseToHitComponent");
static_assert(offsetof(B_Potato_C_AddImpulseToHitComponent, HitComponent) == 0x000000, "Member 'B_Potato_C_AddImpulseToHitComponent::HitComponent' has a wrong offset!");
static_assert(offsetof(B_Potato_C_AddImpulseToHitComponent, Velocity) == 0x000008, "Member 'B_Potato_C_AddImpulseToHitComponent::Velocity' has a wrong offset!");
static_assert(offsetof(B_Potato_C_AddImpulseToHitComponent, CallFunc_IsSimulatingPhysics_ReturnValue) == 0x000020, "Member 'B_Potato_C_AddImpulseToHitComponent::CallFunc_IsSimulatingPhysics_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_AddImpulseToHitComponent, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000028, "Member 'B_Potato_C_AddImpulseToHitComponent::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_AddImpulseToHitComponent, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000040, "Member 'B_Potato_C_AddImpulseToHitComponent::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_AddImpulseToHitComponent, CallFunc_GetOwner_ReturnValue) == 0x000048, "Member 'B_Potato_C_AddImpulseToHitComponent::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_AddImpulseToHitComponent, CallFunc_IsValid_ReturnValue) == 0x000050, "Member 'B_Potato_C_AddImpulseToHitComponent::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_AddImpulseToHitComponent, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000058, "Member 'B_Potato_C_AddImpulseToHitComponent::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_AddImpulseToHitComponent, K2Node_DynamicCast_AsB_Hunter) == 0x000070, "Member 'B_Potato_C_AddImpulseToHitComponent::K2Node_DynamicCast_AsB_Hunter' has a wrong offset!");
static_assert(offsetof(B_Potato_C_AddImpulseToHitComponent, K2Node_DynamicCast_bSuccess) == 0x000078, "Member 'B_Potato_C_AddImpulseToHitComponent::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function B_Potato.B_Potato_C.AddScoreStats
// 0x0078 (0x0078 - 0x0000)
struct B_Potato_C_AddScoreStats final
{
public:
	class UB_SkillParametersSubsystem_C*          CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue;               // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50DB[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetInstigator_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue_1;             // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue_2;             // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue_1;             // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue_2;             // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50DC[0x5];                                     // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetWitchPlayerController_PlayerController; // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50DD[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetInstigatorController_ReturnValue;      // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50DE[0x5];                                     // 0x0053(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50DF[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State_1;             // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Potato_C_AddScoreStats) == 0x000008, "Wrong alignment on B_Potato_C_AddScoreStats");
static_assert(sizeof(B_Potato_C_AddScoreStats) == 0x000078, "Wrong size on B_Potato_C_AddScoreStats");
static_assert(offsetof(B_Potato_C_AddScoreStats, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000000, "Member 'B_Potato_C_AddScoreStats::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_AddScoreStats, CallFunc_GetObjectClass_ReturnValue) == 0x000008, "Member 'B_Potato_C_AddScoreStats::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_AddScoreStats, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'B_Potato_C_AddScoreStats::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_AddScoreStats, CallFunc_ClassIsChildOf_ReturnValue) == 0x000011, "Member 'B_Potato_C_AddScoreStats::CallFunc_ClassIsChildOf_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_AddScoreStats, CallFunc_GetInstigator_ReturnValue) == 0x000018, "Member 'B_Potato_C_AddScoreStats::CallFunc_GetInstigator_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_AddScoreStats, CallFunc_GetObjectClass_ReturnValue_1) == 0x000020, "Member 'B_Potato_C_AddScoreStats::CallFunc_GetObjectClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Potato_C_AddScoreStats, CallFunc_GetObjectClass_ReturnValue_2) == 0x000028, "Member 'B_Potato_C_AddScoreStats::CallFunc_GetObjectClass_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_Potato_C_AddScoreStats, CallFunc_ClassIsChildOf_ReturnValue_1) == 0x000030, "Member 'B_Potato_C_AddScoreStats::CallFunc_ClassIsChildOf_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Potato_C_AddScoreStats, CallFunc_ClassIsChildOf_ReturnValue_2) == 0x000031, "Member 'B_Potato_C_AddScoreStats::CallFunc_ClassIsChildOf_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_Potato_C_AddScoreStats, CallFunc_IsValid_ReturnValue_1) == 0x000032, "Member 'B_Potato_C_AddScoreStats::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Potato_C_AddScoreStats, CallFunc_GetWitchPlayerController_PlayerController) == 0x000038, "Member 'B_Potato_C_AddScoreStats::CallFunc_GetWitchPlayerController_PlayerController' has a wrong offset!");
static_assert(offsetof(B_Potato_C_AddScoreStats, CallFunc_BooleanAND_ReturnValue) == 0x000040, "Member 'B_Potato_C_AddScoreStats::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_AddScoreStats, CallFunc_GetInstigatorController_ReturnValue) == 0x000048, "Member 'B_Potato_C_AddScoreStats::CallFunc_GetInstigatorController_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_AddScoreStats, CallFunc_BooleanOR_ReturnValue) == 0x000050, "Member 'B_Potato_C_AddScoreStats::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_AddScoreStats, CallFunc_IsValid_ReturnValue_2) == 0x000051, "Member 'B_Potato_C_AddScoreStats::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_Potato_C_AddScoreStats, CallFunc_BooleanOR_ReturnValue_1) == 0x000052, "Member 'B_Potato_C_AddScoreStats::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Potato_C_AddScoreStats, K2Node_DynamicCast_AsB_Player_State) == 0x000058, "Member 'B_Potato_C_AddScoreStats::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_Potato_C_AddScoreStats, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'B_Potato_C_AddScoreStats::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_Potato_C_AddScoreStats, K2Node_DynamicCast_AsB_Player_State_1) == 0x000068, "Member 'B_Potato_C_AddScoreStats::K2Node_DynamicCast_AsB_Player_State_1' has a wrong offset!");
static_assert(offsetof(B_Potato_C_AddScoreStats, K2Node_DynamicCast_bSuccess_1) == 0x000070, "Member 'B_Potato_C_AddScoreStats::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function B_Potato.B_Potato_C.ApplyPointDamage
// 0x0118 (0x0118 - 0x0000)
struct B_Potato_C_ApplyPointDamage final
{
public:
	class AActor*                                 Param_HitActor;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitFromDirection;                                  // 0x0008(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             HitInfo;                                           // 0x0020(0x00E8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AController*                            EventInstigator;                                   // 0x0108(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 DamageCauser;                                      // 0x0110(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Potato_C_ApplyPointDamage) == 0x000008, "Wrong alignment on B_Potato_C_ApplyPointDamage");
static_assert(sizeof(B_Potato_C_ApplyPointDamage) == 0x000118, "Wrong size on B_Potato_C_ApplyPointDamage");
static_assert(offsetof(B_Potato_C_ApplyPointDamage, Param_HitActor) == 0x000000, "Member 'B_Potato_C_ApplyPointDamage::Param_HitActor' has a wrong offset!");
static_assert(offsetof(B_Potato_C_ApplyPointDamage, HitFromDirection) == 0x000008, "Member 'B_Potato_C_ApplyPointDamage::HitFromDirection' has a wrong offset!");
static_assert(offsetof(B_Potato_C_ApplyPointDamage, HitInfo) == 0x000020, "Member 'B_Potato_C_ApplyPointDamage::HitInfo' has a wrong offset!");
static_assert(offsetof(B_Potato_C_ApplyPointDamage, EventInstigator) == 0x000108, "Member 'B_Potato_C_ApplyPointDamage::EventInstigator' has a wrong offset!");
static_assert(offsetof(B_Potato_C_ApplyPointDamage, DamageCauser) == 0x000110, "Member 'B_Potato_C_ApplyPointDamage::DamageCauser' has a wrong offset!");

// Function B_Potato.B_Potato_C.BeginPlaySetup
// 0x0060 (0x0060 - 0x0000)
struct B_Potato_C_BeginPlaySetup final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50E0[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50E1[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50E2[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_ImpostorGameState_C*                 K2Node_DynamicCast_AsB_Impostor_Game_State;        // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50E3[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_SkillParametersSubsystem_C*          CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0050(0x0008)(NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_SetTimer_Time_ImplicitCast;            // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Potato_C_BeginPlaySetup) == 0x000008, "Wrong alignment on B_Potato_C_BeginPlaySetup");
static_assert(sizeof(B_Potato_C_BeginPlaySetup) == 0x000060, "Wrong size on B_Potato_C_BeginPlaySetup");
static_assert(offsetof(B_Potato_C_BeginPlaySetup, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'B_Potato_C_BeginPlaySetup::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_BeginPlaySetup, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'B_Potato_C_BeginPlaySetup::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(B_Potato_C_BeginPlaySetup, CallFunc_GetGameState_ReturnValue) == 0x000018, "Member 'B_Potato_C_BeginPlaySetup::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_BeginPlaySetup, K2Node_DynamicCast_AsB_Game_State) == 0x000020, "Member 'B_Potato_C_BeginPlaySetup::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(B_Potato_C_BeginPlaySetup, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'B_Potato_C_BeginPlaySetup::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_Potato_C_BeginPlaySetup, K2Node_DynamicCast_AsB_Impostor_Game_State) == 0x000030, "Member 'B_Potato_C_BeginPlaySetup::K2Node_DynamicCast_AsB_Impostor_Game_State' has a wrong offset!");
static_assert(offsetof(B_Potato_C_BeginPlaySetup, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'B_Potato_C_BeginPlaySetup::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_Potato_C_BeginPlaySetup, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000040, "Member 'B_Potato_C_BeginPlaySetup::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_BeginPlaySetup, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000048, "Member 'B_Potato_C_BeginPlaySetup::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_BeginPlaySetup, CallFunc_K2_SetTimer_ReturnValue) == 0x000050, "Member 'B_Potato_C_BeginPlaySetup::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_BeginPlaySetup, CallFunc_K2_SetTimer_Time_ImplicitCast) == 0x000058, "Member 'B_Potato_C_BeginPlaySetup::CallFunc_K2_SetTimer_Time_ImplicitCast' has a wrong offset!");

// Function B_Potato.B_Potato_C.DestroyIfHPIsZeroOrWitchHit
// 0x0078 (0x0078 - 0x0000)
struct B_Potato_C_DestroyIfHPIsZeroOrWitchHit final
{
public:
	double                                        HitAngle;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50E4[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50E5[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_ImpostorGameState_C*                 K2Node_DynamicCast_AsB_Impostor_Game_State;        // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50E6[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue;               // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50E7[0x6];                                     // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetInstigator_ReturnValue;                // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue_1;             // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue_2;             // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue_1;             // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue_2;             // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x006B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50E8[0x2];                                     // 0x006E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Potato_C_DestroyIfHPIsZeroOrWitchHit) == 0x000008, "Wrong alignment on B_Potato_C_DestroyIfHPIsZeroOrWitchHit");
static_assert(sizeof(B_Potato_C_DestroyIfHPIsZeroOrWitchHit) == 0x000078, "Wrong size on B_Potato_C_DestroyIfHPIsZeroOrWitchHit");
static_assert(offsetof(B_Potato_C_DestroyIfHPIsZeroOrWitchHit, HitAngle) == 0x000000, "Member 'B_Potato_C_DestroyIfHPIsZeroOrWitchHit::HitAngle' has a wrong offset!");
static_assert(offsetof(B_Potato_C_DestroyIfHPIsZeroOrWitchHit, CallFunc_GetGameState_ReturnValue) == 0x000008, "Member 'B_Potato_C_DestroyIfHPIsZeroOrWitchHit::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_DestroyIfHPIsZeroOrWitchHit, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000010, "Member 'B_Potato_C_DestroyIfHPIsZeroOrWitchHit::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_DestroyIfHPIsZeroOrWitchHit, K2Node_DynamicCast_AsB_Game_State) == 0x000018, "Member 'B_Potato_C_DestroyIfHPIsZeroOrWitchHit::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(B_Potato_C_DestroyIfHPIsZeroOrWitchHit, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'B_Potato_C_DestroyIfHPIsZeroOrWitchHit::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_Potato_C_DestroyIfHPIsZeroOrWitchHit, K2Node_DynamicCast_AsB_Impostor_Game_State) == 0x000028, "Member 'B_Potato_C_DestroyIfHPIsZeroOrWitchHit::K2Node_DynamicCast_AsB_Impostor_Game_State' has a wrong offset!");
static_assert(offsetof(B_Potato_C_DestroyIfHPIsZeroOrWitchHit, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'B_Potato_C_DestroyIfHPIsZeroOrWitchHit::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_Potato_C_DestroyIfHPIsZeroOrWitchHit, CallFunc_Abs_ReturnValue) == 0x000038, "Member 'B_Potato_C_DestroyIfHPIsZeroOrWitchHit::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_DestroyIfHPIsZeroOrWitchHit, CallFunc_GetObjectClass_ReturnValue) == 0x000040, "Member 'B_Potato_C_DestroyIfHPIsZeroOrWitchHit::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_DestroyIfHPIsZeroOrWitchHit, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'B_Potato_C_DestroyIfHPIsZeroOrWitchHit::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_DestroyIfHPIsZeroOrWitchHit, CallFunc_ClassIsChildOf_ReturnValue) == 0x000049, "Member 'B_Potato_C_DestroyIfHPIsZeroOrWitchHit::CallFunc_ClassIsChildOf_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_DestroyIfHPIsZeroOrWitchHit, CallFunc_GetInstigator_ReturnValue) == 0x000050, "Member 'B_Potato_C_DestroyIfHPIsZeroOrWitchHit::CallFunc_GetInstigator_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_DestroyIfHPIsZeroOrWitchHit, CallFunc_GetObjectClass_ReturnValue_1) == 0x000058, "Member 'B_Potato_C_DestroyIfHPIsZeroOrWitchHit::CallFunc_GetObjectClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Potato_C_DestroyIfHPIsZeroOrWitchHit, CallFunc_GetObjectClass_ReturnValue_2) == 0x000060, "Member 'B_Potato_C_DestroyIfHPIsZeroOrWitchHit::CallFunc_GetObjectClass_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_Potato_C_DestroyIfHPIsZeroOrWitchHit, CallFunc_ClassIsChildOf_ReturnValue_1) == 0x000068, "Member 'B_Potato_C_DestroyIfHPIsZeroOrWitchHit::CallFunc_ClassIsChildOf_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Potato_C_DestroyIfHPIsZeroOrWitchHit, CallFunc_ClassIsChildOf_ReturnValue_2) == 0x000069, "Member 'B_Potato_C_DestroyIfHPIsZeroOrWitchHit::CallFunc_ClassIsChildOf_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_Potato_C_DestroyIfHPIsZeroOrWitchHit, CallFunc_IsValid_ReturnValue_1) == 0x00006A, "Member 'B_Potato_C_DestroyIfHPIsZeroOrWitchHit::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Potato_C_DestroyIfHPIsZeroOrWitchHit, CallFunc_BooleanAND_ReturnValue) == 0x00006B, "Member 'B_Potato_C_DestroyIfHPIsZeroOrWitchHit::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_DestroyIfHPIsZeroOrWitchHit, CallFunc_BooleanOR_ReturnValue) == 0x00006C, "Member 'B_Potato_C_DestroyIfHPIsZeroOrWitchHit::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_DestroyIfHPIsZeroOrWitchHit, CallFunc_BooleanOR_ReturnValue_1) == 0x00006D, "Member 'B_Potato_C_DestroyIfHPIsZeroOrWitchHit::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Potato_C_DestroyIfHPIsZeroOrWitchHit, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000070, "Member 'B_Potato_C_DestroyIfHPIsZeroOrWitchHit::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");

// Function B_Potato.B_Potato_C.ExecuteUbergraph_B_Potato
// 0x03D0 (0x03D0 - 0x0000)
struct B_Potato_C_ExecuteUbergraph_B_Potato final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50E9[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_CustomEvent_Location;                       // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_Event_MyComp;                               // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_Other;                                // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_Event_OtherComp;                            // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bSelfMoved;                           // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50EA[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Event_HitLocation;                          // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_HitNormal;                            // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_NormalImpulse;                        // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_Hit;                                  // 0x0088(0x00E8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0170(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50EB[0x8];                                     // 0x0188(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             K2Node_Event_SpawnTransform;                       // 0x0190(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_Owner;                                // 0x01F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_Instigator;                           // 0x01F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50EC[0xF];                                     // 0x0201(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             K2Node_CustomEvent_SpawnTransform;                 // 0x0210(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_Owner;                          // 0x0270(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_CustomEvent_Instigator;                     // 0x0278(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_Velocity;                       // 0x0280(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_HitActor;                       // 0x0298(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_HitFromDirection;               // 0x02A0(0x0018)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_CustomEvent_HitInfo;                        // 0x02B8(0x00E8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AController*                            K2Node_CustomEvent_EventInstigator;                // 0x03A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_DamageCauser;                   // 0x03A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x03B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50ED[0x7];                                     // 0x03B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_SkillParametersSubsystem_C*          CallFunc_GetWorldSubsystem_ReturnValue;            // 0x03B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ApplyPointDamage_ReturnValue;             // 0x03C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Delay_Duration_ImplicitCast;              // 0x03C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ApplyPointDamage_BaseDamage_ImplicitCast; // 0x03C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Potato_C_ExecuteUbergraph_B_Potato) == 0x000010, "Wrong alignment on B_Potato_C_ExecuteUbergraph_B_Potato");
static_assert(sizeof(B_Potato_C_ExecuteUbergraph_B_Potato) == 0x0003D0, "Wrong size on B_Potato_C_ExecuteUbergraph_B_Potato");
static_assert(offsetof(B_Potato_C_ExecuteUbergraph_B_Potato, EntryPoint) == 0x000000, "Member 'B_Potato_C_ExecuteUbergraph_B_Potato::EntryPoint' has a wrong offset!");
static_assert(offsetof(B_Potato_C_ExecuteUbergraph_B_Potato, K2Node_CustomEvent_Location) == 0x000008, "Member 'B_Potato_C_ExecuteUbergraph_B_Potato::K2Node_CustomEvent_Location' has a wrong offset!");
static_assert(offsetof(B_Potato_C_ExecuteUbergraph_B_Potato, K2Node_Event_MyComp) == 0x000020, "Member 'B_Potato_C_ExecuteUbergraph_B_Potato::K2Node_Event_MyComp' has a wrong offset!");
static_assert(offsetof(B_Potato_C_ExecuteUbergraph_B_Potato, K2Node_Event_Other) == 0x000028, "Member 'B_Potato_C_ExecuteUbergraph_B_Potato::K2Node_Event_Other' has a wrong offset!");
static_assert(offsetof(B_Potato_C_ExecuteUbergraph_B_Potato, K2Node_Event_OtherComp) == 0x000030, "Member 'B_Potato_C_ExecuteUbergraph_B_Potato::K2Node_Event_OtherComp' has a wrong offset!");
static_assert(offsetof(B_Potato_C_ExecuteUbergraph_B_Potato, K2Node_Event_bSelfMoved) == 0x000038, "Member 'B_Potato_C_ExecuteUbergraph_B_Potato::K2Node_Event_bSelfMoved' has a wrong offset!");
static_assert(offsetof(B_Potato_C_ExecuteUbergraph_B_Potato, K2Node_Event_HitLocation) == 0x000040, "Member 'B_Potato_C_ExecuteUbergraph_B_Potato::K2Node_Event_HitLocation' has a wrong offset!");
static_assert(offsetof(B_Potato_C_ExecuteUbergraph_B_Potato, K2Node_Event_HitNormal) == 0x000058, "Member 'B_Potato_C_ExecuteUbergraph_B_Potato::K2Node_Event_HitNormal' has a wrong offset!");
static_assert(offsetof(B_Potato_C_ExecuteUbergraph_B_Potato, K2Node_Event_NormalImpulse) == 0x000070, "Member 'B_Potato_C_ExecuteUbergraph_B_Potato::K2Node_Event_NormalImpulse' has a wrong offset!");
static_assert(offsetof(B_Potato_C_ExecuteUbergraph_B_Potato, K2Node_Event_Hit) == 0x000088, "Member 'B_Potato_C_ExecuteUbergraph_B_Potato::K2Node_Event_Hit' has a wrong offset!");
static_assert(offsetof(B_Potato_C_ExecuteUbergraph_B_Potato, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000170, "Member 'B_Potato_C_ExecuteUbergraph_B_Potato::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_ExecuteUbergraph_B_Potato, K2Node_Event_SpawnTransform) == 0x000190, "Member 'B_Potato_C_ExecuteUbergraph_B_Potato::K2Node_Event_SpawnTransform' has a wrong offset!");
static_assert(offsetof(B_Potato_C_ExecuteUbergraph_B_Potato, K2Node_Event_Owner) == 0x0001F0, "Member 'B_Potato_C_ExecuteUbergraph_B_Potato::K2Node_Event_Owner' has a wrong offset!");
static_assert(offsetof(B_Potato_C_ExecuteUbergraph_B_Potato, K2Node_Event_Instigator) == 0x0001F8, "Member 'B_Potato_C_ExecuteUbergraph_B_Potato::K2Node_Event_Instigator' has a wrong offset!");
static_assert(offsetof(B_Potato_C_ExecuteUbergraph_B_Potato, CallFunc_HasAuthority_ReturnValue) == 0x000200, "Member 'B_Potato_C_ExecuteUbergraph_B_Potato::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_ExecuteUbergraph_B_Potato, K2Node_CustomEvent_SpawnTransform) == 0x000210, "Member 'B_Potato_C_ExecuteUbergraph_B_Potato::K2Node_CustomEvent_SpawnTransform' has a wrong offset!");
static_assert(offsetof(B_Potato_C_ExecuteUbergraph_B_Potato, K2Node_CustomEvent_Owner) == 0x000270, "Member 'B_Potato_C_ExecuteUbergraph_B_Potato::K2Node_CustomEvent_Owner' has a wrong offset!");
static_assert(offsetof(B_Potato_C_ExecuteUbergraph_B_Potato, K2Node_CustomEvent_Instigator) == 0x000278, "Member 'B_Potato_C_ExecuteUbergraph_B_Potato::K2Node_CustomEvent_Instigator' has a wrong offset!");
static_assert(offsetof(B_Potato_C_ExecuteUbergraph_B_Potato, K2Node_CustomEvent_Velocity) == 0x000280, "Member 'B_Potato_C_ExecuteUbergraph_B_Potato::K2Node_CustomEvent_Velocity' has a wrong offset!");
static_assert(offsetof(B_Potato_C_ExecuteUbergraph_B_Potato, K2Node_CustomEvent_HitActor) == 0x000298, "Member 'B_Potato_C_ExecuteUbergraph_B_Potato::K2Node_CustomEvent_HitActor' has a wrong offset!");
static_assert(offsetof(B_Potato_C_ExecuteUbergraph_B_Potato, K2Node_CustomEvent_HitFromDirection) == 0x0002A0, "Member 'B_Potato_C_ExecuteUbergraph_B_Potato::K2Node_CustomEvent_HitFromDirection' has a wrong offset!");
static_assert(offsetof(B_Potato_C_ExecuteUbergraph_B_Potato, K2Node_CustomEvent_HitInfo) == 0x0002B8, "Member 'B_Potato_C_ExecuteUbergraph_B_Potato::K2Node_CustomEvent_HitInfo' has a wrong offset!");
static_assert(offsetof(B_Potato_C_ExecuteUbergraph_B_Potato, K2Node_CustomEvent_EventInstigator) == 0x0003A0, "Member 'B_Potato_C_ExecuteUbergraph_B_Potato::K2Node_CustomEvent_EventInstigator' has a wrong offset!");
static_assert(offsetof(B_Potato_C_ExecuteUbergraph_B_Potato, K2Node_CustomEvent_DamageCauser) == 0x0003A8, "Member 'B_Potato_C_ExecuteUbergraph_B_Potato::K2Node_CustomEvent_DamageCauser' has a wrong offset!");
static_assert(offsetof(B_Potato_C_ExecuteUbergraph_B_Potato, CallFunc_IsValid_ReturnValue) == 0x0003B0, "Member 'B_Potato_C_ExecuteUbergraph_B_Potato::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_ExecuteUbergraph_B_Potato, CallFunc_GetWorldSubsystem_ReturnValue) == 0x0003B8, "Member 'B_Potato_C_ExecuteUbergraph_B_Potato::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_ExecuteUbergraph_B_Potato, CallFunc_ApplyPointDamage_ReturnValue) == 0x0003C0, "Member 'B_Potato_C_ExecuteUbergraph_B_Potato::CallFunc_ApplyPointDamage_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_ExecuteUbergraph_B_Potato, CallFunc_Delay_Duration_ImplicitCast) == 0x0003C4, "Member 'B_Potato_C_ExecuteUbergraph_B_Potato::CallFunc_Delay_Duration_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_Potato_C_ExecuteUbergraph_B_Potato, CallFunc_ApplyPointDamage_BaseDamage_ImplicitCast) == 0x0003C8, "Member 'B_Potato_C_ExecuteUbergraph_B_Potato::CallFunc_ApplyPointDamage_BaseDamage_ImplicitCast' has a wrong offset!");

// Function B_Potato.B_Potato_C.GetRippleEffect
// 0x0008 (0x0008 - 0x0000)
struct B_Potato_C_GetRippleEffect final
{
public:
	class UNiagaraSystem*                         RippleEffectNiagara;                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Potato_C_GetRippleEffect) == 0x000008, "Wrong alignment on B_Potato_C_GetRippleEffect");
static_assert(sizeof(B_Potato_C_GetRippleEffect) == 0x000008, "Wrong size on B_Potato_C_GetRippleEffect");
static_assert(offsetof(B_Potato_C_GetRippleEffect, RippleEffectNiagara) == 0x000000, "Member 'B_Potato_C_GetRippleEffect::RippleEffectNiagara' has a wrong offset!");

// Function B_Potato.B_Potato_C.GetRippleScale
// 0x0018 (0x0018 - 0x0000)
struct B_Potato_C_GetRippleScale final
{
public:
	struct FVector                                Scale;                                             // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Potato_C_GetRippleScale) == 0x000008, "Wrong alignment on B_Potato_C_GetRippleScale");
static_assert(sizeof(B_Potato_C_GetRippleScale) == 0x000018, "Wrong size on B_Potato_C_GetRippleScale");
static_assert(offsetof(B_Potato_C_GetRippleScale, Scale) == 0x000000, "Member 'B_Potato_C_GetRippleScale::Scale' has a wrong offset!");

// Function B_Potato.B_Potato_C.GetSplashEffect
// 0x0008 (0x0008 - 0x0000)
struct B_Potato_C_GetSplashEffect final
{
public:
	class UNiagaraSystem*                         SplashEffectNiagara;                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Potato_C_GetSplashEffect) == 0x000008, "Wrong alignment on B_Potato_C_GetSplashEffect");
static_assert(sizeof(B_Potato_C_GetSplashEffect) == 0x000008, "Wrong size on B_Potato_C_GetSplashEffect");
static_assert(offsetof(B_Potato_C_GetSplashEffect, SplashEffectNiagara) == 0x000000, "Member 'B_Potato_C_GetSplashEffect::SplashEffectNiagara' has a wrong offset!");

// Function B_Potato.B_Potato_C.GetSplashScale
// 0x0018 (0x0018 - 0x0000)
struct B_Potato_C_GetSplashScale final
{
public:
	struct FVector                                Scale;                                             // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Potato_C_GetSplashScale) == 0x000008, "Wrong alignment on B_Potato_C_GetSplashScale");
static_assert(sizeof(B_Potato_C_GetSplashScale) == 0x000018, "Wrong size on B_Potato_C_GetSplashScale");
static_assert(offsetof(B_Potato_C_GetSplashScale, Scale) == 0x000000, "Member 'B_Potato_C_GetSplashScale::Scale' has a wrong offset!");

// Function B_Potato.B_Potato_C.GetSplashSound
// 0x0008 (0x0008 - 0x0000)
struct B_Potato_C_GetSplashSound final
{
public:
	class USoundCue*                              Sound;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Potato_C_GetSplashSound) == 0x000008, "Wrong alignment on B_Potato_C_GetSplashSound");
static_assert(sizeof(B_Potato_C_GetSplashSound) == 0x000008, "Wrong size on B_Potato_C_GetSplashSound");
static_assert(offsetof(B_Potato_C_GetSplashSound, Sound) == 0x000000, "Member 'B_Potato_C_GetSplashSound::Sound' has a wrong offset!");

// Function B_Potato.B_Potato_C.HandleHit
// 0x01D0 (0x01D0 - 0x0000)
struct B_Potato_C_HandleHit final
{
public:
	struct FVector                                HitNormal;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Param_HitActor;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             HitInfo;                                           // 0x0020(0x00E8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0108(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0110(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue;               // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50EE[0x6];                                     // 0x011A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0120(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50EF[0x7];                                     // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetInstigator_ReturnValue;                // 0x0148(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AController*                            CallFunc_GetInstigatorController_ReturnValue;      // 0x0150(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0158(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVelocity_ReturnValue_1;                // 0x0160(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x0178(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50F0[0x7];                                     // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0188(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AB_ImpostorGameState_C*                 K2Node_DynamicCast_AsB_Impostor_Game_State;        // 0x01A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50F1[0x7];                                     // 0x01A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Dot_VectorVector_ReturnValue;             // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVelocity_ReturnValue_2;                // 0x01B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Potato_C_HandleHit) == 0x000008, "Wrong alignment on B_Potato_C_HandleHit");
static_assert(sizeof(B_Potato_C_HandleHit) == 0x0001D0, "Wrong size on B_Potato_C_HandleHit");
static_assert(offsetof(B_Potato_C_HandleHit, HitNormal) == 0x000000, "Member 'B_Potato_C_HandleHit::HitNormal' has a wrong offset!");
static_assert(offsetof(B_Potato_C_HandleHit, Param_HitActor) == 0x000018, "Member 'B_Potato_C_HandleHit::Param_HitActor' has a wrong offset!");
static_assert(offsetof(B_Potato_C_HandleHit, HitInfo) == 0x000020, "Member 'B_Potato_C_HandleHit::HitInfo' has a wrong offset!");
static_assert(offsetof(B_Potato_C_HandleHit, HitComponent) == 0x000108, "Member 'B_Potato_C_HandleHit::HitComponent' has a wrong offset!");
static_assert(offsetof(B_Potato_C_HandleHit, CallFunc_GetObjectClass_ReturnValue) == 0x000110, "Member 'B_Potato_C_HandleHit::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_HandleHit, CallFunc_ClassIsChildOf_ReturnValue) == 0x000118, "Member 'B_Potato_C_HandleHit::CallFunc_ClassIsChildOf_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_HandleHit, CallFunc_Not_PreBool_ReturnValue) == 0x000119, "Member 'B_Potato_C_HandleHit::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_HandleHit, CallFunc_GetVelocity_ReturnValue) == 0x000120, "Member 'B_Potato_C_HandleHit::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_HandleHit, CallFunc_VSize_ReturnValue) == 0x000138, "Member 'B_Potato_C_HandleHit::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_HandleHit, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000140, "Member 'B_Potato_C_HandleHit::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_HandleHit, CallFunc_GetInstigator_ReturnValue) == 0x000148, "Member 'B_Potato_C_HandleHit::CallFunc_GetInstigator_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_HandleHit, CallFunc_GetInstigatorController_ReturnValue) == 0x000150, "Member 'B_Potato_C_HandleHit::CallFunc_GetInstigatorController_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_HandleHit, CallFunc_GetGameState_ReturnValue) == 0x000158, "Member 'B_Potato_C_HandleHit::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_HandleHit, CallFunc_GetVelocity_ReturnValue_1) == 0x000160, "Member 'B_Potato_C_HandleHit::CallFunc_GetVelocity_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Potato_C_HandleHit, K2Node_DynamicCast_AsB_Game_State) == 0x000178, "Member 'B_Potato_C_HandleHit::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(B_Potato_C_HandleHit, K2Node_DynamicCast_bSuccess) == 0x000180, "Member 'B_Potato_C_HandleHit::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_Potato_C_HandleHit, CallFunc_Normal_ReturnValue) == 0x000188, "Member 'B_Potato_C_HandleHit::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_HandleHit, K2Node_DynamicCast_AsB_Impostor_Game_State) == 0x0001A0, "Member 'B_Potato_C_HandleHit::K2Node_DynamicCast_AsB_Impostor_Game_State' has a wrong offset!");
static_assert(offsetof(B_Potato_C_HandleHit, K2Node_DynamicCast_bSuccess_1) == 0x0001A8, "Member 'B_Potato_C_HandleHit::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_Potato_C_HandleHit, CallFunc_Dot_VectorVector_ReturnValue) == 0x0001B0, "Member 'B_Potato_C_HandleHit::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_HandleHit, CallFunc_GetVelocity_ReturnValue_2) == 0x0001B8, "Member 'B_Potato_C_HandleHit::CallFunc_GetVelocity_ReturnValue_2' has a wrong offset!");

// Function B_Potato.B_Potato_C.HighStaminaTearUp
// 0x0088 (0x0088 - 0x0000)
struct B_Potato_C_HighStaminaTearUp final
{
public:
	class UB_SkillParametersSubsystem_C*          CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_RotatorToVector_ReturnValue;         // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SetVectorLength_ReturnValue;              // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetVectorLength_size_ImplicitCast;        // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Potato_C_HighStaminaTearUp) == 0x000008, "Wrong alignment on B_Potato_C_HighStaminaTearUp");
static_assert(sizeof(B_Potato_C_HighStaminaTearUp) == 0x000088, "Wrong size on B_Potato_C_HighStaminaTearUp");
static_assert(offsetof(B_Potato_C_HighStaminaTearUp, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000000, "Member 'B_Potato_C_HighStaminaTearUp::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_HighStaminaTearUp, CallFunc_BreakTransform_Location) == 0x000008, "Member 'B_Potato_C_HighStaminaTearUp::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(B_Potato_C_HighStaminaTearUp, CallFunc_BreakTransform_Rotation) == 0x000020, "Member 'B_Potato_C_HighStaminaTearUp::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(B_Potato_C_HighStaminaTearUp, CallFunc_BreakTransform_Scale) == 0x000038, "Member 'B_Potato_C_HighStaminaTearUp::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(B_Potato_C_HighStaminaTearUp, CallFunc_Conv_RotatorToVector_ReturnValue) == 0x000050, "Member 'B_Potato_C_HighStaminaTearUp::CallFunc_Conv_RotatorToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_HighStaminaTearUp, CallFunc_SetVectorLength_ReturnValue) == 0x000068, "Member 'B_Potato_C_HighStaminaTearUp::CallFunc_SetVectorLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_HighStaminaTearUp, CallFunc_SetVectorLength_size_ImplicitCast) == 0x000080, "Member 'B_Potato_C_HighStaminaTearUp::CallFunc_SetVectorLength_size_ImplicitCast' has a wrong offset!");

// Function B_Potato.B_Potato_C.IncrementLifeSpanTimer
// 0x0010 (0x0010 - 0x0000)
struct B_Potato_C_IncrementLifeSpanTimer final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50F2[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50F3[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Potato_C_IncrementLifeSpanTimer) == 0x000004, "Wrong alignment on B_Potato_C_IncrementLifeSpanTimer");
static_assert(sizeof(B_Potato_C_IncrementLifeSpanTimer) == 0x000010, "Wrong size on B_Potato_C_IncrementLifeSpanTimer");
static_assert(offsetof(B_Potato_C_IncrementLifeSpanTimer, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'B_Potato_C_IncrementLifeSpanTimer::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_IncrementLifeSpanTimer, Temp_int_Variable) == 0x000004, "Member 'B_Potato_C_IncrementLifeSpanTimer::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(B_Potato_C_IncrementLifeSpanTimer, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000008, "Member 'B_Potato_C_IncrementLifeSpanTimer::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_IncrementLifeSpanTimer, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'B_Potato_C_IncrementLifeSpanTimer::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function B_Potato.B_Potato_C.InitializeRules
// 0x0010 (0x0010 - 0x0000)
struct B_Potato_C_InitializeRules final
{
public:
	class UB_SkillParametersSubsystem_C*          CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_ProjectileGravityScale_ImplicitCast; // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Potato_C_InitializeRules) == 0x000008, "Wrong alignment on B_Potato_C_InitializeRules");
static_assert(sizeof(B_Potato_C_InitializeRules) == 0x000010, "Wrong size on B_Potato_C_InitializeRules");
static_assert(offsetof(B_Potato_C_InitializeRules, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000000, "Member 'B_Potato_C_InitializeRules::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_InitializeRules, K2Node_VariableSet_ProjectileGravityScale_ImplicitCast) == 0x000008, "Member 'B_Potato_C_InitializeRules::K2Node_VariableSet_ProjectileGravityScale_ImplicitCast' has a wrong offset!");

// Function B_Potato.B_Potato_C.LowStaminaTearUp
// 0x0180 (0x0180 - 0x0000)
struct B_Potato_C_LowStaminaTearUp final
{
public:
	double                                        Param_Stamina;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FMax_ReturnValue;                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_RotatorToVector_ReturnValue;         // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UB_SkillParametersSubsystem_C*          CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SetVectorLength_ReturnValue;              // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x00C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0110(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetVectorLength_size_ImplicitCast;        // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Potato_C_LowStaminaTearUp) == 0x000010, "Wrong alignment on B_Potato_C_LowStaminaTearUp");
static_assert(sizeof(B_Potato_C_LowStaminaTearUp) == 0x000180, "Wrong size on B_Potato_C_LowStaminaTearUp");
static_assert(offsetof(B_Potato_C_LowStaminaTearUp, Param_Stamina) == 0x000000, "Member 'B_Potato_C_LowStaminaTearUp::Param_Stamina' has a wrong offset!");
static_assert(offsetof(B_Potato_C_LowStaminaTearUp, CallFunc_FMax_ReturnValue) == 0x000008, "Member 'B_Potato_C_LowStaminaTearUp::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_LowStaminaTearUp, CallFunc_BreakTransform_Location) == 0x000010, "Member 'B_Potato_C_LowStaminaTearUp::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(B_Potato_C_LowStaminaTearUp, CallFunc_BreakTransform_Rotation) == 0x000028, "Member 'B_Potato_C_LowStaminaTearUp::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(B_Potato_C_LowStaminaTearUp, CallFunc_BreakTransform_Scale) == 0x000040, "Member 'B_Potato_C_LowStaminaTearUp::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(B_Potato_C_LowStaminaTearUp, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000058, "Member 'B_Potato_C_LowStaminaTearUp::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_LowStaminaTearUp, CallFunc_Conv_RotatorToVector_ReturnValue) == 0x000060, "Member 'B_Potato_C_LowStaminaTearUp::CallFunc_Conv_RotatorToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_LowStaminaTearUp, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000078, "Member 'B_Potato_C_LowStaminaTearUp::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_LowStaminaTearUp, CallFunc_SetVectorLength_ReturnValue) == 0x000080, "Member 'B_Potato_C_LowStaminaTearUp::CallFunc_SetVectorLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_LowStaminaTearUp, CallFunc_BreakTransform_Location_1) == 0x000098, "Member 'B_Potato_C_LowStaminaTearUp::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(B_Potato_C_LowStaminaTearUp, CallFunc_BreakTransform_Rotation_1) == 0x0000B0, "Member 'B_Potato_C_LowStaminaTearUp::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(B_Potato_C_LowStaminaTearUp, CallFunc_BreakTransform_Scale_1) == 0x0000C8, "Member 'B_Potato_C_LowStaminaTearUp::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(B_Potato_C_LowStaminaTearUp, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000E0, "Member 'B_Potato_C_LowStaminaTearUp::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_LowStaminaTearUp, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000F8, "Member 'B_Potato_C_LowStaminaTearUp::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_LowStaminaTearUp, CallFunc_MakeTransform_ReturnValue) == 0x000110, "Member 'B_Potato_C_LowStaminaTearUp::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_LowStaminaTearUp, CallFunc_SetVectorLength_size_ImplicitCast) == 0x000170, "Member 'B_Potato_C_LowStaminaTearUp::CallFunc_SetVectorLength_size_ImplicitCast' has a wrong offset!");

// Function B_Potato.B_Potato_C.Play Destroy Effects Multi
// 0x0018 (0x0018 - 0x0000)
struct B_Potato_C_Play_Destroy_Effects_Multi final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Potato_C_Play_Destroy_Effects_Multi) == 0x000008, "Wrong alignment on B_Potato_C_Play_Destroy_Effects_Multi");
static_assert(sizeof(B_Potato_C_Play_Destroy_Effects_Multi) == 0x000018, "Wrong size on B_Potato_C_Play_Destroy_Effects_Multi");
static_assert(offsetof(B_Potato_C_Play_Destroy_Effects_Multi, Location) == 0x000000, "Member 'B_Potato_C_Play_Destroy_Effects_Multi::Location' has a wrong offset!");

// Function B_Potato.B_Potato_C.PlayDestroyEffects
// 0x0040 (0x0040 - 0x0000)
struct B_Potato_C_PlayDestroyEffects final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UB_SkillParametersSubsystem_C*          CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      CallFunc_SpawnSystemAtLocation_ReturnValue;        // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Potato_C_PlayDestroyEffects) == 0x000008, "Wrong alignment on B_Potato_C_PlayDestroyEffects");
static_assert(sizeof(B_Potato_C_PlayDestroyEffects) == 0x000040, "Wrong size on B_Potato_C_PlayDestroyEffects");
static_assert(offsetof(B_Potato_C_PlayDestroyEffects, Location) == 0x000000, "Member 'B_Potato_C_PlayDestroyEffects::Location' has a wrong offset!");
static_assert(offsetof(B_Potato_C_PlayDestroyEffects, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000018, "Member 'B_Potato_C_PlayDestroyEffects::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_PlayDestroyEffects, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000020, "Member 'B_Potato_C_PlayDestroyEffects::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_PlayDestroyEffects, CallFunc_SpawnSystemAtLocation_ReturnValue) == 0x000038, "Member 'B_Potato_C_PlayDestroyEffects::CallFunc_SpawnSystemAtLocation_ReturnValue' has a wrong offset!");

// Function B_Potato.B_Potato_C.ReceiveHit
// 0x0150 (0x0150 - 0x0000)
struct B_Potato_C_ReceiveHit final
{
public:
	class UPrimitiveComponent*                    MyComp;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Other;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          bSelfMoved;                                        // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50F4[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitLocation;                                       // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitNormal;                                         // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NormalImpulse;                                     // 0x0050(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0068(0x00E8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(B_Potato_C_ReceiveHit) == 0x000008, "Wrong alignment on B_Potato_C_ReceiveHit");
static_assert(sizeof(B_Potato_C_ReceiveHit) == 0x000150, "Wrong size on B_Potato_C_ReceiveHit");
static_assert(offsetof(B_Potato_C_ReceiveHit, MyComp) == 0x000000, "Member 'B_Potato_C_ReceiveHit::MyComp' has a wrong offset!");
static_assert(offsetof(B_Potato_C_ReceiveHit, Other) == 0x000008, "Member 'B_Potato_C_ReceiveHit::Other' has a wrong offset!");
static_assert(offsetof(B_Potato_C_ReceiveHit, OtherComp) == 0x000010, "Member 'B_Potato_C_ReceiveHit::OtherComp' has a wrong offset!");
static_assert(offsetof(B_Potato_C_ReceiveHit, bSelfMoved) == 0x000018, "Member 'B_Potato_C_ReceiveHit::bSelfMoved' has a wrong offset!");
static_assert(offsetof(B_Potato_C_ReceiveHit, HitLocation) == 0x000020, "Member 'B_Potato_C_ReceiveHit::HitLocation' has a wrong offset!");
static_assert(offsetof(B_Potato_C_ReceiveHit, HitNormal) == 0x000038, "Member 'B_Potato_C_ReceiveHit::HitNormal' has a wrong offset!");
static_assert(offsetof(B_Potato_C_ReceiveHit, NormalImpulse) == 0x000050, "Member 'B_Potato_C_ReceiveHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(B_Potato_C_ReceiveHit, Hit) == 0x000068, "Member 'B_Potato_C_ReceiveHit::Hit' has a wrong offset!");

// Function B_Potato.B_Potato_C.RotateMesh
// 0x0100 (0x0100 - 0x0000)
struct B_Potato_C_RotateMesh final
{
public:
	struct FRotator                               CallFunc_RandomRotator_ReturnValue;                // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x0018(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(B_Potato_C_RotateMesh) == 0x000008, "Wrong alignment on B_Potato_C_RotateMesh");
static_assert(sizeof(B_Potato_C_RotateMesh) == 0x000100, "Wrong size on B_Potato_C_RotateMesh");
static_assert(offsetof(B_Potato_C_RotateMesh, CallFunc_RandomRotator_ReturnValue) == 0x000000, "Member 'B_Potato_C_RotateMesh::CallFunc_RandomRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_RotateMesh, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x000018, "Member 'B_Potato_C_RotateMesh::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");

// Function B_Potato.B_Potato_C.SetNewValuesForTearUp
// 0x0070 (0x0070 - 0x0000)
struct B_Potato_C_SetNewValuesForTearUp final
{
public:
	struct FTransform                             Param_NewTransform;                                // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Param_NewOwner;                                    // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  Param_NewInstigator;                               // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Potato_C_SetNewValuesForTearUp) == 0x000010, "Wrong alignment on B_Potato_C_SetNewValuesForTearUp");
static_assert(sizeof(B_Potato_C_SetNewValuesForTearUp) == 0x000070, "Wrong size on B_Potato_C_SetNewValuesForTearUp");
static_assert(offsetof(B_Potato_C_SetNewValuesForTearUp, Param_NewTransform) == 0x000000, "Member 'B_Potato_C_SetNewValuesForTearUp::Param_NewTransform' has a wrong offset!");
static_assert(offsetof(B_Potato_C_SetNewValuesForTearUp, Param_NewOwner) == 0x000060, "Member 'B_Potato_C_SetNewValuesForTearUp::Param_NewOwner' has a wrong offset!");
static_assert(offsetof(B_Potato_C_SetNewValuesForTearUp, Param_NewInstigator) == 0x000068, "Member 'B_Potato_C_SetNewValuesForTearUp::Param_NewInstigator' has a wrong offset!");

// Function B_Potato.B_Potato_C.TearDown
// 0x0020 (0x0020 - 0x0000)
struct B_Potato_C_TearDown final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50F5[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_NegateInt_ReturnValue;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Potato_C_TearDown) == 0x000008, "Wrong alignment on B_Potato_C_TearDown");
static_assert(sizeof(B_Potato_C_TearDown) == 0x000020, "Wrong size on B_Potato_C_TearDown");
static_assert(offsetof(B_Potato_C_TearDown, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'B_Potato_C_TearDown::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_TearDown, CallFunc_NegateInt_ReturnValue) == 0x000004, "Member 'B_Potato_C_TearDown::CallFunc_NegateInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_TearDown, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000008, "Member 'B_Potato_C_TearDown::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");

// Function B_Potato.B_Potato_C.TearUp
// 0x00C0 (0x00C0 - 0x0000)
struct B_Potato_C_TearUp final
{
public:
	struct FTransform                             SpawnTransform;                                    // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Param_Owner;                                       // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  Param_Instigator;                                  // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LowStaminaHeightOffset;                            // 0x0070(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LowStamina;                                        // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50F6[0x6];                                     // 0x008A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_SkillParametersSubsystem_C*          CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50F7[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Potato_C_TearUp) == 0x000010, "Wrong alignment on B_Potato_C_TearUp");
static_assert(sizeof(B_Potato_C_TearUp) == 0x0000C0, "Wrong size on B_Potato_C_TearUp");
static_assert(offsetof(B_Potato_C_TearUp, SpawnTransform) == 0x000000, "Member 'B_Potato_C_TearUp::SpawnTransform' has a wrong offset!");
static_assert(offsetof(B_Potato_C_TearUp, Param_Owner) == 0x000060, "Member 'B_Potato_C_TearUp::Param_Owner' has a wrong offset!");
static_assert(offsetof(B_Potato_C_TearUp, Param_Instigator) == 0x000068, "Member 'B_Potato_C_TearUp::Param_Instigator' has a wrong offset!");
static_assert(offsetof(B_Potato_C_TearUp, LowStaminaHeightOffset) == 0x000070, "Member 'B_Potato_C_TearUp::LowStaminaHeightOffset' has a wrong offset!");
static_assert(offsetof(B_Potato_C_TearUp, LowStamina) == 0x000088, "Member 'B_Potato_C_TearUp::LowStamina' has a wrong offset!");
static_assert(offsetof(B_Potato_C_TearUp, CallFunc_HasAuthority_ReturnValue) == 0x000089, "Member 'B_Potato_C_TearUp::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_TearUp, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000090, "Member 'B_Potato_C_TearUp::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_TearUp, CallFunc_IsValid_ReturnValue) == 0x000098, "Member 'B_Potato_C_TearUp::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_TearUp, CallFunc_GetController_ReturnValue) == 0x0000A0, "Member 'B_Potato_C_TearUp::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_TearUp, K2Node_DynamicCast_AsB_Player_State) == 0x0000A8, "Member 'B_Potato_C_TearUp::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_Potato_C_TearUp, K2Node_DynamicCast_bSuccess) == 0x0000B0, "Member 'B_Potato_C_TearUp::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function B_Potato.B_Potato_C.TearUpByStamina
// 0x0028 (0x0028 - 0x0000)
struct B_Potato_C_TearUpByStamina final
{
public:
	double                                        Param_Stamina;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetControlRotation_ReturnValue;           // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Potato_C_TearUpByStamina) == 0x000008, "Wrong alignment on B_Potato_C_TearUpByStamina");
static_assert(sizeof(B_Potato_C_TearUpByStamina) == 0x000028, "Wrong size on B_Potato_C_TearUpByStamina");
static_assert(offsetof(B_Potato_C_TearUpByStamina, Param_Stamina) == 0x000000, "Member 'B_Potato_C_TearUpByStamina::Param_Stamina' has a wrong offset!");
static_assert(offsetof(B_Potato_C_TearUpByStamina, CallFunc_GetControlRotation_ReturnValue) == 0x000008, "Member 'B_Potato_C_TearUpByStamina::CallFunc_GetControlRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_TearUpByStamina, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000020, "Member 'B_Potato_C_TearUpByStamina::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_TearUpByStamina, CallFunc_K2_SetActorRotation_ReturnValue) == 0x000021, "Member 'B_Potato_C_TearUpByStamina::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");

// Function B_Potato.B_Potato_C.TearUpMulticast
// 0x0090 (0x0090 - 0x0000)
struct B_Potato_C_TearUpMulticast final
{
public:
	struct FTransform                             SpawnTransform;                                    // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Param_Owner;                                       // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  Param_Instigator;                                  // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Velocity;                                          // 0x0070(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Potato_C_TearUpMulticast) == 0x000010, "Wrong alignment on B_Potato_C_TearUpMulticast");
static_assert(sizeof(B_Potato_C_TearUpMulticast) == 0x000090, "Wrong size on B_Potato_C_TearUpMulticast");
static_assert(offsetof(B_Potato_C_TearUpMulticast, SpawnTransform) == 0x000000, "Member 'B_Potato_C_TearUpMulticast::SpawnTransform' has a wrong offset!");
static_assert(offsetof(B_Potato_C_TearUpMulticast, Param_Owner) == 0x000060, "Member 'B_Potato_C_TearUpMulticast::Param_Owner' has a wrong offset!");
static_assert(offsetof(B_Potato_C_TearUpMulticast, Param_Instigator) == 0x000068, "Member 'B_Potato_C_TearUpMulticast::Param_Instigator' has a wrong offset!");
static_assert(offsetof(B_Potato_C_TearUpMulticast, Velocity) == 0x000070, "Member 'B_Potato_C_TearUpMulticast::Velocity' has a wrong offset!");

// Function B_Potato.B_Potato_C.TearUpPoolObject
// 0x0070 (0x0070 - 0x0000)
struct B_Potato_C_TearUpPoolObject final
{
public:
	struct FTransform                             SpawnTransform;                                    // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Param_Owner;                                       // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  Param_Instigator;                                  // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Potato_C_TearUpPoolObject) == 0x000010, "Wrong alignment on B_Potato_C_TearUpPoolObject");
static_assert(sizeof(B_Potato_C_TearUpPoolObject) == 0x000070, "Wrong size on B_Potato_C_TearUpPoolObject");
static_assert(offsetof(B_Potato_C_TearUpPoolObject, SpawnTransform) == 0x000000, "Member 'B_Potato_C_TearUpPoolObject::SpawnTransform' has a wrong offset!");
static_assert(offsetof(B_Potato_C_TearUpPoolObject, Param_Owner) == 0x000060, "Member 'B_Potato_C_TearUpPoolObject::Param_Owner' has a wrong offset!");
static_assert(offsetof(B_Potato_C_TearUpPoolObject, Param_Instigator) == 0x000068, "Member 'B_Potato_C_TearUpPoolObject::Param_Instigator' has a wrong offset!");

// Function B_Potato.B_Potato_C.UserConstructionScript
// 0x0018 (0x0018 - 0x0000)
struct B_Potato_C_UserConstructionScript final
{
public:
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_ImpostorGameMode_C*                  K2Node_DynamicCast_AsB_Impostor_Game_Mode;         // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Potato_C_UserConstructionScript) == 0x000008, "Wrong alignment on B_Potato_C_UserConstructionScript");
static_assert(sizeof(B_Potato_C_UserConstructionScript) == 0x000018, "Wrong size on B_Potato_C_UserConstructionScript");
static_assert(offsetof(B_Potato_C_UserConstructionScript, CallFunc_GetGameMode_ReturnValue) == 0x000000, "Member 'B_Potato_C_UserConstructionScript::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Potato_C_UserConstructionScript, K2Node_DynamicCast_AsB_Impostor_Game_Mode) == 0x000008, "Member 'B_Potato_C_UserConstructionScript::K2Node_DynamicCast_AsB_Impostor_Game_Mode' has a wrong offset!");
static_assert(offsetof(B_Potato_C_UserConstructionScript, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'B_Potato_C_UserConstructionScript::K2Node_DynamicCast_bSuccess' has a wrong offset!");

}

