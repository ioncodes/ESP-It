#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_PlayerListWidget

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WB_PlayerListWidget.WB_PlayerListWidget_C
// 0x0060 (0x0320 - 0x02C0)
class UWB_PlayerListWidget_C final : public UUserWidget
{
public:
	class UTextBlock*                             ChooseYourTeamTest;                                // 0x02C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             GameModeText;                                      // 0x02C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             GameNameText;                                      // 0x02D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_PlayerListBlock_C*                  HunterPlayerList;                                  // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_TeamLogo_C*                         HunterTeamLogo;                                    // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             RoundText;                                         // 0x02E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_PlayerListBlock_C*                  SpecatorPlayerList;                                // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_TeamLogo_C*                         SpectatorTeamLogo_1;                               // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_PlayerListBlock_C*                  WitchPlayerList;                                   // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_TeamLogo_C*                         WitchTeamLogo;                                     // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TArray<class UWB_PlayerBlock_C*>              PlayerBlocks;                                      // 0x0310(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)

public:
	ESlateVisibility Get_RoundText_Visibility_0();
	class FText Get_RoundText_Text_0();
	class FText Get_GameModeText_Text_0();
	class FText Get_GameNameText_Text_0();
	class FText Get_ChooseYourTeamTest_Text_0();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WB_PlayerListWidget_C">();
	}
	static class UWB_PlayerListWidget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWB_PlayerListWidget_C>();
	}
};
static_assert(alignof(UWB_PlayerListWidget_C) == 0x000008, "Wrong alignment on UWB_PlayerListWidget_C");
static_assert(sizeof(UWB_PlayerListWidget_C) == 0x000320, "Wrong size on UWB_PlayerListWidget_C");
static_assert(offsetof(UWB_PlayerListWidget_C, ChooseYourTeamTest) == 0x0002C0, "Member 'UWB_PlayerListWidget_C::ChooseYourTeamTest' has a wrong offset!");
static_assert(offsetof(UWB_PlayerListWidget_C, GameModeText) == 0x0002C8, "Member 'UWB_PlayerListWidget_C::GameModeText' has a wrong offset!");
static_assert(offsetof(UWB_PlayerListWidget_C, GameNameText) == 0x0002D0, "Member 'UWB_PlayerListWidget_C::GameNameText' has a wrong offset!");
static_assert(offsetof(UWB_PlayerListWidget_C, HunterPlayerList) == 0x0002D8, "Member 'UWB_PlayerListWidget_C::HunterPlayerList' has a wrong offset!");
static_assert(offsetof(UWB_PlayerListWidget_C, HunterTeamLogo) == 0x0002E0, "Member 'UWB_PlayerListWidget_C::HunterTeamLogo' has a wrong offset!");
static_assert(offsetof(UWB_PlayerListWidget_C, RoundText) == 0x0002E8, "Member 'UWB_PlayerListWidget_C::RoundText' has a wrong offset!");
static_assert(offsetof(UWB_PlayerListWidget_C, SpecatorPlayerList) == 0x0002F0, "Member 'UWB_PlayerListWidget_C::SpecatorPlayerList' has a wrong offset!");
static_assert(offsetof(UWB_PlayerListWidget_C, SpectatorTeamLogo_1) == 0x0002F8, "Member 'UWB_PlayerListWidget_C::SpectatorTeamLogo_1' has a wrong offset!");
static_assert(offsetof(UWB_PlayerListWidget_C, WitchPlayerList) == 0x000300, "Member 'UWB_PlayerListWidget_C::WitchPlayerList' has a wrong offset!");
static_assert(offsetof(UWB_PlayerListWidget_C, WitchTeamLogo) == 0x000308, "Member 'UWB_PlayerListWidget_C::WitchTeamLogo' has a wrong offset!");
static_assert(offsetof(UWB_PlayerListWidget_C, PlayerBlocks) == 0x000310, "Member 'UWB_PlayerListWidget_C::PlayerBlocks' has a wrong offset!");

}

