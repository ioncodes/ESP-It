#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AudioWidgets

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AudioWidgets_structs.hpp"


namespace SDK::Params
{

// DelegateFunction AudioWidgets.AudioMeter.GetMeterChannelInfo__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct AudioMeter_GetMeterChannelInfo__DelegateSignature final
{
public:
	TArray<struct FMeterChannelInfo>              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMeter_GetMeterChannelInfo__DelegateSignature) == 0x000008, "Wrong alignment on AudioMeter_GetMeterChannelInfo__DelegateSignature");
static_assert(sizeof(AudioMeter_GetMeterChannelInfo__DelegateSignature) == 0x000010, "Wrong size on AudioMeter_GetMeterChannelInfo__DelegateSignature");
static_assert(offsetof(AudioMeter_GetMeterChannelInfo__DelegateSignature, ReturnValue) == 0x000000, "Member 'AudioMeter_GetMeterChannelInfo__DelegateSignature::ReturnValue' has a wrong offset!");

// Function AudioWidgets.AudioMeter.SetBackgroundColor
// 0x0010 (0x0010 - 0x0000)
struct AudioMeter_SetBackgroundColor final
{
public:
	struct FLinearColor                           InValue;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMeter_SetBackgroundColor) == 0x000004, "Wrong alignment on AudioMeter_SetBackgroundColor");
static_assert(sizeof(AudioMeter_SetBackgroundColor) == 0x000010, "Wrong size on AudioMeter_SetBackgroundColor");
static_assert(offsetof(AudioMeter_SetBackgroundColor, InValue) == 0x000000, "Member 'AudioMeter_SetBackgroundColor::InValue' has a wrong offset!");

// Function AudioWidgets.AudioMeter.SetMeterBackgroundColor
// 0x0010 (0x0010 - 0x0000)
struct AudioMeter_SetMeterBackgroundColor final
{
public:
	struct FLinearColor                           InValue;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMeter_SetMeterBackgroundColor) == 0x000004, "Wrong alignment on AudioMeter_SetMeterBackgroundColor");
static_assert(sizeof(AudioMeter_SetMeterBackgroundColor) == 0x000010, "Wrong size on AudioMeter_SetMeterBackgroundColor");
static_assert(offsetof(AudioMeter_SetMeterBackgroundColor, InValue) == 0x000000, "Member 'AudioMeter_SetMeterBackgroundColor::InValue' has a wrong offset!");

// Function AudioWidgets.AudioMeter.SetMeterChannelInfo
// 0x0010 (0x0010 - 0x0000)
struct AudioMeter_SetMeterChannelInfo final
{
public:
	TArray<struct FMeterChannelInfo>              InMeterChannelInfo;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMeter_SetMeterChannelInfo) == 0x000008, "Wrong alignment on AudioMeter_SetMeterChannelInfo");
static_assert(sizeof(AudioMeter_SetMeterChannelInfo) == 0x000010, "Wrong size on AudioMeter_SetMeterChannelInfo");
static_assert(offsetof(AudioMeter_SetMeterChannelInfo, InMeterChannelInfo) == 0x000000, "Member 'AudioMeter_SetMeterChannelInfo::InMeterChannelInfo' has a wrong offset!");

// Function AudioWidgets.AudioMeter.SetMeterClippingColor
// 0x0010 (0x0010 - 0x0000)
struct AudioMeter_SetMeterClippingColor final
{
public:
	struct FLinearColor                           InValue;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMeter_SetMeterClippingColor) == 0x000004, "Wrong alignment on AudioMeter_SetMeterClippingColor");
static_assert(sizeof(AudioMeter_SetMeterClippingColor) == 0x000010, "Wrong size on AudioMeter_SetMeterClippingColor");
static_assert(offsetof(AudioMeter_SetMeterClippingColor, InValue) == 0x000000, "Member 'AudioMeter_SetMeterClippingColor::InValue' has a wrong offset!");

// Function AudioWidgets.AudioMeter.SetMeterPeakColor
// 0x0010 (0x0010 - 0x0000)
struct AudioMeter_SetMeterPeakColor final
{
public:
	struct FLinearColor                           InValue;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMeter_SetMeterPeakColor) == 0x000004, "Wrong alignment on AudioMeter_SetMeterPeakColor");
static_assert(sizeof(AudioMeter_SetMeterPeakColor) == 0x000010, "Wrong size on AudioMeter_SetMeterPeakColor");
static_assert(offsetof(AudioMeter_SetMeterPeakColor, InValue) == 0x000000, "Member 'AudioMeter_SetMeterPeakColor::InValue' has a wrong offset!");

// Function AudioWidgets.AudioMeter.SetMeterScaleColor
// 0x0010 (0x0010 - 0x0000)
struct AudioMeter_SetMeterScaleColor final
{
public:
	struct FLinearColor                           InValue;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMeter_SetMeterScaleColor) == 0x000004, "Wrong alignment on AudioMeter_SetMeterScaleColor");
static_assert(sizeof(AudioMeter_SetMeterScaleColor) == 0x000010, "Wrong size on AudioMeter_SetMeterScaleColor");
static_assert(offsetof(AudioMeter_SetMeterScaleColor, InValue) == 0x000000, "Member 'AudioMeter_SetMeterScaleColor::InValue' has a wrong offset!");

// Function AudioWidgets.AudioMeter.SetMeterScaleLabelColor
// 0x0010 (0x0010 - 0x0000)
struct AudioMeter_SetMeterScaleLabelColor final
{
public:
	struct FLinearColor                           InValue;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMeter_SetMeterScaleLabelColor) == 0x000004, "Wrong alignment on AudioMeter_SetMeterScaleLabelColor");
static_assert(sizeof(AudioMeter_SetMeterScaleLabelColor) == 0x000010, "Wrong size on AudioMeter_SetMeterScaleLabelColor");
static_assert(offsetof(AudioMeter_SetMeterScaleLabelColor, InValue) == 0x000000, "Member 'AudioMeter_SetMeterScaleLabelColor::InValue' has a wrong offset!");

// Function AudioWidgets.AudioMeter.SetMeterValueColor
// 0x0010 (0x0010 - 0x0000)
struct AudioMeter_SetMeterValueColor final
{
public:
	struct FLinearColor                           InValue;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMeter_SetMeterValueColor) == 0x000004, "Wrong alignment on AudioMeter_SetMeterValueColor");
static_assert(sizeof(AudioMeter_SetMeterValueColor) == 0x000010, "Wrong size on AudioMeter_SetMeterValueColor");
static_assert(offsetof(AudioMeter_SetMeterValueColor, InValue) == 0x000000, "Member 'AudioMeter_SetMeterValueColor::InValue' has a wrong offset!");

// Function AudioWidgets.AudioMeter.GetMeterChannelInfo
// 0x0010 (0x0010 - 0x0000)
struct AudioMeter_GetMeterChannelInfo final
{
public:
	TArray<struct FMeterChannelInfo>              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMeter_GetMeterChannelInfo) == 0x000008, "Wrong alignment on AudioMeter_GetMeterChannelInfo");
static_assert(sizeof(AudioMeter_GetMeterChannelInfo) == 0x000010, "Wrong size on AudioMeter_GetMeterChannelInfo");
static_assert(offsetof(AudioMeter_GetMeterChannelInfo, ReturnValue) == 0x000000, "Member 'AudioMeter_GetMeterChannelInfo::ReturnValue' has a wrong offset!");

// Function AudioWidgets.AudioRadialSlider.GetOutputValue
// 0x0008 (0x0008 - 0x0000)
struct AudioRadialSlider_GetOutputValue final
{
public:
	float                                         InSliderValue;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioRadialSlider_GetOutputValue) == 0x000004, "Wrong alignment on AudioRadialSlider_GetOutputValue");
static_assert(sizeof(AudioRadialSlider_GetOutputValue) == 0x000008, "Wrong size on AudioRadialSlider_GetOutputValue");
static_assert(offsetof(AudioRadialSlider_GetOutputValue, InSliderValue) == 0x000000, "Member 'AudioRadialSlider_GetOutputValue::InSliderValue' has a wrong offset!");
static_assert(offsetof(AudioRadialSlider_GetOutputValue, ReturnValue) == 0x000004, "Member 'AudioRadialSlider_GetOutputValue::ReturnValue' has a wrong offset!");

// Function AudioWidgets.AudioRadialSlider.GetSliderValue
// 0x0008 (0x0008 - 0x0000)
struct AudioRadialSlider_GetSliderValue final
{
public:
	float                                         OutputValue;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioRadialSlider_GetSliderValue) == 0x000004, "Wrong alignment on AudioRadialSlider_GetSliderValue");
static_assert(sizeof(AudioRadialSlider_GetSliderValue) == 0x000008, "Wrong size on AudioRadialSlider_GetSliderValue");
static_assert(offsetof(AudioRadialSlider_GetSliderValue, OutputValue) == 0x000000, "Member 'AudioRadialSlider_GetSliderValue::OutputValue' has a wrong offset!");
static_assert(offsetof(AudioRadialSlider_GetSliderValue, ReturnValue) == 0x000004, "Member 'AudioRadialSlider_GetSliderValue::ReturnValue' has a wrong offset!");

// Function AudioWidgets.AudioRadialSlider.SetCenterBackgroundColor
// 0x0010 (0x0010 - 0x0000)
struct AudioRadialSlider_SetCenterBackgroundColor final
{
public:
	struct FLinearColor                           InValue;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioRadialSlider_SetCenterBackgroundColor) == 0x000004, "Wrong alignment on AudioRadialSlider_SetCenterBackgroundColor");
static_assert(sizeof(AudioRadialSlider_SetCenterBackgroundColor) == 0x000010, "Wrong size on AudioRadialSlider_SetCenterBackgroundColor");
static_assert(offsetof(AudioRadialSlider_SetCenterBackgroundColor, InValue) == 0x000000, "Member 'AudioRadialSlider_SetCenterBackgroundColor::InValue' has a wrong offset!");

// Function AudioWidgets.AudioRadialSlider.SetHandStartEndRatio
// 0x0010 (0x0010 - 0x0000)
struct AudioRadialSlider_SetHandStartEndRatio final
{
public:
	struct FVector2D                              InHandStartEndRatio;                               // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioRadialSlider_SetHandStartEndRatio) == 0x000008, "Wrong alignment on AudioRadialSlider_SetHandStartEndRatio");
static_assert(sizeof(AudioRadialSlider_SetHandStartEndRatio) == 0x000010, "Wrong size on AudioRadialSlider_SetHandStartEndRatio");
static_assert(offsetof(AudioRadialSlider_SetHandStartEndRatio, InHandStartEndRatio) == 0x000000, "Member 'AudioRadialSlider_SetHandStartEndRatio::InHandStartEndRatio' has a wrong offset!");

// Function AudioWidgets.AudioRadialSlider.SetOutputRange
// 0x0010 (0x0010 - 0x0000)
struct AudioRadialSlider_SetOutputRange final
{
public:
	struct FVector2D                              InOutputRange;                                     // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioRadialSlider_SetOutputRange) == 0x000008, "Wrong alignment on AudioRadialSlider_SetOutputRange");
static_assert(sizeof(AudioRadialSlider_SetOutputRange) == 0x000010, "Wrong size on AudioRadialSlider_SetOutputRange");
static_assert(offsetof(AudioRadialSlider_SetOutputRange, InOutputRange) == 0x000000, "Member 'AudioRadialSlider_SetOutputRange::InOutputRange' has a wrong offset!");

// Function AudioWidgets.AudioRadialSlider.SetShowLabelOnlyOnHover
// 0x0001 (0x0001 - 0x0000)
struct AudioRadialSlider_SetShowLabelOnlyOnHover final
{
public:
	bool                                          bShowLabelOnlyOnHover;                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioRadialSlider_SetShowLabelOnlyOnHover) == 0x000001, "Wrong alignment on AudioRadialSlider_SetShowLabelOnlyOnHover");
static_assert(sizeof(AudioRadialSlider_SetShowLabelOnlyOnHover) == 0x000001, "Wrong size on AudioRadialSlider_SetShowLabelOnlyOnHover");
static_assert(offsetof(AudioRadialSlider_SetShowLabelOnlyOnHover, bShowLabelOnlyOnHover) == 0x000000, "Member 'AudioRadialSlider_SetShowLabelOnlyOnHover::bShowLabelOnlyOnHover' has a wrong offset!");

// Function AudioWidgets.AudioRadialSlider.SetShowUnitsText
// 0x0001 (0x0001 - 0x0000)
struct AudioRadialSlider_SetShowUnitsText final
{
public:
	bool                                          bShowUnitsText;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioRadialSlider_SetShowUnitsText) == 0x000001, "Wrong alignment on AudioRadialSlider_SetShowUnitsText");
static_assert(sizeof(AudioRadialSlider_SetShowUnitsText) == 0x000001, "Wrong size on AudioRadialSlider_SetShowUnitsText");
static_assert(offsetof(AudioRadialSlider_SetShowUnitsText, bShowUnitsText) == 0x000000, "Member 'AudioRadialSlider_SetShowUnitsText::bShowUnitsText' has a wrong offset!");

// Function AudioWidgets.AudioRadialSlider.SetSliderBarColor
// 0x0010 (0x0010 - 0x0000)
struct AudioRadialSlider_SetSliderBarColor final
{
public:
	struct FLinearColor                           InValue;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioRadialSlider_SetSliderBarColor) == 0x000004, "Wrong alignment on AudioRadialSlider_SetSliderBarColor");
static_assert(sizeof(AudioRadialSlider_SetSliderBarColor) == 0x000010, "Wrong size on AudioRadialSlider_SetSliderBarColor");
static_assert(offsetof(AudioRadialSlider_SetSliderBarColor, InValue) == 0x000000, "Member 'AudioRadialSlider_SetSliderBarColor::InValue' has a wrong offset!");

// Function AudioWidgets.AudioRadialSlider.SetSliderProgressColor
// 0x0010 (0x0010 - 0x0000)
struct AudioRadialSlider_SetSliderProgressColor final
{
public:
	struct FLinearColor                           InValue;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioRadialSlider_SetSliderProgressColor) == 0x000004, "Wrong alignment on AudioRadialSlider_SetSliderProgressColor");
static_assert(sizeof(AudioRadialSlider_SetSliderProgressColor) == 0x000010, "Wrong size on AudioRadialSlider_SetSliderProgressColor");
static_assert(offsetof(AudioRadialSlider_SetSliderProgressColor, InValue) == 0x000000, "Member 'AudioRadialSlider_SetSliderProgressColor::InValue' has a wrong offset!");

// Function AudioWidgets.AudioRadialSlider.SetSliderThickness
// 0x0004 (0x0004 - 0x0000)
struct AudioRadialSlider_SetSliderThickness final
{
public:
	float                                         InThickness;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioRadialSlider_SetSliderThickness) == 0x000004, "Wrong alignment on AudioRadialSlider_SetSliderThickness");
static_assert(sizeof(AudioRadialSlider_SetSliderThickness) == 0x000004, "Wrong size on AudioRadialSlider_SetSliderThickness");
static_assert(offsetof(AudioRadialSlider_SetSliderThickness, InThickness) == 0x000000, "Member 'AudioRadialSlider_SetSliderThickness::InThickness' has a wrong offset!");

// Function AudioWidgets.AudioRadialSlider.SetTextLabelBackgroundColor
// 0x0014 (0x0014 - 0x0000)
struct AudioRadialSlider_SetTextLabelBackgroundColor final
{
public:
	struct FSlateColor                            InColor;                                           // 0x0000(0x0014)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioRadialSlider_SetTextLabelBackgroundColor) == 0x000004, "Wrong alignment on AudioRadialSlider_SetTextLabelBackgroundColor");
static_assert(sizeof(AudioRadialSlider_SetTextLabelBackgroundColor) == 0x000014, "Wrong size on AudioRadialSlider_SetTextLabelBackgroundColor");
static_assert(offsetof(AudioRadialSlider_SetTextLabelBackgroundColor, InColor) == 0x000000, "Member 'AudioRadialSlider_SetTextLabelBackgroundColor::InColor' has a wrong offset!");

// Function AudioWidgets.AudioRadialSlider.SetUnitsText
// 0x0018 (0x0018 - 0x0000)
struct AudioRadialSlider_SetUnitsText final
{
public:
	class FText                                   Units;                                             // 0x0000(0x0018)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioRadialSlider_SetUnitsText) == 0x000008, "Wrong alignment on AudioRadialSlider_SetUnitsText");
static_assert(sizeof(AudioRadialSlider_SetUnitsText) == 0x000018, "Wrong size on AudioRadialSlider_SetUnitsText");
static_assert(offsetof(AudioRadialSlider_SetUnitsText, Units) == 0x000000, "Member 'AudioRadialSlider_SetUnitsText::Units' has a wrong offset!");

// Function AudioWidgets.AudioRadialSlider.SetUnitsTextReadOnly
// 0x0001 (0x0001 - 0x0000)
struct AudioRadialSlider_SetUnitsTextReadOnly final
{
public:
	bool                                          bIsReadOnly;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioRadialSlider_SetUnitsTextReadOnly) == 0x000001, "Wrong alignment on AudioRadialSlider_SetUnitsTextReadOnly");
static_assert(sizeof(AudioRadialSlider_SetUnitsTextReadOnly) == 0x000001, "Wrong size on AudioRadialSlider_SetUnitsTextReadOnly");
static_assert(offsetof(AudioRadialSlider_SetUnitsTextReadOnly, bIsReadOnly) == 0x000000, "Member 'AudioRadialSlider_SetUnitsTextReadOnly::bIsReadOnly' has a wrong offset!");

// Function AudioWidgets.AudioRadialSlider.SetValueTextReadOnly
// 0x0001 (0x0001 - 0x0000)
struct AudioRadialSlider_SetValueTextReadOnly final
{
public:
	bool                                          bIsReadOnly;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioRadialSlider_SetValueTextReadOnly) == 0x000001, "Wrong alignment on AudioRadialSlider_SetValueTextReadOnly");
static_assert(sizeof(AudioRadialSlider_SetValueTextReadOnly) == 0x000001, "Wrong size on AudioRadialSlider_SetValueTextReadOnly");
static_assert(offsetof(AudioRadialSlider_SetValueTextReadOnly, bIsReadOnly) == 0x000000, "Member 'AudioRadialSlider_SetValueTextReadOnly::bIsReadOnly' has a wrong offset!");

// Function AudioWidgets.AudioRadialSlider.SetWidgetLayout
// 0x0001 (0x0001 - 0x0000)
struct AudioRadialSlider_SetWidgetLayout final
{
public:
	EAudioRadialSliderLayout                      InLayout;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioRadialSlider_SetWidgetLayout) == 0x000001, "Wrong alignment on AudioRadialSlider_SetWidgetLayout");
static_assert(sizeof(AudioRadialSlider_SetWidgetLayout) == 0x000001, "Wrong size on AudioRadialSlider_SetWidgetLayout");
static_assert(offsetof(AudioRadialSlider_SetWidgetLayout, InLayout) == 0x000000, "Member 'AudioRadialSlider_SetWidgetLayout::InLayout' has a wrong offset!");

// Function AudioWidgets.AudioSliderBase.GetLinValue
// 0x0008 (0x0008 - 0x0000)
struct AudioSliderBase_GetLinValue final
{
public:
	float                                         OutputValue;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioSliderBase_GetLinValue) == 0x000004, "Wrong alignment on AudioSliderBase_GetLinValue");
static_assert(sizeof(AudioSliderBase_GetLinValue) == 0x000008, "Wrong size on AudioSliderBase_GetLinValue");
static_assert(offsetof(AudioSliderBase_GetLinValue, OutputValue) == 0x000000, "Member 'AudioSliderBase_GetLinValue::OutputValue' has a wrong offset!");
static_assert(offsetof(AudioSliderBase_GetLinValue, ReturnValue) == 0x000004, "Member 'AudioSliderBase_GetLinValue::ReturnValue' has a wrong offset!");

// Function AudioWidgets.AudioSliderBase.GetOutputValue
// 0x0008 (0x0008 - 0x0000)
struct AudioSliderBase_GetOutputValue final
{
public:
	float                                         InSliderValue;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioSliderBase_GetOutputValue) == 0x000004, "Wrong alignment on AudioSliderBase_GetOutputValue");
static_assert(sizeof(AudioSliderBase_GetOutputValue) == 0x000008, "Wrong size on AudioSliderBase_GetOutputValue");
static_assert(offsetof(AudioSliderBase_GetOutputValue, InSliderValue) == 0x000000, "Member 'AudioSliderBase_GetOutputValue::InSliderValue' has a wrong offset!");
static_assert(offsetof(AudioSliderBase_GetOutputValue, ReturnValue) == 0x000004, "Member 'AudioSliderBase_GetOutputValue::ReturnValue' has a wrong offset!");

// Function AudioWidgets.AudioSliderBase.GetSliderValue
// 0x0008 (0x0008 - 0x0000)
struct AudioSliderBase_GetSliderValue final
{
public:
	float                                         OutputValue;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioSliderBase_GetSliderValue) == 0x000004, "Wrong alignment on AudioSliderBase_GetSliderValue");
static_assert(sizeof(AudioSliderBase_GetSliderValue) == 0x000008, "Wrong size on AudioSliderBase_GetSliderValue");
static_assert(offsetof(AudioSliderBase_GetSliderValue, OutputValue) == 0x000000, "Member 'AudioSliderBase_GetSliderValue::OutputValue' has a wrong offset!");
static_assert(offsetof(AudioSliderBase_GetSliderValue, ReturnValue) == 0x000004, "Member 'AudioSliderBase_GetSliderValue::ReturnValue' has a wrong offset!");

// Function AudioWidgets.AudioSliderBase.SetShowLabelOnlyOnHover
// 0x0001 (0x0001 - 0x0000)
struct AudioSliderBase_SetShowLabelOnlyOnHover final
{
public:
	bool                                          bShowLabelOnlyOnHover;                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioSliderBase_SetShowLabelOnlyOnHover) == 0x000001, "Wrong alignment on AudioSliderBase_SetShowLabelOnlyOnHover");
static_assert(sizeof(AudioSliderBase_SetShowLabelOnlyOnHover) == 0x000001, "Wrong size on AudioSliderBase_SetShowLabelOnlyOnHover");
static_assert(offsetof(AudioSliderBase_SetShowLabelOnlyOnHover, bShowLabelOnlyOnHover) == 0x000000, "Member 'AudioSliderBase_SetShowLabelOnlyOnHover::bShowLabelOnlyOnHover' has a wrong offset!");

// Function AudioWidgets.AudioSliderBase.SetShowUnitsText
// 0x0001 (0x0001 - 0x0000)
struct AudioSliderBase_SetShowUnitsText final
{
public:
	bool                                          bShowUnitsText;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioSliderBase_SetShowUnitsText) == 0x000001, "Wrong alignment on AudioSliderBase_SetShowUnitsText");
static_assert(sizeof(AudioSliderBase_SetShowUnitsText) == 0x000001, "Wrong size on AudioSliderBase_SetShowUnitsText");
static_assert(offsetof(AudioSliderBase_SetShowUnitsText, bShowUnitsText) == 0x000000, "Member 'AudioSliderBase_SetShowUnitsText::bShowUnitsText' has a wrong offset!");

// Function AudioWidgets.AudioSliderBase.SetSliderBackgroundColor
// 0x0010 (0x0010 - 0x0000)
struct AudioSliderBase_SetSliderBackgroundColor final
{
public:
	struct FLinearColor                           InValue;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioSliderBase_SetSliderBackgroundColor) == 0x000004, "Wrong alignment on AudioSliderBase_SetSliderBackgroundColor");
static_assert(sizeof(AudioSliderBase_SetSliderBackgroundColor) == 0x000010, "Wrong size on AudioSliderBase_SetSliderBackgroundColor");
static_assert(offsetof(AudioSliderBase_SetSliderBackgroundColor, InValue) == 0x000000, "Member 'AudioSliderBase_SetSliderBackgroundColor::InValue' has a wrong offset!");

// Function AudioWidgets.AudioSliderBase.SetSliderBarColor
// 0x0010 (0x0010 - 0x0000)
struct AudioSliderBase_SetSliderBarColor final
{
public:
	struct FLinearColor                           InValue;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioSliderBase_SetSliderBarColor) == 0x000004, "Wrong alignment on AudioSliderBase_SetSliderBarColor");
static_assert(sizeof(AudioSliderBase_SetSliderBarColor) == 0x000010, "Wrong size on AudioSliderBase_SetSliderBarColor");
static_assert(offsetof(AudioSliderBase_SetSliderBarColor, InValue) == 0x000000, "Member 'AudioSliderBase_SetSliderBarColor::InValue' has a wrong offset!");

// Function AudioWidgets.AudioSliderBase.SetSliderThumbColor
// 0x0010 (0x0010 - 0x0000)
struct AudioSliderBase_SetSliderThumbColor final
{
public:
	struct FLinearColor                           InValue;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioSliderBase_SetSliderThumbColor) == 0x000004, "Wrong alignment on AudioSliderBase_SetSliderThumbColor");
static_assert(sizeof(AudioSliderBase_SetSliderThumbColor) == 0x000010, "Wrong size on AudioSliderBase_SetSliderThumbColor");
static_assert(offsetof(AudioSliderBase_SetSliderThumbColor, InValue) == 0x000000, "Member 'AudioSliderBase_SetSliderThumbColor::InValue' has a wrong offset!");

// Function AudioWidgets.AudioSliderBase.SetTextLabelBackgroundColor
// 0x0014 (0x0014 - 0x0000)
struct AudioSliderBase_SetTextLabelBackgroundColor final
{
public:
	struct FSlateColor                            InColor;                                           // 0x0000(0x0014)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioSliderBase_SetTextLabelBackgroundColor) == 0x000004, "Wrong alignment on AudioSliderBase_SetTextLabelBackgroundColor");
static_assert(sizeof(AudioSliderBase_SetTextLabelBackgroundColor) == 0x000014, "Wrong size on AudioSliderBase_SetTextLabelBackgroundColor");
static_assert(offsetof(AudioSliderBase_SetTextLabelBackgroundColor, InColor) == 0x000000, "Member 'AudioSliderBase_SetTextLabelBackgroundColor::InColor' has a wrong offset!");

// Function AudioWidgets.AudioSliderBase.SetUnitsText
// 0x0018 (0x0018 - 0x0000)
struct AudioSliderBase_SetUnitsText final
{
public:
	class FText                                   Units;                                             // 0x0000(0x0018)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioSliderBase_SetUnitsText) == 0x000008, "Wrong alignment on AudioSliderBase_SetUnitsText");
static_assert(sizeof(AudioSliderBase_SetUnitsText) == 0x000018, "Wrong size on AudioSliderBase_SetUnitsText");
static_assert(offsetof(AudioSliderBase_SetUnitsText, Units) == 0x000000, "Member 'AudioSliderBase_SetUnitsText::Units' has a wrong offset!");

// Function AudioWidgets.AudioSliderBase.SetUnitsTextReadOnly
// 0x0001 (0x0001 - 0x0000)
struct AudioSliderBase_SetUnitsTextReadOnly final
{
public:
	bool                                          bIsReadOnly;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioSliderBase_SetUnitsTextReadOnly) == 0x000001, "Wrong alignment on AudioSliderBase_SetUnitsTextReadOnly");
static_assert(sizeof(AudioSliderBase_SetUnitsTextReadOnly) == 0x000001, "Wrong size on AudioSliderBase_SetUnitsTextReadOnly");
static_assert(offsetof(AudioSliderBase_SetUnitsTextReadOnly, bIsReadOnly) == 0x000000, "Member 'AudioSliderBase_SetUnitsTextReadOnly::bIsReadOnly' has a wrong offset!");

// Function AudioWidgets.AudioSliderBase.SetValueTextReadOnly
// 0x0001 (0x0001 - 0x0000)
struct AudioSliderBase_SetValueTextReadOnly final
{
public:
	bool                                          bIsReadOnly;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioSliderBase_SetValueTextReadOnly) == 0x000001, "Wrong alignment on AudioSliderBase_SetValueTextReadOnly");
static_assert(sizeof(AudioSliderBase_SetValueTextReadOnly) == 0x000001, "Wrong size on AudioSliderBase_SetValueTextReadOnly");
static_assert(offsetof(AudioSliderBase_SetValueTextReadOnly, bIsReadOnly) == 0x000000, "Member 'AudioSliderBase_SetValueTextReadOnly::bIsReadOnly' has a wrong offset!");

// Function AudioWidgets.AudioSliderBase.SetWidgetBackgroundColor
// 0x0010 (0x0010 - 0x0000)
struct AudioSliderBase_SetWidgetBackgroundColor final
{
public:
	struct FLinearColor                           InValue;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioSliderBase_SetWidgetBackgroundColor) == 0x000004, "Wrong alignment on AudioSliderBase_SetWidgetBackgroundColor");
static_assert(sizeof(AudioSliderBase_SetWidgetBackgroundColor) == 0x000010, "Wrong size on AudioSliderBase_SetWidgetBackgroundColor");
static_assert(offsetof(AudioSliderBase_SetWidgetBackgroundColor, InValue) == 0x000000, "Member 'AudioSliderBase_SetWidgetBackgroundColor::InValue' has a wrong offset!");

}

