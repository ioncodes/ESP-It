#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_CauldronPawn

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function B_CauldronPawn.B_CauldronPawn_C.ExecuteUbergraph_B_CauldronPawn
// 0x0140 (0x0140 - 0x0000)
struct B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BFA[0xC];                                     // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Temp_struct_Variable;                              // 0x0010(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BFB[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_FieldOfViewComponent_C*              CallFunc_AddComponent_ReturnValue;                 // 0x0078(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AController*                            K2Node_Event_NewController;                        // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue_3;                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue_2;                 // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_DoubleDouble_ReturnValue;        // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_DoubleDouble_ReturnValue_1;      // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BFC[0x6];                                     // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BFD[0x7];                                     // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_1;            // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_1;            // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BFE[0x7];                                     // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue_1;       // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue_1;                 // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue;                   // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_DoubleDouble_ReturnValue_2;      // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_DoubleDouble_ReturnValue_3;      // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BFF[0x6];                                     // 0x0102(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_NotEqual_DoubleDouble_A_ImplicitCast;     // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_NotEqual_DoubleDouble_A_ImplicitCast_1;   // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_NotEqual_DoubleDouble_A_ImplicitCast_2;   // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_NotEqual_DoubleDouble_A_ImplicitCast_3;   // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1;   // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_AddControllerPitchInput_Val_ImplicitCast; // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_AddControllerYawInput_Val_ImplicitCast;   // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn) == 0x000010, "Wrong alignment on B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn");
static_assert(sizeof(B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn) == 0x000140, "Wrong size on B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn");
static_assert(offsetof(B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn, EntryPoint) == 0x000000, "Member 'B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn::EntryPoint' has a wrong offset!");
static_assert(offsetof(B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn, Temp_struct_Variable) == 0x000010, "Member 'B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn, CallFunc_IsDedicatedServer_ReturnValue) == 0x000070, "Member 'B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn, CallFunc_AddComponent_ReturnValue) == 0x000078, "Member 'B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn::CallFunc_AddComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn, K2Node_Event_NewController) == 0x000080, "Member 'B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn::K2Node_Event_NewController' has a wrong offset!");
static_assert(offsetof(B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn, K2Node_InputAxisEvent_AxisValue_3) == 0x000088, "Member 'B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn::K2Node_InputAxisEvent_AxisValue_3' has a wrong offset!");
static_assert(offsetof(B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn, K2Node_InputAxisEvent_AxisValue_2) == 0x00008C, "Member 'B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn::K2Node_InputAxisEvent_AxisValue_2' has a wrong offset!");
static_assert(offsetof(B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn, CallFunc_NotEqual_DoubleDouble_ReturnValue) == 0x000090, "Member 'B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn::CallFunc_NotEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn, CallFunc_NotEqual_DoubleDouble_ReturnValue_1) == 0x000091, "Member 'B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn::CallFunc_NotEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn, CallFunc_GetGameInstance_ReturnValue) == 0x000098, "Member 'B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn, K2Node_DynamicCast_AsB_Game_Instance) == 0x0000A0, "Member 'B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn, K2Node_DynamicCast_bSuccess) == 0x0000A8, "Member 'B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn, CallFunc_GetGameInstance_ReturnValue_1) == 0x0000B0, "Member 'B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn::CallFunc_GetGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn, K2Node_DynamicCast_AsB_Game_Instance_1) == 0x0000B8, "Member 'B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn::K2Node_DynamicCast_AsB_Game_Instance_1' has a wrong offset!");
static_assert(offsetof(B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn, K2Node_DynamicCast_bSuccess_1) == 0x0000C0, "Member 'B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x0000C8, "Member 'B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn, CallFunc_GetWorldDeltaSeconds_ReturnValue_1) == 0x0000D0, "Member 'B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn::CallFunc_GetWorldDeltaSeconds_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn, K2Node_InputAxisEvent_AxisValue_1) == 0x0000D8, "Member 'B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn::K2Node_InputAxisEvent_AxisValue_1' has a wrong offset!");
static_assert(offsetof(B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn, K2Node_InputAxisEvent_AxisValue) == 0x0000DC, "Member 'B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn::K2Node_InputAxisEvent_AxisValue' has a wrong offset!");
static_assert(offsetof(B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0000E0, "Member 'B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x0000E8, "Member 'B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x0000F0, "Member 'B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x0000F8, "Member 'B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn, CallFunc_NotEqual_DoubleDouble_ReturnValue_2) == 0x000100, "Member 'B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn::CallFunc_NotEqual_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn, CallFunc_NotEqual_DoubleDouble_ReturnValue_3) == 0x000101, "Member 'B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn::CallFunc_NotEqual_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn, CallFunc_NotEqual_DoubleDouble_A_ImplicitCast) == 0x000108, "Member 'B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn::CallFunc_NotEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn, CallFunc_NotEqual_DoubleDouble_A_ImplicitCast_1) == 0x000110, "Member 'B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn::CallFunc_NotEqual_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn, CallFunc_NotEqual_DoubleDouble_A_ImplicitCast_2) == 0x000118, "Member 'B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn::CallFunc_NotEqual_DoubleDouble_A_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x000120, "Member 'B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn, CallFunc_NotEqual_DoubleDouble_A_ImplicitCast_3) == 0x000128, "Member 'B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn::CallFunc_NotEqual_DoubleDouble_A_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn, CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1) == 0x000130, "Member 'B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn::CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn, CallFunc_AddControllerPitchInput_Val_ImplicitCast) == 0x000138, "Member 'B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn::CallFunc_AddControllerPitchInput_Val_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn, CallFunc_AddControllerYawInput_Val_ImplicitCast) == 0x00013C, "Member 'B_CauldronPawn_C_ExecuteUbergraph_B_CauldronPawn::CallFunc_AddControllerYawInput_Val_ImplicitCast' has a wrong offset!");

// Function B_CauldronPawn.B_CauldronPawn_C.InpAxisEvt_LookUp_K2Node_InputAxisEvent_40
// 0x0004 (0x0004 - 0x0000)
struct B_CauldronPawn_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_40 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CauldronPawn_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_40) == 0x000004, "Wrong alignment on B_CauldronPawn_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_40");
static_assert(sizeof(B_CauldronPawn_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_40) == 0x000004, "Wrong size on B_CauldronPawn_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_40");
static_assert(offsetof(B_CauldronPawn_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_40, AxisValue) == 0x000000, "Member 'B_CauldronPawn_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_40::AxisValue' has a wrong offset!");

// Function B_CauldronPawn.B_CauldronPawn_C.InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_14
// 0x0004 (0x0004 - 0x0000)
struct B_CauldronPawn_C_InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_14 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CauldronPawn_C_InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_14) == 0x000004, "Wrong alignment on B_CauldronPawn_C_InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_14");
static_assert(sizeof(B_CauldronPawn_C_InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_14) == 0x000004, "Wrong size on B_CauldronPawn_C_InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_14");
static_assert(offsetof(B_CauldronPawn_C_InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_14, AxisValue) == 0x000000, "Member 'B_CauldronPawn_C_InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_14::AxisValue' has a wrong offset!");

// Function B_CauldronPawn.B_CauldronPawn_C.InpAxisEvt_Turn_K2Node_InputAxisEvent_47
// 0x0004 (0x0004 - 0x0000)
struct B_CauldronPawn_C_InpAxisEvt_Turn_K2Node_InputAxisEvent_47 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CauldronPawn_C_InpAxisEvt_Turn_K2Node_InputAxisEvent_47) == 0x000004, "Wrong alignment on B_CauldronPawn_C_InpAxisEvt_Turn_K2Node_InputAxisEvent_47");
static_assert(sizeof(B_CauldronPawn_C_InpAxisEvt_Turn_K2Node_InputAxisEvent_47) == 0x000004, "Wrong size on B_CauldronPawn_C_InpAxisEvt_Turn_K2Node_InputAxisEvent_47");
static_assert(offsetof(B_CauldronPawn_C_InpAxisEvt_Turn_K2Node_InputAxisEvent_47, AxisValue) == 0x000000, "Member 'B_CauldronPawn_C_InpAxisEvt_Turn_K2Node_InputAxisEvent_47::AxisValue' has a wrong offset!");

// Function B_CauldronPawn.B_CauldronPawn_C.InpAxisEvt_TurnRate_K2Node_InputAxisEvent_21
// 0x0004 (0x0004 - 0x0000)
struct B_CauldronPawn_C_InpAxisEvt_TurnRate_K2Node_InputAxisEvent_21 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CauldronPawn_C_InpAxisEvt_TurnRate_K2Node_InputAxisEvent_21) == 0x000004, "Wrong alignment on B_CauldronPawn_C_InpAxisEvt_TurnRate_K2Node_InputAxisEvent_21");
static_assert(sizeof(B_CauldronPawn_C_InpAxisEvt_TurnRate_K2Node_InputAxisEvent_21) == 0x000004, "Wrong size on B_CauldronPawn_C_InpAxisEvt_TurnRate_K2Node_InputAxisEvent_21");
static_assert(offsetof(B_CauldronPawn_C_InpAxisEvt_TurnRate_K2Node_InputAxisEvent_21, AxisValue) == 0x000000, "Member 'B_CauldronPawn_C_InpAxisEvt_TurnRate_K2Node_InputAxisEvent_21::AxisValue' has a wrong offset!");

// Function B_CauldronPawn.B_CauldronPawn_C.ReceivePossessed
// 0x0008 (0x0008 - 0x0000)
struct B_CauldronPawn_C_ReceivePossessed final
{
public:
	class AController*                            NewController;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CauldronPawn_C_ReceivePossessed) == 0x000008, "Wrong alignment on B_CauldronPawn_C_ReceivePossessed");
static_assert(sizeof(B_CauldronPawn_C_ReceivePossessed) == 0x000008, "Wrong size on B_CauldronPawn_C_ReceivePossessed");
static_assert(offsetof(B_CauldronPawn_C_ReceivePossessed, NewController) == 0x000000, "Member 'B_CauldronPawn_C_ReceivePossessed::NewController' has a wrong offset!");

}

