#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_DamageHandler

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function B_DamageHandler.B_DamageHandler_C.ShouldHandleDamage
// 0x0028 (0x0028 - 0x0000)
struct B_DamageHandler_C_ShouldHandleDamage final
{
public:
	bool                                          ShouldHandle;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42B2[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_GameState_C*                         CallFunc_GetBGameState_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_Hunter_C*                            K2Node_DynamicCast_AsB_Hunter;                     // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_DamageHandler_C_ShouldHandleDamage) == 0x000008, "Wrong alignment on B_DamageHandler_C_ShouldHandleDamage");
static_assert(sizeof(B_DamageHandler_C_ShouldHandleDamage) == 0x000028, "Wrong size on B_DamageHandler_C_ShouldHandleDamage");
static_assert(offsetof(B_DamageHandler_C_ShouldHandleDamage, ShouldHandle) == 0x000000, "Member 'B_DamageHandler_C_ShouldHandleDamage::ShouldHandle' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ShouldHandleDamage, CallFunc_GetBGameState_ReturnValue) == 0x000008, "Member 'B_DamageHandler_C_ShouldHandleDamage::CallFunc_GetBGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ShouldHandleDamage, CallFunc_GetOwner_ReturnValue) == 0x000010, "Member 'B_DamageHandler_C_ShouldHandleDamage::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ShouldHandleDamage, K2Node_DynamicCast_AsB_Hunter) == 0x000018, "Member 'B_DamageHandler_C_ShouldHandleDamage::K2Node_DynamicCast_AsB_Hunter' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ShouldHandleDamage, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'B_DamageHandler_C_ShouldHandleDamage::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function B_DamageHandler.B_DamageHandler_C.IsDead
// 0x0002 (0x0002 - 0x0000)
struct B_DamageHandler_C_IsDead final
{
public:
	bool                                          Param_IsDead;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_DamageHandler_C_IsDead) == 0x000001, "Wrong alignment on B_DamageHandler_C_IsDead");
static_assert(sizeof(B_DamageHandler_C_IsDead) == 0x000002, "Wrong size on B_DamageHandler_C_IsDead");
static_assert(offsetof(B_DamageHandler_C_IsDead, Param_IsDead) == 0x000000, "Member 'B_DamageHandler_C_IsDead::Param_IsDead' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_IsDead, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000001, "Member 'B_DamageHandler_C_IsDead::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");

// Function B_DamageHandler.B_DamageHandler_C.GetOwnerPlayerState
// 0x0048 (0x0048 - 0x0000)
struct B_DamageHandler_C_GetOwnerPlayerState final
{
public:
	class AB_PlayerState_C*                       PlayerState;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42B3[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  K2Node_DynamicCast_AsPawn;                         // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42B4[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42B5[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_DamageHandler_C_GetOwnerPlayerState) == 0x000008, "Wrong alignment on B_DamageHandler_C_GetOwnerPlayerState");
static_assert(sizeof(B_DamageHandler_C_GetOwnerPlayerState) == 0x000048, "Wrong size on B_DamageHandler_C_GetOwnerPlayerState");
static_assert(offsetof(B_DamageHandler_C_GetOwnerPlayerState, PlayerState) == 0x000000, "Member 'B_DamageHandler_C_GetOwnerPlayerState::PlayerState' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_GetOwnerPlayerState, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'B_DamageHandler_C_GetOwnerPlayerState::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_GetOwnerPlayerState, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'B_DamageHandler_C_GetOwnerPlayerState::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_GetOwnerPlayerState, K2Node_DynamicCast_AsPawn) == 0x000018, "Member 'B_DamageHandler_C_GetOwnerPlayerState::K2Node_DynamicCast_AsPawn' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_GetOwnerPlayerState, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'B_DamageHandler_C_GetOwnerPlayerState::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_GetOwnerPlayerState, CallFunc_GetController_ReturnValue) == 0x000028, "Member 'B_DamageHandler_C_GetOwnerPlayerState::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_GetOwnerPlayerState, CallFunc_IsValid_ReturnValue_1) == 0x000030, "Member 'B_DamageHandler_C_GetOwnerPlayerState::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_GetOwnerPlayerState, K2Node_DynamicCast_AsB_Player_State) == 0x000038, "Member 'B_DamageHandler_C_GetOwnerPlayerState::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_GetOwnerPlayerState, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'B_DamageHandler_C_GetOwnerPlayerState::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function B_DamageHandler.B_DamageHandler_C.SetPlayerHealthPercental
// 0x0010 (0x0010 - 0x0000)
struct B_DamageHandler_C_SetPlayerHealthPercental final
{
public:
	double                                        Percentage;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_DamageHandler_C_SetPlayerHealthPercental) == 0x000008, "Wrong alignment on B_DamageHandler_C_SetPlayerHealthPercental");
static_assert(sizeof(B_DamageHandler_C_SetPlayerHealthPercental) == 0x000010, "Wrong size on B_DamageHandler_C_SetPlayerHealthPercental");
static_assert(offsetof(B_DamageHandler_C_SetPlayerHealthPercental, Percentage) == 0x000000, "Member 'B_DamageHandler_C_SetPlayerHealthPercental::Percentage' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_SetPlayerHealthPercental, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000008, "Member 'B_DamageHandler_C_SetPlayerHealthPercental::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");

// Function B_DamageHandler.B_DamageHandler_C.GetMaxHealth
// 0x0008 (0x0008 - 0x0000)
struct B_DamageHandler_C_GetMaxHealth final
{
public:
	double                                        ReturnMaxHealth;                                   // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_DamageHandler_C_GetMaxHealth) == 0x000008, "Wrong alignment on B_DamageHandler_C_GetMaxHealth");
static_assert(sizeof(B_DamageHandler_C_GetMaxHealth) == 0x000008, "Wrong size on B_DamageHandler_C_GetMaxHealth");
static_assert(offsetof(B_DamageHandler_C_GetMaxHealth, ReturnMaxHealth) == 0x000000, "Member 'B_DamageHandler_C_GetMaxHealth::ReturnMaxHealth' has a wrong offset!");

// Function B_DamageHandler.B_DamageHandler_C.SetMaxHealth
// 0x0008 (0x0008 - 0x0000)
struct B_DamageHandler_C_SetMaxHealth final
{
public:
	double                                        NewMaxHealth;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_DamageHandler_C_SetMaxHealth) == 0x000008, "Wrong alignment on B_DamageHandler_C_SetMaxHealth");
static_assert(sizeof(B_DamageHandler_C_SetMaxHealth) == 0x000008, "Wrong size on B_DamageHandler_C_SetMaxHealth");
static_assert(offsetof(B_DamageHandler_C_SetMaxHealth, NewMaxHealth) == 0x000000, "Member 'B_DamageHandler_C_SetMaxHealth::NewMaxHealth' has a wrong offset!");

// Function B_DamageHandler.B_DamageHandler_C.GetHealth
// 0x0008 (0x0008 - 0x0000)
struct B_DamageHandler_C_GetHealth final
{
public:
	double                                        ReturnHealth;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_DamageHandler_C_GetHealth) == 0x000008, "Wrong alignment on B_DamageHandler_C_GetHealth");
static_assert(sizeof(B_DamageHandler_C_GetHealth) == 0x000008, "Wrong size on B_DamageHandler_C_GetHealth");
static_assert(offsetof(B_DamageHandler_C_GetHealth, ReturnHealth) == 0x000000, "Member 'B_DamageHandler_C_GetHealth::ReturnHealth' has a wrong offset!");

// Function B_DamageHandler.B_DamageHandler_C.SetHealth
// 0x0008 (0x0008 - 0x0000)
struct B_DamageHandler_C_SetHealth final
{
public:
	double                                        NewHealth;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_DamageHandler_C_SetHealth) == 0x000008, "Wrong alignment on B_DamageHandler_C_SetHealth");
static_assert(sizeof(B_DamageHandler_C_SetHealth) == 0x000008, "Wrong size on B_DamageHandler_C_SetHealth");
static_assert(offsetof(B_DamageHandler_C_SetHealth, NewHealth) == 0x000000, "Member 'B_DamageHandler_C_SetHealth::NewHealth' has a wrong offset!");

// Function B_DamageHandler.B_DamageHandler_C.UpdatePlayerStateHealth
// 0x0020 (0x0020 - 0x0000)
struct B_DamageHandler_C_UpdatePlayerStateHealth final
{
public:
	class AB_PlayerState_C*                       OwnerPlayerState;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       CallFunc_GetOwnerPlayerState_PlayerState;          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42B6[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_DamageHandler_C_UpdatePlayerStateHealth) == 0x000008, "Wrong alignment on B_DamageHandler_C_UpdatePlayerStateHealth");
static_assert(sizeof(B_DamageHandler_C_UpdatePlayerStateHealth) == 0x000020, "Wrong size on B_DamageHandler_C_UpdatePlayerStateHealth");
static_assert(offsetof(B_DamageHandler_C_UpdatePlayerStateHealth, OwnerPlayerState) == 0x000000, "Member 'B_DamageHandler_C_UpdatePlayerStateHealth::OwnerPlayerState' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_UpdatePlayerStateHealth, CallFunc_GetOwnerPlayerState_PlayerState) == 0x000008, "Member 'B_DamageHandler_C_UpdatePlayerStateHealth::CallFunc_GetOwnerPlayerState_PlayerState' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_UpdatePlayerStateHealth, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'B_DamageHandler_C_UpdatePlayerStateHealth::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_UpdatePlayerStateHealth, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000018, "Member 'B_DamageHandler_C_UpdatePlayerStateHealth::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");

// Function B_DamageHandler.B_DamageHandler_C.AddAssisted
// 0x0040 (0x0040 - 0x0000)
struct B_DamageHandler_C_AddAssisted final
{
public:
	class AController*                            Causer;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       OwnerPlayerState;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       CauserPlayerState;                                 // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42B7[0x2];                                     // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       CallFunc_GetOwnerPlayerState_PlayerState;          // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42B8[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_DamageHandler_C_AddAssisted) == 0x000008, "Wrong alignment on B_DamageHandler_C_AddAssisted");
static_assert(sizeof(B_DamageHandler_C_AddAssisted) == 0x000040, "Wrong size on B_DamageHandler_C_AddAssisted");
static_assert(offsetof(B_DamageHandler_C_AddAssisted, Causer) == 0x000000, "Member 'B_DamageHandler_C_AddAssisted::Causer' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_AddAssisted, OwnerPlayerState) == 0x000008, "Member 'B_DamageHandler_C_AddAssisted::OwnerPlayerState' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_AddAssisted, CauserPlayerState) == 0x000010, "Member 'B_DamageHandler_C_AddAssisted::CauserPlayerState' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_AddAssisted, CallFunc_Array_AddUnique_ReturnValue) == 0x000018, "Member 'B_DamageHandler_C_AddAssisted::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_AddAssisted, CallFunc_Array_Contains_ReturnValue) == 0x00001C, "Member 'B_DamageHandler_C_AddAssisted::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_AddAssisted, CallFunc_Not_PreBool_ReturnValue) == 0x00001D, "Member 'B_DamageHandler_C_AddAssisted::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_AddAssisted, CallFunc_GetOwnerPlayerState_PlayerState) == 0x000020, "Member 'B_DamageHandler_C_AddAssisted::CallFunc_GetOwnerPlayerState_PlayerState' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_AddAssisted, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000028, "Member 'B_DamageHandler_C_AddAssisted::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_AddAssisted, CallFunc_IsValid_ReturnValue) == 0x000029, "Member 'B_DamageHandler_C_AddAssisted::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_AddAssisted, CallFunc_IsValid_ReturnValue_1) == 0x00002A, "Member 'B_DamageHandler_C_AddAssisted::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_AddAssisted, CallFunc_BooleanAND_ReturnValue) == 0x00002B, "Member 'B_DamageHandler_C_AddAssisted::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_AddAssisted, K2Node_DynamicCast_AsB_Player_State) == 0x000030, "Member 'B_DamageHandler_C_AddAssisted::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_AddAssisted, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'B_DamageHandler_C_AddAssisted::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function B_DamageHandler.B_DamageHandler_C.Kill
// 0x0158 (0x0158 - 0x0000)
struct B_DamageHandler_C_Kill final
{
public:
	class AController*                            Killer;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          SpawnAtPlayerStart;                                // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42B9[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      GameInstance;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameMode_C*                          GameMode;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         GameState;                                         // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       KillerPlayerState;                                 // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       OwnerPlayerState;                                  // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42BA[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerController_C*                  K2Node_DynamicCast_AsB_Player_Controller;          // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42BB[0x6];                                     // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue;               // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42BC[0x2];                                     // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42BD[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetWitchesCount_WitchesCount;             // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42BE[0x3];                                     // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Map_Find_Value;                           // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42BF[0x3];                                     // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42C0[0x3];                                     // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AController*                            CallFunc_Array_Get_Item;                           // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameMode_C*                          K2Node_DynamicCast_AsB_Game_Mode;                  // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42C1[0x7];                                     // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42C2[0x7];                                     // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              CallFunc_Now_ReturnValue;                          // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42C3[0x7];                                     // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       CallFunc_GetOwnerPlayerState_PlayerState;          // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetHunterScoreStat_Stat;                  // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetHunterScoreStat_Stat_1;                // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0102(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42C4[0x1];                                     // 0x0103(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42C5[0x3];                                     // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue_1;      // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42C6[0x7];                                     // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_Array_Get_Item_1;                         // 0x0118(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0124(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0125(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42C7[0x2];                                     // 0x0126(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State_1;             // 0x0128(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42C8[0x7];                                     // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           Temp_object_Variable;                              // 0x0138(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerState*                           K2Node_Select_Default;                             // 0x0140(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x0148(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_DamageHandler_C_Kill) == 0x000008, "Wrong alignment on B_DamageHandler_C_Kill");
static_assert(sizeof(B_DamageHandler_C_Kill) == 0x000158, "Wrong size on B_DamageHandler_C_Kill");
static_assert(offsetof(B_DamageHandler_C_Kill, Killer) == 0x000000, "Member 'B_DamageHandler_C_Kill::Killer' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, SpawnAtPlayerStart) == 0x000008, "Member 'B_DamageHandler_C_Kill::SpawnAtPlayerStart' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, GameInstance) == 0x000010, "Member 'B_DamageHandler_C_Kill::GameInstance' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, GameMode) == 0x000018, "Member 'B_DamageHandler_C_Kill::GameMode' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, GameState) == 0x000020, "Member 'B_DamageHandler_C_Kill::GameState' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, KillerPlayerState) == 0x000028, "Member 'B_DamageHandler_C_Kill::KillerPlayerState' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, OwnerPlayerState) == 0x000030, "Member 'B_DamageHandler_C_Kill::OwnerPlayerState' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, Temp_int_Array_Index_Variable) == 0x000038, "Member 'B_DamageHandler_C_Kill::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, K2Node_DynamicCast_AsB_Player_Controller) == 0x000040, "Member 'B_DamageHandler_C_Kill::K2Node_DynamicCast_AsB_Player_Controller' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'B_DamageHandler_C_Kill::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, CallFunc_IsValid_ReturnValue) == 0x000049, "Member 'B_DamageHandler_C_Kill::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, CallFunc_GetOwner_ReturnValue) == 0x000050, "Member 'B_DamageHandler_C_Kill::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, CallFunc_GetObjectClass_ReturnValue) == 0x000058, "Member 'B_DamageHandler_C_Kill::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, CallFunc_ClassIsChildOf_ReturnValue) == 0x000060, "Member 'B_DamageHandler_C_Kill::CallFunc_ClassIsChildOf_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, CallFunc_Not_PreBool_ReturnValue) == 0x000061, "Member 'B_DamageHandler_C_Kill::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, CallFunc_Array_Length_ReturnValue) == 0x000064, "Member 'B_DamageHandler_C_Kill::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000068, "Member 'B_DamageHandler_C_Kill::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, Temp_int_Loop_Counter_Variable) == 0x00006C, "Member 'B_DamageHandler_C_Kill::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, CallFunc_Add_IntInt_ReturnValue) == 0x000070, "Member 'B_DamageHandler_C_Kill::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, CallFunc_GetWitchesCount_WitchesCount) == 0x000074, "Member 'B_DamageHandler_C_Kill::CallFunc_GetWitchesCount_WitchesCount' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, CallFunc_GetGameInstance_ReturnValue) == 0x000078, "Member 'B_DamageHandler_C_Kill::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, CallFunc_Map_Find_Value) == 0x000080, "Member 'B_DamageHandler_C_Kill::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, CallFunc_Map_Find_ReturnValue) == 0x000084, "Member 'B_DamageHandler_C_Kill::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, K2Node_DynamicCast_AsB_Game_Instance) == 0x000088, "Member 'B_DamageHandler_C_Kill::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, K2Node_DynamicCast_bSuccess_1) == 0x000090, "Member 'B_DamageHandler_C_Kill::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, Temp_int_Array_Index_Variable_1) == 0x000094, "Member 'B_DamageHandler_C_Kill::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, CallFunc_GetGameMode_ReturnValue) == 0x000098, "Member 'B_DamageHandler_C_Kill::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, CallFunc_Array_Get_Item) == 0x0000A0, "Member 'B_DamageHandler_C_Kill::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, K2Node_DynamicCast_AsB_Game_Mode) == 0x0000A8, "Member 'B_DamageHandler_C_Kill::K2Node_DynamicCast_AsB_Game_Mode' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, K2Node_DynamicCast_bSuccess_2) == 0x0000B0, "Member 'B_DamageHandler_C_Kill::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, CallFunc_GetGameState_ReturnValue) == 0x0000B8, "Member 'B_DamageHandler_C_Kill::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, K2Node_DynamicCast_AsB_Game_State) == 0x0000C0, "Member 'B_DamageHandler_C_Kill::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, K2Node_DynamicCast_bSuccess_3) == 0x0000C8, "Member 'B_DamageHandler_C_Kill::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, CallFunc_Now_ReturnValue) == 0x0000D0, "Member 'B_DamageHandler_C_Kill::CallFunc_Now_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, K2Node_DynamicCast_AsB_Player_State) == 0x0000D8, "Member 'B_DamageHandler_C_Kill::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, K2Node_DynamicCast_bSuccess_4) == 0x0000E0, "Member 'B_DamageHandler_C_Kill::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, CallFunc_GetOwnerPlayerState_PlayerState) == 0x0000E8, "Member 'B_DamageHandler_C_Kill::CallFunc_GetOwnerPlayerState_PlayerState' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, CallFunc_GetHunterScoreStat_Stat) == 0x0000F0, "Member 'B_DamageHandler_C_Kill::CallFunc_GetHunterScoreStat_Stat' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, CallFunc_GetHunterScoreStat_Stat_1) == 0x0000F8, "Member 'B_DamageHandler_C_Kill::CallFunc_GetHunterScoreStat_Stat_1' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000100, "Member 'B_DamageHandler_C_Kill::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, Temp_bool_Variable) == 0x000101, "Member 'B_DamageHandler_C_Kill::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, CallFunc_IsValid_ReturnValue_1) == 0x000102, "Member 'B_DamageHandler_C_Kill::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, Temp_int_Loop_Counter_Variable_1) == 0x000104, "Member 'B_DamageHandler_C_Kill::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, CallFunc_Less_IntInt_ReturnValue) == 0x000108, "Member 'B_DamageHandler_C_Kill::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, CallFunc_Add_IntInt_ReturnValue_1) == 0x00010C, "Member 'B_DamageHandler_C_Kill::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, CallFunc_NotEqual_ObjectObject_ReturnValue_1) == 0x000110, "Member 'B_DamageHandler_C_Kill::CallFunc_NotEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, CallFunc_Array_Get_Item_1) == 0x000118, "Member 'B_DamageHandler_C_Kill::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, CallFunc_Array_Length_ReturnValue_1) == 0x000120, "Member 'B_DamageHandler_C_Kill::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, CallFunc_Less_IntInt_ReturnValue_1) == 0x000124, "Member 'B_DamageHandler_C_Kill::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, CallFunc_IsValid_ReturnValue_2) == 0x000125, "Member 'B_DamageHandler_C_Kill::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, K2Node_DynamicCast_AsB_Player_State_1) == 0x000128, "Member 'B_DamageHandler_C_Kill::K2Node_DynamicCast_AsB_Player_State_1' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, K2Node_DynamicCast_bSuccess_5) == 0x000130, "Member 'B_DamageHandler_C_Kill::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, Temp_object_Variable) == 0x000138, "Member 'B_DamageHandler_C_Kill::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, K2Node_Select_Default) == 0x000140, "Member 'B_DamageHandler_C_Kill::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, CallFunc_GetOwner_ReturnValue_1) == 0x000148, "Member 'B_DamageHandler_C_Kill::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_Kill, CallFunc_IsValid_ReturnValue_3) == 0x000150, "Member 'B_DamageHandler_C_Kill::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");

// Function B_DamageHandler.B_DamageHandler_C.RemoveTeamAndSetDead
// 0x0030 (0x0030 - 0x0000)
struct B_DamageHandler_C_RemoveTeamAndSetDead final
{
public:
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_DynamicCast_AsPawn;                         // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42C9[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_DamageHandler_C_RemoveTeamAndSetDead) == 0x000008, "Wrong alignment on B_DamageHandler_C_RemoveTeamAndSetDead");
static_assert(sizeof(B_DamageHandler_C_RemoveTeamAndSetDead) == 0x000030, "Wrong size on B_DamageHandler_C_RemoveTeamAndSetDead");
static_assert(offsetof(B_DamageHandler_C_RemoveTeamAndSetDead, CallFunc_GetOwner_ReturnValue) == 0x000000, "Member 'B_DamageHandler_C_RemoveTeamAndSetDead::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_RemoveTeamAndSetDead, K2Node_DynamicCast_AsPawn) == 0x000008, "Member 'B_DamageHandler_C_RemoveTeamAndSetDead::K2Node_DynamicCast_AsPawn' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_RemoveTeamAndSetDead, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'B_DamageHandler_C_RemoveTeamAndSetDead::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_RemoveTeamAndSetDead, CallFunc_GetController_ReturnValue) == 0x000018, "Member 'B_DamageHandler_C_RemoveTeamAndSetDead::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_RemoveTeamAndSetDead, K2Node_DynamicCast_AsB_Player_State) == 0x000020, "Member 'B_DamageHandler_C_RemoveTeamAndSetDead::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_RemoveTeamAndSetDead, K2Node_DynamicCast_bSuccess_1) == 0x000028, "Member 'B_DamageHandler_C_RemoveTeamAndSetDead::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function B_DamageHandler.B_DamageHandler_C.ProcessPointDamage
// 0x0060 (0x0060 - 0x0000)
struct B_DamageHandler_C_ProcessPointDamage final
{
public:
	double                                        Damage;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitLocation;                                       // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitDirection;                                      // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            Causer;                                            // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue;               // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsRoundEnd_RoundIsEnd;                    // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasTrackingStarted_HasTrackingStarted;    // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ProcessDamage_Killed;                     // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x005E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_DamageHandler_C_ProcessPointDamage) == 0x000008, "Wrong alignment on B_DamageHandler_C_ProcessPointDamage");
static_assert(sizeof(B_DamageHandler_C_ProcessPointDamage) == 0x000060, "Wrong size on B_DamageHandler_C_ProcessPointDamage");
static_assert(offsetof(B_DamageHandler_C_ProcessPointDamage, Damage) == 0x000000, "Member 'B_DamageHandler_C_ProcessPointDamage::Damage' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ProcessPointDamage, HitLocation) == 0x000008, "Member 'B_DamageHandler_C_ProcessPointDamage::HitLocation' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ProcessPointDamage, HitDirection) == 0x000020, "Member 'B_DamageHandler_C_ProcessPointDamage::HitDirection' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ProcessPointDamage, Causer) == 0x000038, "Member 'B_DamageHandler_C_ProcessPointDamage::Causer' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ProcessPointDamage, CallFunc_GetGameState_ReturnValue) == 0x000040, "Member 'B_DamageHandler_C_ProcessPointDamage::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ProcessPointDamage, CallFunc_GetObjectClass_ReturnValue) == 0x000048, "Member 'B_DamageHandler_C_ProcessPointDamage::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ProcessPointDamage, K2Node_DynamicCast_AsB_Game_State) == 0x000050, "Member 'B_DamageHandler_C_ProcessPointDamage::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ProcessPointDamage, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'B_DamageHandler_C_ProcessPointDamage::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ProcessPointDamage, CallFunc_ClassIsChildOf_ReturnValue) == 0x000059, "Member 'B_DamageHandler_C_ProcessPointDamage::CallFunc_ClassIsChildOf_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ProcessPointDamage, CallFunc_IsRoundEnd_RoundIsEnd) == 0x00005A, "Member 'B_DamageHandler_C_ProcessPointDamage::CallFunc_IsRoundEnd_RoundIsEnd' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ProcessPointDamage, CallFunc_HasTrackingStarted_HasTrackingStarted) == 0x00005B, "Member 'B_DamageHandler_C_ProcessPointDamage::CallFunc_HasTrackingStarted_HasTrackingStarted' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ProcessPointDamage, CallFunc_BooleanOR_ReturnValue) == 0x00005C, "Member 'B_DamageHandler_C_ProcessPointDamage::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ProcessPointDamage, CallFunc_ProcessDamage_Killed) == 0x00005D, "Member 'B_DamageHandler_C_ProcessPointDamage::CallFunc_ProcessDamage_Killed' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ProcessPointDamage, CallFunc_BooleanOR_ReturnValue_1) == 0x00005E, "Member 'B_DamageHandler_C_ProcessPointDamage::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");

// Function B_DamageHandler.B_DamageHandler_C.ProcessAnyDamage
// 0x0048 (0x0048 - 0x0000)
struct B_DamageHandler_C_ProcessAnyDamage final
{
public:
	double                                        Damage;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            Causer;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Silent;                                            // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42CA[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ProcessDamage_Killed;                     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42CB[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue;               // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42CC[0x6];                                     // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsRoundEnd_RoundIsEnd;                    // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasTrackingStarted_HasTrackingStarted;    // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_DamageHandler_C_ProcessAnyDamage) == 0x000008, "Wrong alignment on B_DamageHandler_C_ProcessAnyDamage");
static_assert(sizeof(B_DamageHandler_C_ProcessAnyDamage) == 0x000048, "Wrong size on B_DamageHandler_C_ProcessAnyDamage");
static_assert(offsetof(B_DamageHandler_C_ProcessAnyDamage, Damage) == 0x000000, "Member 'B_DamageHandler_C_ProcessAnyDamage::Damage' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ProcessAnyDamage, Causer) == 0x000008, "Member 'B_DamageHandler_C_ProcessAnyDamage::Causer' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ProcessAnyDamage, Silent) == 0x000010, "Member 'B_DamageHandler_C_ProcessAnyDamage::Silent' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ProcessAnyDamage, CallFunc_GetGameState_ReturnValue) == 0x000018, "Member 'B_DamageHandler_C_ProcessAnyDamage::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ProcessAnyDamage, CallFunc_ProcessDamage_Killed) == 0x000020, "Member 'B_DamageHandler_C_ProcessAnyDamage::CallFunc_ProcessDamage_Killed' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ProcessAnyDamage, CallFunc_GetObjectClass_ReturnValue) == 0x000028, "Member 'B_DamageHandler_C_ProcessAnyDamage::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ProcessAnyDamage, CallFunc_Not_PreBool_ReturnValue) == 0x000030, "Member 'B_DamageHandler_C_ProcessAnyDamage::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ProcessAnyDamage, CallFunc_ClassIsChildOf_ReturnValue) == 0x000031, "Member 'B_DamageHandler_C_ProcessAnyDamage::CallFunc_ClassIsChildOf_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ProcessAnyDamage, K2Node_DynamicCast_AsB_Game_State) == 0x000038, "Member 'B_DamageHandler_C_ProcessAnyDamage::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ProcessAnyDamage, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'B_DamageHandler_C_ProcessAnyDamage::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ProcessAnyDamage, CallFunc_IsRoundEnd_RoundIsEnd) == 0x000041, "Member 'B_DamageHandler_C_ProcessAnyDamage::CallFunc_IsRoundEnd_RoundIsEnd' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ProcessAnyDamage, CallFunc_Not_PreBool_ReturnValue_1) == 0x000042, "Member 'B_DamageHandler_C_ProcessAnyDamage::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ProcessAnyDamage, CallFunc_HasTrackingStarted_HasTrackingStarted) == 0x000043, "Member 'B_DamageHandler_C_ProcessAnyDamage::CallFunc_HasTrackingStarted_HasTrackingStarted' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ProcessAnyDamage, CallFunc_BooleanAND_ReturnValue) == 0x000044, "Member 'B_DamageHandler_C_ProcessAnyDamage::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ProcessAnyDamage, CallFunc_BooleanOR_ReturnValue) == 0x000045, "Member 'B_DamageHandler_C_ProcessAnyDamage::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ProcessAnyDamage, CallFunc_BooleanOR_ReturnValue_1) == 0x000046, "Member 'B_DamageHandler_C_ProcessAnyDamage::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");

// Function B_DamageHandler.B_DamageHandler_C.RecalculateRelativeHealth
// 0x0018 (0x0018 - 0x0000)
struct B_DamageHandler_C_RecalculateRelativeHealth final
{
public:
	class UB_DamageHandler_C*                     OtherDamageHandler;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_DamageHandler_C_RecalculateRelativeHealth) == 0x000008, "Wrong alignment on B_DamageHandler_C_RecalculateRelativeHealth");
static_assert(sizeof(B_DamageHandler_C_RecalculateRelativeHealth) == 0x000018, "Wrong size on B_DamageHandler_C_RecalculateRelativeHealth");
static_assert(offsetof(B_DamageHandler_C_RecalculateRelativeHealth, OtherDamageHandler) == 0x000000, "Member 'B_DamageHandler_C_RecalculateRelativeHealth::OtherDamageHandler' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_RecalculateRelativeHealth, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000008, "Member 'B_DamageHandler_C_RecalculateRelativeHealth::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_RecalculateRelativeHealth, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000010, "Member 'B_DamageHandler_C_RecalculateRelativeHealth::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");

// Function B_DamageHandler.B_DamageHandler_C.SetSpectator
// 0x0030 (0x0030 - 0x0000)
struct B_DamageHandler_C_SetSpectator final
{
public:
	class APlayerState*                           Killer;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          SpawnAtPlayerStart;                                // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42CD[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameMode_C*                          K2Node_DynamicCast_AsB_Game_Mode;                  // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_DamageHandler_C_SetSpectator) == 0x000008, "Wrong alignment on B_DamageHandler_C_SetSpectator");
static_assert(sizeof(B_DamageHandler_C_SetSpectator) == 0x000030, "Wrong size on B_DamageHandler_C_SetSpectator");
static_assert(offsetof(B_DamageHandler_C_SetSpectator, Killer) == 0x000000, "Member 'B_DamageHandler_C_SetSpectator::Killer' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_SetSpectator, SpawnAtPlayerStart) == 0x000008, "Member 'B_DamageHandler_C_SetSpectator::SpawnAtPlayerStart' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_SetSpectator, CallFunc_GetGameMode_ReturnValue) == 0x000010, "Member 'B_DamageHandler_C_SetSpectator::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_SetSpectator, CallFunc_GetOwner_ReturnValue) == 0x000018, "Member 'B_DamageHandler_C_SetSpectator::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_SetSpectator, K2Node_DynamicCast_AsB_Game_Mode) == 0x000020, "Member 'B_DamageHandler_C_SetSpectator::K2Node_DynamicCast_AsB_Game_Mode' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_SetSpectator, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'B_DamageHandler_C_SetSpectator::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function B_DamageHandler.B_DamageHandler_C.ApplyDamage
// 0x0010 (0x0010 - 0x0000)
struct B_DamageHandler_C_ApplyDamage final
{
public:
	double                                        Damage;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_DamageHandler_C_ApplyDamage) == 0x000008, "Wrong alignment on B_DamageHandler_C_ApplyDamage");
static_assert(sizeof(B_DamageHandler_C_ApplyDamage) == 0x000010, "Wrong size on B_DamageHandler_C_ApplyDamage");
static_assert(offsetof(B_DamageHandler_C_ApplyDamage, Damage) == 0x000000, "Member 'B_DamageHandler_C_ApplyDamage::Damage' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ApplyDamage, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000008, "Member 'B_DamageHandler_C_ApplyDamage::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");

// Function B_DamageHandler.B_DamageHandler_C.ProcessDamage
// 0x0078 (0x0078 - 0x0000)
struct B_DamageHandler_C_ProcessDamage final
{
public:
	double                                        Damage;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            Causer;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Silent;                                            // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Killed;                                            // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42CE[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ActualDamage;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDead_IsDead;                            // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42CF[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       CallFunc_GetOwnerPlayerState_PlayerState;          // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_Witch_C*                             K2Node_DynamicCast_AsB_Witch;                      // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42D0[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerController_C*                  K2Node_DynamicCast_AsB_Player_Controller;          // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDead_IsDead_1;                          // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42D1[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_MatchParametersSubsystem_C*          CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42D2[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_DamageHandler_C_ProcessDamage) == 0x000008, "Wrong alignment on B_DamageHandler_C_ProcessDamage");
static_assert(sizeof(B_DamageHandler_C_ProcessDamage) == 0x000078, "Wrong size on B_DamageHandler_C_ProcessDamage");
static_assert(offsetof(B_DamageHandler_C_ProcessDamage, Damage) == 0x000000, "Member 'B_DamageHandler_C_ProcessDamage::Damage' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ProcessDamage, Causer) == 0x000008, "Member 'B_DamageHandler_C_ProcessDamage::Causer' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ProcessDamage, Silent) == 0x000010, "Member 'B_DamageHandler_C_ProcessDamage::Silent' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ProcessDamage, Killed) == 0x000011, "Member 'B_DamageHandler_C_ProcessDamage::Killed' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ProcessDamage, ActualDamage) == 0x000018, "Member 'B_DamageHandler_C_ProcessDamage::ActualDamage' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ProcessDamage, CallFunc_Not_PreBool_ReturnValue) == 0x000020, "Member 'B_DamageHandler_C_ProcessDamage::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ProcessDamage, CallFunc_IsDead_IsDead) == 0x000021, "Member 'B_DamageHandler_C_ProcessDamage::CallFunc_IsDead_IsDead' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ProcessDamage, CallFunc_GetOwnerPlayerState_PlayerState) == 0x000028, "Member 'B_DamageHandler_C_ProcessDamage::CallFunc_GetOwnerPlayerState_PlayerState' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ProcessDamage, CallFunc_GetOwner_ReturnValue) == 0x000030, "Member 'B_DamageHandler_C_ProcessDamage::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ProcessDamage, K2Node_DynamicCast_AsB_Witch) == 0x000038, "Member 'B_DamageHandler_C_ProcessDamage::K2Node_DynamicCast_AsB_Witch' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ProcessDamage, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'B_DamageHandler_C_ProcessDamage::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ProcessDamage, K2Node_DynamicCast_AsB_Player_Controller) == 0x000048, "Member 'B_DamageHandler_C_ProcessDamage::K2Node_DynamicCast_AsB_Player_Controller' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ProcessDamage, K2Node_DynamicCast_bSuccess_1) == 0x000050, "Member 'B_DamageHandler_C_ProcessDamage::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ProcessDamage, CallFunc_IsDead_IsDead_1) == 0x000051, "Member 'B_DamageHandler_C_ProcessDamage::CallFunc_IsDead_IsDead_1' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ProcessDamage, CallFunc_Not_PreBool_ReturnValue_1) == 0x000052, "Member 'B_DamageHandler_C_ProcessDamage::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ProcessDamage, CallFunc_IsValid_ReturnValue) == 0x000053, "Member 'B_DamageHandler_C_ProcessDamage::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ProcessDamage, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000058, "Member 'B_DamageHandler_C_ProcessDamage::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ProcessDamage, CallFunc_GetOwner_ReturnValue_1) == 0x000060, "Member 'B_DamageHandler_C_ProcessDamage::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ProcessDamage, CallFunc_HasAuthority_ReturnValue) == 0x000068, "Member 'B_DamageHandler_C_ProcessDamage::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ProcessDamage, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000070, "Member 'B_DamageHandler_C_ProcessDamage::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");

// Function B_DamageHandler.B_DamageHandler_C.AnyDamage
// 0x0028 (0x0028 - 0x0000)
struct B_DamageHandler_C_AnyDamage final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42D3[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UDamageType*                      DamageType;                                        // 0x0010(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AController*                            InstigatedBy;                                      // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 DamageCauser;                                      // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_DamageHandler_C_AnyDamage) == 0x000008, "Wrong alignment on B_DamageHandler_C_AnyDamage");
static_assert(sizeof(B_DamageHandler_C_AnyDamage) == 0x000028, "Wrong size on B_DamageHandler_C_AnyDamage");
static_assert(offsetof(B_DamageHandler_C_AnyDamage, DamagedActor) == 0x000000, "Member 'B_DamageHandler_C_AnyDamage::DamagedActor' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_AnyDamage, Damage) == 0x000008, "Member 'B_DamageHandler_C_AnyDamage::Damage' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_AnyDamage, DamageType) == 0x000010, "Member 'B_DamageHandler_C_AnyDamage::DamageType' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_AnyDamage, InstigatedBy) == 0x000018, "Member 'B_DamageHandler_C_AnyDamage::InstigatedBy' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_AnyDamage, DamageCauser) == 0x000020, "Member 'B_DamageHandler_C_AnyDamage::DamageCauser' has a wrong offset!");

// Function B_DamageHandler.B_DamageHandler_C.PointDamage
// 0x0068 (0x0068 - 0x0000)
struct B_DamageHandler_C_PointDamage final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42D4[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitLocation;                                       // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   BoneName;                                          // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ShotFromDirection;                                 // 0x0040(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UDamageType*                      DamageType;                                        // 0x0058(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 DamageCauser;                                      // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_DamageHandler_C_PointDamage) == 0x000008, "Wrong alignment on B_DamageHandler_C_PointDamage");
static_assert(sizeof(B_DamageHandler_C_PointDamage) == 0x000068, "Wrong size on B_DamageHandler_C_PointDamage");
static_assert(offsetof(B_DamageHandler_C_PointDamage, DamagedActor) == 0x000000, "Member 'B_DamageHandler_C_PointDamage::DamagedActor' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_PointDamage, Damage) == 0x000008, "Member 'B_DamageHandler_C_PointDamage::Damage' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_PointDamage, InstigatedBy) == 0x000010, "Member 'B_DamageHandler_C_PointDamage::InstigatedBy' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_PointDamage, HitLocation) == 0x000018, "Member 'B_DamageHandler_C_PointDamage::HitLocation' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_PointDamage, FHitComponent) == 0x000030, "Member 'B_DamageHandler_C_PointDamage::FHitComponent' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_PointDamage, BoneName) == 0x000038, "Member 'B_DamageHandler_C_PointDamage::BoneName' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_PointDamage, ShotFromDirection) == 0x000040, "Member 'B_DamageHandler_C_PointDamage::ShotFromDirection' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_PointDamage, DamageType) == 0x000058, "Member 'B_DamageHandler_C_PointDamage::DamageType' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_PointDamage, DamageCauser) == 0x000060, "Member 'B_DamageHandler_C_PointDamage::DamageCauser' has a wrong offset!");

// Function B_DamageHandler.B_DamageHandler_C.TakeAnyDamageMulticast
// 0x0008 (0x0008 - 0x0000)
struct B_DamageHandler_C_TakeAnyDamageMulticast final
{
public:
	class AController*                            Causer;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_DamageHandler_C_TakeAnyDamageMulticast) == 0x000008, "Wrong alignment on B_DamageHandler_C_TakeAnyDamageMulticast");
static_assert(sizeof(B_DamageHandler_C_TakeAnyDamageMulticast) == 0x000008, "Wrong size on B_DamageHandler_C_TakeAnyDamageMulticast");
static_assert(offsetof(B_DamageHandler_C_TakeAnyDamageMulticast, Causer) == 0x000000, "Member 'B_DamageHandler_C_TakeAnyDamageMulticast::Causer' has a wrong offset!");

// Function B_DamageHandler.B_DamageHandler_C.TakePointDamageMulticast
// 0x0038 (0x0038 - 0x0000)
struct B_DamageHandler_C_TakePointDamageMulticast final
{
public:
	struct FVector                                HitLocation;                                       // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitDirection;                                      // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            Causer;                                            // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_DamageHandler_C_TakePointDamageMulticast) == 0x000008, "Wrong alignment on B_DamageHandler_C_TakePointDamageMulticast");
static_assert(sizeof(B_DamageHandler_C_TakePointDamageMulticast) == 0x000038, "Wrong size on B_DamageHandler_C_TakePointDamageMulticast");
static_assert(offsetof(B_DamageHandler_C_TakePointDamageMulticast, HitLocation) == 0x000000, "Member 'B_DamageHandler_C_TakePointDamageMulticast::HitLocation' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_TakePointDamageMulticast, HitDirection) == 0x000018, "Member 'B_DamageHandler_C_TakePointDamageMulticast::HitDirection' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_TakePointDamageMulticast, Causer) == 0x000030, "Member 'B_DamageHandler_C_TakePointDamageMulticast::Causer' has a wrong offset!");

// Function B_DamageHandler.B_DamageHandler_C.TakeDamageMulticast
// 0x0008 (0x0008 - 0x0000)
struct B_DamageHandler_C_TakeDamageMulticast final
{
public:
	class AController*                            Causer;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_DamageHandler_C_TakeDamageMulticast) == 0x000008, "Wrong alignment on B_DamageHandler_C_TakeDamageMulticast");
static_assert(sizeof(B_DamageHandler_C_TakeDamageMulticast) == 0x000008, "Wrong size on B_DamageHandler_C_TakeDamageMulticast");
static_assert(offsetof(B_DamageHandler_C_TakeDamageMulticast, Causer) == 0x000000, "Member 'B_DamageHandler_C_TakeDamageMulticast::Causer' has a wrong offset!");

// Function B_DamageHandler.B_DamageHandler_C.ExecuteUbergraph_B_DamageHandler
// 0x0190 (0x0190 - 0x0000)
struct B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ShouldHandleDamage_ShouldHandle;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42D5[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class AActor* DamagedActor, float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser)> K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& ShotFromDirection, class UDamageType* DamageType, class AActor* DamageCauser)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0018(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_DamagedActor_1;                 // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Damage_1;                       // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42D6[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UDamageType*                      K2Node_CustomEvent_DamageType_1;                   // 0x0040(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AController*                            K2Node_CustomEvent_InstigatedBy_1;                 // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_DamageCauser_1;                 // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ClassClass_ReturnValue;        // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ClassClass_ReturnValue;          // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42D7[0x6];                                     // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_DamagedActor;                   // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Damage;                         // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42D8[0x4];                                     // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            K2Node_CustomEvent_InstigatedBy;                   // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_HitLocation_1;                  // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_CustomEvent_FHitComponent;                  // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_BoneName;                       // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_ShotFromDirection;              // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UDamageType*                      K2Node_CustomEvent_DamageType;                     // 0x00C8(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_DamageCauser;                   // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AController*                            K2Node_CustomEvent_Causer_2;                       // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_HitLocation;                    // 0x00E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_HitDirection;                   // 0x00F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            K2Node_CustomEvent_Causer_1;                       // 0x0110(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AController*                            K2Node_CustomEvent_Causer;                         // 0x0118(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue_2;                   // 0x0120(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0128(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TArray<class UB_ActorEvents_C*>               CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0138(0x0010)(ReferenceParm, ContainsInstancedReference)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0148(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UB_ActorEvents_C*                       CallFunc_Array_Get_Item;                           // 0x0158(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42D9[0x4];                                     // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0168(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0179(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ShouldHandleDamage_ShouldHandle_1;        // 0x017A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42DA[0x5];                                     // 0x017B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_ProcessAnyDamage_Damage_ImplicitCast;     // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_ProcessPointDamage_Damage_ImplicitCast;   // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler) == 0x000008, "Wrong alignment on B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler");
static_assert(sizeof(B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler) == 0x000190, "Wrong size on B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler");
static_assert(offsetof(B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler, EntryPoint) == 0x000000, "Member 'B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler::EntryPoint' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler, CallFunc_ShouldHandleDamage_ShouldHandle) == 0x000004, "Member 'B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler::CallFunc_ShouldHandleDamage_ShouldHandle' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler, K2Node_CreateDelegate_OutputDelegate_1) == 0x000018, "Member 'B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler, CallFunc_GetOwner_ReturnValue) == 0x000028, "Member 'B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler, K2Node_CustomEvent_DamagedActor_1) == 0x000030, "Member 'B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler::K2Node_CustomEvent_DamagedActor_1' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler, K2Node_CustomEvent_Damage_1) == 0x000038, "Member 'B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler::K2Node_CustomEvent_Damage_1' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler, K2Node_CustomEvent_DamageType_1) == 0x000040, "Member 'B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler::K2Node_CustomEvent_DamageType_1' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler, K2Node_CustomEvent_InstigatedBy_1) == 0x000048, "Member 'B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler::K2Node_CustomEvent_InstigatedBy_1' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler, K2Node_CustomEvent_DamageCauser_1) == 0x000050, "Member 'B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler::K2Node_CustomEvent_DamageCauser_1' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler, CallFunc_GetObjectClass_ReturnValue) == 0x000058, "Member 'B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler, CallFunc_EqualEqual_ClassClass_ReturnValue) == 0x000060, "Member 'B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler::CallFunc_EqualEqual_ClassClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler, CallFunc_NotEqual_ClassClass_ReturnValue) == 0x000061, "Member 'B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler::CallFunc_NotEqual_ClassClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler, CallFunc_GetOwner_ReturnValue_1) == 0x000068, "Member 'B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler, K2Node_CustomEvent_DamagedActor) == 0x000070, "Member 'B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler::K2Node_CustomEvent_DamagedActor' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler, K2Node_CustomEvent_Damage) == 0x000078, "Member 'B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler::K2Node_CustomEvent_Damage' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler, K2Node_CustomEvent_InstigatedBy) == 0x000080, "Member 'B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler::K2Node_CustomEvent_InstigatedBy' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler, K2Node_CustomEvent_HitLocation_1) == 0x000088, "Member 'B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler::K2Node_CustomEvent_HitLocation_1' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler, K2Node_CustomEvent_FHitComponent) == 0x0000A0, "Member 'B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler::K2Node_CustomEvent_FHitComponent' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler, K2Node_CustomEvent_BoneName) == 0x0000A8, "Member 'B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler::K2Node_CustomEvent_BoneName' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler, K2Node_CustomEvent_ShotFromDirection) == 0x0000B0, "Member 'B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler::K2Node_CustomEvent_ShotFromDirection' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler, K2Node_CustomEvent_DamageType) == 0x0000C8, "Member 'B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler::K2Node_CustomEvent_DamageType' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler, K2Node_CustomEvent_DamageCauser) == 0x0000D0, "Member 'B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler::K2Node_CustomEvent_DamageCauser' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler, K2Node_CustomEvent_Causer_2) == 0x0000D8, "Member 'B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler::K2Node_CustomEvent_Causer_2' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler, K2Node_CustomEvent_HitLocation) == 0x0000E0, "Member 'B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler::K2Node_CustomEvent_HitLocation' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler, K2Node_CustomEvent_HitDirection) == 0x0000F8, "Member 'B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler::K2Node_CustomEvent_HitDirection' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler, K2Node_CustomEvent_Causer_1) == 0x000110, "Member 'B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler::K2Node_CustomEvent_Causer_1' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler, K2Node_CustomEvent_Causer) == 0x000118, "Member 'B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler::K2Node_CustomEvent_Causer' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler, CallFunc_GetOwner_ReturnValue_2) == 0x000120, "Member 'B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler::CallFunc_GetOwner_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler, CallFunc_GetDisplayName_ReturnValue) == 0x000128, "Member 'B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000138, "Member 'B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler, CallFunc_Concat_StrStr_ReturnValue) == 0x000148, "Member 'B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler, CallFunc_Array_Get_Item) == 0x000158, "Member 'B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler, CallFunc_Array_Length_ReturnValue) == 0x000160, "Member 'B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000168, "Member 'B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000178, "Member 'B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler, CallFunc_Greater_IntInt_ReturnValue) == 0x000179, "Member 'B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler, CallFunc_ShouldHandleDamage_ShouldHandle_1) == 0x00017A, "Member 'B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler::CallFunc_ShouldHandleDamage_ShouldHandle_1' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler, CallFunc_ProcessAnyDamage_Damage_ImplicitCast) == 0x000180, "Member 'B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler::CallFunc_ProcessAnyDamage_Damage_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler, CallFunc_ProcessPointDamage_Damage_ImplicitCast) == 0x000188, "Member 'B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler::CallFunc_ProcessPointDamage_Damage_ImplicitCast' has a wrong offset!");

}

