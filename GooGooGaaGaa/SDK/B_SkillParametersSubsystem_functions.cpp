#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_SkillParametersSubsystem

#include "Basic.hpp"

#include "B_SkillParametersSubsystem_classes.hpp"
#include "B_SkillParametersSubsystem_parameters.hpp"


namespace SDK
{

// Function B_SkillParametersSubsystem.B_SkillParametersSubsystem_C.SkillRulesUpdated__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UB_SkillParametersSubsystem_C::SkillRulesUpdated__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_SkillParametersSubsystem_C", "SkillRulesUpdated__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_SkillParametersSubsystem.B_SkillParametersSubsystem_C.ApplyGameModeOverrides
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           GameModeClass                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UB_SkillParametersSubsystem_C::ApplyGameModeOverrides(class UClass* GameModeClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_SkillParametersSubsystem_C", "ApplyGameModeOverrides");

	Params::B_SkillParametersSubsystem_C_ApplyGameModeOverrides Parms{};

	Parms.GameModeClass = GameModeClass;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_SkillParametersSubsystem.B_SkillParametersSubsystem_C.ApplyObjectiveModeOverrides
// (Public, BlueprintCallable, BlueprintEvent)

void UB_SkillParametersSubsystem_C::ApplyObjectiveModeOverrides()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_SkillParametersSubsystem_C", "ApplyObjectiveModeOverrides");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_SkillParametersSubsystem.B_SkillParametersSubsystem_C.ApplySkillRules
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FS_SkillRules>            SkillRules                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UClass*                           GameMode                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UB_SkillParametersSubsystem_C::ApplySkillRules(TArray<struct FS_SkillRules>& SkillRules, class UClass* GameMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_SkillParametersSubsystem_C", "ApplySkillRules");

	Params::B_SkillParametersSubsystem_C_ApplySkillRules Parms{};

	Parms.SkillRules = std::move(SkillRules);
	Parms.GameMode = GameMode;

	UObject::ProcessEvent(Func, &Parms);

	SkillRules = std::move(Parms.SkillRules);
}


// Function B_SkillParametersSubsystem.B_SkillParametersSubsystem_C.ExecuteUbergraph_B_SkillParametersSubsystem
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_SkillParametersSubsystem_C::ExecuteUbergraph_B_SkillParametersSubsystem(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_SkillParametersSubsystem_C", "ExecuteUbergraph_B_SkillParametersSubsystem");

	Params::B_SkillParametersSubsystem_C_ExecuteUbergraph_B_SkillParametersSubsystem Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_SkillParametersSubsystem.B_SkillParametersSubsystem_C.GetAllSkillClasses
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class UClass*>                   SkillClasses                                           (Parm, OutParm)

void UB_SkillParametersSubsystem_C::GetAllSkillClasses(TArray<class UClass*>* SkillClasses)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_SkillParametersSubsystem_C", "GetAllSkillClasses");

	Params::B_SkillParametersSubsystem_C_GetAllSkillClasses Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SkillClasses != nullptr)
		*SkillClasses = std::move(Parms.SkillClasses);
}


// Function B_SkillParametersSubsystem.B_SkillParametersSubsystem_C.GetDefaultSkillParameterValue
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_SkillRuleType                         SkillType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUIParameterData                 UIPameter                                              (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FUIParam                         DefaultValue                                           (Parm, OutParm, NoDestructor)

void UB_SkillParametersSubsystem_C::GetDefaultSkillParameterValue(E_SkillRuleType SkillType, const struct FUIParameterData& UIPameter, struct FUIParam* DefaultValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_SkillParametersSubsystem_C", "GetDefaultSkillParameterValue");

	Params::B_SkillParametersSubsystem_C_GetDefaultSkillParameterValue Parms{};

	Parms.SkillType = SkillType;
	Parms.UIPameter = std::move(UIPameter);

	UObject::ProcessEvent(Func, &Parms);

	if (DefaultValue != nullptr)
		*DefaultValue = std::move(Parms.DefaultValue);
}


// Function B_SkillParametersSubsystem.B_SkillParametersSubsystem_C.GetFloatValueByName
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_SkillRuleType                         SkillType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             FloatName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_SkillParametersSubsystem_C::GetFloatValueByName(E_SkillRuleType SkillType, class FName FloatName, double* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_SkillParametersSubsystem_C", "GetFloatValueByName");

	Params::B_SkillParametersSubsystem_C_GetFloatValueByName Parms{};

	Parms.SkillType = SkillType;
	Parms.FloatName = FloatName;

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function B_SkillParametersSubsystem.B_SkillParametersSubsystem_C.GetSkillCooldown
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_SkillRuleType                         SkillType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ETeamID                                 PlayerType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Cooldown                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_SkillParametersSubsystem_C::GetSkillCooldown(E_SkillRuleType SkillType, ETeamID PlayerType, double* Cooldown)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_SkillParametersSubsystem_C", "GetSkillCooldown");

	Params::B_SkillParametersSubsystem_C_GetSkillCooldown Parms{};

	Parms.SkillType = SkillType;
	Parms.PlayerType = PlayerType;

	UObject::ProcessEvent(Func, &Parms);

	if (Cooldown != nullptr)
		*Cooldown = Parms.Cooldown;
}


// Function B_SkillParametersSubsystem.B_SkillParametersSubsystem_C.GetSkillTooltip
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UB_BaseSkill_C*                   Skill                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class FText                             ToolTip                                                (Parm, OutParm)

void UB_SkillParametersSubsystem_C::GetSkillTooltip(class UB_BaseSkill_C* Skill, class FText* ToolTip)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_SkillParametersSubsystem_C", "GetSkillTooltip");

	Params::B_SkillParametersSubsystem_C_GetSkillTooltip Parms{};

	Parms.Skill = Skill;

	UObject::ProcessEvent(Func, &Parms);

	if (ToolTip != nullptr)
		*ToolTip = std::move(Parms.ToolTip);
}


// Function B_SkillParametersSubsystem.B_SkillParametersSubsystem_C.GetUIParameters
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_SkillRuleType                         SkillType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FUIParameterData>         UIParameters                                           (Parm, OutParm)

void UB_SkillParametersSubsystem_C::GetUIParameters(E_SkillRuleType SkillType, TArray<struct FUIParameterData>* UIParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_SkillParametersSubsystem_C", "GetUIParameters");

	Params::B_SkillParametersSubsystem_C_GetUIParameters Parms{};

	Parms.SkillType = SkillType;

	UObject::ProcessEvent(Func, &Parms);

	if (UIParameters != nullptr)
		*UIParameters = std::move(Parms.UIParameters);
}


// Function B_SkillParametersSubsystem.B_SkillParametersSubsystem_C.InitializeDefaultSkills
// (Public, BlueprintCallable, BlueprintEvent)

void UB_SkillParametersSubsystem_C::InitializeDefaultSkills()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_SkillParametersSubsystem_C", "InitializeDefaultSkills");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_SkillParametersSubsystem.B_SkillParametersSubsystem_C.InitializeSubsystem
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UB_SkillParametersSubsystem_C::InitializeSubsystem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_SkillParametersSubsystem_C", "InitializeSubsystem");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_SkillParametersSubsystem.B_SkillParametersSubsystem_C.IsSkillListed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UClass*                           Skill                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    IsListed                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_SkillParametersSubsystem_C::IsSkillListed(class UClass* Skill, bool* IsListed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_SkillParametersSubsystem_C", "IsSkillListed");

	Params::B_SkillParametersSubsystem_C_IsSkillListed Parms{};

	Parms.Skill = Skill;

	UObject::ProcessEvent(Func, &Parms);

	if (IsListed != nullptr)
		*IsListed = Parms.IsListed;
}


// Function B_SkillParametersSubsystem.B_SkillParametersSubsystem_C.IsSkillUsingRules
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_SkillRuleType                         SkillType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsUsingRules                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_SkillParametersSubsystem_C::IsSkillUsingRules(E_SkillRuleType SkillType, bool* IsUsingRules)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_SkillParametersSubsystem_C", "IsSkillUsingRules");

	Params::B_SkillParametersSubsystem_C_IsSkillUsingRules Parms{};

	Parms.SkillType = SkillType;

	UObject::ProcessEvent(Func, &Parms);

	if (IsUsingRules != nullptr)
		*IsUsingRules = Parms.IsUsingRules;
}


// Function B_SkillParametersSubsystem.B_SkillParametersSubsystem_C.IsUsingCustomRules
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    CustomRules                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_SkillParametersSubsystem_C::IsUsingCustomRules(bool* CustomRules)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_SkillParametersSubsystem_C", "IsUsingCustomRules");

	Params::B_SkillParametersSubsystem_C_IsUsingCustomRules Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CustomRules != nullptr)
		*CustomRules = Parms.CustomRules;
}


// Function B_SkillParametersSubsystem.B_SkillParametersSubsystem_C.SpawnProjectileSkill
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Param_Class                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ESpawnActorCollisionHandlingMethod      CollisionHandlingOverride                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Owner                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            Instigator                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   NumberOfProjectiles                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ProjectileSpread                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class AActor*>                   ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<class AActor*> UB_SkillParametersSubsystem_C::SpawnProjectileSkill(class UClass* Param_Class, const struct FTransform& SpawnTransform, ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, class AActor* Owner, class APawn* Instigator, int32 NumberOfProjectiles, double ProjectileSpread)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_SkillParametersSubsystem_C", "SpawnProjectileSkill");

	Params::B_SkillParametersSubsystem_C_SpawnProjectileSkill Parms{};

	Parms.Param_Class = Param_Class;
	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.CollisionHandlingOverride = CollisionHandlingOverride;
	Parms.Owner = Owner;
	Parms.Instigator = Instigator;
	Parms.NumberOfProjectiles = NumberOfProjectiles;
	Parms.ProjectileSpread = ProjectileSpread;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

