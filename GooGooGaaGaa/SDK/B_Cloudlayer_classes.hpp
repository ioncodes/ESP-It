#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_Cloudlayer

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_Cloudlayer.B_Cloudlayer_C
// 0x0138 (0x03D0 - 0x0298)
class AB_Cloudlayer_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        FarParent;                                         // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CloseParent;                                       // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class UStaticMesh*>                    CloseClouds;                                       // 0x02B8(0x0010)(Edit, BlueprintVisible)
	int32                                         CloseNumberOfClouds;                               // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RandomSeed;                                        // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRandomStream                          Stream;                                            // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor)
	double                                        CloseDistance;                                     // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CloseDistanceVariance;                             // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CloseHeightOffset;                                 // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CloseHeightVariance;                               // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CloseScale;                                        // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CloseScaleVariance;                                // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SkyColor;                                          // 0x0308(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           GroundColor;                                       // 0x0318(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SunColor;                                          // 0x0328(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LightDirection;                                    // 0x0338(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CloseRotationSpeed;                                // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UStaticMesh*>                    FarClouds;                                         // 0x0358(0x0010)(Edit, BlueprintVisible)
	struct FVector                                WindStrength;                                      // 0x0368(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FarNumberOfClouds;                                 // 0x0380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35EB[0x4];                                     // 0x0384(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FarDistance;                                       // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FarDistanceVariance;                               // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FarHeightOffset;                                   // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FarHeightVariance;                                 // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FarScale;                                          // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FarScaleVariance;                                  // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FarRotationSpeed;                                  // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ScatterPower;                                      // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ScatterStrength;                                   // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void SpawnFarClouds();
	void SpawnCloseClouds();
	void SetMaterialParameters(class UStaticMeshComponent* MeshComponent);
	void ReceiveTick(float DeltaSeconds);
	void ExecuteUbergraph_B_Cloudlayer(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_Cloudlayer_C">();
	}
	static class AB_Cloudlayer_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_Cloudlayer_C>();
	}
};
static_assert(alignof(AB_Cloudlayer_C) == 0x000008, "Wrong alignment on AB_Cloudlayer_C");
static_assert(sizeof(AB_Cloudlayer_C) == 0x0003D0, "Wrong size on AB_Cloudlayer_C");
static_assert(offsetof(AB_Cloudlayer_C, UberGraphFrame) == 0x000298, "Member 'AB_Cloudlayer_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AB_Cloudlayer_C, FarParent) == 0x0002A0, "Member 'AB_Cloudlayer_C::FarParent' has a wrong offset!");
static_assert(offsetof(AB_Cloudlayer_C, CloseParent) == 0x0002A8, "Member 'AB_Cloudlayer_C::CloseParent' has a wrong offset!");
static_assert(offsetof(AB_Cloudlayer_C, DefaultSceneRoot) == 0x0002B0, "Member 'AB_Cloudlayer_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AB_Cloudlayer_C, CloseClouds) == 0x0002B8, "Member 'AB_Cloudlayer_C::CloseClouds' has a wrong offset!");
static_assert(offsetof(AB_Cloudlayer_C, CloseNumberOfClouds) == 0x0002C8, "Member 'AB_Cloudlayer_C::CloseNumberOfClouds' has a wrong offset!");
static_assert(offsetof(AB_Cloudlayer_C, RandomSeed) == 0x0002CC, "Member 'AB_Cloudlayer_C::RandomSeed' has a wrong offset!");
static_assert(offsetof(AB_Cloudlayer_C, Stream) == 0x0002D0, "Member 'AB_Cloudlayer_C::Stream' has a wrong offset!");
static_assert(offsetof(AB_Cloudlayer_C, CloseDistance) == 0x0002D8, "Member 'AB_Cloudlayer_C::CloseDistance' has a wrong offset!");
static_assert(offsetof(AB_Cloudlayer_C, CloseDistanceVariance) == 0x0002E0, "Member 'AB_Cloudlayer_C::CloseDistanceVariance' has a wrong offset!");
static_assert(offsetof(AB_Cloudlayer_C, CloseHeightOffset) == 0x0002E8, "Member 'AB_Cloudlayer_C::CloseHeightOffset' has a wrong offset!");
static_assert(offsetof(AB_Cloudlayer_C, CloseHeightVariance) == 0x0002F0, "Member 'AB_Cloudlayer_C::CloseHeightVariance' has a wrong offset!");
static_assert(offsetof(AB_Cloudlayer_C, CloseScale) == 0x0002F8, "Member 'AB_Cloudlayer_C::CloseScale' has a wrong offset!");
static_assert(offsetof(AB_Cloudlayer_C, CloseScaleVariance) == 0x000300, "Member 'AB_Cloudlayer_C::CloseScaleVariance' has a wrong offset!");
static_assert(offsetof(AB_Cloudlayer_C, SkyColor) == 0x000308, "Member 'AB_Cloudlayer_C::SkyColor' has a wrong offset!");
static_assert(offsetof(AB_Cloudlayer_C, GroundColor) == 0x000318, "Member 'AB_Cloudlayer_C::GroundColor' has a wrong offset!");
static_assert(offsetof(AB_Cloudlayer_C, SunColor) == 0x000328, "Member 'AB_Cloudlayer_C::SunColor' has a wrong offset!");
static_assert(offsetof(AB_Cloudlayer_C, LightDirection) == 0x000338, "Member 'AB_Cloudlayer_C::LightDirection' has a wrong offset!");
static_assert(offsetof(AB_Cloudlayer_C, CloseRotationSpeed) == 0x000350, "Member 'AB_Cloudlayer_C::CloseRotationSpeed' has a wrong offset!");
static_assert(offsetof(AB_Cloudlayer_C, FarClouds) == 0x000358, "Member 'AB_Cloudlayer_C::FarClouds' has a wrong offset!");
static_assert(offsetof(AB_Cloudlayer_C, WindStrength) == 0x000368, "Member 'AB_Cloudlayer_C::WindStrength' has a wrong offset!");
static_assert(offsetof(AB_Cloudlayer_C, FarNumberOfClouds) == 0x000380, "Member 'AB_Cloudlayer_C::FarNumberOfClouds' has a wrong offset!");
static_assert(offsetof(AB_Cloudlayer_C, FarDistance) == 0x000388, "Member 'AB_Cloudlayer_C::FarDistance' has a wrong offset!");
static_assert(offsetof(AB_Cloudlayer_C, FarDistanceVariance) == 0x000390, "Member 'AB_Cloudlayer_C::FarDistanceVariance' has a wrong offset!");
static_assert(offsetof(AB_Cloudlayer_C, FarHeightOffset) == 0x000398, "Member 'AB_Cloudlayer_C::FarHeightOffset' has a wrong offset!");
static_assert(offsetof(AB_Cloudlayer_C, FarHeightVariance) == 0x0003A0, "Member 'AB_Cloudlayer_C::FarHeightVariance' has a wrong offset!");
static_assert(offsetof(AB_Cloudlayer_C, FarScale) == 0x0003A8, "Member 'AB_Cloudlayer_C::FarScale' has a wrong offset!");
static_assert(offsetof(AB_Cloudlayer_C, FarScaleVariance) == 0x0003B0, "Member 'AB_Cloudlayer_C::FarScaleVariance' has a wrong offset!");
static_assert(offsetof(AB_Cloudlayer_C, FarRotationSpeed) == 0x0003B8, "Member 'AB_Cloudlayer_C::FarRotationSpeed' has a wrong offset!");
static_assert(offsetof(AB_Cloudlayer_C, ScatterPower) == 0x0003C0, "Member 'AB_Cloudlayer_C::ScatterPower' has a wrong offset!");
static_assert(offsetof(AB_Cloudlayer_C, ScatterStrength) == 0x0003C8, "Member 'AB_Cloudlayer_C::ScatterStrength' has a wrong offset!");

}

