#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MasterServerPlugin

#include "Basic.hpp"

#include "MasterServerPlugin_structs.hpp"
#include "OnlineSubsystemUtils_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function MasterServerPlugin.BaseUserBehaviorTrackingManager.BPTick
// 0x0004 (0x0004 - 0x0000)
struct BaseUserBehaviorTrackingManager_BPTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseUserBehaviorTrackingManager_BPTick) == 0x000004, "Wrong alignment on BaseUserBehaviorTrackingManager_BPTick");
static_assert(sizeof(BaseUserBehaviorTrackingManager_BPTick) == 0x000004, "Wrong size on BaseUserBehaviorTrackingManager_BPTick");
static_assert(offsetof(BaseUserBehaviorTrackingManager_BPTick, DeltaTime) == 0x000000, "Member 'BaseUserBehaviorTrackingManager_BPTick::DeltaTime' has a wrong offset!");

// Function MasterServerPlugin.GrantItemsCallbackProxy.GrantItems
// 0x0038 (0x0038 - 0x0000)
struct GrantItemsCallbackProxy_GrantItems final
{
public:
	class UObject*                                Param_WorldContextObject;                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AccountId;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E01[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Param_ItemDefIds;                                  // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bNotify;                                           // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDrop;                                           // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsExtraItem;                                      // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E02[0x5];                                     // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           Param_PlayerState;                                 // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGrantItemsCallbackProxy*               ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GrantItemsCallbackProxy_GrantItems) == 0x000008, "Wrong alignment on GrantItemsCallbackProxy_GrantItems");
static_assert(sizeof(GrantItemsCallbackProxy_GrantItems) == 0x000038, "Wrong size on GrantItemsCallbackProxy_GrantItems");
static_assert(offsetof(GrantItemsCallbackProxy_GrantItems, Param_WorldContextObject) == 0x000000, "Member 'GrantItemsCallbackProxy_GrantItems::Param_WorldContextObject' has a wrong offset!");
static_assert(offsetof(GrantItemsCallbackProxy_GrantItems, AccountId) == 0x000008, "Member 'GrantItemsCallbackProxy_GrantItems::AccountId' has a wrong offset!");
static_assert(offsetof(GrantItemsCallbackProxy_GrantItems, Param_ItemDefIds) == 0x000010, "Member 'GrantItemsCallbackProxy_GrantItems::Param_ItemDefIds' has a wrong offset!");
static_assert(offsetof(GrantItemsCallbackProxy_GrantItems, bNotify) == 0x000020, "Member 'GrantItemsCallbackProxy_GrantItems::bNotify' has a wrong offset!");
static_assert(offsetof(GrantItemsCallbackProxy_GrantItems, bIsDrop) == 0x000021, "Member 'GrantItemsCallbackProxy_GrantItems::bIsDrop' has a wrong offset!");
static_assert(offsetof(GrantItemsCallbackProxy_GrantItems, bIsExtraItem) == 0x000022, "Member 'GrantItemsCallbackProxy_GrantItems::bIsExtraItem' has a wrong offset!");
static_assert(offsetof(GrantItemsCallbackProxy_GrantItems, Param_PlayerState) == 0x000028, "Member 'GrantItemsCallbackProxy_GrantItems::Param_PlayerState' has a wrong offset!");
static_assert(offsetof(GrantItemsCallbackProxy_GrantItems, ReturnValue) == 0x000030, "Member 'GrantItemsCallbackProxy_GrantItems::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.GrantItemsCallbackProxy.GrantItemsResponse
// 0x0008 (0x0008 - 0x0000)
struct GrantItemsCallbackProxy_GrantItemsResponse final
{
public:
	class UVaRestRequestJSON*                     Request;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GrantItemsCallbackProxy_GrantItemsResponse) == 0x000008, "Wrong alignment on GrantItemsCallbackProxy_GrantItemsResponse");
static_assert(sizeof(GrantItemsCallbackProxy_GrantItemsResponse) == 0x000008, "Wrong size on GrantItemsCallbackProxy_GrantItemsResponse");
static_assert(offsetof(GrantItemsCallbackProxy_GrantItemsResponse, Request) == 0x000000, "Member 'GrantItemsCallbackProxy_GrantItemsResponse::Request' has a wrong offset!");

// Function MasterServerPlugin.InstanceManagerConnSubsystem.Connect
// 0x0018 (0x0018 - 0x0000)
struct InstanceManagerConnSubsystem_Connect final
{
public:
	int32                                         InA;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InB;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InC;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InD;                                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E05[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InstanceManagerConnSubsystem_Connect) == 0x000004, "Wrong alignment on InstanceManagerConnSubsystem_Connect");
static_assert(sizeof(InstanceManagerConnSubsystem_Connect) == 0x000018, "Wrong size on InstanceManagerConnSubsystem_Connect");
static_assert(offsetof(InstanceManagerConnSubsystem_Connect, InA) == 0x000000, "Member 'InstanceManagerConnSubsystem_Connect::InA' has a wrong offset!");
static_assert(offsetof(InstanceManagerConnSubsystem_Connect, InB) == 0x000004, "Member 'InstanceManagerConnSubsystem_Connect::InB' has a wrong offset!");
static_assert(offsetof(InstanceManagerConnSubsystem_Connect, InC) == 0x000008, "Member 'InstanceManagerConnSubsystem_Connect::InC' has a wrong offset!");
static_assert(offsetof(InstanceManagerConnSubsystem_Connect, InD) == 0x00000C, "Member 'InstanceManagerConnSubsystem_Connect::InD' has a wrong offset!");
static_assert(offsetof(InstanceManagerConnSubsystem_Connect, Port) == 0x000010, "Member 'InstanceManagerConnSubsystem_Connect::Port' has a wrong offset!");
static_assert(offsetof(InstanceManagerConnSubsystem_Connect, ReturnValue) == 0x000014, "Member 'InstanceManagerConnSubsystem_Connect::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.InstanceManagerConnSubsystem.ConnectHost
// 0x0018 (0x0018 - 0x0000)
struct InstanceManagerConnSubsystem_ConnectHost final
{
public:
	class FString                                 HostName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E06[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InstanceManagerConnSubsystem_ConnectHost) == 0x000008, "Wrong alignment on InstanceManagerConnSubsystem_ConnectHost");
static_assert(sizeof(InstanceManagerConnSubsystem_ConnectHost) == 0x000018, "Wrong size on InstanceManagerConnSubsystem_ConnectHost");
static_assert(offsetof(InstanceManagerConnSubsystem_ConnectHost, HostName) == 0x000000, "Member 'InstanceManagerConnSubsystem_ConnectHost::HostName' has a wrong offset!");
static_assert(offsetof(InstanceManagerConnSubsystem_ConnectHost, Port) == 0x000010, "Member 'InstanceManagerConnSubsystem_ConnectHost::Port' has a wrong offset!");
static_assert(offsetof(InstanceManagerConnSubsystem_ConnectHost, ReturnValue) == 0x000014, "Member 'InstanceManagerConnSubsystem_ConnectHost::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.InstanceManagerConnSubsystem.Disconnect
// 0x0001 (0x0001 - 0x0000)
struct InstanceManagerConnSubsystem_Disconnect final
{
public:
	bool                                          AutomaticReconnectWhenKeepAlive;                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InstanceManagerConnSubsystem_Disconnect) == 0x000001, "Wrong alignment on InstanceManagerConnSubsystem_Disconnect");
static_assert(sizeof(InstanceManagerConnSubsystem_Disconnect) == 0x000001, "Wrong size on InstanceManagerConnSubsystem_Disconnect");
static_assert(offsetof(InstanceManagerConnSubsystem_Disconnect, AutomaticReconnectWhenKeepAlive) == 0x000000, "Member 'InstanceManagerConnSubsystem_Disconnect::AutomaticReconnectWhenKeepAlive' has a wrong offset!");

// Function MasterServerPlugin.InstanceManagerConnSubsystem.SendEmptyPacket
// 0x0002 (0x0002 - 0x0000)
struct InstanceManagerConnSubsystem_SendEmptyPacket final
{
public:
	EInstanceMgrPacketType                        PacketType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InstanceManagerConnSubsystem_SendEmptyPacket) == 0x000001, "Wrong alignment on InstanceManagerConnSubsystem_SendEmptyPacket");
static_assert(sizeof(InstanceManagerConnSubsystem_SendEmptyPacket) == 0x000002, "Wrong size on InstanceManagerConnSubsystem_SendEmptyPacket");
static_assert(offsetof(InstanceManagerConnSubsystem_SendEmptyPacket, PacketType) == 0x000000, "Member 'InstanceManagerConnSubsystem_SendEmptyPacket::PacketType' has a wrong offset!");
static_assert(offsetof(InstanceManagerConnSubsystem_SendEmptyPacket, ReturnValue) == 0x000001, "Member 'InstanceManagerConnSubsystem_SendEmptyPacket::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.InstanceManagerConnSubsystem.SendPacket
// 0x0020 (0x0020 - 0x0000)
struct InstanceManagerConnSubsystem_SendPacket final
{
public:
	EInstanceMgrPacketType                        PacketType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E07[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Payload;                                           // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E08[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InstanceManagerConnSubsystem_SendPacket) == 0x000008, "Wrong alignment on InstanceManagerConnSubsystem_SendPacket");
static_assert(sizeof(InstanceManagerConnSubsystem_SendPacket) == 0x000020, "Wrong size on InstanceManagerConnSubsystem_SendPacket");
static_assert(offsetof(InstanceManagerConnSubsystem_SendPacket, PacketType) == 0x000000, "Member 'InstanceManagerConnSubsystem_SendPacket::PacketType' has a wrong offset!");
static_assert(offsetof(InstanceManagerConnSubsystem_SendPacket, Payload) == 0x000008, "Member 'InstanceManagerConnSubsystem_SendPacket::Payload' has a wrong offset!");
static_assert(offsetof(InstanceManagerConnSubsystem_SendPacket, ReturnValue) == 0x000018, "Member 'InstanceManagerConnSubsystem_SendPacket::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.InstanceManagerConnSubsystem.IsConnected
// 0x0001 (0x0001 - 0x0000)
struct InstanceManagerConnSubsystem_IsConnected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InstanceManagerConnSubsystem_IsConnected) == 0x000001, "Wrong alignment on InstanceManagerConnSubsystem_IsConnected");
static_assert(sizeof(InstanceManagerConnSubsystem_IsConnected) == 0x000001, "Wrong size on InstanceManagerConnSubsystem_IsConnected");
static_assert(offsetof(InstanceManagerConnSubsystem_IsConnected, ReturnValue) == 0x000000, "Member 'InstanceManagerConnSubsystem_IsConnected::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.InstanceManagerConnSubsystem.IsTearingDown
// 0x0001 (0x0001 - 0x0000)
struct InstanceManagerConnSubsystem_IsTearingDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InstanceManagerConnSubsystem_IsTearingDown) == 0x000001, "Wrong alignment on InstanceManagerConnSubsystem_IsTearingDown");
static_assert(sizeof(InstanceManagerConnSubsystem_IsTearingDown) == 0x000001, "Wrong size on InstanceManagerConnSubsystem_IsTearingDown");
static_assert(offsetof(InstanceManagerConnSubsystem_IsTearingDown, ReturnValue) == 0x000000, "Member 'InstanceManagerConnSubsystem_IsTearingDown::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.InstanceManagerConnSubsystem.SendData
// 0x0018 (0x0018 - 0x0000)
struct InstanceManagerConnSubsystem_SendData final
{
public:
	TArray<uint8>                                 Data;                                              // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E09[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InstanceManagerConnSubsystem_SendData) == 0x000008, "Wrong alignment on InstanceManagerConnSubsystem_SendData");
static_assert(sizeof(InstanceManagerConnSubsystem_SendData) == 0x000018, "Wrong size on InstanceManagerConnSubsystem_SendData");
static_assert(offsetof(InstanceManagerConnSubsystem_SendData, Data) == 0x000000, "Member 'InstanceManagerConnSubsystem_SendData::Data' has a wrong offset!");
static_assert(offsetof(InstanceManagerConnSubsystem_SendData, ReturnValue) == 0x000010, "Member 'InstanceManagerConnSubsystem_SendData::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.InventorySubsystem.AddAddedItem
// 0x0028 (0x0028 - 0x0000)
struct InventorySubsystem_AddAddedItem final
{
public:
	EItemChangeReason                             Reason;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E11[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlueprintOnlineItem                   Item;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Payload;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventorySubsystem_AddAddedItem) == 0x000008, "Wrong alignment on InventorySubsystem_AddAddedItem");
static_assert(sizeof(InventorySubsystem_AddAddedItem) == 0x000028, "Wrong size on InventorySubsystem_AddAddedItem");
static_assert(offsetof(InventorySubsystem_AddAddedItem, Reason) == 0x000000, "Member 'InventorySubsystem_AddAddedItem::Reason' has a wrong offset!");
static_assert(offsetof(InventorySubsystem_AddAddedItem, Item) == 0x000008, "Member 'InventorySubsystem_AddAddedItem::Item' has a wrong offset!");
static_assert(offsetof(InventorySubsystem_AddAddedItem, Payload) == 0x000018, "Member 'InventorySubsystem_AddAddedItem::Payload' has a wrong offset!");

// Function MasterServerPlugin.InventorySubsystem.GetItemProperty
// 0x0020 (0x0020 - 0x0000)
struct InventorySubsystem_GetItemProperty final
{
public:
	int32                                         DefinitionId;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E12[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventorySubsystem_GetItemProperty) == 0x000008, "Wrong alignment on InventorySubsystem_GetItemProperty");
static_assert(sizeof(InventorySubsystem_GetItemProperty) == 0x000020, "Wrong size on InventorySubsystem_GetItemProperty");
static_assert(offsetof(InventorySubsystem_GetItemProperty, DefinitionId) == 0x000000, "Member 'InventorySubsystem_GetItemProperty::DefinitionId' has a wrong offset!");
static_assert(offsetof(InventorySubsystem_GetItemProperty, PropertyName) == 0x000004, "Member 'InventorySubsystem_GetItemProperty::PropertyName' has a wrong offset!");
static_assert(offsetof(InventorySubsystem_GetItemProperty, ReturnValue) == 0x000010, "Member 'InventorySubsystem_GetItemProperty::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.InventorySubsystem.GrantItems
// 0x0030 (0x0030 - 0x0000)
struct InventorySubsystem_GrantItems final
{
public:
	int32                                         TargetAccountId;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E13[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ItemDefIds;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 StackSizes;                                        // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsCauldronDrop;                                   // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E14[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventorySubsystem_GrantItems) == 0x000008, "Wrong alignment on InventorySubsystem_GrantItems");
static_assert(sizeof(InventorySubsystem_GrantItems) == 0x000030, "Wrong size on InventorySubsystem_GrantItems");
static_assert(offsetof(InventorySubsystem_GrantItems, TargetAccountId) == 0x000000, "Member 'InventorySubsystem_GrantItems::TargetAccountId' has a wrong offset!");
static_assert(offsetof(InventorySubsystem_GrantItems, ItemDefIds) == 0x000008, "Member 'InventorySubsystem_GrantItems::ItemDefIds' has a wrong offset!");
static_assert(offsetof(InventorySubsystem_GrantItems, StackSizes) == 0x000018, "Member 'InventorySubsystem_GrantItems::StackSizes' has a wrong offset!");
static_assert(offsetof(InventorySubsystem_GrantItems, bIsCauldronDrop) == 0x000028, "Member 'InventorySubsystem_GrantItems::bIsCauldronDrop' has a wrong offset!");

// Function MasterServerPlugin.InventorySubsystem.LoadItemDefinitions
// 0x0001 (0x0001 - 0x0000)
struct InventorySubsystem_LoadItemDefinitions final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventorySubsystem_LoadItemDefinitions) == 0x000001, "Wrong alignment on InventorySubsystem_LoadItemDefinitions");
static_assert(sizeof(InventorySubsystem_LoadItemDefinitions) == 0x000001, "Wrong size on InventorySubsystem_LoadItemDefinitions");
static_assert(offsetof(InventorySubsystem_LoadItemDefinitions, ReturnValue) == 0x000000, "Member 'InventorySubsystem_LoadItemDefinitions::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.InventorySubsystem.LoadItemDefinitionsResponse
// 0x0008 (0x0008 - 0x0000)
struct InventorySubsystem_LoadItemDefinitionsResponse final
{
public:
	class UVaRestRequestJSON*                     Request;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventorySubsystem_LoadItemDefinitionsResponse) == 0x000008, "Wrong alignment on InventorySubsystem_LoadItemDefinitionsResponse");
static_assert(sizeof(InventorySubsystem_LoadItemDefinitionsResponse) == 0x000008, "Wrong size on InventorySubsystem_LoadItemDefinitionsResponse");
static_assert(offsetof(InventorySubsystem_LoadItemDefinitionsResponse, Request) == 0x000000, "Member 'InventorySubsystem_LoadItemDefinitionsResponse::Request' has a wrong offset!");

// Function MasterServerPlugin.InventorySubsystem.PopAddedItemsByReason
// 0x0018 (0x0018 - 0x0000)
struct InventorySubsystem_PopAddedItemsByReason final
{
public:
	EItemChangeReason                             Reason;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E15[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBlueprintOnlineItem>           ItemsResult;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventorySubsystem_PopAddedItemsByReason) == 0x000008, "Wrong alignment on InventorySubsystem_PopAddedItemsByReason");
static_assert(sizeof(InventorySubsystem_PopAddedItemsByReason) == 0x000018, "Wrong size on InventorySubsystem_PopAddedItemsByReason");
static_assert(offsetof(InventorySubsystem_PopAddedItemsByReason, Reason) == 0x000000, "Member 'InventorySubsystem_PopAddedItemsByReason::Reason' has a wrong offset!");
static_assert(offsetof(InventorySubsystem_PopAddedItemsByReason, ItemsResult) == 0x000008, "Member 'InventorySubsystem_PopAddedItemsByReason::ItemsResult' has a wrong offset!");

// Function MasterServerPlugin.InventorySubsystem.PopAddedItemsByReasons
// 0x0020 (0x0020 - 0x0000)
struct InventorySubsystem_PopAddedItemsByReasons final
{
public:
	TArray<EItemChangeReason>                     Reasons;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBlueprintOnlineItem>           ItemsResult;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventorySubsystem_PopAddedItemsByReasons) == 0x000008, "Wrong alignment on InventorySubsystem_PopAddedItemsByReasons");
static_assert(sizeof(InventorySubsystem_PopAddedItemsByReasons) == 0x000020, "Wrong size on InventorySubsystem_PopAddedItemsByReasons");
static_assert(offsetof(InventorySubsystem_PopAddedItemsByReasons, Reasons) == 0x000000, "Member 'InventorySubsystem_PopAddedItemsByReasons::Reasons' has a wrong offset!");
static_assert(offsetof(InventorySubsystem_PopAddedItemsByReasons, ItemsResult) == 0x000010, "Member 'InventorySubsystem_PopAddedItemsByReasons::ItemsResult' has a wrong offset!");

// Function MasterServerPlugin.InventorySubsystem.PopAllAddedItems
// 0x0010 (0x0010 - 0x0000)
struct InventorySubsystem_PopAllAddedItems final
{
public:
	TArray<struct FBlueprintOnlineItem>           ItemsResult;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventorySubsystem_PopAllAddedItems) == 0x000008, "Wrong alignment on InventorySubsystem_PopAllAddedItems");
static_assert(sizeof(InventorySubsystem_PopAllAddedItems) == 0x000010, "Wrong size on InventorySubsystem_PopAllAddedItems");
static_assert(offsetof(InventorySubsystem_PopAllAddedItems, ItemsResult) == 0x000000, "Member 'InventorySubsystem_PopAllAddedItems::ItemsResult' has a wrong offset!");

// Function MasterServerPlugin.MasterServerLoginCallbackProxy.MasterServerLogin
// 0x0038 (0x0038 - 0x0000)
struct MasterServerLoginCallbackProxy_MasterServerLogin final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMasterServerManager*                   MasterServerManager;                               // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserName;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMasterServerLoginCallbackProxy*        ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterServerLoginCallbackProxy_MasterServerLogin) == 0x000008, "Wrong alignment on MasterServerLoginCallbackProxy_MasterServerLogin");
static_assert(sizeof(MasterServerLoginCallbackProxy_MasterServerLogin) == 0x000038, "Wrong size on MasterServerLoginCallbackProxy_MasterServerLogin");
static_assert(offsetof(MasterServerLoginCallbackProxy_MasterServerLogin, WorldContextObject) == 0x000000, "Member 'MasterServerLoginCallbackProxy_MasterServerLogin::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MasterServerLoginCallbackProxy_MasterServerLogin, MasterServerManager) == 0x000008, "Member 'MasterServerLoginCallbackProxy_MasterServerLogin::MasterServerManager' has a wrong offset!");
static_assert(offsetof(MasterServerLoginCallbackProxy_MasterServerLogin, UserName) == 0x000010, "Member 'MasterServerLoginCallbackProxy_MasterServerLogin::UserName' has a wrong offset!");
static_assert(offsetof(MasterServerLoginCallbackProxy_MasterServerLogin, Password) == 0x000020, "Member 'MasterServerLoginCallbackProxy_MasterServerLogin::Password' has a wrong offset!");
static_assert(offsetof(MasterServerLoginCallbackProxy_MasterServerLogin, ReturnValue) == 0x000030, "Member 'MasterServerLoginCallbackProxy_MasterServerLogin::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.MasterServerLoginCallbackProxy.MasterServerRegisterAndLogin
// 0x0038 (0x0038 - 0x0000)
struct MasterServerLoginCallbackProxy_MasterServerRegisterAndLogin final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMasterServerManager*                   MasterServerManager;                               // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserName;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMasterServerLoginCallbackProxy*        ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterServerLoginCallbackProxy_MasterServerRegisterAndLogin) == 0x000008, "Wrong alignment on MasterServerLoginCallbackProxy_MasterServerRegisterAndLogin");
static_assert(sizeof(MasterServerLoginCallbackProxy_MasterServerRegisterAndLogin) == 0x000038, "Wrong size on MasterServerLoginCallbackProxy_MasterServerRegisterAndLogin");
static_assert(offsetof(MasterServerLoginCallbackProxy_MasterServerRegisterAndLogin, WorldContextObject) == 0x000000, "Member 'MasterServerLoginCallbackProxy_MasterServerRegisterAndLogin::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MasterServerLoginCallbackProxy_MasterServerRegisterAndLogin, MasterServerManager) == 0x000008, "Member 'MasterServerLoginCallbackProxy_MasterServerRegisterAndLogin::MasterServerManager' has a wrong offset!");
static_assert(offsetof(MasterServerLoginCallbackProxy_MasterServerRegisterAndLogin, UserName) == 0x000010, "Member 'MasterServerLoginCallbackProxy_MasterServerRegisterAndLogin::UserName' has a wrong offset!");
static_assert(offsetof(MasterServerLoginCallbackProxy_MasterServerRegisterAndLogin, Password) == 0x000020, "Member 'MasterServerLoginCallbackProxy_MasterServerRegisterAndLogin::Password' has a wrong offset!");
static_assert(offsetof(MasterServerLoginCallbackProxy_MasterServerRegisterAndLogin, ReturnValue) == 0x000030, "Member 'MasterServerLoginCallbackProxy_MasterServerRegisterAndLogin::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.MasterServerPingCallbackProxy.MasterServerPing
// 0x0018 (0x0018 - 0x0000)
struct MasterServerPingCallbackProxy_MasterServerPing final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMasterServerManager*                   MasterServerManager;                               // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMasterServerPingCallbackProxy*         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterServerPingCallbackProxy_MasterServerPing) == 0x000008, "Wrong alignment on MasterServerPingCallbackProxy_MasterServerPing");
static_assert(sizeof(MasterServerPingCallbackProxy_MasterServerPing) == 0x000018, "Wrong size on MasterServerPingCallbackProxy_MasterServerPing");
static_assert(offsetof(MasterServerPingCallbackProxy_MasterServerPing, WorldContextObject) == 0x000000, "Member 'MasterServerPingCallbackProxy_MasterServerPing::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MasterServerPingCallbackProxy_MasterServerPing, MasterServerManager) == 0x000008, "Member 'MasterServerPingCallbackProxy_MasterServerPing::MasterServerManager' has a wrong offset!");
static_assert(offsetof(MasterServerPingCallbackProxy_MasterServerPing, ReturnValue) == 0x000010, "Member 'MasterServerPingCallbackProxy_MasterServerPing::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.MasterServerMatchFillAPotCallbackProxy.MatchFillAPot
// 0x0020 (0x0020 - 0x0000)
struct MasterServerMatchFillAPotCallbackProxy_MatchFillAPot final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMasterServerManager*                   MasterServerManager;                               // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WantedRegion;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E19[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMasterServerMatchFillAPotCallbackProxy* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterServerMatchFillAPotCallbackProxy_MatchFillAPot) == 0x000008, "Wrong alignment on MasterServerMatchFillAPotCallbackProxy_MatchFillAPot");
static_assert(sizeof(MasterServerMatchFillAPotCallbackProxy_MatchFillAPot) == 0x000020, "Wrong size on MasterServerMatchFillAPotCallbackProxy_MatchFillAPot");
static_assert(offsetof(MasterServerMatchFillAPotCallbackProxy_MatchFillAPot, WorldContextObject) == 0x000000, "Member 'MasterServerMatchFillAPotCallbackProxy_MatchFillAPot::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MasterServerMatchFillAPotCallbackProxy_MatchFillAPot, MasterServerManager) == 0x000008, "Member 'MasterServerMatchFillAPotCallbackProxy_MatchFillAPot::MasterServerManager' has a wrong offset!");
static_assert(offsetof(MasterServerMatchFillAPotCallbackProxy_MatchFillAPot, WantedRegion) == 0x000010, "Member 'MasterServerMatchFillAPotCallbackProxy_MatchFillAPot::WantedRegion' has a wrong offset!");
static_assert(offsetof(MasterServerMatchFillAPotCallbackProxy_MatchFillAPot, ReturnValue) == 0x000018, "Member 'MasterServerMatchFillAPotCallbackProxy_MatchFillAPot::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.MasterServerMatchFillAPotCallbackProxy.MatchFillAPotJoinFriend
// 0x0018 (0x0018 - 0x0000)
struct MasterServerMatchFillAPotCallbackProxy_MatchFillAPotJoinFriend final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMasterServerManager*                   MasterServerManager;                               // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMasterServerMatchFillAPotCallbackProxy* ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterServerMatchFillAPotCallbackProxy_MatchFillAPotJoinFriend) == 0x000008, "Wrong alignment on MasterServerMatchFillAPotCallbackProxy_MatchFillAPotJoinFriend");
static_assert(sizeof(MasterServerMatchFillAPotCallbackProxy_MatchFillAPotJoinFriend) == 0x000018, "Wrong size on MasterServerMatchFillAPotCallbackProxy_MatchFillAPotJoinFriend");
static_assert(offsetof(MasterServerMatchFillAPotCallbackProxy_MatchFillAPotJoinFriend, WorldContextObject) == 0x000000, "Member 'MasterServerMatchFillAPotCallbackProxy_MatchFillAPotJoinFriend::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MasterServerMatchFillAPotCallbackProxy_MatchFillAPotJoinFriend, MasterServerManager) == 0x000008, "Member 'MasterServerMatchFillAPotCallbackProxy_MatchFillAPotJoinFriend::MasterServerManager' has a wrong offset!");
static_assert(offsetof(MasterServerMatchFillAPotCallbackProxy_MatchFillAPotJoinFriend, ReturnValue) == 0x000010, "Member 'MasterServerMatchFillAPotCallbackProxy_MatchFillAPotJoinFriend::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.MasterServerMatchFillAPotCallbackProxy.MatchFillAPotWithFriend
// 0x0020 (0x0020 - 0x0000)
struct MasterServerMatchFillAPotCallbackProxy_MatchFillAPotWithFriend final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMasterServerManager*                   MasterServerManager;                               // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WantedRegion;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FriendAccountId;                                   // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMasterServerMatchFillAPotCallbackProxy* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterServerMatchFillAPotCallbackProxy_MatchFillAPotWithFriend) == 0x000008, "Wrong alignment on MasterServerMatchFillAPotCallbackProxy_MatchFillAPotWithFriend");
static_assert(sizeof(MasterServerMatchFillAPotCallbackProxy_MatchFillAPotWithFriend) == 0x000020, "Wrong size on MasterServerMatchFillAPotCallbackProxy_MatchFillAPotWithFriend");
static_assert(offsetof(MasterServerMatchFillAPotCallbackProxy_MatchFillAPotWithFriend, WorldContextObject) == 0x000000, "Member 'MasterServerMatchFillAPotCallbackProxy_MatchFillAPotWithFriend::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MasterServerMatchFillAPotCallbackProxy_MatchFillAPotWithFriend, MasterServerManager) == 0x000008, "Member 'MasterServerMatchFillAPotCallbackProxy_MatchFillAPotWithFriend::MasterServerManager' has a wrong offset!");
static_assert(offsetof(MasterServerMatchFillAPotCallbackProxy_MatchFillAPotWithFriend, WantedRegion) == 0x000010, "Member 'MasterServerMatchFillAPotCallbackProxy_MatchFillAPotWithFriend::WantedRegion' has a wrong offset!");
static_assert(offsetof(MasterServerMatchFillAPotCallbackProxy_MatchFillAPotWithFriend, FriendAccountId) == 0x000014, "Member 'MasterServerMatchFillAPotCallbackProxy_MatchFillAPotWithFriend::FriendAccountId' has a wrong offset!");
static_assert(offsetof(MasterServerMatchFillAPotCallbackProxy_MatchFillAPotWithFriend, ReturnValue) == 0x000018, "Member 'MasterServerMatchFillAPotCallbackProxy_MatchFillAPotWithFriend::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.MasterServerManager.Connect
// 0x0014 (0x0014 - 0x0000)
struct MasterServerManager_Connect final
{
public:
	int32                                         InA;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InB;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InC;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InD;                                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterServerManager_Connect) == 0x000004, "Wrong alignment on MasterServerManager_Connect");
static_assert(sizeof(MasterServerManager_Connect) == 0x000014, "Wrong size on MasterServerManager_Connect");
static_assert(offsetof(MasterServerManager_Connect, InA) == 0x000000, "Member 'MasterServerManager_Connect::InA' has a wrong offset!");
static_assert(offsetof(MasterServerManager_Connect, InB) == 0x000004, "Member 'MasterServerManager_Connect::InB' has a wrong offset!");
static_assert(offsetof(MasterServerManager_Connect, InC) == 0x000008, "Member 'MasterServerManager_Connect::InC' has a wrong offset!");
static_assert(offsetof(MasterServerManager_Connect, InD) == 0x00000C, "Member 'MasterServerManager_Connect::InD' has a wrong offset!");
static_assert(offsetof(MasterServerManager_Connect, Port) == 0x000010, "Member 'MasterServerManager_Connect::Port' has a wrong offset!");

// Function MasterServerPlugin.MasterServerManager.ConnectHost
// 0x0018 (0x0018 - 0x0000)
struct MasterServerManager_ConnectHost final
{
public:
	class FString                                 HostName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E1D[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MasterServerManager_ConnectHost) == 0x000008, "Wrong alignment on MasterServerManager_ConnectHost");
static_assert(sizeof(MasterServerManager_ConnectHost) == 0x000018, "Wrong size on MasterServerManager_ConnectHost");
static_assert(offsetof(MasterServerManager_ConnectHost, HostName) == 0x000000, "Member 'MasterServerManager_ConnectHost::HostName' has a wrong offset!");
static_assert(offsetof(MasterServerManager_ConnectHost, Port) == 0x000010, "Member 'MasterServerManager_ConnectHost::Port' has a wrong offset!");
static_assert(offsetof(MasterServerManager_ConnectHost, ReturnValue) == 0x000014, "Member 'MasterServerManager_ConnectHost::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.MasterServerManager.Disconnect
// 0x0001 (0x0001 - 0x0000)
struct MasterServerManager_Disconnect final
{
public:
	bool                                          AutomaticalReconnectWhenKeepAlive;                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterServerManager_Disconnect) == 0x000001, "Wrong alignment on MasterServerManager_Disconnect");
static_assert(sizeof(MasterServerManager_Disconnect) == 0x000001, "Wrong size on MasterServerManager_Disconnect");
static_assert(offsetof(MasterServerManager_Disconnect, AutomaticalReconnectWhenKeepAlive) == 0x000000, "Member 'MasterServerManager_Disconnect::AutomaticalReconnectWhenKeepAlive' has a wrong offset!");

// Function MasterServerPlugin.MasterServerManager.GetAccountId
// 0x0004 (0x0004 - 0x0000)
struct MasterServerManager_GetAccountId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterServerManager_GetAccountId) == 0x000004, "Wrong alignment on MasterServerManager_GetAccountId");
static_assert(sizeof(MasterServerManager_GetAccountId) == 0x000004, "Wrong size on MasterServerManager_GetAccountId");
static_assert(offsetof(MasterServerManager_GetAccountId, ReturnValue) == 0x000000, "Member 'MasterServerManager_GetAccountId::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.MasterServerManager.GetIsInMatchmaking
// 0x0001 (0x0001 - 0x0000)
struct MasterServerManager_GetIsInMatchmaking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterServerManager_GetIsInMatchmaking) == 0x000001, "Wrong alignment on MasterServerManager_GetIsInMatchmaking");
static_assert(sizeof(MasterServerManager_GetIsInMatchmaking) == 0x000001, "Wrong size on MasterServerManager_GetIsInMatchmaking");
static_assert(offsetof(MasterServerManager_GetIsInMatchmaking, ReturnValue) == 0x000000, "Member 'MasterServerManager_GetIsInMatchmaking::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.MasterServerManager.GetTestSessionSearchResult
// 0x0120 (0x0120 - 0x0000)
struct MasterServerManager_GetTestSessionSearchResult final
{
public:
	struct FBlueprintSessionResult                ReturnValue;                                       // 0x0000(0x0120)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterServerManager_GetTestSessionSearchResult) == 0x000008, "Wrong alignment on MasterServerManager_GetTestSessionSearchResult");
static_assert(sizeof(MasterServerManager_GetTestSessionSearchResult) == 0x000120, "Wrong size on MasterServerManager_GetTestSessionSearchResult");
static_assert(offsetof(MasterServerManager_GetTestSessionSearchResult, ReturnValue) == 0x000000, "Member 'MasterServerManager_GetTestSessionSearchResult::ReturnValue' has a wrong offset!");

// DelegateFunction MasterServerPlugin.MasterServerManager.InitializeClientsForMatchMaking__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct MasterServerManager_InitializeClientsForMatchMaking__DelegateSignature final
{
public:
	TArray<class FString>                         UserIds;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 ObjectiveTeam;                                     // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterServerManager_InitializeClientsForMatchMaking__DelegateSignature) == 0x000008, "Wrong alignment on MasterServerManager_InitializeClientsForMatchMaking__DelegateSignature");
static_assert(sizeof(MasterServerManager_InitializeClientsForMatchMaking__DelegateSignature) == 0x000020, "Wrong size on MasterServerManager_InitializeClientsForMatchMaking__DelegateSignature");
static_assert(offsetof(MasterServerManager_InitializeClientsForMatchMaking__DelegateSignature, UserIds) == 0x000000, "Member 'MasterServerManager_InitializeClientsForMatchMaking__DelegateSignature::UserIds' has a wrong offset!");
static_assert(offsetof(MasterServerManager_InitializeClientsForMatchMaking__DelegateSignature, ObjectiveTeam) == 0x000010, "Member 'MasterServerManager_InitializeClientsForMatchMaking__DelegateSignature::ObjectiveTeam' has a wrong offset!");

// Function MasterServerPlugin.MasterServerManager.InitializeInstanceId
// 0x0008 (0x0008 - 0x0000)
struct MasterServerManager_InitializeInstanceId final
{
public:
	int32                                         InstanceId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         IsStaticInstance;                                  // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E1E[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MasterServerManager_InitializeInstanceId) == 0x000004, "Wrong alignment on MasterServerManager_InitializeInstanceId");
static_assert(sizeof(MasterServerManager_InitializeInstanceId) == 0x000008, "Wrong size on MasterServerManager_InitializeInstanceId");
static_assert(offsetof(MasterServerManager_InitializeInstanceId, InstanceId) == 0x000000, "Member 'MasterServerManager_InitializeInstanceId::InstanceId' has a wrong offset!");
static_assert(offsetof(MasterServerManager_InitializeInstanceId, IsStaticInstance) == 0x000004, "Member 'MasterServerManager_InitializeInstanceId::IsStaticInstance' has a wrong offset!");

// Function MasterServerPlugin.MasterServerManager.InitializeUnsecureUserId
// 0x0020 (0x0020 - 0x0000)
struct MasterServerManager_InitializeUnsecureUserId final
{
public:
	class FString                                 UnsecureUserId;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterServerManager_InitializeUnsecureUserId) == 0x000008, "Wrong alignment on MasterServerManager_InitializeUnsecureUserId");
static_assert(sizeof(MasterServerManager_InitializeUnsecureUserId) == 0x000020, "Wrong size on MasterServerManager_InitializeUnsecureUserId");
static_assert(offsetof(MasterServerManager_InitializeUnsecureUserId, UnsecureUserId) == 0x000000, "Member 'MasterServerManager_InitializeUnsecureUserId::UnsecureUserId' has a wrong offset!");
static_assert(offsetof(MasterServerManager_InitializeUnsecureUserId, Language) == 0x000010, "Member 'MasterServerManager_InitializeUnsecureUserId::Language' has a wrong offset!");

// Function MasterServerPlugin.MasterServerManager.IsConnected
// 0x0001 (0x0001 - 0x0000)
struct MasterServerManager_IsConnected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterServerManager_IsConnected) == 0x000001, "Wrong alignment on MasterServerManager_IsConnected");
static_assert(sizeof(MasterServerManager_IsConnected) == 0x000001, "Wrong size on MasterServerManager_IsConnected");
static_assert(offsetof(MasterServerManager_IsConnected, ReturnValue) == 0x000000, "Member 'MasterServerManager_IsConnected::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.MasterServerManager.IsTearingDown
// 0x0001 (0x0001 - 0x0000)
struct MasterServerManager_IsTearingDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterServerManager_IsTearingDown) == 0x000001, "Wrong alignment on MasterServerManager_IsTearingDown");
static_assert(sizeof(MasterServerManager_IsTearingDown) == 0x000001, "Wrong size on MasterServerManager_IsTearingDown");
static_assert(offsetof(MasterServerManager_IsTearingDown, ReturnValue) == 0x000000, "Member 'MasterServerManager_IsTearingDown::ReturnValue' has a wrong offset!");

// DelegateFunction MasterServerPlugin.MasterServerManager.NotifyQuestChange__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct MasterServerManager_NotifyQuestChange__DelegateSignature final
{
public:
	EQuestChangeReason                            Reason;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E1F[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         AccountQuestId;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterServerManager_NotifyQuestChange__DelegateSignature) == 0x000008, "Wrong alignment on MasterServerManager_NotifyQuestChange__DelegateSignature");
static_assert(sizeof(MasterServerManager_NotifyQuestChange__DelegateSignature) == 0x000010, "Wrong size on MasterServerManager_NotifyQuestChange__DelegateSignature");
static_assert(offsetof(MasterServerManager_NotifyQuestChange__DelegateSignature, Reason) == 0x000000, "Member 'MasterServerManager_NotifyQuestChange__DelegateSignature::Reason' has a wrong offset!");
static_assert(offsetof(MasterServerManager_NotifyQuestChange__DelegateSignature, AccountQuestId) == 0x000008, "Member 'MasterServerManager_NotifyQuestChange__DelegateSignature::AccountQuestId' has a wrong offset!");

// Function MasterServerPlugin.MasterServerManager.SendServerSystemMessage
// 0x0010 (0x0010 - 0x0000)
struct MasterServerManager_SendServerSystemMessage final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterServerManager_SendServerSystemMessage) == 0x000008, "Wrong alignment on MasterServerManager_SendServerSystemMessage");
static_assert(sizeof(MasterServerManager_SendServerSystemMessage) == 0x000010, "Wrong size on MasterServerManager_SendServerSystemMessage");
static_assert(offsetof(MasterServerManager_SendServerSystemMessage, Message) == 0x000000, "Member 'MasterServerManager_SendServerSystemMessage::Message' has a wrong offset!");

// Function MasterServerPlugin.MasterServerManager.SetAccessToken
// 0x0010 (0x0010 - 0x0000)
struct MasterServerManager_SetAccessToken final
{
public:
	class FString                                 Param_SetAccessToken;                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterServerManager_SetAccessToken) == 0x000008, "Wrong alignment on MasterServerManager_SetAccessToken");
static_assert(sizeof(MasterServerManager_SetAccessToken) == 0x000010, "Wrong size on MasterServerManager_SetAccessToken");
static_assert(offsetof(MasterServerManager_SetAccessToken, Param_SetAccessToken) == 0x000000, "Member 'MasterServerManager_SetAccessToken::Param_SetAccessToken' has a wrong offset!");

// Function MasterServerPlugin.MasterServerSubsystem.SetNewMasterServerManager
// 0x0008 (0x0008 - 0x0000)
struct MasterServerSubsystem_SetNewMasterServerManager final
{
public:
	class UNewMasterServerManager*                Param_SetNewMasterServerManager;                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterServerSubsystem_SetNewMasterServerManager) == 0x000008, "Wrong alignment on MasterServerSubsystem_SetNewMasterServerManager");
static_assert(sizeof(MasterServerSubsystem_SetNewMasterServerManager) == 0x000008, "Wrong size on MasterServerSubsystem_SetNewMasterServerManager");
static_assert(offsetof(MasterServerSubsystem_SetNewMasterServerManager, Param_SetNewMasterServerManager) == 0x000000, "Member 'MasterServerSubsystem_SetNewMasterServerManager::Param_SetNewMasterServerManager' has a wrong offset!");

// Function MasterServerPlugin.MasterServerSubsystem.GetNewMasterServerManager
// 0x0008 (0x0008 - 0x0000)
struct MasterServerSubsystem_GetNewMasterServerManager final
{
public:
	class UNewMasterServerManager*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterServerSubsystem_GetNewMasterServerManager) == 0x000008, "Wrong alignment on MasterServerSubsystem_GetNewMasterServerManager");
static_assert(sizeof(MasterServerSubsystem_GetNewMasterServerManager) == 0x000008, "Wrong size on MasterServerSubsystem_GetNewMasterServerManager");
static_assert(offsetof(MasterServerSubsystem_GetNewMasterServerManager, ReturnValue) == 0x000000, "Member 'MasterServerSubsystem_GetNewMasterServerManager::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.NewMasterServerManager.BPTick
// 0x0004 (0x0004 - 0x0000)
struct NewMasterServerManager_BPTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NewMasterServerManager_BPTick) == 0x000004, "Wrong alignment on NewMasterServerManager_BPTick");
static_assert(sizeof(NewMasterServerManager_BPTick) == 0x000004, "Wrong size on NewMasterServerManager_BPTick");
static_assert(offsetof(NewMasterServerManager_BPTick, DeltaTime) == 0x000000, "Member 'NewMasterServerManager_BPTick::DeltaTime' has a wrong offset!");

// Function MasterServerPlugin.NewMasterServerManager.Connect
// 0x0030 (0x0030 - 0x0000)
struct NewMasterServerManager_Connect final
{
public:
	class FString                                 Ip;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E27[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Resource;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E28[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NewMasterServerManager_Connect) == 0x000008, "Wrong alignment on NewMasterServerManager_Connect");
static_assert(sizeof(NewMasterServerManager_Connect) == 0x000030, "Wrong size on NewMasterServerManager_Connect");
static_assert(offsetof(NewMasterServerManager_Connect, Ip) == 0x000000, "Member 'NewMasterServerManager_Connect::Ip' has a wrong offset!");
static_assert(offsetof(NewMasterServerManager_Connect, Port) == 0x000010, "Member 'NewMasterServerManager_Connect::Port' has a wrong offset!");
static_assert(offsetof(NewMasterServerManager_Connect, Resource) == 0x000018, "Member 'NewMasterServerManager_Connect::Resource' has a wrong offset!");
static_assert(offsetof(NewMasterServerManager_Connect, ReturnValue) == 0x000028, "Member 'NewMasterServerManager_Connect::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.NewMasterServerManager.DeclarePresence
// 0x0010 (0x0010 - 0x0000)
struct NewMasterServerManager_DeclarePresence final
{
public:
	class FString                                 PresenceString;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NewMasterServerManager_DeclarePresence) == 0x000008, "Wrong alignment on NewMasterServerManager_DeclarePresence");
static_assert(sizeof(NewMasterServerManager_DeclarePresence) == 0x000010, "Wrong size on NewMasterServerManager_DeclarePresence");
static_assert(offsetof(NewMasterServerManager_DeclarePresence, PresenceString) == 0x000000, "Member 'NewMasterServerManager_DeclarePresence::PresenceString' has a wrong offset!");

// Function MasterServerPlugin.NewMasterServerManager.GetPresenceForUser
// 0x0040 (0x0040 - 0x0000)
struct NewMasterServerManager_GetPresenceForUser final
{
public:
	class UOnlineUserRef*                         User;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E29[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAccountPresenceEntry                  ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NewMasterServerManager_GetPresenceForUser) == 0x000008, "Wrong alignment on NewMasterServerManager_GetPresenceForUser");
static_assert(sizeof(NewMasterServerManager_GetPresenceForUser) == 0x000040, "Wrong size on NewMasterServerManager_GetPresenceForUser");
static_assert(offsetof(NewMasterServerManager_GetPresenceForUser, User) == 0x000000, "Member 'NewMasterServerManager_GetPresenceForUser::User' has a wrong offset!");
static_assert(offsetof(NewMasterServerManager_GetPresenceForUser, bIsValid) == 0x000008, "Member 'NewMasterServerManager_GetPresenceForUser::bIsValid' has a wrong offset!");
static_assert(offsetof(NewMasterServerManager_GetPresenceForUser, ReturnValue) == 0x000010, "Member 'NewMasterServerManager_GetPresenceForUser::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.NewMasterServerManager.IsConnected
// 0x0001 (0x0001 - 0x0000)
struct NewMasterServerManager_IsConnected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NewMasterServerManager_IsConnected) == 0x000001, "Wrong alignment on NewMasterServerManager_IsConnected");
static_assert(sizeof(NewMasterServerManager_IsConnected) == 0x000001, "Wrong size on NewMasterServerManager_IsConnected");
static_assert(offsetof(NewMasterServerManager_IsConnected, ReturnValue) == 0x000000, "Member 'NewMasterServerManager_IsConnected::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.NewMasterServerManager.IsRestApiAccessTokenValid
// 0x0010 (0x0010 - 0x0000)
struct NewMasterServerManager_IsRestApiAccessTokenValid final
{
public:
	double                                        MaxExpiryDeltaSeconds;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E2A[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NewMasterServerManager_IsRestApiAccessTokenValid) == 0x000008, "Wrong alignment on NewMasterServerManager_IsRestApiAccessTokenValid");
static_assert(sizeof(NewMasterServerManager_IsRestApiAccessTokenValid) == 0x000010, "Wrong size on NewMasterServerManager_IsRestApiAccessTokenValid");
static_assert(offsetof(NewMasterServerManager_IsRestApiAccessTokenValid, MaxExpiryDeltaSeconds) == 0x000000, "Member 'NewMasterServerManager_IsRestApiAccessTokenValid::MaxExpiryDeltaSeconds' has a wrong offset!");
static_assert(offsetof(NewMasterServerManager_IsRestApiAccessTokenValid, ReturnValue) == 0x000008, "Member 'NewMasterServerManager_IsRestApiAccessTokenValid::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.NewMasterServerManager.OnConnected
// 0x0018 (0x0018 - 0x0000)
struct NewMasterServerManager_OnConnected final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E2B[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NewMasterServerManager_OnConnected) == 0x000008, "Wrong alignment on NewMasterServerManager_OnConnected");
static_assert(sizeof(NewMasterServerManager_OnConnected) == 0x000018, "Wrong size on NewMasterServerManager_OnConnected");
static_assert(offsetof(NewMasterServerManager_OnConnected, Success) == 0x000000, "Member 'NewMasterServerManager_OnConnected::Success' has a wrong offset!");
static_assert(offsetof(NewMasterServerManager_OnConnected, ErrorMessage) == 0x000008, "Member 'NewMasterServerManager_OnConnected::ErrorMessage' has a wrong offset!");

// Function MasterServerPlugin.NewMasterServerManager.OnDisconnected
// 0x0020 (0x0020 - 0x0000)
struct NewMasterServerManager_OnDisconnected final
{
public:
	int32                                         StatusCode;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E2C[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Reason;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasClean;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E2D[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NewMasterServerManager_OnDisconnected) == 0x000008, "Wrong alignment on NewMasterServerManager_OnDisconnected");
static_assert(sizeof(NewMasterServerManager_OnDisconnected) == 0x000020, "Wrong size on NewMasterServerManager_OnDisconnected");
static_assert(offsetof(NewMasterServerManager_OnDisconnected, StatusCode) == 0x000000, "Member 'NewMasterServerManager_OnDisconnected::StatusCode' has a wrong offset!");
static_assert(offsetof(NewMasterServerManager_OnDisconnected, Reason) == 0x000008, "Member 'NewMasterServerManager_OnDisconnected::Reason' has a wrong offset!");
static_assert(offsetof(NewMasterServerManager_OnDisconnected, bWasClean) == 0x000018, "Member 'NewMasterServerManager_OnDisconnected::bWasClean' has a wrong offset!");

// Function MasterServerPlugin.NewMasterServerManager.OnLoginResponse
// 0x0008 (0x0008 - 0x0000)
struct NewMasterServerManager_OnLoginResponse final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E2E[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AccountId;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NewMasterServerManager_OnLoginResponse) == 0x000004, "Wrong alignment on NewMasterServerManager_OnLoginResponse");
static_assert(sizeof(NewMasterServerManager_OnLoginResponse) == 0x000008, "Wrong size on NewMasterServerManager_OnLoginResponse");
static_assert(offsetof(NewMasterServerManager_OnLoginResponse, Success) == 0x000000, "Member 'NewMasterServerManager_OnLoginResponse::Success' has a wrong offset!");
static_assert(offsetof(NewMasterServerManager_OnLoginResponse, AccountId) == 0x000004, "Member 'NewMasterServerManager_OnLoginResponse::AccountId' has a wrong offset!");

// Function MasterServerPlugin.NewMasterServerManager.RequestAccountSettings
// 0x0010 (0x0010 - 0x0000)
struct NewMasterServerManager_RequestAccountSettings final
{
public:
	TArray<class FString>                         SettingNames;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NewMasterServerManager_RequestAccountSettings) == 0x000008, "Wrong alignment on NewMasterServerManager_RequestAccountSettings");
static_assert(sizeof(NewMasterServerManager_RequestAccountSettings) == 0x000010, "Wrong size on NewMasterServerManager_RequestAccountSettings");
static_assert(offsetof(NewMasterServerManager_RequestAccountSettings, SettingNames) == 0x000000, "Member 'NewMasterServerManager_RequestAccountSettings::SettingNames' has a wrong offset!");

// Function MasterServerPlugin.NewMasterServerManager.RequestPresenceForAccounts
// 0x0010 (0x0010 - 0x0000)
struct NewMasterServerManager_RequestPresenceForAccounts final
{
public:
	TArray<class UOnlineUserRef*>                 Users;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NewMasterServerManager_RequestPresenceForAccounts) == 0x000008, "Wrong alignment on NewMasterServerManager_RequestPresenceForAccounts");
static_assert(sizeof(NewMasterServerManager_RequestPresenceForAccounts) == 0x000010, "Wrong size on NewMasterServerManager_RequestPresenceForAccounts");
static_assert(offsetof(NewMasterServerManager_RequestPresenceForAccounts, Users) == 0x000000, "Member 'NewMasterServerManager_RequestPresenceForAccounts::Users' has a wrong offset!");

// Function MasterServerPlugin.NewMasterServerManager.SendLoginPacket
// 0x0010 (0x0010 - 0x0000)
struct NewMasterServerManager_SendLoginPacket final
{
public:
	class FString                                 AccessToken;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NewMasterServerManager_SendLoginPacket) == 0x000008, "Wrong alignment on NewMasterServerManager_SendLoginPacket");
static_assert(sizeof(NewMasterServerManager_SendLoginPacket) == 0x000010, "Wrong size on NewMasterServerManager_SendLoginPacket");
static_assert(offsetof(NewMasterServerManager_SendLoginPacket, AccessToken) == 0x000000, "Member 'NewMasterServerManager_SendLoginPacket::AccessToken' has a wrong offset!");

// Function MasterServerPlugin.NewMasterServerManager.SetAccountSettings
// 0x0010 (0x0010 - 0x0000)
struct NewMasterServerManager_SetAccountSettings final
{
public:
	TArray<struct FAccountSetting>                Settings;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NewMasterServerManager_SetAccountSettings) == 0x000008, "Wrong alignment on NewMasterServerManager_SetAccountSettings");
static_assert(sizeof(NewMasterServerManager_SetAccountSettings) == 0x000010, "Wrong size on NewMasterServerManager_SetAccountSettings");
static_assert(offsetof(NewMasterServerManager_SetAccountSettings, Settings) == 0x000000, "Member 'NewMasterServerManager_SetAccountSettings::Settings' has a wrong offset!");

// Function MasterServerPlugin.NewMasterServerManager.SetupRestApiData
// 0x0018 (0x0018 - 0x0000)
struct NewMasterServerManager_SetupRestApiData final
{
public:
	class FString                                 ServerHostname;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerPort;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AccountId;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NewMasterServerManager_SetupRestApiData) == 0x000008, "Wrong alignment on NewMasterServerManager_SetupRestApiData");
static_assert(sizeof(NewMasterServerManager_SetupRestApiData) == 0x000018, "Wrong size on NewMasterServerManager_SetupRestApiData");
static_assert(offsetof(NewMasterServerManager_SetupRestApiData, ServerHostname) == 0x000000, "Member 'NewMasterServerManager_SetupRestApiData::ServerHostname' has a wrong offset!");
static_assert(offsetof(NewMasterServerManager_SetupRestApiData, ServerPort) == 0x000010, "Member 'NewMasterServerManager_SetupRestApiData::ServerPort' has a wrong offset!");
static_assert(offsetof(NewMasterServerManager_SetupRestApiData, AccountId) == 0x000014, "Member 'NewMasterServerManager_SetupRestApiData::AccountId' has a wrong offset!");

// Function MasterServerPlugin.NewMasterServerManager.UpdateRestApiAccessToken
// 0x0018 (0x0018 - 0x0000)
struct NewMasterServerManager_UpdateRestApiAccessToken final
{
public:
	class FString                                 AccessToken;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              AccessTokenExpiryTime;                             // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NewMasterServerManager_UpdateRestApiAccessToken) == 0x000008, "Wrong alignment on NewMasterServerManager_UpdateRestApiAccessToken");
static_assert(sizeof(NewMasterServerManager_UpdateRestApiAccessToken) == 0x000018, "Wrong size on NewMasterServerManager_UpdateRestApiAccessToken");
static_assert(offsetof(NewMasterServerManager_UpdateRestApiAccessToken, AccessToken) == 0x000000, "Member 'NewMasterServerManager_UpdateRestApiAccessToken::AccessToken' has a wrong offset!");
static_assert(offsetof(NewMasterServerManager_UpdateRestApiAccessToken, AccessTokenExpiryTime) == 0x000010, "Member 'NewMasterServerManager_UpdateRestApiAccessToken::AccessTokenExpiryTime' has a wrong offset!");

// Function MasterServerPlugin.NewMasterServerManager.GetServerBrowser
// 0x0008 (0x0008 - 0x0000)
struct NewMasterServerManager_GetServerBrowser final
{
public:
	class UServerBrowser*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NewMasterServerManager_GetServerBrowser) == 0x000008, "Wrong alignment on NewMasterServerManager_GetServerBrowser");
static_assert(sizeof(NewMasterServerManager_GetServerBrowser) == 0x000008, "Wrong size on NewMasterServerManager_GetServerBrowser");
static_assert(offsetof(NewMasterServerManager_GetServerBrowser, ReturnValue) == 0x000000, "Member 'NewMasterServerManager_GetServerBrowser::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.NewMasterServerManager.HasRuntimeAccountFlag
// 0x0002 (0x0002 - 0x0000)
struct NewMasterServerManager_HasRuntimeAccountFlag final
{
public:
	ERuntimeAccountFlags                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NewMasterServerManager_HasRuntimeAccountFlag) == 0x000001, "Wrong alignment on NewMasterServerManager_HasRuntimeAccountFlag");
static_assert(sizeof(NewMasterServerManager_HasRuntimeAccountFlag) == 0x000002, "Wrong size on NewMasterServerManager_HasRuntimeAccountFlag");
static_assert(offsetof(NewMasterServerManager_HasRuntimeAccountFlag, Flag) == 0x000000, "Member 'NewMasterServerManager_HasRuntimeAccountFlag::Flag' has a wrong offset!");
static_assert(offsetof(NewMasterServerManager_HasRuntimeAccountFlag, ReturnValue) == 0x000001, "Member 'NewMasterServerManager_HasRuntimeAccountFlag::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.NewMasterServerManager.IsTearingDown
// 0x0001 (0x0001 - 0x0000)
struct NewMasterServerManager_IsTearingDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NewMasterServerManager_IsTearingDown) == 0x000001, "Wrong alignment on NewMasterServerManager_IsTearingDown");
static_assert(sizeof(NewMasterServerManager_IsTearingDown) == 0x000001, "Wrong size on NewMasterServerManager_IsTearingDown");
static_assert(offsetof(NewMasterServerManager_IsTearingDown, ReturnValue) == 0x000000, "Member 'NewMasterServerManager_IsTearingDown::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.ServerBrowser.PingAddress
// 0x0020 (0x0020 - 0x0000)
struct ServerBrowser_PingAddress final
{
public:
	class FString                                 Address;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerID;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerBrowser_PingAddress) == 0x000008, "Wrong alignment on ServerBrowser_PingAddress");
static_assert(sizeof(ServerBrowser_PingAddress) == 0x000020, "Wrong size on ServerBrowser_PingAddress");
static_assert(offsetof(ServerBrowser_PingAddress, Address) == 0x000000, "Member 'ServerBrowser_PingAddress::Address' has a wrong offset!");
static_assert(offsetof(ServerBrowser_PingAddress, ServerID) == 0x000010, "Member 'ServerBrowser_PingAddress::ServerID' has a wrong offset!");

// Function MasterServerPlugin.ServerBrowser.PingServer
// 0x0120 (0x0120 - 0x0000)
struct ServerBrowser_PingServer final
{
public:
	struct FBlueprintSessionResult                BlueprintSessionResult;                            // 0x0000(0x0120)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerBrowser_PingServer) == 0x000008, "Wrong alignment on ServerBrowser_PingServer");
static_assert(sizeof(ServerBrowser_PingServer) == 0x000120, "Wrong size on ServerBrowser_PingServer");
static_assert(offsetof(ServerBrowser_PingServer, BlueprintSessionResult) == 0x000000, "Member 'ServerBrowser_PingServer::BlueprintSessionResult' has a wrong offset!");

// Function MasterServerPlugin.ServerBrowser.RegisterGameServer
// 0x0158 (0x0158 - 0x0000)
struct ServerBrowser_RegisterGameServer final
{
public:
	struct FGameServerInfo                        GameServerInfo;                                    // 0x0000(0x0158)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerBrowser_RegisterGameServer) == 0x000008, "Wrong alignment on ServerBrowser_RegisterGameServer");
static_assert(sizeof(ServerBrowser_RegisterGameServer) == 0x000158, "Wrong size on ServerBrowser_RegisterGameServer");
static_assert(offsetof(ServerBrowser_RegisterGameServer, GameServerInfo) == 0x000000, "Member 'ServerBrowser_RegisterGameServer::GameServerInfo' has a wrong offset!");

// Function MasterServerPlugin.ServerBrowser.SendServerBrowserInfo
// 0x0158 (0x0158 - 0x0000)
struct ServerBrowser_SendServerBrowserInfo final
{
public:
	struct FGameServerInfo                        GameServerInfo;                                    // 0x0000(0x0158)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerBrowser_SendServerBrowserInfo) == 0x000008, "Wrong alignment on ServerBrowser_SendServerBrowserInfo");
static_assert(sizeof(ServerBrowser_SendServerBrowserInfo) == 0x000158, "Wrong size on ServerBrowser_SendServerBrowserInfo");
static_assert(offsetof(ServerBrowser_SendServerBrowserInfo, GameServerInfo) == 0x000000, "Member 'ServerBrowser_SendServerBrowserInfo::GameServerInfo' has a wrong offset!");

// Function MasterServerPlugin.ServerBrowser.GetServerList
// 0x0010 (0x0010 - 0x0000)
struct ServerBrowser_GetServerList final
{
public:
	TArray<struct FBlueprintSessionResult>        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerBrowser_GetServerList) == 0x000008, "Wrong alignment on ServerBrowser_GetServerList");
static_assert(sizeof(ServerBrowser_GetServerList) == 0x000010, "Wrong size on ServerBrowser_GetServerList");
static_assert(offsetof(ServerBrowser_GetServerList, ReturnValue) == 0x000000, "Member 'ServerBrowser_GetServerList::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.ServerBrowser.HasActiveGameSession
// 0x0001 (0x0001 - 0x0000)
struct ServerBrowser_HasActiveGameSession final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerBrowser_HasActiveGameSession) == 0x000001, "Wrong alignment on ServerBrowser_HasActiveGameSession");
static_assert(sizeof(ServerBrowser_HasActiveGameSession) == 0x000001, "Wrong size on ServerBrowser_HasActiveGameSession");
static_assert(offsetof(ServerBrowser_HasActiveGameSession, ReturnValue) == 0x000000, "Member 'ServerBrowser_HasActiveGameSession::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.WitchItPacket.ParseFromBytes
// 0x0018 (0x0018 - 0x0000)
struct WitchItPacket_ParseFromBytes final
{
public:
	TArray<uint8>                                 Bytes;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E31[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WitchItPacket_ParseFromBytes) == 0x000008, "Wrong alignment on WitchItPacket_ParseFromBytes");
static_assert(sizeof(WitchItPacket_ParseFromBytes) == 0x000018, "Wrong size on WitchItPacket_ParseFromBytes");
static_assert(offsetof(WitchItPacket_ParseFromBytes, Bytes) == 0x000000, "Member 'WitchItPacket_ParseFromBytes::Bytes' has a wrong offset!");
static_assert(offsetof(WitchItPacket_ParseFromBytes, ReturnValue) == 0x000010, "Member 'WitchItPacket_ParseFromBytes::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.WitchItPacket.PutArray
// 0x0018 (0x0018 - 0x0000)
struct WitchItPacket_PutArray final
{
public:
	TArray<uint8>                                 Bytes;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdvancedPosition;                                  // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WitchItPacket_PutArray) == 0x000008, "Wrong alignment on WitchItPacket_PutArray");
static_assert(sizeof(WitchItPacket_PutArray) == 0x000018, "Wrong size on WitchItPacket_PutArray");
static_assert(offsetof(WitchItPacket_PutArray, Bytes) == 0x000000, "Member 'WitchItPacket_PutArray::Bytes' has a wrong offset!");
static_assert(offsetof(WitchItPacket_PutArray, Param_Index) == 0x000010, "Member 'WitchItPacket_PutArray::Param_Index' has a wrong offset!");
static_assert(offsetof(WitchItPacket_PutArray, AdvancedPosition) == 0x000014, "Member 'WitchItPacket_PutArray::AdvancedPosition' has a wrong offset!");

// Function MasterServerPlugin.WitchItPacket.PutFloat32
// 0x000C (0x000C - 0x0000)
struct WitchItPacket_PutFloat32 final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdvancedPosition;                                  // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WitchItPacket_PutFloat32) == 0x000004, "Wrong alignment on WitchItPacket_PutFloat32");
static_assert(sizeof(WitchItPacket_PutFloat32) == 0x00000C, "Wrong size on WitchItPacket_PutFloat32");
static_assert(offsetof(WitchItPacket_PutFloat32, Value) == 0x000000, "Member 'WitchItPacket_PutFloat32::Value' has a wrong offset!");
static_assert(offsetof(WitchItPacket_PutFloat32, Param_Index) == 0x000004, "Member 'WitchItPacket_PutFloat32::Param_Index' has a wrong offset!");
static_assert(offsetof(WitchItPacket_PutFloat32, AdvancedPosition) == 0x000008, "Member 'WitchItPacket_PutFloat32::AdvancedPosition' has a wrong offset!");

// Function MasterServerPlugin.WitchItPacket.PutInt16
// 0x000C (0x000C - 0x0000)
struct WitchItPacket_PutInt16 final
{
public:
	int16                                         Value;                                             // 0x0000(0x0002)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E32[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param_Index;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdvancedPosition;                                  // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WitchItPacket_PutInt16) == 0x000004, "Wrong alignment on WitchItPacket_PutInt16");
static_assert(sizeof(WitchItPacket_PutInt16) == 0x00000C, "Wrong size on WitchItPacket_PutInt16");
static_assert(offsetof(WitchItPacket_PutInt16, Value) == 0x000000, "Member 'WitchItPacket_PutInt16::Value' has a wrong offset!");
static_assert(offsetof(WitchItPacket_PutInt16, Param_Index) == 0x000004, "Member 'WitchItPacket_PutInt16::Param_Index' has a wrong offset!");
static_assert(offsetof(WitchItPacket_PutInt16, AdvancedPosition) == 0x000008, "Member 'WitchItPacket_PutInt16::AdvancedPosition' has a wrong offset!");

// Function MasterServerPlugin.WitchItPacket.PutInt32
// 0x000C (0x000C - 0x0000)
struct WitchItPacket_PutInt32 final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdvancedPosition;                                  // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WitchItPacket_PutInt32) == 0x000004, "Wrong alignment on WitchItPacket_PutInt32");
static_assert(sizeof(WitchItPacket_PutInt32) == 0x00000C, "Wrong size on WitchItPacket_PutInt32");
static_assert(offsetof(WitchItPacket_PutInt32, Value) == 0x000000, "Member 'WitchItPacket_PutInt32::Value' has a wrong offset!");
static_assert(offsetof(WitchItPacket_PutInt32, Param_Index) == 0x000004, "Member 'WitchItPacket_PutInt32::Param_Index' has a wrong offset!");
static_assert(offsetof(WitchItPacket_PutInt32, AdvancedPosition) == 0x000008, "Member 'WitchItPacket_PutInt32::AdvancedPosition' has a wrong offset!");

// Function MasterServerPlugin.WitchItPacket.PutInt64
// 0x0010 (0x0010 - 0x0000)
struct WitchItPacket_PutInt64 final
{
public:
	int64                                         Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdvancedPosition;                                  // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WitchItPacket_PutInt64) == 0x000008, "Wrong alignment on WitchItPacket_PutInt64");
static_assert(sizeof(WitchItPacket_PutInt64) == 0x000010, "Wrong size on WitchItPacket_PutInt64");
static_assert(offsetof(WitchItPacket_PutInt64, Value) == 0x000000, "Member 'WitchItPacket_PutInt64::Value' has a wrong offset!");
static_assert(offsetof(WitchItPacket_PutInt64, Param_Index) == 0x000008, "Member 'WitchItPacket_PutInt64::Param_Index' has a wrong offset!");
static_assert(offsetof(WitchItPacket_PutInt64, AdvancedPosition) == 0x00000C, "Member 'WitchItPacket_PutInt64::AdvancedPosition' has a wrong offset!");

// Function MasterServerPlugin.WitchItPacket.PutInt8
// 0x000C (0x000C - 0x0000)
struct WitchItPacket_PutInt8 final
{
public:
	int8                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E33[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param_Index;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdvancedPosition;                                  // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WitchItPacket_PutInt8) == 0x000004, "Wrong alignment on WitchItPacket_PutInt8");
static_assert(sizeof(WitchItPacket_PutInt8) == 0x00000C, "Wrong size on WitchItPacket_PutInt8");
static_assert(offsetof(WitchItPacket_PutInt8, Value) == 0x000000, "Member 'WitchItPacket_PutInt8::Value' has a wrong offset!");
static_assert(offsetof(WitchItPacket_PutInt8, Param_Index) == 0x000004, "Member 'WitchItPacket_PutInt8::Param_Index' has a wrong offset!");
static_assert(offsetof(WitchItPacket_PutInt8, AdvancedPosition) == 0x000008, "Member 'WitchItPacket_PutInt8::AdvancedPosition' has a wrong offset!");

// Function MasterServerPlugin.WitchItPacket.PutString
// 0x0018 (0x0018 - 0x0000)
struct WitchItPacket_PutString final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdvancedPosition;                                  // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WitchItPacket_PutString) == 0x000008, "Wrong alignment on WitchItPacket_PutString");
static_assert(sizeof(WitchItPacket_PutString) == 0x000018, "Wrong size on WitchItPacket_PutString");
static_assert(offsetof(WitchItPacket_PutString, Value) == 0x000000, "Member 'WitchItPacket_PutString::Value' has a wrong offset!");
static_assert(offsetof(WitchItPacket_PutString, Param_Index) == 0x000010, "Member 'WitchItPacket_PutString::Param_Index' has a wrong offset!");
static_assert(offsetof(WitchItPacket_PutString, AdvancedPosition) == 0x000014, "Member 'WitchItPacket_PutString::AdvancedPosition' has a wrong offset!");

// Function MasterServerPlugin.WitchItPacket.PutUInt16
// 0x000C (0x000C - 0x0000)
struct WitchItPacket_PutUInt16 final
{
public:
	uint16                                        Value;                                             // 0x0000(0x0002)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E34[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param_Index;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdvancedPosition;                                  // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WitchItPacket_PutUInt16) == 0x000004, "Wrong alignment on WitchItPacket_PutUInt16");
static_assert(sizeof(WitchItPacket_PutUInt16) == 0x00000C, "Wrong size on WitchItPacket_PutUInt16");
static_assert(offsetof(WitchItPacket_PutUInt16, Value) == 0x000000, "Member 'WitchItPacket_PutUInt16::Value' has a wrong offset!");
static_assert(offsetof(WitchItPacket_PutUInt16, Param_Index) == 0x000004, "Member 'WitchItPacket_PutUInt16::Param_Index' has a wrong offset!");
static_assert(offsetof(WitchItPacket_PutUInt16, AdvancedPosition) == 0x000008, "Member 'WitchItPacket_PutUInt16::AdvancedPosition' has a wrong offset!");

// Function MasterServerPlugin.WitchItPacket.PutUInt32
// 0x000C (0x000C - 0x0000)
struct WitchItPacket_PutUInt32 final
{
public:
	uint32                                        Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdvancedPosition;                                  // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WitchItPacket_PutUInt32) == 0x000004, "Wrong alignment on WitchItPacket_PutUInt32");
static_assert(sizeof(WitchItPacket_PutUInt32) == 0x00000C, "Wrong size on WitchItPacket_PutUInt32");
static_assert(offsetof(WitchItPacket_PutUInt32, Value) == 0x000000, "Member 'WitchItPacket_PutUInt32::Value' has a wrong offset!");
static_assert(offsetof(WitchItPacket_PutUInt32, Param_Index) == 0x000004, "Member 'WitchItPacket_PutUInt32::Param_Index' has a wrong offset!");
static_assert(offsetof(WitchItPacket_PutUInt32, AdvancedPosition) == 0x000008, "Member 'WitchItPacket_PutUInt32::AdvancedPosition' has a wrong offset!");

// Function MasterServerPlugin.WitchItPacket.PutUInt64
// 0x0010 (0x0010 - 0x0000)
struct WitchItPacket_PutUInt64 final
{
public:
	uint64                                        Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdvancedPosition;                                  // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WitchItPacket_PutUInt64) == 0x000008, "Wrong alignment on WitchItPacket_PutUInt64");
static_assert(sizeof(WitchItPacket_PutUInt64) == 0x000010, "Wrong size on WitchItPacket_PutUInt64");
static_assert(offsetof(WitchItPacket_PutUInt64, Value) == 0x000000, "Member 'WitchItPacket_PutUInt64::Value' has a wrong offset!");
static_assert(offsetof(WitchItPacket_PutUInt64, Param_Index) == 0x000008, "Member 'WitchItPacket_PutUInt64::Param_Index' has a wrong offset!");
static_assert(offsetof(WitchItPacket_PutUInt64, AdvancedPosition) == 0x00000C, "Member 'WitchItPacket_PutUInt64::AdvancedPosition' has a wrong offset!");

// Function MasterServerPlugin.WitchItPacket.PutUInt8
// 0x000C (0x000C - 0x0000)
struct WitchItPacket_PutUInt8 final
{
public:
	uint8                                         Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E35[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param_Index;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdvancedPosition;                                  // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WitchItPacket_PutUInt8) == 0x000004, "Wrong alignment on WitchItPacket_PutUInt8");
static_assert(sizeof(WitchItPacket_PutUInt8) == 0x00000C, "Wrong size on WitchItPacket_PutUInt8");
static_assert(offsetof(WitchItPacket_PutUInt8, Value) == 0x000000, "Member 'WitchItPacket_PutUInt8::Value' has a wrong offset!");
static_assert(offsetof(WitchItPacket_PutUInt8, Param_Index) == 0x000004, "Member 'WitchItPacket_PutUInt8::Param_Index' has a wrong offset!");
static_assert(offsetof(WitchItPacket_PutUInt8, AdvancedPosition) == 0x000008, "Member 'WitchItPacket_PutUInt8::AdvancedPosition' has a wrong offset!");

// Function MasterServerPlugin.WitchItPacket.ReadBytes
// 0x0018 (0x0018 - 0x0000)
struct WitchItPacket_ReadBytes final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdvancedPosition;                                  // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WitchItPacket_ReadBytes) == 0x000008, "Wrong alignment on WitchItPacket_ReadBytes");
static_assert(sizeof(WitchItPacket_ReadBytes) == 0x000018, "Wrong size on WitchItPacket_ReadBytes");
static_assert(offsetof(WitchItPacket_ReadBytes, Param_Index) == 0x000000, "Member 'WitchItPacket_ReadBytes::Param_Index' has a wrong offset!");
static_assert(offsetof(WitchItPacket_ReadBytes, AdvancedPosition) == 0x000004, "Member 'WitchItPacket_ReadBytes::AdvancedPosition' has a wrong offset!");
static_assert(offsetof(WitchItPacket_ReadBytes, ReturnValue) == 0x000008, "Member 'WitchItPacket_ReadBytes::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.WitchItPacket.ReadFloat32
// 0x000C (0x000C - 0x0000)
struct WitchItPacket_ReadFloat32 final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdvancedPosition;                                  // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WitchItPacket_ReadFloat32) == 0x000004, "Wrong alignment on WitchItPacket_ReadFloat32");
static_assert(sizeof(WitchItPacket_ReadFloat32) == 0x00000C, "Wrong size on WitchItPacket_ReadFloat32");
static_assert(offsetof(WitchItPacket_ReadFloat32, Param_Index) == 0x000000, "Member 'WitchItPacket_ReadFloat32::Param_Index' has a wrong offset!");
static_assert(offsetof(WitchItPacket_ReadFloat32, AdvancedPosition) == 0x000004, "Member 'WitchItPacket_ReadFloat32::AdvancedPosition' has a wrong offset!");
static_assert(offsetof(WitchItPacket_ReadFloat32, ReturnValue) == 0x000008, "Member 'WitchItPacket_ReadFloat32::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.WitchItPacket.ReadInt16
// 0x000C (0x000C - 0x0000)
struct WitchItPacket_ReadInt16 final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdvancedPosition;                                  // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         ReturnValue;                                       // 0x0008(0x0002)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E36[0x2];                                     // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WitchItPacket_ReadInt16) == 0x000004, "Wrong alignment on WitchItPacket_ReadInt16");
static_assert(sizeof(WitchItPacket_ReadInt16) == 0x00000C, "Wrong size on WitchItPacket_ReadInt16");
static_assert(offsetof(WitchItPacket_ReadInt16, Param_Index) == 0x000000, "Member 'WitchItPacket_ReadInt16::Param_Index' has a wrong offset!");
static_assert(offsetof(WitchItPacket_ReadInt16, AdvancedPosition) == 0x000004, "Member 'WitchItPacket_ReadInt16::AdvancedPosition' has a wrong offset!");
static_assert(offsetof(WitchItPacket_ReadInt16, ReturnValue) == 0x000008, "Member 'WitchItPacket_ReadInt16::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.WitchItPacket.ReadInt32
// 0x000C (0x000C - 0x0000)
struct WitchItPacket_ReadInt32 final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdvancedPosition;                                  // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WitchItPacket_ReadInt32) == 0x000004, "Wrong alignment on WitchItPacket_ReadInt32");
static_assert(sizeof(WitchItPacket_ReadInt32) == 0x00000C, "Wrong size on WitchItPacket_ReadInt32");
static_assert(offsetof(WitchItPacket_ReadInt32, Param_Index) == 0x000000, "Member 'WitchItPacket_ReadInt32::Param_Index' has a wrong offset!");
static_assert(offsetof(WitchItPacket_ReadInt32, AdvancedPosition) == 0x000004, "Member 'WitchItPacket_ReadInt32::AdvancedPosition' has a wrong offset!");
static_assert(offsetof(WitchItPacket_ReadInt32, ReturnValue) == 0x000008, "Member 'WitchItPacket_ReadInt32::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.WitchItPacket.ReadInt64
// 0x0010 (0x0010 - 0x0000)
struct WitchItPacket_ReadInt64 final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdvancedPosition;                                  // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WitchItPacket_ReadInt64) == 0x000008, "Wrong alignment on WitchItPacket_ReadInt64");
static_assert(sizeof(WitchItPacket_ReadInt64) == 0x000010, "Wrong size on WitchItPacket_ReadInt64");
static_assert(offsetof(WitchItPacket_ReadInt64, Param_Index) == 0x000000, "Member 'WitchItPacket_ReadInt64::Param_Index' has a wrong offset!");
static_assert(offsetof(WitchItPacket_ReadInt64, AdvancedPosition) == 0x000004, "Member 'WitchItPacket_ReadInt64::AdvancedPosition' has a wrong offset!");
static_assert(offsetof(WitchItPacket_ReadInt64, ReturnValue) == 0x000008, "Member 'WitchItPacket_ReadInt64::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.WitchItPacket.ReadInt8
// 0x000C (0x000C - 0x0000)
struct WitchItPacket_ReadInt8 final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdvancedPosition;                                  // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E37[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WitchItPacket_ReadInt8) == 0x000004, "Wrong alignment on WitchItPacket_ReadInt8");
static_assert(sizeof(WitchItPacket_ReadInt8) == 0x00000C, "Wrong size on WitchItPacket_ReadInt8");
static_assert(offsetof(WitchItPacket_ReadInt8, Param_Index) == 0x000000, "Member 'WitchItPacket_ReadInt8::Param_Index' has a wrong offset!");
static_assert(offsetof(WitchItPacket_ReadInt8, AdvancedPosition) == 0x000004, "Member 'WitchItPacket_ReadInt8::AdvancedPosition' has a wrong offset!");
static_assert(offsetof(WitchItPacket_ReadInt8, ReturnValue) == 0x000008, "Member 'WitchItPacket_ReadInt8::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.WitchItPacket.ReadString
// 0x0018 (0x0018 - 0x0000)
struct WitchItPacket_ReadString final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdvancedPosition;                                  // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WitchItPacket_ReadString) == 0x000008, "Wrong alignment on WitchItPacket_ReadString");
static_assert(sizeof(WitchItPacket_ReadString) == 0x000018, "Wrong size on WitchItPacket_ReadString");
static_assert(offsetof(WitchItPacket_ReadString, Param_Index) == 0x000000, "Member 'WitchItPacket_ReadString::Param_Index' has a wrong offset!");
static_assert(offsetof(WitchItPacket_ReadString, AdvancedPosition) == 0x000004, "Member 'WitchItPacket_ReadString::AdvancedPosition' has a wrong offset!");
static_assert(offsetof(WitchItPacket_ReadString, ReturnValue) == 0x000008, "Member 'WitchItPacket_ReadString::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.WitchItPacket.ReadUInt16
// 0x000C (0x000C - 0x0000)
struct WitchItPacket_ReadUInt16 final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdvancedPosition;                                  // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        ReturnValue;                                       // 0x0008(0x0002)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E38[0x2];                                     // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WitchItPacket_ReadUInt16) == 0x000004, "Wrong alignment on WitchItPacket_ReadUInt16");
static_assert(sizeof(WitchItPacket_ReadUInt16) == 0x00000C, "Wrong size on WitchItPacket_ReadUInt16");
static_assert(offsetof(WitchItPacket_ReadUInt16, Param_Index) == 0x000000, "Member 'WitchItPacket_ReadUInt16::Param_Index' has a wrong offset!");
static_assert(offsetof(WitchItPacket_ReadUInt16, AdvancedPosition) == 0x000004, "Member 'WitchItPacket_ReadUInt16::AdvancedPosition' has a wrong offset!");
static_assert(offsetof(WitchItPacket_ReadUInt16, ReturnValue) == 0x000008, "Member 'WitchItPacket_ReadUInt16::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.WitchItPacket.ReadUInt32
// 0x000C (0x000C - 0x0000)
struct WitchItPacket_ReadUInt32 final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdvancedPosition;                                  // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WitchItPacket_ReadUInt32) == 0x000004, "Wrong alignment on WitchItPacket_ReadUInt32");
static_assert(sizeof(WitchItPacket_ReadUInt32) == 0x00000C, "Wrong size on WitchItPacket_ReadUInt32");
static_assert(offsetof(WitchItPacket_ReadUInt32, Param_Index) == 0x000000, "Member 'WitchItPacket_ReadUInt32::Param_Index' has a wrong offset!");
static_assert(offsetof(WitchItPacket_ReadUInt32, AdvancedPosition) == 0x000004, "Member 'WitchItPacket_ReadUInt32::AdvancedPosition' has a wrong offset!");
static_assert(offsetof(WitchItPacket_ReadUInt32, ReturnValue) == 0x000008, "Member 'WitchItPacket_ReadUInt32::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.WitchItPacket.ReadUInt64
// 0x0010 (0x0010 - 0x0000)
struct WitchItPacket_ReadUInt64 final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdvancedPosition;                                  // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WitchItPacket_ReadUInt64) == 0x000008, "Wrong alignment on WitchItPacket_ReadUInt64");
static_assert(sizeof(WitchItPacket_ReadUInt64) == 0x000010, "Wrong size on WitchItPacket_ReadUInt64");
static_assert(offsetof(WitchItPacket_ReadUInt64, Param_Index) == 0x000000, "Member 'WitchItPacket_ReadUInt64::Param_Index' has a wrong offset!");
static_assert(offsetof(WitchItPacket_ReadUInt64, AdvancedPosition) == 0x000004, "Member 'WitchItPacket_ReadUInt64::AdvancedPosition' has a wrong offset!");
static_assert(offsetof(WitchItPacket_ReadUInt64, ReturnValue) == 0x000008, "Member 'WitchItPacket_ReadUInt64::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.WitchItPacket.ReadUInt8
// 0x000C (0x000C - 0x0000)
struct WitchItPacket_ReadUInt8 final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdvancedPosition;                                  // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E39[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WitchItPacket_ReadUInt8) == 0x000004, "Wrong alignment on WitchItPacket_ReadUInt8");
static_assert(sizeof(WitchItPacket_ReadUInt8) == 0x00000C, "Wrong size on WitchItPacket_ReadUInt8");
static_assert(offsetof(WitchItPacket_ReadUInt8, Param_Index) == 0x000000, "Member 'WitchItPacket_ReadUInt8::Param_Index' has a wrong offset!");
static_assert(offsetof(WitchItPacket_ReadUInt8, AdvancedPosition) == 0x000004, "Member 'WitchItPacket_ReadUInt8::AdvancedPosition' has a wrong offset!");
static_assert(offsetof(WitchItPacket_ReadUInt8, ReturnValue) == 0x000008, "Member 'WitchItPacket_ReadUInt8::ReturnValue' has a wrong offset!");

// Function MasterServerPlugin.WitchItPacket.SerializeToBytes
// 0x0010 (0x0010 - 0x0000)
struct WitchItPacket_SerializeToBytes final
{
public:
	TArray<uint8>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WitchItPacket_SerializeToBytes) == 0x000008, "Wrong alignment on WitchItPacket_SerializeToBytes");
static_assert(sizeof(WitchItPacket_SerializeToBytes) == 0x000010, "Wrong size on WitchItPacket_SerializeToBytes");
static_assert(offsetof(WitchItPacket_SerializeToBytes, ReturnValue) == 0x000000, "Member 'WitchItPacket_SerializeToBytes::ReturnValue' has a wrong offset!");

}

