#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_IngameUIManager

#include "Basic.hpp"

#include "B_IngameUIManager_classes.hpp"
#include "B_IngameUIManager_parameters.hpp"


namespace SDK
{

// Function B_IngameUIManager.B_IngameUIManager_C.OnInputModeChanged__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UB_IngameUIManager_C::OnInputModeChanged__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "OnInputModeChanged__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_IngameUIManager.B_IngameUIManager_C.ChatTextCommitted
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Text                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// ETextCommit                             CommitMethod                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_IngameUIManager_C::ChatTextCommitted(const class FText& Text, ETextCommit CommitMethod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "ChatTextCommitted");

	Params::B_IngameUIManager_C_ChatTextCommitted Parms{};

	Parms.Text = std::move(Text);
	Parms.CommitMethod = CommitMethod;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_IngameUIManager.B_IngameUIManager_C.ChatTextCommittedTeam
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Text                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// ETextCommit                             CommitMethod                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_IngameUIManager_C::ChatTextCommittedTeam(const class FText& Text, ETextCommit CommitMethod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "ChatTextCommittedTeam");

	Params::B_IngameUIManager_C_ChatTextCommittedTeam Parms{};

	Parms.Text = std::move(Text);
	Parms.CommitMethod = CommitMethod;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_IngameUIManager.B_IngameUIManager_C.ClearChatAndGameMessage
// (Public, BlueprintCallable, BlueprintEvent)

void UB_IngameUIManager_C::ClearChatAndGameMessage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "ClearChatAndGameMessage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_IngameUIManager.B_IngameUIManager_C.CloseAllScreens
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    RefreshFocus                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_IngameUIManager_C::CloseAllScreens(bool RefreshFocus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "CloseAllScreens");

	Params::B_IngameUIManager_C_CloseAllScreens Parms{};

	Parms.RefreshFocus = RefreshFocus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_IngameUIManager.B_IngameUIManager_C.CloseScreen
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UUserWidget*                      UserWidget                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UB_IngameUIManager_C::CloseScreen(class UUserWidget* UserWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "CloseScreen");

	Params::B_IngameUIManager_C_CloseScreen Parms{};

	Parms.UserWidget = UserWidget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_IngameUIManager.B_IngameUIManager_C.CloseScreens
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UUserWidget*>              UserWidgets                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)

void UB_IngameUIManager_C::CloseScreens(TArray<class UUserWidget*>& UserWidgets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "CloseScreens");

	Params::B_IngameUIManager_C_CloseScreens Parms{};

	Parms.UserWidgets = std::move(UserWidgets);

	UObject::ProcessEvent(Func, &Parms);

	UserWidgets = std::move(Parms.UserWidgets);
}


// Function B_IngameUIManager.B_IngameUIManager_C.CloseSubordinateMenu
// (Public, BlueprintCallable, BlueprintEvent)

void UB_IngameUIManager_C::CloseSubordinateMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "CloseSubordinateMenu");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_IngameUIManager.B_IngameUIManager_C.DevGrantAllItemsCommand
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UB_IngameUIManager_C::DevGrantAllItemsCommand()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "DevGrantAllItemsCommand");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_IngameUIManager.B_IngameUIManager_C.ExecuteUbergraph_B_IngameUIManager
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_IngameUIManager_C::ExecuteUbergraph_B_IngameUIManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "ExecuteUbergraph_B_IngameUIManager");

	Params::B_IngameUIManager_C_ExecuteUbergraph_B_IngameUIManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_IngameUIManager.B_IngameUIManager_C.FocusChatForTyping
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EChatType                               ChatType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_IngameUIManager_C::FocusChatForTyping(EChatType ChatType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "FocusChatForTyping");

	Params::B_IngameUIManager_C_FocusChatForTyping Parms{};

	Parms.ChatType = ChatType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_IngameUIManager.B_IngameUIManager_C.GetFirstLocalPlayerController
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AB_PlayerController_C*            PlayerController                                       (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UB_IngameUIManager_C::GetFirstLocalPlayerController(class AB_PlayerController_C** PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "GetFirstLocalPlayerController");

	Params::B_IngameUIManager_C_GetFirstLocalPlayerController Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PlayerController != nullptr)
		*PlayerController = Parms.PlayerController;
}


// Function B_IngameUIManager.B_IngameUIManager_C.GetKeyBinding
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             TypeChatMessage                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             Text                                                   (Parm, OutParm)

void UB_IngameUIManager_C::GetKeyBinding(class FName TypeChatMessage, class FText* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "GetKeyBinding");

	Params::B_IngameUIManager_C_GetKeyBinding Parms{};

	Parms.TypeChatMessage = TypeChatMessage;

	UObject::ProcessEvent(Func, &Parms);

	if (Text != nullptr)
		*Text = std::move(Parms.Text);
}


// Function B_IngameUIManager.B_IngameUIManager_C.GetOwningPlayer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UB_IngameUIManager_C::GetOwningPlayer(class APlayerController** PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "GetOwningPlayer");

	Params::B_IngameUIManager_C_GetOwningPlayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PlayerController != nullptr)
		*PlayerController = Parms.PlayerController;
}


// Function B_IngameUIManager.B_IngameUIManager_C.GrantDropExpCommand
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Exp                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_IngameUIManager_C::GrantDropExpCommand(int32 Exp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "GrantDropExpCommand");

	Params::B_IngameUIManager_C_GrantDropExpCommand Parms{};

	Parms.Exp = Exp;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_IngameUIManager.B_IngameUIManager_C.GrantItemCommand
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_IngameUIManager_C::GrantItemCommand(int32 Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "GrantItemCommand");

	Params::B_IngameUIManager_C_GrantItemCommand Parms{};

	Parms.Item = Item;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_IngameUIManager.B_IngameUIManager_C.GrantPrestigeExpCommand
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Exp                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_IngameUIManager_C::GrantPrestigeExpCommand(int32 Exp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "GrantPrestigeExpCommand");

	Params::B_IngameUIManager_C_GrantPrestigeExpCommand Parms{};

	Parms.Exp = Exp;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_IngameUIManager.B_IngameUIManager_C.HandleChatCommand
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Text                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// ETextCommit                             CommitMethod                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EChatType                               ChatType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_IngameUIManager_C::HandleChatCommand(const class FText& Text, ETextCommit CommitMethod, EChatType ChatType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "HandleChatCommand");

	Params::B_IngameUIManager_C_HandleChatCommand Parms{};

	Parms.Text = std::move(Text);
	Parms.CommitMethod = CommitMethod;
	Parms.ChatType = ChatType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_IngameUIManager.B_IngameUIManager_C.HideHUD
// (Public, BlueprintCallable, BlueprintEvent)

void UB_IngameUIManager_C::HideHUD()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "HideHUD");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_IngameUIManager.B_IngameUIManager_C.HideOutlinesCommand
// (Public, BlueprintCallable, BlueprintEvent)

void UB_IngameUIManager_C::HideOutlinesCommand()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "HideOutlinesCommand");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_IngameUIManager.B_IngameUIManager_C.HidePlayerList
// (Public, BlueprintCallable, BlueprintEvent)

void UB_IngameUIManager_C::HidePlayerList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "HidePlayerList");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_IngameUIManager.B_IngameUIManager_C.IncreaseLevelCommand
// (Public, BlueprintCallable, BlueprintEvent)

void UB_IngameUIManager_C::IncreaseLevelCommand()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "IncreaseLevelCommand");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_IngameUIManager.B_IngameUIManager_C.Initialize
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UGameInstance*                    InGameInstance                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UB_IngameUIManager_C::Initialize(class UGameInstance* InGameInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "Initialize");

	Params::B_IngameUIManager_C_Initialize Parms{};

	Parms.InGameInstance = InGameInstance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_IngameUIManager.B_IngameUIManager_C.InitializeStartSpectating
// (Public, BlueprintCallable, BlueprintEvent)

void UB_IngameUIManager_C::InitializeStartSpectating()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "InitializeStartSpectating");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_IngameUIManager.B_IngameUIManager_C.IsUserInterfaceHidden
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Param_UserInterfaceIsHidden                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_IngameUIManager_C::IsUserInterfaceHidden(bool* Param_UserInterfaceIsHidden)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "IsUserInterfaceHidden");

	Params::B_IngameUIManager_C_IsUserInterfaceHidden Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_UserInterfaceIsHidden != nullptr)
		*Param_UserInterfaceIsHidden = Parms.Param_UserInterfaceIsHidden;
}


// Function B_IngameUIManager.B_IngameUIManager_C.IsWidgetAlreadyOpen
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UClass*                           WidgetClass                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    IsAlreadyOpen                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_IngameUIManager_C::IsWidgetAlreadyOpen(class UClass* WidgetClass, bool* IsAlreadyOpen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "IsWidgetAlreadyOpen");

	Params::B_IngameUIManager_C_IsWidgetAlreadyOpen Parms{};

	Parms.WidgetClass = WidgetClass;

	UObject::ProcessEvent(Func, &Parms);

	if (IsAlreadyOpen != nullptr)
		*IsAlreadyOpen = Parms.IsAlreadyOpen;
}


// Function B_IngameUIManager.B_IngameUIManager_C.JumpAllWitchesCommand
// (Public, BlueprintCallable, BlueprintEvent)

void UB_IngameUIManager_C::JumpAllWitchesCommand()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "JumpAllWitchesCommand");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_IngameUIManager.B_IngameUIManager_C.OpenScreen
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UUserWidget*                      UserWidget                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    HasFocus                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ZOrder                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_IngameUIManager_C::OpenScreen(class UUserWidget* UserWidget, bool HasFocus, int32 ZOrder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "OpenScreen");

	Params::B_IngameUIManager_C_OpenScreen Parms{};

	Parms.UserWidget = UserWidget;
	Parms.HasFocus = HasFocus;
	Parms.ZOrder = ZOrder;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_IngameUIManager.B_IngameUIManager_C.OpenSubordinateMenu
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    HideCurrentlyOpenedWidgets                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_IngameUIManager_C::OpenSubordinateMenu(bool HideCurrentlyOpenedWidgets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "OpenSubordinateMenu");

	Params::B_IngameUIManager_C_OpenSubordinateMenu Parms{};

	Parms.HideCurrentlyOpenedWidgets = HideCurrentlyOpenedWidgets;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_IngameUIManager.B_IngameUIManager_C.ParseChatCommand
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ChatMessage                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    IsChatCommand                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_IngameUIManager_C::ParseChatCommand(const class FString& ChatMessage, bool* IsChatCommand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "ParseChatCommand");

	Params::B_IngameUIManager_C_ParseChatCommand Parms{};

	Parms.ChatMessage = std::move(ChatMessage);

	UObject::ProcessEvent(Func, &Parms);

	if (IsChatCommand != nullptr)
		*IsChatCommand = Parms.IsChatCommand;
}


// Function B_IngameUIManager.B_IngameUIManager_C.PickRandomTip
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UB_IngameUIManager_C::PickRandomTip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "PickRandomTip");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_IngameUIManager.B_IngameUIManager_C.RefreshFocus
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Force                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_IngameUIManager_C::RefreshFocus(bool Force)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "RefreshFocus");

	Params::B_IngameUIManager_C_RefreshFocus Parms{};

	Parms.Force = Force;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_IngameUIManager.B_IngameUIManager_C.RefreshFocusWhenChatNotOpen
// (Public, BlueprintCallable, BlueprintEvent)

void UB_IngameUIManager_C::RefreshFocusWhenChatNotOpen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "RefreshFocusWhenChatNotOpen");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_IngameUIManager.B_IngameUIManager_C.RefreshHUDVisibility
// (Public, BlueprintCallable, BlueprintEvent)

void UB_IngameUIManager_C::RefreshHUDVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "RefreshHUDVisibility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_IngameUIManager.B_IngameUIManager_C.RefreshVisibility
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UB_IngameUIManager_C::RefreshVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "RefreshVisibility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_IngameUIManager.B_IngameUIManager_C.RefreshWidgetsActive
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UUserWidget*                      WidgetWithFocus                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UB_IngameUIManager_C::RefreshWidgetsActive(class UUserWidget* WidgetWithFocus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "RefreshWidgetsActive");

	Params::B_IngameUIManager_C_RefreshWidgetsActive Parms{};

	Parms.WidgetWithFocus = WidgetWithFocus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_IngameUIManager.B_IngameUIManager_C.ResetAllStatsCommand
// (Public, BlueprintCallable, BlueprintEvent)

void UB_IngameUIManager_C::ResetAllStatsCommand()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "ResetAllStatsCommand");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_IngameUIManager.B_IngameUIManager_C.RunCommand
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ConsoleCommand                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UB_IngameUIManager_C::RunCommand(const class FString& ConsoleCommand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "RunCommand");

	Params::B_IngameUIManager_C_RunCommand Parms{};

	Parms.ConsoleCommand = std::move(ConsoleCommand);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_IngameUIManager.B_IngameUIManager_C.Set Focused Widget Input Mode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWidget*                          InWidgetToFocus                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UB_IngameUIManager_C::Set_Focused_Widget_Input_Mode(class UWidget* InWidgetToFocus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "Set Focused Widget Input Mode");

	Params::B_IngameUIManager_C_Set_Focused_Widget_Input_Mode Parms{};

	Parms.InWidgetToFocus = InWidgetToFocus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_IngameUIManager.B_IngameUIManager_C.SetWorkshopIdCommand
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           WorkshopId                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UB_IngameUIManager_C::SetWorkshopIdCommand(const class FString& WorkshopId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "SetWorkshopIdCommand");

	Params::B_IngameUIManager_C_SetWorkshopIdCommand Parms{};

	Parms.WorkshopId = std::move(WorkshopId);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_IngameUIManager.B_IngameUIManager_C.ShouldInputModeBeGameAndUI
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          Object                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UB_IngameUIManager_C::ShouldInputModeBeGameAndUI(const class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "ShouldInputModeBeGameAndUI");

	Params::B_IngameUIManager_C_ShouldInputModeBeGameAndUI Parms{};

	Parms.Object = Object;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_IngameUIManager.B_IngameUIManager_C.ShowChat
// (Public, BlueprintCallable, BlueprintEvent)

void UB_IngameUIManager_C::ShowChat()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "ShowChat");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_IngameUIManager.B_IngameUIManager_C.ShowCustomization
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ETeamID                                 SelectedTeam                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    OpenViaWardrobe                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_IngameUIManager_C::ShowCustomization(ETeamID SelectedTeam, bool OpenViaWardrobe)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "ShowCustomization");

	Params::B_IngameUIManager_C_ShowCustomization Parms{};

	Parms.SelectedTeam = SelectedTeam;
	Parms.OpenViaWardrobe = OpenViaWardrobe;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_IngameUIManager.B_IngameUIManager_C.ShowDebugMedalCommand
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UB_IngameUIManager_C::ShowDebugMedalCommand()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "ShowDebugMedalCommand");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_IngameUIManager.B_IngameUIManager_C.ShowDropExpCommand
// (Public, BlueprintCallable, BlueprintEvent)

void UB_IngameUIManager_C::ShowDropExpCommand()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "ShowDropExpCommand");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_IngameUIManager.B_IngameUIManager_C.ShowFriendsInvite
// (Public, BlueprintCallable, BlueprintEvent)

void UB_IngameUIManager_C::ShowFriendsInvite()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "ShowFriendsInvite");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_IngameUIManager.B_IngameUIManager_C.ShowGameMessages
// (Public, BlueprintCallable, BlueprintEvent)

void UB_IngameUIManager_C::ShowGameMessages()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "ShowGameMessages");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_IngameUIManager.B_IngameUIManager_C.ShowHelp
// (Public, BlueprintCallable, BlueprintEvent)

void UB_IngameUIManager_C::ShowHelp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "ShowHelp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_IngameUIManager.B_IngameUIManager_C.ShowHUD
// (Public, BlueprintCallable, BlueprintEvent)

void UB_IngameUIManager_C::ShowHUD()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "ShowHUD");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_IngameUIManager.B_IngameUIManager_C.ShowKickPlayerVote
// (Public, BlueprintCallable, BlueprintEvent)

void UB_IngameUIManager_C::ShowKickPlayerVote()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "ShowKickPlayerVote");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_IngameUIManager.B_IngameUIManager_C.ShowKickReason
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerState*                     PlayerToKick                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UB_IngameUIManager_C::ShowKickReason(class APlayerState* PlayerToKick)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "ShowKickReason");

	Params::B_IngameUIManager_C_ShowKickReason Parms{};

	Parms.PlayerToKick = PlayerToKick;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_IngameUIManager.B_IngameUIManager_C.ShowLayoutList
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    SaveMode                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_RememberAfterSaveLayoutAction         RememberAfterSaveAction                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_IngameUIManager_C::ShowLayoutList(bool SaveMode, E_RememberAfterSaveLayoutAction RememberAfterSaveAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "ShowLayoutList");

	Params::B_IngameUIManager_C_ShowLayoutList Parms{};

	Parms.SaveMode = SaveMode;
	Parms.RememberAfterSaveAction = RememberAfterSaveAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_IngameUIManager.B_IngameUIManager_C.ShowMapVote
// (Public, BlueprintCallable, BlueprintEvent)

void UB_IngameUIManager_C::ShowMapVote()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "ShowMapVote");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_IngameUIManager.B_IngameUIManager_C.ShowMedals
// (Public, BlueprintCallable, BlueprintEvent)

void UB_IngameUIManager_C::ShowMedals()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "ShowMedals");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_IngameUIManager.B_IngameUIManager_C.ShowMenu
// (Public, BlueprintCallable, BlueprintEvent)

void UB_IngameUIManager_C::ShowMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "ShowMenu");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_IngameUIManager.B_IngameUIManager_C.ShowMutePlayer
// (Public, BlueprintCallable, BlueprintEvent)

void UB_IngameUIManager_C::ShowMutePlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "ShowMutePlayer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_IngameUIManager.B_IngameUIManager_C.ShowObjectiveResult
// (Public, BlueprintCallable, BlueprintEvent)

void UB_IngameUIManager_C::ShowObjectiveResult()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "ShowObjectiveResult");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_IngameUIManager.B_IngameUIManager_C.ShowPlayerList
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    StopAction                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_IngameUIManager_C::ShowPlayerList(bool StopAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "ShowPlayerList");

	Params::B_IngameUIManager_C_ShowPlayerList Parms{};

	Parms.StopAction = StopAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_IngameUIManager.B_IngameUIManager_C.ShowPrestigeExpCommand
// (Public, BlueprintCallable, BlueprintEvent)

void UB_IngameUIManager_C::ShowPrestigeExpCommand()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "ShowPrestigeExpCommand");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_IngameUIManager.B_IngameUIManager_C.ShowPropCollection
// (Public, BlueprintCallable, BlueprintEvent)

void UB_IngameUIManager_C::ShowPropCollection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "ShowPropCollection");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_IngameUIManager.B_IngameUIManager_C.ShowQuestionDialog
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Title                                                  (BlueprintVisible, BlueprintReadOnly, Parm)
// class FText                             Question                                               (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    OkButton                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    YesButton                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoButton                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CancelButton                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UWB_QuestionDialog_C*             QuestionDialog                                         (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UB_IngameUIManager_C::ShowQuestionDialog(const class FText& Title, const class FText& Question, bool OkButton, bool YesButton, bool NoButton, bool CancelButton, class UWB_QuestionDialog_C** QuestionDialog)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "ShowQuestionDialog");

	Params::B_IngameUIManager_C_ShowQuestionDialog Parms{};

	Parms.Title = std::move(Title);
	Parms.Question = std::move(Question);
	Parms.OkButton = OkButton;
	Parms.YesButton = YesButton;
	Parms.NoButton = NoButton;
	Parms.CancelButton = CancelButton;

	UObject::ProcessEvent(Func, &Parms);

	if (QuestionDialog != nullptr)
		*QuestionDialog = Parms.QuestionDialog;
}


// Function B_IngameUIManager.B_IngameUIManager_C.ShowRandomSelection
// (Public, BlueprintCallable, BlueprintEvent)

void UB_IngameUIManager_C::ShowRandomSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "ShowRandomSelection");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_IngameUIManager.B_IngameUIManager_C.ShowReportReason
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerState*                     PlayerToReport                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UB_IngameUIManager_C::ShowReportReason(class APlayerState* PlayerToReport)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "ShowReportReason");

	Params::B_IngameUIManager_C_ShowReportReason Parms{};

	Parms.PlayerToReport = PlayerToReport;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_IngameUIManager.B_IngameUIManager_C.ShowResult
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EResultType                             ResultType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_IngameUIManager_C::ShowResult(EResultType ResultType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "ShowResult");

	Params::B_IngameUIManager_C_ShowResult Parms{};

	Parms.ResultType = ResultType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_IngameUIManager.B_IngameUIManager_C.ShowRewards
// (Public, BlueprintCallable, BlueprintEvent)

void UB_IngameUIManager_C::ShowRewards()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "ShowRewards");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_IngameUIManager.B_IngameUIManager_C.ShowServerInfo
// (Public, BlueprintCallable, BlueprintEvent)

void UB_IngameUIManager_C::ShowServerInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "ShowServerInfo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_IngameUIManager.B_IngameUIManager_C.ShowServerInfoCommand
// (Public, BlueprintCallable, BlueprintEvent)

void UB_IngameUIManager_C::ShowServerInfoCommand()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "ShowServerInfoCommand");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_IngameUIManager.B_IngameUIManager_C.ShowSkillListPopup
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ETeamID                                 Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ESkillCategory                          SkillCategory                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UWB_SkillSelectionBlock_C*        SkillSelectionBlock                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UB_IngameUIManager_C::ShowSkillListPopup(ETeamID Team, ESkillCategory SkillCategory, class UWB_SkillSelectionBlock_C* SkillSelectionBlock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "ShowSkillListPopup");

	Params::B_IngameUIManager_C_ShowSkillListPopup Parms{};

	Parms.Team = Team;
	Parms.SkillCategory = SkillCategory;
	Parms.SkillSelectionBlock = SkillSelectionBlock;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_IngameUIManager.B_IngameUIManager_C.ShowSkinConfigListPopup
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWB_IngameSkinConfigMenu_C*       Parent                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UB_IngameUIManager_C::ShowSkinConfigListPopup(class UWB_IngameSkinConfigMenu_C* Parent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "ShowSkinConfigListPopup");

	Params::B_IngameUIManager_C_ShowSkinConfigListPopup Parms{};

	Parms.Parent = Parent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_IngameUIManager.B_IngameUIManager_C.ShowTeamSelection
// (Public, BlueprintCallable, BlueprintEvent)

void UB_IngameUIManager_C::ShowTeamSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "ShowTeamSelection");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_IngameUIManager.B_IngameUIManager_C.ShowTeamSelectionObjective
// (Public, BlueprintCallable, BlueprintEvent)

void UB_IngameUIManager_C::ShowTeamSelectionObjective()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "ShowTeamSelectionObjective");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_IngameUIManager.B_IngameUIManager_C.ShowTeamSelectionObjectiveCoop
// (Public, BlueprintCallable, BlueprintEvent)

void UB_IngameUIManager_C::ShowTeamSelectionObjectiveCoop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "ShowTeamSelectionObjectiveCoop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_IngameUIManager.B_IngameUIManager_C.ShowTournamentScore
// (Public, BlueprintCallable, BlueprintEvent)

void UB_IngameUIManager_C::ShowTournamentScore()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "ShowTournamentScore");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_IngameUIManager.B_IngameUIManager_C.ShowUploadLayout
// (Public, BlueprintCallable, BlueprintEvent)

void UB_IngameUIManager_C::ShowUploadLayout()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "ShowUploadLayout");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_IngameUIManager.B_IngameUIManager_C.ShowVoteKick
// (Public, BlueprintCallable, BlueprintEvent)

void UB_IngameUIManager_C::ShowVoteKick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "ShowVoteKick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_IngameUIManager.B_IngameUIManager_C.ToggleVisibility
// (Public, BlueprintCallable, BlueprintEvent)

void UB_IngameUIManager_C::ToggleVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "ToggleVisibility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_IngameUIManager.B_IngameUIManager_C.ToggleWitchJiggleCommand
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Force                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_IngameUIManager_C::ToggleWitchJiggleCommand(int32 Force)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "ToggleWitchJiggleCommand");

	Params::B_IngameUIManager_C_ToggleWitchJiggleCommand Parms{};

	Parms.Force = Force;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_IngameUIManager.B_IngameUIManager_C.TravelToMapCommand
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           MapName                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UB_IngameUIManager_C::TravelToMapCommand(const class FString& MapName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "TravelToMapCommand");

	Params::B_IngameUIManager_C_TravelToMapCommand Parms{};

	Parms.MapName = std::move(MapName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_IngameUIManager.B_IngameUIManager_C.UnhideHUD
// (Public, BlueprintCallable, BlueprintEvent)

void UB_IngameUIManager_C::UnhideHUD()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_IngameUIManager_C", "UnhideHUD");

	UObject::ProcessEvent(Func, nullptr);
}

}

