#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_TaskManager

#include "Basic.hpp"

#include "E_TaskType_structs.hpp"
#include "S_Task_structs.hpp"


namespace SDK::Params
{

// Function B_TaskManager.B_TaskManager_C.GetTask
// 0x0090 (0x0090 - 0x0000)
struct B_TaskManager_C_GetTask final
{
public:
	E_TaskType                                    Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36F1[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_Task                                Task;                                              // 0x0008(0x0040)(Parm, OutParm, HasGetValueTypeHash)
	struct FS_Task                                CallFunc_Map_Find_Value;                           // 0x0048(0x0040)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_TaskManager_C_GetTask) == 0x000008, "Wrong alignment on B_TaskManager_C_GetTask");
static_assert(sizeof(B_TaskManager_C_GetTask) == 0x000090, "Wrong size on B_TaskManager_C_GetTask");
static_assert(offsetof(B_TaskManager_C_GetTask, Type) == 0x000000, "Member 'B_TaskManager_C_GetTask::Type' has a wrong offset!");
static_assert(offsetof(B_TaskManager_C_GetTask, Task) == 0x000008, "Member 'B_TaskManager_C_GetTask::Task' has a wrong offset!");
static_assert(offsetof(B_TaskManager_C_GetTask, CallFunc_Map_Find_Value) == 0x000048, "Member 'B_TaskManager_C_GetTask::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(B_TaskManager_C_GetTask, CallFunc_Map_Find_ReturnValue) == 0x000088, "Member 'B_TaskManager_C_GetTask::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function B_TaskManager.B_TaskManager_C.Initialize
// 0x0078 (0x0078 - 0x0000)
struct B_TaskManager_C_Initialize final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36F2[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x0010(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36F3[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_Task                                CallFunc_GetDataTableRowFromName_OutRow;           // 0x0030(0x0040)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_TaskManager_C_Initialize) == 0x000008, "Wrong alignment on B_TaskManager_C_Initialize");
static_assert(sizeof(B_TaskManager_C_Initialize) == 0x000078, "Wrong size on B_TaskManager_C_Initialize");
static_assert(offsetof(B_TaskManager_C_Initialize, Temp_int_Array_Index_Variable) == 0x000000, "Member 'B_TaskManager_C_Initialize::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_TaskManager_C_Initialize, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'B_TaskManager_C_Initialize::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_TaskManager_C_Initialize, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'B_TaskManager_C_Initialize::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TaskManager_C_Initialize, CallFunc_GetDataTableRowNames_OutRowNames) == 0x000010, "Member 'B_TaskManager_C_Initialize::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(B_TaskManager_C_Initialize, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'B_TaskManager_C_Initialize::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TaskManager_C_Initialize, CallFunc_Array_Get_Item) == 0x000024, "Member 'B_TaskManager_C_Initialize::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_TaskManager_C_Initialize, CallFunc_Less_IntInt_ReturnValue) == 0x00002C, "Member 'B_TaskManager_C_Initialize::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TaskManager_C_Initialize, CallFunc_GetDataTableRowFromName_OutRow) == 0x000030, "Member 'B_TaskManager_C_Initialize::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(B_TaskManager_C_Initialize, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000070, "Member 'B_TaskManager_C_Initialize::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");

// Function B_TaskManager.B_TaskManager_C.SetPrerequisiteTasks
// 0x0050 (0x0050 - 0x0000)
struct B_TaskManager_C_SetPrerequisiteTasks final
{
public:
	TMap<E_TaskType, E_TaskType>                  K2Node_MakeMap_Map;                                // 0x0000(0x0050)()
};
static_assert(alignof(B_TaskManager_C_SetPrerequisiteTasks) == 0x000008, "Wrong alignment on B_TaskManager_C_SetPrerequisiteTasks");
static_assert(sizeof(B_TaskManager_C_SetPrerequisiteTasks) == 0x000050, "Wrong size on B_TaskManager_C_SetPrerequisiteTasks");
static_assert(offsetof(B_TaskManager_C_SetPrerequisiteTasks, K2Node_MakeMap_Map) == 0x000000, "Member 'B_TaskManager_C_SetPrerequisiteTasks::K2Node_MakeMap_Map' has a wrong offset!");

}

