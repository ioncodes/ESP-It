#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_TrapProjectile

#include "Basic.hpp"

#include "B_TrapProjectile_classes.hpp"
#include "B_TrapProjectile_parameters.hpp"


namespace SDK
{

// Function B_TrapProjectile.B_TrapProjectile_C.AddForceToPrimitiveComponent
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              SuckComponent                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    IsWitch                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_TrapProjectile_C::AddForceToPrimitiveComponent(class UPrimitiveComponent* SuckComponent, bool IsWitch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_TrapProjectile_C", "AddForceToPrimitiveComponent");

	Params::B_TrapProjectile_C_AddForceToPrimitiveComponent Parms{};

	Parms.SuckComponent = SuckComponent;
	Parms.IsWitch = IsWitch;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_TrapProjectile.B_TrapProjectile_C.BeginOverlapPropSphere
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OverlapActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OverlapPrimitiveComponent                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AB_TrapProjectile_C::BeginOverlapPropSphere(class AActor* OverlapActor, class UPrimitiveComponent* OverlapPrimitiveComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_TrapProjectile_C", "BeginOverlapPropSphere");

	Params::B_TrapProjectile_C_BeginOverlapPropSphere Parms{};

	Parms.OverlapActor = OverlapActor;
	Parms.OverlapPrimitiveComponent = OverlapPrimitiveComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_TrapProjectile.B_TrapProjectile_C.BeginOverlapWitchSphere
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OverlapActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OverlapPrimitiveComponent                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AB_TrapProjectile_C::BeginOverlapWitchSphere(class AActor* OverlapActor, class UPrimitiveComponent* OverlapPrimitiveComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_TrapProjectile_C", "BeginOverlapWitchSphere");

	Params::B_TrapProjectile_C_BeginOverlapWitchSphere Parms{};

	Parms.OverlapActor = OverlapActor;
	Parms.OverlapPrimitiveComponent = OverlapPrimitiveComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_TrapProjectile.B_TrapProjectile_C.BeginPlaySetup
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AB_TrapProjectile_C::BeginPlaySetup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_TrapProjectile_C", "BeginPlaySetup");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_TrapProjectile.B_TrapProjectile_C.BndEvt__B_TrapProjectile_OuterSphere_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void AB_TrapProjectile_C::BndEvt__B_TrapProjectile_OuterSphere_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_TrapProjectile_C", "BndEvt__B_TrapProjectile_OuterSphere_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature");

	Params::B_TrapProjectile_C_BndEvt__B_TrapProjectile_OuterSphere_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_TrapProjectile.B_TrapProjectile_C.BndEvt__B_TrapProjectile_OuterSphere_K2Node_ComponentBoundEvent_7_ComponentEndOverlapSignature__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_TrapProjectile_C::BndEvt__B_TrapProjectile_OuterSphere_K2Node_ComponentBoundEvent_7_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_TrapProjectile_C", "BndEvt__B_TrapProjectile_OuterSphere_K2Node_ComponentBoundEvent_7_ComponentEndOverlapSignature__DelegateSignature");

	Params::B_TrapProjectile_C_BndEvt__B_TrapProjectile_OuterSphere_K2Node_ComponentBoundEvent_7_ComponentEndOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_TrapProjectile.B_TrapProjectile_C.BndEvt__B_TrapProjectile_PropSuckSphere_K2Node_ComponentBoundEvent_8_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void AB_TrapProjectile_C::BndEvt__B_TrapProjectile_PropSuckSphere_K2Node_ComponentBoundEvent_8_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_TrapProjectile_C", "BndEvt__B_TrapProjectile_PropSuckSphere_K2Node_ComponentBoundEvent_8_ComponentBeginOverlapSignature__DelegateSignature");

	Params::B_TrapProjectile_C_BndEvt__B_TrapProjectile_PropSuckSphere_K2Node_ComponentBoundEvent_8_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_TrapProjectile.B_TrapProjectile_C.BndEvt__B_TrapProjectile_PropSuckSphere_K2Node_ComponentBoundEvent_9_ComponentEndOverlapSignature__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_TrapProjectile_C::BndEvt__B_TrapProjectile_PropSuckSphere_K2Node_ComponentBoundEvent_9_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_TrapProjectile_C", "BndEvt__B_TrapProjectile_PropSuckSphere_K2Node_ComponentBoundEvent_9_ComponentEndOverlapSignature__DelegateSignature");

	Params::B_TrapProjectile_C_BndEvt__B_TrapProjectile_PropSuckSphere_K2Node_ComponentBoundEvent_9_ComponentEndOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_TrapProjectile.B_TrapProjectile_C.BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FVector                          NormalImpulse                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void AB_TrapProjectile_C::BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_TrapProjectile_C", "BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature");

	Params::B_TrapProjectile_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_TrapProjectile.B_TrapProjectile_C.EndOverlapPropSphere
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OverlapActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OverlapPrimitiveComponent                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AB_TrapProjectile_C::EndOverlapPropSphere(class AActor* OverlapActor, class UPrimitiveComponent* OverlapPrimitiveComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_TrapProjectile_C", "EndOverlapPropSphere");

	Params::B_TrapProjectile_C_EndOverlapPropSphere Parms{};

	Parms.OverlapActor = OverlapActor;
	Parms.OverlapPrimitiveComponent = OverlapPrimitiveComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_TrapProjectile.B_TrapProjectile_C.EndOverlapWitchSphere
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OverlapActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OverlapPrimitiveComponent                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AB_TrapProjectile_C::EndOverlapWitchSphere(class AActor* OverlapActor, class UPrimitiveComponent* OverlapPrimitiveComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_TrapProjectile_C", "EndOverlapWitchSphere");

	Params::B_TrapProjectile_C_EndOverlapWitchSphere Parms{};

	Parms.OverlapActor = OverlapActor;
	Parms.OverlapPrimitiveComponent = OverlapPrimitiveComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_TrapProjectile.B_TrapProjectile_C.ExecuteUbergraph_B_TrapProjectile
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_TrapProjectile_C::ExecuteUbergraph_B_TrapProjectile(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_TrapProjectile_C", "ExecuteUbergraph_B_TrapProjectile");

	Params::B_TrapProjectile_C_ExecuteUbergraph_B_TrapProjectile Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_TrapProjectile.B_TrapProjectile_C.GetSuckedWitchesCount
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Count                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_TrapProjectile_C::GetSuckedWitchesCount(int32* Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_TrapProjectile_C", "GetSuckedWitchesCount");

	Params::B_TrapProjectile_C_GetSuckedWitchesCount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Count != nullptr)
		*Count = Parms.Count;
}


// Function B_TrapProjectile.B_TrapProjectile_C.IncrementLifeTime
// (Protected, BlueprintCallable, BlueprintEvent)

void AB_TrapProjectile_C::IncrementLifeTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_TrapProjectile_C", "IncrementLifeTime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_TrapProjectile.B_TrapProjectile_C.InitializeRules
// (Public, BlueprintCallable, BlueprintEvent)

void AB_TrapProjectile_C::InitializeRules()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_TrapProjectile_C", "InitializeRules");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_TrapProjectile.B_TrapProjectile_C.LaunchCharacter
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ACharacter*                       Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    IsWitch                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_TrapProjectile_C::LaunchCharacter(class ACharacter* Character, bool IsWitch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_TrapProjectile_C", "LaunchCharacter");

	Params::B_TrapProjectile_C_LaunchCharacter Parms{};

	Parms.Character = Character;
	Parms.IsWitch = IsWitch;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_TrapProjectile.B_TrapProjectile_C.OnReadyForTearUp__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void AB_TrapProjectile_C::OnReadyForTearUp__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_TrapProjectile_C", "OnReadyForTearUp__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_TrapProjectile.B_TrapProjectile_C.PlayDestroyEffects
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    WitchTrapped                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_TrapProjectile_C::PlayDestroyEffects(const struct FVector& Location, bool WitchTrapped)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_TrapProjectile_C", "PlayDestroyEffects");

	Params::B_TrapProjectile_C_PlayDestroyEffects Parms{};

	Parms.Location = std::move(Location);
	Parms.WitchTrapped = WitchTrapped;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_TrapProjectile.B_TrapProjectile_C.PlayDestroyEffectsMulti
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    WitchTrapped                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_TrapProjectile_C::PlayDestroyEffectsMulti(const struct FVector& Location, bool WitchTrapped)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_TrapProjectile_C", "PlayDestroyEffectsMulti");

	Params::B_TrapProjectile_C_PlayDestroyEffectsMulti Parms{};

	Parms.Location = std::move(Location);
	Parms.WitchTrapped = WitchTrapped;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_TrapProjectile.B_TrapProjectile_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AB_TrapProjectile_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_TrapProjectile_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_TrapProjectile.B_TrapProjectile_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_TrapProjectile_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_TrapProjectile_C", "ReceiveTick");

	Params::B_TrapProjectile_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_TrapProjectile.B_TrapProjectile_C.StartSucking
// (Protected, BlueprintCallable, BlueprintEvent)

void AB_TrapProjectile_C::StartSucking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_TrapProjectile_C", "StartSucking");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_TrapProjectile.B_TrapProjectile_C.StartSuckingMulti
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void AB_TrapProjectile_C::StartSuckingMulti()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_TrapProjectile_C", "StartSuckingMulti");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_TrapProjectile.B_TrapProjectile_C.StartVacuum
// (Protected, BlueprintCallable, BlueprintEvent)

void AB_TrapProjectile_C::StartVacuum()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_TrapProjectile_C", "StartVacuum");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_TrapProjectile.B_TrapProjectile_C.StartWitchDebuff
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_TrapProjectile_C::StartWitchDebuff(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_TrapProjectile_C", "StartWitchDebuff");

	Params::B_TrapProjectile_C_StartWitchDebuff Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_TrapProjectile.B_TrapProjectile_C.StopHitDetectionAndMakeHeavy
// (Protected, BlueprintCallable, BlueprintEvent)

void AB_TrapProjectile_C::StopHitDetectionAndMakeHeavy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_TrapProjectile_C", "StopHitDetectionAndMakeHeavy");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_TrapProjectile.B_TrapProjectile_C.StopWitchDebuff
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_TrapProjectile_C::StopWitchDebuff(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_TrapProjectile_C", "StopWitchDebuff");

	Params::B_TrapProjectile_C_StopWitchDebuff Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_TrapProjectile.B_TrapProjectile_C.SuckPrimitiveComponent
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              SuckComponent                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AB_TrapProjectile_C::SuckPrimitiveComponent(class UPrimitiveComponent* SuckComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_TrapProjectile_C", "SuckPrimitiveComponent");

	Params::B_TrapProjectile_C_SuckPrimitiveComponent Parms{};

	Parms.SuckComponent = SuckComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_TrapProjectile.B_TrapProjectile_C.SuckPrimitiveComponentsAndLaunchWitches
// (Protected, BlueprintCallable, BlueprintEvent)

void AB_TrapProjectile_C::SuckPrimitiveComponentsAndLaunchWitches()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_TrapProjectile_C", "SuckPrimitiveComponentsAndLaunchWitches");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_TrapProjectile.B_TrapProjectile_C.SuckWitch
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AB_Witch_C*                       SuckWitch_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_TrapProjectile_C::SuckWitch(class AB_Witch_C* SuckWitch_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_TrapProjectile_C", "SuckWitch");

	Params::B_TrapProjectile_C_SuckWitch Parms{};

	Parms.SuckWitch_0 = SuckWitch_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_TrapProjectile.B_TrapProjectile_C.TearDown
// (Protected, BlueprintCallable, BlueprintEvent)

void AB_TrapProjectile_C::TearDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_TrapProjectile_C", "TearDown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_TrapProjectile.B_TrapProjectile_C.TearDownMulticast
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void AB_TrapProjectile_C::TearDownMulticast()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_TrapProjectile_C", "TearDownMulticast");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_TrapProjectile.B_TrapProjectile_C.TearDownPoolObject
// (Public, BlueprintCallable, BlueprintEvent)

void AB_TrapProjectile_C::TearDownPoolObject()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_TrapProjectile_C", "TearDownPoolObject");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_TrapProjectile.B_TrapProjectile_C.TearUp
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Owner_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            Instigator_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_TrapProjectile_C::TearUp(const struct FTransform& SpawnTransform, class AActor* Owner_0, class APawn* Instigator_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_TrapProjectile_C", "TearUp");

	Params::B_TrapProjectile_C_TearUp Parms{};

	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.Owner_0 = Owner_0;
	Parms.Instigator_0 = Instigator_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_TrapProjectile.B_TrapProjectile_C.TearUpMulticast
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Owner_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            Instigator_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_TrapProjectile_C::TearUpMulticast(const struct FTransform& SpawnTransform, class AActor* Owner_0, class APawn* Instigator_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_TrapProjectile_C", "TearUpMulticast");

	Params::B_TrapProjectile_C_TearUpMulticast Parms{};

	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.Owner_0 = Owner_0;
	Parms.Instigator_0 = Instigator_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_TrapProjectile.B_TrapProjectile_C.TearUpPoolObject
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Owner_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            Instigator_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_TrapProjectile_C::TearUpPoolObject(const struct FTransform& SpawnTransform, class AActor* Owner_0, class APawn* Instigator_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_TrapProjectile_C", "TearUpPoolObject");

	Params::B_TrapProjectile_C_TearUpPoolObject Parms{};

	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.Owner_0 = Owner_0;
	Parms.Instigator_0 = Instigator_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_TrapProjectile.B_TrapProjectile_C.UpdateEffect
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WitchCount                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_TrapProjectile_C::UpdateEffect(int32 WitchCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_TrapProjectile_C", "UpdateEffect");

	Params::B_TrapProjectile_C_UpdateEffect Parms{};

	Parms.WitchCount = WitchCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_TrapProjectile.B_TrapProjectile_C.UpdateEffectMulti
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WitchCount                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_TrapProjectile_C::UpdateEffectMulti(int32 WitchCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_TrapProjectile_C", "UpdateEffectMulti");

	Params::B_TrapProjectile_C_UpdateEffectMulti Parms{};

	Parms.WitchCount = WitchCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_TrapProjectile.B_TrapProjectile_C.UpdateSoundPitches
// (Protected, BlueprintCallable, BlueprintEvent)

void AB_TrapProjectile_C::UpdateSoundPitches()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_TrapProjectile_C", "UpdateSoundPitches");

	UObject::ProcessEvent(Func, nullptr);
}

}

