#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_GameRulesTabs

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "WB_CategoryMenuScreen_classes.hpp"
#include "ESalvageCategory_structs.hpp"
#include "E_QuestionAnswer_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WB_GameRulesTabs.WB_GameRulesTabs_C
// 0x0118 (0x03F8 - 0x02E0)
class UWB_GameRulesTabs_C final : public UWB_CategoryMenuScreen_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_WB_GameRulesTabs_C;                 // 0x02E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWB_Button_C*                           Button_Back;                                       // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_Button_C*                           Button_DefaultAll;                                 // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_Button_C*                           Button_SaveLoad;                                   // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTileView*                              HunterPowerupTileView;                             // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTileView*                              HunterTileView;                                    // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ControllerIcon_C*                   LeftShoulderIcon;                                  // 0x0310(0x0008)(ExportObject, ZeroConstructor, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScrollBox*                             Mods;                                              // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTileView*                              ModTileView;                                       // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScrollBox*                             Powerups;                                          // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ControllerIcon_C*                   RightShoulderIcon;                                 // 0x0330(0x0008)(ExportObject, ZeroConstructor, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        RulesSwitcher;                                     // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScrollBox*                             Skills;                                            // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_TabButton_C*                        TabButton_Match;                                   // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_TabButton_C*                        TabButton_Mods;                                    // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_TabButton_C*                        TabButton_Powerups;                                // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_TabButton_C*                        TabButton_Skills;                                  // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_MatchRules_C*                       WB_MatchRules;                                     // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTileView*                              WitchPowerupTileView;                              // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTileView*                              WitchTileView;                                     // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TArray<class UWB_TabButton_C*>                Buttons;                                           // 0x0380(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UWidget*>                        RuleTabs;                                          // 0x0390(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TMap<class UClass*, class UWidget*>           FocusedElements;                                   // 0x03A0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          bShouldGoBackAfterAction;                          // 0x03F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CurrentSkillsHunter;                               // 0x03F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__Button_Apply_K2Node_ComponentBoundEvent_0_Clicked__DelegateSignature();
	void BndEvt__TabButton_Audio_K2Node_ComponentBoundEvent_0_Clicked__DelegateSignature();
	void BndEvt__TabButton_Input_K2Node_ComponentBoundEvent_1_Clicked__DelegateSignature();
	void BndEvt__TabButton_Video_K2Node_ComponentBoundEvent_32_Clicked__DelegateSignature();
	void BndEvt__WB_Button_K2Node_ComponentBoundEvent_58_Clicked__DelegateSignature();
	void BndEvt__WB_GameRulesTabs_Button_DefaultAll_K2Node_ComponentBoundEvent_2_Clicked__DelegateSignature();
	void BndEvt__WB_GameRulesTabs_TabButton_Powerups_K2Node_ComponentBoundEvent_3_Clicked__DelegateSignature();
	void ChangeControllerLayout(bool GamePadMode);
	void Construct();
	void ControllerTab(const struct FKey& Key);
	void ExecuteUbergraph_WB_GameRulesTabs(int32 EntryPoint);
	void FocusStoredWidget();
	ESlateVisibility Get_Background_Visibility_0();
	void GetActiveTab(class UWidget** ActiveTab);
	void GetButtonDataforClass(class UClass* Param_Class, TArray<class UB_TileViewData_C*>* ButtonData, TArray<bool>* HasFocus);
	void GetButtonDataForPowerup(TArray<class UB_TileViewData_C*>* ButtonData, TArray<bool>* HasFocus);
	ESlateVisibility GetControllerIconVisibility();
	void GetIndividualItemDataAndFocus(class UUserWidget* CategoryButton, ESalvageCategory SalvageCategory, TArray<class UB_TileViewData_C*>* Data, TArray<bool>* FocusNeeded);
	void GetInitialFocusWidget(class UUserWidget** InitialFocusWidget);
	bool GetShouldGoBackAfterAction();
	class UWidget* GetWidgetLeftToCurrent();
	class UWidget* GetWidgetRightToCurrent();
	void HandleRefocus();
	class UWidget* HunterPowerupEscapeNav(EUINavigation Param_Navigation);
	class UWidget* HunterTileViewEscapeNav(EUINavigation Param_Navigation);
	void InitControllerLayout();
	void OnApply();
	void OnBack();
	struct FEventReply OnFocusReceived(const struct FGeometry& MyGeometry, const struct FFocusEvent& InFocusEvent);
	void OnGamePadModeChanged_Event(bool bGamePadMode);
	void OnGamepadTab(const struct FKey& Key);
	void OnSpecialAction();
	void PreConstruct(bool IsDesignTime);
	void ResetAllToDefault();
	void SaveAnswered(E_QuestionAnswer Answer);
	void SetActiveTab(class UWidget* RulesTab);
	void StoreFocusedWidget();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void UpdateCategoryContent(class UUserWidget* CategoryButton, ESalvageCategory SalvageCategory);
	void UpdateTabButtonStyles();
	class UWidget* WitchPowerupEscapeNav(EUINavigation Param_Navigation);
	class UWidget* WitchTileViewEscapeNav(EUINavigation Param_Navigation);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WB_GameRulesTabs_C">();
	}
	static class UWB_GameRulesTabs_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWB_GameRulesTabs_C>();
	}
};
static_assert(alignof(UWB_GameRulesTabs_C) == 0x000008, "Wrong alignment on UWB_GameRulesTabs_C");
static_assert(sizeof(UWB_GameRulesTabs_C) == 0x0003F8, "Wrong size on UWB_GameRulesTabs_C");
static_assert(offsetof(UWB_GameRulesTabs_C, UberGraphFrame_WB_GameRulesTabs_C) == 0x0002E0, "Member 'UWB_GameRulesTabs_C::UberGraphFrame_WB_GameRulesTabs_C' has a wrong offset!");
static_assert(offsetof(UWB_GameRulesTabs_C, Button_Back) == 0x0002E8, "Member 'UWB_GameRulesTabs_C::Button_Back' has a wrong offset!");
static_assert(offsetof(UWB_GameRulesTabs_C, Button_DefaultAll) == 0x0002F0, "Member 'UWB_GameRulesTabs_C::Button_DefaultAll' has a wrong offset!");
static_assert(offsetof(UWB_GameRulesTabs_C, Button_SaveLoad) == 0x0002F8, "Member 'UWB_GameRulesTabs_C::Button_SaveLoad' has a wrong offset!");
static_assert(offsetof(UWB_GameRulesTabs_C, HunterPowerupTileView) == 0x000300, "Member 'UWB_GameRulesTabs_C::HunterPowerupTileView' has a wrong offset!");
static_assert(offsetof(UWB_GameRulesTabs_C, HunterTileView) == 0x000308, "Member 'UWB_GameRulesTabs_C::HunterTileView' has a wrong offset!");
static_assert(offsetof(UWB_GameRulesTabs_C, LeftShoulderIcon) == 0x000310, "Member 'UWB_GameRulesTabs_C::LeftShoulderIcon' has a wrong offset!");
static_assert(offsetof(UWB_GameRulesTabs_C, Mods) == 0x000318, "Member 'UWB_GameRulesTabs_C::Mods' has a wrong offset!");
static_assert(offsetof(UWB_GameRulesTabs_C, ModTileView) == 0x000320, "Member 'UWB_GameRulesTabs_C::ModTileView' has a wrong offset!");
static_assert(offsetof(UWB_GameRulesTabs_C, Powerups) == 0x000328, "Member 'UWB_GameRulesTabs_C::Powerups' has a wrong offset!");
static_assert(offsetof(UWB_GameRulesTabs_C, RightShoulderIcon) == 0x000330, "Member 'UWB_GameRulesTabs_C::RightShoulderIcon' has a wrong offset!");
static_assert(offsetof(UWB_GameRulesTabs_C, RulesSwitcher) == 0x000338, "Member 'UWB_GameRulesTabs_C::RulesSwitcher' has a wrong offset!");
static_assert(offsetof(UWB_GameRulesTabs_C, Skills) == 0x000340, "Member 'UWB_GameRulesTabs_C::Skills' has a wrong offset!");
static_assert(offsetof(UWB_GameRulesTabs_C, TabButton_Match) == 0x000348, "Member 'UWB_GameRulesTabs_C::TabButton_Match' has a wrong offset!");
static_assert(offsetof(UWB_GameRulesTabs_C, TabButton_Mods) == 0x000350, "Member 'UWB_GameRulesTabs_C::TabButton_Mods' has a wrong offset!");
static_assert(offsetof(UWB_GameRulesTabs_C, TabButton_Powerups) == 0x000358, "Member 'UWB_GameRulesTabs_C::TabButton_Powerups' has a wrong offset!");
static_assert(offsetof(UWB_GameRulesTabs_C, TabButton_Skills) == 0x000360, "Member 'UWB_GameRulesTabs_C::TabButton_Skills' has a wrong offset!");
static_assert(offsetof(UWB_GameRulesTabs_C, WB_MatchRules) == 0x000368, "Member 'UWB_GameRulesTabs_C::WB_MatchRules' has a wrong offset!");
static_assert(offsetof(UWB_GameRulesTabs_C, WitchPowerupTileView) == 0x000370, "Member 'UWB_GameRulesTabs_C::WitchPowerupTileView' has a wrong offset!");
static_assert(offsetof(UWB_GameRulesTabs_C, WitchTileView) == 0x000378, "Member 'UWB_GameRulesTabs_C::WitchTileView' has a wrong offset!");
static_assert(offsetof(UWB_GameRulesTabs_C, Buttons) == 0x000380, "Member 'UWB_GameRulesTabs_C::Buttons' has a wrong offset!");
static_assert(offsetof(UWB_GameRulesTabs_C, RuleTabs) == 0x000390, "Member 'UWB_GameRulesTabs_C::RuleTabs' has a wrong offset!");
static_assert(offsetof(UWB_GameRulesTabs_C, FocusedElements) == 0x0003A0, "Member 'UWB_GameRulesTabs_C::FocusedElements' has a wrong offset!");
static_assert(offsetof(UWB_GameRulesTabs_C, bShouldGoBackAfterAction) == 0x0003F0, "Member 'UWB_GameRulesTabs_C::bShouldGoBackAfterAction' has a wrong offset!");
static_assert(offsetof(UWB_GameRulesTabs_C, CurrentSkillsHunter) == 0x0003F1, "Member 'UWB_GameRulesTabs_C::CurrentSkillsHunter' has a wrong offset!");

}

