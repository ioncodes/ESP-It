#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_ObjectiveMatchManager

#include "Basic.hpp"

#include "AdvancedSessions_structs.hpp"
#include "ETeamID_structs.hpp"
#include "E_ObjectiveTeam_structs.hpp"


namespace SDK::Params
{

// Function B_ObjectiveMatchManager.B_ObjectiveMatchManager_C.AddPlayerWithId
// 0x0028 (0x0028 - 0x0000)
struct B_ObjectiveMatchManager_C_AddPlayerWithId final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UB_ObjectiveMatchPlayerState_C*         ObjectiveMatchPlayerState;                         // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_ObjectiveMatchPlayerState_C*         NewObjectiveMatchPlayerState;                      // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_ObjectiveMatchPlayerState_C*         CallFunc_CreateObject_Object;                      // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_ObjectiveMatchManager_C_AddPlayerWithId) == 0x000008, "Wrong alignment on B_ObjectiveMatchManager_C_AddPlayerWithId");
static_assert(sizeof(B_ObjectiveMatchManager_C_AddPlayerWithId) == 0x000028, "Wrong size on B_ObjectiveMatchManager_C_AddPlayerWithId");
static_assert(offsetof(B_ObjectiveMatchManager_C_AddPlayerWithId, PlayerId) == 0x000000, "Member 'B_ObjectiveMatchManager_C_AddPlayerWithId::PlayerId' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_AddPlayerWithId, ObjectiveMatchPlayerState) == 0x000010, "Member 'B_ObjectiveMatchManager_C_AddPlayerWithId::ObjectiveMatchPlayerState' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_AddPlayerWithId, NewObjectiveMatchPlayerState) == 0x000018, "Member 'B_ObjectiveMatchManager_C_AddPlayerWithId::NewObjectiveMatchPlayerState' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_AddPlayerWithId, CallFunc_CreateObject_Object) == 0x000020, "Member 'B_ObjectiveMatchManager_C_AddPlayerWithId::CallFunc_CreateObject_Object' has a wrong offset!");

// Function B_ObjectiveMatchManager.B_ObjectiveMatchManager_C.AddRoundState
// 0x0010 (0x0010 - 0x0000)
struct B_ObjectiveMatchManager_C_AddRoundState final
{
public:
	class UB_ObjectiveRoundState_C*               RoundState;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_ObjectiveMatchManager_C_AddRoundState) == 0x000008, "Wrong alignment on B_ObjectiveMatchManager_C_AddRoundState");
static_assert(sizeof(B_ObjectiveMatchManager_C_AddRoundState) == 0x000010, "Wrong size on B_ObjectiveMatchManager_C_AddRoundState");
static_assert(offsetof(B_ObjectiveMatchManager_C_AddRoundState, RoundState) == 0x000000, "Member 'B_ObjectiveMatchManager_C_AddRoundState::RoundState' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_AddRoundState, CallFunc_Array_Add_ReturnValue) == 0x000008, "Member 'B_ObjectiveMatchManager_C_AddRoundState::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function B_ObjectiveMatchManager.B_ObjectiveMatchManager_C.AddTeamWin
// 0x0010 (0x0010 - 0x0000)
struct B_ObjectiveMatchManager_C_AddTeamWin final
{
public:
	E_ObjectiveTeam                               Team;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D59[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Map_Find_Value;                           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D5A[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_ObjectiveMatchManager_C_AddTeamWin) == 0x000004, "Wrong alignment on B_ObjectiveMatchManager_C_AddTeamWin");
static_assert(sizeof(B_ObjectiveMatchManager_C_AddTeamWin) == 0x000010, "Wrong size on B_ObjectiveMatchManager_C_AddTeamWin");
static_assert(offsetof(B_ObjectiveMatchManager_C_AddTeamWin, Team) == 0x000000, "Member 'B_ObjectiveMatchManager_C_AddTeamWin::Team' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_AddTeamWin, CallFunc_Map_Find_Value) == 0x000004, "Member 'B_ObjectiveMatchManager_C_AddTeamWin::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_AddTeamWin, CallFunc_Map_Find_ReturnValue) == 0x000008, "Member 'B_ObjectiveMatchManager_C_AddTeamWin::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_AddTeamWin, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'B_ObjectiveMatchManager_C_AddTeamWin::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function B_ObjectiveMatchManager.B_ObjectiveMatchManager_C.CanTeamSurrender
// 0x0050 (0x0050 - 0x0000)
struct B_ObjectiveMatchManager_C_CanTeamSurrender final
{
public:
	ETeamID                                       TeamToSurrender;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D5B[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_GameState_C*                         GameState;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CanSurrender;                                      // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D5C[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MembersInTeam;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D5D[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerState*                           CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D5E[0x1];                                     // 0x003B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D5F[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D60[0x2];                                     // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_ObjectiveMatchManager_C_CanTeamSurrender) == 0x000008, "Wrong alignment on B_ObjectiveMatchManager_C_CanTeamSurrender");
static_assert(sizeof(B_ObjectiveMatchManager_C_CanTeamSurrender) == 0x000050, "Wrong size on B_ObjectiveMatchManager_C_CanTeamSurrender");
static_assert(offsetof(B_ObjectiveMatchManager_C_CanTeamSurrender, TeamToSurrender) == 0x000000, "Member 'B_ObjectiveMatchManager_C_CanTeamSurrender::TeamToSurrender' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_CanTeamSurrender, GameState) == 0x000008, "Member 'B_ObjectiveMatchManager_C_CanTeamSurrender::GameState' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_CanTeamSurrender, CanSurrender) == 0x000010, "Member 'B_ObjectiveMatchManager_C_CanTeamSurrender::CanSurrender' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_CanTeamSurrender, MembersInTeam) == 0x000014, "Member 'B_ObjectiveMatchManager_C_CanTeamSurrender::MembersInTeam' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_CanTeamSurrender, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'B_ObjectiveMatchManager_C_CanTeamSurrender::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_CanTeamSurrender, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'B_ObjectiveMatchManager_C_CanTeamSurrender::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_CanTeamSurrender, Temp_int_Array_Index_Variable) == 0x000020, "Member 'B_ObjectiveMatchManager_C_CanTeamSurrender::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_CanTeamSurrender, Temp_int_Variable) == 0x000024, "Member 'B_ObjectiveMatchManager_C_CanTeamSurrender::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_CanTeamSurrender, CallFunc_Array_Get_Item) == 0x000028, "Member 'B_ObjectiveMatchManager_C_CanTeamSurrender::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_CanTeamSurrender, K2Node_DynamicCast_AsB_Player_State) == 0x000030, "Member 'B_ObjectiveMatchManager_C_CanTeamSurrender::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_CanTeamSurrender, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'B_ObjectiveMatchManager_C_CanTeamSurrender::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_CanTeamSurrender, CallFunc_Not_PreBool_ReturnValue) == 0x000039, "Member 'B_ObjectiveMatchManager_C_CanTeamSurrender::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_CanTeamSurrender, CallFunc_Less_IntInt_ReturnValue) == 0x00003A, "Member 'B_ObjectiveMatchManager_C_CanTeamSurrender::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_CanTeamSurrender, CallFunc_Add_IntInt_ReturnValue) == 0x00003C, "Member 'B_ObjectiveMatchManager_C_CanTeamSurrender::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_CanTeamSurrender, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000040, "Member 'B_ObjectiveMatchManager_C_CanTeamSurrender::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_CanTeamSurrender, Temp_int_Loop_Counter_Variable) == 0x000044, "Member 'B_ObjectiveMatchManager_C_CanTeamSurrender::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_CanTeamSurrender, CallFunc_BooleanAND_ReturnValue) == 0x000048, "Member 'B_ObjectiveMatchManager_C_CanTeamSurrender::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_CanTeamSurrender, CallFunc_Less_IntInt_ReturnValue_1) == 0x000049, "Member 'B_ObjectiveMatchManager_C_CanTeamSurrender::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_CanTeamSurrender, CallFunc_Add_IntInt_ReturnValue_1) == 0x00004C, "Member 'B_ObjectiveMatchManager_C_CanTeamSurrender::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function B_ObjectiveMatchManager.B_ObjectiveMatchManager_C.GetIntactTeam
// 0x0070 (0x0070 - 0x0000)
struct B_ObjectiveMatchManager_C_GetIntactTeam final
{
public:
	class AB_GameState_C*                         GameState;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	E_ObjectiveTeam                               Team;                                              // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D61[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TeamBConnections;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TeamAConnections;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D62[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ObjectiveTeam                               Temp_byte_Variable;                                // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D63[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D64[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ObjectiveTeam                               Temp_byte_Variable_1;                              // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D65[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D66[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_ObjectiveMatchPlayerState_C*         CallFunc_GetObjectiveMatchPlayerState_ObjectiveMatchPlayerState; // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D67[0x1];                                     // 0x005B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ObjectiveTeam                               Temp_byte_Variable_2;                              // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ObjectiveTeam                               K2Node_Select_Default;                             // 0x0063(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ObjectiveTeam                               K2Node_Select_Default_1;                           // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D68[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_ObjectiveMatchManager_C_GetIntactTeam) == 0x000008, "Wrong alignment on B_ObjectiveMatchManager_C_GetIntactTeam");
static_assert(sizeof(B_ObjectiveMatchManager_C_GetIntactTeam) == 0x000070, "Wrong size on B_ObjectiveMatchManager_C_GetIntactTeam");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetIntactTeam, GameState) == 0x000000, "Member 'B_ObjectiveMatchManager_C_GetIntactTeam::GameState' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetIntactTeam, Team) == 0x000008, "Member 'B_ObjectiveMatchManager_C_GetIntactTeam::Team' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetIntactTeam, TeamBConnections) == 0x00000C, "Member 'B_ObjectiveMatchManager_C_GetIntactTeam::TeamBConnections' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetIntactTeam, TeamAConnections) == 0x000010, "Member 'B_ObjectiveMatchManager_C_GetIntactTeam::TeamAConnections' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetIntactTeam, Temp_bool_Variable) == 0x000014, "Member 'B_ObjectiveMatchManager_C_GetIntactTeam::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetIntactTeam, CallFunc_IsValid_ReturnValue) == 0x000015, "Member 'B_ObjectiveMatchManager_C_GetIntactTeam::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetIntactTeam, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'B_ObjectiveMatchManager_C_GetIntactTeam::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetIntactTeam, Temp_byte_Variable) == 0x00001C, "Member 'B_ObjectiveMatchManager_C_GetIntactTeam::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetIntactTeam, Temp_int_Variable) == 0x000020, "Member 'B_ObjectiveMatchManager_C_GetIntactTeam::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetIntactTeam, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'B_ObjectiveMatchManager_C_GetIntactTeam::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetIntactTeam, CallFunc_Less_IntInt_ReturnValue) == 0x000028, "Member 'B_ObjectiveMatchManager_C_GetIntactTeam::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetIntactTeam, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'B_ObjectiveMatchManager_C_GetIntactTeam::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetIntactTeam, Temp_int_Array_Index_Variable) == 0x000030, "Member 'B_ObjectiveMatchManager_C_GetIntactTeam::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetIntactTeam, Temp_byte_Variable_1) == 0x000034, "Member 'B_ObjectiveMatchManager_C_GetIntactTeam::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetIntactTeam, CallFunc_Array_Get_Item) == 0x000038, "Member 'B_ObjectiveMatchManager_C_GetIntactTeam::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetIntactTeam, K2Node_DynamicCast_AsB_Player_State) == 0x000040, "Member 'B_ObjectiveMatchManager_C_GetIntactTeam::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetIntactTeam, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'B_ObjectiveMatchManager_C_GetIntactTeam::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetIntactTeam, CallFunc_GetObjectiveMatchPlayerState_ObjectiveMatchPlayerState) == 0x000050, "Member 'B_ObjectiveMatchManager_C_GetIntactTeam::CallFunc_GetObjectiveMatchPlayerState_ObjectiveMatchPlayerState' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetIntactTeam, CallFunc_Not_PreBool_ReturnValue) == 0x000058, "Member 'B_ObjectiveMatchManager_C_GetIntactTeam::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetIntactTeam, K2Node_SwitchEnum_CmpSuccess) == 0x000059, "Member 'B_ObjectiveMatchManager_C_GetIntactTeam::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetIntactTeam, Temp_bool_Variable_1) == 0x00005A, "Member 'B_ObjectiveMatchManager_C_GetIntactTeam::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetIntactTeam, Temp_int_Variable_1) == 0x00005C, "Member 'B_ObjectiveMatchManager_C_GetIntactTeam::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetIntactTeam, CallFunc_Greater_IntInt_ReturnValue) == 0x000060, "Member 'B_ObjectiveMatchManager_C_GetIntactTeam::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetIntactTeam, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000061, "Member 'B_ObjectiveMatchManager_C_GetIntactTeam::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetIntactTeam, Temp_byte_Variable_2) == 0x000062, "Member 'B_ObjectiveMatchManager_C_GetIntactTeam::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetIntactTeam, K2Node_Select_Default) == 0x000063, "Member 'B_ObjectiveMatchManager_C_GetIntactTeam::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetIntactTeam, CallFunc_Add_IntInt_ReturnValue_1) == 0x000064, "Member 'B_ObjectiveMatchManager_C_GetIntactTeam::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetIntactTeam, K2Node_Select_Default_1) == 0x000068, "Member 'B_ObjectiveMatchManager_C_GetIntactTeam::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetIntactTeam, CallFunc_Add_IntInt_ReturnValue_2) == 0x00006C, "Member 'B_ObjectiveMatchManager_C_GetIntactTeam::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");

// Function B_ObjectiveMatchManager.B_ObjectiveMatchManager_C.GetObjectiveMatchPlayerState
// 0x0078 (0x0078 - 0x0000)
struct B_ObjectiveMatchManager_C_GetObjectiveMatchPlayerState final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_ObjectiveMatchPlayerState_C*         ObjectiveMatchPlayerState;                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_ObjectiveMatchPlayerState_C*         NewObjectiveMatchPlayerState;                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 PlayerId;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	struct FBPUniqueNetId                         CallFunc_GetUniqueNetIDFromPlayerState_UniqueNetId; // 0x0028(0x0020)()
	class UB_ObjectiveMatchPlayerState_C*         CallFunc_AddPlayerWithId_ObjectiveMatchPlayerState; // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_UniqueNetIdToString_String;               // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D69[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_ObjectiveMatchPlayerState_C*         CallFunc_Map_Find_Value;                           // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_ObjectiveMatchManager_C_GetObjectiveMatchPlayerState) == 0x000008, "Wrong alignment on B_ObjectiveMatchManager_C_GetObjectiveMatchPlayerState");
static_assert(sizeof(B_ObjectiveMatchManager_C_GetObjectiveMatchPlayerState) == 0x000078, "Wrong size on B_ObjectiveMatchManager_C_GetObjectiveMatchPlayerState");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetObjectiveMatchPlayerState, PlayerState) == 0x000000, "Member 'B_ObjectiveMatchManager_C_GetObjectiveMatchPlayerState::PlayerState' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetObjectiveMatchPlayerState, ObjectiveMatchPlayerState) == 0x000008, "Member 'B_ObjectiveMatchManager_C_GetObjectiveMatchPlayerState::ObjectiveMatchPlayerState' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetObjectiveMatchPlayerState, NewObjectiveMatchPlayerState) == 0x000010, "Member 'B_ObjectiveMatchManager_C_GetObjectiveMatchPlayerState::NewObjectiveMatchPlayerState' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetObjectiveMatchPlayerState, PlayerId) == 0x000018, "Member 'B_ObjectiveMatchManager_C_GetObjectiveMatchPlayerState::PlayerId' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetObjectiveMatchPlayerState, CallFunc_GetUniqueNetIDFromPlayerState_UniqueNetId) == 0x000028, "Member 'B_ObjectiveMatchManager_C_GetObjectiveMatchPlayerState::CallFunc_GetUniqueNetIDFromPlayerState_UniqueNetId' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetObjectiveMatchPlayerState, CallFunc_AddPlayerWithId_ObjectiveMatchPlayerState) == 0x000048, "Member 'B_ObjectiveMatchManager_C_GetObjectiveMatchPlayerState::CallFunc_AddPlayerWithId_ObjectiveMatchPlayerState' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetObjectiveMatchPlayerState, CallFunc_UniqueNetIdToString_String) == 0x000050, "Member 'B_ObjectiveMatchManager_C_GetObjectiveMatchPlayerState::CallFunc_UniqueNetIdToString_String' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetObjectiveMatchPlayerState, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000060, "Member 'B_ObjectiveMatchManager_C_GetObjectiveMatchPlayerState::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetObjectiveMatchPlayerState, CallFunc_Map_Find_Value) == 0x000068, "Member 'B_ObjectiveMatchManager_C_GetObjectiveMatchPlayerState::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetObjectiveMatchPlayerState, CallFunc_Map_Find_ReturnValue) == 0x000070, "Member 'B_ObjectiveMatchManager_C_GetObjectiveMatchPlayerState::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function B_ObjectiveMatchManager.B_ObjectiveMatchManager_C.GetRoundStatesSortedByTeam
// 0x0058 (0x0058 - 0x0000)
struct B_ObjectiveMatchManager_C_GetRoundStatesSortedByTeam final
{
public:
	TArray<class UB_ObjectiveRoundState_C*>       RoundStatesSortedByTeam;                           // 0x0000(0x0010)(Parm, OutParm)
	int32                                         Temp_int_Variable;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D6A[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_2;                               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D6B[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D6C[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_ObjectiveRoundState_C*               CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default_1;                           // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D6D[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_ObjectiveRoundState_C*               CallFunc_Array_Get_Item_1;                         // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class UB_ObjectiveRoundState_C*>       K2Node_MakeArray_Array;                            // 0x0048(0x0010)(ReferenceParm)
};
static_assert(alignof(B_ObjectiveMatchManager_C_GetRoundStatesSortedByTeam) == 0x000008, "Wrong alignment on B_ObjectiveMatchManager_C_GetRoundStatesSortedByTeam");
static_assert(sizeof(B_ObjectiveMatchManager_C_GetRoundStatesSortedByTeam) == 0x000058, "Wrong size on B_ObjectiveMatchManager_C_GetRoundStatesSortedByTeam");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetRoundStatesSortedByTeam, RoundStatesSortedByTeam) == 0x000000, "Member 'B_ObjectiveMatchManager_C_GetRoundStatesSortedByTeam::RoundStatesSortedByTeam' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetRoundStatesSortedByTeam, Temp_int_Variable) == 0x000010, "Member 'B_ObjectiveMatchManager_C_GetRoundStatesSortedByTeam::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetRoundStatesSortedByTeam, Temp_int_Variable_1) == 0x000014, "Member 'B_ObjectiveMatchManager_C_GetRoundStatesSortedByTeam::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetRoundStatesSortedByTeam, Temp_bool_Variable) == 0x000018, "Member 'B_ObjectiveMatchManager_C_GetRoundStatesSortedByTeam::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetRoundStatesSortedByTeam, Temp_int_Variable_2) == 0x00001C, "Member 'B_ObjectiveMatchManager_C_GetRoundStatesSortedByTeam::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetRoundStatesSortedByTeam, Temp_int_Variable_3) == 0x000020, "Member 'B_ObjectiveMatchManager_C_GetRoundStatesSortedByTeam::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetRoundStatesSortedByTeam, Temp_bool_Variable_1) == 0x000024, "Member 'B_ObjectiveMatchManager_C_GetRoundStatesSortedByTeam::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetRoundStatesSortedByTeam, K2Node_Select_Default) == 0x000028, "Member 'B_ObjectiveMatchManager_C_GetRoundStatesSortedByTeam::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetRoundStatesSortedByTeam, CallFunc_Array_Get_Item) == 0x000030, "Member 'B_ObjectiveMatchManager_C_GetRoundStatesSortedByTeam::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetRoundStatesSortedByTeam, K2Node_Select_Default_1) == 0x000038, "Member 'B_ObjectiveMatchManager_C_GetRoundStatesSortedByTeam::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetRoundStatesSortedByTeam, CallFunc_Array_Get_Item_1) == 0x000040, "Member 'B_ObjectiveMatchManager_C_GetRoundStatesSortedByTeam::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetRoundStatesSortedByTeam, K2Node_MakeArray_Array) == 0x000048, "Member 'B_ObjectiveMatchManager_C_GetRoundStatesSortedByTeam::K2Node_MakeArray_Array' has a wrong offset!");

// Function B_ObjectiveMatchManager.B_ObjectiveMatchManager_C.GetWinnerForRound
// 0x000A (0x000A - 0x0000)
struct B_ObjectiveMatchManager_C_GetWinnerForRound final
{
public:
	bool                                          FirstRound;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ObjectiveTeam                               WinnerTeam;                                        // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ObjectiveTeam                               Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ObjectiveTeam                               Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ObjectiveTeam                               Temp_byte_Variable_2;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ObjectiveTeam                               Temp_byte_Variable_3;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ObjectiveTeam                               K2Node_Select_Default;                             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ObjectiveTeam                               K2Node_Select_Default_1;                           // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_ObjectiveMatchManager_C_GetWinnerForRound) == 0x000001, "Wrong alignment on B_ObjectiveMatchManager_C_GetWinnerForRound");
static_assert(sizeof(B_ObjectiveMatchManager_C_GetWinnerForRound) == 0x00000A, "Wrong size on B_ObjectiveMatchManager_C_GetWinnerForRound");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerForRound, FirstRound) == 0x000000, "Member 'B_ObjectiveMatchManager_C_GetWinnerForRound::FirstRound' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerForRound, WinnerTeam) == 0x000001, "Member 'B_ObjectiveMatchManager_C_GetWinnerForRound::WinnerTeam' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerForRound, Temp_byte_Variable) == 0x000002, "Member 'B_ObjectiveMatchManager_C_GetWinnerForRound::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerForRound, Temp_byte_Variable_1) == 0x000003, "Member 'B_ObjectiveMatchManager_C_GetWinnerForRound::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerForRound, Temp_bool_Variable) == 0x000004, "Member 'B_ObjectiveMatchManager_C_GetWinnerForRound::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerForRound, Temp_byte_Variable_2) == 0x000005, "Member 'B_ObjectiveMatchManager_C_GetWinnerForRound::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerForRound, Temp_byte_Variable_3) == 0x000006, "Member 'B_ObjectiveMatchManager_C_GetWinnerForRound::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerForRound, Temp_bool_Variable_1) == 0x000007, "Member 'B_ObjectiveMatchManager_C_GetWinnerForRound::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerForRound, K2Node_Select_Default) == 0x000008, "Member 'B_ObjectiveMatchManager_C_GetWinnerForRound::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerForRound, K2Node_Select_Default_1) == 0x000009, "Member 'B_ObjectiveMatchManager_C_GetWinnerForRound::K2Node_Select_Default_1' has a wrong offset!");

// Function B_ObjectiveMatchManager.B_ObjectiveMatchManager_C.GetWinnerTeam
// 0x0080 (0x0080 - 0x0000)
struct B_ObjectiveMatchManager_C_GetWinnerTeam final
{
public:
	class AB_GameState_C*                         GameState;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	E_ObjectiveTeam                               WinnerTeam;                                        // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D6E[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReasonIndex;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UB_ObjectiveRoundState_C*               SecondRoundState;                                  // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_ObjectiveRoundState_C*               FirstRoundState;                                   // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	E_ObjectiveTeam                               Temp_byte_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ObjectiveTeam                               Temp_byte_Variable_1;                              // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ObjectiveTeam                               Temp_byte_Variable_2;                              // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ObjectiveTeam                               Temp_byte_Variable_3;                              // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ObjectiveTeam                               Temp_byte_Variable_4;                              // 0x0025(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ObjectiveTeam                               Temp_byte_Variable_5;                              // 0x0026(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ObjectiveTeam                               Temp_byte_Variable_6;                              // 0x0027(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ObjectiveTeam                               Temp_byte_Variable_7;                              // 0x0028(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ObjectiveTeam                               CallFunc_GetWinnerForRound_WinnerTeam;             // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ObjectiveTeam                               CallFunc_GetWinnerForRound_WinnerTeam_1;           // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ObjectiveTeam                               CallFunc_GetWinnerForRound_WinnerTeam_2;           // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ObjectiveTeam                               CallFunc_GetWinnerForRound_WinnerTeam_3;           // 0x002F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ObjectiveTeam                               Temp_byte_Variable_8;                              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_2;             // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ObjectiveTeam                               CallFunc_GetWinnerForRound_WinnerTeam_4;           // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_1;            // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ObjectiveTeam                               CallFunc_GetWinnerForRound_WinnerTeam_5;           // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ObjectiveTeam                               Temp_byte_Variable_9;                              // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_2;            // 0x0037(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_3;             // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ObjectiveTeam                               K2Node_Select_Default;                             // 0x003F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ObjectiveTeam                               CallFunc_GetIntactTeam_Team;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMatchIntact_EnoughPlayerConnected;      // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETeamID                                       Temp_byte_Variable_10;                             // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D6F[0x5];                                     // 0x0043(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_ObjectiveRoundState_C*               CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default_1;                           // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D70[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_ObjectiveRoundState_C*               CallFunc_Array_Get_Item_1;                         // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Map_Find_Value;                           // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D71[0x3];                                     // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Map_Find_Value_1;                         // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_1;                   // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D72[0x3];                                     // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Map_Find_Value_2;                         // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_2;                   // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_4;             // 0x0075(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D73[0x2];                                     // 0x0076(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Map_Find_Value_3;                         // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_3;                   // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ObjectiveTeam                               K2Node_Select_Default_2;                           // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_3;            // 0x007E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_ObjectiveMatchManager_C_GetWinnerTeam) == 0x000008, "Wrong alignment on B_ObjectiveMatchManager_C_GetWinnerTeam");
static_assert(sizeof(B_ObjectiveMatchManager_C_GetWinnerTeam) == 0x000080, "Wrong size on B_ObjectiveMatchManager_C_GetWinnerTeam");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, GameState) == 0x000000, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::GameState' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, WinnerTeam) == 0x000008, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::WinnerTeam' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, ReasonIndex) == 0x00000C, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::ReasonIndex' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, SecondRoundState) == 0x000010, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::SecondRoundState' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, FirstRoundState) == 0x000018, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::FirstRoundState' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, Temp_byte_Variable) == 0x000020, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, Temp_byte_Variable_1) == 0x000021, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, Temp_bool_Variable) == 0x000022, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, Temp_byte_Variable_2) == 0x000023, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, Temp_byte_Variable_3) == 0x000024, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, Temp_byte_Variable_4) == 0x000025, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, Temp_byte_Variable_5) == 0x000026, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, Temp_byte_Variable_6) == 0x000027, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, Temp_byte_Variable_7) == 0x000028, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, CallFunc_Greater_IntInt_ReturnValue) == 0x000029, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, CallFunc_GetWinnerForRound_WinnerTeam) == 0x00002A, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::CallFunc_GetWinnerForRound_WinnerTeam' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, CallFunc_GetWinnerForRound_WinnerTeam_1) == 0x00002B, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::CallFunc_GetWinnerForRound_WinnerTeam_1' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, CallFunc_Greater_IntInt_ReturnValue_1) == 0x00002C, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, CallFunc_GetWinnerForRound_WinnerTeam_2) == 0x00002D, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::CallFunc_GetWinnerForRound_WinnerTeam_2' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, CallFunc_NotEqual_IntInt_ReturnValue) == 0x00002E, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, CallFunc_GetWinnerForRound_WinnerTeam_3) == 0x00002F, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::CallFunc_GetWinnerForRound_WinnerTeam_3' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, Temp_byte_Variable_8) == 0x000030, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, CallFunc_Greater_IntInt_ReturnValue_2) == 0x000031, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::CallFunc_Greater_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, CallFunc_GetWinnerForRound_WinnerTeam_4) == 0x000032, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::CallFunc_GetWinnerForRound_WinnerTeam_4' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, CallFunc_NotEqual_IntInt_ReturnValue_1) == 0x000033, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::CallFunc_NotEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, CallFunc_GetWinnerForRound_WinnerTeam_5) == 0x000034, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::CallFunc_GetWinnerForRound_WinnerTeam_5' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, Temp_byte_Variable_9) == 0x000035, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::Temp_byte_Variable_9' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, CallFunc_Less_IntInt_ReturnValue) == 0x000036, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, CallFunc_NotEqual_IntInt_ReturnValue_2) == 0x000037, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::CallFunc_NotEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, Temp_bool_Variable_1) == 0x00003C, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, CallFunc_Greater_IntInt_ReturnValue_3) == 0x00003D, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::CallFunc_Greater_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00003E, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, K2Node_Select_Default) == 0x00003F, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, CallFunc_GetIntactTeam_Team) == 0x000040, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::CallFunc_GetIntactTeam_Team' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, CallFunc_IsMatchIntact_EnoughPlayerConnected) == 0x000041, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::CallFunc_IsMatchIntact_EnoughPlayerConnected' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, Temp_byte_Variable_10) == 0x000042, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::Temp_byte_Variable_10' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, CallFunc_Array_Get_Item) == 0x000048, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, K2Node_Select_Default_1) == 0x000050, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, CallFunc_Array_Get_Item_1) == 0x000058, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, CallFunc_Map_Find_Value) == 0x000060, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, CallFunc_Map_Find_ReturnValue) == 0x000064, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, CallFunc_Map_Find_Value_1) == 0x000068, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::CallFunc_Map_Find_Value_1' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, CallFunc_Map_Find_ReturnValue_1) == 0x00006C, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::CallFunc_Map_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, CallFunc_Map_Find_Value_2) == 0x000070, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::CallFunc_Map_Find_Value_2' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, CallFunc_Map_Find_ReturnValue_2) == 0x000074, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::CallFunc_Map_Find_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, CallFunc_Greater_IntInt_ReturnValue_4) == 0x000075, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::CallFunc_Greater_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, CallFunc_Map_Find_Value_3) == 0x000078, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::CallFunc_Map_Find_Value_3' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, CallFunc_Map_Find_ReturnValue_3) == 0x00007C, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::CallFunc_Map_Find_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, K2Node_Select_Default_2) == 0x00007D, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_GetWinnerTeam, CallFunc_NotEqual_IntInt_ReturnValue_3) == 0x00007E, "Member 'B_ObjectiveMatchManager_C_GetWinnerTeam::CallFunc_NotEqual_IntInt_ReturnValue_3' has a wrong offset!");

// Function B_ObjectiveMatchManager.B_ObjectiveMatchManager_C.IsMatchDead
// 0x0040 (0x0040 - 0x0000)
struct B_ObjectiveMatchManager_C_IsMatchDead final
{
public:
	class AB_GameState_C*                         GameState;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Param_IsMatchDead;                                 // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasAnyPlayer;                                      // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D74[0x1];                                     // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D75[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D76[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerInMatch_IsInMatch;                // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D77[0x2];                                     // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_ObjectiveMatchManager_C_IsMatchDead) == 0x000008, "Wrong alignment on B_ObjectiveMatchManager_C_IsMatchDead");
static_assert(sizeof(B_ObjectiveMatchManager_C_IsMatchDead) == 0x000040, "Wrong size on B_ObjectiveMatchManager_C_IsMatchDead");
static_assert(offsetof(B_ObjectiveMatchManager_C_IsMatchDead, GameState) == 0x000000, "Member 'B_ObjectiveMatchManager_C_IsMatchDead::GameState' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_IsMatchDead, Param_IsMatchDead) == 0x000008, "Member 'B_ObjectiveMatchManager_C_IsMatchDead::Param_IsMatchDead' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_IsMatchDead, HasAnyPlayer) == 0x000009, "Member 'B_ObjectiveMatchManager_C_IsMatchDead::HasAnyPlayer' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_IsMatchDead, CallFunc_IsValid_ReturnValue) == 0x00000A, "Member 'B_ObjectiveMatchManager_C_IsMatchDead::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_IsMatchDead, CallFunc_Array_Length_ReturnValue) == 0x00000C, "Member 'B_ObjectiveMatchManager_C_IsMatchDead::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_IsMatchDead, Temp_int_Array_Index_Variable) == 0x000010, "Member 'B_ObjectiveMatchManager_C_IsMatchDead::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_IsMatchDead, CallFunc_Array_Get_Item) == 0x000018, "Member 'B_ObjectiveMatchManager_C_IsMatchDead::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_IsMatchDead, CallFunc_Not_PreBool_ReturnValue) == 0x000020, "Member 'B_ObjectiveMatchManager_C_IsMatchDead::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_IsMatchDead, K2Node_DynamicCast_AsB_Player_State) == 0x000028, "Member 'B_ObjectiveMatchManager_C_IsMatchDead::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_IsMatchDead, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'B_ObjectiveMatchManager_C_IsMatchDead::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_IsMatchDead, CallFunc_IsPlayerInMatch_IsInMatch) == 0x000031, "Member 'B_ObjectiveMatchManager_C_IsMatchDead::CallFunc_IsPlayerInMatch_IsInMatch' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_IsMatchDead, CallFunc_Not_PreBool_ReturnValue_1) == 0x000032, "Member 'B_ObjectiveMatchManager_C_IsMatchDead::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_IsMatchDead, CallFunc_BooleanAND_ReturnValue) == 0x000033, "Member 'B_ObjectiveMatchManager_C_IsMatchDead::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_IsMatchDead, Temp_int_Loop_Counter_Variable) == 0x000034, "Member 'B_ObjectiveMatchManager_C_IsMatchDead::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_IsMatchDead, CallFunc_Greater_IntInt_ReturnValue) == 0x000038, "Member 'B_ObjectiveMatchManager_C_IsMatchDead::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_IsMatchDead, CallFunc_Less_IntInt_ReturnValue) == 0x000039, "Member 'B_ObjectiveMatchManager_C_IsMatchDead::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_IsMatchDead, CallFunc_Add_IntInt_ReturnValue) == 0x00003C, "Member 'B_ObjectiveMatchManager_C_IsMatchDead::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function B_ObjectiveMatchManager.B_ObjectiveMatchManager_C.IsMatchIntact
// 0x0068 (0x0068 - 0x0000)
struct B_ObjectiveMatchManager_C_IsMatchIntact final
{
public:
	class AB_GameState_C*                         GameState;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          EnoughPlayerConnected;                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D78[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TeamBConnections;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TeamAConnections;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D79[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D7A[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerInMatch_IsInMatch;                // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D7B[0x5];                                     // 0x003B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_ObjectiveMatchPlayerState_C*         CallFunc_GetObjectiveMatchPlayerState_ObjectiveMatchPlayerState; // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D7C[0x1];                                     // 0x004B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_2;             // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_ObjectiveMatchManager_C_IsMatchIntact) == 0x000008, "Wrong alignment on B_ObjectiveMatchManager_C_IsMatchIntact");
static_assert(sizeof(B_ObjectiveMatchManager_C_IsMatchIntact) == 0x000068, "Wrong size on B_ObjectiveMatchManager_C_IsMatchIntact");
static_assert(offsetof(B_ObjectiveMatchManager_C_IsMatchIntact, GameState) == 0x000000, "Member 'B_ObjectiveMatchManager_C_IsMatchIntact::GameState' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_IsMatchIntact, EnoughPlayerConnected) == 0x000008, "Member 'B_ObjectiveMatchManager_C_IsMatchIntact::EnoughPlayerConnected' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_IsMatchIntact, TeamBConnections) == 0x00000C, "Member 'B_ObjectiveMatchManager_C_IsMatchIntact::TeamBConnections' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_IsMatchIntact, TeamAConnections) == 0x000010, "Member 'B_ObjectiveMatchManager_C_IsMatchIntact::TeamAConnections' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_IsMatchIntact, CallFunc_IsValid_ReturnValue) == 0x000014, "Member 'B_ObjectiveMatchManager_C_IsMatchIntact::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_IsMatchIntact, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'B_ObjectiveMatchManager_C_IsMatchIntact::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_IsMatchIntact, Temp_int_Array_Index_Variable) == 0x00001C, "Member 'B_ObjectiveMatchManager_C_IsMatchIntact::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_IsMatchIntact, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'B_ObjectiveMatchManager_C_IsMatchIntact::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_IsMatchIntact, CallFunc_Array_Get_Item) == 0x000028, "Member 'B_ObjectiveMatchManager_C_IsMatchIntact::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_IsMatchIntact, K2Node_DynamicCast_AsB_Player_State) == 0x000030, "Member 'B_ObjectiveMatchManager_C_IsMatchIntact::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_IsMatchIntact, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'B_ObjectiveMatchManager_C_IsMatchIntact::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_IsMatchIntact, CallFunc_Less_IntInt_ReturnValue) == 0x000039, "Member 'B_ObjectiveMatchManager_C_IsMatchIntact::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_IsMatchIntact, CallFunc_IsPlayerInMatch_IsInMatch) == 0x00003A, "Member 'B_ObjectiveMatchManager_C_IsMatchIntact::CallFunc_IsPlayerInMatch_IsInMatch' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_IsMatchIntact, CallFunc_GetObjectiveMatchPlayerState_ObjectiveMatchPlayerState) == 0x000040, "Member 'B_ObjectiveMatchManager_C_IsMatchIntact::CallFunc_GetObjectiveMatchPlayerState_ObjectiveMatchPlayerState' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_IsMatchIntact, CallFunc_Not_PreBool_ReturnValue) == 0x000048, "Member 'B_ObjectiveMatchManager_C_IsMatchIntact::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_IsMatchIntact, CallFunc_BooleanAND_ReturnValue) == 0x000049, "Member 'B_ObjectiveMatchManager_C_IsMatchIntact::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_IsMatchIntact, K2Node_SwitchEnum_CmpSuccess) == 0x00004A, "Member 'B_ObjectiveMatchManager_C_IsMatchIntact::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_IsMatchIntact, CallFunc_Add_IntInt_ReturnValue) == 0x00004C, "Member 'B_ObjectiveMatchManager_C_IsMatchIntact::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_IsMatchIntact, Temp_int_Variable) == 0x000050, "Member 'B_ObjectiveMatchManager_C_IsMatchIntact::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_IsMatchIntact, Temp_int_Variable_1) == 0x000054, "Member 'B_ObjectiveMatchManager_C_IsMatchIntact::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_IsMatchIntact, CallFunc_Greater_IntInt_ReturnValue) == 0x000058, "Member 'B_ObjectiveMatchManager_C_IsMatchIntact::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_IsMatchIntact, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000059, "Member 'B_ObjectiveMatchManager_C_IsMatchIntact::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_IsMatchIntact, CallFunc_Greater_IntInt_ReturnValue_2) == 0x00005A, "Member 'B_ObjectiveMatchManager_C_IsMatchIntact::CallFunc_Greater_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_IsMatchIntact, CallFunc_BooleanAND_ReturnValue_1) == 0x00005B, "Member 'B_ObjectiveMatchManager_C_IsMatchIntact::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_IsMatchIntact, CallFunc_Add_IntInt_ReturnValue_1) == 0x00005C, "Member 'B_ObjectiveMatchManager_C_IsMatchIntact::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_IsMatchIntact, CallFunc_Add_IntInt_ReturnValue_2) == 0x000060, "Member 'B_ObjectiveMatchManager_C_IsMatchIntact::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");

// Function B_ObjectiveMatchManager.B_ObjectiveMatchManager_C.IsPlayerInMatch
// 0x0048 (0x0048 - 0x0000)
struct B_ObjectiveMatchManager_C_IsPlayerInMatch final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInMatch;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D7D[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBPUniqueNetId                         CallFunc_GetUniqueNetIDFromPlayerState_UniqueNetId; // 0x0010(0x0020)()
	class FString                                 CallFunc_UniqueNetIdToString_String;               // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Contains_ReturnValue;                 // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_ObjectiveMatchManager_C_IsPlayerInMatch) == 0x000008, "Wrong alignment on B_ObjectiveMatchManager_C_IsPlayerInMatch");
static_assert(sizeof(B_ObjectiveMatchManager_C_IsPlayerInMatch) == 0x000048, "Wrong size on B_ObjectiveMatchManager_C_IsPlayerInMatch");
static_assert(offsetof(B_ObjectiveMatchManager_C_IsPlayerInMatch, PlayerState) == 0x000000, "Member 'B_ObjectiveMatchManager_C_IsPlayerInMatch::PlayerState' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_IsPlayerInMatch, IsInMatch) == 0x000008, "Member 'B_ObjectiveMatchManager_C_IsPlayerInMatch::IsInMatch' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_IsPlayerInMatch, CallFunc_GetUniqueNetIDFromPlayerState_UniqueNetId) == 0x000010, "Member 'B_ObjectiveMatchManager_C_IsPlayerInMatch::CallFunc_GetUniqueNetIDFromPlayerState_UniqueNetId' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_IsPlayerInMatch, CallFunc_UniqueNetIdToString_String) == 0x000030, "Member 'B_ObjectiveMatchManager_C_IsPlayerInMatch::CallFunc_UniqueNetIdToString_String' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_IsPlayerInMatch, CallFunc_Map_Contains_ReturnValue) == 0x000040, "Member 'B_ObjectiveMatchManager_C_IsPlayerInMatch::CallFunc_Map_Contains_ReturnValue' has a wrong offset!");

// Function B_ObjectiveMatchManager.B_ObjectiveMatchManager_C.PrintPlayerIds
// 0x00A0 (0x00A0 - 0x0000)
struct B_ObjectiveMatchManager_C_PrintPlayerIds final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D7E[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         CallFunc_Map_Keys_Keys;                            // 0x0010(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D7F[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Array_Get_Item;                           // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D80[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UB_ObjectiveMatchPlayerState_C*         CallFunc_Map_Find_Value;                           // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D81[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_DoubleToString_ReturnValue;          // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_ByteToString_ReturnValue;            // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(B_ObjectiveMatchManager_C_PrintPlayerIds) == 0x000008, "Wrong alignment on B_ObjectiveMatchManager_C_PrintPlayerIds");
static_assert(sizeof(B_ObjectiveMatchManager_C_PrintPlayerIds) == 0x0000A0, "Wrong size on B_ObjectiveMatchManager_C_PrintPlayerIds");
static_assert(offsetof(B_ObjectiveMatchManager_C_PrintPlayerIds, Temp_int_Array_Index_Variable) == 0x000000, "Member 'B_ObjectiveMatchManager_C_PrintPlayerIds::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_PrintPlayerIds, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'B_ObjectiveMatchManager_C_PrintPlayerIds::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_PrintPlayerIds, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'B_ObjectiveMatchManager_C_PrintPlayerIds::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_PrintPlayerIds, CallFunc_Map_Keys_Keys) == 0x000010, "Member 'B_ObjectiveMatchManager_C_PrintPlayerIds::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_PrintPlayerIds, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'B_ObjectiveMatchManager_C_PrintPlayerIds::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_PrintPlayerIds, CallFunc_Array_Get_Item) == 0x000028, "Member 'B_ObjectiveMatchManager_C_PrintPlayerIds::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_PrintPlayerIds, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'B_ObjectiveMatchManager_C_PrintPlayerIds::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_PrintPlayerIds, CallFunc_Concat_StrStr_ReturnValue) == 0x000040, "Member 'B_ObjectiveMatchManager_C_PrintPlayerIds::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_PrintPlayerIds, CallFunc_Map_Find_Value) == 0x000050, "Member 'B_ObjectiveMatchManager_C_PrintPlayerIds::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_PrintPlayerIds, CallFunc_Map_Find_ReturnValue) == 0x000058, "Member 'B_ObjectiveMatchManager_C_PrintPlayerIds::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_PrintPlayerIds, CallFunc_Conv_DoubleToString_ReturnValue) == 0x000060, "Member 'B_ObjectiveMatchManager_C_PrintPlayerIds::CallFunc_Conv_DoubleToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_PrintPlayerIds, CallFunc_Conv_ByteToString_ReturnValue) == 0x000070, "Member 'B_ObjectiveMatchManager_C_PrintPlayerIds::CallFunc_Conv_ByteToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_PrintPlayerIds, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000080, "Member 'B_ObjectiveMatchManager_C_PrintPlayerIds::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_PrintPlayerIds, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000090, "Member 'B_ObjectiveMatchManager_C_PrintPlayerIds::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");

// Function B_ObjectiveMatchManager.B_ObjectiveMatchManager_C.RandomizeTeamAStartsAsWitch
// 0x0018 (0x0018 - 0x0000)
struct B_ObjectiveMatchManager_C_RandomizeTeamAStartsAsWitch final
{
public:
	bool                                          CallFunc_WithEditor_ReturnValue;                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D82[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_RandomFloat_ReturnValue;                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_ObjectiveMatchManager_C_RandomizeTeamAStartsAsWitch) == 0x000008, "Wrong alignment on B_ObjectiveMatchManager_C_RandomizeTeamAStartsAsWitch");
static_assert(sizeof(B_ObjectiveMatchManager_C_RandomizeTeamAStartsAsWitch) == 0x000018, "Wrong size on B_ObjectiveMatchManager_C_RandomizeTeamAStartsAsWitch");
static_assert(offsetof(B_ObjectiveMatchManager_C_RandomizeTeamAStartsAsWitch, CallFunc_WithEditor_ReturnValue) == 0x000000, "Member 'B_ObjectiveMatchManager_C_RandomizeTeamAStartsAsWitch::CallFunc_WithEditor_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_RandomizeTeamAStartsAsWitch, CallFunc_RandomFloat_ReturnValue) == 0x000008, "Member 'B_ObjectiveMatchManager_C_RandomizeTeamAStartsAsWitch::CallFunc_RandomFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_RandomizeTeamAStartsAsWitch, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000010, "Member 'B_ObjectiveMatchManager_C_RandomizeTeamAStartsAsWitch::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");

// Function B_ObjectiveMatchManager.B_ObjectiveMatchManager_C.RemovePlayer
// 0x0040 (0x0040 - 0x0000)
struct B_ObjectiveMatchManager_C_RemovePlayer final
{
public:
	class APlayerState*                           PlayerStateToRemove;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FBPUniqueNetId                         CallFunc_GetUniqueNetIDFromPlayerState_UniqueNetId; // 0x0008(0x0020)()
	class FString                                 CallFunc_UniqueNetIdToString_String;               // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Remove_ReturnValue;                   // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_ObjectiveMatchManager_C_RemovePlayer) == 0x000008, "Wrong alignment on B_ObjectiveMatchManager_C_RemovePlayer");
static_assert(sizeof(B_ObjectiveMatchManager_C_RemovePlayer) == 0x000040, "Wrong size on B_ObjectiveMatchManager_C_RemovePlayer");
static_assert(offsetof(B_ObjectiveMatchManager_C_RemovePlayer, PlayerStateToRemove) == 0x000000, "Member 'B_ObjectiveMatchManager_C_RemovePlayer::PlayerStateToRemove' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_RemovePlayer, CallFunc_GetUniqueNetIDFromPlayerState_UniqueNetId) == 0x000008, "Member 'B_ObjectiveMatchManager_C_RemovePlayer::CallFunc_GetUniqueNetIDFromPlayerState_UniqueNetId' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_RemovePlayer, CallFunc_UniqueNetIdToString_String) == 0x000028, "Member 'B_ObjectiveMatchManager_C_RemovePlayer::CallFunc_UniqueNetIdToString_String' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_RemovePlayer, CallFunc_Map_Remove_ReturnValue) == 0x000038, "Member 'B_ObjectiveMatchManager_C_RemovePlayer::CallFunc_Map_Remove_ReturnValue' has a wrong offset!");

// Function B_ObjectiveMatchManager.B_ObjectiveMatchManager_C.RemovePlayerWhenMatchNotStarted
// 0x0040 (0x0040 - 0x0000)
struct B_ObjectiveMatchManager_C_RemovePlayerWhenMatchNotStarted final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FBPUniqueNetId                         CallFunc_GetUniqueNetIDFromPlayerState_UniqueNetId; // 0x0008(0x0020)()
	class FString                                 CallFunc_UniqueNetIdToString_String;               // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Remove_ReturnValue;                   // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_ObjectiveMatchManager_C_RemovePlayerWhenMatchNotStarted) == 0x000008, "Wrong alignment on B_ObjectiveMatchManager_C_RemovePlayerWhenMatchNotStarted");
static_assert(sizeof(B_ObjectiveMatchManager_C_RemovePlayerWhenMatchNotStarted) == 0x000040, "Wrong size on B_ObjectiveMatchManager_C_RemovePlayerWhenMatchNotStarted");
static_assert(offsetof(B_ObjectiveMatchManager_C_RemovePlayerWhenMatchNotStarted, PlayerState) == 0x000000, "Member 'B_ObjectiveMatchManager_C_RemovePlayerWhenMatchNotStarted::PlayerState' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_RemovePlayerWhenMatchNotStarted, CallFunc_GetUniqueNetIDFromPlayerState_UniqueNetId) == 0x000008, "Member 'B_ObjectiveMatchManager_C_RemovePlayerWhenMatchNotStarted::CallFunc_GetUniqueNetIDFromPlayerState_UniqueNetId' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_RemovePlayerWhenMatchNotStarted, CallFunc_UniqueNetIdToString_String) == 0x000028, "Member 'B_ObjectiveMatchManager_C_RemovePlayerWhenMatchNotStarted::CallFunc_UniqueNetIdToString_String' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_RemovePlayerWhenMatchNotStarted, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000038, "Member 'B_ObjectiveMatchManager_C_RemovePlayerWhenMatchNotStarted::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_RemovePlayerWhenMatchNotStarted, CallFunc_Map_Remove_ReturnValue) == 0x000039, "Member 'B_ObjectiveMatchManager_C_RemovePlayerWhenMatchNotStarted::CallFunc_Map_Remove_ReturnValue' has a wrong offset!");

// Function B_ObjectiveMatchManager.B_ObjectiveMatchManager_C.TearDown
// 0x0010 (0x0010 - 0x0000)
struct B_ObjectiveMatchManager_C_TearDown final
{
public:
	E_ObjectiveTeam                               Temp_byte_Variable;                                // 0x0000(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D83[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ObjectiveTeam                               Temp_byte_Variable_1;                              // 0x0008(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D84[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x000C(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_ObjectiveMatchManager_C_TearDown) == 0x000004, "Wrong alignment on B_ObjectiveMatchManager_C_TearDown");
static_assert(sizeof(B_ObjectiveMatchManager_C_TearDown) == 0x000010, "Wrong size on B_ObjectiveMatchManager_C_TearDown");
static_assert(offsetof(B_ObjectiveMatchManager_C_TearDown, Temp_byte_Variable) == 0x000000, "Member 'B_ObjectiveMatchManager_C_TearDown::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_TearDown, Temp_int_Variable) == 0x000004, "Member 'B_ObjectiveMatchManager_C_TearDown::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_TearDown, Temp_byte_Variable_1) == 0x000008, "Member 'B_ObjectiveMatchManager_C_TearDown::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(B_ObjectiveMatchManager_C_TearDown, Temp_int_Variable_1) == 0x00000C, "Member 'B_ObjectiveMatchManager_C_TearDown::Temp_int_Variable_1' has a wrong offset!");

}

