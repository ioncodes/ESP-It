#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_PowerupParametersSubsystem

#include "Basic.hpp"

#include "E_PowerupRuleType_structs.hpp"
#include "Engine_structs.hpp"
#include "PropWitchHuntModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_PowerupParametersSubsystem.B_PowerupParametersSubsystem_C
// 0x00B0 (0x00E0 - 0x0030)
class UB_PowerupParametersSubsystem_C final : public UPowerupParametersSubsystem
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0030(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TMap<E_PowerupRuleType, class UPowerupParameters*> PowerupParameters;                                 // 0x0038(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          UsingCustomRules;                                  // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3901[0x7];                                     // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_HunterCooldownReductionParameters_C* HunterCooldownReduction;                           // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UB_HunterRapidFireParameters_C*         HunterRapidFire;                                   // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UB_HunterSpeedboostParameters_C*        HunterSpeedBoost;                                  // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UB_HunterDetectionParameters_C*         HunterDetection;                                   // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UB_WitchManaBoostParameters_C*          WitchManaBoost;                                    // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UB_WitchHealParameters_C*               WitchHeal;                                         // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UB_WitchInvisibleParameters_C*          WitchInvisible;                                    // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UB_WitchConfusionWaveParameters_C*      WitchConfusionWave;                                // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             PowerupRulesUpdated;                               // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void ApplyPowerupRuleParameters(TArray<struct FS_PowerupRules>& PowerupRules);
	void ExecuteUbergraph_B_PowerupParametersSubsystem(int32 EntryPoint);
	void GetDefaultPowerupParameterValue(E_PowerupRuleType PowerupType, const struct FUIParameterData& UIParameter, struct FUIParam* DefaultValue);
	void GetPowerupParameters(E_PowerupRuleType Powerup, class UPowerupParameters** Param_PowerupParameters);
	void GetUIParameters(E_PowerupRuleType PowerupType, TArray<struct FUIParameterData>* UIParameters);
	void InitializeDefaultPowerups();
	void InitializeSubsystem();
	void IsPowerupUsingRules(E_PowerupRuleType PowerupType, bool* IsUsingRules);
	void IsUsingCustomRules(bool* CustomRules);
	void PowerupRulesUpdated__DelegateSignature();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_PowerupParametersSubsystem_C">();
	}
	static class UB_PowerupParametersSubsystem_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UB_PowerupParametersSubsystem_C>();
	}
};
static_assert(alignof(UB_PowerupParametersSubsystem_C) == 0x000008, "Wrong alignment on UB_PowerupParametersSubsystem_C");
static_assert(sizeof(UB_PowerupParametersSubsystem_C) == 0x0000E0, "Wrong size on UB_PowerupParametersSubsystem_C");
static_assert(offsetof(UB_PowerupParametersSubsystem_C, UberGraphFrame) == 0x000030, "Member 'UB_PowerupParametersSubsystem_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UB_PowerupParametersSubsystem_C, PowerupParameters) == 0x000038, "Member 'UB_PowerupParametersSubsystem_C::PowerupParameters' has a wrong offset!");
static_assert(offsetof(UB_PowerupParametersSubsystem_C, UsingCustomRules) == 0x000088, "Member 'UB_PowerupParametersSubsystem_C::UsingCustomRules' has a wrong offset!");
static_assert(offsetof(UB_PowerupParametersSubsystem_C, HunterCooldownReduction) == 0x000090, "Member 'UB_PowerupParametersSubsystem_C::HunterCooldownReduction' has a wrong offset!");
static_assert(offsetof(UB_PowerupParametersSubsystem_C, HunterRapidFire) == 0x000098, "Member 'UB_PowerupParametersSubsystem_C::HunterRapidFire' has a wrong offset!");
static_assert(offsetof(UB_PowerupParametersSubsystem_C, HunterSpeedBoost) == 0x0000A0, "Member 'UB_PowerupParametersSubsystem_C::HunterSpeedBoost' has a wrong offset!");
static_assert(offsetof(UB_PowerupParametersSubsystem_C, HunterDetection) == 0x0000A8, "Member 'UB_PowerupParametersSubsystem_C::HunterDetection' has a wrong offset!");
static_assert(offsetof(UB_PowerupParametersSubsystem_C, WitchManaBoost) == 0x0000B0, "Member 'UB_PowerupParametersSubsystem_C::WitchManaBoost' has a wrong offset!");
static_assert(offsetof(UB_PowerupParametersSubsystem_C, WitchHeal) == 0x0000B8, "Member 'UB_PowerupParametersSubsystem_C::WitchHeal' has a wrong offset!");
static_assert(offsetof(UB_PowerupParametersSubsystem_C, WitchInvisible) == 0x0000C0, "Member 'UB_PowerupParametersSubsystem_C::WitchInvisible' has a wrong offset!");
static_assert(offsetof(UB_PowerupParametersSubsystem_C, WitchConfusionWave) == 0x0000C8, "Member 'UB_PowerupParametersSubsystem_C::WitchConfusionWave' has a wrong offset!");
static_assert(offsetof(UB_PowerupParametersSubsystem_C, PowerupRulesUpdated) == 0x0000D0, "Member 'UB_PowerupParametersSubsystem_C::PowerupRulesUpdated' has a wrong offset!");

}

