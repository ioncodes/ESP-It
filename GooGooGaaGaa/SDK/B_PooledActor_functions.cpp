#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_PooledActor

#include "Basic.hpp"

#include "B_PooledActor_classes.hpp"
#include "B_PooledActor_parameters.hpp"


namespace SDK
{

// Function B_PooledActor.B_PooledActor_C.InitializeRules
// (Public, BlueprintCallable, BlueprintEvent)

void AB_PooledActor_C::InitializeRules()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PooledActor_C", "InitializeRules");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PooledActor.B_PooledActor_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AB_PooledActor_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PooledActor_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PooledActor.B_PooledActor_C.TearDown
// (Public, BlueprintCallable, BlueprintEvent)

void AB_PooledActor_C::TearDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PooledActor_C", "TearDown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PooledActor.B_PooledActor_C.TearUp
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            Param_Instigator                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_PooledActor_C::TearUp(const struct FTransform& SpawnTransform, class AActor* Param_Owner, class APawn* Param_Instigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PooledActor_C", "TearUp");

	Params::B_PooledActor_C_TearUp Parms{};

	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.Param_Owner = Param_Owner;
	Parms.Param_Instigator = Param_Instigator;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PooledActor.B_PooledActor_C.TearUpPoolObject
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            Param_Instigator                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_PooledActor_C::TearUpPoolObject(const struct FTransform& SpawnTransform, class AActor* Param_Owner, class APawn* Param_Instigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PooledActor_C", "TearUpPoolObject");

	Params::B_PooledActor_C_TearUpPoolObject Parms{};

	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.Param_Owner = Param_Owner;
	Parms.Param_Instigator = Param_Instigator;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PooledActor.B_PooledActor_C.ExecuteUbergraph_B_PooledActor
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PooledActor_C::ExecuteUbergraph_B_PooledActor(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PooledActor_C", "ExecuteUbergraph_B_PooledActor");

	Params::B_PooledActor_C_ExecuteUbergraph_B_PooledActor Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PooledActor.B_PooledActor_C.IncrementLifeTime
// (Protected, BlueprintCallable, BlueprintEvent)

void AB_PooledActor_C::IncrementLifeTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PooledActor_C", "IncrementLifeTime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PooledActor.B_PooledActor_C.TearDownMulticast
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void AB_PooledActor_C::TearDownMulticast()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PooledActor_C", "TearDownMulticast");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PooledActor.B_PooledActor_C.TearDownPoolObject
// (Public, BlueprintCallable, BlueprintEvent)

void AB_PooledActor_C::TearDownPoolObject()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PooledActor_C", "TearDownPoolObject");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PooledActor.B_PooledActor_C.TearUpMulticast
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            Param_Instigator                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_PooledActor_C::TearUpMulticast(const struct FTransform& SpawnTransform, class AActor* Param_Owner, class APawn* Param_Instigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PooledActor_C", "TearUpMulticast");

	Params::B_PooledActor_C_TearUpMulticast Parms{};

	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.Param_Owner = Param_Owner;
	Parms.Param_Instigator = Param_Instigator;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PooledActor.B_PooledActor_C.RulesUpdated
// (BlueprintCallable, BlueprintEvent)

void AB_PooledActor_C::RulesUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PooledActor_C", "RulesUpdated");

	UObject::ProcessEvent(Func, nullptr);
}

}

