#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_ShootingRangeShootActor

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function B_ShootingRangeShootActor.B_ShootingRangeShootActor_C.CheckIfShot
// 0x0008 (0x0008 - 0x0000)
struct B_ShootingRangeShootActor_C_CheckIfShot final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_ShootingRangeShootActor_C_CheckIfShot) == 0x000008, "Wrong alignment on B_ShootingRangeShootActor_C_CheckIfShot");
static_assert(sizeof(B_ShootingRangeShootActor_C_CheckIfShot) == 0x000008, "Wrong size on B_ShootingRangeShootActor_C_CheckIfShot");
static_assert(offsetof(B_ShootingRangeShootActor_C_CheckIfShot, InActor) == 0x000000, "Member 'B_ShootingRangeShootActor_C_CheckIfShot::InActor' has a wrong offset!");

// Function B_ShootingRangeShootActor.B_ShootingRangeShootActor_C.ExecuteUbergraph_B_ShootingRangeShootActor
// 0x0028 (0x0028 - 0x0000)
struct B_ShootingRangeShootActor_C_ExecuteUbergraph_B_ShootingRangeShootActor final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36FF[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_ShootingRangeTask_C*                 K2Node_DynamicCast_AsB_Shooting_Range_Task;        // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3700[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RemoveTargetAfterHit_DeltaSeconds_ImplicitCast; // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_ShootingRangeShootActor_C_ExecuteUbergraph_B_ShootingRangeShootActor) == 0x000008, "Wrong alignment on B_ShootingRangeShootActor_C_ExecuteUbergraph_B_ShootingRangeShootActor");
static_assert(sizeof(B_ShootingRangeShootActor_C_ExecuteUbergraph_B_ShootingRangeShootActor) == 0x000028, "Wrong size on B_ShootingRangeShootActor_C_ExecuteUbergraph_B_ShootingRangeShootActor");
static_assert(offsetof(B_ShootingRangeShootActor_C_ExecuteUbergraph_B_ShootingRangeShootActor, EntryPoint) == 0x000000, "Member 'B_ShootingRangeShootActor_C_ExecuteUbergraph_B_ShootingRangeShootActor::EntryPoint' has a wrong offset!");
static_assert(offsetof(B_ShootingRangeShootActor_C_ExecuteUbergraph_B_ShootingRangeShootActor, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'B_ShootingRangeShootActor_C_ExecuteUbergraph_B_ShootingRangeShootActor::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingRangeShootActor_C_ExecuteUbergraph_B_ShootingRangeShootActor, K2Node_DynamicCast_AsB_Shooting_Range_Task) == 0x000010, "Member 'B_ShootingRangeShootActor_C_ExecuteUbergraph_B_ShootingRangeShootActor::K2Node_DynamicCast_AsB_Shooting_Range_Task' has a wrong offset!");
static_assert(offsetof(B_ShootingRangeShootActor_C_ExecuteUbergraph_B_ShootingRangeShootActor, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'B_ShootingRangeShootActor_C_ExecuteUbergraph_B_ShootingRangeShootActor::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_ShootingRangeShootActor_C_ExecuteUbergraph_B_ShootingRangeShootActor, K2Node_Event_DeltaSeconds) == 0x00001C, "Member 'B_ShootingRangeShootActor_C_ExecuteUbergraph_B_ShootingRangeShootActor::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(B_ShootingRangeShootActor_C_ExecuteUbergraph_B_ShootingRangeShootActor, CallFunc_RemoveTargetAfterHit_DeltaSeconds_ImplicitCast) == 0x000020, "Member 'B_ShootingRangeShootActor_C_ExecuteUbergraph_B_ShootingRangeShootActor::CallFunc_RemoveTargetAfterHit_DeltaSeconds_ImplicitCast' has a wrong offset!");

// Function B_ShootingRangeShootActor.B_ShootingRangeShootActor_C.React
// 0x0001 (0x0001 - 0x0000)
struct B_ShootingRangeShootActor_C_React final
{
public:
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_ShootingRangeShootActor_C_React) == 0x000001, "Wrong alignment on B_ShootingRangeShootActor_C_React");
static_assert(sizeof(B_ShootingRangeShootActor_C_React) == 0x000001, "Wrong size on B_ShootingRangeShootActor_C_React");
static_assert(offsetof(B_ShootingRangeShootActor_C_React, CallFunc_Not_PreBool_ReturnValue) == 0x000000, "Member 'B_ShootingRangeShootActor_C_React::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function B_ShootingRangeShootActor.B_ShootingRangeShootActor_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct B_ShootingRangeShootActor_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_ShootingRangeShootActor_C_ReceiveTick) == 0x000004, "Wrong alignment on B_ShootingRangeShootActor_C_ReceiveTick");
static_assert(sizeof(B_ShootingRangeShootActor_C_ReceiveTick) == 0x000004, "Wrong size on B_ShootingRangeShootActor_C_ReceiveTick");
static_assert(offsetof(B_ShootingRangeShootActor_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'B_ShootingRangeShootActor_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function B_ShootingRangeShootActor.B_ShootingRangeShootActor_C.RemoveTargetAfterHit
// 0x0138 (0x0138 - 0x0000)
struct B_ShootingRangeShootActor_C_RemoveTargetAfterHit final
{
public:
	double                                        DeltaSeconds;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DeltaTimeRotation;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3701[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_AddRelativeRotation_SweepHitResult;    // 0x0040(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_MakeRotator_Roll_ImplicitCast;            // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3702[0x4];                                     // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Less_DoubleDouble_A_ImplicitCast;         // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_ShootingRangeShootActor_C_RemoveTargetAfterHit) == 0x000008, "Wrong alignment on B_ShootingRangeShootActor_C_RemoveTargetAfterHit");
static_assert(sizeof(B_ShootingRangeShootActor_C_RemoveTargetAfterHit) == 0x000138, "Wrong size on B_ShootingRangeShootActor_C_RemoveTargetAfterHit");
static_assert(offsetof(B_ShootingRangeShootActor_C_RemoveTargetAfterHit, DeltaSeconds) == 0x000000, "Member 'B_ShootingRangeShootActor_C_RemoveTargetAfterHit::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(B_ShootingRangeShootActor_C_RemoveTargetAfterHit, DeltaTimeRotation) == 0x000008, "Member 'B_ShootingRangeShootActor_C_RemoveTargetAfterHit::DeltaTimeRotation' has a wrong offset!");
static_assert(offsetof(B_ShootingRangeShootActor_C_RemoveTargetAfterHit, CallFunc_MakeRotator_ReturnValue) == 0x000010, "Member 'B_ShootingRangeShootActor_C_RemoveTargetAfterHit::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingRangeShootActor_C_RemoveTargetAfterHit, CallFunc_BreakRotator_Roll) == 0x000028, "Member 'B_ShootingRangeShootActor_C_RemoveTargetAfterHit::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(B_ShootingRangeShootActor_C_RemoveTargetAfterHit, CallFunc_BreakRotator_Pitch) == 0x00002C, "Member 'B_ShootingRangeShootActor_C_RemoveTargetAfterHit::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(B_ShootingRangeShootActor_C_RemoveTargetAfterHit, CallFunc_BreakRotator_Yaw) == 0x000030, "Member 'B_ShootingRangeShootActor_C_RemoveTargetAfterHit::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(B_ShootingRangeShootActor_C_RemoveTargetAfterHit, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000034, "Member 'B_ShootingRangeShootActor_C_RemoveTargetAfterHit::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingRangeShootActor_C_RemoveTargetAfterHit, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000038, "Member 'B_ShootingRangeShootActor_C_RemoveTargetAfterHit::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingRangeShootActor_C_RemoveTargetAfterHit, CallFunc_K2_AddRelativeRotation_SweepHitResult) == 0x000040, "Member 'B_ShootingRangeShootActor_C_RemoveTargetAfterHit::CallFunc_K2_AddRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(B_ShootingRangeShootActor_C_RemoveTargetAfterHit, CallFunc_MakeRotator_Roll_ImplicitCast) == 0x000128, "Member 'B_ShootingRangeShootActor_C_RemoveTargetAfterHit::CallFunc_MakeRotator_Roll_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_ShootingRangeShootActor_C_RemoveTargetAfterHit, CallFunc_Less_DoubleDouble_A_ImplicitCast) == 0x000130, "Member 'B_ShootingRangeShootActor_C_RemoveTargetAfterHit::CallFunc_Less_DoubleDouble_A_ImplicitCast' has a wrong offset!");

}

