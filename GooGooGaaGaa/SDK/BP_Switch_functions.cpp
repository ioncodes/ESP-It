#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Switch

#include "Basic.hpp"

#include "BP_Switch_classes.hpp"
#include "BP_Switch_parameters.hpp"


namespace SDK
{

// Function BP_Switch.BP_Switch_C.Action
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Switch_C::Action()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Switch_C", "Action");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Switch.BP_Switch_C.Break
// (Protected, BlueprintCallable, BlueprintEvent)

void ABP_Switch_C::Break()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Switch_C", "Break");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Switch.BP_Switch_C.TestSwitchActivationCondition
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           OverlappingActor                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Activate                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Switch_C::TestSwitchActivationCondition(class AActor* OverlappingActor, bool* Activate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Switch_C", "TestSwitchActivationCondition");

	Params::BP_Switch_C_TestSwitchActivationCondition Parms{};

	Parms.OverlappingActor = OverlappingActor;

	UObject::ProcessEvent(Func, &Parms);

	if (Activate != nullptr)
		*Activate = Parms.Activate;
}


// Function BP_Switch.BP_Switch_C.Unbreak
// (Protected, BlueprintCallable, BlueprintEvent)

void ABP_Switch_C::Unbreak()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Switch_C", "Unbreak");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Switch.BP_Switch_C.UpdateActionPlacable
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Switch_C::UpdateActionPlacable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Switch_C", "UpdateActionPlacable");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Switch.BP_Switch_C.BindToMidGamePlayerJoin
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TDelegate<void()>                       Event                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void ABP_Switch_C::BindToMidGamePlayerJoin(const TDelegate<void()>& Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Switch_C", "BindToMidGamePlayerJoin");

	Params::BP_Switch_C_BindToMidGamePlayerJoin Parms{};

	Parms.Event = Event;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Switch.BP_Switch_C.OnRep_Broken
// (BlueprintCallable, BlueprintEvent)

void ABP_Switch_C::OnRep_Broken()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Switch_C", "OnRep_Broken");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Switch.BP_Switch_C.PlaySwitchEffects
// (Protected, BlueprintCallable, BlueprintEvent)

void ABP_Switch_C::PlaySwitchEffects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Switch_C", "PlaySwitchEffects");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Switch.BP_Switch_C.DeleteInvalidTargetFromList
// (Protected, BlueprintCallable, BlueprintEvent)

void ABP_Switch_C::DeleteInvalidTargetFromList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Switch_C", "DeleteInvalidTargetFromList");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Switch.BP_Switch_C.ResetSwitchTargetSleep
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_Switch_C::ResetSwitchTargetSleep(class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Switch_C", "ResetSwitchTargetSleep");

	Params::BP_Switch_C_ResetSwitchTargetSleep Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Switch.BP_Switch_C.WakeSwitchTargetsTemporarily
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ActivateTargets                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Switch_C::WakeSwitchTargetsTemporarily(bool ActivateTargets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Switch_C", "WakeSwitchTargetsTemporarily");

	Params::BP_Switch_C_WakeSwitchTargetsTemporarily Parms{};

	Parms.ActivateTargets = ActivateTargets;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Switch.BP_Switch_C.BndEvt__BP_ToggleSwitch_CollisionBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_Switch_C::BndEvt__BP_ToggleSwitch_CollisionBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Switch_C", "BndEvt__BP_ToggleSwitch_CollisionBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");

	Params::BP_Switch_C_BndEvt__BP_ToggleSwitch_CollisionBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Switch.BP_Switch_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Switch_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Switch_C", "ReceiveTick");

	Params::BP_Switch_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Switch.BP_Switch_C.BreakMulti
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_Switch_C::BreakMulti()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Switch_C", "BreakMulti");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Switch.BP_Switch_C.UnbreakMulti
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_Switch_C::UnbreakMulti()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Switch_C", "UnbreakMulti");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Switch.BP_Switch_C.PlaySwitchEffectsMulti
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_Switch_C::PlaySwitchEffectsMulti()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Switch_C", "PlaySwitchEffectsMulti");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Switch.BP_Switch_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_Switch_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Switch_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Switch.BP_Switch_C.ResetSwitchTargetSleepDelayed
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_Switch_C::ResetSwitchTargetSleepDelayed(class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Switch_C", "ResetSwitchTargetSleepDelayed");

	Params::BP_Switch_C_ResetSwitchTargetSleepDelayed Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Switch.BP_Switch_C.HandleMidGamePlayerJoin
// (BlueprintCallable, BlueprintEvent)

void ABP_Switch_C::HandleMidGamePlayerJoin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Switch_C", "HandleMidGamePlayerJoin");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Switch.BP_Switch_C.ExecuteUbergraph_BP_Switch
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Switch_C::ExecuteUbergraph_BP_Switch(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Switch_C", "ExecuteUbergraph_BP_Switch");

	Params::BP_Switch_C_ExecuteUbergraph_BP_Switch Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}

}

