#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_PoceduralBorderMesh

#include "Basic.hpp"

#include "B_PoceduralBorderMesh_classes.hpp"
#include "B_PoceduralBorderMesh_parameters.hpp"


namespace SDK
{

// Function B_PoceduralBorderMesh.B_PoceduralBorderMesh_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AB_PoceduralBorderMesh_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PoceduralBorderMesh_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PoceduralBorderMesh.B_PoceduralBorderMesh_C.UpdateDrawdistance
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UDynamicMeshComponent*            Component                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AB_PoceduralBorderMesh_C::UpdateDrawdistance(class UDynamicMeshComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PoceduralBorderMesh_C", "UpdateDrawdistance");

	Params::B_PoceduralBorderMesh_C_UpdateDrawdistance Parms{};

	Parms.Component = Component;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PoceduralBorderMesh.B_PoceduralBorderMesh_C.TransformMesh
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UDynamicMesh*                     Mesh                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   SegmentCounter                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PoceduralBorderMesh_C::TransformMesh(class UDynamicMesh* Mesh, int32 SegmentCounter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PoceduralBorderMesh_C", "TransformMesh");

	Params::B_PoceduralBorderMesh_C_TransformMesh Parms{};

	Parms.Mesh = Mesh;
	Parms.SegmentCounter = SegmentCounter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PoceduralBorderMesh.B_PoceduralBorderMesh_C.SetupCollisionParameters
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBoxComponent*                    BoxCollision                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AB_PoceduralBorderMesh_C::SetupCollisionParameters(class UBoxComponent* BoxCollision)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PoceduralBorderMesh_C", "SetupCollisionParameters");

	Params::B_PoceduralBorderMesh_C_SetupCollisionParameters Parms{};

	Parms.BoxCollision = BoxCollision;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PoceduralBorderMesh.B_PoceduralBorderMesh_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AB_PoceduralBorderMesh_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PoceduralBorderMesh_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PoceduralBorderMesh.B_PoceduralBorderMesh_C.GetCollisionCoverExtents
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  BoxExtentX                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BoxExtentY                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  CenterPointX                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  CenterPointY                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PoceduralBorderMesh_C::GetCollisionCoverExtents(double* BoxExtentX, double* BoxExtentY, double* CenterPointX, double* CenterPointY)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PoceduralBorderMesh_C", "GetCollisionCoverExtents");

	Params::B_PoceduralBorderMesh_C_GetCollisionCoverExtents Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BoxExtentX != nullptr)
		*BoxExtentX = Parms.BoxExtentX;

	if (BoxExtentY != nullptr)
		*BoxExtentY = Parms.BoxExtentY;

	if (CenterPointX != nullptr)
		*CenterPointX = Parms.CenterPointX;

	if (CenterPointY != nullptr)
		*CenterPointY = Parms.CenterPointY;
}


// Function B_PoceduralBorderMesh.B_PoceduralBorderMesh_C.Get Segment Points
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AB_PoceduralBorderMesh_C::Get_Segment_Points()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PoceduralBorderMesh_C", "Get Segment Points");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PoceduralBorderMesh.B_PoceduralBorderMesh_C.GenerateSplinePoints
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AB_PoceduralBorderMesh_C::GenerateSplinePoints()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PoceduralBorderMesh_C", "GenerateSplinePoints");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PoceduralBorderMesh.B_PoceduralBorderMesh_C.GenerateMesh
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UDynamicMesh*                     TargetMesh                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_PoceduralBorderMesh_C::GenerateMesh(class UDynamicMesh* TargetMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PoceduralBorderMesh_C", "GenerateMesh");

	Params::B_PoceduralBorderMesh_C_GenerateMesh Parms{};

	Parms.TargetMesh = TargetMesh;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PoceduralBorderMesh.B_PoceduralBorderMesh_C.FindSegment
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           ControlPointIndex                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FSplineSegmentStruct             Segment                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NextNew                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PoceduralBorderMesh_C::FindSegment(int32 Param_Index, TArray<int32>& ControlPointIndex, struct FSplineSegmentStruct* Segment, int32* NextNew)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PoceduralBorderMesh_C", "FindSegment");

	Params::B_PoceduralBorderMesh_C_FindSegment Parms{};

	Parms.Param_Index = Param_Index;
	Parms.ControlPointIndex = std::move(ControlPointIndex);

	UObject::ProcessEvent(Func, &Parms);

	ControlPointIndex = std::move(Parms.ControlPointIndex);

	if (Segment != nullptr)
		*Segment = std::move(Parms.Segment);

	if (NextNew != nullptr)
		*NextNew = Parms.NextNew;
}


// Function B_PoceduralBorderMesh.B_PoceduralBorderMesh_C.ExtendCollisionEdges
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UBoxComponent*>            Boxes                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)

void AB_PoceduralBorderMesh_C::ExtendCollisionEdges(TArray<class UBoxComponent*>& Boxes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PoceduralBorderMesh_C", "ExtendCollisionEdges");

	Params::B_PoceduralBorderMesh_C_ExtendCollisionEdges Parms{};

	Parms.Boxes = std::move(Boxes);

	UObject::ProcessEvent(Func, &Parms);

	Boxes = std::move(Parms.Boxes);
}


// Function B_PoceduralBorderMesh.B_PoceduralBorderMesh_C.ExecuteUbergraph_B_PoceduralBorderMesh
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PoceduralBorderMesh_C::ExecuteUbergraph_B_PoceduralBorderMesh(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PoceduralBorderMesh_C", "ExecuteUbergraph_B_PoceduralBorderMesh");

	Params::B_PoceduralBorderMesh_C_ExecuteUbergraph_B_PoceduralBorderMesh Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PoceduralBorderMesh.B_PoceduralBorderMesh_C.CreateCollision
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AB_PoceduralBorderMesh_C::CreateCollision()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PoceduralBorderMesh_C", "CreateCollision");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PoceduralBorderMesh.B_PoceduralBorderMesh_C.CalculateLength
// (Public, BlueprintCallable, BlueprintEvent)

void AB_PoceduralBorderMesh_C::CalculateLength()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PoceduralBorderMesh_C", "CalculateLength");

	UObject::ProcessEvent(Func, nullptr);
}

}

