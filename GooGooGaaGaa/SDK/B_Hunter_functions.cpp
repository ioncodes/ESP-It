#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_Hunter

#include "Basic.hpp"

#include "B_Hunter_classes.hpp"
#include "B_Hunter_parameters.hpp"


namespace SDK
{

// Function B_Hunter.B_Hunter_C.LoadSkills
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      Param_Controller                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_Hunter_C::LoadSkills(class AController* Param_Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "LoadSkills");

	Params::B_Hunter_C_LoadSkills Parms{};

	Parms.Param_Controller = Param_Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Hunter.B_Hunter_C.PossessedClient
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::PossessedClient()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "PossessedClient");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AB_Hunter_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.ReceivePossessed
// (BlueprintAuthorityOnly, Event, Public, BlueprintEvent)
// Parameters:
// class AController*                      NewController                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_Hunter_C::ReceivePossessed(class AController* NewController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "ReceivePossessed");

	Params::B_Hunter_C_ReceivePossessed Parms{};

	Parms.NewController = NewController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Hunter.B_Hunter_C.GetAttachComponent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneComponent*                  Component                                              (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AB_Hunter_C::GetAttachComponent(class USceneComponent** Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "GetAttachComponent");

	Params::B_Hunter_C_GetAttachComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Component != nullptr)
		*Component = Parms.Component;
}


// Function B_Hunter.B_Hunter_C.GetCurrentController
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      Param_Controller                                       (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_Hunter_C::GetCurrentController(class AController** Param_Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "GetCurrentController");

	Params::B_Hunter_C_GetCurrentController Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_Controller != nullptr)
		*Param_Controller = Parms.Param_Controller;
}


// Function B_Hunter.B_Hunter_C.IsPlayingQuestionTaunt
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPlaying                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_Hunter_C::IsPlayingQuestionTaunt(bool* IsPlaying)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "IsPlayingQuestionTaunt");

	Params::B_Hunter_C_IsPlayingQuestionTaunt Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsPlaying != nullptr)
		*IsPlaying = Parms.IsPlaying;
}


// Function B_Hunter.B_Hunter_C.IsPlayingSpeakTaunt
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPlaying                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_Hunter_C::IsPlayingSpeakTaunt(bool* IsPlaying)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "IsPlayingSpeakTaunt");

	Params::B_Hunter_C_IsPlayingSpeakTaunt Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsPlaying != nullptr)
		*IsPlaying = Parms.IsPlaying;
}


// Function B_Hunter.B_Hunter_C.GetSpawnTransform
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Offset                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FTransform AB_Hunter_C::GetSpawnTransform(const struct FVector& Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "GetSpawnTransform");

	Params::B_Hunter_C_GetSpawnTransform Parms{};

	Parms.Offset = std::move(Offset);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_Hunter.B_Hunter_C.PlayModelAnimation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     Montage                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  InPlayRate                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ForcedBoolean                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_Hunter_C::PlayModelAnimation(class UAnimMontage* Montage, double InPlayRate, bool* ForcedBoolean)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "PlayModelAnimation");

	Params::B_Hunter_C_PlayModelAnimation Parms{};

	Parms.Montage = Montage;
	Parms.InPlayRate = InPlayRate;

	UObject::ProcessEvent(Func, &Parms);

	if (ForcedBoolean != nullptr)
		*ForcedBoolean = Parms.ForcedBoolean;
}


// Function B_Hunter.B_Hunter_C.GetSpawnTransformRotated
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Offset                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FTransform AB_Hunter_C::GetSpawnTransformRotated(const struct FVector& Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "GetSpawnTransformRotated");

	Params::B_Hunter_C_GetSpawnTransformRotated Parms{};

	Parms.Offset = std::move(Offset);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_Hunter.B_Hunter_C.GetRotateInstantForOneFrame
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool AB_Hunter_C::GetRotateInstantForOneFrame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "GetRotateInstantForOneFrame");

	Params::B_Hunter_C_GetRotateInstantForOneFrame Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_Hunter.B_Hunter_C.GetCurrentControllerYaw
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AB_Hunter_C::GetCurrentControllerYaw()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "GetCurrentControllerYaw");

	Params::B_Hunter_C_GetCurrentControllerYaw Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_Hunter.B_Hunter_C.GetIsConfused
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool AB_Hunter_C::GetIsConfused()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "GetIsConfused");

	Params::B_Hunter_C_GetIsConfused Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_Hunter.B_Hunter_C.RefreshHighlight
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Highlightable                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_Hunter_C::RefreshHighlight(bool* Highlightable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "RefreshHighlight");

	Params::B_Hunter_C_RefreshHighlight Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Highlightable != nullptr)
		*Highlightable = Parms.Highlightable;
}


// Function B_Hunter.B_Hunter_C.SetHighlight
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Highlighted                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ForcedBoolean                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_Hunter_C::SetHighlight(bool Highlighted, bool* ForcedBoolean)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "SetHighlight");

	Params::B_Hunter_C_SetHighlight Parms{};

	Parms.Highlighted = Highlighted;

	UObject::ProcessEvent(Func, &Parms);

	if (ForcedBoolean != nullptr)
		*ForcedBoolean = Parms.ForcedBoolean;
}


// Function B_Hunter.B_Hunter_C.GetRippleEffect
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UNiagaraSystem*                   RippleEffectNiagara                                    (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_Hunter_C::GetRippleEffect(class UNiagaraSystem** RippleEffectNiagara)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "GetRippleEffect");

	Params::B_Hunter_C_GetRippleEffect Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RippleEffectNiagara != nullptr)
		*RippleEffectNiagara = Parms.RippleEffectNiagara;
}


// Function B_Hunter.B_Hunter_C.GetSplashEffect
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UNiagaraSystem*                   SplashEffectNiagara                                    (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_Hunter_C::GetSplashEffect(class UNiagaraSystem** SplashEffectNiagara)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "GetSplashEffect");

	Params::B_Hunter_C_GetSplashEffect Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SplashEffectNiagara != nullptr)
		*SplashEffectNiagara = Parms.SplashEffectNiagara;
}


// Function B_Hunter.B_Hunter_C.GetRippleScale
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Scale                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_Hunter_C::GetRippleScale(struct FVector* Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "GetRippleScale");

	Params::B_Hunter_C_GetRippleScale Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Scale != nullptr)
		*Scale = std::move(Parms.Scale);
}


// Function B_Hunter.B_Hunter_C.GetSplashScale
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Scale                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_Hunter_C::GetSplashScale(struct FVector* Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "GetSplashScale");

	Params::B_Hunter_C_GetSplashScale Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Scale != nullptr)
		*Scale = std::move(Parms.Scale);
}


// Function B_Hunter.B_Hunter_C.GetSplashSound
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USoundCue*                        Sound                                                  (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_Hunter_C::GetSplashSound(class USoundCue** Sound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "GetSplashSound");

	Params::B_Hunter_C_GetSplashSound Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Sound != nullptr)
		*Sound = Parms.Sound;
}


// Function B_Hunter.B_Hunter_C.CanTeleport
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_CanTeleport                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_Hunter_C::CanTeleport(bool* Param_CanTeleport)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "CanTeleport");

	Params::B_Hunter_C_CanTeleport Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_CanTeleport != nullptr)
		*Param_CanTeleport = Parms.Param_CanTeleport;
}


// Function B_Hunter.B_Hunter_C.InitializeHunterViewVisuals
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::InitializeHunterViewVisuals()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "InitializeHunterViewVisuals");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.HandleHunterHealthBar
// (Public, BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::HandleHunterHealthBar()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "HandleHunterHealthBar");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.InitializeRules
// (Public, BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::InitializeRules()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "InitializeRules");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.TickHUD
// (Public, BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::TickHUD()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "TickHUD");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.AddOrRemoveIgnoreClientMovementCorrection
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Remove                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_Hunter_C::AddOrRemoveIgnoreClientMovementCorrection(bool Remove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "AddOrRemoveIgnoreClientMovementCorrection");

	Params::B_Hunter_C_AddOrRemoveIgnoreClientMovementCorrection Parms{};

	Parms.Remove = Remove;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Hunter.B_Hunter_C.UpdateIgnoreClientMovementCorrection
// (Public, BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::UpdateIgnoreClientMovementCorrection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "UpdateIgnoreClientMovementCorrection");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.IsMovementEnabled
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool AB_Hunter_C::IsMovementEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "IsMovementEnabled");

	Params::B_Hunter_C_IsMovementEnabled Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_Hunter.B_Hunter_C.OnRep_SkinColorSkin
// (BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::OnRep_SkinColorSkin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "OnRep_SkinColorSkin");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.OnRep_MeleeWeaponSkin
// (BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::OnRep_MeleeWeaponSkin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "OnRep_MeleeWeaponSkin");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.OnRep_RangedWeaponSkin
// (BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::OnRep_RangedWeaponSkin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "OnRep_RangedWeaponSkin");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.OnRep_HatSkin
// (BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::OnRep_HatSkin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "OnRep_HatSkin");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.OnRep_LowerBodySkin
// (BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::OnRep_LowerBodySkin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "OnRep_LowerBodySkin");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.OnRep_UpperBodySkin
// (BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::OnRep_UpperBodySkin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "OnRep_UpperBodySkin");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.OnRep_HeadSkin
// (BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::OnRep_HeadSkin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "OnRep_HeadSkin");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.TickAutoAim
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::TickAutoAim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "TickAutoAim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.DisableConfusionEffect
// (Public, BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::DisableConfusionEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "DisableConfusionEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.EnableConfusedEffect
// (Public, BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::EnableConfusedEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "EnableConfusedEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.UpdateConfusedPostProcess
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::UpdateConfusedPostProcess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "UpdateConfusedPostProcess");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.HandleTurnAndRotate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  SmoothValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsYawInput                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_Hunter_C::HandleTurnAndRotate(double AxisValue, double& SmoothValue, bool IsYawInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "HandleTurnAndRotate");

	Params::B_Hunter_C_HandleTurnAndRotate Parms{};

	Parms.AxisValue = AxisValue;
	Parms.SmoothValue = SmoothValue;
	Parms.IsYawInput = IsYawInput;

	UObject::ProcessEvent(Func, &Parms);

	SmoothValue = Parms.SmoothValue;
}


// Function B_Hunter.B_Hunter_C.HandleMovement
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          MovementVector                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  SmoothValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  CircularValue                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Cosinus                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_Hunter_C::HandleMovement(double AxisValue, const struct FVector& MovementVector, double& SmoothValue, double& CircularValue, bool Cosinus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "HandleMovement");

	Params::B_Hunter_C_HandleMovement Parms{};

	Parms.AxisValue = AxisValue;
	Parms.MovementVector = std::move(MovementVector);
	Parms.SmoothValue = SmoothValue;
	Parms.CircularValue = CircularValue;
	Parms.Cosinus = Cosinus;

	UObject::ProcessEvent(Func, &Parms);

	SmoothValue = Parms.SmoothValue;
	CircularValue = Parms.CircularValue;
}


// Function B_Hunter.B_Hunter_C.ToggleCameraView
// (Public, BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::ToggleCameraView()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "ToggleCameraView");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.InitMovementSkill
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           ActorComponentClass                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_Hunter_C::InitMovementSkill(class UClass* ActorComponentClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "InitMovementSkill");

	Params::B_Hunter_C_InitMovementSkill Parms{};

	Parms.ActorComponentClass = ActorComponentClass;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Hunter.B_Hunter_C.InitUtilitySkill
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           ActorComponentClass                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_Hunter_C::InitUtilitySkill(class UClass* ActorComponentClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "InitUtilitySkill");

	Params::B_Hunter_C_InitUtilitySkill Parms{};

	Parms.ActorComponentClass = ActorComponentClass;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Hunter.B_Hunter_C.InitMeleeSkill
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           ActorComponentClass                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_Hunter_C::InitMeleeSkill(class UClass* ActorComponentClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "InitMeleeSkill");

	Params::B_Hunter_C_InitMeleeSkill Parms{};

	Parms.ActorComponentClass = ActorComponentClass;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Hunter.B_Hunter_C.InitPrimarySkill
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Param_PrimarySkillClass                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_Hunter_C::InitPrimarySkill(class UClass* Param_PrimarySkillClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "InitPrimarySkill");

	Params::B_Hunter_C_InitPrimarySkill Parms{};

	Parms.Param_PrimarySkillClass = Param_PrimarySkillClass;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Hunter.B_Hunter_C.SetCameraView
// (Public, BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::SetCameraView()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "SetCameraView");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.TickBlind
// (Public, BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::TickBlind()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "TickBlind");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.OnRep_IsBlinded
// (HasDefaults, BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::OnRep_IsBlinded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "OnRep_IsBlinded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.TickTravelDistance
// (Public, BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::TickTravelDistance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "TickTravelDistance");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.ResetIdleTime
// (Public, BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::ResetIdleTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "ResetIdleTime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.TickIdle
// (Public, BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::TickIdle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "TickIdle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.InitWorldTransform
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::InitWorldTransform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "InitWorldTransform");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.BeginPlayFunction
// (Public, BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::BeginPlayFunction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "BeginPlayFunction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.IncrementTauntBudget
// (Public, BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::IncrementTauntBudget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "IncrementTauntBudget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.TickGlobalSkillCooldowns
// (Public, BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::TickGlobalSkillCooldowns()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "TickGlobalSkillCooldowns");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.TickJumpPlaySound
// (Public, BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::TickJumpPlaySound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "TickJumpPlaySound");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.TickActorRotation
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::TickActorRotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "TickActorRotation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.TickFunction
// (Public, BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::TickFunction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "TickFunction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.VerifySkinSlots
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHunterSkin                      SkinSlots                                              (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FHunterSkin                      VerifiedSkinSlots                                      (Parm, OutParm, NoDestructor)

void AB_Hunter_C::VerifySkinSlots(const struct FHunterSkin& SkinSlots, struct FHunterSkin* VerifiedSkinSlots)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "VerifySkinSlots");

	Params::B_Hunter_C_VerifySkinSlots Parms{};

	Parms.SkinSlots = std::move(SkinSlots);

	UObject::ProcessEvent(Func, &Parms);

	if (VerifiedSkinSlots != nullptr)
		*VerifiedSkinSlots = std::move(Parms.VerifiedSkinSlots);
}


// Function B_Hunter.B_Hunter_C.ShowScoreStats
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::ShowScoreStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "ShowScoreStats");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.TickAverageDistance
// (Public, BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::TickAverageDistance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "TickAverageDistance");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.InitVisualChild
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::InitVisualChild()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "InitVisualChild");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.UpdateSkinColor
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Param_Class                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_Hunter_C::UpdateSkinColor(class UClass* Param_Class)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "UpdateSkinColor");

	Params::B_Hunter_C_UpdateSkinColor Parms{};

	Parms.Param_Class = Param_Class;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Hunter.B_Hunter_C.TickVisuals
// (Public, BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::TickVisuals()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "TickVisuals");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.ReplicateSkinData
// (Public, BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::ReplicateSkinData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "ReplicateSkinData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.OnRep_IsConfused
// (BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::OnRep_IsConfused()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "OnRep_IsConfused");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.TickConfusion
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::TickConfusion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "TickConfusion");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.InitThirdPersonMeshes
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Body_Part                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_Hunter_C::InitThirdPersonMeshes(class AActor* Body_Part)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "InitThirdPersonMeshes");

	Params::B_Hunter_C_InitThirdPersonMeshes Parms{};

	Parms.Body_Part = Body_Part;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Hunter.B_Hunter_C.InitFirstPersonMeshes
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Body_Part                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_Hunter_C::InitFirstPersonMeshes(class AActor* Body_Part)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "InitFirstPersonMeshes");

	Params::B_Hunter_C_InitFirstPersonMeshes Parms{};

	Parms.Body_Part = Body_Part;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Hunter.B_Hunter_C.AttachToSocket
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Param_Class                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FName                             InSocketName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USceneComponent*                  Parent                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           ActorRef                                               (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_Hunter_C::AttachToSocket(class UClass* Param_Class, class FName InSocketName, class USceneComponent* Parent, class AActor** ActorRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "AttachToSocket");

	Params::B_Hunter_C_AttachToSocket Parms{};

	Parms.Param_Class = Param_Class;
	Parms.InSocketName = InSocketName;
	Parms.Parent = Parent;

	UObject::ProcessEvent(Func, &Parms);

	if (ActorRef != nullptr)
		*ActorRef = Parms.ActorRef;
}


// Function B_Hunter.B_Hunter_C.InitPlayername
// (Public, BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::InitPlayername()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "InitPlayername");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.GetSpawnTransform_X
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Offset                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FTransform AB_Hunter_C::GetSpawnTransform_X(const struct FVector& Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "GetSpawnTransform_X");

	Params::B_Hunter_C_GetSpawnTransform_X Parms{};

	Parms.Offset = std::move(Offset);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_Hunter.B_Hunter_C.AttachBodyPart
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Param_Class                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class USkeletalMeshComponent*           Parent                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    SelfShadowOlny                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AB_SkinBodypart_C*                BodyPart                                               (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_Hunter_C::AttachBodyPart(class UClass* Param_Class, class USkeletalMeshComponent* Parent, bool SelfShadowOlny, class AB_SkinBodypart_C** BodyPart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "AttachBodyPart");

	Params::B_Hunter_C_AttachBodyPart Parms{};

	Parms.Param_Class = Param_Class;
	Parms.Parent = Parent;
	Parms.SelfShadowOlny = SelfShadowOlny;

	UObject::ProcessEvent(Func, &Parms);

	if (BodyPart != nullptr)
		*BodyPart = Parms.BodyPart;
}


// Function B_Hunter.B_Hunter_C.InitializeSkinContent
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::InitializeSkinContent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "InitializeSkinContent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.TryInitializeSkinContent
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::TryInitializeSkinContent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "TryInitializeSkinContent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.DecreaseTauntBudget
// (Public, BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::DecreaseTauntBudget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "DecreaseTauntBudget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.OnRep_CageSpawend
// (BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::OnRep_CageSpawend()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "OnRep_CageSpawend");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.PlayFirstPersonAnimation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     Montage                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  InPlayRate                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_Hunter_C::PlayFirstPersonAnimation(class UAnimMontage* Montage, double InPlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "PlayFirstPersonAnimation");

	Params::B_Hunter_C_PlayFirstPersonAnimation Parms{};

	Parms.Montage = Montage;
	Parms.InPlayRate = InPlayRate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Hunter.B_Hunter_C.PlayCommunicationSound
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USoundCue*                        SoundToPlay                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_Hunter_C::PlayCommunicationSound(class USoundCue* SoundToPlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "PlayCommunicationSound");

	Params::B_Hunter_C_PlayCommunicationSound Parms{};

	Parms.SoundToPlay = SoundToPlay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Hunter.B_Hunter_C.InpActEvt_Jump_K2Node_InputActionEvent_14
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AB_Hunter_C::InpActEvt_Jump_K2Node_InputActionEvent_14(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "InpActEvt_Jump_K2Node_InputActionEvent_14");

	Params::B_Hunter_C_InpActEvt_Jump_K2Node_InputActionEvent_14 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Hunter.B_Hunter_C.InpActEvt_Jump_K2Node_InputActionEvent_13
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AB_Hunter_C::InpActEvt_Jump_K2Node_InputActionEvent_13(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "InpActEvt_Jump_K2Node_InputActionEvent_13");

	Params::B_Hunter_C_InpActEvt_Jump_K2Node_InputActionEvent_13 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Hunter.B_Hunter_C.InpActEvt_Fire_K2Node_InputActionEvent_12
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AB_Hunter_C::InpActEvt_Fire_K2Node_InputActionEvent_12(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "InpActEvt_Fire_K2Node_InputActionEvent_12");

	Params::B_Hunter_C_InpActEvt_Fire_K2Node_InputActionEvent_12 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Hunter.B_Hunter_C.InpActEvt_Fire_K2Node_InputActionEvent_11
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AB_Hunter_C::InpActEvt_Fire_K2Node_InputActionEvent_11(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "InpActEvt_Fire_K2Node_InputActionEvent_11");

	Params::B_Hunter_C_InpActEvt_Fire_K2Node_InputActionEvent_11 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Hunter.B_Hunter_C.InpActEvt_MeeleAttack_K2Node_InputActionEvent_10
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AB_Hunter_C::InpActEvt_MeeleAttack_K2Node_InputActionEvent_10(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "InpActEvt_MeeleAttack_K2Node_InputActionEvent_10");

	Params::B_Hunter_C_InpActEvt_MeeleAttack_K2Node_InputActionEvent_10 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Hunter.B_Hunter_C.InpActEvt_MeeleAttack_K2Node_InputActionEvent_9
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AB_Hunter_C::InpActEvt_MeeleAttack_K2Node_InputActionEvent_9(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "InpActEvt_MeeleAttack_K2Node_InputActionEvent_9");

	Params::B_Hunter_C_InpActEvt_MeeleAttack_K2Node_InputActionEvent_9 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Hunter.B_Hunter_C.InpActEvt_ActivateSkill_K2Node_InputActionEvent_8
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AB_Hunter_C::InpActEvt_ActivateSkill_K2Node_InputActionEvent_8(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "InpActEvt_ActivateSkill_K2Node_InputActionEvent_8");

	Params::B_Hunter_C_InpActEvt_ActivateSkill_K2Node_InputActionEvent_8 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Hunter.B_Hunter_C.InpActEvt_ActivateSkill_K2Node_InputActionEvent_7
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AB_Hunter_C::InpActEvt_ActivateSkill_K2Node_InputActionEvent_7(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "InpActEvt_ActivateSkill_K2Node_InputActionEvent_7");

	Params::B_Hunter_C_InpActEvt_ActivateSkill_K2Node_InputActionEvent_7 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Hunter.B_Hunter_C.InpActEvt_Crouch_K2Node_InputActionEvent_6
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AB_Hunter_C::InpActEvt_Crouch_K2Node_InputActionEvent_6(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "InpActEvt_Crouch_K2Node_InputActionEvent_6");

	Params::B_Hunter_C_InpActEvt_Crouch_K2Node_InputActionEvent_6 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Hunter.B_Hunter_C.InpActEvt_Crouch_K2Node_InputActionEvent_5
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AB_Hunter_C::InpActEvt_Crouch_K2Node_InputActionEvent_5(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "InpActEvt_Crouch_K2Node_InputActionEvent_5");

	Params::B_Hunter_C_InpActEvt_Crouch_K2Node_InputActionEvent_5 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Hunter.B_Hunter_C.InpActEvt_QuestionSound_K2Node_InputActionEvent_4
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AB_Hunter_C::InpActEvt_QuestionSound_K2Node_InputActionEvent_4(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "InpActEvt_QuestionSound_K2Node_InputActionEvent_4");

	Params::B_Hunter_C_InpActEvt_QuestionSound_K2Node_InputActionEvent_4 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Hunter.B_Hunter_C.InpActEvt_SpeakSound_K2Node_InputActionEvent_3
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AB_Hunter_C::InpActEvt_SpeakSound_K2Node_InputActionEvent_3(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "InpActEvt_SpeakSound_K2Node_InputActionEvent_3");

	Params::B_Hunter_C_InpActEvt_SpeakSound_K2Node_InputActionEvent_3 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Hunter.B_Hunter_C.InpActEvt_SwitchCamera_K2Node_InputActionEvent_2
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AB_Hunter_C::InpActEvt_SwitchCamera_K2Node_InputActionEvent_2(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "InpActEvt_SwitchCamera_K2Node_InputActionEvent_2");

	Params::B_Hunter_C_InpActEvt_SwitchCamera_K2Node_InputActionEvent_2 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Hunter.B_Hunter_C.InpActEvt_ActivateUtilitySkill_K2Node_InputActionEvent_1
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AB_Hunter_C::InpActEvt_ActivateUtilitySkill_K2Node_InputActionEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "InpActEvt_ActivateUtilitySkill_K2Node_InputActionEvent_1");

	Params::B_Hunter_C_InpActEvt_ActivateUtilitySkill_K2Node_InputActionEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Hunter.B_Hunter_C.InpActEvt_ActivateUtilitySkill_K2Node_InputActionEvent_0
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AB_Hunter_C::InpActEvt_ActivateUtilitySkill_K2Node_InputActionEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "InpActEvt_ActivateUtilitySkill_K2Node_InputActionEvent_0");

	Params::B_Hunter_C_InpActEvt_ActivateUtilitySkill_K2Node_InputActionEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Hunter.B_Hunter_C.InpActEvt_Four_K2Node_InputKeyEvent_0
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AB_Hunter_C::InpActEvt_Four_K2Node_InputKeyEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "InpActEvt_Four_K2Node_InputKeyEvent_0");

	Params::B_Hunter_C_InpActEvt_Four_K2Node_InputKeyEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Hunter.B_Hunter_C.Completed_41F2EA2D4AF99E35F668F7B0825F5768
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// TSubclassOf<class UObject>              Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void AB_Hunter_C::Completed_41F2EA2D4AF99E35F668F7B0825F5768(TSubclassOf<class UObject> Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "Completed_41F2EA2D4AF99E35F668F7B0825F5768");

	Params::B_Hunter_C_Completed_41F2EA2D4AF99E35F668F7B0825F5768 Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Hunter.B_Hunter_C.InpAxisEvt_Turn_K2Node_InputAxisEvent_157
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_Hunter_C::InpAxisEvt_Turn_K2Node_InputAxisEvent_157(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "InpAxisEvt_Turn_K2Node_InputAxisEvent_157");

	Params::B_Hunter_C_InpAxisEvt_Turn_K2Node_InputAxisEvent_157 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Hunter.B_Hunter_C.InpAxisEvt_LookUp_K2Node_InputAxisEvent_172
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_Hunter_C::InpAxisEvt_LookUp_K2Node_InputAxisEvent_172(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "InpAxisEvt_LookUp_K2Node_InputAxisEvent_172");

	Params::B_Hunter_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_172 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Hunter.B_Hunter_C.InpAxisEvt_MoveForward_K2Node_InputAxisEvent_181
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_Hunter_C::InpAxisEvt_MoveForward_K2Node_InputAxisEvent_181(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "InpAxisEvt_MoveForward_K2Node_InputAxisEvent_181");

	Params::B_Hunter_C_InpAxisEvt_MoveForward_K2Node_InputAxisEvent_181 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Hunter.B_Hunter_C.InpAxisEvt_MoveRight_K2Node_InputAxisEvent_192
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_Hunter_C::InpAxisEvt_MoveRight_K2Node_InputAxisEvent_192(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "InpAxisEvt_MoveRight_K2Node_InputAxisEvent_192");

	Params::B_Hunter_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_192 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Hunter.B_Hunter_C.OnJumped
// (Event, Public, BlueprintEvent)

void AB_Hunter_C::OnJumped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "OnJumped");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.PlayQuestionSound
// (Net, NetServer, BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::PlayQuestionSound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "PlayQuestionSound");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.PlaySpeakSound
// (Net, NetServer, BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::PlaySpeakSound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "PlaySpeakSound");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.PlayQuestionSoundMulticast
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::PlayQuestionSoundMulticast()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "PlayQuestionSoundMulticast");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.PlaySpeakSoundMulticast
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::PlaySpeakSoundMulticast()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "PlaySpeakSoundMulticast");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.InpAxisEvt_TurnRate_K2Node_InputAxisEvent_1
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_Hunter_C::InpAxisEvt_TurnRate_K2Node_InputAxisEvent_1(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "InpAxisEvt_TurnRate_K2Node_InputAxisEvent_1");

	Params::B_Hunter_C_InpAxisEvt_TurnRate_K2Node_InputAxisEvent_1 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Hunter.B_Hunter_C.InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_11
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_Hunter_C::InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_11(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_11");

	Params::B_Hunter_C_InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_11 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Hunter.B_Hunter_C.ReceiveUnpossessed
// (BlueprintAuthorityOnly, Event, Public, BlueprintEvent)
// Parameters:
// class AController*                      OldController                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_Hunter_C::ReceiveUnpossessed(class AController* OldController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "ReceiveUnpossessed");

	Params::B_Hunter_C_ReceiveUnpossessed Parms{};

	Parms.OldController = OldController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Hunter.B_Hunter_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_Hunter_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "ReceiveTick");

	Params::B_Hunter_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Hunter.B_Hunter_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_Hunter_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "ReceiveEndPlay");

	Params::B_Hunter_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Hunter.B_Hunter_C.LoadSkinOwningClient
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::LoadSkinOwningClient()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "LoadSkinOwningClient");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.ReceiveDestroyed
// (Event, Public, BlueprintEvent)

void AB_Hunter_C::ReceiveDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "ReceiveDestroyed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.BndEvt__CharacterMovement_K2Node_ComponentBoundEvent_0_CharacterMovementAdjustPositionSignature__DelegateSignature
// (BlueprintEvent)
// Parameters:
// struct FVector                          NewLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_Hunter_C::BndEvt__CharacterMovement_K2Node_ComponentBoundEvent_0_CharacterMovementAdjustPositionSignature__DelegateSignature(const struct FVector& NewLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "BndEvt__CharacterMovement_K2Node_ComponentBoundEvent_0_CharacterMovementAdjustPositionSignature__DelegateSignature");

	Params::B_Hunter_C_BndEvt__CharacterMovement_K2Node_ComponentBoundEvent_0_CharacterMovementAdjustPositionSignature__DelegateSignature Parms{};

	Parms.NewLocation = std::move(NewLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Hunter.B_Hunter_C.ProceedTeleport
// (Public, BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::ProceedTeleport()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "ProceedTeleport");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.PostProccedTeleport
// (Public, BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::PostProccedTeleport()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "PostProccedTeleport");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.DebugServerConfusion
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::DebugServerConfusion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "DebugServerConfusion");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.SetHighlightChannel
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EHighlightChannel                       Channel                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_Hunter_C::SetHighlightChannel(EHighlightChannel Channel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "SetHighlightChannel");

	Params::B_Hunter_C_SetHighlightChannel Parms{};

	Parms.Channel = Channel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Hunter.B_Hunter_C.OnSetConfused
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bConfused                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_Hunter_C::OnSetConfused(bool bConfused, double Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "OnSetConfused");

	Params::B_Hunter_C_OnSetConfused Parms{};

	Parms.bConfused = bConfused;
	Parms.Duration = Duration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Hunter.B_Hunter_C.HitActor
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Param_HitActor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_Hunter_C::HitActor(class AActor* Param_HitActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "HitActor");

	Params::B_Hunter_C_HitActor Parms{};

	Parms.Param_HitActor = Param_HitActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Hunter.B_Hunter_C.K2_OnStartCrouch
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   HalfHeightAdjust                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ScaledHalfHeightAdjust                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_Hunter_C::K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "K2_OnStartCrouch");

	Params::B_Hunter_C_K2_OnStartCrouch Parms{};

	Parms.HalfHeightAdjust = HalfHeightAdjust;
	Parms.ScaledHalfHeightAdjust = ScaledHalfHeightAdjust;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Hunter.B_Hunter_C.K2_OnEndCrouch
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   HalfHeightAdjust                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ScaledHalfHeightAdjust                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_Hunter_C::K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "K2_OnEndCrouch");

	Params::B_Hunter_C_K2_OnEndCrouch Parms{};

	Parms.HalfHeightAdjust = HalfHeightAdjust;
	Parms.ScaledHalfHeightAdjust = ScaledHalfHeightAdjust;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Hunter.B_Hunter_C.LoadSkinsServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPrimaryAssetId                  HeadSkinClass                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FPrimaryAssetId                  UpperBodySkinClass                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FPrimaryAssetId                  LowerBodySkinClass                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FPrimaryAssetId                  HatSkinClass                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FPrimaryAssetId                  RangedWeaponSkinClass                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FPrimaryAssetId                  MeleeWeaponSkinClass                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FPrimaryAssetId                  SkinColorSkinClass                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_Hunter_C::LoadSkinsServer(const struct FPrimaryAssetId& HeadSkinClass, const struct FPrimaryAssetId& UpperBodySkinClass, const struct FPrimaryAssetId& LowerBodySkinClass, const struct FPrimaryAssetId& HatSkinClass, const struct FPrimaryAssetId& RangedWeaponSkinClass, const struct FPrimaryAssetId& MeleeWeaponSkinClass, const struct FPrimaryAssetId& SkinColorSkinClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "LoadSkinsServer");

	Params::B_Hunter_C_LoadSkinsServer Parms{};

	Parms.HeadSkinClass = std::move(HeadSkinClass);
	Parms.UpperBodySkinClass = std::move(UpperBodySkinClass);
	Parms.LowerBodySkinClass = std::move(LowerBodySkinClass);
	Parms.HatSkinClass = std::move(HatSkinClass);
	Parms.RangedWeaponSkinClass = std::move(RangedWeaponSkinClass);
	Parms.MeleeWeaponSkinClass = std::move(MeleeWeaponSkinClass);
	Parms.SkinColorSkinClass = std::move(SkinColorSkinClass);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Hunter.B_Hunter_C.PotatoTossed
// (BlueprintCallable, BlueprintEvent)

void AB_Hunter_C::PotatoTossed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "PotatoTossed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Hunter.B_Hunter_C.ExecuteUbergraph_B_Hunter
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_Hunter_C::ExecuteUbergraph_B_Hunter(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "ExecuteUbergraph_B_Hunter");

	Params::B_Hunter_C_ExecuteUbergraph_B_Hunter Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Hunter.B_Hunter_C.CanJumpInternal
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool AB_Hunter_C::CanJumpInternal() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Hunter_C", "CanJumpInternal");

	Params::B_Hunter_C_CanJumpInternal Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

