#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_FlyingEyeSkill

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function B_FlyingEyeSkill.B_FlyingEyeSkill_C.CanActivate
// 0x0004 (0x0004 - 0x0000)
struct B_FlyingEyeSkill_C_CanActivate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanActivate_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_FlyingEyeSkill_C_CanActivate) == 0x000001, "Wrong alignment on B_FlyingEyeSkill_C_CanActivate");
static_assert(sizeof(B_FlyingEyeSkill_C_CanActivate) == 0x000004, "Wrong size on B_FlyingEyeSkill_C_CanActivate");
static_assert(offsetof(B_FlyingEyeSkill_C_CanActivate, ReturnValue) == 0x000000, "Member 'B_FlyingEyeSkill_C_CanActivate::ReturnValue' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_CanActivate, CallFunc_CanActivate_ReturnValue) == 0x000001, "Member 'B_FlyingEyeSkill_C_CanActivate::CallFunc_CanActivate_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_CanActivate, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'B_FlyingEyeSkill_C_CanActivate::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_CanActivate, CallFunc_BooleanOR_ReturnValue) == 0x000003, "Member 'B_FlyingEyeSkill_C_CanActivate::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function B_FlyingEyeSkill.B_FlyingEyeSkill_C.ExecuteUbergraph_B_FlyingEyeSkill
// 0x05C0 (0x05C0 - 0x0000)
struct B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_SkillParametersSubsystem_C*          CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_SkillParametersSubsystem_C*          CallFunc_GetWorldSubsystem_ReturnValue_1;          // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSpawnTransform_SpawnTransform;         // 0x0040(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_DynamicCast_AsPawn;                         // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0100(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0160(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_169[0x7];                                      // 0x0169(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_FlyingEye_C*                         CallFunc_FinishSpawningActor_ReturnValue;          // 0x0170(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0178(0x0010)(ConstParm, ReferenceParm)
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0188(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_191[0x7];                                      // 0x0191(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0198(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PropPawnPhysics_C*                   K2Node_DynamicCast_AsB_Prop_Pawn_Physics;          // 0x01A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A9[0x3];                                      // 0x01A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetOwnersMana_Mana;                       // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetOwnerIsDispel_IsDispel;                // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C1[0x7];                                      // 0x01C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x01D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D2[0x6];                                      // 0x01D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x01D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerController_C*                  K2Node_DynamicCast_AsB_Player_Controller;          // 0x01E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E9[0x7];                                      // 0x01E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x01F0(0x0010)(ConstParm, ReferenceParm)
	struct FTransform                             CallFunc_GetSpawnTransform_SpawnTransform_1;       // 0x0200(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x0260(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x0278(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x0290(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A8[0x8];                                      // 0x02A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSpawnTransform_SpawnTransform_2;       // 0x02B0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0310(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_2;                // 0x0328(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_2;                // 0x0340(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_2;                   // 0x0358(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0370(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue_1;           // 0x0388(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x03A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x03B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_SphereTraceSingleForObjects_OutHit;       // 0x03D0(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingleForObjects_ReturnValue;  // 0x04C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C9[0x7];                                      // 0x04C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x04D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x04E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x04E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4EA[0x2];                                      // 0x04EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x04EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x04F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F4[0x4];                                      // 0x04F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x04F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0510(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0528(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0540(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0558(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0560(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0568(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0570(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x0578(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0580(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0584(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0588(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_58C[0x4];                                      // 0x058C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0590(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x05A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill) == 0x000010, "Wrong alignment on B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill");
static_assert(sizeof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill) == 0x0005C0, "Wrong size on B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, EntryPoint) == 0x000000, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::EntryPoint' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000008, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_GetWorldSubsystem_ReturnValue_1) == 0x000010, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_GetWorldSubsystem_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000018, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_GetOwner_ReturnValue) == 0x000030, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_GetSpawnTransform_SpawnTransform) == 0x000040, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_GetSpawnTransform_SpawnTransform' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, K2Node_DynamicCast_AsPawn) == 0x0000A0, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::K2Node_DynamicCast_AsPawn' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, K2Node_DynamicCast_bSuccess) == 0x0000A8, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_BreakTransform_Location) == 0x0000B0, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_BreakTransform_Rotation) == 0x0000C8, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_BreakTransform_Scale) == 0x0000E0, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_MakeTransform_ReturnValue) == 0x000100, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000160, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_IsValid_ReturnValue) == 0x000168, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_FinishSpawningActor_ReturnValue) == 0x000170, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, Temp_object_Variable) == 0x000178, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, K2Node_DynamicCast_AsB_Player_State) == 0x000188, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, K2Node_DynamicCast_bSuccess_1) == 0x000190, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_K2_GetPawn_ReturnValue) == 0x000198, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, K2Node_DynamicCast_AsB_Prop_Pawn_Physics) == 0x0001A0, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::K2Node_DynamicCast_AsB_Prop_Pawn_Physics' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, K2Node_DynamicCast_bSuccess_2) == 0x0001A8, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, K2Node_Event_DeltaSeconds) == 0x0001AC, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_GetOwnersMana_Mana) == 0x0001B0, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_GetOwnersMana_Mana' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x0001B8, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_GetOwnerIsDispel_IsDispel) == 0x0001C0, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_GetOwnerIsDispel_IsDispel' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0001C8, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_Less_DoubleDouble_ReturnValue) == 0x0001D0, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_BooleanOR_ReturnValue) == 0x0001D1, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_GetController_ReturnValue) == 0x0001D8, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, K2Node_DynamicCast_AsB_Player_Controller) == 0x0001E0, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::K2Node_DynamicCast_AsB_Player_Controller' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, K2Node_DynamicCast_bSuccess_3) == 0x0001E8, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, K2Node_MakeArray_Array) == 0x0001F0, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_GetSpawnTransform_SpawnTransform_1) == 0x000200, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_GetSpawnTransform_SpawnTransform_1' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_BreakTransform_Location_1) == 0x000260, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_BreakTransform_Rotation_1) == 0x000278, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_BreakTransform_Scale_1) == 0x000290, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_GetSpawnTransform_SpawnTransform_2) == 0x0002B0, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_GetSpawnTransform_SpawnTransform_2' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_GetForwardVector_ReturnValue) == 0x000310, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_BreakTransform_Location_2) == 0x000328, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_BreakTransform_Location_2' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_BreakTransform_Rotation_2) == 0x000340, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_BreakTransform_Rotation_2' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_BreakTransform_Scale_2) == 0x000358, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_BreakTransform_Scale_2' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000370, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_GetForwardVector_ReturnValue_1) == 0x000388, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_GetForwardVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_Add_VectorVector_ReturnValue) == 0x0003A0, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x0003B8, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_SphereTraceSingleForObjects_OutHit) == 0x0003D0, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_SphereTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_SphereTraceSingleForObjects_ReturnValue) == 0x0004C8, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_SphereTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0004D0, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_BreakHitResult_bBlockingHit) == 0x0004E8, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_BreakHitResult_bInitialOverlap) == 0x0004E9, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_BreakHitResult_Time) == 0x0004EC, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_BreakHitResult_Distance) == 0x0004F0, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_BreakHitResult_Location) == 0x0004F8, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_BreakHitResult_ImpactPoint) == 0x000510, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_BreakHitResult_Normal) == 0x000528, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_BreakHitResult_ImpactNormal) == 0x000540, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_BreakHitResult_PhysMat) == 0x000558, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_BreakHitResult_HitActor) == 0x000560, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_BreakHitResult_HitComponent) == 0x000568, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_BreakHitResult_HitBoneName) == 0x000570, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_BreakHitResult_BoneName) == 0x000578, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_BreakHitResult_HitItem) == 0x000580, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_BreakHitResult_ElementIndex) == 0x000584, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_BreakHitResult_FaceIndex) == 0x000588, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_BreakHitResult_TraceStart) == 0x000590, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill, CallFunc_BreakHitResult_TraceEnd) == 0x0005A8, "Member 'B_FlyingEyeSkill_C_ExecuteUbergraph_B_FlyingEyeSkill::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");

// Function B_FlyingEyeSkill.B_FlyingEyeSkill_C.GetSpawnTransform
// 0x0210 (0x0210 - 0x0000)
struct B_FlyingEyeSkill_C_GetSpawnTransform final
{
public:
	struct FTransform                             SpawnTransform;                                    // 0x0000(0x0060)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PropPawnPhysics_C*                   K2Node_DynamicCast_AsB_Prop_Pawn_Physics;          // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  K2Node_DynamicCast_AsPawn;                         // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetControlRotation_ReturnValue;           // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TScriptInterface<class IIProp_C>              K2Node_DynamicCast_AsIProp;                        // 0x00A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B2[0x6];                                       // 0x00B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetCenter_Center;                         // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x00E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0100(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0120(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_DynamicCast_AsPawn_1;                       // 0x0180(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetControlRotation_ReturnValue_1;         // 0x0190(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A8[0x8];                                      // 0x01A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x01B0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_FlyingEyeSkill_C_GetSpawnTransform) == 0x000010, "Wrong alignment on B_FlyingEyeSkill_C_GetSpawnTransform");
static_assert(sizeof(B_FlyingEyeSkill_C_GetSpawnTransform) == 0x000210, "Wrong size on B_FlyingEyeSkill_C_GetSpawnTransform");
static_assert(offsetof(B_FlyingEyeSkill_C_GetSpawnTransform, SpawnTransform) == 0x000000, "Member 'B_FlyingEyeSkill_C_GetSpawnTransform::SpawnTransform' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_GetSpawnTransform, CallFunc_GetOwner_ReturnValue) == 0x000060, "Member 'B_FlyingEyeSkill_C_GetSpawnTransform::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_GetSpawnTransform, K2Node_DynamicCast_AsB_Prop_Pawn_Physics) == 0x000068, "Member 'B_FlyingEyeSkill_C_GetSpawnTransform::K2Node_DynamicCast_AsB_Prop_Pawn_Physics' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_GetSpawnTransform, K2Node_DynamicCast_bSuccess) == 0x000070, "Member 'B_FlyingEyeSkill_C_GetSpawnTransform::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_GetSpawnTransform, K2Node_DynamicCast_AsPawn) == 0x000078, "Member 'B_FlyingEyeSkill_C_GetSpawnTransform::K2Node_DynamicCast_AsPawn' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_GetSpawnTransform, K2Node_DynamicCast_bSuccess_1) == 0x000080, "Member 'B_FlyingEyeSkill_C_GetSpawnTransform::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_GetSpawnTransform, CallFunc_GetControlRotation_ReturnValue) == 0x000088, "Member 'B_FlyingEyeSkill_C_GetSpawnTransform::CallFunc_GetControlRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_GetSpawnTransform, K2Node_DynamicCast_AsIProp) == 0x0000A0, "Member 'B_FlyingEyeSkill_C_GetSpawnTransform::K2Node_DynamicCast_AsIProp' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_GetSpawnTransform, K2Node_DynamicCast_bSuccess_2) == 0x0000B0, "Member 'B_FlyingEyeSkill_C_GetSpawnTransform::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_GetSpawnTransform, CallFunc_IsValid_ReturnValue) == 0x0000B1, "Member 'B_FlyingEyeSkill_C_GetSpawnTransform::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_GetSpawnTransform, CallFunc_GetCenter_Center) == 0x0000B8, "Member 'B_FlyingEyeSkill_C_GetSpawnTransform::CallFunc_GetCenter_Center' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_GetSpawnTransform, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000D0, "Member 'B_FlyingEyeSkill_C_GetSpawnTransform::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_GetSpawnTransform, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x0000E8, "Member 'B_FlyingEyeSkill_C_GetSpawnTransform::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_GetSpawnTransform, CallFunc_Add_VectorVector_ReturnValue) == 0x000100, "Member 'B_FlyingEyeSkill_C_GetSpawnTransform::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_GetSpawnTransform, CallFunc_MakeTransform_ReturnValue) == 0x000120, "Member 'B_FlyingEyeSkill_C_GetSpawnTransform::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_GetSpawnTransform, K2Node_DynamicCast_AsPawn_1) == 0x000180, "Member 'B_FlyingEyeSkill_C_GetSpawnTransform::K2Node_DynamicCast_AsPawn_1' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_GetSpawnTransform, K2Node_DynamicCast_bSuccess_3) == 0x000188, "Member 'B_FlyingEyeSkill_C_GetSpawnTransform::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_GetSpawnTransform, CallFunc_GetControlRotation_ReturnValue_1) == 0x000190, "Member 'B_FlyingEyeSkill_C_GetSpawnTransform::CallFunc_GetControlRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_FlyingEyeSkill_C_GetSpawnTransform, CallFunc_MakeTransform_ReturnValue_1) == 0x0001B0, "Member 'B_FlyingEyeSkill_C_GetSpawnTransform::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");

// Function B_FlyingEyeSkill.B_FlyingEyeSkill_C.InitializeRules
// 0x0008 (0x0008 - 0x0000)
struct B_FlyingEyeSkill_C_InitializeRules final
{
public:
	class UB_SkillParametersSubsystem_C*          CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_FlyingEyeSkill_C_InitializeRules) == 0x000008, "Wrong alignment on B_FlyingEyeSkill_C_InitializeRules");
static_assert(sizeof(B_FlyingEyeSkill_C_InitializeRules) == 0x000008, "Wrong size on B_FlyingEyeSkill_C_InitializeRules");
static_assert(offsetof(B_FlyingEyeSkill_C_InitializeRules, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000000, "Member 'B_FlyingEyeSkill_C_InitializeRules::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");

// Function B_FlyingEyeSkill.B_FlyingEyeSkill_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct B_FlyingEyeSkill_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_FlyingEyeSkill_C_ReceiveTick) == 0x000004, "Wrong alignment on B_FlyingEyeSkill_C_ReceiveTick");
static_assert(sizeof(B_FlyingEyeSkill_C_ReceiveTick) == 0x000004, "Wrong size on B_FlyingEyeSkill_C_ReceiveTick");
static_assert(offsetof(B_FlyingEyeSkill_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'B_FlyingEyeSkill_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

}

