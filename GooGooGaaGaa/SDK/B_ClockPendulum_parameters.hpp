#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_ClockPendulum

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function B_ClockPendulum.B_ClockPendulum_C.ApplyTemplateData
// 0x0128 (0x0128 - 0x0000)
struct B_ClockPendulum_C_ApplyTemplateData final
{
public:
	class AActor*                                 Template;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          ForcedBoolean;                                     // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DDB[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ApplyTemplateData_ForcedBoolean;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DDC[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_SeekGameState_C*                     K2Node_DynamicCast_AsB_Seek_Game_State;            // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DDD[0x5];                                     // 0x002B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_ClockPendulum_C*                     K2Node_DynamicCast_AsB_Clock_Pendulum;             // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DDE[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPlaybackPosition_ReturnValue;          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x0040(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(B_ClockPendulum_C_ApplyTemplateData) == 0x000008, "Wrong alignment on B_ClockPendulum_C_ApplyTemplateData");
static_assert(sizeof(B_ClockPendulum_C_ApplyTemplateData) == 0x000128, "Wrong size on B_ClockPendulum_C_ApplyTemplateData");
static_assert(offsetof(B_ClockPendulum_C_ApplyTemplateData, Template) == 0x000000, "Member 'B_ClockPendulum_C_ApplyTemplateData::Template' has a wrong offset!");
static_assert(offsetof(B_ClockPendulum_C_ApplyTemplateData, ForcedBoolean) == 0x000008, "Member 'B_ClockPendulum_C_ApplyTemplateData::ForcedBoolean' has a wrong offset!");
static_assert(offsetof(B_ClockPendulum_C_ApplyTemplateData, CallFunc_GetGameState_ReturnValue) == 0x000010, "Member 'B_ClockPendulum_C_ApplyTemplateData::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ClockPendulum_C_ApplyTemplateData, CallFunc_ApplyTemplateData_ForcedBoolean) == 0x000018, "Member 'B_ClockPendulum_C_ApplyTemplateData::CallFunc_ApplyTemplateData_ForcedBoolean' has a wrong offset!");
static_assert(offsetof(B_ClockPendulum_C_ApplyTemplateData, K2Node_DynamicCast_AsB_Seek_Game_State) == 0x000020, "Member 'B_ClockPendulum_C_ApplyTemplateData::K2Node_DynamicCast_AsB_Seek_Game_State' has a wrong offset!");
static_assert(offsetof(B_ClockPendulum_C_ApplyTemplateData, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'B_ClockPendulum_C_ApplyTemplateData::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_ClockPendulum_C_ApplyTemplateData, CallFunc_IsValid_ReturnValue) == 0x000029, "Member 'B_ClockPendulum_C_ApplyTemplateData::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ClockPendulum_C_ApplyTemplateData, K2Node_SwitchEnum_CmpSuccess) == 0x00002A, "Member 'B_ClockPendulum_C_ApplyTemplateData::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(B_ClockPendulum_C_ApplyTemplateData, K2Node_DynamicCast_AsB_Clock_Pendulum) == 0x000030, "Member 'B_ClockPendulum_C_ApplyTemplateData::K2Node_DynamicCast_AsB_Clock_Pendulum' has a wrong offset!");
static_assert(offsetof(B_ClockPendulum_C_ApplyTemplateData, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'B_ClockPendulum_C_ApplyTemplateData::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_ClockPendulum_C_ApplyTemplateData, CallFunc_GetPlaybackPosition_ReturnValue) == 0x00003C, "Member 'B_ClockPendulum_C_ApplyTemplateData::CallFunc_GetPlaybackPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ClockPendulum_C_ApplyTemplateData, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x000040, "Member 'B_ClockPendulum_C_ApplyTemplateData::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");

// Function B_ClockPendulum.B_ClockPendulum_C.ExecuteUbergraph_B_ClockPendulum
// 0x0010 (0x0010 - 0x0000)
struct B_ClockPendulum_C_ExecuteUbergraph_B_ClockPendulum final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DDF[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_UpdatePendulumRotation_Roll_ImplicitCast; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_ClockPendulum_C_ExecuteUbergraph_B_ClockPendulum) == 0x000008, "Wrong alignment on B_ClockPendulum_C_ExecuteUbergraph_B_ClockPendulum");
static_assert(sizeof(B_ClockPendulum_C_ExecuteUbergraph_B_ClockPendulum) == 0x000010, "Wrong size on B_ClockPendulum_C_ExecuteUbergraph_B_ClockPendulum");
static_assert(offsetof(B_ClockPendulum_C_ExecuteUbergraph_B_ClockPendulum, EntryPoint) == 0x000000, "Member 'B_ClockPendulum_C_ExecuteUbergraph_B_ClockPendulum::EntryPoint' has a wrong offset!");
static_assert(offsetof(B_ClockPendulum_C_ExecuteUbergraph_B_ClockPendulum, CallFunc_IsDedicatedServer_ReturnValue) == 0x000004, "Member 'B_ClockPendulum_C_ExecuteUbergraph_B_ClockPendulum::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ClockPendulum_C_ExecuteUbergraph_B_ClockPendulum, CallFunc_UpdatePendulumRotation_Roll_ImplicitCast) == 0x000008, "Member 'B_ClockPendulum_C_ExecuteUbergraph_B_ClockPendulum::CallFunc_UpdatePendulumRotation_Roll_ImplicitCast' has a wrong offset!");

// Function B_ClockPendulum.B_ClockPendulum_C.GetVisualInterpolators
// 0x0040 (0x0040 - 0x0000)
struct B_ClockPendulum_C_GetVisualInterpolators final
{
public:
	TArray<class AB_VisualIntepolator_C*>         VisualInterpolators;                               // 0x0000(0x0010)(Parm, OutParm)
	TArray<class AB_VisualIntepolator_C*>         Interpolators;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class AB_VisualIntepolator_C*>         CallFunc_GetVisualInterpolators_VisualInterpolators; // 0x0020(0x0010)(ReferenceParm)
	class AB_VisualIntepolator_C*                 CallFunc_CreateVisualInterpolatorForMesh_ReturnValue; // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_ClockPendulum_C_GetVisualInterpolators) == 0x000008, "Wrong alignment on B_ClockPendulum_C_GetVisualInterpolators");
static_assert(sizeof(B_ClockPendulum_C_GetVisualInterpolators) == 0x000040, "Wrong size on B_ClockPendulum_C_GetVisualInterpolators");
static_assert(offsetof(B_ClockPendulum_C_GetVisualInterpolators, VisualInterpolators) == 0x000000, "Member 'B_ClockPendulum_C_GetVisualInterpolators::VisualInterpolators' has a wrong offset!");
static_assert(offsetof(B_ClockPendulum_C_GetVisualInterpolators, Interpolators) == 0x000010, "Member 'B_ClockPendulum_C_GetVisualInterpolators::Interpolators' has a wrong offset!");
static_assert(offsetof(B_ClockPendulum_C_GetVisualInterpolators, CallFunc_GetVisualInterpolators_VisualInterpolators) == 0x000020, "Member 'B_ClockPendulum_C_GetVisualInterpolators::CallFunc_GetVisualInterpolators_VisualInterpolators' has a wrong offset!");
static_assert(offsetof(B_ClockPendulum_C_GetVisualInterpolators, CallFunc_CreateVisualInterpolatorForMesh_ReturnValue) == 0x000030, "Member 'B_ClockPendulum_C_GetVisualInterpolators::CallFunc_CreateVisualInterpolatorForMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ClockPendulum_C_GetVisualInterpolators, CallFunc_Array_Add_ReturnValue) == 0x000038, "Member 'B_ClockPendulum_C_GetVisualInterpolators::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function B_ClockPendulum.B_ClockPendulum_C.UpdatePendulumRotation
// 0x0110 (0x0110 - 0x0000)
struct B_ClockPendulum_C_UpdatePendulumRotation final
{
public:
	double                                        Roll;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x0020(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_MakeRotator_Roll_ImplicitCast;            // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_ClockPendulum_C_UpdatePendulumRotation) == 0x000008, "Wrong alignment on B_ClockPendulum_C_UpdatePendulumRotation");
static_assert(sizeof(B_ClockPendulum_C_UpdatePendulumRotation) == 0x000110, "Wrong size on B_ClockPendulum_C_UpdatePendulumRotation");
static_assert(offsetof(B_ClockPendulum_C_UpdatePendulumRotation, Roll) == 0x000000, "Member 'B_ClockPendulum_C_UpdatePendulumRotation::Roll' has a wrong offset!");
static_assert(offsetof(B_ClockPendulum_C_UpdatePendulumRotation, CallFunc_MakeRotator_ReturnValue) == 0x000008, "Member 'B_ClockPendulum_C_UpdatePendulumRotation::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ClockPendulum_C_UpdatePendulumRotation, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x000020, "Member 'B_ClockPendulum_C_UpdatePendulumRotation::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(B_ClockPendulum_C_UpdatePendulumRotation, CallFunc_MakeRotator_Roll_ImplicitCast) == 0x000108, "Member 'B_ClockPendulum_C_UpdatePendulumRotation::CallFunc_MakeRotator_Roll_ImplicitCast' has a wrong offset!");

}

