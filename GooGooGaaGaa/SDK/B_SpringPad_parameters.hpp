#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_SpringPad

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function B_SpringPad.B_SpringPad_C.BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentSleepSignature__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct B_SpringPad_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentSleepSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    SleepingComponent;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_SpringPad_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentSleepSignature__DelegateSignature) == 0x000008, "Wrong alignment on B_SpringPad_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentSleepSignature__DelegateSignature");
static_assert(sizeof(B_SpringPad_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentSleepSignature__DelegateSignature) == 0x000010, "Wrong size on B_SpringPad_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentSleepSignature__DelegateSignature");
static_assert(offsetof(B_SpringPad_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentSleepSignature__DelegateSignature, SleepingComponent) == 0x000000, "Member 'B_SpringPad_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentSleepSignature__DelegateSignature::SleepingComponent' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentSleepSignature__DelegateSignature, BoneName) == 0x000008, "Member 'B_SpringPad_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentSleepSignature__DelegateSignature::BoneName' has a wrong offset!");

// Function B_SpringPad.B_SpringPad_C.BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentWakeSignature__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct B_SpringPad_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentWakeSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    WakingComponent;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_SpringPad_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentWakeSignature__DelegateSignature) == 0x000008, "Wrong alignment on B_SpringPad_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentWakeSignature__DelegateSignature");
static_assert(sizeof(B_SpringPad_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentWakeSignature__DelegateSignature) == 0x000010, "Wrong size on B_SpringPad_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentWakeSignature__DelegateSignature");
static_assert(offsetof(B_SpringPad_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentWakeSignature__DelegateSignature, WakingComponent) == 0x000000, "Member 'B_SpringPad_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentWakeSignature__DelegateSignature::WakingComponent' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentWakeSignature__DelegateSignature, BoneName) == 0x000008, "Member 'B_SpringPad_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentWakeSignature__DelegateSignature::BoneName' has a wrong offset!");

// Function B_SpringPad.B_SpringPad_C.BndEvt__TriggerSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x0108 (0x0108 - 0x0000)
struct B_SpringPad_C_BndEvt__TriggerSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4866[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(B_SpringPad_C_BndEvt__TriggerSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on B_SpringPad_C_BndEvt__TriggerSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(B_SpringPad_C_BndEvt__TriggerSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000108, "Wrong size on B_SpringPad_C_BndEvt__TriggerSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(B_SpringPad_C_BndEvt__TriggerSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'B_SpringPad_C_BndEvt__TriggerSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_BndEvt__TriggerSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'B_SpringPad_C_BndEvt__TriggerSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_BndEvt__TriggerSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'B_SpringPad_C_BndEvt__TriggerSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_BndEvt__TriggerSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'B_SpringPad_C_BndEvt__TriggerSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_BndEvt__TriggerSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'B_SpringPad_C_BndEvt__TriggerSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_BndEvt__TriggerSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'B_SpringPad_C_BndEvt__TriggerSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function B_SpringPad.B_SpringPad_C.ExecuteUbergraph_B_SpringPad
// 0x0290 (0x0290 - 0x0000)
struct B_SpringPad_C_ExecuteUbergraph_B_SpringPad final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_NotifyName_8;                   // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate;              // 0x000C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_NotifyName_7;                   // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_1;            // 0x0024(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_NotifyName_6;                   // 0x0034(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_2;            // 0x003C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_NotifyName_5;                   // 0x004C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_3;            // 0x0054(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable;                                // 0x0064(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_4;            // 0x006C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_NotifyName_4;                   // 0x007C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_NotifyName_3;                   // 0x0084(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_5;            // 0x008C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_NotifyName_2;                   // 0x009C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_6;            // 0x00A4(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_NotifyName_1;                   // 0x00B4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_7;            // 0x00BC(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_NotifyName;                     // 0x00CC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_8;            // 0x00D4(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_1;                              // 0x00E4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4867[0x4];                                     // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameMode_C*                          K2Node_DynamicCast_AsB_Game_Mode;                  // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4868[0x7];                                     // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0108(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ClassClass_ReturnValue;        // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ClassClass_ReturnValue_1;      // 0x0111(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0112(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0113(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_NotifyName_9;                   // 0x0114(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_1;               // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4869[0x3];                                     // 0x011D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0120(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0128(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0130(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x013C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_486A[0x3];                                     // 0x013D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0140(0x00E8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AActor*                                 K2Node_CustomEvent_Actor;                          // 0x0228(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_CustomEvent_Component;                      // 0x0230(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_HitByPotato;                    // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_486B[0x7];                                     // 0x0239(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_SleepingComponent;      // 0x0240(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_ComponentBoundEvent_BoneName_1;             // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_WakingComponent;        // 0x0250(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_ComponentBoundEvent_BoneName;               // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_9;            // 0x0260(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_486C[0x7];                                     // 0x0271(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayMontageCallbackProxy*              CallFunc_CreateProxyObjectForPlayMontage_ReturnValue; // 0x0278(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPlayMontageCallbackProxy*              CallFunc_CreateProxyObjectForPlayMontage_ReturnValue_1; // 0x0280(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0288(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0289(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad) == 0x000008, "Wrong alignment on B_SpringPad_C_ExecuteUbergraph_B_SpringPad");
static_assert(sizeof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad) == 0x000290, "Wrong size on B_SpringPad_C_ExecuteUbergraph_B_SpringPad");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, EntryPoint) == 0x000000, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::EntryPoint' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, K2Node_CustomEvent_NotifyName_8) == 0x000004, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::K2Node_CustomEvent_NotifyName_8' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, K2Node_CreateDelegate_OutputDelegate) == 0x00000C, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, K2Node_CustomEvent_NotifyName_7) == 0x00001C, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::K2Node_CustomEvent_NotifyName_7' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, K2Node_CreateDelegate_OutputDelegate_1) == 0x000024, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, K2Node_CustomEvent_NotifyName_6) == 0x000034, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::K2Node_CustomEvent_NotifyName_6' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, K2Node_CreateDelegate_OutputDelegate_2) == 0x00003C, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, K2Node_CustomEvent_NotifyName_5) == 0x00004C, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::K2Node_CustomEvent_NotifyName_5' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, K2Node_CreateDelegate_OutputDelegate_3) == 0x000054, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, Temp_name_Variable) == 0x000064, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, K2Node_CreateDelegate_OutputDelegate_4) == 0x00006C, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, K2Node_CustomEvent_NotifyName_4) == 0x00007C, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::K2Node_CustomEvent_NotifyName_4' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, K2Node_CustomEvent_NotifyName_3) == 0x000084, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::K2Node_CustomEvent_NotifyName_3' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, K2Node_CreateDelegate_OutputDelegate_5) == 0x00008C, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, K2Node_CustomEvent_NotifyName_2) == 0x00009C, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::K2Node_CustomEvent_NotifyName_2' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, K2Node_CreateDelegate_OutputDelegate_6) == 0x0000A4, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::K2Node_CreateDelegate_OutputDelegate_6' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, K2Node_CustomEvent_NotifyName_1) == 0x0000B4, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::K2Node_CustomEvent_NotifyName_1' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, K2Node_CreateDelegate_OutputDelegate_7) == 0x0000BC, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::K2Node_CreateDelegate_OutputDelegate_7' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, K2Node_CustomEvent_NotifyName) == 0x0000CC, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::K2Node_CustomEvent_NotifyName' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, K2Node_CreateDelegate_OutputDelegate_8) == 0x0000D4, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::K2Node_CreateDelegate_OutputDelegate_8' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, Temp_name_Variable_1) == 0x0000E4, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::Temp_name_Variable_1' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, CallFunc_GetGameMode_ReturnValue) == 0x0000F0, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, K2Node_DynamicCast_AsB_Game_Mode) == 0x0000F8, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::K2Node_DynamicCast_AsB_Game_Mode' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, K2Node_DynamicCast_bSuccess) == 0x000100, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, CallFunc_GetObjectClass_ReturnValue) == 0x000108, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, CallFunc_EqualEqual_ClassClass_ReturnValue) == 0x000110, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::CallFunc_EqualEqual_ClassClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, CallFunc_EqualEqual_ClassClass_ReturnValue_1) == 0x000111, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::CallFunc_EqualEqual_ClassClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, CallFunc_BooleanOR_ReturnValue) == 0x000112, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, CallFunc_HasAuthority_ReturnValue) == 0x000113, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, K2Node_CustomEvent_NotifyName_9) == 0x000114, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::K2Node_CustomEvent_NotifyName_9' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, CallFunc_HasAuthority_ReturnValue_1) == 0x00011C, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::CallFunc_HasAuthority_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000120, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, K2Node_ComponentBoundEvent_OtherActor) == 0x000128, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, K2Node_ComponentBoundEvent_OtherComp) == 0x000130, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000138, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, K2Node_ComponentBoundEvent_bFromSweep) == 0x00013C, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, K2Node_ComponentBoundEvent_SweepResult) == 0x000140, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, K2Node_CustomEvent_Actor) == 0x000228, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::K2Node_CustomEvent_Actor' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, K2Node_CustomEvent_Component) == 0x000230, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::K2Node_CustomEvent_Component' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, K2Node_CustomEvent_HitByPotato) == 0x000238, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::K2Node_CustomEvent_HitByPotato' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, K2Node_ComponentBoundEvent_SleepingComponent) == 0x000240, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::K2Node_ComponentBoundEvent_SleepingComponent' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, K2Node_ComponentBoundEvent_BoneName_1) == 0x000248, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::K2Node_ComponentBoundEvent_BoneName_1' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, K2Node_ComponentBoundEvent_WakingComponent) == 0x000250, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::K2Node_ComponentBoundEvent_WakingComponent' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, K2Node_ComponentBoundEvent_BoneName) == 0x000258, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::K2Node_ComponentBoundEvent_BoneName' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, K2Node_CreateDelegate_OutputDelegate_9) == 0x000260, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::K2Node_CreateDelegate_OutputDelegate_9' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, CallFunc_IsDedicatedServer_ReturnValue) == 0x000270, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, CallFunc_CreateProxyObjectForPlayMontage_ReturnValue) == 0x000278, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::CallFunc_CreateProxyObjectForPlayMontage_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, CallFunc_CreateProxyObjectForPlayMontage_ReturnValue_1) == 0x000280, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::CallFunc_CreateProxyObjectForPlayMontage_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, CallFunc_IsValid_ReturnValue) == 0x000288, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_ExecuteUbergraph_B_SpringPad, CallFunc_IsValid_ReturnValue_1) == 0x000289, "Member 'B_SpringPad_C_ExecuteUbergraph_B_SpringPad::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function B_SpringPad.B_SpringPad_C.FireMulticast
// 0x0018 (0x0018 - 0x0000)
struct B_SpringPad_C_FireMulticast final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Component;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Param_HitByPotato;                                 // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_SpringPad_C_FireMulticast) == 0x000008, "Wrong alignment on B_SpringPad_C_FireMulticast");
static_assert(sizeof(B_SpringPad_C_FireMulticast) == 0x000018, "Wrong size on B_SpringPad_C_FireMulticast");
static_assert(offsetof(B_SpringPad_C_FireMulticast, Actor) == 0x000000, "Member 'B_SpringPad_C_FireMulticast::Actor' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_FireMulticast, Component) == 0x000008, "Member 'B_SpringPad_C_FireMulticast::Component' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_FireMulticast, Param_HitByPotato) == 0x000010, "Member 'B_SpringPad_C_FireMulticast::Param_HitByPotato' has a wrong offset!");

// Function B_SpringPad.B_SpringPad_C.HandleSpringPadTriggered
// 0x0030 (0x0030 - 0x0000)
struct B_SpringPad_C_HandleSpringPadTriggered final
{
public:
	class AActor*                                 TriggerActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    TriggerComponent;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue;               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_486D[0x5];                                     // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue_1;             // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue_1;             // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_SpringPad_C_HandleSpringPadTriggered) == 0x000008, "Wrong alignment on B_SpringPad_C_HandleSpringPadTriggered");
static_assert(sizeof(B_SpringPad_C_HandleSpringPadTriggered) == 0x000030, "Wrong size on B_SpringPad_C_HandleSpringPadTriggered");
static_assert(offsetof(B_SpringPad_C_HandleSpringPadTriggered, TriggerActor) == 0x000000, "Member 'B_SpringPad_C_HandleSpringPadTriggered::TriggerActor' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_HandleSpringPadTriggered, TriggerComponent) == 0x000008, "Member 'B_SpringPad_C_HandleSpringPadTriggered::TriggerComponent' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_HandleSpringPadTriggered, CallFunc_GetObjectClass_ReturnValue) == 0x000010, "Member 'B_SpringPad_C_HandleSpringPadTriggered::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_HandleSpringPadTriggered, CallFunc_ClassIsChildOf_ReturnValue) == 0x000018, "Member 'B_SpringPad_C_HandleSpringPadTriggered::CallFunc_ClassIsChildOf_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_HandleSpringPadTriggered, CallFunc_Not_PreBool_ReturnValue) == 0x000019, "Member 'B_SpringPad_C_HandleSpringPadTriggered::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_HandleSpringPadTriggered, CallFunc_IsValid_ReturnValue) == 0x00001A, "Member 'B_SpringPad_C_HandleSpringPadTriggered::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_HandleSpringPadTriggered, CallFunc_GetObjectClass_ReturnValue_1) == 0x000020, "Member 'B_SpringPad_C_HandleSpringPadTriggered::CallFunc_GetObjectClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_HandleSpringPadTriggered, CallFunc_ClassIsChildOf_ReturnValue_1) == 0x000028, "Member 'B_SpringPad_C_HandleSpringPadTriggered::CallFunc_ClassIsChildOf_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_HandleSpringPadTriggered, CallFunc_Not_PreBool_ReturnValue_1) == 0x000029, "Member 'B_SpringPad_C_HandleSpringPadTriggered::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_HandleSpringPadTriggered, CallFunc_BooleanAND_ReturnValue) == 0x00002A, "Member 'B_SpringPad_C_HandleSpringPadTriggered::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function B_SpringPad.B_SpringPad_C.MoveTriggerActorAndPlaySound
// 0x0130 (0x0130 - 0x0000)
struct B_SpringPad_C_MoveTriggerActorAndPlaySound final
{
public:
	const class AActor*                           TriggerActor;                                      // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    TriggerComponent;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Param_HitByPotato;                                 // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_486E[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetComponentVelocity_ReturnValue;         // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSimulatingPhysics_ReturnValue;          // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_486F[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4870[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             K2Node_DynamicCast_AsCharacter;                    // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4871[0x7];                                     // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue;               // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4872[0x7];                                     // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_1;      // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4873[0x6];                                     // 0x00AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable;                                // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default;                             // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default_1;                           // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetUpVector_ReturnValue;                  // 0x00C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetUpVector_ReturnValue_1;                // 0x00F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0110(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_PlaySoundAtLocation_VolumeMultiplier_ImplicitCast; // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_PlaySoundAtLocation_PitchMultiplier_ImplicitCast; // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_SpringPad_C_MoveTriggerActorAndPlaySound) == 0x000008, "Wrong alignment on B_SpringPad_C_MoveTriggerActorAndPlaySound");
static_assert(sizeof(B_SpringPad_C_MoveTriggerActorAndPlaySound) == 0x000130, "Wrong size on B_SpringPad_C_MoveTriggerActorAndPlaySound");
static_assert(offsetof(B_SpringPad_C_MoveTriggerActorAndPlaySound, TriggerActor) == 0x000000, "Member 'B_SpringPad_C_MoveTriggerActorAndPlaySound::TriggerActor' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_MoveTriggerActorAndPlaySound, TriggerComponent) == 0x000008, "Member 'B_SpringPad_C_MoveTriggerActorAndPlaySound::TriggerComponent' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_MoveTriggerActorAndPlaySound, Param_HitByPotato) == 0x000010, "Member 'B_SpringPad_C_MoveTriggerActorAndPlaySound::Param_HitByPotato' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_MoveTriggerActorAndPlaySound, CallFunc_IsDedicatedServer_ReturnValue) == 0x000011, "Member 'B_SpringPad_C_MoveTriggerActorAndPlaySound::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_MoveTriggerActorAndPlaySound, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'B_SpringPad_C_MoveTriggerActorAndPlaySound::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_MoveTriggerActorAndPlaySound, CallFunc_GetComponentVelocity_ReturnValue) == 0x000030, "Member 'B_SpringPad_C_MoveTriggerActorAndPlaySound::CallFunc_GetComponentVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_MoveTriggerActorAndPlaySound, CallFunc_IsSimulatingPhysics_ReturnValue) == 0x000048, "Member 'B_SpringPad_C_MoveTriggerActorAndPlaySound::CallFunc_IsSimulatingPhysics_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_MoveTriggerActorAndPlaySound, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000050, "Member 'B_SpringPad_C_MoveTriggerActorAndPlaySound::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_MoveTriggerActorAndPlaySound, CallFunc_IsValid_ReturnValue) == 0x000068, "Member 'B_SpringPad_C_MoveTriggerActorAndPlaySound::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_MoveTriggerActorAndPlaySound, K2Node_DynamicCast_AsCharacter) == 0x000070, "Member 'B_SpringPad_C_MoveTriggerActorAndPlaySound::K2Node_DynamicCast_AsCharacter' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_MoveTriggerActorAndPlaySound, K2Node_DynamicCast_bSuccess) == 0x000078, "Member 'B_SpringPad_C_MoveTriggerActorAndPlaySound::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_MoveTriggerActorAndPlaySound, CallFunc_GetObjectClass_ReturnValue) == 0x000080, "Member 'B_SpringPad_C_MoveTriggerActorAndPlaySound::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_MoveTriggerActorAndPlaySound, CallFunc_ClassIsChildOf_ReturnValue) == 0x000088, "Member 'B_SpringPad_C_MoveTriggerActorAndPlaySound::CallFunc_ClassIsChildOf_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_MoveTriggerActorAndPlaySound, CallFunc_Multiply_VectorVector_ReturnValue_1) == 0x000090, "Member 'B_SpringPad_C_MoveTriggerActorAndPlaySound::CallFunc_Multiply_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_MoveTriggerActorAndPlaySound, Temp_bool_Variable) == 0x0000A8, "Member 'B_SpringPad_C_MoveTriggerActorAndPlaySound::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_MoveTriggerActorAndPlaySound, Temp_bool_Variable_1) == 0x0000A9, "Member 'B_SpringPad_C_MoveTriggerActorAndPlaySound::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_MoveTriggerActorAndPlaySound, Temp_real_Variable) == 0x0000B0, "Member 'B_SpringPad_C_MoveTriggerActorAndPlaySound::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_MoveTriggerActorAndPlaySound, K2Node_Select_Default) == 0x0000B8, "Member 'B_SpringPad_C_MoveTriggerActorAndPlaySound::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_MoveTriggerActorAndPlaySound, K2Node_Select_Default_1) == 0x0000C0, "Member 'B_SpringPad_C_MoveTriggerActorAndPlaySound::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_MoveTriggerActorAndPlaySound, CallFunc_GetUpVector_ReturnValue) == 0x0000C8, "Member 'B_SpringPad_C_MoveTriggerActorAndPlaySound::CallFunc_GetUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_MoveTriggerActorAndPlaySound, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000E0, "Member 'B_SpringPad_C_MoveTriggerActorAndPlaySound::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_MoveTriggerActorAndPlaySound, CallFunc_GetUpVector_ReturnValue_1) == 0x0000F8, "Member 'B_SpringPad_C_MoveTriggerActorAndPlaySound::CallFunc_GetUpVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_MoveTriggerActorAndPlaySound, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000110, "Member 'B_SpringPad_C_MoveTriggerActorAndPlaySound::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_MoveTriggerActorAndPlaySound, CallFunc_PlaySoundAtLocation_VolumeMultiplier_ImplicitCast) == 0x000128, "Member 'B_SpringPad_C_MoveTriggerActorAndPlaySound::CallFunc_PlaySoundAtLocation_VolumeMultiplier_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_SpringPad_C_MoveTriggerActorAndPlaySound, CallFunc_PlaySoundAtLocation_PitchMultiplier_ImplicitCast) == 0x00012C, "Member 'B_SpringPad_C_MoveTriggerActorAndPlaySound::CallFunc_PlaySoundAtLocation_PitchMultiplier_ImplicitCast' has a wrong offset!");

// Function B_SpringPad.B_SpringPad_C.OnBlendOut_716B379C4EDA7279FD1A55B5BEB22BED
// 0x0008 (0x0008 - 0x0000)
struct B_SpringPad_C_OnBlendOut_716B379C4EDA7279FD1A55B5BEB22BED final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_SpringPad_C_OnBlendOut_716B379C4EDA7279FD1A55B5BEB22BED) == 0x000004, "Wrong alignment on B_SpringPad_C_OnBlendOut_716B379C4EDA7279FD1A55B5BEB22BED");
static_assert(sizeof(B_SpringPad_C_OnBlendOut_716B379C4EDA7279FD1A55B5BEB22BED) == 0x000008, "Wrong size on B_SpringPad_C_OnBlendOut_716B379C4EDA7279FD1A55B5BEB22BED");
static_assert(offsetof(B_SpringPad_C_OnBlendOut_716B379C4EDA7279FD1A55B5BEB22BED, NotifyName) == 0x000000, "Member 'B_SpringPad_C_OnBlendOut_716B379C4EDA7279FD1A55B5BEB22BED::NotifyName' has a wrong offset!");

// Function B_SpringPad.B_SpringPad_C.OnBlendOut_D927F1014627CF8392DB37AFF3C1C437
// 0x0008 (0x0008 - 0x0000)
struct B_SpringPad_C_OnBlendOut_D927F1014627CF8392DB37AFF3C1C437 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_SpringPad_C_OnBlendOut_D927F1014627CF8392DB37AFF3C1C437) == 0x000004, "Wrong alignment on B_SpringPad_C_OnBlendOut_D927F1014627CF8392DB37AFF3C1C437");
static_assert(sizeof(B_SpringPad_C_OnBlendOut_D927F1014627CF8392DB37AFF3C1C437) == 0x000008, "Wrong size on B_SpringPad_C_OnBlendOut_D927F1014627CF8392DB37AFF3C1C437");
static_assert(offsetof(B_SpringPad_C_OnBlendOut_D927F1014627CF8392DB37AFF3C1C437, NotifyName) == 0x000000, "Member 'B_SpringPad_C_OnBlendOut_D927F1014627CF8392DB37AFF3C1C437::NotifyName' has a wrong offset!");

// Function B_SpringPad.B_SpringPad_C.OnCompleted_716B379C4EDA7279FD1A55B5BEB22BED
// 0x0008 (0x0008 - 0x0000)
struct B_SpringPad_C_OnCompleted_716B379C4EDA7279FD1A55B5BEB22BED final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_SpringPad_C_OnCompleted_716B379C4EDA7279FD1A55B5BEB22BED) == 0x000004, "Wrong alignment on B_SpringPad_C_OnCompleted_716B379C4EDA7279FD1A55B5BEB22BED");
static_assert(sizeof(B_SpringPad_C_OnCompleted_716B379C4EDA7279FD1A55B5BEB22BED) == 0x000008, "Wrong size on B_SpringPad_C_OnCompleted_716B379C4EDA7279FD1A55B5BEB22BED");
static_assert(offsetof(B_SpringPad_C_OnCompleted_716B379C4EDA7279FD1A55B5BEB22BED, NotifyName) == 0x000000, "Member 'B_SpringPad_C_OnCompleted_716B379C4EDA7279FD1A55B5BEB22BED::NotifyName' has a wrong offset!");

// Function B_SpringPad.B_SpringPad_C.OnCompleted_D927F1014627CF8392DB37AFF3C1C437
// 0x0008 (0x0008 - 0x0000)
struct B_SpringPad_C_OnCompleted_D927F1014627CF8392DB37AFF3C1C437 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_SpringPad_C_OnCompleted_D927F1014627CF8392DB37AFF3C1C437) == 0x000004, "Wrong alignment on B_SpringPad_C_OnCompleted_D927F1014627CF8392DB37AFF3C1C437");
static_assert(sizeof(B_SpringPad_C_OnCompleted_D927F1014627CF8392DB37AFF3C1C437) == 0x000008, "Wrong size on B_SpringPad_C_OnCompleted_D927F1014627CF8392DB37AFF3C1C437");
static_assert(offsetof(B_SpringPad_C_OnCompleted_D927F1014627CF8392DB37AFF3C1C437, NotifyName) == 0x000000, "Member 'B_SpringPad_C_OnCompleted_D927F1014627CF8392DB37AFF3C1C437::NotifyName' has a wrong offset!");

// Function B_SpringPad.B_SpringPad_C.OnInterrupted_716B379C4EDA7279FD1A55B5BEB22BED
// 0x0008 (0x0008 - 0x0000)
struct B_SpringPad_C_OnInterrupted_716B379C4EDA7279FD1A55B5BEB22BED final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_SpringPad_C_OnInterrupted_716B379C4EDA7279FD1A55B5BEB22BED) == 0x000004, "Wrong alignment on B_SpringPad_C_OnInterrupted_716B379C4EDA7279FD1A55B5BEB22BED");
static_assert(sizeof(B_SpringPad_C_OnInterrupted_716B379C4EDA7279FD1A55B5BEB22BED) == 0x000008, "Wrong size on B_SpringPad_C_OnInterrupted_716B379C4EDA7279FD1A55B5BEB22BED");
static_assert(offsetof(B_SpringPad_C_OnInterrupted_716B379C4EDA7279FD1A55B5BEB22BED, NotifyName) == 0x000000, "Member 'B_SpringPad_C_OnInterrupted_716B379C4EDA7279FD1A55B5BEB22BED::NotifyName' has a wrong offset!");

// Function B_SpringPad.B_SpringPad_C.OnInterrupted_D927F1014627CF8392DB37AFF3C1C437
// 0x0008 (0x0008 - 0x0000)
struct B_SpringPad_C_OnInterrupted_D927F1014627CF8392DB37AFF3C1C437 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_SpringPad_C_OnInterrupted_D927F1014627CF8392DB37AFF3C1C437) == 0x000004, "Wrong alignment on B_SpringPad_C_OnInterrupted_D927F1014627CF8392DB37AFF3C1C437");
static_assert(sizeof(B_SpringPad_C_OnInterrupted_D927F1014627CF8392DB37AFF3C1C437) == 0x000008, "Wrong size on B_SpringPad_C_OnInterrupted_D927F1014627CF8392DB37AFF3C1C437");
static_assert(offsetof(B_SpringPad_C_OnInterrupted_D927F1014627CF8392DB37AFF3C1C437, NotifyName) == 0x000000, "Member 'B_SpringPad_C_OnInterrupted_D927F1014627CF8392DB37AFF3C1C437::NotifyName' has a wrong offset!");

// Function B_SpringPad.B_SpringPad_C.OnNotifyBegin_716B379C4EDA7279FD1A55B5BEB22BED
// 0x0008 (0x0008 - 0x0000)
struct B_SpringPad_C_OnNotifyBegin_716B379C4EDA7279FD1A55B5BEB22BED final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_SpringPad_C_OnNotifyBegin_716B379C4EDA7279FD1A55B5BEB22BED) == 0x000004, "Wrong alignment on B_SpringPad_C_OnNotifyBegin_716B379C4EDA7279FD1A55B5BEB22BED");
static_assert(sizeof(B_SpringPad_C_OnNotifyBegin_716B379C4EDA7279FD1A55B5BEB22BED) == 0x000008, "Wrong size on B_SpringPad_C_OnNotifyBegin_716B379C4EDA7279FD1A55B5BEB22BED");
static_assert(offsetof(B_SpringPad_C_OnNotifyBegin_716B379C4EDA7279FD1A55B5BEB22BED, NotifyName) == 0x000000, "Member 'B_SpringPad_C_OnNotifyBegin_716B379C4EDA7279FD1A55B5BEB22BED::NotifyName' has a wrong offset!");

// Function B_SpringPad.B_SpringPad_C.OnNotifyBegin_D927F1014627CF8392DB37AFF3C1C437
// 0x0008 (0x0008 - 0x0000)
struct B_SpringPad_C_OnNotifyBegin_D927F1014627CF8392DB37AFF3C1C437 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_SpringPad_C_OnNotifyBegin_D927F1014627CF8392DB37AFF3C1C437) == 0x000004, "Wrong alignment on B_SpringPad_C_OnNotifyBegin_D927F1014627CF8392DB37AFF3C1C437");
static_assert(sizeof(B_SpringPad_C_OnNotifyBegin_D927F1014627CF8392DB37AFF3C1C437) == 0x000008, "Wrong size on B_SpringPad_C_OnNotifyBegin_D927F1014627CF8392DB37AFF3C1C437");
static_assert(offsetof(B_SpringPad_C_OnNotifyBegin_D927F1014627CF8392DB37AFF3C1C437, NotifyName) == 0x000000, "Member 'B_SpringPad_C_OnNotifyBegin_D927F1014627CF8392DB37AFF3C1C437::NotifyName' has a wrong offset!");

// Function B_SpringPad.B_SpringPad_C.OnNotifyEnd_716B379C4EDA7279FD1A55B5BEB22BED
// 0x0008 (0x0008 - 0x0000)
struct B_SpringPad_C_OnNotifyEnd_716B379C4EDA7279FD1A55B5BEB22BED final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_SpringPad_C_OnNotifyEnd_716B379C4EDA7279FD1A55B5BEB22BED) == 0x000004, "Wrong alignment on B_SpringPad_C_OnNotifyEnd_716B379C4EDA7279FD1A55B5BEB22BED");
static_assert(sizeof(B_SpringPad_C_OnNotifyEnd_716B379C4EDA7279FD1A55B5BEB22BED) == 0x000008, "Wrong size on B_SpringPad_C_OnNotifyEnd_716B379C4EDA7279FD1A55B5BEB22BED");
static_assert(offsetof(B_SpringPad_C_OnNotifyEnd_716B379C4EDA7279FD1A55B5BEB22BED, NotifyName) == 0x000000, "Member 'B_SpringPad_C_OnNotifyEnd_716B379C4EDA7279FD1A55B5BEB22BED::NotifyName' has a wrong offset!");

// Function B_SpringPad.B_SpringPad_C.OnNotifyEnd_D927F1014627CF8392DB37AFF3C1C437
// 0x0008 (0x0008 - 0x0000)
struct B_SpringPad_C_OnNotifyEnd_D927F1014627CF8392DB37AFF3C1C437 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_SpringPad_C_OnNotifyEnd_D927F1014627CF8392DB37AFF3C1C437) == 0x000004, "Wrong alignment on B_SpringPad_C_OnNotifyEnd_D927F1014627CF8392DB37AFF3C1C437");
static_assert(sizeof(B_SpringPad_C_OnNotifyEnd_D927F1014627CF8392DB37AFF3C1C437) == 0x000008, "Wrong size on B_SpringPad_C_OnNotifyEnd_D927F1014627CF8392DB37AFF3C1C437");
static_assert(offsetof(B_SpringPad_C_OnNotifyEnd_D927F1014627CF8392DB37AFF3C1C437, NotifyName) == 0x000000, "Member 'B_SpringPad_C_OnNotifyEnd_D927F1014627CF8392DB37AFF3C1C437::NotifyName' has a wrong offset!");

}

