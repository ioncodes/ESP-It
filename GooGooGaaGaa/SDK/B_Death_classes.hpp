#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_Death

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_Death.B_Death_C
// 0x00A0 (0x0338 - 0x0298)
class AB_Death_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       Sphere;                                            // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              WitchDieSound;                                     // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ExplosionScale;                                    // 0x02B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsActive;                                          // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5139[0x7];                                     // 0x02D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPrimitiveComponent*>            ForcedComps;                                       // 0x02D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class AActor*>                         SkinMeshes;                                        // 0x02E8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	double                                        Lifetime;                                          // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DissolveTime;                                      // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AliveTime;                                         // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       PlayerState;                                       // 0x0310(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, RepNotify, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          IsHunter;                                          // 0x0318(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_513A[0x7];                                     // 0x0319(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundCue*                              HunterDieSound;                                    // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         HunterDeathSystem;                                 // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         WitchDeathSystem;                                  // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ExecuteUbergraph_B_Death(int32 EntryPoint);
	void LoadHunterRagdoll();
	void OnRep_PlayerState();
	void ReceiveBeginPlay();
	void ReceiveDestroyed();
	void ReceiveTick(float DeltaSeconds);
	void SpawnMulticast();
	void SpawnServer();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_Death_C">();
	}
	static class AB_Death_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_Death_C>();
	}
};
static_assert(alignof(AB_Death_C) == 0x000008, "Wrong alignment on AB_Death_C");
static_assert(sizeof(AB_Death_C) == 0x000338, "Wrong size on AB_Death_C");
static_assert(offsetof(AB_Death_C, UberGraphFrame) == 0x000298, "Member 'AB_Death_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AB_Death_C, Sphere) == 0x0002A0, "Member 'AB_Death_C::Sphere' has a wrong offset!");
static_assert(offsetof(AB_Death_C, SkeletalMesh) == 0x0002A8, "Member 'AB_Death_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(AB_Death_C, WitchDieSound) == 0x0002B0, "Member 'AB_Death_C::WitchDieSound' has a wrong offset!");
static_assert(offsetof(AB_Death_C, ExplosionScale) == 0x0002B8, "Member 'AB_Death_C::ExplosionScale' has a wrong offset!");
static_assert(offsetof(AB_Death_C, IsActive) == 0x0002D0, "Member 'AB_Death_C::IsActive' has a wrong offset!");
static_assert(offsetof(AB_Death_C, ForcedComps) == 0x0002D8, "Member 'AB_Death_C::ForcedComps' has a wrong offset!");
static_assert(offsetof(AB_Death_C, SkinMeshes) == 0x0002E8, "Member 'AB_Death_C::SkinMeshes' has a wrong offset!");
static_assert(offsetof(AB_Death_C, Lifetime) == 0x0002F8, "Member 'AB_Death_C::Lifetime' has a wrong offset!");
static_assert(offsetof(AB_Death_C, DissolveTime) == 0x000300, "Member 'AB_Death_C::DissolveTime' has a wrong offset!");
static_assert(offsetof(AB_Death_C, AliveTime) == 0x000308, "Member 'AB_Death_C::AliveTime' has a wrong offset!");
static_assert(offsetof(AB_Death_C, PlayerState) == 0x000310, "Member 'AB_Death_C::PlayerState' has a wrong offset!");
static_assert(offsetof(AB_Death_C, IsHunter) == 0x000318, "Member 'AB_Death_C::IsHunter' has a wrong offset!");
static_assert(offsetof(AB_Death_C, HunterDieSound) == 0x000320, "Member 'AB_Death_C::HunterDieSound' has a wrong offset!");
static_assert(offsetof(AB_Death_C, HunterDeathSystem) == 0x000328, "Member 'AB_Death_C::HunterDeathSystem' has a wrong offset!");
static_assert(offsetof(AB_Death_C, WitchDeathSystem) == 0x000330, "Member 'AB_Death_C::WitchDeathSystem' has a wrong offset!");

}

