#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GeometryScriptingCore

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum GeometryScriptingCore.EGeometryScriptOutcomePins
// NumValues: 0x0003
enum class EGeometryScriptOutcomePins : uint8
{
	Failure                                  = 0,
	Success                                  = 1,
	EGeometryScriptOutcomePins_MAX           = 2,
};

// Enum GeometryScriptingCore.EGeometryScriptSearchOutcomePins
// NumValues: 0x0003
enum class EGeometryScriptSearchOutcomePins : uint8
{
	Found                                    = 0,
	NotFound                                 = 1,
	EGeometryScriptSearchOutcomePins_MAX     = 2,
};

// Enum GeometryScriptingCore.EGeometryScriptContainmentOutcomePins
// NumValues: 0x0003
enum class EGeometryScriptContainmentOutcomePins : uint8
{
	Inside                                   = 0,
	Outside                                  = 1,
	EGeometryScriptContainmentOutcomePins_MAX = 2,
};

// Enum GeometryScriptingCore.EGeometryScriptLODType
// NumValues: 0x0005
enum class EGeometryScriptLODType : uint8
{
	MaxAvailable                             = 0,
	HiResSourceModel                         = 1,
	SourceModel                              = 2,
	RenderData                               = 3,
	EGeometryScriptLODType_MAX               = 4,
};

// Enum GeometryScriptingCore.EGeometryScriptAxis
// NumValues: 0x0004
enum class EGeometryScriptAxis : uint8
{
	X                                        = 0,
	Y                                        = 1,
	Z                                        = 2,
	EGeometryScriptAxis_MAX                  = 3,
};

// Enum GeometryScriptingCore.EGeometryScriptIndexType
// NumValues: 0x0006
enum class EGeometryScriptIndexType : uint8
{
	Any                                      = 0,
	Triangle                                 = 1,
	Vertex                                   = 2,
	MaterialID                               = 3,
	PolygroupID                              = 4,
	EGeometryScriptIndexType_MAX             = 5,
};

// Enum GeometryScriptingCore.EGeometryScriptDebugMessageType
// NumValues: 0x0003
enum class EGeometryScriptDebugMessageType : uint8
{
	ErrorMessage                             = 0,
	WarningMessage                           = 1,
	EGeometryScriptDebugMessageType_MAX      = 2,
};

// Enum GeometryScriptingCore.EGeometryScriptErrorType
// NumValues: 0x0005
enum class EGeometryScriptErrorType : uint8
{
	NoError                                  = 0,
	UnknownError                             = 1,
	InvalidInputs                            = 2,
	OperationFailed                          = 3,
	EGeometryScriptErrorType_MAX             = 4,
};

// Enum GeometryScriptingCore.EGeometryScriptCollisionGenerationMethod
// NumValues: 0x0008
enum class EGeometryScriptCollisionGenerationMethod : uint8
{
	AlignedBoxes                             = 0,
	OrientedBoxes                            = 1,
	MinimalSpheres                           = 2,
	Capsules                                 = 3,
	ConvexHulls                              = 4,
	SweptHulls                               = 5,
	MinVolumeShapes                          = 6,
	EGeometryScriptCollisionGenerationMethod_MAX = 7,
};

// Enum GeometryScriptingCore.EGeometryScriptSweptHullAxis
// NumValues: 0x0006
enum class EGeometryScriptSweptHullAxis : uint8
{
	X                                        = 0,
	Y                                        = 1,
	Z                                        = 2,
	SmallestBoxDimension                     = 3,
	SmallestVolume                           = 4,
	EGeometryScriptSweptHullAxis_MAX         = 5,
};

// Enum GeometryScriptingCore.EGeometryScriptMeshSelectionType
// NumValues: 0x0004
enum class EGeometryScriptMeshSelectionType : uint8
{
	Vertices                                 = 0,
	Triangles                                = 1,
	Polygroups                               = 2,
	EGeometryScriptMeshSelectionType_MAX     = 3,
};

// Enum GeometryScriptingCore.EGeometryScriptMeshSelectionConversionType
// NumValues: 0x0005
enum class EGeometryScriptMeshSelectionConversionType : uint8
{
	NoConversion                             = 0,
	ToVertices                               = 1,
	ToTriangles                              = 2,
	ToPolygroups                             = 3,
	EGeometryScriptMeshSelectionConversionType_MAX = 4,
};

// Enum GeometryScriptingCore.EGeometryScriptCombineSelectionMode
// NumValues: 0x0004
enum class EGeometryScriptCombineSelectionMode : uint8
{
	Add                                      = 0,
	Subtract                                 = 1,
	Intersection                             = 2,
	EGeometryScriptCombineSelectionMode_MAX  = 3,
};

// Enum GeometryScriptingCore.EGeometryScriptEmptySelectionBehavior
// NumValues: 0x0003
enum class EGeometryScriptEmptySelectionBehavior : uint8
{
	FullMeshSelection                        = 0,
	EmptySelection                           = 1,
	EGeometryScriptEmptySelectionBehavior_MAX = 2,
};

// Enum GeometryScriptingCore.EGeometryScriptBakeResolution
// NumValues: 0x000B
enum class EGeometryScriptBakeResolution : uint8
{
	Resolution16                             = 0,
	Resolution32                             = 1,
	Resolution64                             = 2,
	Resolution128                            = 3,
	Resolution256                            = 4,
	Resolution512                            = 5,
	Resolution1024                           = 6,
	Resolution2048                           = 7,
	Resolution4096                           = 8,
	Resolution8192                           = 9,
	EGeometryScriptBakeResolution_MAX        = 10,
};

// Enum GeometryScriptingCore.EGeometryScriptBakeBitDepth
// NumValues: 0x0003
enum class EGeometryScriptBakeBitDepth : uint8
{
	ChannelBits8                             = 0,
	ChannelBits16                            = 1,
	EGeometryScriptBakeBitDepth_MAX          = 2,
};

// Enum GeometryScriptingCore.EGeometryScriptBakeSamplesPerPixel
// NumValues: 0x0006
enum class EGeometryScriptBakeSamplesPerPixel : uint8
{
	Sample1                                  = 0,
	Sample4                                  = 1,
	Sample16                                 = 2,
	Sample64                                 = 3,
	Samples256                               = 4,
	EGeometryScriptBakeSamplesPerPixel_MAX   = 5,
};

// Enum GeometryScriptingCore.EGeometryScriptBakeFilteringType
// NumValues: 0x0003
enum class EGeometryScriptBakeFilteringType : uint8
{
	BSpline                                  = 0,
	Box                                      = 1,
	EGeometryScriptBakeFilteringType_MAX     = 2,
};

// Enum GeometryScriptingCore.EGeometryScriptBakeTypes
// NumValues: 0x000C
enum class EGeometryScriptBakeTypes : uint8
{
	TangentSpaceNormal                       = 0,
	ObjectSpaceNormal                        = 1,
	FaceNormal                               = 2,
	BentNormal                               = 3,
	Position                                 = 4,
	Curvature                                = 5,
	AmbientOcclusion                         = 6,
	Texture                                  = 7,
	MultiTexture                             = 8,
	VertexColor                              = 9,
	MaterialID                               = 10,
	EGeometryScriptBakeTypes_MAX             = 11,
};

// Enum GeometryScriptingCore.EGeometryScriptBakeOutputMode
// NumValues: 0x0003
enum class EGeometryScriptBakeOutputMode : uint8
{
	RGBA                                     = 0,
	PerChannel                               = 1,
	EGeometryScriptBakeOutputMode_MAX        = 2,
};

// Enum GeometryScriptingCore.EGeometryScriptBakeNormalSpace
// NumValues: 0x0003
enum class EGeometryScriptBakeNormalSpace : uint8
{
	Tangent                                  = 0,
	Object                                   = 1,
	EGeometryScriptBakeNormalSpace_MAX       = 2,
};

// Enum GeometryScriptingCore.EGeometryScriptBakeCurvatureTypeMode
// NumValues: 0x0004
enum class EGeometryScriptBakeCurvatureTypeMode : uint8
{
	Mean                                     = 0,
	Max                                      = 1,
	Min                                      = 2,
	Gaussian                                 = 3,
};

// Enum GeometryScriptingCore.EGeometryScriptBakeCurvatureColorMode
// NumValues: 0x0004
enum class EGeometryScriptBakeCurvatureColorMode : uint8
{
	Grayscale                                = 0,
	RedBlue                                  = 1,
	RedGreenBlue                             = 2,
	EGeometryScriptBakeCurvatureColorMode_MAX = 3,
};

// Enum GeometryScriptingCore.EGeometryScriptBakeCurvatureClampMode
// NumValues: 0x0004
enum class EGeometryScriptBakeCurvatureClampMode : uint8
{
	None                                     = 0,
	OnlyPositive                             = 1,
	OnlyNegative                             = 2,
	EGeometryScriptBakeCurvatureClampMode_MAX = 3,
};

// Enum GeometryScriptingCore.EGeometryScriptCombineAttributesMode
// NumValues: 0x0004
enum class EGeometryScriptCombineAttributesMode : uint8
{
	EnableAllMatching                        = 0,
	UseTarget                                = 1,
	UseSource                                = 2,
	EGeometryScriptCombineAttributesMode_MAX = 3,
};

// Enum GeometryScriptingCore.EGeometryScriptSmoothBoneWeightsType
// NumValues: 0x0003
enum class EGeometryScriptSmoothBoneWeightsType : uint8
{
	DirectDistance                           = 0,
	GeodesicVoxel                            = 1,
	EGeometryScriptSmoothBoneWeightsType_MAX = 2,
};

// Enum GeometryScriptingCore.ETransferBoneWeightsMethod
// NumValues: 0x0003
enum class ETransferBoneWeightsMethod : uint8
{
	ClosestPointOnSurface                    = 0,
	InpaintWeights                           = 1,
	ETransferBoneWeightsMethod_MAX           = 2,
};

// Enum GeometryScriptingCore.EOutputTargetMeshBones
// NumValues: 0x0003
enum class EOutputTargetMeshBones : uint8
{
	SourceBones                              = 0,
	TargetBones                              = 1,
	EOutputTargetMeshBones_MAX               = 2,
};

// Enum GeometryScriptingCore.EGeometryScriptBooleanOperation
// NumValues: 0x0004
enum class EGeometryScriptBooleanOperation : uint8
{
	Union                                    = 0,
	Intersection                             = 1,
	Subtract                                 = 2,
	EGeometryScriptBooleanOperation_MAX      = 3,
};

// Enum GeometryScriptingCore.EGeometryScriptFlareType
// NumValues: 0x0004
enum class EGeometryScriptFlareType : uint8
{
	SinMode                                  = 0,
	SinSquaredMode                           = 1,
	TriangleMode                             = 2,
	EGeometryScriptFlareType_MAX             = 3,
};

// Enum GeometryScriptingCore.EGeometryScriptMathWarpType
// NumValues: 0x0004
enum class EGeometryScriptMathWarpType : uint8
{
	SinWave1D                                = 0,
	SinWave2D                                = 1,
	SinWave3D                                = 2,
	EGeometryScriptMathWarpType_MAX          = 3,
};

// Enum GeometryScriptingCore.EGeometryScriptMeshEditPolygroupMode
// NumValues: 0x0004
enum class EGeometryScriptMeshEditPolygroupMode : uint8
{
	PreserveExisting                         = 0,
	AutoGenerateNew                          = 1,
	SetConstant                              = 2,
	EGeometryScriptMeshEditPolygroupMode_MAX = 3,
};

// Enum GeometryScriptingCore.EGeometryScriptPolyOperationArea
// NumValues: 0x0004
enum class EGeometryScriptPolyOperationArea : uint8
{
	EntireSelection                          = 0,
	PerPolygroup                             = 1,
	PerTriangle                              = 2,
	EGeometryScriptPolyOperationArea_MAX     = 3,
};

// Enum GeometryScriptingCore.EGeometryScriptLinearExtrudeDirection
// NumValues: 0x0003
enum class EGeometryScriptLinearExtrudeDirection : uint8
{
	FixedDirection                           = 0,
	AverageFaceNormal                        = 1,
	EGeometryScriptLinearExtrudeDirection_MAX = 2,
};

// Enum GeometryScriptingCore.EGeometryScriptOffsetFacesType
// NumValues: 0x0004
enum class EGeometryScriptOffsetFacesType : uint8
{
	VertexNormal                             = 0,
	FaceNormal                               = 1,
	ParallelFaceOffset                       = 2,
	EGeometryScriptOffsetFacesType_MAX       = 3,
};

// Enum GeometryScriptingCore.EGeometryScriptMeshBevelSelectionMode
// NumValues: 0x0004
enum class EGeometryScriptMeshBevelSelectionMode : uint8
{
	TriangleArea                             = 0,
	AllPolygroupEdges                        = 1,
	SharedPolygroupEdges                     = 2,
	EGeometryScriptMeshBevelSelectionMode_MAX = 3,
};

// Enum GeometryScriptingCore.EGeometryScriptTangentTypes
// NumValues: 0x0003
enum class EGeometryScriptTangentTypes : uint8
{
	FastMikkT                                = 0,
	PerTriangle                              = 1,
	EGeometryScriptTangentTypes_MAX          = 2,
};

// Enum GeometryScriptingCore.EGeometryScriptPrimitivePolygroupMode
// NumValues: 0x0004
enum class EGeometryScriptPrimitivePolygroupMode : uint8
{
	SingleGroup                              = 0,
	PerFace                                  = 1,
	PerQuad                                  = 2,
	EGeometryScriptPrimitivePolygroupMode_MAX = 3,
};

// Enum GeometryScriptingCore.EGeometryScriptPrimitiveOriginMode
// NumValues: 0x0003
enum class EGeometryScriptPrimitiveOriginMode : uint8
{
	Center                                   = 0,
	Base                                     = 1,
	EGeometryScriptPrimitiveOriginMode_MAX   = 2,
};

// Enum GeometryScriptingCore.EGeometryScriptPrimitiveUVMode
// NumValues: 0x0003
enum class EGeometryScriptPrimitiveUVMode : uint8
{
	Uniform                                  = 0,
	ScaleToFill                              = 1,
	EGeometryScriptPrimitiveUVMode_MAX       = 2,
};

// Enum GeometryScriptingCore.EGeometryScriptPolygonFillMode
// NumValues: 0x0007
enum class EGeometryScriptPolygonFillMode : uint8
{
	All                                      = 0,
	Solid                                    = 1,
	PositiveWinding                          = 2,
	NonZeroWinding                           = 3,
	NegativeWinding                          = 4,
	OddWinding                               = 5,
	EGeometryScriptPolygonFillMode_MAX       = 6,
};

// Enum GeometryScriptingCore.EGeometryScriptUniformRemeshTargetType
// NumValues: 0x0003
enum class EGeometryScriptUniformRemeshTargetType : uint8
{
	TriangleCount                            = 0,
	TargetEdgeLength                         = 1,
	EGeometryScriptUniformRemeshTargetType_MAX = 2,
};

// Enum GeometryScriptingCore.EGeometryScriptRemeshEdgeConstraintType
// NumValues: 0x0005
enum class EGeometryScriptRemeshEdgeConstraintType : uint8
{
	Fixed                                    = 0,
	Refine                                   = 1,
	Free                                     = 2,
	Ignore                                   = 3,
	EGeometryScriptRemeshEdgeConstraintType_MAX = 4,
};

// Enum GeometryScriptingCore.EGeometryScriptRemeshSmoothingType
// NumValues: 0x0004
enum class EGeometryScriptRemeshSmoothingType : uint8
{
	Uniform                                  = 0,
	UVPreserving                             = 1,
	Mixed                                    = 2,
	EGeometryScriptRemeshSmoothingType_MAX   = 3,
};

// Enum GeometryScriptingCore.EGeometryScriptFillHolesMethod
// NumValues: 0x0006
enum class EGeometryScriptFillHolesMethod : uint8
{
	Automatic                                = 0,
	MinimalFill                              = 1,
	PolygonTriangulation                     = 2,
	TriangleFan                              = 3,
	PlanarProjection                         = 4,
	EGeometryScriptFillHolesMethod_MAX       = 5,
};

// Enum GeometryScriptingCore.EGeometryScriptRemoveHiddenTrianglesMethod
// NumValues: 0x0003
enum class EGeometryScriptRemoveHiddenTrianglesMethod : uint8
{
	FastWindingNumber                        = 0,
	RaycastOcclusionTest                     = 1,
	EGeometryScriptRemoveHiddenTrianglesMethod_MAX = 2,
};

// Enum GeometryScriptingCore.EGeometryScriptRepairMeshMode
// NumValues: 0x0004
enum class EGeometryScriptRepairMeshMode : uint8
{
	DeleteOnly                               = 0,
	RepairOrDelete                           = 1,
	RepairOrSkip                             = 2,
	EGeometryScriptRepairMeshMode_MAX        = 3,
};

// Enum GeometryScriptingCore.EGeometryScriptSamplingWeightMode
// NumValues: 0x0004
enum class EGeometryScriptSamplingWeightMode : uint8
{
	WeightToRadius                           = 0,
	FilledWeightToRadius                     = 1,
	WeightedRandom                           = 2,
	EGeometryScriptSamplingWeightMode_MAX    = 3,
};

// Enum GeometryScriptingCore.EGeometryScriptSamplingDistributionMode
// NumValues: 0x0004
enum class EGeometryScriptSamplingDistributionMode : uint8
{
	Uniform                                  = 0,
	Smaller                                  = 1,
	Larger                                   = 2,
	EGeometryScriptSamplingDistributionMode_MAX = 3,
};

// Enum GeometryScriptingCore.EGeometryScriptTopologyConnectionType
// NumValues: 0x0004
enum class EGeometryScriptTopologyConnectionType : uint8
{
	Geometric                                = 0,
	Polygroup                                = 1,
	MaterialID                               = 2,
	EGeometryScriptTopologyConnectionType_MAX = 3,
};

// Enum GeometryScriptingCore.EGeometryScriptRemoveMeshSimplificationType
// NumValues: 0x0004
enum class EGeometryScriptRemoveMeshSimplificationType : uint8
{
	StandardQEM                              = 0,
	VolumePreserving                         = 1,
	AttributeAware                           = 2,
	EGeometryScriptRemoveMeshSimplificationType_MAX = 3,
};

// Enum GeometryScriptingCore.ESelectiveTessellatePatternType
// NumValues: 0x0002
enum class ESelectiveTessellatePatternType : uint8
{
	ConcentricRings                          = 0,
	ESelectiveTessellatePatternType_MAX      = 1,
};

// Enum GeometryScriptingCore.EGeometryScriptUVFlattenMethod
// NumValues: 0x0004
enum class EGeometryScriptUVFlattenMethod : uint8
{
	ExpMap                                   = 0,
	Conformal                                = 1,
	SpectralConformal                        = 2,
	EGeometryScriptUVFlattenMethod_MAX       = 3,
};

// Enum GeometryScriptingCore.EGeometryScriptUVIslandSource
// NumValues: 0x0003
enum class EGeometryScriptUVIslandSource : uint8
{
	PolyGroups                               = 0,
	UVIslands                                = 1,
	EGeometryScriptUVIslandSource_MAX        = 2,
};

// Enum GeometryScriptingCore.EGeometryScriptBlurColorMode
// NumValues: 0x0004
enum class EGeometryScriptBlurColorMode : uint8
{
	Uniform                                  = 0,
	EdgeLength                               = 1,
	CotanWeights                             = 2,
	EGeometryScriptBlurColorMode_MAX         = 3,
};

// Enum GeometryScriptingCore.EGeometryScriptGridSizingMethod
// NumValues: 0x0003
enum class EGeometryScriptGridSizingMethod : uint8
{
	GridCellSize                             = 0,
	GridResolution                           = 1,
	EGeometryScriptGridSizingMethod_MAX      = 2,
};

// Enum GeometryScriptingCore.EGeometryScriptMorphologicalOpType
// NumValues: 0x0005
enum class EGeometryScriptMorphologicalOpType : uint8
{
	Dilate                                   = 0,
	Contract                                 = 1,
	Close                                    = 2,
	Open                                     = 3,
	EGeometryScriptMorphologicalOpType_MAX   = 4,
};

// Enum GeometryScriptingCore.EGeometryScriptPolyOffsetJoinType
// NumValues: 0x0004
enum class EGeometryScriptPolyOffsetJoinType : uint8
{
	Square                                   = 0,
	Round                                    = 1,
	Miter                                    = 2,
	EGeometryScriptPolyOffsetJoinType_MAX    = 3,
};

// Enum GeometryScriptingCore.EGeometryScriptPathOffsetEndType
// NumValues: 0x0004
enum class EGeometryScriptPathOffsetEndType : uint8
{
	Butt                                     = 0,
	Square                                   = 1,
	Round                                    = 2,
	EGeometryScriptPathOffsetEndType_MAX     = 3,
};

// Enum GeometryScriptingCore.EGeometryScriptSampleSpacing
// NumValues: 0x0004
enum class EGeometryScriptSampleSpacing : uint8
{
	UniformDistance                          = 0,
	UniformTime                              = 1,
	ErrorTolerance                           = 2,
	EGeometryScriptSampleSpacing_MAX         = 3,
};

// Enum GeometryScriptingCore.EGeometryScriptPixelSamplingMethod
// NumValues: 0x0003
enum class EGeometryScriptPixelSamplingMethod : uint8
{
	Bilinear                                 = 0,
	Nearest                                  = 1,
	EGeometryScriptPixelSamplingMethod_MAX   = 2,
};

// ScriptStruct GeometryScriptingCore.GeometryScriptMeshReadLOD
// 0x0008 (0x0008 - 0x0000)
struct FGeometryScriptMeshReadLOD final
{
public:
	EGeometryScriptLODType                        LODType;                                           // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2573[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LODIndex;                                          // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptMeshReadLOD) == 0x000004, "Wrong alignment on FGeometryScriptMeshReadLOD");
static_assert(sizeof(FGeometryScriptMeshReadLOD) == 0x000008, "Wrong size on FGeometryScriptMeshReadLOD");
static_assert(offsetof(FGeometryScriptMeshReadLOD, LODType) == 0x000000, "Member 'FGeometryScriptMeshReadLOD::LODType' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshReadLOD, LODIndex) == 0x000004, "Member 'FGeometryScriptMeshReadLOD::LODIndex' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptMeshWriteLOD
// 0x0008 (0x0008 - 0x0000)
struct FGeometryScriptMeshWriteLOD final
{
public:
	bool                                          bWriteHiResSource;                                 // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2574[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LODIndex;                                          // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptMeshWriteLOD) == 0x000004, "Wrong alignment on FGeometryScriptMeshWriteLOD");
static_assert(sizeof(FGeometryScriptMeshWriteLOD) == 0x000008, "Wrong size on FGeometryScriptMeshWriteLOD");
static_assert(offsetof(FGeometryScriptMeshWriteLOD, bWriteHiResSource) == 0x000000, "Member 'FGeometryScriptMeshWriteLOD::bWriteHiResSource' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshWriteLOD, LODIndex) == 0x000004, "Member 'FGeometryScriptMeshWriteLOD::LODIndex' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptTriangle
// 0x0048 (0x0048 - 0x0000)
struct FGeometryScriptTriangle final
{
public:
	struct FVector                                Vector0;                                           // 0x0000(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Vector1;                                           // 0x0018(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Vector2;                                           // 0x0030(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptTriangle) == 0x000008, "Wrong alignment on FGeometryScriptTriangle");
static_assert(sizeof(FGeometryScriptTriangle) == 0x000048, "Wrong size on FGeometryScriptTriangle");
static_assert(offsetof(FGeometryScriptTriangle, Vector0) == 0x000000, "Member 'FGeometryScriptTriangle::Vector0' has a wrong offset!");
static_assert(offsetof(FGeometryScriptTriangle, Vector1) == 0x000018, "Member 'FGeometryScriptTriangle::Vector1' has a wrong offset!");
static_assert(offsetof(FGeometryScriptTriangle, Vector2) == 0x000030, "Member 'FGeometryScriptTriangle::Vector2' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptTrianglePoint
// 0x0038 (0x0038 - 0x0000)
struct FGeometryScriptTrianglePoint final
{
public:
	bool                                          bValid;                                            // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2575[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TriangleID;                                        // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0008(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BaryCoords;                                        // 0x0020(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptTrianglePoint) == 0x000008, "Wrong alignment on FGeometryScriptTrianglePoint");
static_assert(sizeof(FGeometryScriptTrianglePoint) == 0x000038, "Wrong size on FGeometryScriptTrianglePoint");
static_assert(offsetof(FGeometryScriptTrianglePoint, bValid) == 0x000000, "Member 'FGeometryScriptTrianglePoint::bValid' has a wrong offset!");
static_assert(offsetof(FGeometryScriptTrianglePoint, TriangleID) == 0x000004, "Member 'FGeometryScriptTrianglePoint::TriangleID' has a wrong offset!");
static_assert(offsetof(FGeometryScriptTrianglePoint, Position) == 0x000008, "Member 'FGeometryScriptTrianglePoint::Position' has a wrong offset!");
static_assert(offsetof(FGeometryScriptTrianglePoint, BaryCoords) == 0x000020, "Member 'FGeometryScriptTrianglePoint::BaryCoords' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptUVTriangle
// 0x0030 (0x0030 - 0x0000)
struct FGeometryScriptUVTriangle final
{
public:
	struct FVector2D                              UV0;                                               // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              UV1;                                               // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              UV2;                                               // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptUVTriangle) == 0x000008, "Wrong alignment on FGeometryScriptUVTriangle");
static_assert(sizeof(FGeometryScriptUVTriangle) == 0x000030, "Wrong size on FGeometryScriptUVTriangle");
static_assert(offsetof(FGeometryScriptUVTriangle, UV0) == 0x000000, "Member 'FGeometryScriptUVTriangle::UV0' has a wrong offset!");
static_assert(offsetof(FGeometryScriptUVTriangle, UV1) == 0x000010, "Member 'FGeometryScriptUVTriangle::UV1' has a wrong offset!");
static_assert(offsetof(FGeometryScriptUVTriangle, UV2) == 0x000020, "Member 'FGeometryScriptUVTriangle::UV2' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptColorFlags
// 0x0004 (0x0004 - 0x0000)
struct FGeometryScriptColorFlags final
{
public:
	bool                                          bRed;                                              // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGreen;                                            // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlue;                                             // 0x0002(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlpha;                                            // 0x0003(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptColorFlags) == 0x000001, "Wrong alignment on FGeometryScriptColorFlags");
static_assert(sizeof(FGeometryScriptColorFlags) == 0x000004, "Wrong size on FGeometryScriptColorFlags");
static_assert(offsetof(FGeometryScriptColorFlags, bRed) == 0x000000, "Member 'FGeometryScriptColorFlags::bRed' has a wrong offset!");
static_assert(offsetof(FGeometryScriptColorFlags, bGreen) == 0x000001, "Member 'FGeometryScriptColorFlags::bGreen' has a wrong offset!");
static_assert(offsetof(FGeometryScriptColorFlags, bBlue) == 0x000002, "Member 'FGeometryScriptColorFlags::bBlue' has a wrong offset!");
static_assert(offsetof(FGeometryScriptColorFlags, bAlpha) == 0x000003, "Member 'FGeometryScriptColorFlags::bAlpha' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptGroupLayer
// 0x0008 (0x0008 - 0x0000)
struct FGeometryScriptGroupLayer final
{
public:
	bool                                          bDefaultLayer;                                     // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2576[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ExtendedLayerIndex;                                // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptGroupLayer) == 0x000004, "Wrong alignment on FGeometryScriptGroupLayer");
static_assert(sizeof(FGeometryScriptGroupLayer) == 0x000008, "Wrong size on FGeometryScriptGroupLayer");
static_assert(offsetof(FGeometryScriptGroupLayer, bDefaultLayer) == 0x000000, "Member 'FGeometryScriptGroupLayer::bDefaultLayer' has a wrong offset!");
static_assert(offsetof(FGeometryScriptGroupLayer, ExtendedLayerIndex) == 0x000004, "Member 'FGeometryScriptGroupLayer::ExtendedLayerIndex' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptIndexList
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FGeometryScriptIndexList final
{
public:
	EGeometryScriptIndexType                      IndexType;                                         // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2577[0x17];                                    // 0x0001(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeometryScriptIndexList) == 0x000008, "Wrong alignment on FGeometryScriptIndexList");
static_assert(sizeof(FGeometryScriptIndexList) == 0x000018, "Wrong size on FGeometryScriptIndexList");
static_assert(offsetof(FGeometryScriptIndexList, IndexType) == 0x000000, "Member 'FGeometryScriptIndexList::IndexType' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptTriangleList
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FGeometryScriptTriangleList final
{
public:
	uint8                                         Pad_2578[0x10];                                    // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeometryScriptTriangleList) == 0x000008, "Wrong alignment on FGeometryScriptTriangleList");
static_assert(sizeof(FGeometryScriptTriangleList) == 0x000010, "Wrong size on FGeometryScriptTriangleList");

// ScriptStruct GeometryScriptingCore.GeometryScriptScalarList
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FGeometryScriptScalarList final
{
public:
	uint8                                         Pad_2579[0x10];                                    // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeometryScriptScalarList) == 0x000008, "Wrong alignment on FGeometryScriptScalarList");
static_assert(sizeof(FGeometryScriptScalarList) == 0x000010, "Wrong size on FGeometryScriptScalarList");

// ScriptStruct GeometryScriptingCore.GeometryScriptVectorList
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FGeometryScriptVectorList final
{
public:
	uint8                                         Pad_257A[0x10];                                    // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeometryScriptVectorList) == 0x000008, "Wrong alignment on FGeometryScriptVectorList");
static_assert(sizeof(FGeometryScriptVectorList) == 0x000010, "Wrong size on FGeometryScriptVectorList");

// ScriptStruct GeometryScriptingCore.GeometryScriptUVList
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FGeometryScriptUVList final
{
public:
	uint8                                         Pad_257B[0x10];                                    // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeometryScriptUVList) == 0x000008, "Wrong alignment on FGeometryScriptUVList");
static_assert(sizeof(FGeometryScriptUVList) == 0x000010, "Wrong size on FGeometryScriptUVList");

// ScriptStruct GeometryScriptingCore.GeometryScriptColorList
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FGeometryScriptColorList final
{
public:
	uint8                                         Pad_257C[0x10];                                    // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeometryScriptColorList) == 0x000008, "Wrong alignment on FGeometryScriptColorList");
static_assert(sizeof(FGeometryScriptColorList) == 0x000010, "Wrong size on FGeometryScriptColorList");

// ScriptStruct GeometryScriptingCore.GeometryScriptPolyPath
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FGeometryScriptPolyPath final
{
public:
	uint8                                         Pad_257D[0x10];                                    // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bClosedLoop;                                       // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_257E[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeometryScriptPolyPath) == 0x000008, "Wrong alignment on FGeometryScriptPolyPath");
static_assert(sizeof(FGeometryScriptPolyPath) == 0x000018, "Wrong size on FGeometryScriptPolyPath");
static_assert(offsetof(FGeometryScriptPolyPath, bClosedLoop) == 0x000010, "Member 'FGeometryScriptPolyPath::bClosedLoop' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptSimplePolygon
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FGeometryScriptSimplePolygon final
{
public:
	uint8                                         Pad_257F[0x10];                                    // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeometryScriptSimplePolygon) == 0x000008, "Wrong alignment on FGeometryScriptSimplePolygon");
static_assert(sizeof(FGeometryScriptSimplePolygon) == 0x000010, "Wrong size on FGeometryScriptSimplePolygon");

// ScriptStruct GeometryScriptingCore.GeometryScriptGeneralPolygonList
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FGeometryScriptGeneralPolygonList final
{
public:
	uint8                                         Pad_2580[0x10];                                    // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeometryScriptGeneralPolygonList) == 0x000008, "Wrong alignment on FGeometryScriptGeneralPolygonList");
static_assert(sizeof(FGeometryScriptGeneralPolygonList) == 0x000010, "Wrong size on FGeometryScriptGeneralPolygonList");

// ScriptStruct GeometryScriptingCore.GeometryScriptDynamicMeshBVH
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FGeometryScriptDynamicMeshBVH final
{
public:
	uint8                                         Pad_2581[0x20];                                    // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeometryScriptDynamicMeshBVH) == 0x000008, "Wrong alignment on FGeometryScriptDynamicMeshBVH");
static_assert(sizeof(FGeometryScriptDynamicMeshBVH) == 0x000020, "Wrong size on FGeometryScriptDynamicMeshBVH");

// ScriptStruct GeometryScriptingCore.GeometryScriptDebugMessage
// 0x0020 (0x0020 - 0x0000)
struct FGeometryScriptDebugMessage final
{
public:
	EGeometryScriptDebugMessageType               MessageType;                                       // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptErrorType                      ErrorType;                                         // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2582[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Message;                                           // 0x0008(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptDebugMessage) == 0x000008, "Wrong alignment on FGeometryScriptDebugMessage");
static_assert(sizeof(FGeometryScriptDebugMessage) == 0x000020, "Wrong size on FGeometryScriptDebugMessage");
static_assert(offsetof(FGeometryScriptDebugMessage, MessageType) == 0x000000, "Member 'FGeometryScriptDebugMessage::MessageType' has a wrong offset!");
static_assert(offsetof(FGeometryScriptDebugMessage, ErrorType) == 0x000001, "Member 'FGeometryScriptDebugMessage::ErrorType' has a wrong offset!");
static_assert(offsetof(FGeometryScriptDebugMessage, Message) == 0x000008, "Member 'FGeometryScriptDebugMessage::Message' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptCollisionFromMeshOptions
// 0x0030 (0x0030 - 0x0000)
struct FGeometryScriptCollisionFromMeshOptions final
{
public:
	bool                                          bEmitTransaction;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptCollisionGenerationMethod      Method;                                            // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDetectSpheres;                                // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDetectBoxes;                                  // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDetectCapsules;                               // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2583[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinThickness;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSimplifyHulls;                                    // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2584[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ConvexHullTargetFaceCount;                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxConvexHullsPerMesh;                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConvexDecompositionSearchFactor;                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConvexDecompositionErrorTolerance;                 // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConvexDecompositionMinPartThickness;               // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SweptHullSimplifyTolerance;                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptSweptHullAxis                  SweptHullAxis;                                     // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveFullyContainedShapes;                       // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2585[0x2];                                     // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxShapeCount;                                     // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptCollisionFromMeshOptions) == 0x000004, "Wrong alignment on FGeometryScriptCollisionFromMeshOptions");
static_assert(sizeof(FGeometryScriptCollisionFromMeshOptions) == 0x000030, "Wrong size on FGeometryScriptCollisionFromMeshOptions");
static_assert(offsetof(FGeometryScriptCollisionFromMeshOptions, bEmitTransaction) == 0x000000, "Member 'FGeometryScriptCollisionFromMeshOptions::bEmitTransaction' has a wrong offset!");
static_assert(offsetof(FGeometryScriptCollisionFromMeshOptions, Method) == 0x000001, "Member 'FGeometryScriptCollisionFromMeshOptions::Method' has a wrong offset!");
static_assert(offsetof(FGeometryScriptCollisionFromMeshOptions, bAutoDetectSpheres) == 0x000002, "Member 'FGeometryScriptCollisionFromMeshOptions::bAutoDetectSpheres' has a wrong offset!");
static_assert(offsetof(FGeometryScriptCollisionFromMeshOptions, bAutoDetectBoxes) == 0x000003, "Member 'FGeometryScriptCollisionFromMeshOptions::bAutoDetectBoxes' has a wrong offset!");
static_assert(offsetof(FGeometryScriptCollisionFromMeshOptions, bAutoDetectCapsules) == 0x000004, "Member 'FGeometryScriptCollisionFromMeshOptions::bAutoDetectCapsules' has a wrong offset!");
static_assert(offsetof(FGeometryScriptCollisionFromMeshOptions, MinThickness) == 0x000008, "Member 'FGeometryScriptCollisionFromMeshOptions::MinThickness' has a wrong offset!");
static_assert(offsetof(FGeometryScriptCollisionFromMeshOptions, bSimplifyHulls) == 0x00000C, "Member 'FGeometryScriptCollisionFromMeshOptions::bSimplifyHulls' has a wrong offset!");
static_assert(offsetof(FGeometryScriptCollisionFromMeshOptions, ConvexHullTargetFaceCount) == 0x000010, "Member 'FGeometryScriptCollisionFromMeshOptions::ConvexHullTargetFaceCount' has a wrong offset!");
static_assert(offsetof(FGeometryScriptCollisionFromMeshOptions, MaxConvexHullsPerMesh) == 0x000014, "Member 'FGeometryScriptCollisionFromMeshOptions::MaxConvexHullsPerMesh' has a wrong offset!");
static_assert(offsetof(FGeometryScriptCollisionFromMeshOptions, ConvexDecompositionSearchFactor) == 0x000018, "Member 'FGeometryScriptCollisionFromMeshOptions::ConvexDecompositionSearchFactor' has a wrong offset!");
static_assert(offsetof(FGeometryScriptCollisionFromMeshOptions, ConvexDecompositionErrorTolerance) == 0x00001C, "Member 'FGeometryScriptCollisionFromMeshOptions::ConvexDecompositionErrorTolerance' has a wrong offset!");
static_assert(offsetof(FGeometryScriptCollisionFromMeshOptions, ConvexDecompositionMinPartThickness) == 0x000020, "Member 'FGeometryScriptCollisionFromMeshOptions::ConvexDecompositionMinPartThickness' has a wrong offset!");
static_assert(offsetof(FGeometryScriptCollisionFromMeshOptions, SweptHullSimplifyTolerance) == 0x000024, "Member 'FGeometryScriptCollisionFromMeshOptions::SweptHullSimplifyTolerance' has a wrong offset!");
static_assert(offsetof(FGeometryScriptCollisionFromMeshOptions, SweptHullAxis) == 0x000028, "Member 'FGeometryScriptCollisionFromMeshOptions::SweptHullAxis' has a wrong offset!");
static_assert(offsetof(FGeometryScriptCollisionFromMeshOptions, bRemoveFullyContainedShapes) == 0x000029, "Member 'FGeometryScriptCollisionFromMeshOptions::bRemoveFullyContainedShapes' has a wrong offset!");
static_assert(offsetof(FGeometryScriptCollisionFromMeshOptions, MaxShapeCount) == 0x00002C, "Member 'FGeometryScriptCollisionFromMeshOptions::MaxShapeCount' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptSetSimpleCollisionOptions
// 0x0001 (0x0001 - 0x0000)
struct FGeometryScriptSetSimpleCollisionOptions final
{
public:
	bool                                          bEmitTransaction;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptSetSimpleCollisionOptions) == 0x000001, "Wrong alignment on FGeometryScriptSetSimpleCollisionOptions");
static_assert(sizeof(FGeometryScriptSetSimpleCollisionOptions) == 0x000001, "Wrong size on FGeometryScriptSetSimpleCollisionOptions");
static_assert(offsetof(FGeometryScriptSetSimpleCollisionOptions, bEmitTransaction) == 0x000000, "Member 'FGeometryScriptSetSimpleCollisionOptions::bEmitTransaction' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptConvexHullOptions
// 0x000C (0x000C - 0x0000)
struct FGeometryScriptConvexHullOptions final
{
public:
	bool                                          bPrefilterVertices;                                // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2586[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PrefilterGridResolution;                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SimplifyToFaceCount;                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptConvexHullOptions) == 0x000004, "Wrong alignment on FGeometryScriptConvexHullOptions");
static_assert(sizeof(FGeometryScriptConvexHullOptions) == 0x00000C, "Wrong size on FGeometryScriptConvexHullOptions");
static_assert(offsetof(FGeometryScriptConvexHullOptions, bPrefilterVertices) == 0x000000, "Member 'FGeometryScriptConvexHullOptions::bPrefilterVertices' has a wrong offset!");
static_assert(offsetof(FGeometryScriptConvexHullOptions, PrefilterGridResolution) == 0x000004, "Member 'FGeometryScriptConvexHullOptions::PrefilterGridResolution' has a wrong offset!");
static_assert(offsetof(FGeometryScriptConvexHullOptions, SimplifyToFaceCount) == 0x000008, "Member 'FGeometryScriptConvexHullOptions::SimplifyToFaceCount' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptSweptHullOptions
// 0x0018 (0x0018 - 0x0000)
struct FGeometryScriptSweptHullOptions final
{
public:
	bool                                          bPrefilterVertices;                                // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2587[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PrefilterGridResolution;                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinThickness;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSimplify;                                         // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2588[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinEdgeLength;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SimplifyTolerance;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptSweptHullOptions) == 0x000004, "Wrong alignment on FGeometryScriptSweptHullOptions");
static_assert(sizeof(FGeometryScriptSweptHullOptions) == 0x000018, "Wrong size on FGeometryScriptSweptHullOptions");
static_assert(offsetof(FGeometryScriptSweptHullOptions, bPrefilterVertices) == 0x000000, "Member 'FGeometryScriptSweptHullOptions::bPrefilterVertices' has a wrong offset!");
static_assert(offsetof(FGeometryScriptSweptHullOptions, PrefilterGridResolution) == 0x000004, "Member 'FGeometryScriptSweptHullOptions::PrefilterGridResolution' has a wrong offset!");
static_assert(offsetof(FGeometryScriptSweptHullOptions, MinThickness) == 0x000008, "Member 'FGeometryScriptSweptHullOptions::MinThickness' has a wrong offset!");
static_assert(offsetof(FGeometryScriptSweptHullOptions, bSimplify) == 0x00000C, "Member 'FGeometryScriptSweptHullOptions::bSimplify' has a wrong offset!");
static_assert(offsetof(FGeometryScriptSweptHullOptions, MinEdgeLength) == 0x000010, "Member 'FGeometryScriptSweptHullOptions::MinEdgeLength' has a wrong offset!");
static_assert(offsetof(FGeometryScriptSweptHullOptions, SimplifyTolerance) == 0x000014, "Member 'FGeometryScriptSweptHullOptions::SimplifyTolerance' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptConvexDecompositionOptions
// 0x0028 (0x0028 - 0x0000)
struct FGeometryScriptConvexDecompositionOptions final
{
public:
	int32                                         NumHulls;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2589[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SearchFactor;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ErrorTolerance;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MinPartThickness;                                  // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SimplifyToFaceCount;                               // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_258A[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeometryScriptConvexDecompositionOptions) == 0x000008, "Wrong alignment on FGeometryScriptConvexDecompositionOptions");
static_assert(sizeof(FGeometryScriptConvexDecompositionOptions) == 0x000028, "Wrong size on FGeometryScriptConvexDecompositionOptions");
static_assert(offsetof(FGeometryScriptConvexDecompositionOptions, NumHulls) == 0x000000, "Member 'FGeometryScriptConvexDecompositionOptions::NumHulls' has a wrong offset!");
static_assert(offsetof(FGeometryScriptConvexDecompositionOptions, SearchFactor) == 0x000008, "Member 'FGeometryScriptConvexDecompositionOptions::SearchFactor' has a wrong offset!");
static_assert(offsetof(FGeometryScriptConvexDecompositionOptions, ErrorTolerance) == 0x000010, "Member 'FGeometryScriptConvexDecompositionOptions::ErrorTolerance' has a wrong offset!");
static_assert(offsetof(FGeometryScriptConvexDecompositionOptions, MinPartThickness) == 0x000018, "Member 'FGeometryScriptConvexDecompositionOptions::MinPartThickness' has a wrong offset!");
static_assert(offsetof(FGeometryScriptConvexDecompositionOptions, SimplifyToFaceCount) == 0x000020, "Member 'FGeometryScriptConvexDecompositionOptions::SimplifyToFaceCount' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptMeshSelection
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FGeometryScriptMeshSelection final
{
public:
	uint8                                         Pad_258B[0x10];                                    // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeometryScriptMeshSelection) == 0x000008, "Wrong alignment on FGeometryScriptMeshSelection");
static_assert(sizeof(FGeometryScriptMeshSelection) == 0x000010, "Wrong size on FGeometryScriptMeshSelection");

// ScriptStruct GeometryScriptingCore.GeometryScriptCopyMeshFromAssetOptions
// 0x0003 (0x0003 - 0x0000)
struct FGeometryScriptCopyMeshFromAssetOptions final
{
public:
	bool                                          bApplyBuildSettings;                               // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequestTangents;                                  // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreRemoveDegenerates;                          // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptCopyMeshFromAssetOptions) == 0x000001, "Wrong alignment on FGeometryScriptCopyMeshFromAssetOptions");
static_assert(sizeof(FGeometryScriptCopyMeshFromAssetOptions) == 0x000003, "Wrong size on FGeometryScriptCopyMeshFromAssetOptions");
static_assert(offsetof(FGeometryScriptCopyMeshFromAssetOptions, bApplyBuildSettings) == 0x000000, "Member 'FGeometryScriptCopyMeshFromAssetOptions::bApplyBuildSettings' has a wrong offset!");
static_assert(offsetof(FGeometryScriptCopyMeshFromAssetOptions, bRequestTangents) == 0x000001, "Member 'FGeometryScriptCopyMeshFromAssetOptions::bRequestTangents' has a wrong offset!");
static_assert(offsetof(FGeometryScriptCopyMeshFromAssetOptions, bIgnoreRemoveDegenerates) == 0x000002, "Member 'FGeometryScriptCopyMeshFromAssetOptions::bIgnoreRemoveDegenerates' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptNaniteOptions
// 0x000C (0x000C - 0x0000)
struct FGeometryScriptNaniteOptions final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_258C[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FallbackPercentTriangles;                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallbackRelativeError;                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptNaniteOptions) == 0x000004, "Wrong alignment on FGeometryScriptNaniteOptions");
static_assert(sizeof(FGeometryScriptNaniteOptions) == 0x00000C, "Wrong size on FGeometryScriptNaniteOptions");
static_assert(offsetof(FGeometryScriptNaniteOptions, bEnabled) == 0x000000, "Member 'FGeometryScriptNaniteOptions::bEnabled' has a wrong offset!");
static_assert(offsetof(FGeometryScriptNaniteOptions, FallbackPercentTriangles) == 0x000004, "Member 'FGeometryScriptNaniteOptions::FallbackPercentTriangles' has a wrong offset!");
static_assert(offsetof(FGeometryScriptNaniteOptions, FallbackRelativeError) == 0x000008, "Member 'FGeometryScriptNaniteOptions::FallbackRelativeError' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptCopyMeshToAssetOptions
// 0x0080 (0x0080 - 0x0000)
struct FGeometryScriptCopyMeshToAssetOptions final
{
public:
	bool                                          bEnableRecomputeNormals;                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableRecomputeTangents;                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableRemoveDegenerates;                          // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReplaceMaterials;                                 // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_258D[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             NewMaterials;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class FName>                           NewMaterialSlotNames;                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bApplyNaniteSettings;                              // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_258E[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptNaniteOptions           NaniteSettings;                                    // 0x002C(0x000C)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FMeshNaniteSettings                    NewNaniteSettings;                                 // 0x0038(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bEmitTransaction;                                  // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeferMeshPostEditChange;                          // 0x0079(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_258F[0x6];                                     // 0x007A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeometryScriptCopyMeshToAssetOptions) == 0x000008, "Wrong alignment on FGeometryScriptCopyMeshToAssetOptions");
static_assert(sizeof(FGeometryScriptCopyMeshToAssetOptions) == 0x000080, "Wrong size on FGeometryScriptCopyMeshToAssetOptions");
static_assert(offsetof(FGeometryScriptCopyMeshToAssetOptions, bEnableRecomputeNormals) == 0x000000, "Member 'FGeometryScriptCopyMeshToAssetOptions::bEnableRecomputeNormals' has a wrong offset!");
static_assert(offsetof(FGeometryScriptCopyMeshToAssetOptions, bEnableRecomputeTangents) == 0x000001, "Member 'FGeometryScriptCopyMeshToAssetOptions::bEnableRecomputeTangents' has a wrong offset!");
static_assert(offsetof(FGeometryScriptCopyMeshToAssetOptions, bEnableRemoveDegenerates) == 0x000002, "Member 'FGeometryScriptCopyMeshToAssetOptions::bEnableRemoveDegenerates' has a wrong offset!");
static_assert(offsetof(FGeometryScriptCopyMeshToAssetOptions, bReplaceMaterials) == 0x000003, "Member 'FGeometryScriptCopyMeshToAssetOptions::bReplaceMaterials' has a wrong offset!");
static_assert(offsetof(FGeometryScriptCopyMeshToAssetOptions, NewMaterials) == 0x000008, "Member 'FGeometryScriptCopyMeshToAssetOptions::NewMaterials' has a wrong offset!");
static_assert(offsetof(FGeometryScriptCopyMeshToAssetOptions, NewMaterialSlotNames) == 0x000018, "Member 'FGeometryScriptCopyMeshToAssetOptions::NewMaterialSlotNames' has a wrong offset!");
static_assert(offsetof(FGeometryScriptCopyMeshToAssetOptions, bApplyNaniteSettings) == 0x000028, "Member 'FGeometryScriptCopyMeshToAssetOptions::bApplyNaniteSettings' has a wrong offset!");
static_assert(offsetof(FGeometryScriptCopyMeshToAssetOptions, NaniteSettings) == 0x00002C, "Member 'FGeometryScriptCopyMeshToAssetOptions::NaniteSettings' has a wrong offset!");
static_assert(offsetof(FGeometryScriptCopyMeshToAssetOptions, NewNaniteSettings) == 0x000038, "Member 'FGeometryScriptCopyMeshToAssetOptions::NewNaniteSettings' has a wrong offset!");
static_assert(offsetof(FGeometryScriptCopyMeshToAssetOptions, bEmitTransaction) == 0x000078, "Member 'FGeometryScriptCopyMeshToAssetOptions::bEmitTransaction' has a wrong offset!");
static_assert(offsetof(FGeometryScriptCopyMeshToAssetOptions, bDeferMeshPostEditChange) == 0x000079, "Member 'FGeometryScriptCopyMeshToAssetOptions::bDeferMeshPostEditChange' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptBakeTypeOptions
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FGeometryScriptBakeTypeOptions final
{
public:
	EGeometryScriptBakeTypes                      BakeType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2590[0x17];                                    // 0x0001(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeometryScriptBakeTypeOptions) == 0x000008, "Wrong alignment on FGeometryScriptBakeTypeOptions");
static_assert(sizeof(FGeometryScriptBakeTypeOptions) == 0x000018, "Wrong size on FGeometryScriptBakeTypeOptions");
static_assert(offsetof(FGeometryScriptBakeTypeOptions, BakeType) == 0x000000, "Member 'FGeometryScriptBakeTypeOptions::BakeType' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptBakeTextureOptions
// 0x0020 (0x0020 - 0x0000)
struct FGeometryScriptBakeTextureOptions final
{
public:
	EGeometryScriptBakeResolution                 Resolution;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptBakeBitDepth                   BitDepth;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptBakeSamplesPerPixel            SamplesPerPixel;                                   // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2591[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             SampleFilterMask;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptBakeFilteringType              FilteringType;                                     // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2592[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ProjectionDistance;                                // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bProjectionInWorldSpace;                           // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2593[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeometryScriptBakeTextureOptions) == 0x000008, "Wrong alignment on FGeometryScriptBakeTextureOptions");
static_assert(sizeof(FGeometryScriptBakeTextureOptions) == 0x000020, "Wrong size on FGeometryScriptBakeTextureOptions");
static_assert(offsetof(FGeometryScriptBakeTextureOptions, Resolution) == 0x000000, "Member 'FGeometryScriptBakeTextureOptions::Resolution' has a wrong offset!");
static_assert(offsetof(FGeometryScriptBakeTextureOptions, BitDepth) == 0x000001, "Member 'FGeometryScriptBakeTextureOptions::BitDepth' has a wrong offset!");
static_assert(offsetof(FGeometryScriptBakeTextureOptions, SamplesPerPixel) == 0x000002, "Member 'FGeometryScriptBakeTextureOptions::SamplesPerPixel' has a wrong offset!");
static_assert(offsetof(FGeometryScriptBakeTextureOptions, SampleFilterMask) == 0x000008, "Member 'FGeometryScriptBakeTextureOptions::SampleFilterMask' has a wrong offset!");
static_assert(offsetof(FGeometryScriptBakeTextureOptions, FilteringType) == 0x000010, "Member 'FGeometryScriptBakeTextureOptions::FilteringType' has a wrong offset!");
static_assert(offsetof(FGeometryScriptBakeTextureOptions, ProjectionDistance) == 0x000014, "Member 'FGeometryScriptBakeTextureOptions::ProjectionDistance' has a wrong offset!");
static_assert(offsetof(FGeometryScriptBakeTextureOptions, bProjectionInWorldSpace) == 0x000018, "Member 'FGeometryScriptBakeTextureOptions::bProjectionInWorldSpace' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptBakeVertexOptions
// 0x000C (0x000C - 0x0000)
struct FGeometryScriptBakeVertexOptions final
{
public:
	bool                                          bSplitAtNormalSeams;                               // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSplitAtUVSeams;                                   // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2594[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ProjectionDistance;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bProjectionInWorldSpace;                           // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2595[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeometryScriptBakeVertexOptions) == 0x000004, "Wrong alignment on FGeometryScriptBakeVertexOptions");
static_assert(sizeof(FGeometryScriptBakeVertexOptions) == 0x00000C, "Wrong size on FGeometryScriptBakeVertexOptions");
static_assert(offsetof(FGeometryScriptBakeVertexOptions, bSplitAtNormalSeams) == 0x000000, "Member 'FGeometryScriptBakeVertexOptions::bSplitAtNormalSeams' has a wrong offset!");
static_assert(offsetof(FGeometryScriptBakeVertexOptions, bSplitAtUVSeams) == 0x000001, "Member 'FGeometryScriptBakeVertexOptions::bSplitAtUVSeams' has a wrong offset!");
static_assert(offsetof(FGeometryScriptBakeVertexOptions, ProjectionDistance) == 0x000004, "Member 'FGeometryScriptBakeVertexOptions::ProjectionDistance' has a wrong offset!");
static_assert(offsetof(FGeometryScriptBakeVertexOptions, bProjectionInWorldSpace) == 0x000008, "Member 'FGeometryScriptBakeVertexOptions::bProjectionInWorldSpace' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptBakeOutputType
// 0x0080 (0x0080 - 0x0000)
struct FGeometryScriptBakeOutputType final
{
public:
	EGeometryScriptBakeOutputMode                 OutputMode;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2596[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptBakeTypeOptions         RGBA;                                              // 0x0008(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGeometryScriptBakeTypeOptions         R;                                                 // 0x0020(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGeometryScriptBakeTypeOptions         G;                                                 // 0x0038(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGeometryScriptBakeTypeOptions         B;                                                 // 0x0050(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGeometryScriptBakeTypeOptions         A;                                                 // 0x0068(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptBakeOutputType) == 0x000008, "Wrong alignment on FGeometryScriptBakeOutputType");
static_assert(sizeof(FGeometryScriptBakeOutputType) == 0x000080, "Wrong size on FGeometryScriptBakeOutputType");
static_assert(offsetof(FGeometryScriptBakeOutputType, OutputMode) == 0x000000, "Member 'FGeometryScriptBakeOutputType::OutputMode' has a wrong offset!");
static_assert(offsetof(FGeometryScriptBakeOutputType, RGBA) == 0x000008, "Member 'FGeometryScriptBakeOutputType::RGBA' has a wrong offset!");
static_assert(offsetof(FGeometryScriptBakeOutputType, R) == 0x000020, "Member 'FGeometryScriptBakeOutputType::R' has a wrong offset!");
static_assert(offsetof(FGeometryScriptBakeOutputType, G) == 0x000038, "Member 'FGeometryScriptBakeOutputType::G' has a wrong offset!");
static_assert(offsetof(FGeometryScriptBakeOutputType, B) == 0x000050, "Member 'FGeometryScriptBakeOutputType::B' has a wrong offset!");
static_assert(offsetof(FGeometryScriptBakeOutputType, A) == 0x000068, "Member 'FGeometryScriptBakeOutputType::A' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptBakeTargetMeshOptions
// 0x0004 (0x0004 - 0x0000)
struct FGeometryScriptBakeTargetMeshOptions final
{
public:
	int32                                         TargetUVLayer;                                     // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptBakeTargetMeshOptions) == 0x000004, "Wrong alignment on FGeometryScriptBakeTargetMeshOptions");
static_assert(sizeof(FGeometryScriptBakeTargetMeshOptions) == 0x000004, "Wrong size on FGeometryScriptBakeTargetMeshOptions");
static_assert(offsetof(FGeometryScriptBakeTargetMeshOptions, TargetUVLayer) == 0x000000, "Member 'FGeometryScriptBakeTargetMeshOptions::TargetUVLayer' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptBakeSourceMeshOptions
// 0x0010 (0x0010 - 0x0000)
struct FGeometryScriptBakeSourceMeshOptions final
{
public:
	class UTexture2D*                             SourceNormalMap;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SourceNormalUVLayer;                               // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptBakeNormalSpace                SourceNormalSpace;                                 // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2597[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeometryScriptBakeSourceMeshOptions) == 0x000008, "Wrong alignment on FGeometryScriptBakeSourceMeshOptions");
static_assert(sizeof(FGeometryScriptBakeSourceMeshOptions) == 0x000010, "Wrong size on FGeometryScriptBakeSourceMeshOptions");
static_assert(offsetof(FGeometryScriptBakeSourceMeshOptions, SourceNormalMap) == 0x000000, "Member 'FGeometryScriptBakeSourceMeshOptions::SourceNormalMap' has a wrong offset!");
static_assert(offsetof(FGeometryScriptBakeSourceMeshOptions, SourceNormalUVLayer) == 0x000008, "Member 'FGeometryScriptBakeSourceMeshOptions::SourceNormalUVLayer' has a wrong offset!");
static_assert(offsetof(FGeometryScriptBakeSourceMeshOptions, SourceNormalSpace) == 0x00000C, "Member 'FGeometryScriptBakeSourceMeshOptions::SourceNormalSpace' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptBakeRenderCaptureOptions
// 0x0028 (0x0028 - 0x0000)
struct FGeometryScriptBakeRenderCaptureOptions final
{
public:
	EGeometryScriptBakeResolution                 Resolution;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptBakeResolution                 RenderCaptureResolution;                           // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptBakeSamplesPerPixel            SamplesPerPixel;                                   // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRenderCaptureAntiAliasing;                        // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CleanupTolerance;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBaseColorMap;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNormalMap;                                        // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPackedMRSMap;                                     // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMetallicMap;                                      // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRoughnessMap;                                     // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpecularMap;                                      // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEmissiveMap;                                      // 0x000E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOpacityMap;                                       // 0x000F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSubsurfaceColorMap;                               // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2598[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FieldOfViewDegrees;                                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        NearPlaneDist;                                     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptBakeRenderCaptureOptions) == 0x000008, "Wrong alignment on FGeometryScriptBakeRenderCaptureOptions");
static_assert(sizeof(FGeometryScriptBakeRenderCaptureOptions) == 0x000028, "Wrong size on FGeometryScriptBakeRenderCaptureOptions");
static_assert(offsetof(FGeometryScriptBakeRenderCaptureOptions, Resolution) == 0x000000, "Member 'FGeometryScriptBakeRenderCaptureOptions::Resolution' has a wrong offset!");
static_assert(offsetof(FGeometryScriptBakeRenderCaptureOptions, RenderCaptureResolution) == 0x000001, "Member 'FGeometryScriptBakeRenderCaptureOptions::RenderCaptureResolution' has a wrong offset!");
static_assert(offsetof(FGeometryScriptBakeRenderCaptureOptions, SamplesPerPixel) == 0x000002, "Member 'FGeometryScriptBakeRenderCaptureOptions::SamplesPerPixel' has a wrong offset!");
static_assert(offsetof(FGeometryScriptBakeRenderCaptureOptions, bRenderCaptureAntiAliasing) == 0x000003, "Member 'FGeometryScriptBakeRenderCaptureOptions::bRenderCaptureAntiAliasing' has a wrong offset!");
static_assert(offsetof(FGeometryScriptBakeRenderCaptureOptions, CleanupTolerance) == 0x000004, "Member 'FGeometryScriptBakeRenderCaptureOptions::CleanupTolerance' has a wrong offset!");
static_assert(offsetof(FGeometryScriptBakeRenderCaptureOptions, bBaseColorMap) == 0x000008, "Member 'FGeometryScriptBakeRenderCaptureOptions::bBaseColorMap' has a wrong offset!");
static_assert(offsetof(FGeometryScriptBakeRenderCaptureOptions, bNormalMap) == 0x000009, "Member 'FGeometryScriptBakeRenderCaptureOptions::bNormalMap' has a wrong offset!");
static_assert(offsetof(FGeometryScriptBakeRenderCaptureOptions, bPackedMRSMap) == 0x00000A, "Member 'FGeometryScriptBakeRenderCaptureOptions::bPackedMRSMap' has a wrong offset!");
static_assert(offsetof(FGeometryScriptBakeRenderCaptureOptions, bMetallicMap) == 0x00000B, "Member 'FGeometryScriptBakeRenderCaptureOptions::bMetallicMap' has a wrong offset!");
static_assert(offsetof(FGeometryScriptBakeRenderCaptureOptions, bRoughnessMap) == 0x00000C, "Member 'FGeometryScriptBakeRenderCaptureOptions::bRoughnessMap' has a wrong offset!");
static_assert(offsetof(FGeometryScriptBakeRenderCaptureOptions, bSpecularMap) == 0x00000D, "Member 'FGeometryScriptBakeRenderCaptureOptions::bSpecularMap' has a wrong offset!");
static_assert(offsetof(FGeometryScriptBakeRenderCaptureOptions, bEmissiveMap) == 0x00000E, "Member 'FGeometryScriptBakeRenderCaptureOptions::bEmissiveMap' has a wrong offset!");
static_assert(offsetof(FGeometryScriptBakeRenderCaptureOptions, bOpacityMap) == 0x00000F, "Member 'FGeometryScriptBakeRenderCaptureOptions::bOpacityMap' has a wrong offset!");
static_assert(offsetof(FGeometryScriptBakeRenderCaptureOptions, bSubsurfaceColorMap) == 0x000010, "Member 'FGeometryScriptBakeRenderCaptureOptions::bSubsurfaceColorMap' has a wrong offset!");
static_assert(offsetof(FGeometryScriptBakeRenderCaptureOptions, FieldOfViewDegrees) == 0x000018, "Member 'FGeometryScriptBakeRenderCaptureOptions::FieldOfViewDegrees' has a wrong offset!");
static_assert(offsetof(FGeometryScriptBakeRenderCaptureOptions, NearPlaneDist) == 0x000020, "Member 'FGeometryScriptBakeRenderCaptureOptions::NearPlaneDist' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptRenderCaptureTextures
// 0x0090 (0x0090 - 0x0000)
struct FGeometryScriptRenderCaptureTextures final
{
public:
	class UTexture2D*                             BaseColorMap;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasBaseColorMap;                                  // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2599[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             NormalMap;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasNormalMap;                                     // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_259A[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             PackedMRSMap;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasPackedMRSMap;                                  // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_259B[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             MetallicMap;                                       // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasMetallicMap;                                   // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_259C[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             RoughnessMap;                                      // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasRoughnessMap;                                  // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_259D[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             SpecularMap;                                       // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasSpecularMap;                                   // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_259E[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             EmissiveMap;                                       // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasEmissiveMap;                                   // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_259F[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             OpacityMap;                                        // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasOpacityMap;                                    // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25A0[0x7];                                     // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             SubsurfaceColorMap;                                // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasSubsurfaceColorMap;                            // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25A1[0x7];                                     // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeometryScriptRenderCaptureTextures) == 0x000008, "Wrong alignment on FGeometryScriptRenderCaptureTextures");
static_assert(sizeof(FGeometryScriptRenderCaptureTextures) == 0x000090, "Wrong size on FGeometryScriptRenderCaptureTextures");
static_assert(offsetof(FGeometryScriptRenderCaptureTextures, BaseColorMap) == 0x000000, "Member 'FGeometryScriptRenderCaptureTextures::BaseColorMap' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRenderCaptureTextures, bHasBaseColorMap) == 0x000008, "Member 'FGeometryScriptRenderCaptureTextures::bHasBaseColorMap' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRenderCaptureTextures, NormalMap) == 0x000010, "Member 'FGeometryScriptRenderCaptureTextures::NormalMap' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRenderCaptureTextures, bHasNormalMap) == 0x000018, "Member 'FGeometryScriptRenderCaptureTextures::bHasNormalMap' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRenderCaptureTextures, PackedMRSMap) == 0x000020, "Member 'FGeometryScriptRenderCaptureTextures::PackedMRSMap' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRenderCaptureTextures, bHasPackedMRSMap) == 0x000028, "Member 'FGeometryScriptRenderCaptureTextures::bHasPackedMRSMap' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRenderCaptureTextures, MetallicMap) == 0x000030, "Member 'FGeometryScriptRenderCaptureTextures::MetallicMap' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRenderCaptureTextures, bHasMetallicMap) == 0x000038, "Member 'FGeometryScriptRenderCaptureTextures::bHasMetallicMap' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRenderCaptureTextures, RoughnessMap) == 0x000040, "Member 'FGeometryScriptRenderCaptureTextures::RoughnessMap' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRenderCaptureTextures, bHasRoughnessMap) == 0x000048, "Member 'FGeometryScriptRenderCaptureTextures::bHasRoughnessMap' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRenderCaptureTextures, SpecularMap) == 0x000050, "Member 'FGeometryScriptRenderCaptureTextures::SpecularMap' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRenderCaptureTextures, bHasSpecularMap) == 0x000058, "Member 'FGeometryScriptRenderCaptureTextures::bHasSpecularMap' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRenderCaptureTextures, EmissiveMap) == 0x000060, "Member 'FGeometryScriptRenderCaptureTextures::EmissiveMap' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRenderCaptureTextures, bHasEmissiveMap) == 0x000068, "Member 'FGeometryScriptRenderCaptureTextures::bHasEmissiveMap' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRenderCaptureTextures, OpacityMap) == 0x000070, "Member 'FGeometryScriptRenderCaptureTextures::OpacityMap' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRenderCaptureTextures, bHasOpacityMap) == 0x000078, "Member 'FGeometryScriptRenderCaptureTextures::bHasOpacityMap' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRenderCaptureTextures, SubsurfaceColorMap) == 0x000080, "Member 'FGeometryScriptRenderCaptureTextures::SubsurfaceColorMap' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRenderCaptureTextures, bHasSubsurfaceColorMap) == 0x000088, "Member 'FGeometryScriptRenderCaptureTextures::bHasSubsurfaceColorMap' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptSimpleMeshBuffers
// 0x00D0 (0x00D0 - 0x0000)
struct FGeometryScriptSimpleMeshBuffers final
{
public:
	TArray<struct FVector>                        Vertices;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        Normals;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      UV0;                                               // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      UV1;                                               // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      UV2;                                               // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      UV3;                                               // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      UV4;                                               // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      UV5;                                               // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      UV6;                                               // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      UV7;                                               // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                   VertexColors;                                      // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FIntVector>                     Triangles;                                         // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 TriGroupIDs;                                       // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptSimpleMeshBuffers) == 0x000008, "Wrong alignment on FGeometryScriptSimpleMeshBuffers");
static_assert(sizeof(FGeometryScriptSimpleMeshBuffers) == 0x0000D0, "Wrong size on FGeometryScriptSimpleMeshBuffers");
static_assert(offsetof(FGeometryScriptSimpleMeshBuffers, Vertices) == 0x000000, "Member 'FGeometryScriptSimpleMeshBuffers::Vertices' has a wrong offset!");
static_assert(offsetof(FGeometryScriptSimpleMeshBuffers, Normals) == 0x000010, "Member 'FGeometryScriptSimpleMeshBuffers::Normals' has a wrong offset!");
static_assert(offsetof(FGeometryScriptSimpleMeshBuffers, UV0) == 0x000020, "Member 'FGeometryScriptSimpleMeshBuffers::UV0' has a wrong offset!");
static_assert(offsetof(FGeometryScriptSimpleMeshBuffers, UV1) == 0x000030, "Member 'FGeometryScriptSimpleMeshBuffers::UV1' has a wrong offset!");
static_assert(offsetof(FGeometryScriptSimpleMeshBuffers, UV2) == 0x000040, "Member 'FGeometryScriptSimpleMeshBuffers::UV2' has a wrong offset!");
static_assert(offsetof(FGeometryScriptSimpleMeshBuffers, UV3) == 0x000050, "Member 'FGeometryScriptSimpleMeshBuffers::UV3' has a wrong offset!");
static_assert(offsetof(FGeometryScriptSimpleMeshBuffers, UV4) == 0x000060, "Member 'FGeometryScriptSimpleMeshBuffers::UV4' has a wrong offset!");
static_assert(offsetof(FGeometryScriptSimpleMeshBuffers, UV5) == 0x000070, "Member 'FGeometryScriptSimpleMeshBuffers::UV5' has a wrong offset!");
static_assert(offsetof(FGeometryScriptSimpleMeshBuffers, UV6) == 0x000080, "Member 'FGeometryScriptSimpleMeshBuffers::UV6' has a wrong offset!");
static_assert(offsetof(FGeometryScriptSimpleMeshBuffers, UV7) == 0x000090, "Member 'FGeometryScriptSimpleMeshBuffers::UV7' has a wrong offset!");
static_assert(offsetof(FGeometryScriptSimpleMeshBuffers, VertexColors) == 0x0000A0, "Member 'FGeometryScriptSimpleMeshBuffers::VertexColors' has a wrong offset!");
static_assert(offsetof(FGeometryScriptSimpleMeshBuffers, Triangles) == 0x0000B0, "Member 'FGeometryScriptSimpleMeshBuffers::Triangles' has a wrong offset!");
static_assert(offsetof(FGeometryScriptSimpleMeshBuffers, TriGroupIDs) == 0x0000C0, "Member 'FGeometryScriptSimpleMeshBuffers::TriGroupIDs' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptAppendMeshOptions
// 0x0001 (0x0001 - 0x0000)
struct FGeometryScriptAppendMeshOptions final
{
public:
	EGeometryScriptCombineAttributesMode          CombineMode;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptAppendMeshOptions) == 0x000001, "Wrong alignment on FGeometryScriptAppendMeshOptions");
static_assert(sizeof(FGeometryScriptAppendMeshOptions) == 0x000001, "Wrong size on FGeometryScriptAppendMeshOptions");
static_assert(offsetof(FGeometryScriptAppendMeshOptions, CombineMode) == 0x000000, "Member 'FGeometryScriptAppendMeshOptions::CombineMode' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptBoneWeight
// 0x0008 (0x0008 - 0x0000)
struct FGeometryScriptBoneWeight final
{
public:
	int32                                         BoneIndex;                                         // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptBoneWeight) == 0x000004, "Wrong alignment on FGeometryScriptBoneWeight");
static_assert(sizeof(FGeometryScriptBoneWeight) == 0x000008, "Wrong size on FGeometryScriptBoneWeight");
static_assert(offsetof(FGeometryScriptBoneWeight, BoneIndex) == 0x000000, "Member 'FGeometryScriptBoneWeight::BoneIndex' has a wrong offset!");
static_assert(offsetof(FGeometryScriptBoneWeight, Weight) == 0x000004, "Member 'FGeometryScriptBoneWeight::Weight' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptBoneWeightProfile
// 0x0008 (0x0008 - 0x0000)
struct FGeometryScriptBoneWeightProfile final
{
public:
	class FName                                   ProfileName;                                       // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptBoneWeightProfile) == 0x000004, "Wrong alignment on FGeometryScriptBoneWeightProfile");
static_assert(sizeof(FGeometryScriptBoneWeightProfile) == 0x000008, "Wrong size on FGeometryScriptBoneWeightProfile");
static_assert(offsetof(FGeometryScriptBoneWeightProfile, ProfileName) == 0x000000, "Member 'FGeometryScriptBoneWeightProfile::ProfileName' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptSmoothBoneWeightsOptions
// 0x0010 (0x0010 - 0x0000)
struct FGeometryScriptSmoothBoneWeightsOptions final
{
public:
	EGeometryScriptSmoothBoneWeightsType          DistanceWeighingType;                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25A2[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Stiffness;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxInfluences;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VoxelResolution;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptSmoothBoneWeightsOptions) == 0x000004, "Wrong alignment on FGeometryScriptSmoothBoneWeightsOptions");
static_assert(sizeof(FGeometryScriptSmoothBoneWeightsOptions) == 0x000010, "Wrong size on FGeometryScriptSmoothBoneWeightsOptions");
static_assert(offsetof(FGeometryScriptSmoothBoneWeightsOptions, DistanceWeighingType) == 0x000000, "Member 'FGeometryScriptSmoothBoneWeightsOptions::DistanceWeighingType' has a wrong offset!");
static_assert(offsetof(FGeometryScriptSmoothBoneWeightsOptions, Stiffness) == 0x000004, "Member 'FGeometryScriptSmoothBoneWeightsOptions::Stiffness' has a wrong offset!");
static_assert(offsetof(FGeometryScriptSmoothBoneWeightsOptions, MaxInfluences) == 0x000008, "Member 'FGeometryScriptSmoothBoneWeightsOptions::MaxInfluences' has a wrong offset!");
static_assert(offsetof(FGeometryScriptSmoothBoneWeightsOptions, VoxelResolution) == 0x00000C, "Member 'FGeometryScriptSmoothBoneWeightsOptions::VoxelResolution' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptTransferBoneWeightsOptions
// 0x0040 (0x0040 - 0x0000)
struct FGeometryScriptTransferBoneWeightsOptions final
{
public:
	ETransferBoneWeightsMethod                    TransferMethod;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOutputTargetMeshBones                        OutputTargetMeshBones;                             // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25A3[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptBoneWeightProfile       SourceProfile;                                     // 0x0004(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FGeometryScriptBoneWeightProfile       TargetProfile;                                     // 0x000C(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_25A4[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RadiusPercentage;                                  // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        NormalThreshold;                                   // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LayeredMeshSupport;                                // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25A5[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumSmoothingIterations;                            // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SmoothingStrength;                                 // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InpaintMask;                                       // 0x0034(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25A6[0x4];                                     // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeometryScriptTransferBoneWeightsOptions) == 0x000008, "Wrong alignment on FGeometryScriptTransferBoneWeightsOptions");
static_assert(sizeof(FGeometryScriptTransferBoneWeightsOptions) == 0x000040, "Wrong size on FGeometryScriptTransferBoneWeightsOptions");
static_assert(offsetof(FGeometryScriptTransferBoneWeightsOptions, TransferMethod) == 0x000000, "Member 'FGeometryScriptTransferBoneWeightsOptions::TransferMethod' has a wrong offset!");
static_assert(offsetof(FGeometryScriptTransferBoneWeightsOptions, OutputTargetMeshBones) == 0x000001, "Member 'FGeometryScriptTransferBoneWeightsOptions::OutputTargetMeshBones' has a wrong offset!");
static_assert(offsetof(FGeometryScriptTransferBoneWeightsOptions, SourceProfile) == 0x000004, "Member 'FGeometryScriptTransferBoneWeightsOptions::SourceProfile' has a wrong offset!");
static_assert(offsetof(FGeometryScriptTransferBoneWeightsOptions, TargetProfile) == 0x00000C, "Member 'FGeometryScriptTransferBoneWeightsOptions::TargetProfile' has a wrong offset!");
static_assert(offsetof(FGeometryScriptTransferBoneWeightsOptions, RadiusPercentage) == 0x000018, "Member 'FGeometryScriptTransferBoneWeightsOptions::RadiusPercentage' has a wrong offset!");
static_assert(offsetof(FGeometryScriptTransferBoneWeightsOptions, NormalThreshold) == 0x000020, "Member 'FGeometryScriptTransferBoneWeightsOptions::NormalThreshold' has a wrong offset!");
static_assert(offsetof(FGeometryScriptTransferBoneWeightsOptions, LayeredMeshSupport) == 0x000028, "Member 'FGeometryScriptTransferBoneWeightsOptions::LayeredMeshSupport' has a wrong offset!");
static_assert(offsetof(FGeometryScriptTransferBoneWeightsOptions, NumSmoothingIterations) == 0x00002C, "Member 'FGeometryScriptTransferBoneWeightsOptions::NumSmoothingIterations' has a wrong offset!");
static_assert(offsetof(FGeometryScriptTransferBoneWeightsOptions, SmoothingStrength) == 0x000030, "Member 'FGeometryScriptTransferBoneWeightsOptions::SmoothingStrength' has a wrong offset!");
static_assert(offsetof(FGeometryScriptTransferBoneWeightsOptions, InpaintMask) == 0x000034, "Member 'FGeometryScriptTransferBoneWeightsOptions::InpaintMask' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptBoneInfo
// 0x00E0 (0x00E0 - 0x0000)
struct FGeometryScriptBoneInfo final
{
public:
	int32                                         Index;                                             // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name;                                              // 0x0004(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParentIndex;                                       // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             LocalTransform;                                    // 0x0010(0x0060)(BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             WorldTransform;                                    // 0x0070(0x0060)(BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x00D0(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptBoneInfo) == 0x000010, "Wrong alignment on FGeometryScriptBoneInfo");
static_assert(sizeof(FGeometryScriptBoneInfo) == 0x0000E0, "Wrong size on FGeometryScriptBoneInfo");
static_assert(offsetof(FGeometryScriptBoneInfo, Index) == 0x000000, "Member 'FGeometryScriptBoneInfo::Index' has a wrong offset!");
static_assert(offsetof(FGeometryScriptBoneInfo, Name) == 0x000004, "Member 'FGeometryScriptBoneInfo::Name' has a wrong offset!");
static_assert(offsetof(FGeometryScriptBoneInfo, ParentIndex) == 0x00000C, "Member 'FGeometryScriptBoneInfo::ParentIndex' has a wrong offset!");
static_assert(offsetof(FGeometryScriptBoneInfo, LocalTransform) == 0x000010, "Member 'FGeometryScriptBoneInfo::LocalTransform' has a wrong offset!");
static_assert(offsetof(FGeometryScriptBoneInfo, WorldTransform) == 0x000070, "Member 'FGeometryScriptBoneInfo::WorldTransform' has a wrong offset!");
static_assert(offsetof(FGeometryScriptBoneInfo, Color) == 0x0000D0, "Member 'FGeometryScriptBoneInfo::Color' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptMeshBooleanOptions
// 0x0008 (0x0008 - 0x0000)
struct FGeometryScriptMeshBooleanOptions final
{
public:
	bool                                          bFillHoles;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSimplifyOutput;                                   // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25A7[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SimplifyPlanarTolerance;                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptMeshBooleanOptions) == 0x000004, "Wrong alignment on FGeometryScriptMeshBooleanOptions");
static_assert(sizeof(FGeometryScriptMeshBooleanOptions) == 0x000008, "Wrong size on FGeometryScriptMeshBooleanOptions");
static_assert(offsetof(FGeometryScriptMeshBooleanOptions, bFillHoles) == 0x000000, "Member 'FGeometryScriptMeshBooleanOptions::bFillHoles' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshBooleanOptions, bSimplifyOutput) == 0x000001, "Member 'FGeometryScriptMeshBooleanOptions::bSimplifyOutput' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshBooleanOptions, SimplifyPlanarTolerance) == 0x000004, "Member 'FGeometryScriptMeshBooleanOptions::SimplifyPlanarTolerance' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptMeshSelfUnionOptions
// 0x000C (0x000C - 0x0000)
struct FGeometryScriptMeshSelfUnionOptions final
{
public:
	bool                                          bFillHoles;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTrimFlaps;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSimplifyOutput;                                   // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25A8[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SimplifyPlanarTolerance;                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindingThreshold;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptMeshSelfUnionOptions) == 0x000004, "Wrong alignment on FGeometryScriptMeshSelfUnionOptions");
static_assert(sizeof(FGeometryScriptMeshSelfUnionOptions) == 0x00000C, "Wrong size on FGeometryScriptMeshSelfUnionOptions");
static_assert(offsetof(FGeometryScriptMeshSelfUnionOptions, bFillHoles) == 0x000000, "Member 'FGeometryScriptMeshSelfUnionOptions::bFillHoles' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshSelfUnionOptions, bTrimFlaps) == 0x000001, "Member 'FGeometryScriptMeshSelfUnionOptions::bTrimFlaps' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshSelfUnionOptions, bSimplifyOutput) == 0x000002, "Member 'FGeometryScriptMeshSelfUnionOptions::bSimplifyOutput' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshSelfUnionOptions, SimplifyPlanarTolerance) == 0x000004, "Member 'FGeometryScriptMeshSelfUnionOptions::SimplifyPlanarTolerance' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshSelfUnionOptions, WindingThreshold) == 0x000008, "Member 'FGeometryScriptMeshSelfUnionOptions::WindingThreshold' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptMeshPlaneCutOptions
// 0x0008 (0x0008 - 0x0000)
struct FGeometryScriptMeshPlaneCutOptions final
{
public:
	bool                                          bFillHoles;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFillSpans;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlipCutSide;                                      // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25A9[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UVWorldDimension;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptMeshPlaneCutOptions) == 0x000004, "Wrong alignment on FGeometryScriptMeshPlaneCutOptions");
static_assert(sizeof(FGeometryScriptMeshPlaneCutOptions) == 0x000008, "Wrong size on FGeometryScriptMeshPlaneCutOptions");
static_assert(offsetof(FGeometryScriptMeshPlaneCutOptions, bFillHoles) == 0x000000, "Member 'FGeometryScriptMeshPlaneCutOptions::bFillHoles' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshPlaneCutOptions, bFillSpans) == 0x000001, "Member 'FGeometryScriptMeshPlaneCutOptions::bFillSpans' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshPlaneCutOptions, bFlipCutSide) == 0x000002, "Member 'FGeometryScriptMeshPlaneCutOptions::bFlipCutSide' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshPlaneCutOptions, UVWorldDimension) == 0x000004, "Member 'FGeometryScriptMeshPlaneCutOptions::UVWorldDimension' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptMeshPlaneSliceOptions
// 0x000C (0x000C - 0x0000)
struct FGeometryScriptMeshPlaneSliceOptions final
{
public:
	bool                                          bFillHoles;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFillSpans;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25AA[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GapWidth;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UVWorldDimension;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptMeshPlaneSliceOptions) == 0x000004, "Wrong alignment on FGeometryScriptMeshPlaneSliceOptions");
static_assert(sizeof(FGeometryScriptMeshPlaneSliceOptions) == 0x00000C, "Wrong size on FGeometryScriptMeshPlaneSliceOptions");
static_assert(offsetof(FGeometryScriptMeshPlaneSliceOptions, bFillHoles) == 0x000000, "Member 'FGeometryScriptMeshPlaneSliceOptions::bFillHoles' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshPlaneSliceOptions, bFillSpans) == 0x000001, "Member 'FGeometryScriptMeshPlaneSliceOptions::bFillSpans' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshPlaneSliceOptions, GapWidth) == 0x000004, "Member 'FGeometryScriptMeshPlaneSliceOptions::GapWidth' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshPlaneSliceOptions, UVWorldDimension) == 0x000008, "Member 'FGeometryScriptMeshPlaneSliceOptions::UVWorldDimension' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptMeshMirrorOptions
// 0x0003 (0x0003 - 0x0000)
struct FGeometryScriptMeshMirrorOptions final
{
public:
	bool                                          bApplyPlaneCut;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlipCutSide;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWeldAlongPlane;                                   // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptMeshMirrorOptions) == 0x000001, "Wrong alignment on FGeometryScriptMeshMirrorOptions");
static_assert(sizeof(FGeometryScriptMeshMirrorOptions) == 0x000003, "Wrong size on FGeometryScriptMeshMirrorOptions");
static_assert(offsetof(FGeometryScriptMeshMirrorOptions, bApplyPlaneCut) == 0x000000, "Member 'FGeometryScriptMeshMirrorOptions::bApplyPlaneCut' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshMirrorOptions, bFlipCutSide) == 0x000001, "Member 'FGeometryScriptMeshMirrorOptions::bFlipCutSide' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshMirrorOptions, bWeldAlongPlane) == 0x000002, "Member 'FGeometryScriptMeshMirrorOptions::bWeldAlongPlane' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptIsSameMeshOptions
// 0x000C (0x000C - 0x0000)
struct FGeometryScriptIsSameMeshOptions final
{
public:
	bool                                          bCheckConnectivity;                                // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckEdgeIDs;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckNormals;                                     // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckColors;                                      // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckUVs;                                         // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckGroups;                                      // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckAttributes;                                  // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25AB[0x1];                                     // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Epsilon;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptIsSameMeshOptions) == 0x000004, "Wrong alignment on FGeometryScriptIsSameMeshOptions");
static_assert(sizeof(FGeometryScriptIsSameMeshOptions) == 0x00000C, "Wrong size on FGeometryScriptIsSameMeshOptions");
static_assert(offsetof(FGeometryScriptIsSameMeshOptions, bCheckConnectivity) == 0x000000, "Member 'FGeometryScriptIsSameMeshOptions::bCheckConnectivity' has a wrong offset!");
static_assert(offsetof(FGeometryScriptIsSameMeshOptions, bCheckEdgeIDs) == 0x000001, "Member 'FGeometryScriptIsSameMeshOptions::bCheckEdgeIDs' has a wrong offset!");
static_assert(offsetof(FGeometryScriptIsSameMeshOptions, bCheckNormals) == 0x000002, "Member 'FGeometryScriptIsSameMeshOptions::bCheckNormals' has a wrong offset!");
static_assert(offsetof(FGeometryScriptIsSameMeshOptions, bCheckColors) == 0x000003, "Member 'FGeometryScriptIsSameMeshOptions::bCheckColors' has a wrong offset!");
static_assert(offsetof(FGeometryScriptIsSameMeshOptions, bCheckUVs) == 0x000004, "Member 'FGeometryScriptIsSameMeshOptions::bCheckUVs' has a wrong offset!");
static_assert(offsetof(FGeometryScriptIsSameMeshOptions, bCheckGroups) == 0x000005, "Member 'FGeometryScriptIsSameMeshOptions::bCheckGroups' has a wrong offset!");
static_assert(offsetof(FGeometryScriptIsSameMeshOptions, bCheckAttributes) == 0x000006, "Member 'FGeometryScriptIsSameMeshOptions::bCheckAttributes' has a wrong offset!");
static_assert(offsetof(FGeometryScriptIsSameMeshOptions, Epsilon) == 0x000008, "Member 'FGeometryScriptIsSameMeshOptions::Epsilon' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptMeasureMeshDistanceOptions
// 0x0001 (0x0001 - 0x0000)
struct FGeometryScriptMeasureMeshDistanceOptions final
{
public:
	bool                                          bSymmetric;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptMeasureMeshDistanceOptions) == 0x000001, "Wrong alignment on FGeometryScriptMeasureMeshDistanceOptions");
static_assert(sizeof(FGeometryScriptMeasureMeshDistanceOptions) == 0x000001, "Wrong size on FGeometryScriptMeasureMeshDistanceOptions");
static_assert(offsetof(FGeometryScriptMeasureMeshDistanceOptions, bSymmetric) == 0x000000, "Member 'FGeometryScriptMeasureMeshDistanceOptions::bSymmetric' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptBendWarpOptions
// 0x000C (0x000C - 0x0000)
struct FGeometryScriptBendWarpOptions final
{
public:
	bool                                          bSymmetricExtents;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25AC[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LowerExtent;                                       // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBidirectional;                                    // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25AD[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeometryScriptBendWarpOptions) == 0x000004, "Wrong alignment on FGeometryScriptBendWarpOptions");
static_assert(sizeof(FGeometryScriptBendWarpOptions) == 0x00000C, "Wrong size on FGeometryScriptBendWarpOptions");
static_assert(offsetof(FGeometryScriptBendWarpOptions, bSymmetricExtents) == 0x000000, "Member 'FGeometryScriptBendWarpOptions::bSymmetricExtents' has a wrong offset!");
static_assert(offsetof(FGeometryScriptBendWarpOptions, LowerExtent) == 0x000004, "Member 'FGeometryScriptBendWarpOptions::LowerExtent' has a wrong offset!");
static_assert(offsetof(FGeometryScriptBendWarpOptions, bBidirectional) == 0x000008, "Member 'FGeometryScriptBendWarpOptions::bBidirectional' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptTwistWarpOptions
// 0x000C (0x000C - 0x0000)
struct FGeometryScriptTwistWarpOptions final
{
public:
	bool                                          bSymmetricExtents;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25AE[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LowerExtent;                                       // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBidirectional;                                    // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25AF[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeometryScriptTwistWarpOptions) == 0x000004, "Wrong alignment on FGeometryScriptTwistWarpOptions");
static_assert(sizeof(FGeometryScriptTwistWarpOptions) == 0x00000C, "Wrong size on FGeometryScriptTwistWarpOptions");
static_assert(offsetof(FGeometryScriptTwistWarpOptions, bSymmetricExtents) == 0x000000, "Member 'FGeometryScriptTwistWarpOptions::bSymmetricExtents' has a wrong offset!");
static_assert(offsetof(FGeometryScriptTwistWarpOptions, LowerExtent) == 0x000004, "Member 'FGeometryScriptTwistWarpOptions::LowerExtent' has a wrong offset!");
static_assert(offsetof(FGeometryScriptTwistWarpOptions, bBidirectional) == 0x000008, "Member 'FGeometryScriptTwistWarpOptions::bBidirectional' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptFlareWarpOptions
// 0x000C (0x000C - 0x0000)
struct FGeometryScriptFlareWarpOptions final
{
public:
	bool                                          bSymmetricExtents;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25B0[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LowerExtent;                                       // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptFlareType                      FlareType;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25B1[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeometryScriptFlareWarpOptions) == 0x000004, "Wrong alignment on FGeometryScriptFlareWarpOptions");
static_assert(sizeof(FGeometryScriptFlareWarpOptions) == 0x00000C, "Wrong size on FGeometryScriptFlareWarpOptions");
static_assert(offsetof(FGeometryScriptFlareWarpOptions, bSymmetricExtents) == 0x000000, "Member 'FGeometryScriptFlareWarpOptions::bSymmetricExtents' has a wrong offset!");
static_assert(offsetof(FGeometryScriptFlareWarpOptions, LowerExtent) == 0x000004, "Member 'FGeometryScriptFlareWarpOptions::LowerExtent' has a wrong offset!");
static_assert(offsetof(FGeometryScriptFlareWarpOptions, FlareType) == 0x000008, "Member 'FGeometryScriptFlareWarpOptions::FlareType' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptPerlinNoiseLayerOptions
// 0x0028 (0x0028 - 0x0000)
struct FGeometryScriptPerlinNoiseLayerOptions final
{
public:
	float                                         Magnitude;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Frequency;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FrequencyShift;                                    // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RandomSeed;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25B2[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeometryScriptPerlinNoiseLayerOptions) == 0x000008, "Wrong alignment on FGeometryScriptPerlinNoiseLayerOptions");
static_assert(sizeof(FGeometryScriptPerlinNoiseLayerOptions) == 0x000028, "Wrong size on FGeometryScriptPerlinNoiseLayerOptions");
static_assert(offsetof(FGeometryScriptPerlinNoiseLayerOptions, Magnitude) == 0x000000, "Member 'FGeometryScriptPerlinNoiseLayerOptions::Magnitude' has a wrong offset!");
static_assert(offsetof(FGeometryScriptPerlinNoiseLayerOptions, Frequency) == 0x000004, "Member 'FGeometryScriptPerlinNoiseLayerOptions::Frequency' has a wrong offset!");
static_assert(offsetof(FGeometryScriptPerlinNoiseLayerOptions, FrequencyShift) == 0x000008, "Member 'FGeometryScriptPerlinNoiseLayerOptions::FrequencyShift' has a wrong offset!");
static_assert(offsetof(FGeometryScriptPerlinNoiseLayerOptions, RandomSeed) == 0x000020, "Member 'FGeometryScriptPerlinNoiseLayerOptions::RandomSeed' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptMathWarpOptions
// 0x000C (0x000C - 0x0000)
struct FGeometryScriptMathWarpOptions final
{
public:
	float                                         Magnitude;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Frequency;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrequencyShift;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptMathWarpOptions) == 0x000004, "Wrong alignment on FGeometryScriptMathWarpOptions");
static_assert(sizeof(FGeometryScriptMathWarpOptions) == 0x00000C, "Wrong size on FGeometryScriptMathWarpOptions");
static_assert(offsetof(FGeometryScriptMathWarpOptions, Magnitude) == 0x000000, "Member 'FGeometryScriptMathWarpOptions::Magnitude' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMathWarpOptions, Frequency) == 0x000004, "Member 'FGeometryScriptMathWarpOptions::Frequency' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMathWarpOptions, FrequencyShift) == 0x000008, "Member 'FGeometryScriptMathWarpOptions::FrequencyShift' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptPerlinNoiseOptions
// 0x0030 (0x0030 - 0x0000)
struct FGeometryScriptPerlinNoiseOptions final
{
public:
	struct FGeometryScriptPerlinNoiseLayerOptions BaseLayer;                                         // 0x0000(0x0028)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bApplyAlongNormal;                                 // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptEmptySelectionBehavior         EmptyBehavior;                                     // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25B3[0x6];                                     // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeometryScriptPerlinNoiseOptions) == 0x000008, "Wrong alignment on FGeometryScriptPerlinNoiseOptions");
static_assert(sizeof(FGeometryScriptPerlinNoiseOptions) == 0x000030, "Wrong size on FGeometryScriptPerlinNoiseOptions");
static_assert(offsetof(FGeometryScriptPerlinNoiseOptions, BaseLayer) == 0x000000, "Member 'FGeometryScriptPerlinNoiseOptions::BaseLayer' has a wrong offset!");
static_assert(offsetof(FGeometryScriptPerlinNoiseOptions, bApplyAlongNormal) == 0x000028, "Member 'FGeometryScriptPerlinNoiseOptions::bApplyAlongNormal' has a wrong offset!");
static_assert(offsetof(FGeometryScriptPerlinNoiseOptions, EmptyBehavior) == 0x000029, "Member 'FGeometryScriptPerlinNoiseOptions::EmptyBehavior' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptIterativeMeshSmoothingOptions
// 0x000C (0x000C - 0x0000)
struct FGeometryScriptIterativeMeshSmoothingOptions final
{
public:
	int32                                         NumIterations;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptEmptySelectionBehavior         EmptyBehavior;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25B4[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeometryScriptIterativeMeshSmoothingOptions) == 0x000004, "Wrong alignment on FGeometryScriptIterativeMeshSmoothingOptions");
static_assert(sizeof(FGeometryScriptIterativeMeshSmoothingOptions) == 0x00000C, "Wrong size on FGeometryScriptIterativeMeshSmoothingOptions");
static_assert(offsetof(FGeometryScriptIterativeMeshSmoothingOptions, NumIterations) == 0x000000, "Member 'FGeometryScriptIterativeMeshSmoothingOptions::NumIterations' has a wrong offset!");
static_assert(offsetof(FGeometryScriptIterativeMeshSmoothingOptions, Alpha) == 0x000004, "Member 'FGeometryScriptIterativeMeshSmoothingOptions::Alpha' has a wrong offset!");
static_assert(offsetof(FGeometryScriptIterativeMeshSmoothingOptions, EmptyBehavior) == 0x000008, "Member 'FGeometryScriptIterativeMeshSmoothingOptions::EmptyBehavior' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptDisplaceFromTextureOptions
// 0x0038 (0x0038 - 0x0000)
struct FGeometryScriptDisplaceFromTextureOptions final
{
public:
	float                                         Magnitude;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25B5[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              UVScale;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              UVOffset;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Center;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ImageChannel;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptEmptySelectionBehavior         EmptyBehavior;                                     // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25B6[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeometryScriptDisplaceFromTextureOptions) == 0x000008, "Wrong alignment on FGeometryScriptDisplaceFromTextureOptions");
static_assert(sizeof(FGeometryScriptDisplaceFromTextureOptions) == 0x000038, "Wrong size on FGeometryScriptDisplaceFromTextureOptions");
static_assert(offsetof(FGeometryScriptDisplaceFromTextureOptions, Magnitude) == 0x000000, "Member 'FGeometryScriptDisplaceFromTextureOptions::Magnitude' has a wrong offset!");
static_assert(offsetof(FGeometryScriptDisplaceFromTextureOptions, UVScale) == 0x000008, "Member 'FGeometryScriptDisplaceFromTextureOptions::UVScale' has a wrong offset!");
static_assert(offsetof(FGeometryScriptDisplaceFromTextureOptions, UVOffset) == 0x000018, "Member 'FGeometryScriptDisplaceFromTextureOptions::UVOffset' has a wrong offset!");
static_assert(offsetof(FGeometryScriptDisplaceFromTextureOptions, Center) == 0x000028, "Member 'FGeometryScriptDisplaceFromTextureOptions::Center' has a wrong offset!");
static_assert(offsetof(FGeometryScriptDisplaceFromTextureOptions, ImageChannel) == 0x00002C, "Member 'FGeometryScriptDisplaceFromTextureOptions::ImageChannel' has a wrong offset!");
static_assert(offsetof(FGeometryScriptDisplaceFromTextureOptions, EmptyBehavior) == 0x000030, "Member 'FGeometryScriptDisplaceFromTextureOptions::EmptyBehavior' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptMeshEditPolygroupOptions
// 0x0008 (0x0008 - 0x0000)
struct FGeometryScriptMeshEditPolygroupOptions final
{
public:
	EGeometryScriptMeshEditPolygroupMode          GroupMode;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25B7[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ConstantGroup;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptMeshEditPolygroupOptions) == 0x000004, "Wrong alignment on FGeometryScriptMeshEditPolygroupOptions");
static_assert(sizeof(FGeometryScriptMeshEditPolygroupOptions) == 0x000008, "Wrong size on FGeometryScriptMeshEditPolygroupOptions");
static_assert(offsetof(FGeometryScriptMeshEditPolygroupOptions, GroupMode) == 0x000000, "Member 'FGeometryScriptMeshEditPolygroupOptions::GroupMode' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshEditPolygroupOptions, ConstantGroup) == 0x000004, "Member 'FGeometryScriptMeshEditPolygroupOptions::ConstantGroup' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptMeshOffsetOptions
// 0x0018 (0x0018 - 0x0000)
struct FGeometryScriptMeshOffsetOptions final
{
public:
	float                                         OffsetDistance;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFixedBoundary;                                    // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25B8[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SolveSteps;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SmoothAlpha;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReprojectDuringSmoothing;                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25B9[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BoundaryAlpha;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptMeshOffsetOptions) == 0x000004, "Wrong alignment on FGeometryScriptMeshOffsetOptions");
static_assert(sizeof(FGeometryScriptMeshOffsetOptions) == 0x000018, "Wrong size on FGeometryScriptMeshOffsetOptions");
static_assert(offsetof(FGeometryScriptMeshOffsetOptions, OffsetDistance) == 0x000000, "Member 'FGeometryScriptMeshOffsetOptions::OffsetDistance' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshOffsetOptions, bFixedBoundary) == 0x000004, "Member 'FGeometryScriptMeshOffsetOptions::bFixedBoundary' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshOffsetOptions, SolveSteps) == 0x000008, "Member 'FGeometryScriptMeshOffsetOptions::SolveSteps' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshOffsetOptions, SmoothAlpha) == 0x00000C, "Member 'FGeometryScriptMeshOffsetOptions::SmoothAlpha' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshOffsetOptions, bReprojectDuringSmoothing) == 0x000010, "Member 'FGeometryScriptMeshOffsetOptions::bReprojectDuringSmoothing' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshOffsetOptions, BoundaryAlpha) == 0x000014, "Member 'FGeometryScriptMeshOffsetOptions::BoundaryAlpha' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptMeshExtrudeOptions
// 0x0028 (0x0028 - 0x0000)
struct FGeometryScriptMeshExtrudeOptions final
{
public:
	float                                         ExtrudeDistance;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25BA[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ExtrudeDirection;                                  // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UVScale;                                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSolidsToShells;                                   // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25BB[0x3];                                     // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeometryScriptMeshExtrudeOptions) == 0x000008, "Wrong alignment on FGeometryScriptMeshExtrudeOptions");
static_assert(sizeof(FGeometryScriptMeshExtrudeOptions) == 0x000028, "Wrong size on FGeometryScriptMeshExtrudeOptions");
static_assert(offsetof(FGeometryScriptMeshExtrudeOptions, ExtrudeDistance) == 0x000000, "Member 'FGeometryScriptMeshExtrudeOptions::ExtrudeDistance' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshExtrudeOptions, ExtrudeDirection) == 0x000008, "Member 'FGeometryScriptMeshExtrudeOptions::ExtrudeDirection' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshExtrudeOptions, UVScale) == 0x000020, "Member 'FGeometryScriptMeshExtrudeOptions::UVScale' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshExtrudeOptions, bSolidsToShells) == 0x000024, "Member 'FGeometryScriptMeshExtrudeOptions::bSolidsToShells' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptMeshLinearExtrudeOptions
// 0x0038 (0x0038 - 0x0000)
struct FGeometryScriptMeshLinearExtrudeOptions final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptLinearExtrudeDirection         DirectionMode;                                     // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25BC[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Direction;                                         // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptPolyOperationArea              AreaMode;                                          // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25BD[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptMeshEditPolygroupOptions GroupOptions;                                      // 0x0024(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         UVScale;                                           // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSolidsToShells;                                   // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25BE[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeometryScriptMeshLinearExtrudeOptions) == 0x000008, "Wrong alignment on FGeometryScriptMeshLinearExtrudeOptions");
static_assert(sizeof(FGeometryScriptMeshLinearExtrudeOptions) == 0x000038, "Wrong size on FGeometryScriptMeshLinearExtrudeOptions");
static_assert(offsetof(FGeometryScriptMeshLinearExtrudeOptions, Distance) == 0x000000, "Member 'FGeometryScriptMeshLinearExtrudeOptions::Distance' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshLinearExtrudeOptions, DirectionMode) == 0x000004, "Member 'FGeometryScriptMeshLinearExtrudeOptions::DirectionMode' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshLinearExtrudeOptions, Direction) == 0x000008, "Member 'FGeometryScriptMeshLinearExtrudeOptions::Direction' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshLinearExtrudeOptions, AreaMode) == 0x000020, "Member 'FGeometryScriptMeshLinearExtrudeOptions::AreaMode' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshLinearExtrudeOptions, GroupOptions) == 0x000024, "Member 'FGeometryScriptMeshLinearExtrudeOptions::GroupOptions' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshLinearExtrudeOptions, UVScale) == 0x00002C, "Member 'FGeometryScriptMeshLinearExtrudeOptions::UVScale' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshLinearExtrudeOptions, bSolidsToShells) == 0x000030, "Member 'FGeometryScriptMeshLinearExtrudeOptions::bSolidsToShells' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptMeshOffsetFacesOptions
// 0x0018 (0x0018 - 0x0000)
struct FGeometryScriptMeshOffsetFacesOptions final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptOffsetFacesType                OffsetType;                                        // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptPolyOperationArea              AreaMode;                                          // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25BF[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptMeshEditPolygroupOptions GroupOptions;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         UVScale;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSolidsToShells;                                   // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25C0[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeometryScriptMeshOffsetFacesOptions) == 0x000004, "Wrong alignment on FGeometryScriptMeshOffsetFacesOptions");
static_assert(sizeof(FGeometryScriptMeshOffsetFacesOptions) == 0x000018, "Wrong size on FGeometryScriptMeshOffsetFacesOptions");
static_assert(offsetof(FGeometryScriptMeshOffsetFacesOptions, Distance) == 0x000000, "Member 'FGeometryScriptMeshOffsetFacesOptions::Distance' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshOffsetFacesOptions, OffsetType) == 0x000004, "Member 'FGeometryScriptMeshOffsetFacesOptions::OffsetType' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshOffsetFacesOptions, AreaMode) == 0x000005, "Member 'FGeometryScriptMeshOffsetFacesOptions::AreaMode' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshOffsetFacesOptions, GroupOptions) == 0x000008, "Member 'FGeometryScriptMeshOffsetFacesOptions::GroupOptions' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshOffsetFacesOptions, UVScale) == 0x000010, "Member 'FGeometryScriptMeshOffsetFacesOptions::UVScale' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshOffsetFacesOptions, bSolidsToShells) == 0x000014, "Member 'FGeometryScriptMeshOffsetFacesOptions::bSolidsToShells' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptMeshInsetOutsetFacesOptions
// 0x0020 (0x0020 - 0x0000)
struct FGeometryScriptMeshInsetOutsetFacesOptions final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReproject;                                        // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBoundaryOnly;                                     // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25C1[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Softness;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AreaScale;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptPolyOperationArea              AreaMode;                                          // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25C2[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptMeshEditPolygroupOptions GroupOptions;                                      // 0x0014(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         UVScale;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptMeshInsetOutsetFacesOptions) == 0x000004, "Wrong alignment on FGeometryScriptMeshInsetOutsetFacesOptions");
static_assert(sizeof(FGeometryScriptMeshInsetOutsetFacesOptions) == 0x000020, "Wrong size on FGeometryScriptMeshInsetOutsetFacesOptions");
static_assert(offsetof(FGeometryScriptMeshInsetOutsetFacesOptions, Distance) == 0x000000, "Member 'FGeometryScriptMeshInsetOutsetFacesOptions::Distance' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshInsetOutsetFacesOptions, bReproject) == 0x000004, "Member 'FGeometryScriptMeshInsetOutsetFacesOptions::bReproject' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshInsetOutsetFacesOptions, bBoundaryOnly) == 0x000005, "Member 'FGeometryScriptMeshInsetOutsetFacesOptions::bBoundaryOnly' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshInsetOutsetFacesOptions, Softness) == 0x000008, "Member 'FGeometryScriptMeshInsetOutsetFacesOptions::Softness' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshInsetOutsetFacesOptions, AreaScale) == 0x00000C, "Member 'FGeometryScriptMeshInsetOutsetFacesOptions::AreaScale' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshInsetOutsetFacesOptions, AreaMode) == 0x000010, "Member 'FGeometryScriptMeshInsetOutsetFacesOptions::AreaMode' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshInsetOutsetFacesOptions, GroupOptions) == 0x000014, "Member 'FGeometryScriptMeshInsetOutsetFacesOptions::GroupOptions' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshInsetOutsetFacesOptions, UVScale) == 0x00001C, "Member 'FGeometryScriptMeshInsetOutsetFacesOptions::UVScale' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptMeshBevelOptions
// 0x00C0 (0x00C0 - 0x0000)
struct FGeometryScriptMeshBevelOptions final
{
public:
	float                                         BevelDistance;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInferMaterialID;                                  // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25C3[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SetMaterialID;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyFilterBox;                                   // 0x000C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25C4[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBox                                   FilterBox;                                         // 0x0010(0x0038)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_25C5[0x8];                                     // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             FilterBoxTransform;                                // 0x0050(0x0060)(BlueprintVisible, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFullyContained;                                   // 0x00B0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25C6[0xF];                                     // 0x00B1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeometryScriptMeshBevelOptions) == 0x000010, "Wrong alignment on FGeometryScriptMeshBevelOptions");
static_assert(sizeof(FGeometryScriptMeshBevelOptions) == 0x0000C0, "Wrong size on FGeometryScriptMeshBevelOptions");
static_assert(offsetof(FGeometryScriptMeshBevelOptions, BevelDistance) == 0x000000, "Member 'FGeometryScriptMeshBevelOptions::BevelDistance' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshBevelOptions, bInferMaterialID) == 0x000004, "Member 'FGeometryScriptMeshBevelOptions::bInferMaterialID' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshBevelOptions, SetMaterialID) == 0x000008, "Member 'FGeometryScriptMeshBevelOptions::SetMaterialID' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshBevelOptions, bApplyFilterBox) == 0x00000C, "Member 'FGeometryScriptMeshBevelOptions::bApplyFilterBox' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshBevelOptions, FilterBox) == 0x000010, "Member 'FGeometryScriptMeshBevelOptions::FilterBox' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshBevelOptions, FilterBoxTransform) == 0x000050, "Member 'FGeometryScriptMeshBevelOptions::FilterBoxTransform' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshBevelOptions, bFullyContained) == 0x0000B0, "Member 'FGeometryScriptMeshBevelOptions::bFullyContained' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptMeshBevelSelectionOptions
// 0x000C (0x000C - 0x0000)
struct FGeometryScriptMeshBevelSelectionOptions final
{
public:
	float                                         BevelDistance;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInferMaterialID;                                  // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25C7[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SetMaterialID;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptMeshBevelSelectionOptions) == 0x000004, "Wrong alignment on FGeometryScriptMeshBevelSelectionOptions");
static_assert(sizeof(FGeometryScriptMeshBevelSelectionOptions) == 0x00000C, "Wrong size on FGeometryScriptMeshBevelSelectionOptions");
static_assert(offsetof(FGeometryScriptMeshBevelSelectionOptions, BevelDistance) == 0x000000, "Member 'FGeometryScriptMeshBevelSelectionOptions::BevelDistance' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshBevelSelectionOptions, bInferMaterialID) == 0x000004, "Member 'FGeometryScriptMeshBevelSelectionOptions::bInferMaterialID' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshBevelSelectionOptions, SetMaterialID) == 0x000008, "Member 'FGeometryScriptMeshBevelSelectionOptions::SetMaterialID' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptCalculateNormalsOptions
// 0x0002 (0x0002 - 0x0000)
struct FGeometryScriptCalculateNormalsOptions final
{
public:
	bool                                          bAngleWeighted;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAreaWeighted;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptCalculateNormalsOptions) == 0x000001, "Wrong alignment on FGeometryScriptCalculateNormalsOptions");
static_assert(sizeof(FGeometryScriptCalculateNormalsOptions) == 0x000002, "Wrong size on FGeometryScriptCalculateNormalsOptions");
static_assert(offsetof(FGeometryScriptCalculateNormalsOptions, bAngleWeighted) == 0x000000, "Member 'FGeometryScriptCalculateNormalsOptions::bAngleWeighted' has a wrong offset!");
static_assert(offsetof(FGeometryScriptCalculateNormalsOptions, bAreaWeighted) == 0x000001, "Member 'FGeometryScriptCalculateNormalsOptions::bAreaWeighted' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptSplitNormalsOptions
// 0x0014 (0x0014 - 0x0000)
struct FGeometryScriptSplitNormalsOptions final
{
public:
	bool                                          bSplitByOpeningAngle;                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25C8[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OpeningAngleDeg;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSplitByFaceGroup;                                 // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25C9[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptGroupLayer              GroupLayer;                                        // 0x000C(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptSplitNormalsOptions) == 0x000004, "Wrong alignment on FGeometryScriptSplitNormalsOptions");
static_assert(sizeof(FGeometryScriptSplitNormalsOptions) == 0x000014, "Wrong size on FGeometryScriptSplitNormalsOptions");
static_assert(offsetof(FGeometryScriptSplitNormalsOptions, bSplitByOpeningAngle) == 0x000000, "Member 'FGeometryScriptSplitNormalsOptions::bSplitByOpeningAngle' has a wrong offset!");
static_assert(offsetof(FGeometryScriptSplitNormalsOptions, OpeningAngleDeg) == 0x000004, "Member 'FGeometryScriptSplitNormalsOptions::OpeningAngleDeg' has a wrong offset!");
static_assert(offsetof(FGeometryScriptSplitNormalsOptions, bSplitByFaceGroup) == 0x000008, "Member 'FGeometryScriptSplitNormalsOptions::bSplitByFaceGroup' has a wrong offset!");
static_assert(offsetof(FGeometryScriptSplitNormalsOptions, GroupLayer) == 0x00000C, "Member 'FGeometryScriptSplitNormalsOptions::GroupLayer' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptTangentsOptions
// 0x0008 (0x0008 - 0x0000)
struct FGeometryScriptTangentsOptions final
{
public:
	EGeometryScriptTangentTypes                   Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25CA[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UVLayer;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptTangentsOptions) == 0x000004, "Wrong alignment on FGeometryScriptTangentsOptions");
static_assert(sizeof(FGeometryScriptTangentsOptions) == 0x000008, "Wrong size on FGeometryScriptTangentsOptions");
static_assert(offsetof(FGeometryScriptTangentsOptions, Type) == 0x000000, "Member 'FGeometryScriptTangentsOptions::Type' has a wrong offset!");
static_assert(offsetof(FGeometryScriptTangentsOptions, UVLayer) == 0x000004, "Member 'FGeometryScriptTangentsOptions::UVLayer' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptPrimitiveOptions
// 0x0003 (0x0003 - 0x0000)
struct FGeometryScriptPrimitiveOptions final
{
public:
	EGeometryScriptPrimitivePolygroupMode         PolygroupMode;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlipOrientation;                                  // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptPrimitiveUVMode                UVMode;                                            // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptPrimitiveOptions) == 0x000001, "Wrong alignment on FGeometryScriptPrimitiveOptions");
static_assert(sizeof(FGeometryScriptPrimitiveOptions) == 0x000003, "Wrong size on FGeometryScriptPrimitiveOptions");
static_assert(offsetof(FGeometryScriptPrimitiveOptions, PolygroupMode) == 0x000000, "Member 'FGeometryScriptPrimitiveOptions::PolygroupMode' has a wrong offset!");
static_assert(offsetof(FGeometryScriptPrimitiveOptions, bFlipOrientation) == 0x000001, "Member 'FGeometryScriptPrimitiveOptions::bFlipOrientation' has a wrong offset!");
static_assert(offsetof(FGeometryScriptPrimitiveOptions, UVMode) == 0x000002, "Member 'FGeometryScriptPrimitiveOptions::UVMode' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptRevolveOptions
// 0x0014 (0x0014 - 0x0000)
struct FGeometryScriptRevolveOptions final
{
public:
	float                                         RevolveDegrees;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DegreeOffset;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReverseDirection;                                 // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHardNormals;                                      // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25CB[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HardNormalAngle;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bProfileAtMidpoint;                                // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFillPartialRevolveEndcaps;                        // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25CC[0x2];                                     // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeometryScriptRevolveOptions) == 0x000004, "Wrong alignment on FGeometryScriptRevolveOptions");
static_assert(sizeof(FGeometryScriptRevolveOptions) == 0x000014, "Wrong size on FGeometryScriptRevolveOptions");
static_assert(offsetof(FGeometryScriptRevolveOptions, RevolveDegrees) == 0x000000, "Member 'FGeometryScriptRevolveOptions::RevolveDegrees' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRevolveOptions, DegreeOffset) == 0x000004, "Member 'FGeometryScriptRevolveOptions::DegreeOffset' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRevolveOptions, bReverseDirection) == 0x000008, "Member 'FGeometryScriptRevolveOptions::bReverseDirection' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRevolveOptions, bHardNormals) == 0x000009, "Member 'FGeometryScriptRevolveOptions::bHardNormals' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRevolveOptions, HardNormalAngle) == 0x00000C, "Member 'FGeometryScriptRevolveOptions::HardNormalAngle' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRevolveOptions, bProfileAtMidpoint) == 0x000010, "Member 'FGeometryScriptRevolveOptions::bProfileAtMidpoint' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRevolveOptions, bFillPartialRevolveEndcaps) == 0x000011, "Member 'FGeometryScriptRevolveOptions::bFillPartialRevolveEndcaps' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptVoronoiOptions
// 0x0058 (0x0058 - 0x0000)
struct FGeometryScriptVoronoiOptions final
{
public:
	float                                         BoundsExpand;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25CD[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBox                                   Bounds;                                            // 0x0008(0x0038)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 CreateCells;                                       // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIncludeBoundary;                                  // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25CE[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeometryScriptVoronoiOptions) == 0x000008, "Wrong alignment on FGeometryScriptVoronoiOptions");
static_assert(sizeof(FGeometryScriptVoronoiOptions) == 0x000058, "Wrong size on FGeometryScriptVoronoiOptions");
static_assert(offsetof(FGeometryScriptVoronoiOptions, BoundsExpand) == 0x000000, "Member 'FGeometryScriptVoronoiOptions::BoundsExpand' has a wrong offset!");
static_assert(offsetof(FGeometryScriptVoronoiOptions, Bounds) == 0x000008, "Member 'FGeometryScriptVoronoiOptions::Bounds' has a wrong offset!");
static_assert(offsetof(FGeometryScriptVoronoiOptions, CreateCells) == 0x000040, "Member 'FGeometryScriptVoronoiOptions::CreateCells' has a wrong offset!");
static_assert(offsetof(FGeometryScriptVoronoiOptions, bIncludeBoundary) == 0x000050, "Member 'FGeometryScriptVoronoiOptions::bIncludeBoundary' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptConstrainedDelaunayTriangulationOptions
// 0x0003 (0x0003 - 0x0000)
struct FGeometryScriptConstrainedDelaunayTriangulationOptions final
{
public:
	EGeometryScriptPolygonFillMode                ConstrainedEdgesFillMode;                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValidateEdgesInResult;                            // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveDuplicateVertices;                          // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptConstrainedDelaunayTriangulationOptions) == 0x000001, "Wrong alignment on FGeometryScriptConstrainedDelaunayTriangulationOptions");
static_assert(sizeof(FGeometryScriptConstrainedDelaunayTriangulationOptions) == 0x000003, "Wrong size on FGeometryScriptConstrainedDelaunayTriangulationOptions");
static_assert(offsetof(FGeometryScriptConstrainedDelaunayTriangulationOptions, ConstrainedEdgesFillMode) == 0x000000, "Member 'FGeometryScriptConstrainedDelaunayTriangulationOptions::ConstrainedEdgesFillMode' has a wrong offset!");
static_assert(offsetof(FGeometryScriptConstrainedDelaunayTriangulationOptions, bValidateEdgesInResult) == 0x000001, "Member 'FGeometryScriptConstrainedDelaunayTriangulationOptions::bValidateEdgesInResult' has a wrong offset!");
static_assert(offsetof(FGeometryScriptConstrainedDelaunayTriangulationOptions, bRemoveDuplicateVertices) == 0x000002, "Member 'FGeometryScriptConstrainedDelaunayTriangulationOptions::bRemoveDuplicateVertices' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptPolygonsTriangulationOptions
// 0x0001 (0x0001 - 0x0000)
struct FGeometryScriptPolygonsTriangulationOptions final
{
public:
	bool                                          bStillAppendOnTriangulationError;                  // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptPolygonsTriangulationOptions) == 0x000001, "Wrong alignment on FGeometryScriptPolygonsTriangulationOptions");
static_assert(sizeof(FGeometryScriptPolygonsTriangulationOptions) == 0x000001, "Wrong size on FGeometryScriptPolygonsTriangulationOptions");
static_assert(offsetof(FGeometryScriptPolygonsTriangulationOptions, bStillAppendOnTriangulationError) == 0x000000, "Member 'FGeometryScriptPolygonsTriangulationOptions::bStillAppendOnTriangulationError' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptRemeshOptions
// 0x001C (0x001C - 0x0000)
struct FGeometryScriptRemeshOptions final
{
public:
	bool                                          bDiscardAttributes;                                // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReprojectToInputMesh;                             // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptRemeshSmoothingType            SmoothingType;                                     // 0x0002(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25CF[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SmoothingRate;                                     // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptRemeshEdgeConstraintType       MeshBoundaryConstraint;                            // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptRemeshEdgeConstraintType       GroupBoundaryConstraint;                           // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptRemeshEdgeConstraintType       MaterialBoundaryConstraint;                        // 0x000A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowFlips;                                       // 0x000B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowSplits;                                      // 0x000C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowCollapses;                                   // 0x000D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreventNormalFlips;                               // 0x000E(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreventTinyTriangles;                             // 0x000F(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseFullRemeshPasses;                              // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25D0[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RemeshIterations;                                  // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoCompact;                                      // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25D1[0x3];                                     // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeometryScriptRemeshOptions) == 0x000004, "Wrong alignment on FGeometryScriptRemeshOptions");
static_assert(sizeof(FGeometryScriptRemeshOptions) == 0x00001C, "Wrong size on FGeometryScriptRemeshOptions");
static_assert(offsetof(FGeometryScriptRemeshOptions, bDiscardAttributes) == 0x000000, "Member 'FGeometryScriptRemeshOptions::bDiscardAttributes' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRemeshOptions, bReprojectToInputMesh) == 0x000001, "Member 'FGeometryScriptRemeshOptions::bReprojectToInputMesh' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRemeshOptions, SmoothingType) == 0x000002, "Member 'FGeometryScriptRemeshOptions::SmoothingType' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRemeshOptions, SmoothingRate) == 0x000004, "Member 'FGeometryScriptRemeshOptions::SmoothingRate' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRemeshOptions, MeshBoundaryConstraint) == 0x000008, "Member 'FGeometryScriptRemeshOptions::MeshBoundaryConstraint' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRemeshOptions, GroupBoundaryConstraint) == 0x000009, "Member 'FGeometryScriptRemeshOptions::GroupBoundaryConstraint' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRemeshOptions, MaterialBoundaryConstraint) == 0x00000A, "Member 'FGeometryScriptRemeshOptions::MaterialBoundaryConstraint' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRemeshOptions, bAllowFlips) == 0x00000B, "Member 'FGeometryScriptRemeshOptions::bAllowFlips' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRemeshOptions, bAllowSplits) == 0x00000C, "Member 'FGeometryScriptRemeshOptions::bAllowSplits' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRemeshOptions, bAllowCollapses) == 0x00000D, "Member 'FGeometryScriptRemeshOptions::bAllowCollapses' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRemeshOptions, bPreventNormalFlips) == 0x00000E, "Member 'FGeometryScriptRemeshOptions::bPreventNormalFlips' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRemeshOptions, bPreventTinyTriangles) == 0x00000F, "Member 'FGeometryScriptRemeshOptions::bPreventTinyTriangles' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRemeshOptions, bUseFullRemeshPasses) == 0x000010, "Member 'FGeometryScriptRemeshOptions::bUseFullRemeshPasses' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRemeshOptions, RemeshIterations) == 0x000014, "Member 'FGeometryScriptRemeshOptions::RemeshIterations' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRemeshOptions, bAutoCompact) == 0x000018, "Member 'FGeometryScriptRemeshOptions::bAutoCompact' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptUniformRemeshOptions
// 0x000C (0x000C - 0x0000)
struct FGeometryScriptUniformRemeshOptions final
{
public:
	EGeometryScriptUniformRemeshTargetType        TargetType;                                        // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25D2[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TargetTriangleCount;                               // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetEdgeLength;                                  // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptUniformRemeshOptions) == 0x000004, "Wrong alignment on FGeometryScriptUniformRemeshOptions");
static_assert(sizeof(FGeometryScriptUniformRemeshOptions) == 0x00000C, "Wrong size on FGeometryScriptUniformRemeshOptions");
static_assert(offsetof(FGeometryScriptUniformRemeshOptions, TargetType) == 0x000000, "Member 'FGeometryScriptUniformRemeshOptions::TargetType' has a wrong offset!");
static_assert(offsetof(FGeometryScriptUniformRemeshOptions, TargetTriangleCount) == 0x000004, "Member 'FGeometryScriptUniformRemeshOptions::TargetTriangleCount' has a wrong offset!");
static_assert(offsetof(FGeometryScriptUniformRemeshOptions, TargetEdgeLength) == 0x000008, "Member 'FGeometryScriptUniformRemeshOptions::TargetEdgeLength' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptWeldEdgesOptions
// 0x0008 (0x0008 - 0x0000)
struct FGeometryScriptWeldEdgesOptions final
{
public:
	float                                         Tolerance;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyUniquePairs;                                  // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25D3[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeometryScriptWeldEdgesOptions) == 0x000004, "Wrong alignment on FGeometryScriptWeldEdgesOptions");
static_assert(sizeof(FGeometryScriptWeldEdgesOptions) == 0x000008, "Wrong size on FGeometryScriptWeldEdgesOptions");
static_assert(offsetof(FGeometryScriptWeldEdgesOptions, Tolerance) == 0x000000, "Member 'FGeometryScriptWeldEdgesOptions::Tolerance' has a wrong offset!");
static_assert(offsetof(FGeometryScriptWeldEdgesOptions, bOnlyUniquePairs) == 0x000004, "Member 'FGeometryScriptWeldEdgesOptions::bOnlyUniquePairs' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptResolveTJunctionOptions
// 0x0004 (0x0004 - 0x0000)
struct FGeometryScriptResolveTJunctionOptions final
{
public:
	float                                         Tolerance;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptResolveTJunctionOptions) == 0x000004, "Wrong alignment on FGeometryScriptResolveTJunctionOptions");
static_assert(sizeof(FGeometryScriptResolveTJunctionOptions) == 0x000004, "Wrong size on FGeometryScriptResolveTJunctionOptions");
static_assert(offsetof(FGeometryScriptResolveTJunctionOptions, Tolerance) == 0x000000, "Member 'FGeometryScriptResolveTJunctionOptions::Tolerance' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptFillHolesOptions
// 0x0002 (0x0002 - 0x0000)
struct FGeometryScriptFillHolesOptions final
{
public:
	EGeometryScriptFillHolesMethod                FillMethod;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeleteIsolatedTriangles;                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptFillHolesOptions) == 0x000001, "Wrong alignment on FGeometryScriptFillHolesOptions");
static_assert(sizeof(FGeometryScriptFillHolesOptions) == 0x000002, "Wrong size on FGeometryScriptFillHolesOptions");
static_assert(offsetof(FGeometryScriptFillHolesOptions, FillMethod) == 0x000000, "Member 'FGeometryScriptFillHolesOptions::FillMethod' has a wrong offset!");
static_assert(offsetof(FGeometryScriptFillHolesOptions, bDeleteIsolatedTriangles) == 0x000001, "Member 'FGeometryScriptFillHolesOptions::bDeleteIsolatedTriangles' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptRemoveSmallComponentOptions
// 0x000C (0x000C - 0x0000)
struct FGeometryScriptRemoveSmallComponentOptions final
{
public:
	float                                         MinVolume;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinArea;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinTriangleCount;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptRemoveSmallComponentOptions) == 0x000004, "Wrong alignment on FGeometryScriptRemoveSmallComponentOptions");
static_assert(sizeof(FGeometryScriptRemoveSmallComponentOptions) == 0x00000C, "Wrong size on FGeometryScriptRemoveSmallComponentOptions");
static_assert(offsetof(FGeometryScriptRemoveSmallComponentOptions, MinVolume) == 0x000000, "Member 'FGeometryScriptRemoveSmallComponentOptions::MinVolume' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRemoveSmallComponentOptions, MinArea) == 0x000004, "Member 'FGeometryScriptRemoveSmallComponentOptions::MinArea' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRemoveSmallComponentOptions, MinTriangleCount) == 0x000008, "Member 'FGeometryScriptRemoveSmallComponentOptions::MinTriangleCount' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptRemoveHiddenTrianglesOptions
// 0x001C (0x001C - 0x0000)
struct FGeometryScriptRemoveHiddenTrianglesOptions final
{
public:
	EGeometryScriptRemoveHiddenTrianglesMethod    Method;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25D4[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SamplesPerTriangle;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShrinkSelection;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindingIsoValue;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RaysPerSample;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalOffset;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCompactResult;                                    // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25D5[0x3];                                     // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeometryScriptRemoveHiddenTrianglesOptions) == 0x000004, "Wrong alignment on FGeometryScriptRemoveHiddenTrianglesOptions");
static_assert(sizeof(FGeometryScriptRemoveHiddenTrianglesOptions) == 0x00001C, "Wrong size on FGeometryScriptRemoveHiddenTrianglesOptions");
static_assert(offsetof(FGeometryScriptRemoveHiddenTrianglesOptions, Method) == 0x000000, "Member 'FGeometryScriptRemoveHiddenTrianglesOptions::Method' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRemoveHiddenTrianglesOptions, SamplesPerTriangle) == 0x000004, "Member 'FGeometryScriptRemoveHiddenTrianglesOptions::SamplesPerTriangle' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRemoveHiddenTrianglesOptions, ShrinkSelection) == 0x000008, "Member 'FGeometryScriptRemoveHiddenTrianglesOptions::ShrinkSelection' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRemoveHiddenTrianglesOptions, WindingIsoValue) == 0x00000C, "Member 'FGeometryScriptRemoveHiddenTrianglesOptions::WindingIsoValue' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRemoveHiddenTrianglesOptions, RaysPerSample) == 0x000010, "Member 'FGeometryScriptRemoveHiddenTrianglesOptions::RaysPerSample' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRemoveHiddenTrianglesOptions, NormalOffset) == 0x000014, "Member 'FGeometryScriptRemoveHiddenTrianglesOptions::NormalOffset' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRemoveHiddenTrianglesOptions, bCompactResult) == 0x000018, "Member 'FGeometryScriptRemoveHiddenTrianglesOptions::bCompactResult' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptDegenerateTriangleOptions
// 0x0020 (0x0020 - 0x0000)
struct FGeometryScriptDegenerateTriangleOptions final
{
public:
	EGeometryScriptRepairMeshMode                 Mode;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25D6[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MinTriangleArea;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MinEdgeLength;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCompactOnCompletion;                              // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25D7[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeometryScriptDegenerateTriangleOptions) == 0x000008, "Wrong alignment on FGeometryScriptDegenerateTriangleOptions");
static_assert(sizeof(FGeometryScriptDegenerateTriangleOptions) == 0x000020, "Wrong size on FGeometryScriptDegenerateTriangleOptions");
static_assert(offsetof(FGeometryScriptDegenerateTriangleOptions, Mode) == 0x000000, "Member 'FGeometryScriptDegenerateTriangleOptions::Mode' has a wrong offset!");
static_assert(offsetof(FGeometryScriptDegenerateTriangleOptions, MinTriangleArea) == 0x000008, "Member 'FGeometryScriptDegenerateTriangleOptions::MinTriangleArea' has a wrong offset!");
static_assert(offsetof(FGeometryScriptDegenerateTriangleOptions, MinEdgeLength) == 0x000010, "Member 'FGeometryScriptDegenerateTriangleOptions::MinEdgeLength' has a wrong offset!");
static_assert(offsetof(FGeometryScriptDegenerateTriangleOptions, bCompactOnCompletion) == 0x000018, "Member 'FGeometryScriptDegenerateTriangleOptions::bCompactOnCompletion' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptMeshPointSamplingOptions
// 0x0018 (0x0018 - 0x0000)
struct FGeometryScriptMeshPointSamplingOptions final
{
public:
	float                                         SamplingRadius;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxNumSamples;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RandomSeed;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25D8[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SubSampleDensity;                                  // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptMeshPointSamplingOptions) == 0x000008, "Wrong alignment on FGeometryScriptMeshPointSamplingOptions");
static_assert(sizeof(FGeometryScriptMeshPointSamplingOptions) == 0x000018, "Wrong size on FGeometryScriptMeshPointSamplingOptions");
static_assert(offsetof(FGeometryScriptMeshPointSamplingOptions, SamplingRadius) == 0x000000, "Member 'FGeometryScriptMeshPointSamplingOptions::SamplingRadius' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshPointSamplingOptions, MaxNumSamples) == 0x000004, "Member 'FGeometryScriptMeshPointSamplingOptions::MaxNumSamples' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshPointSamplingOptions, RandomSeed) == 0x000008, "Member 'FGeometryScriptMeshPointSamplingOptions::RandomSeed' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMeshPointSamplingOptions, SubSampleDensity) == 0x000010, "Member 'FGeometryScriptMeshPointSamplingOptions::SubSampleDensity' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptNonUniformPointSamplingOptions
// 0x0018 (0x0018 - 0x0000)
struct FGeometryScriptNonUniformPointSamplingOptions final
{
public:
	float                                         MaxSamplingRadius;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptSamplingDistributionMode       SizeDistribution;                                  // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25D9[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SizeDistributionPower;                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptSamplingWeightMode             WeightMode;                                        // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvertWeights;                                    // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25DA[0x6];                                     // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeometryScriptNonUniformPointSamplingOptions) == 0x000008, "Wrong alignment on FGeometryScriptNonUniformPointSamplingOptions");
static_assert(sizeof(FGeometryScriptNonUniformPointSamplingOptions) == 0x000018, "Wrong size on FGeometryScriptNonUniformPointSamplingOptions");
static_assert(offsetof(FGeometryScriptNonUniformPointSamplingOptions, MaxSamplingRadius) == 0x000000, "Member 'FGeometryScriptNonUniformPointSamplingOptions::MaxSamplingRadius' has a wrong offset!");
static_assert(offsetof(FGeometryScriptNonUniformPointSamplingOptions, SizeDistribution) == 0x000004, "Member 'FGeometryScriptNonUniformPointSamplingOptions::SizeDistribution' has a wrong offset!");
static_assert(offsetof(FGeometryScriptNonUniformPointSamplingOptions, SizeDistributionPower) == 0x000008, "Member 'FGeometryScriptNonUniformPointSamplingOptions::SizeDistributionPower' has a wrong offset!");
static_assert(offsetof(FGeometryScriptNonUniformPointSamplingOptions, WeightMode) == 0x000010, "Member 'FGeometryScriptNonUniformPointSamplingOptions::WeightMode' has a wrong offset!");
static_assert(offsetof(FGeometryScriptNonUniformPointSamplingOptions, bInvertWeights) == 0x000011, "Member 'FGeometryScriptNonUniformPointSamplingOptions::bInvertWeights' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptPlanarSimplifyOptions
// 0x0008 (0x0008 - 0x0000)
struct FGeometryScriptPlanarSimplifyOptions final
{
public:
	float                                         AngleThreshold;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoCompact;                                      // 0x0004(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25DB[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeometryScriptPlanarSimplifyOptions) == 0x000004, "Wrong alignment on FGeometryScriptPlanarSimplifyOptions");
static_assert(sizeof(FGeometryScriptPlanarSimplifyOptions) == 0x000008, "Wrong size on FGeometryScriptPlanarSimplifyOptions");
static_assert(offsetof(FGeometryScriptPlanarSimplifyOptions, AngleThreshold) == 0x000000, "Member 'FGeometryScriptPlanarSimplifyOptions::AngleThreshold' has a wrong offset!");
static_assert(offsetof(FGeometryScriptPlanarSimplifyOptions, bAutoCompact) == 0x000004, "Member 'FGeometryScriptPlanarSimplifyOptions::bAutoCompact' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptPolygroupSimplifyOptions
// 0x0008 (0x0008 - 0x0000)
struct FGeometryScriptPolygroupSimplifyOptions final
{
public:
	float                                         AngleThreshold;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoCompact;                                      // 0x0004(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25DC[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeometryScriptPolygroupSimplifyOptions) == 0x000004, "Wrong alignment on FGeometryScriptPolygroupSimplifyOptions");
static_assert(sizeof(FGeometryScriptPolygroupSimplifyOptions) == 0x000008, "Wrong size on FGeometryScriptPolygroupSimplifyOptions");
static_assert(offsetof(FGeometryScriptPolygroupSimplifyOptions, AngleThreshold) == 0x000000, "Member 'FGeometryScriptPolygroupSimplifyOptions::AngleThreshold' has a wrong offset!");
static_assert(offsetof(FGeometryScriptPolygroupSimplifyOptions, bAutoCompact) == 0x000004, "Member 'FGeometryScriptPolygroupSimplifyOptions::bAutoCompact' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptSimplifyMeshOptions
// 0x0007 (0x0007 - 0x0000)
struct FGeometryScriptSimplifyMeshOptions final
{
public:
	EGeometryScriptRemoveMeshSimplificationType   Method;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowSeamCollapse;                                // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowSeamSmoothing;                               // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowSeamSplits;                                  // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreserveVertexPositions;                          // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRetainQuadricMemory;                              // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoCompact;                                      // 0x0006(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptSimplifyMeshOptions) == 0x000001, "Wrong alignment on FGeometryScriptSimplifyMeshOptions");
static_assert(sizeof(FGeometryScriptSimplifyMeshOptions) == 0x000007, "Wrong size on FGeometryScriptSimplifyMeshOptions");
static_assert(offsetof(FGeometryScriptSimplifyMeshOptions, Method) == 0x000000, "Member 'FGeometryScriptSimplifyMeshOptions::Method' has a wrong offset!");
static_assert(offsetof(FGeometryScriptSimplifyMeshOptions, bAllowSeamCollapse) == 0x000001, "Member 'FGeometryScriptSimplifyMeshOptions::bAllowSeamCollapse' has a wrong offset!");
static_assert(offsetof(FGeometryScriptSimplifyMeshOptions, bAllowSeamSmoothing) == 0x000002, "Member 'FGeometryScriptSimplifyMeshOptions::bAllowSeamSmoothing' has a wrong offset!");
static_assert(offsetof(FGeometryScriptSimplifyMeshOptions, bAllowSeamSplits) == 0x000003, "Member 'FGeometryScriptSimplifyMeshOptions::bAllowSeamSplits' has a wrong offset!");
static_assert(offsetof(FGeometryScriptSimplifyMeshOptions, bPreserveVertexPositions) == 0x000004, "Member 'FGeometryScriptSimplifyMeshOptions::bPreserveVertexPositions' has a wrong offset!");
static_assert(offsetof(FGeometryScriptSimplifyMeshOptions, bRetainQuadricMemory) == 0x000005, "Member 'FGeometryScriptSimplifyMeshOptions::bRetainQuadricMemory' has a wrong offset!");
static_assert(offsetof(FGeometryScriptSimplifyMeshOptions, bAutoCompact) == 0x000006, "Member 'FGeometryScriptSimplifyMeshOptions::bAutoCompact' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptSpatialQueryOptions
// 0x000C (0x000C - 0x0000)
struct FGeometryScriptSpatialQueryOptions final
{
public:
	float                                         MaxDistance;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowUnsafeModifiedQueries;                       // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25DD[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WindingIsoThreshold;                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptSpatialQueryOptions) == 0x000004, "Wrong alignment on FGeometryScriptSpatialQueryOptions");
static_assert(sizeof(FGeometryScriptSpatialQueryOptions) == 0x00000C, "Wrong size on FGeometryScriptSpatialQueryOptions");
static_assert(offsetof(FGeometryScriptSpatialQueryOptions, MaxDistance) == 0x000000, "Member 'FGeometryScriptSpatialQueryOptions::MaxDistance' has a wrong offset!");
static_assert(offsetof(FGeometryScriptSpatialQueryOptions, bAllowUnsafeModifiedQueries) == 0x000004, "Member 'FGeometryScriptSpatialQueryOptions::bAllowUnsafeModifiedQueries' has a wrong offset!");
static_assert(offsetof(FGeometryScriptSpatialQueryOptions, WindingIsoThreshold) == 0x000008, "Member 'FGeometryScriptSpatialQueryOptions::WindingIsoThreshold' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptRayHitResult
// 0x0040 (0x0040 - 0x0000)
struct FGeometryScriptRayHitResult final
{
public:
	bool                                          bHit;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25DE[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RayParameter;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HitTriangleID;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25DF[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitPosition;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitBaryCoords;                                     // 0x0028(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptRayHitResult) == 0x000008, "Wrong alignment on FGeometryScriptRayHitResult");
static_assert(sizeof(FGeometryScriptRayHitResult) == 0x000040, "Wrong size on FGeometryScriptRayHitResult");
static_assert(offsetof(FGeometryScriptRayHitResult, bHit) == 0x000000, "Member 'FGeometryScriptRayHitResult::bHit' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRayHitResult, RayParameter) == 0x000004, "Member 'FGeometryScriptRayHitResult::RayParameter' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRayHitResult, HitTriangleID) == 0x000008, "Member 'FGeometryScriptRayHitResult::HitTriangleID' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRayHitResult, HitPosition) == 0x000010, "Member 'FGeometryScriptRayHitResult::HitPosition' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRayHitResult, HitBaryCoords) == 0x000028, "Member 'FGeometryScriptRayHitResult::HitBaryCoords' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptPNTessellateOptions
// 0x0001 (0x0001 - 0x0000)
struct FGeometryScriptPNTessellateOptions final
{
public:
	bool                                          bRecomputeNormals;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptPNTessellateOptions) == 0x000001, "Wrong alignment on FGeometryScriptPNTessellateOptions");
static_assert(sizeof(FGeometryScriptPNTessellateOptions) == 0x000001, "Wrong size on FGeometryScriptPNTessellateOptions");
static_assert(offsetof(FGeometryScriptPNTessellateOptions, bRecomputeNormals) == 0x000000, "Member 'FGeometryScriptPNTessellateOptions::bRecomputeNormals' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptSelectiveTessellateOptions
// 0x0002 (0x0002 - 0x0000)
struct FGeometryScriptSelectiveTessellateOptions final
{
public:
	bool                                          bEnableMultithreading;                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptEmptySelectionBehavior         EmptyBehavior;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptSelectiveTessellateOptions) == 0x000001, "Wrong alignment on FGeometryScriptSelectiveTessellateOptions");
static_assert(sizeof(FGeometryScriptSelectiveTessellateOptions) == 0x000002, "Wrong size on FGeometryScriptSelectiveTessellateOptions");
static_assert(offsetof(FGeometryScriptSelectiveTessellateOptions, bEnableMultithreading) == 0x000000, "Member 'FGeometryScriptSelectiveTessellateOptions::bEnableMultithreading' has a wrong offset!");
static_assert(offsetof(FGeometryScriptSelectiveTessellateOptions, EmptyBehavior) == 0x000001, "Member 'FGeometryScriptSelectiveTessellateOptions::EmptyBehavior' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptRepackUVsOptions
// 0x0008 (0x0008 - 0x0000)
struct FGeometryScriptRepackUVsOptions final
{
public:
	int32                                         TargetImageWidth;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOptimizeIslandRotation;                           // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25E0[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeometryScriptRepackUVsOptions) == 0x000004, "Wrong alignment on FGeometryScriptRepackUVsOptions");
static_assert(sizeof(FGeometryScriptRepackUVsOptions) == 0x000008, "Wrong size on FGeometryScriptRepackUVsOptions");
static_assert(offsetof(FGeometryScriptRepackUVsOptions, TargetImageWidth) == 0x000000, "Member 'FGeometryScriptRepackUVsOptions::TargetImageWidth' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRepackUVsOptions, bOptimizeIslandRotation) == 0x000004, "Member 'FGeometryScriptRepackUVsOptions::bOptimizeIslandRotation' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptExpMapUVOptions
// 0x0008 (0x0008 - 0x0000)
struct FGeometryScriptExpMapUVOptions final
{
public:
	int32                                         NormalSmoothingRounds;                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalSmoothingAlpha;                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptExpMapUVOptions) == 0x000004, "Wrong alignment on FGeometryScriptExpMapUVOptions");
static_assert(sizeof(FGeometryScriptExpMapUVOptions) == 0x000008, "Wrong size on FGeometryScriptExpMapUVOptions");
static_assert(offsetof(FGeometryScriptExpMapUVOptions, NormalSmoothingRounds) == 0x000000, "Member 'FGeometryScriptExpMapUVOptions::NormalSmoothingRounds' has a wrong offset!");
static_assert(offsetof(FGeometryScriptExpMapUVOptions, NormalSmoothingAlpha) == 0x000004, "Member 'FGeometryScriptExpMapUVOptions::NormalSmoothingAlpha' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptSpectralConformalUVOptions
// 0x0001 (0x0001 - 0x0000)
struct FGeometryScriptSpectralConformalUVOptions final
{
public:
	bool                                          bPreserveIrregularity;                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptSpectralConformalUVOptions) == 0x000001, "Wrong alignment on FGeometryScriptSpectralConformalUVOptions");
static_assert(sizeof(FGeometryScriptSpectralConformalUVOptions) == 0x000001, "Wrong size on FGeometryScriptSpectralConformalUVOptions");
static_assert(offsetof(FGeometryScriptSpectralConformalUVOptions, bPreserveIrregularity) == 0x000000, "Member 'FGeometryScriptSpectralConformalUVOptions::bPreserveIrregularity' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptRecomputeUVsOptions
// 0x001C (0x001C - 0x0000)
struct FGeometryScriptRecomputeUVsOptions final
{
public:
	EGeometryScriptUVFlattenMethod                Method;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptUVIslandSource                 IslandSource;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25E1[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptExpMapUVOptions         ExpMapOptions;                                     // 0x0004(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FGeometryScriptSpectralConformalUVOptions SpectralConformalOptions;                          // 0x000C(0x0001)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_25E2[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptGroupLayer              GroupLayer;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAutoAlignIslandsWithAxes;                         // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25E3[0x3];                                     // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeometryScriptRecomputeUVsOptions) == 0x000004, "Wrong alignment on FGeometryScriptRecomputeUVsOptions");
static_assert(sizeof(FGeometryScriptRecomputeUVsOptions) == 0x00001C, "Wrong size on FGeometryScriptRecomputeUVsOptions");
static_assert(offsetof(FGeometryScriptRecomputeUVsOptions, Method) == 0x000000, "Member 'FGeometryScriptRecomputeUVsOptions::Method' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRecomputeUVsOptions, IslandSource) == 0x000001, "Member 'FGeometryScriptRecomputeUVsOptions::IslandSource' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRecomputeUVsOptions, ExpMapOptions) == 0x000004, "Member 'FGeometryScriptRecomputeUVsOptions::ExpMapOptions' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRecomputeUVsOptions, SpectralConformalOptions) == 0x00000C, "Member 'FGeometryScriptRecomputeUVsOptions::SpectralConformalOptions' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRecomputeUVsOptions, GroupLayer) == 0x000010, "Member 'FGeometryScriptRecomputeUVsOptions::GroupLayer' has a wrong offset!");
static_assert(offsetof(FGeometryScriptRecomputeUVsOptions, bAutoAlignIslandsWithAxes) == 0x000018, "Member 'FGeometryScriptRecomputeUVsOptions::bAutoAlignIslandsWithAxes' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptPatchBuilderOptions
// 0x0034 (0x0034 - 0x0000)
struct FGeometryScriptPatchBuilderOptions final
{
public:
	int32                                         InitialPatchCount;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinPatchSize;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PatchCurvatureAlignmentWeight;                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PatchMergingMetricThresh;                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PatchMergingAngleThresh;                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptExpMapUVOptions         ExpMapOptions;                                     // 0x0014(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bRespectInputGroups;                               // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25E4[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptGroupLayer              GroupLayer;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAutoPack;                                         // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25E5[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptRepackUVsOptions        PackingOptions;                                    // 0x002C(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptPatchBuilderOptions) == 0x000004, "Wrong alignment on FGeometryScriptPatchBuilderOptions");
static_assert(sizeof(FGeometryScriptPatchBuilderOptions) == 0x000034, "Wrong size on FGeometryScriptPatchBuilderOptions");
static_assert(offsetof(FGeometryScriptPatchBuilderOptions, InitialPatchCount) == 0x000000, "Member 'FGeometryScriptPatchBuilderOptions::InitialPatchCount' has a wrong offset!");
static_assert(offsetof(FGeometryScriptPatchBuilderOptions, MinPatchSize) == 0x000004, "Member 'FGeometryScriptPatchBuilderOptions::MinPatchSize' has a wrong offset!");
static_assert(offsetof(FGeometryScriptPatchBuilderOptions, PatchCurvatureAlignmentWeight) == 0x000008, "Member 'FGeometryScriptPatchBuilderOptions::PatchCurvatureAlignmentWeight' has a wrong offset!");
static_assert(offsetof(FGeometryScriptPatchBuilderOptions, PatchMergingMetricThresh) == 0x00000C, "Member 'FGeometryScriptPatchBuilderOptions::PatchMergingMetricThresh' has a wrong offset!");
static_assert(offsetof(FGeometryScriptPatchBuilderOptions, PatchMergingAngleThresh) == 0x000010, "Member 'FGeometryScriptPatchBuilderOptions::PatchMergingAngleThresh' has a wrong offset!");
static_assert(offsetof(FGeometryScriptPatchBuilderOptions, ExpMapOptions) == 0x000014, "Member 'FGeometryScriptPatchBuilderOptions::ExpMapOptions' has a wrong offset!");
static_assert(offsetof(FGeometryScriptPatchBuilderOptions, bRespectInputGroups) == 0x00001C, "Member 'FGeometryScriptPatchBuilderOptions::bRespectInputGroups' has a wrong offset!");
static_assert(offsetof(FGeometryScriptPatchBuilderOptions, GroupLayer) == 0x000020, "Member 'FGeometryScriptPatchBuilderOptions::GroupLayer' has a wrong offset!");
static_assert(offsetof(FGeometryScriptPatchBuilderOptions, bAutoPack) == 0x000028, "Member 'FGeometryScriptPatchBuilderOptions::bAutoPack' has a wrong offset!");
static_assert(offsetof(FGeometryScriptPatchBuilderOptions, PackingOptions) == 0x00002C, "Member 'FGeometryScriptPatchBuilderOptions::PackingOptions' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptXAtlasOptions
// 0x0004 (0x0004 - 0x0000)
struct FGeometryScriptXAtlasOptions final
{
public:
	int32                                         MaxIterations;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptXAtlasOptions) == 0x000004, "Wrong alignment on FGeometryScriptXAtlasOptions");
static_assert(sizeof(FGeometryScriptXAtlasOptions) == 0x000004, "Wrong size on FGeometryScriptXAtlasOptions");
static_assert(offsetof(FGeometryScriptXAtlasOptions, MaxIterations) == 0x000000, "Member 'FGeometryScriptXAtlasOptions::MaxIterations' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptBlurMeshVertexColorsOptions
// 0x0004 (0x0004 - 0x0000)
struct FGeometryScriptBlurMeshVertexColorsOptions final
{
public:
	bool                                          Red;                                               // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Green;                                             // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Blue;                                              // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Alpha;                                             // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptBlurMeshVertexColorsOptions) == 0x000001, "Wrong alignment on FGeometryScriptBlurMeshVertexColorsOptions");
static_assert(sizeof(FGeometryScriptBlurMeshVertexColorsOptions) == 0x000004, "Wrong size on FGeometryScriptBlurMeshVertexColorsOptions");
static_assert(offsetof(FGeometryScriptBlurMeshVertexColorsOptions, Red) == 0x000000, "Member 'FGeometryScriptBlurMeshVertexColorsOptions::Red' has a wrong offset!");
static_assert(offsetof(FGeometryScriptBlurMeshVertexColorsOptions, Green) == 0x000001, "Member 'FGeometryScriptBlurMeshVertexColorsOptions::Green' has a wrong offset!");
static_assert(offsetof(FGeometryScriptBlurMeshVertexColorsOptions, Blue) == 0x000002, "Member 'FGeometryScriptBlurMeshVertexColorsOptions::Blue' has a wrong offset!");
static_assert(offsetof(FGeometryScriptBlurMeshVertexColorsOptions, Alpha) == 0x000003, "Member 'FGeometryScriptBlurMeshVertexColorsOptions::Alpha' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScript3DGridParameters
// 0x000C (0x000C - 0x0000)
struct FGeometryScript3DGridParameters final
{
public:
	EGeometryScriptGridSizingMethod               SizeMethod;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25E6[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GridCellSize;                                      // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GridResolution;                                    // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScript3DGridParameters) == 0x000004, "Wrong alignment on FGeometryScript3DGridParameters");
static_assert(sizeof(FGeometryScript3DGridParameters) == 0x00000C, "Wrong size on FGeometryScript3DGridParameters");
static_assert(offsetof(FGeometryScript3DGridParameters, SizeMethod) == 0x000000, "Member 'FGeometryScript3DGridParameters::SizeMethod' has a wrong offset!");
static_assert(offsetof(FGeometryScript3DGridParameters, GridCellSize) == 0x000004, "Member 'FGeometryScript3DGridParameters::GridCellSize' has a wrong offset!");
static_assert(offsetof(FGeometryScript3DGridParameters, GridResolution) == 0x000008, "Member 'FGeometryScript3DGridParameters::GridResolution' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptSolidifyOptions
// 0x0028 (0x0028 - 0x0000)
struct FGeometryScriptSolidifyOptions final
{
public:
	struct FGeometryScript3DGridParameters        GridParameters;                                    // 0x0000(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         WindingThreshold;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSolidAtBoundaries;                                // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25E7[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ExtendBounds;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SurfaceSearchSteps;                                // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bThickenShells;                                    // 0x001C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25E8[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ShellThickness;                                    // 0x0020(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptSolidifyOptions) == 0x000008, "Wrong alignment on FGeometryScriptSolidifyOptions");
static_assert(sizeof(FGeometryScriptSolidifyOptions) == 0x000028, "Wrong size on FGeometryScriptSolidifyOptions");
static_assert(offsetof(FGeometryScriptSolidifyOptions, GridParameters) == 0x000000, "Member 'FGeometryScriptSolidifyOptions::GridParameters' has a wrong offset!");
static_assert(offsetof(FGeometryScriptSolidifyOptions, WindingThreshold) == 0x00000C, "Member 'FGeometryScriptSolidifyOptions::WindingThreshold' has a wrong offset!");
static_assert(offsetof(FGeometryScriptSolidifyOptions, bSolidAtBoundaries) == 0x000010, "Member 'FGeometryScriptSolidifyOptions::bSolidAtBoundaries' has a wrong offset!");
static_assert(offsetof(FGeometryScriptSolidifyOptions, ExtendBounds) == 0x000014, "Member 'FGeometryScriptSolidifyOptions::ExtendBounds' has a wrong offset!");
static_assert(offsetof(FGeometryScriptSolidifyOptions, SurfaceSearchSteps) == 0x000018, "Member 'FGeometryScriptSolidifyOptions::SurfaceSearchSteps' has a wrong offset!");
static_assert(offsetof(FGeometryScriptSolidifyOptions, bThickenShells) == 0x00001C, "Member 'FGeometryScriptSolidifyOptions::bThickenShells' has a wrong offset!");
static_assert(offsetof(FGeometryScriptSolidifyOptions, ShellThickness) == 0x000020, "Member 'FGeometryScriptSolidifyOptions::ShellThickness' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptMorphologyOptions
// 0x0024 (0x0024 - 0x0000)
struct FGeometryScriptMorphologyOptions final
{
public:
	struct FGeometryScript3DGridParameters        SDFGridParameters;                                 // 0x0000(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseSeparateMeshGrid;                              // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25E9[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScript3DGridParameters        MeshGridParameters;                                // 0x0010(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EGeometryScriptMorphologicalOpType            Operation;                                         // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25EA[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Distance;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptMorphologyOptions) == 0x000004, "Wrong alignment on FGeometryScriptMorphologyOptions");
static_assert(sizeof(FGeometryScriptMorphologyOptions) == 0x000024, "Wrong size on FGeometryScriptMorphologyOptions");
static_assert(offsetof(FGeometryScriptMorphologyOptions, SDFGridParameters) == 0x000000, "Member 'FGeometryScriptMorphologyOptions::SDFGridParameters' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMorphologyOptions, bUseSeparateMeshGrid) == 0x00000C, "Member 'FGeometryScriptMorphologyOptions::bUseSeparateMeshGrid' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMorphologyOptions, MeshGridParameters) == 0x000010, "Member 'FGeometryScriptMorphologyOptions::MeshGridParameters' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMorphologyOptions, Operation) == 0x00001C, "Member 'FGeometryScriptMorphologyOptions::Operation' has a wrong offset!");
static_assert(offsetof(FGeometryScriptMorphologyOptions, Distance) == 0x000020, "Member 'FGeometryScriptMorphologyOptions::Distance' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptPolygonOffsetOptions
// 0x0028 (0x0028 - 0x0000)
struct FGeometryScriptPolygonOffsetOptions final
{
public:
	EGeometryScriptPolyOffsetJoinType             JoinType;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25EB[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MiterLimit;                                        // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOffsetBothSides;                                  // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25EC[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        StepsPerRadianScale;                               // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MaximumStepsPerRadian;                             // 0x0020(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptPolygonOffsetOptions) == 0x000008, "Wrong alignment on FGeometryScriptPolygonOffsetOptions");
static_assert(sizeof(FGeometryScriptPolygonOffsetOptions) == 0x000028, "Wrong size on FGeometryScriptPolygonOffsetOptions");
static_assert(offsetof(FGeometryScriptPolygonOffsetOptions, JoinType) == 0x000000, "Member 'FGeometryScriptPolygonOffsetOptions::JoinType' has a wrong offset!");
static_assert(offsetof(FGeometryScriptPolygonOffsetOptions, MiterLimit) == 0x000008, "Member 'FGeometryScriptPolygonOffsetOptions::MiterLimit' has a wrong offset!");
static_assert(offsetof(FGeometryScriptPolygonOffsetOptions, bOffsetBothSides) == 0x000010, "Member 'FGeometryScriptPolygonOffsetOptions::bOffsetBothSides' has a wrong offset!");
static_assert(offsetof(FGeometryScriptPolygonOffsetOptions, StepsPerRadianScale) == 0x000018, "Member 'FGeometryScriptPolygonOffsetOptions::StepsPerRadianScale' has a wrong offset!");
static_assert(offsetof(FGeometryScriptPolygonOffsetOptions, MaximumStepsPerRadian) == 0x000020, "Member 'FGeometryScriptPolygonOffsetOptions::MaximumStepsPerRadian' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptOpenPathOffsetOptions
// 0x0028 (0x0028 - 0x0000)
struct FGeometryScriptOpenPathOffsetOptions final
{
public:
	EGeometryScriptPolyOffsetJoinType             JoinType;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25ED[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MiterLimit;                                        // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptPathOffsetEndType              EndType;                                           // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25EE[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        StepsPerRadianScale;                               // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MaximumStepsPerRadian;                             // 0x0020(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptOpenPathOffsetOptions) == 0x000008, "Wrong alignment on FGeometryScriptOpenPathOffsetOptions");
static_assert(sizeof(FGeometryScriptOpenPathOffsetOptions) == 0x000028, "Wrong size on FGeometryScriptOpenPathOffsetOptions");
static_assert(offsetof(FGeometryScriptOpenPathOffsetOptions, JoinType) == 0x000000, "Member 'FGeometryScriptOpenPathOffsetOptions::JoinType' has a wrong offset!");
static_assert(offsetof(FGeometryScriptOpenPathOffsetOptions, MiterLimit) == 0x000008, "Member 'FGeometryScriptOpenPathOffsetOptions::MiterLimit' has a wrong offset!");
static_assert(offsetof(FGeometryScriptOpenPathOffsetOptions, EndType) == 0x000010, "Member 'FGeometryScriptOpenPathOffsetOptions::EndType' has a wrong offset!");
static_assert(offsetof(FGeometryScriptOpenPathOffsetOptions, StepsPerRadianScale) == 0x000018, "Member 'FGeometryScriptOpenPathOffsetOptions::StepsPerRadianScale' has a wrong offset!");
static_assert(offsetof(FGeometryScriptOpenPathOffsetOptions, MaximumStepsPerRadian) == 0x000020, "Member 'FGeometryScriptOpenPathOffsetOptions::MaximumStepsPerRadian' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptSplineSamplingOptions
// 0x000C (0x000C - 0x0000)
struct FGeometryScriptSplineSamplingOptions final
{
public:
	int32                                         NumSamples;                                        // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ErrorTolerance;                                    // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptSampleSpacing                  SampleSpacing;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESplineCoordinateSpace                        CoordinateSpace;                                   // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25EF[0x2];                                     // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeometryScriptSplineSamplingOptions) == 0x000004, "Wrong alignment on FGeometryScriptSplineSamplingOptions");
static_assert(sizeof(FGeometryScriptSplineSamplingOptions) == 0x00000C, "Wrong size on FGeometryScriptSplineSamplingOptions");
static_assert(offsetof(FGeometryScriptSplineSamplingOptions, NumSamples) == 0x000000, "Member 'FGeometryScriptSplineSamplingOptions::NumSamples' has a wrong offset!");
static_assert(offsetof(FGeometryScriptSplineSamplingOptions, ErrorTolerance) == 0x000004, "Member 'FGeometryScriptSplineSamplingOptions::ErrorTolerance' has a wrong offset!");
static_assert(offsetof(FGeometryScriptSplineSamplingOptions, SampleSpacing) == 0x000008, "Member 'FGeometryScriptSplineSamplingOptions::SampleSpacing' has a wrong offset!");
static_assert(offsetof(FGeometryScriptSplineSamplingOptions, CoordinateSpace) == 0x000009, "Member 'FGeometryScriptSplineSamplingOptions::CoordinateSpace' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptCopyMeshFromComponentOptions
// 0x000C (0x000C - 0x0000)
struct FGeometryScriptCopyMeshFromComponentOptions final
{
public:
	bool                                          bWantNormals;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWantTangents;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25F0[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptMeshReadLOD             RequestedLOD;                                      // 0x0004(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptCopyMeshFromComponentOptions) == 0x000004, "Wrong alignment on FGeometryScriptCopyMeshFromComponentOptions");
static_assert(sizeof(FGeometryScriptCopyMeshFromComponentOptions) == 0x00000C, "Wrong size on FGeometryScriptCopyMeshFromComponentOptions");
static_assert(offsetof(FGeometryScriptCopyMeshFromComponentOptions, bWantNormals) == 0x000000, "Member 'FGeometryScriptCopyMeshFromComponentOptions::bWantNormals' has a wrong offset!");
static_assert(offsetof(FGeometryScriptCopyMeshFromComponentOptions, bWantTangents) == 0x000001, "Member 'FGeometryScriptCopyMeshFromComponentOptions::bWantTangents' has a wrong offset!");
static_assert(offsetof(FGeometryScriptCopyMeshFromComponentOptions, RequestedLOD) == 0x000004, "Member 'FGeometryScriptCopyMeshFromComponentOptions::RequestedLOD' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptSampleTextureOptions
// 0x0028 (0x0028 - 0x0000)
struct FGeometryScriptSampleTextureOptions final
{
public:
	EGeometryScriptPixelSamplingMethod            SamplingMethod;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWrap;                                             // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25F1[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              UVScale;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              UVOffset;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryScriptSampleTextureOptions) == 0x000008, "Wrong alignment on FGeometryScriptSampleTextureOptions");
static_assert(sizeof(FGeometryScriptSampleTextureOptions) == 0x000028, "Wrong size on FGeometryScriptSampleTextureOptions");
static_assert(offsetof(FGeometryScriptSampleTextureOptions, SamplingMethod) == 0x000000, "Member 'FGeometryScriptSampleTextureOptions::SamplingMethod' has a wrong offset!");
static_assert(offsetof(FGeometryScriptSampleTextureOptions, bWrap) == 0x000001, "Member 'FGeometryScriptSampleTextureOptions::bWrap' has a wrong offset!");
static_assert(offsetof(FGeometryScriptSampleTextureOptions, UVScale) == 0x000008, "Member 'FGeometryScriptSampleTextureOptions::UVScale' has a wrong offset!");
static_assert(offsetof(FGeometryScriptSampleTextureOptions, UVOffset) == 0x000018, "Member 'FGeometryScriptSampleTextureOptions::UVOffset' has a wrong offset!");

}

