#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_EventManager

#include "Basic.hpp"

#include "EventTime_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "EventNames_structs.hpp"
#include "S_EventInfo_structs.hpp"
#include "S_Event_structs.hpp"
#include "PropWitchHuntModule_classes.hpp"
#include "LowEntryJson_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_EventManager.B_EventManager_C
// 0x0190 (0x01C0 - 0x0030)
class UB_EventManager_C final : public UBaseManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0030(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	EventNames                                    CurrentEventName;                                  // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_565B[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULowEntryJsonObject*                    JsonRootObject;                                    // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ULowEntryJsonObject*                    JsonEventObject;                                   // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ULowEntryJsonObject*                    JsonEventInfoObject;                               // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              StartTime;                                         // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              EndTime;                                           // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<EventNames, class FString>               EventStringsJSON;                                  // 0x0068(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FString                                 EventDataString;                                   // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          LoadingEventDone;                                  // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_565C[0x7];                                     // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EventNames, struct FS_EventInfo>         EventInfos;                                        // 0x00D0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<EventNames, struct FS_Event>             CurrentEvents;                                     // 0x0120(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FString, class FString>            EmptyParams;                                       // 0x0170(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void EventToString(const EventNames& Event, class FString* String);
	void ExecuteUbergraph_B_EventManager(int32 EntryPoint);
	struct FTimespan GetEventTime(EventTime* EventTimeType);
	struct FDateTime GetTime(class ULowEntryJsonObject* JsonObject);
	void Initialize(class UGameInstance* InGameInstance);
	void LogRetrieveWarning(const class FString& Key);
	void OnFailure_8A98FB154B4FC2E1ACB26396C28D4BA8(const class FString& DownloadedString, int32 QueryID);
	void OnSuccess_8A98FB154B4FC2E1ACB26396C28D4BA8(const class FString& DownloadedString, int32 QueryID);
	void ParseAndAddEvents(class ULowEntryJsonObject* JsonEvent, bool* Success);
	void StringToEvent(const class FString& String, EventNames* Event);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_EventManager_C">();
	}
	static class UB_EventManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UB_EventManager_C>();
	}
};
static_assert(alignof(UB_EventManager_C) == 0x000008, "Wrong alignment on UB_EventManager_C");
static_assert(sizeof(UB_EventManager_C) == 0x0001C0, "Wrong size on UB_EventManager_C");
static_assert(offsetof(UB_EventManager_C, UberGraphFrame) == 0x000030, "Member 'UB_EventManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UB_EventManager_C, CurrentEventName) == 0x000038, "Member 'UB_EventManager_C::CurrentEventName' has a wrong offset!");
static_assert(offsetof(UB_EventManager_C, JsonRootObject) == 0x000040, "Member 'UB_EventManager_C::JsonRootObject' has a wrong offset!");
static_assert(offsetof(UB_EventManager_C, JsonEventObject) == 0x000048, "Member 'UB_EventManager_C::JsonEventObject' has a wrong offset!");
static_assert(offsetof(UB_EventManager_C, JsonEventInfoObject) == 0x000050, "Member 'UB_EventManager_C::JsonEventInfoObject' has a wrong offset!");
static_assert(offsetof(UB_EventManager_C, StartTime) == 0x000058, "Member 'UB_EventManager_C::StartTime' has a wrong offset!");
static_assert(offsetof(UB_EventManager_C, EndTime) == 0x000060, "Member 'UB_EventManager_C::EndTime' has a wrong offset!");
static_assert(offsetof(UB_EventManager_C, EventStringsJSON) == 0x000068, "Member 'UB_EventManager_C::EventStringsJSON' has a wrong offset!");
static_assert(offsetof(UB_EventManager_C, EventDataString) == 0x0000B8, "Member 'UB_EventManager_C::EventDataString' has a wrong offset!");
static_assert(offsetof(UB_EventManager_C, LoadingEventDone) == 0x0000C8, "Member 'UB_EventManager_C::LoadingEventDone' has a wrong offset!");
static_assert(offsetof(UB_EventManager_C, EventInfos) == 0x0000D0, "Member 'UB_EventManager_C::EventInfos' has a wrong offset!");
static_assert(offsetof(UB_EventManager_C, CurrentEvents) == 0x000120, "Member 'UB_EventManager_C::CurrentEvents' has a wrong offset!");
static_assert(offsetof(UB_EventManager_C, EmptyParams) == 0x000170, "Member 'UB_EventManager_C::EmptyParams' has a wrong offset!");

}

