#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_DamageHandler

#include "Basic.hpp"

#include "B_DamageHandler_classes.hpp"
#include "B_DamageHandler_parameters.hpp"


namespace SDK
{

// Function B_DamageHandler.B_DamageHandler_C.ShouldHandleDamage
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ShouldHandle                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_DamageHandler_C::ShouldHandleDamage(bool* ShouldHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_DamageHandler_C", "ShouldHandleDamage");

	Params::B_DamageHandler_C_ShouldHandleDamage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ShouldHandle != nullptr)
		*ShouldHandle = Parms.ShouldHandle;
}


// Function B_DamageHandler.B_DamageHandler_C.IsDead
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Param_IsDead                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_DamageHandler_C::IsDead(bool* Param_IsDead)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_DamageHandler_C", "IsDead");

	Params::B_DamageHandler_C_IsDead Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_IsDead != nullptr)
		*Param_IsDead = Parms.Param_IsDead;
}


// Function B_DamageHandler.B_DamageHandler_C.GetOwnerPlayerState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AB_PlayerState_C*                 PlayerState                                            (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UB_DamageHandler_C::GetOwnerPlayerState(class AB_PlayerState_C** PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_DamageHandler_C", "GetOwnerPlayerState");

	Params::B_DamageHandler_C_GetOwnerPlayerState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PlayerState != nullptr)
		*PlayerState = Parms.PlayerState;
}


// Function B_DamageHandler.B_DamageHandler_C.SetPlayerHealthPercental
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Percentage                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_DamageHandler_C::SetPlayerHealthPercental(double Percentage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_DamageHandler_C", "SetPlayerHealthPercental");

	Params::B_DamageHandler_C_SetPlayerHealthPercental Parms{};

	Parms.Percentage = Percentage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_DamageHandler.B_DamageHandler_C.GetMaxHealth
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnMaxHealth                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_DamageHandler_C::GetMaxHealth(double* ReturnMaxHealth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_DamageHandler_C", "GetMaxHealth");

	Params::B_DamageHandler_C_GetMaxHealth Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ReturnMaxHealth != nullptr)
		*ReturnMaxHealth = Parms.ReturnMaxHealth;
}


// Function B_DamageHandler.B_DamageHandler_C.SetMaxHealth
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  NewMaxHealth                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_DamageHandler_C::SetMaxHealth(double NewMaxHealth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_DamageHandler_C", "SetMaxHealth");

	Params::B_DamageHandler_C_SetMaxHealth Parms{};

	Parms.NewMaxHealth = NewMaxHealth;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_DamageHandler.B_DamageHandler_C.GetHealth
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnHealth                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_DamageHandler_C::GetHealth(double* ReturnHealth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_DamageHandler_C", "GetHealth");

	Params::B_DamageHandler_C_GetHealth Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ReturnHealth != nullptr)
		*ReturnHealth = Parms.ReturnHealth;
}


// Function B_DamageHandler.B_DamageHandler_C.SetHealth
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  NewHealth                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_DamageHandler_C::SetHealth(double NewHealth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_DamageHandler_C", "SetHealth");

	Params::B_DamageHandler_C_SetHealth Parms{};

	Parms.NewHealth = NewHealth;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_DamageHandler.B_DamageHandler_C.UpdatePlayerStateHealth
// (Public, BlueprintCallable, BlueprintEvent)

void UB_DamageHandler_C::UpdatePlayerStateHealth()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_DamageHandler_C", "UpdatePlayerStateHealth");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_DamageHandler.B_DamageHandler_C.AddAssisted
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      Causer                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UB_DamageHandler_C::AddAssisted(class AController* Causer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_DamageHandler_C", "AddAssisted");

	Params::B_DamageHandler_C_AddAssisted Parms{};

	Parms.Causer = Causer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_DamageHandler.B_DamageHandler_C.Kill
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      Killer                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    SpawnAtPlayerStart                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_DamageHandler_C::Kill(class AController* Killer, bool SpawnAtPlayerStart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_DamageHandler_C", "Kill");

	Params::B_DamageHandler_C_Kill Parms{};

	Parms.Killer = Killer;
	Parms.SpawnAtPlayerStart = SpawnAtPlayerStart;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_DamageHandler.B_DamageHandler_C.RemoveTeamAndSetDead
// (Public, BlueprintCallable, BlueprintEvent)

void UB_DamageHandler_C::RemoveTeamAndSetDead()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_DamageHandler_C", "RemoveTeamAndSetDead");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_DamageHandler.B_DamageHandler_C.ProcessPointDamage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitDirection                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AController*                      Causer                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UB_DamageHandler_C::ProcessPointDamage(double Damage, const struct FVector& HitLocation, const struct FVector& HitDirection, class AController* Causer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_DamageHandler_C", "ProcessPointDamage");

	Params::B_DamageHandler_C_ProcessPointDamage Parms{};

	Parms.Damage = Damage;
	Parms.HitLocation = std::move(HitLocation);
	Parms.HitDirection = std::move(HitDirection);
	Parms.Causer = Causer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_DamageHandler.B_DamageHandler_C.ProcessAnyDamage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AController*                      Causer                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Silent                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_DamageHandler_C::ProcessAnyDamage(double Damage, class AController* Causer, bool Silent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_DamageHandler_C", "ProcessAnyDamage");

	Params::B_DamageHandler_C_ProcessAnyDamage Parms{};

	Parms.Damage = Damage;
	Parms.Causer = Causer;
	Parms.Silent = Silent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_DamageHandler.B_DamageHandler_C.RecalculateRelativeHealth
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UB_DamageHandler_C*               OtherDamageHandler                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UB_DamageHandler_C::RecalculateRelativeHealth(class UB_DamageHandler_C* OtherDamageHandler)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_DamageHandler_C", "RecalculateRelativeHealth");

	Params::B_DamageHandler_C_RecalculateRelativeHealth Parms{};

	Parms.OtherDamageHandler = OtherDamageHandler;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_DamageHandler.B_DamageHandler_C.SetSpectator
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerState*                     Killer                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    SpawnAtPlayerStart                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_DamageHandler_C::SetSpectator(class APlayerState* Killer, bool SpawnAtPlayerStart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_DamageHandler_C", "SetSpectator");

	Params::B_DamageHandler_C_SetSpectator Parms{};

	Parms.Killer = Killer;
	Parms.SpawnAtPlayerStart = SpawnAtPlayerStart;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_DamageHandler.B_DamageHandler_C.ApplyDamage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_DamageHandler_C::ApplyDamage(double Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_DamageHandler_C", "ApplyDamage");

	Params::B_DamageHandler_C_ApplyDamage Parms{};

	Parms.Damage = Damage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_DamageHandler.B_DamageHandler_C.ProcessDamage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AController*                      Causer                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Silent                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Killed                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_DamageHandler_C::ProcessDamage(double Damage, class AController* Causer, bool Silent, bool* Killed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_DamageHandler_C", "ProcessDamage");

	Params::B_DamageHandler_C_ProcessDamage Parms{};

	Parms.Damage = Damage;
	Parms.Causer = Causer;
	Parms.Silent = Silent;

	UObject::ProcessEvent(Func, &Parms);

	if (Killed != nullptr)
		*Killed = Parms.Killed;
}


// Function B_DamageHandler.B_DamageHandler_C.AnyDamage
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DamagedActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UDamageType*                      DamageType                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AController*                      InstigatedBy                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UB_DamageHandler_C::AnyDamage(class AActor* DamagedActor, float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_DamageHandler_C", "AnyDamage");

	Params::B_DamageHandler_C_AnyDamage Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.Damage = Damage;
	Parms.DamageType = DamageType;
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_DamageHandler.B_DamageHandler_C.PointDamage
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DamagedActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AController*                      InstigatedBy                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              FHitComponent                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class FName                             BoneName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ShotFromDirection                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UDamageType*                      DamageType                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UB_DamageHandler_C::PointDamage(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& ShotFromDirection, const class UDamageType* DamageType, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_DamageHandler_C", "PointDamage");

	Params::B_DamageHandler_C_PointDamage Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.Damage = Damage;
	Parms.InstigatedBy = InstigatedBy;
	Parms.HitLocation = std::move(HitLocation);
	Parms.FHitComponent = FHitComponent;
	Parms.BoneName = BoneName;
	Parms.ShotFromDirection = std::move(ShotFromDirection);
	Parms.DamageType = DamageType;
	Parms.DamageCauser = DamageCauser;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_DamageHandler.B_DamageHandler_C.TakeAnyDamageMulticast
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      Causer                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UB_DamageHandler_C::TakeAnyDamageMulticast(class AController* Causer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_DamageHandler_C", "TakeAnyDamageMulticast");

	Params::B_DamageHandler_C_TakeAnyDamageMulticast Parms{};

	Parms.Causer = Causer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_DamageHandler.B_DamageHandler_C.TakePointDamageMulticast
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitDirection                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AController*                      Causer                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UB_DamageHandler_C::TakePointDamageMulticast(const struct FVector& HitLocation, const struct FVector& HitDirection, class AController* Causer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_DamageHandler_C", "TakePointDamageMulticast");

	Params::B_DamageHandler_C_TakePointDamageMulticast Parms{};

	Parms.HitLocation = std::move(HitLocation);
	Parms.HitDirection = std::move(HitDirection);
	Parms.Causer = Causer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_DamageHandler.B_DamageHandler_C.TakeDamageMulticast
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      Causer                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UB_DamageHandler_C::TakeDamageMulticast(class AController* Causer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_DamageHandler_C", "TakeDamageMulticast");

	Params::B_DamageHandler_C_TakeDamageMulticast Parms{};

	Parms.Causer = Causer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_DamageHandler.B_DamageHandler_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UB_DamageHandler_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_DamageHandler_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_DamageHandler.B_DamageHandler_C.ExecuteUbergraph_B_DamageHandler
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_DamageHandler_C::ExecuteUbergraph_B_DamageHandler(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_DamageHandler_C", "ExecuteUbergraph_B_DamageHandler");

	Params::B_DamageHandler_C_ExecuteUbergraph_B_DamageHandler Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}

}

