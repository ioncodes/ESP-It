#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BFL_ChatAndVoice

#include "Basic.hpp"

#include "AdvancedSessions_structs.hpp"
#include "ETeamID_structs.hpp"


namespace SDK::Params
{

// Function BFL_ChatAndVoice.BFL_ChatAndVoice_C.ArePlayersInSameObjectiveTeam
// 0x0040 (0x0040 - 0x0000)
struct BFL_ChatAndVoice_C_ArePlayersInSameObjectiveTeam final
{
public:
	class APlayerState*                           PlayerStateA;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                PlayerStateB;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5E24[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_ObjectivePlayerState_C*              K2Node_DynamicCast_AsB_Objective_Player_State;     // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5E25[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_ObjectivePlayerState_C*              K2Node_DynamicCast_AsB_Objective_Player_State_1;   // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BFL_ChatAndVoice_C_ArePlayersInSameObjectiveTeam) == 0x000008, "Wrong alignment on BFL_ChatAndVoice_C_ArePlayersInSameObjectiveTeam");
static_assert(sizeof(BFL_ChatAndVoice_C_ArePlayersInSameObjectiveTeam) == 0x000040, "Wrong size on BFL_ChatAndVoice_C_ArePlayersInSameObjectiveTeam");
static_assert(offsetof(BFL_ChatAndVoice_C_ArePlayersInSameObjectiveTeam, PlayerStateA) == 0x000000, "Member 'BFL_ChatAndVoice_C_ArePlayersInSameObjectiveTeam::PlayerStateA' has a wrong offset!");
static_assert(offsetof(BFL_ChatAndVoice_C_ArePlayersInSameObjectiveTeam, PlayerStateB) == 0x000008, "Member 'BFL_ChatAndVoice_C_ArePlayersInSameObjectiveTeam::PlayerStateB' has a wrong offset!");
static_assert(offsetof(BFL_ChatAndVoice_C_ArePlayersInSameObjectiveTeam, __WorldContext) == 0x000010, "Member 'BFL_ChatAndVoice_C_ArePlayersInSameObjectiveTeam::__WorldContext' has a wrong offset!");
static_assert(offsetof(BFL_ChatAndVoice_C_ArePlayersInSameObjectiveTeam, ReturnValue) == 0x000018, "Member 'BFL_ChatAndVoice_C_ArePlayersInSameObjectiveTeam::ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_ChatAndVoice_C_ArePlayersInSameObjectiveTeam, K2Node_DynamicCast_AsB_Objective_Player_State) == 0x000020, "Member 'BFL_ChatAndVoice_C_ArePlayersInSameObjectiveTeam::K2Node_DynamicCast_AsB_Objective_Player_State' has a wrong offset!");
static_assert(offsetof(BFL_ChatAndVoice_C_ArePlayersInSameObjectiveTeam, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BFL_ChatAndVoice_C_ArePlayersInSameObjectiveTeam::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BFL_ChatAndVoice_C_ArePlayersInSameObjectiveTeam, K2Node_DynamicCast_AsB_Objective_Player_State_1) == 0x000030, "Member 'BFL_ChatAndVoice_C_ArePlayersInSameObjectiveTeam::K2Node_DynamicCast_AsB_Objective_Player_State_1' has a wrong offset!");
static_assert(offsetof(BFL_ChatAndVoice_C_ArePlayersInSameObjectiveTeam, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'BFL_ChatAndVoice_C_ArePlayersInSameObjectiveTeam::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BFL_ChatAndVoice_C_ArePlayersInSameObjectiveTeam, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000039, "Member 'BFL_ChatAndVoice_C_ArePlayersInSameObjectiveTeam::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BFL_ChatAndVoice.BFL_ChatAndVoice_C.ArePlayersInSameTeam
// 0x0048 (0x0048 - 0x0000)
struct BFL_ChatAndVoice_C_ArePlayersInSameTeam final
{
public:
	class APlayerState*                           PlayerStateA;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerState*                           PlayerStateB;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5E26[0x6];                                     // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5E27[0x5];                                     // 0x002B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State_1;             // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETeamID                                       Temp_byte_Variable;                                // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x003F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETeamID                                       Temp_byte_Variable_1;                              // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default_1;                           // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BFL_ChatAndVoice_C_ArePlayersInSameTeam) == 0x000008, "Wrong alignment on BFL_ChatAndVoice_C_ArePlayersInSameTeam");
static_assert(sizeof(BFL_ChatAndVoice_C_ArePlayersInSameTeam) == 0x000048, "Wrong size on BFL_ChatAndVoice_C_ArePlayersInSameTeam");
static_assert(offsetof(BFL_ChatAndVoice_C_ArePlayersInSameTeam, PlayerStateA) == 0x000000, "Member 'BFL_ChatAndVoice_C_ArePlayersInSameTeam::PlayerStateA' has a wrong offset!");
static_assert(offsetof(BFL_ChatAndVoice_C_ArePlayersInSameTeam, PlayerStateB) == 0x000008, "Member 'BFL_ChatAndVoice_C_ArePlayersInSameTeam::PlayerStateB' has a wrong offset!");
static_assert(offsetof(BFL_ChatAndVoice_C_ArePlayersInSameTeam, __WorldContext) == 0x000010, "Member 'BFL_ChatAndVoice_C_ArePlayersInSameTeam::__WorldContext' has a wrong offset!");
static_assert(offsetof(BFL_ChatAndVoice_C_ArePlayersInSameTeam, ReturnValue) == 0x000018, "Member 'BFL_ChatAndVoice_C_ArePlayersInSameTeam::ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_ChatAndVoice_C_ArePlayersInSameTeam, Temp_bool_Variable) == 0x000019, "Member 'BFL_ChatAndVoice_C_ArePlayersInSameTeam::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BFL_ChatAndVoice_C_ArePlayersInSameTeam, K2Node_DynamicCast_AsB_Player_State) == 0x000020, "Member 'BFL_ChatAndVoice_C_ArePlayersInSameTeam::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(BFL_ChatAndVoice_C_ArePlayersInSameTeam, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BFL_ChatAndVoice_C_ArePlayersInSameTeam::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BFL_ChatAndVoice_C_ArePlayersInSameTeam, CallFunc_IsValid_ReturnValue) == 0x000029, "Member 'BFL_ChatAndVoice_C_ArePlayersInSameTeam::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_ChatAndVoice_C_ArePlayersInSameTeam, CallFunc_IsValid_ReturnValue_1) == 0x00002A, "Member 'BFL_ChatAndVoice_C_ArePlayersInSameTeam::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BFL_ChatAndVoice_C_ArePlayersInSameTeam, K2Node_DynamicCast_AsB_Player_State_1) == 0x000030, "Member 'BFL_ChatAndVoice_C_ArePlayersInSameTeam::K2Node_DynamicCast_AsB_Player_State_1' has a wrong offset!");
static_assert(offsetof(BFL_ChatAndVoice_C_ArePlayersInSameTeam, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'BFL_ChatAndVoice_C_ArePlayersInSameTeam::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BFL_ChatAndVoice_C_ArePlayersInSameTeam, CallFunc_BooleanAND_ReturnValue) == 0x000039, "Member 'BFL_ChatAndVoice_C_ArePlayersInSameTeam::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_ChatAndVoice_C_ArePlayersInSameTeam, K2Node_SwitchEnum_CmpSuccess) == 0x00003A, "Member 'BFL_ChatAndVoice_C_ArePlayersInSameTeam::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BFL_ChatAndVoice_C_ArePlayersInSameTeam, Temp_bool_Variable_1) == 0x00003B, "Member 'BFL_ChatAndVoice_C_ArePlayersInSameTeam::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BFL_ChatAndVoice_C_ArePlayersInSameTeam, Temp_bool_Variable_2) == 0x00003C, "Member 'BFL_ChatAndVoice_C_ArePlayersInSameTeam::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BFL_ChatAndVoice_C_ArePlayersInSameTeam, Temp_byte_Variable) == 0x00003D, "Member 'BFL_ChatAndVoice_C_ArePlayersInSameTeam::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BFL_ChatAndVoice_C_ArePlayersInSameTeam, Temp_bool_Variable_3) == 0x00003E, "Member 'BFL_ChatAndVoice_C_ArePlayersInSameTeam::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BFL_ChatAndVoice_C_ArePlayersInSameTeam, Temp_bool_Variable_4) == 0x00003F, "Member 'BFL_ChatAndVoice_C_ArePlayersInSameTeam::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BFL_ChatAndVoice_C_ArePlayersInSameTeam, Temp_bool_Variable_5) == 0x000040, "Member 'BFL_ChatAndVoice_C_ArePlayersInSameTeam::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(BFL_ChatAndVoice_C_ArePlayersInSameTeam, Temp_byte_Variable_1) == 0x000041, "Member 'BFL_ChatAndVoice_C_ArePlayersInSameTeam::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BFL_ChatAndVoice_C_ArePlayersInSameTeam, K2Node_Select_Default) == 0x000042, "Member 'BFL_ChatAndVoice_C_ArePlayersInSameTeam::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BFL_ChatAndVoice_C_ArePlayersInSameTeam, K2Node_Select_Default_1) == 0x000043, "Member 'BFL_ChatAndVoice_C_ArePlayersInSameTeam::K2Node_Select_Default_1' has a wrong offset!");

// Function BFL_ChatAndVoice.BFL_ChatAndVoice_C.IsPlayerBlockedWrapper
// 0x0068 (0x0068 - 0x0000)
struct BFL_ChatAndVoice_C_IsPlayerBlockedWrapper final
{
public:
	class APlayerState*                           MyPlayerState;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerState*                           OtherPlayerState;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5E28[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBPUniqueNetId                         CallFunc_GetUniqueNetIDFromPlayerState_UniqueNetId; // 0x0020(0x0020)()
	struct FBPUniqueNetId                         CallFunc_GetUniqueNetIDFromPlayerState_UniqueNetId_1; // 0x0040(0x0020)()
	bool                                          CallFunc_IsPlayerBlocked_ReturnValue;              // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BFL_ChatAndVoice_C_IsPlayerBlockedWrapper) == 0x000008, "Wrong alignment on BFL_ChatAndVoice_C_IsPlayerBlockedWrapper");
static_assert(sizeof(BFL_ChatAndVoice_C_IsPlayerBlockedWrapper) == 0x000068, "Wrong size on BFL_ChatAndVoice_C_IsPlayerBlockedWrapper");
static_assert(offsetof(BFL_ChatAndVoice_C_IsPlayerBlockedWrapper, MyPlayerState) == 0x000000, "Member 'BFL_ChatAndVoice_C_IsPlayerBlockedWrapper::MyPlayerState' has a wrong offset!");
static_assert(offsetof(BFL_ChatAndVoice_C_IsPlayerBlockedWrapper, OtherPlayerState) == 0x000008, "Member 'BFL_ChatAndVoice_C_IsPlayerBlockedWrapper::OtherPlayerState' has a wrong offset!");
static_assert(offsetof(BFL_ChatAndVoice_C_IsPlayerBlockedWrapper, __WorldContext) == 0x000010, "Member 'BFL_ChatAndVoice_C_IsPlayerBlockedWrapper::__WorldContext' has a wrong offset!");
static_assert(offsetof(BFL_ChatAndVoice_C_IsPlayerBlockedWrapper, ReturnValue) == 0x000018, "Member 'BFL_ChatAndVoice_C_IsPlayerBlockedWrapper::ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_ChatAndVoice_C_IsPlayerBlockedWrapper, CallFunc_GetUniqueNetIDFromPlayerState_UniqueNetId) == 0x000020, "Member 'BFL_ChatAndVoice_C_IsPlayerBlockedWrapper::CallFunc_GetUniqueNetIDFromPlayerState_UniqueNetId' has a wrong offset!");
static_assert(offsetof(BFL_ChatAndVoice_C_IsPlayerBlockedWrapper, CallFunc_GetUniqueNetIDFromPlayerState_UniqueNetId_1) == 0x000040, "Member 'BFL_ChatAndVoice_C_IsPlayerBlockedWrapper::CallFunc_GetUniqueNetIDFromPlayerState_UniqueNetId_1' has a wrong offset!");
static_assert(offsetof(BFL_ChatAndVoice_C_IsPlayerBlockedWrapper, CallFunc_IsPlayerBlocked_ReturnValue) == 0x000060, "Member 'BFL_ChatAndVoice_C_IsPlayerBlockedWrapper::CallFunc_IsPlayerBlocked_ReturnValue' has a wrong offset!");

// Function BFL_ChatAndVoice.BFL_ChatAndVoice_C.IsPlayerMutedManually
// 0x0030 (0x0030 - 0x0000)
struct BFL_ChatAndVoice_C_IsPlayerMutedManually final
{
public:
	class APlayerState*                           Player_State;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_SaveGameManager_C*                   SaveGameManager;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5E29[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerMuted_IsMuted;                    // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BFL_ChatAndVoice_C_IsPlayerMutedManually) == 0x000008, "Wrong alignment on BFL_ChatAndVoice_C_IsPlayerMutedManually");
static_assert(sizeof(BFL_ChatAndVoice_C_IsPlayerMutedManually) == 0x000030, "Wrong size on BFL_ChatAndVoice_C_IsPlayerMutedManually");
static_assert(offsetof(BFL_ChatAndVoice_C_IsPlayerMutedManually, Player_State) == 0x000000, "Member 'BFL_ChatAndVoice_C_IsPlayerMutedManually::Player_State' has a wrong offset!");
static_assert(offsetof(BFL_ChatAndVoice_C_IsPlayerMutedManually, SaveGameManager) == 0x000008, "Member 'BFL_ChatAndVoice_C_IsPlayerMutedManually::SaveGameManager' has a wrong offset!");
static_assert(offsetof(BFL_ChatAndVoice_C_IsPlayerMutedManually, __WorldContext) == 0x000010, "Member 'BFL_ChatAndVoice_C_IsPlayerMutedManually::__WorldContext' has a wrong offset!");
static_assert(offsetof(BFL_ChatAndVoice_C_IsPlayerMutedManually, ReturnValue) == 0x000018, "Member 'BFL_ChatAndVoice_C_IsPlayerMutedManually::ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_ChatAndVoice_C_IsPlayerMutedManually, K2Node_DynamicCast_AsB_Player_State) == 0x000020, "Member 'BFL_ChatAndVoice_C_IsPlayerMutedManually::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(BFL_ChatAndVoice_C_IsPlayerMutedManually, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BFL_ChatAndVoice_C_IsPlayerMutedManually::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BFL_ChatAndVoice_C_IsPlayerMutedManually, CallFunc_IsValid_ReturnValue) == 0x000029, "Member 'BFL_ChatAndVoice_C_IsPlayerMutedManually::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_ChatAndVoice_C_IsPlayerMutedManually, CallFunc_IsPlayerMuted_IsMuted) == 0x00002A, "Member 'BFL_ChatAndVoice_C_IsPlayerMutedManually::CallFunc_IsPlayerMuted_IsMuted' has a wrong offset!");
static_assert(offsetof(BFL_ChatAndVoice_C_IsPlayerMutedManually, CallFunc_IsValid_ReturnValue_1) == 0x00002B, "Member 'BFL_ChatAndVoice_C_IsPlayerMutedManually::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

}

