#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_Sunshade

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "EHighlightChannel_structs.hpp"


namespace SDK::Params
{

// Function B_Sunshade.B_Sunshade_C.ActivateActionProp
// 0x0001 (0x0001 - 0x0000)
struct B_Sunshade_C_ActivateActionProp final
{
public:
	bool                                          Override;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Sunshade_C_ActivateActionProp) == 0x000001, "Wrong alignment on B_Sunshade_C_ActivateActionProp");
static_assert(sizeof(B_Sunshade_C_ActivateActionProp) == 0x000001, "Wrong size on B_Sunshade_C_ActivateActionProp");
static_assert(offsetof(B_Sunshade_C_ActivateActionProp, Override) == 0x000000, "Member 'B_Sunshade_C_ActivateActionProp::Override' has a wrong offset!");

// Function B_Sunshade.B_Sunshade_C.ExecuteUbergraph_B_Sunshade
// 0x01C0 (0x01C0 - 0x0000)
struct B_Sunshade_C_ExecuteUbergraph_B_Sunshade final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4EC7[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetRelativeTransform_ReturnValue;         // 0x0010(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_TInterpTo_ReturnValue;                    // 0x0070(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeTransform_SweepHitResult;   // 0x00D0(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	EHighlightChannel                             K2Node_Event_Channel;                              // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Sunshade_C_ExecuteUbergraph_B_Sunshade) == 0x000010, "Wrong alignment on B_Sunshade_C_ExecuteUbergraph_B_Sunshade");
static_assert(sizeof(B_Sunshade_C_ExecuteUbergraph_B_Sunshade) == 0x0001C0, "Wrong size on B_Sunshade_C_ExecuteUbergraph_B_Sunshade");
static_assert(offsetof(B_Sunshade_C_ExecuteUbergraph_B_Sunshade, EntryPoint) == 0x000000, "Member 'B_Sunshade_C_ExecuteUbergraph_B_Sunshade::EntryPoint' has a wrong offset!");
static_assert(offsetof(B_Sunshade_C_ExecuteUbergraph_B_Sunshade, K2Node_Event_DeltaSeconds) == 0x000004, "Member 'B_Sunshade_C_ExecuteUbergraph_B_Sunshade::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(B_Sunshade_C_ExecuteUbergraph_B_Sunshade, CallFunc_GetRelativeTransform_ReturnValue) == 0x000010, "Member 'B_Sunshade_C_ExecuteUbergraph_B_Sunshade::CallFunc_GetRelativeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Sunshade_C_ExecuteUbergraph_B_Sunshade, CallFunc_TInterpTo_ReturnValue) == 0x000070, "Member 'B_Sunshade_C_ExecuteUbergraph_B_Sunshade::CallFunc_TInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Sunshade_C_ExecuteUbergraph_B_Sunshade, CallFunc_K2_SetRelativeTransform_SweepHitResult) == 0x0000D0, "Member 'B_Sunshade_C_ExecuteUbergraph_B_Sunshade::CallFunc_K2_SetRelativeTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(B_Sunshade_C_ExecuteUbergraph_B_Sunshade, K2Node_Event_Channel) == 0x0001B8, "Member 'B_Sunshade_C_ExecuteUbergraph_B_Sunshade::K2Node_Event_Channel' has a wrong offset!");

// Function B_Sunshade.B_Sunshade_C.GetRippleEffect
// 0x0008 (0x0008 - 0x0000)
struct B_Sunshade_C_GetRippleEffect final
{
public:
	class UNiagaraSystem*                         RippleEffectNiagara;                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Sunshade_C_GetRippleEffect) == 0x000008, "Wrong alignment on B_Sunshade_C_GetRippleEffect");
static_assert(sizeof(B_Sunshade_C_GetRippleEffect) == 0x000008, "Wrong size on B_Sunshade_C_GetRippleEffect");
static_assert(offsetof(B_Sunshade_C_GetRippleEffect, RippleEffectNiagara) == 0x000000, "Member 'B_Sunshade_C_GetRippleEffect::RippleEffectNiagara' has a wrong offset!");

// Function B_Sunshade.B_Sunshade_C.GetVisualInterpolators
// 0x0010 (0x0010 - 0x0000)
struct B_Sunshade_C_GetVisualInterpolators final
{
public:
	TArray<class AB_VisualIntepolator_C*>         VisualInterpolators;                               // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(B_Sunshade_C_GetVisualInterpolators) == 0x000008, "Wrong alignment on B_Sunshade_C_GetVisualInterpolators");
static_assert(sizeof(B_Sunshade_C_GetVisualInterpolators) == 0x000010, "Wrong size on B_Sunshade_C_GetVisualInterpolators");
static_assert(offsetof(B_Sunshade_C_GetVisualInterpolators, VisualInterpolators) == 0x000000, "Member 'B_Sunshade_C_GetVisualInterpolators::VisualInterpolators' has a wrong offset!");

// Function B_Sunshade.B_Sunshade_C.InitializeActionProp
// 0x01D0 (0x01D0 - 0x0000)
struct B_Sunshade_C_InitializeActionProp final
{
public:
	struct FHitResult                             CallFunc_K2_SetRelativeTransform_SweepHitResult;   // 0x0000(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetRelativeTransform_SweepHitResult_1; // 0x00E8(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(B_Sunshade_C_InitializeActionProp) == 0x000008, "Wrong alignment on B_Sunshade_C_InitializeActionProp");
static_assert(sizeof(B_Sunshade_C_InitializeActionProp) == 0x0001D0, "Wrong size on B_Sunshade_C_InitializeActionProp");
static_assert(offsetof(B_Sunshade_C_InitializeActionProp, CallFunc_K2_SetRelativeTransform_SweepHitResult) == 0x000000, "Member 'B_Sunshade_C_InitializeActionProp::CallFunc_K2_SetRelativeTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(B_Sunshade_C_InitializeActionProp, CallFunc_K2_SetRelativeTransform_SweepHitResult_1) == 0x0000E8, "Member 'B_Sunshade_C_InitializeActionProp::CallFunc_K2_SetRelativeTransform_SweepHitResult_1' has a wrong offset!");

// Function B_Sunshade.B_Sunshade_C.Jump
// 0x0003 (0x0003 - 0x0000)
struct B_Sunshade_C_Jump final
{
public:
	bool                                          JumpSuccess;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Jump_JumpSuccess;                         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_JumpStaticMeshProp_JumpSuccess;           // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Sunshade_C_Jump) == 0x000001, "Wrong alignment on B_Sunshade_C_Jump");
static_assert(sizeof(B_Sunshade_C_Jump) == 0x000003, "Wrong size on B_Sunshade_C_Jump");
static_assert(offsetof(B_Sunshade_C_Jump, JumpSuccess) == 0x000000, "Member 'B_Sunshade_C_Jump::JumpSuccess' has a wrong offset!");
static_assert(offsetof(B_Sunshade_C_Jump, CallFunc_Jump_JumpSuccess) == 0x000001, "Member 'B_Sunshade_C_Jump::CallFunc_Jump_JumpSuccess' has a wrong offset!");
static_assert(offsetof(B_Sunshade_C_Jump, CallFunc_JumpStaticMeshProp_JumpSuccess) == 0x000002, "Member 'B_Sunshade_C_Jump::CallFunc_JumpStaticMeshProp_JumpSuccess' has a wrong offset!");

// Function B_Sunshade.B_Sunshade_C.Move
// 0x0020 (0x0020 - 0x0000)
struct B_Sunshade_C_Move final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ForcedOutput;                                      // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Move_ForcedOutput;                        // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Sunshade_C_Move) == 0x000008, "Wrong alignment on B_Sunshade_C_Move");
static_assert(sizeof(B_Sunshade_C_Move) == 0x000020, "Wrong size on B_Sunshade_C_Move");
static_assert(offsetof(B_Sunshade_C_Move, Vector) == 0x000000, "Member 'B_Sunshade_C_Move::Vector' has a wrong offset!");
static_assert(offsetof(B_Sunshade_C_Move, ForcedOutput) == 0x000018, "Member 'B_Sunshade_C_Move::ForcedOutput' has a wrong offset!");
static_assert(offsetof(B_Sunshade_C_Move, CallFunc_Move_ForcedOutput) == 0x000019, "Member 'B_Sunshade_C_Move::CallFunc_Move_ForcedOutput' has a wrong offset!");

// Function B_Sunshade.B_Sunshade_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct B_Sunshade_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Sunshade_C_ReceiveTick) == 0x000004, "Wrong alignment on B_Sunshade_C_ReceiveTick");
static_assert(sizeof(B_Sunshade_C_ReceiveTick) == 0x000004, "Wrong size on B_Sunshade_C_ReceiveTick");
static_assert(offsetof(B_Sunshade_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'B_Sunshade_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function B_Sunshade.B_Sunshade_C.RefreshHighlight
// 0x0002 (0x0002 - 0x0000)
struct B_Sunshade_C_RefreshHighlight final
{
public:
	bool                                          Highlightable;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RefreshHighlight_Highlightable;           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Sunshade_C_RefreshHighlight) == 0x000001, "Wrong alignment on B_Sunshade_C_RefreshHighlight");
static_assert(sizeof(B_Sunshade_C_RefreshHighlight) == 0x000002, "Wrong size on B_Sunshade_C_RefreshHighlight");
static_assert(offsetof(B_Sunshade_C_RefreshHighlight, Highlightable) == 0x000000, "Member 'B_Sunshade_C_RefreshHighlight::Highlightable' has a wrong offset!");
static_assert(offsetof(B_Sunshade_C_RefreshHighlight, CallFunc_RefreshHighlight_Highlightable) == 0x000001, "Member 'B_Sunshade_C_RefreshHighlight::CallFunc_RefreshHighlight_Highlightable' has a wrong offset!");

// Function B_Sunshade.B_Sunshade_C.SetHighlightChannel
// 0x0001 (0x0001 - 0x0000)
struct B_Sunshade_C_SetHighlightChannel final
{
public:
	EHighlightChannel                             Channel;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Sunshade_C_SetHighlightChannel) == 0x000001, "Wrong alignment on B_Sunshade_C_SetHighlightChannel");
static_assert(sizeof(B_Sunshade_C_SetHighlightChannel) == 0x000001, "Wrong size on B_Sunshade_C_SetHighlightChannel");
static_assert(offsetof(B_Sunshade_C_SetHighlightChannel, Channel) == 0x000000, "Member 'B_Sunshade_C_SetHighlightChannel::Channel' has a wrong offset!");

}

