#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_LocalizationManager

#include "Basic.hpp"

#include "InputCore_structs.hpp"
#include "SLanguage_structs.hpp"
#include "Engine_structs.hpp"
#include "SButtonLocalization_structs.hpp"
#include "PropWitchHuntModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_LocalizationManager.B_LocalizationManager_C
// 0x01B0 (0x01E0 - 0x0030)
class UB_LocalizationManager_C final : public UBaseManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0030(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<struct FSLanguage>                     Languages;                                         // 0x0038(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<struct FKey, struct FSButtonLocalization> KeyboardLocalization;                              // 0x0048(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<struct FKey, struct FSButtonLocalization> PS4Localization;                                   // 0x0098(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<struct FKey, struct FSButtonLocalization> XboxOneLocalization;                               // 0x00E8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<struct FKey, struct FSButtonLocalization> SwitchLocalization;                                // 0x0138(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UB_MenuUIManager_C*                     MenuUIManager;                                     // 0x0188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, class FText>                InputBindingNameToLocaText;                        // 0x0190(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_B_LocalizationManager(int32 EntryPoint);
	struct FSButtonLocalization GetButtonLocalization(const struct FKey& Key, bool* bKeyFound);
	struct FKey GetKeyForAction(class FName ActionName, bool* bKeyFound);
	struct FKey GetKeyForAxis(class FName AxisName, double Scale, bool* bKeyFound);
	class UB_MenuUIManager_C* GetMenuUIManager();
	void Initialize(class UGameInstance* InGameInstance);
	bool IsLanguageSupported();
	void NintendoSwitchSwapAcceptBackButton(const struct FKey& ActionKey, struct FKey* FixedKey);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_LocalizationManager_C">();
	}
	static class UB_LocalizationManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UB_LocalizationManager_C>();
	}
};
static_assert(alignof(UB_LocalizationManager_C) == 0x000008, "Wrong alignment on UB_LocalizationManager_C");
static_assert(sizeof(UB_LocalizationManager_C) == 0x0001E0, "Wrong size on UB_LocalizationManager_C");
static_assert(offsetof(UB_LocalizationManager_C, UberGraphFrame) == 0x000030, "Member 'UB_LocalizationManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UB_LocalizationManager_C, Languages) == 0x000038, "Member 'UB_LocalizationManager_C::Languages' has a wrong offset!");
static_assert(offsetof(UB_LocalizationManager_C, KeyboardLocalization) == 0x000048, "Member 'UB_LocalizationManager_C::KeyboardLocalization' has a wrong offset!");
static_assert(offsetof(UB_LocalizationManager_C, PS4Localization) == 0x000098, "Member 'UB_LocalizationManager_C::PS4Localization' has a wrong offset!");
static_assert(offsetof(UB_LocalizationManager_C, XboxOneLocalization) == 0x0000E8, "Member 'UB_LocalizationManager_C::XboxOneLocalization' has a wrong offset!");
static_assert(offsetof(UB_LocalizationManager_C, SwitchLocalization) == 0x000138, "Member 'UB_LocalizationManager_C::SwitchLocalization' has a wrong offset!");
static_assert(offsetof(UB_LocalizationManager_C, MenuUIManager) == 0x000188, "Member 'UB_LocalizationManager_C::MenuUIManager' has a wrong offset!");
static_assert(offsetof(UB_LocalizationManager_C, InputBindingNameToLocaText) == 0x000190, "Member 'UB_LocalizationManager_C::InputBindingNameToLocaText' has a wrong offset!");

}

