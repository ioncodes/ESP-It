#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_GSStatAndAchievementsCache

#include "Basic.hpp"

#include "E_StatSetBy_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_GSStatAndAchievementsCache.B_GSStatAndAchievementsCache_C
// 0x0050 (0x0078 - 0x0028)
class UB_GSStatAndAchievementsCache_C final : public UObject
{
public:
	TMap<class FString, class UB_StatAndAchievementsCache_C*> Cache;                                             // 0x0028(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void GetAllStats(class AB_PlayerState_C* PlayerState, TArray<struct FS_Stat>* ResultData, bool* Success);
	void GetStatsBySetByType(class AB_PlayerState_C* PlayerState, E_StatSetBy SetByFilter, TArray<struct FS_Stat>* ResultData, bool* Success);
	void HasStat(const class FString& StatName, class AB_PlayerState_C* PlayerState, bool* Result, int32* IndexInListIfFound);
	void SetStat(const class FString& StatName, int64 Value, class APlayerState* PlayerState);
	void SetStatByProductUserId(const class FString& StatName, int64 Value, const class FString& ProductUserId, E_StatSetBy SetBy, const struct FDateTime& AchievementGrantTimestamp, bool bIsHidden);

	void GetStat(const class FString& StatName, class APlayerState* PlayerState, int64* Value, bool* WasFound, int32* IndexInList, struct FDateTime* AchievementDateTime, bool* bIsHidden) const;
	void GetStatByProductUserId(const class FString& StatName, const class FString& ProductUserId, int64* Value, bool* WasFound, int32* IndexInList, struct FDateTime* AchievementDateTime, bool* bIsHidden) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_GSStatAndAchievementsCache_C">();
	}
	static class UB_GSStatAndAchievementsCache_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UB_GSStatAndAchievementsCache_C>();
	}
};
static_assert(alignof(UB_GSStatAndAchievementsCache_C) == 0x000008, "Wrong alignment on UB_GSStatAndAchievementsCache_C");
static_assert(sizeof(UB_GSStatAndAchievementsCache_C) == 0x000078, "Wrong size on UB_GSStatAndAchievementsCache_C");
static_assert(offsetof(UB_GSStatAndAchievementsCache_C, Cache) == 0x000028, "Member 'UB_GSStatAndAchievementsCache_C::Cache' has a wrong offset!");

}

