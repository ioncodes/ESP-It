#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FieldSystemEngine

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"
#include "FieldSystemEngine_structs.hpp"
#include "Chaos_structs.hpp"


namespace SDK
{

// Class FieldSystemEngine.FieldSystemActor
// 0x0008 (0x02A0 - 0x0298)
class AFieldSystemActor final : public AActor
{
public:
	class UFieldSystemComponent*                  FieldSystemComponent;                              // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FieldSystemActor">();
	}
	static class AFieldSystemActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFieldSystemActor>();
	}
};
static_assert(alignof(AFieldSystemActor) == 0x000008, "Wrong alignment on AFieldSystemActor");
static_assert(sizeof(AFieldSystemActor) == 0x0002A0, "Wrong size on AFieldSystemActor");
static_assert(offsetof(AFieldSystemActor, FieldSystemComponent) == 0x000298, "Member 'AFieldSystemActor::FieldSystemComponent' has a wrong offset!");

// Class FieldSystemEngine.FieldSystem
// 0x0010 (0x0038 - 0x0028)
class UFieldSystem final : public UObject
{
public:
	uint8                                         Pad_12BA[0x10];                                    // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FieldSystem">();
	}
	static class UFieldSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFieldSystem>();
	}
};
static_assert(alignof(UFieldSystem) == 0x000008, "Wrong alignment on UFieldSystem");
static_assert(sizeof(UFieldSystem) == 0x000038, "Wrong size on UFieldSystem");

// Class FieldSystemEngine.FieldSystemComponent
// 0x00D0 (0x0640 - 0x0570)
class UFieldSystemComponent final : public UPrimitiveComponent
{
public:
	class UFieldSystem*                           FieldSystem;                                       // 0x0570(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsWorldField;                                     // 0x0578(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsChaosField;                                     // 0x0579(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12BB[0x6];                                     // 0x057A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class AChaosSolverActor>> SupportedSolvers;                                  // 0x0580(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FFieldObjectCommands                   ConstructionCommands;                              // 0x0590(0x0030)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FFieldObjectCommands                   BufferCommands;                                    // 0x05C0(0x0030)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_12BC[0x50];                                    // 0x05F0(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddFieldCommand(bool Enabled, EFieldPhysicsType Target, class UFieldSystemMetaData* MetaData, class UFieldNodeBase* Field);
	void AddPersistentField(bool Enabled, EFieldPhysicsType Target, class UFieldSystemMetaData* MetaData, class UFieldNodeBase* Field);
	void ApplyLinearForce(bool Enabled, const struct FVector& Direction, float Magnitude);
	void ApplyPhysicsField(bool Enabled, EFieldPhysicsType Target, class UFieldSystemMetaData* MetaData, class UFieldNodeBase* Field);
	void ApplyRadialForce(bool Enabled, const struct FVector& Position, float Magnitude);
	void ApplyRadialVectorFalloffForce(bool Enabled, const struct FVector& Position, float Radius, float Magnitude);
	void ApplyStayDynamicField(bool Enabled, const struct FVector& Position, float Radius);
	void ApplyStrainField(bool Enabled, const struct FVector& Position, float Radius, float Magnitude, int32 Iterations);
	void ApplyUniformVectorFalloffForce(bool Enabled, const struct FVector& Position, const struct FVector& Direction, float Radius, float Magnitude);
	void RemovePersistentFields();
	void ResetFieldSystem();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FieldSystemComponent">();
	}
	static class UFieldSystemComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFieldSystemComponent>();
	}
};
static_assert(alignof(UFieldSystemComponent) == 0x000010, "Wrong alignment on UFieldSystemComponent");
static_assert(sizeof(UFieldSystemComponent) == 0x000640, "Wrong size on UFieldSystemComponent");
static_assert(offsetof(UFieldSystemComponent, FieldSystem) == 0x000570, "Member 'UFieldSystemComponent::FieldSystem' has a wrong offset!");
static_assert(offsetof(UFieldSystemComponent, bIsWorldField) == 0x000578, "Member 'UFieldSystemComponent::bIsWorldField' has a wrong offset!");
static_assert(offsetof(UFieldSystemComponent, bIsChaosField) == 0x000579, "Member 'UFieldSystemComponent::bIsChaosField' has a wrong offset!");
static_assert(offsetof(UFieldSystemComponent, SupportedSolvers) == 0x000580, "Member 'UFieldSystemComponent::SupportedSolvers' has a wrong offset!");
static_assert(offsetof(UFieldSystemComponent, ConstructionCommands) == 0x000590, "Member 'UFieldSystemComponent::ConstructionCommands' has a wrong offset!");
static_assert(offsetof(UFieldSystemComponent, BufferCommands) == 0x0005C0, "Member 'UFieldSystemComponent::BufferCommands' has a wrong offset!");

// Class FieldSystemEngine.FieldSystemMetaData
// 0x0000 (0x00A0 - 0x00A0)
class UFieldSystemMetaData : public UActorComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FieldSystemMetaData">();
	}
	static class UFieldSystemMetaData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFieldSystemMetaData>();
	}
};
static_assert(alignof(UFieldSystemMetaData) == 0x000008, "Wrong alignment on UFieldSystemMetaData");
static_assert(sizeof(UFieldSystemMetaData) == 0x0000A0, "Wrong size on UFieldSystemMetaData");

// Class FieldSystemEngine.FieldSystemMetaDataIteration
// 0x0008 (0x00A8 - 0x00A0)
class UFieldSystemMetaDataIteration final : public UFieldSystemMetaData
{
public:
	int32                                         Iterations;                                        // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12CA[0x4];                                     // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UFieldSystemMetaDataIteration* SetMetaDataIteration(int32 Param_Iterations);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FieldSystemMetaDataIteration">();
	}
	static class UFieldSystemMetaDataIteration* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFieldSystemMetaDataIteration>();
	}
};
static_assert(alignof(UFieldSystemMetaDataIteration) == 0x000008, "Wrong alignment on UFieldSystemMetaDataIteration");
static_assert(sizeof(UFieldSystemMetaDataIteration) == 0x0000A8, "Wrong size on UFieldSystemMetaDataIteration");
static_assert(offsetof(UFieldSystemMetaDataIteration, Iterations) == 0x0000A0, "Member 'UFieldSystemMetaDataIteration::Iterations' has a wrong offset!");

// Class FieldSystemEngine.FieldSystemMetaDataProcessingResolution
// 0x0008 (0x00A8 - 0x00A0)
class UFieldSystemMetaDataProcessingResolution final : public UFieldSystemMetaData
{
public:
	EFieldResolutionType                          ResolutionType;                                    // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12CC[0x7];                                     // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UFieldSystemMetaDataProcessingResolution* SetMetaDataaProcessingResolutionType(EFieldResolutionType Param_ResolutionType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FieldSystemMetaDataProcessingResolution">();
	}
	static class UFieldSystemMetaDataProcessingResolution* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFieldSystemMetaDataProcessingResolution>();
	}
};
static_assert(alignof(UFieldSystemMetaDataProcessingResolution) == 0x000008, "Wrong alignment on UFieldSystemMetaDataProcessingResolution");
static_assert(sizeof(UFieldSystemMetaDataProcessingResolution) == 0x0000A8, "Wrong size on UFieldSystemMetaDataProcessingResolution");
static_assert(offsetof(UFieldSystemMetaDataProcessingResolution, ResolutionType) == 0x0000A0, "Member 'UFieldSystemMetaDataProcessingResolution::ResolutionType' has a wrong offset!");

// Class FieldSystemEngine.FieldSystemMetaDataFilter
// 0x0008 (0x00A8 - 0x00A0)
class UFieldSystemMetaDataFilter final : public UFieldSystemMetaData
{
public:
	EFieldFilterType                              FilterType;                                        // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFieldObjectType                              ObjectType;                                        // 0x00A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFieldPositionType                            PositionType;                                      // 0x00A2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12CE[0x5];                                     // 0x00A3(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UFieldSystemMetaDataFilter* SetMetaDataFilterType(EFieldFilterType Param_FilterType, EFieldObjectType Param_ObjectType, EFieldPositionType Param_PositionType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FieldSystemMetaDataFilter">();
	}
	static class UFieldSystemMetaDataFilter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFieldSystemMetaDataFilter>();
	}
};
static_assert(alignof(UFieldSystemMetaDataFilter) == 0x000008, "Wrong alignment on UFieldSystemMetaDataFilter");
static_assert(sizeof(UFieldSystemMetaDataFilter) == 0x0000A8, "Wrong size on UFieldSystemMetaDataFilter");
static_assert(offsetof(UFieldSystemMetaDataFilter, FilterType) == 0x0000A0, "Member 'UFieldSystemMetaDataFilter::FilterType' has a wrong offset!");
static_assert(offsetof(UFieldSystemMetaDataFilter, ObjectType) == 0x0000A1, "Member 'UFieldSystemMetaDataFilter::ObjectType' has a wrong offset!");
static_assert(offsetof(UFieldSystemMetaDataFilter, PositionType) == 0x0000A2, "Member 'UFieldSystemMetaDataFilter::PositionType' has a wrong offset!");

// Class FieldSystemEngine.FieldNodeBase
// 0x0000 (0x00A0 - 0x00A0)
class UFieldNodeBase : public UActorComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FieldNodeBase">();
	}
	static class UFieldNodeBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFieldNodeBase>();
	}
};
static_assert(alignof(UFieldNodeBase) == 0x000008, "Wrong alignment on UFieldNodeBase");
static_assert(sizeof(UFieldNodeBase) == 0x0000A0, "Wrong size on UFieldNodeBase");

// Class FieldSystemEngine.FieldNodeInt
// 0x0000 (0x00A0 - 0x00A0)
class UFieldNodeInt : public UFieldNodeBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FieldNodeInt">();
	}
	static class UFieldNodeInt* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFieldNodeInt>();
	}
};
static_assert(alignof(UFieldNodeInt) == 0x000008, "Wrong alignment on UFieldNodeInt");
static_assert(sizeof(UFieldNodeInt) == 0x0000A0, "Wrong size on UFieldNodeInt");

// Class FieldSystemEngine.FieldNodeFloat
// 0x0000 (0x00A0 - 0x00A0)
class UFieldNodeFloat : public UFieldNodeBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FieldNodeFloat">();
	}
	static class UFieldNodeFloat* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFieldNodeFloat>();
	}
};
static_assert(alignof(UFieldNodeFloat) == 0x000008, "Wrong alignment on UFieldNodeFloat");
static_assert(sizeof(UFieldNodeFloat) == 0x0000A0, "Wrong size on UFieldNodeFloat");

// Class FieldSystemEngine.FieldNodeVector
// 0x0000 (0x00A0 - 0x00A0)
class UFieldNodeVector : public UFieldNodeBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FieldNodeVector">();
	}
	static class UFieldNodeVector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFieldNodeVector>();
	}
};
static_assert(alignof(UFieldNodeVector) == 0x000008, "Wrong alignment on UFieldNodeVector");
static_assert(sizeof(UFieldNodeVector) == 0x0000A0, "Wrong size on UFieldNodeVector");

// Class FieldSystemEngine.UniformInteger
// 0x0008 (0x00A8 - 0x00A0)
class UUniformInteger final : public UFieldNodeInt
{
public:
	int32                                         Magnitude;                                         // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12D0[0x4];                                     // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UUniformInteger* SetUniformInteger(int32 Param_Magnitude);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UniformInteger">();
	}
	static class UUniformInteger* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUniformInteger>();
	}
};
static_assert(alignof(UUniformInteger) == 0x000008, "Wrong alignment on UUniformInteger");
static_assert(sizeof(UUniformInteger) == 0x0000A8, "Wrong size on UUniformInteger");
static_assert(offsetof(UUniformInteger, Magnitude) == 0x0000A0, "Member 'UUniformInteger::Magnitude' has a wrong offset!");

// Class FieldSystemEngine.RadialIntMask
// 0x0030 (0x00D0 - 0x00A0)
class URadialIntMask final : public UFieldNodeInt
{
public:
	float                                         Radius;                                            // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12D2[0x4];                                     // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Position;                                          // 0x00A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InteriorValue;                                     // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExteriorValue;                                     // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESetMaskConditionType                         SetMaskCondition;                                  // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12D3[0x7];                                     // 0x00C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class URadialIntMask* SetRadialIntMask(float Param_Radius, const struct FVector& Param_Position, int32 Param_InteriorValue, int32 Param_ExteriorValue, ESetMaskConditionType SetMaskConditionIn);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RadialIntMask">();
	}
	static class URadialIntMask* GetDefaultObj()
	{
		return GetDefaultObjImpl<URadialIntMask>();
	}
};
static_assert(alignof(URadialIntMask) == 0x000008, "Wrong alignment on URadialIntMask");
static_assert(sizeof(URadialIntMask) == 0x0000D0, "Wrong size on URadialIntMask");
static_assert(offsetof(URadialIntMask, Radius) == 0x0000A0, "Member 'URadialIntMask::Radius' has a wrong offset!");
static_assert(offsetof(URadialIntMask, Position) == 0x0000A8, "Member 'URadialIntMask::Position' has a wrong offset!");
static_assert(offsetof(URadialIntMask, InteriorValue) == 0x0000C0, "Member 'URadialIntMask::InteriorValue' has a wrong offset!");
static_assert(offsetof(URadialIntMask, ExteriorValue) == 0x0000C4, "Member 'URadialIntMask::ExteriorValue' has a wrong offset!");
static_assert(offsetof(URadialIntMask, SetMaskCondition) == 0x0000C8, "Member 'URadialIntMask::SetMaskCondition' has a wrong offset!");

// Class FieldSystemEngine.UniformScalar
// 0x0008 (0x00A8 - 0x00A0)
class UUniformScalar final : public UFieldNodeFloat
{
public:
	float                                         Magnitude;                                         // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12D6[0x4];                                     // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UUniformScalar* SetUniformScalar(float Param_Magnitude);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UniformScalar">();
	}
	static class UUniformScalar* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUniformScalar>();
	}
};
static_assert(alignof(UUniformScalar) == 0x000008, "Wrong alignment on UUniformScalar");
static_assert(sizeof(UUniformScalar) == 0x0000A8, "Wrong size on UUniformScalar");
static_assert(offsetof(UUniformScalar, Magnitude) == 0x0000A0, "Member 'UUniformScalar::Magnitude' has a wrong offset!");

// Class FieldSystemEngine.WaveScalar
// 0x0030 (0x00D0 - 0x00A0)
class UWaveScalar final : public UFieldNodeFloat
{
public:
	float                                         Magnitude;                                         // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12D8[0x4];                                     // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Position;                                          // 0x00A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaveLength;                                        // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Period;                                            // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWaveFunctionType                             Function;                                          // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFieldFalloffType                             Falloff;                                           // 0x00C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12D9[0x6];                                     // 0x00CA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UWaveScalar* SetWaveScalar(float Param_Magnitude, const struct FVector& Param_Position, float Param_WaveLength, float Param_Period, float Time, EWaveFunctionType Param_Function, EFieldFalloffType Param_Falloff);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaveScalar">();
	}
	static class UWaveScalar* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWaveScalar>();
	}
};
static_assert(alignof(UWaveScalar) == 0x000008, "Wrong alignment on UWaveScalar");
static_assert(sizeof(UWaveScalar) == 0x0000D0, "Wrong size on UWaveScalar");
static_assert(offsetof(UWaveScalar, Magnitude) == 0x0000A0, "Member 'UWaveScalar::Magnitude' has a wrong offset!");
static_assert(offsetof(UWaveScalar, Position) == 0x0000A8, "Member 'UWaveScalar::Position' has a wrong offset!");
static_assert(offsetof(UWaveScalar, WaveLength) == 0x0000C0, "Member 'UWaveScalar::WaveLength' has a wrong offset!");
static_assert(offsetof(UWaveScalar, Period) == 0x0000C4, "Member 'UWaveScalar::Period' has a wrong offset!");
static_assert(offsetof(UWaveScalar, Function) == 0x0000C8, "Member 'UWaveScalar::Function' has a wrong offset!");
static_assert(offsetof(UWaveScalar, Falloff) == 0x0000C9, "Member 'UWaveScalar::Falloff' has a wrong offset!");

// Class FieldSystemEngine.RadialFalloff
// 0x0038 (0x00D8 - 0x00A0)
class URadialFalloff final : public UFieldNodeFloat
{
public:
	float                                         Magnitude;                                         // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinRange;                                          // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRange;                                          // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Default;                                           // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12DC[0x4];                                     // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Position;                                          // 0x00B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFieldFalloffType                             Falloff;                                           // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12DD[0x7];                                     // 0x00D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class URadialFalloff* SetRadialFalloff(float Param_Magnitude, float Param_MinRange, float Param_MaxRange, float Param_Default, float Param_Radius, const struct FVector& Param_Position, EFieldFalloffType Param_Falloff);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RadialFalloff">();
	}
	static class URadialFalloff* GetDefaultObj()
	{
		return GetDefaultObjImpl<URadialFalloff>();
	}
};
static_assert(alignof(URadialFalloff) == 0x000008, "Wrong alignment on URadialFalloff");
static_assert(sizeof(URadialFalloff) == 0x0000D8, "Wrong size on URadialFalloff");
static_assert(offsetof(URadialFalloff, Magnitude) == 0x0000A0, "Member 'URadialFalloff::Magnitude' has a wrong offset!");
static_assert(offsetof(URadialFalloff, MinRange) == 0x0000A4, "Member 'URadialFalloff::MinRange' has a wrong offset!");
static_assert(offsetof(URadialFalloff, MaxRange) == 0x0000A8, "Member 'URadialFalloff::MaxRange' has a wrong offset!");
static_assert(offsetof(URadialFalloff, Default) == 0x0000AC, "Member 'URadialFalloff::Default' has a wrong offset!");
static_assert(offsetof(URadialFalloff, Radius) == 0x0000B0, "Member 'URadialFalloff::Radius' has a wrong offset!");
static_assert(offsetof(URadialFalloff, Position) == 0x0000B8, "Member 'URadialFalloff::Position' has a wrong offset!");
static_assert(offsetof(URadialFalloff, Falloff) == 0x0000D0, "Member 'URadialFalloff::Falloff' has a wrong offset!");

// Class FieldSystemEngine.PlaneFalloff
// 0x0050 (0x00F0 - 0x00A0)
class UPlaneFalloff final : public UFieldNodeFloat
{
public:
	float                                         Magnitude;                                         // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinRange;                                          // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRange;                                          // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Default;                                           // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12E0[0x4];                                     // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Position;                                          // 0x00B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x00D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFieldFalloffType                             Falloff;                                           // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12E1[0x7];                                     // 0x00E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UPlaneFalloff* SetPlaneFalloff(float Param_Magnitude, float Param_MinRange, float Param_MaxRange, float Param_Default, float Param_Distance, const struct FVector& Param_Position, const struct FVector& Param_Normal, EFieldFalloffType Param_Falloff);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlaneFalloff">();
	}
	static class UPlaneFalloff* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlaneFalloff>();
	}
};
static_assert(alignof(UPlaneFalloff) == 0x000008, "Wrong alignment on UPlaneFalloff");
static_assert(sizeof(UPlaneFalloff) == 0x0000F0, "Wrong size on UPlaneFalloff");
static_assert(offsetof(UPlaneFalloff, Magnitude) == 0x0000A0, "Member 'UPlaneFalloff::Magnitude' has a wrong offset!");
static_assert(offsetof(UPlaneFalloff, MinRange) == 0x0000A4, "Member 'UPlaneFalloff::MinRange' has a wrong offset!");
static_assert(offsetof(UPlaneFalloff, MaxRange) == 0x0000A8, "Member 'UPlaneFalloff::MaxRange' has a wrong offset!");
static_assert(offsetof(UPlaneFalloff, Default) == 0x0000AC, "Member 'UPlaneFalloff::Default' has a wrong offset!");
static_assert(offsetof(UPlaneFalloff, Distance) == 0x0000B0, "Member 'UPlaneFalloff::Distance' has a wrong offset!");
static_assert(offsetof(UPlaneFalloff, Position) == 0x0000B8, "Member 'UPlaneFalloff::Position' has a wrong offset!");
static_assert(offsetof(UPlaneFalloff, Normal) == 0x0000D0, "Member 'UPlaneFalloff::Normal' has a wrong offset!");
static_assert(offsetof(UPlaneFalloff, Falloff) == 0x0000E8, "Member 'UPlaneFalloff::Falloff' has a wrong offset!");

// Class FieldSystemEngine.BoxFalloff
// 0x0080 (0x0120 - 0x00A0)
class UBoxFalloff final : public UFieldNodeFloat
{
public:
	float                                         Magnitude;                                         // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinRange;                                          // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRange;                                          // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Default;                                           // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Transform;                                         // 0x00B0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFieldFalloffType                             Falloff;                                           // 0x0110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12E4[0xF];                                     // 0x0111(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UBoxFalloff* SetBoxFalloff(float Param_Magnitude, float Param_MinRange, float Param_MaxRange, float Param_Default, const struct FTransform& Param_Transform, EFieldFalloffType Param_Falloff);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BoxFalloff">();
	}
	static class UBoxFalloff* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBoxFalloff>();
	}
};
static_assert(alignof(UBoxFalloff) == 0x000010, "Wrong alignment on UBoxFalloff");
static_assert(sizeof(UBoxFalloff) == 0x000120, "Wrong size on UBoxFalloff");
static_assert(offsetof(UBoxFalloff, Magnitude) == 0x0000A0, "Member 'UBoxFalloff::Magnitude' has a wrong offset!");
static_assert(offsetof(UBoxFalloff, MinRange) == 0x0000A4, "Member 'UBoxFalloff::MinRange' has a wrong offset!");
static_assert(offsetof(UBoxFalloff, MaxRange) == 0x0000A8, "Member 'UBoxFalloff::MaxRange' has a wrong offset!");
static_assert(offsetof(UBoxFalloff, Default) == 0x0000AC, "Member 'UBoxFalloff::Default' has a wrong offset!");
static_assert(offsetof(UBoxFalloff, Transform) == 0x0000B0, "Member 'UBoxFalloff::Transform' has a wrong offset!");
static_assert(offsetof(UBoxFalloff, Falloff) == 0x000110, "Member 'UBoxFalloff::Falloff' has a wrong offset!");

// Class FieldSystemEngine.NoiseField
// 0x0070 (0x0110 - 0x00A0)
class UNoiseField final : public UFieldNodeFloat
{
public:
	float                                         MinRange;                                          // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRange;                                          // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12E6[0x8];                                     // 0x00A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x00B0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	class UNoiseField* SetNoiseField(float Param_MinRange, float Param_MaxRange, const struct FTransform& Param_Transform);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NoiseField">();
	}
	static class UNoiseField* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoiseField>();
	}
};
static_assert(alignof(UNoiseField) == 0x000010, "Wrong alignment on UNoiseField");
static_assert(sizeof(UNoiseField) == 0x000110, "Wrong size on UNoiseField");
static_assert(offsetof(UNoiseField, MinRange) == 0x0000A0, "Member 'UNoiseField::MinRange' has a wrong offset!");
static_assert(offsetof(UNoiseField, MaxRange) == 0x0000A4, "Member 'UNoiseField::MaxRange' has a wrong offset!");
static_assert(offsetof(UNoiseField, Transform) == 0x0000B0, "Member 'UNoiseField::Transform' has a wrong offset!");

// Class FieldSystemEngine.UniformVector
// 0x0020 (0x00C0 - 0x00A0)
class UUniformVector final : public UFieldNodeVector
{
public:
	float                                         Magnitude;                                         // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12E9[0x4];                                     // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Direction;                                         // 0x00A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	class UUniformVector* SetUniformVector(float Param_Magnitude, const struct FVector& Param_Direction);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UniformVector">();
	}
	static class UUniformVector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUniformVector>();
	}
};
static_assert(alignof(UUniformVector) == 0x000008, "Wrong alignment on UUniformVector");
static_assert(sizeof(UUniformVector) == 0x0000C0, "Wrong size on UUniformVector");
static_assert(offsetof(UUniformVector, Magnitude) == 0x0000A0, "Member 'UUniformVector::Magnitude' has a wrong offset!");
static_assert(offsetof(UUniformVector, Direction) == 0x0000A8, "Member 'UUniformVector::Direction' has a wrong offset!");

// Class FieldSystemEngine.RadialVector
// 0x0020 (0x00C0 - 0x00A0)
class URadialVector final : public UFieldNodeVector
{
public:
	float                                         Magnitude;                                         // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12EB[0x4];                                     // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Position;                                          // 0x00A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	class URadialVector* SetRadialVector(float Param_Magnitude, const struct FVector& Param_Position);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RadialVector">();
	}
	static class URadialVector* GetDefaultObj()
	{
		return GetDefaultObjImpl<URadialVector>();
	}
};
static_assert(alignof(URadialVector) == 0x000008, "Wrong alignment on URadialVector");
static_assert(sizeof(URadialVector) == 0x0000C0, "Wrong size on URadialVector");
static_assert(offsetof(URadialVector, Magnitude) == 0x0000A0, "Member 'URadialVector::Magnitude' has a wrong offset!");
static_assert(offsetof(URadialVector, Position) == 0x0000A8, "Member 'URadialVector::Position' has a wrong offset!");

// Class FieldSystemEngine.RandomVector
// 0x0008 (0x00A8 - 0x00A0)
class URandomVector final : public UFieldNodeVector
{
public:
	float                                         Magnitude;                                         // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12ED[0x4];                                     // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class URandomVector* SetRandomVector(float Param_Magnitude);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RandomVector">();
	}
	static class URandomVector* GetDefaultObj()
	{
		return GetDefaultObjImpl<URandomVector>();
	}
};
static_assert(alignof(URandomVector) == 0x000008, "Wrong alignment on URandomVector");
static_assert(sizeof(URandomVector) == 0x0000A8, "Wrong size on URandomVector");
static_assert(offsetof(URandomVector, Magnitude) == 0x0000A0, "Member 'URandomVector::Magnitude' has a wrong offset!");

// Class FieldSystemEngine.OperatorField
// 0x0020 (0x00C0 - 0x00A0)
class UOperatorField final : public UFieldNodeBase
{
public:
	float                                         Magnitude;                                         // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12EF[0x4];                                     // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFieldNodeBase*                         RightField;                                        // 0x00A8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFieldNodeBase*                         LeftField;                                         // 0x00B0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFieldOperationType                           Operation;                                         // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12F0[0x7];                                     // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UOperatorField* SetOperatorField(float Param_Magnitude, const class UFieldNodeBase* Param_LeftField, const class UFieldNodeBase* Param_RightField, EFieldOperationType Param_Operation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OperatorField">();
	}
	static class UOperatorField* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOperatorField>();
	}
};
static_assert(alignof(UOperatorField) == 0x000008, "Wrong alignment on UOperatorField");
static_assert(sizeof(UOperatorField) == 0x0000C0, "Wrong size on UOperatorField");
static_assert(offsetof(UOperatorField, Magnitude) == 0x0000A0, "Member 'UOperatorField::Magnitude' has a wrong offset!");
static_assert(offsetof(UOperatorField, RightField) == 0x0000A8, "Member 'UOperatorField::RightField' has a wrong offset!");
static_assert(offsetof(UOperatorField, LeftField) == 0x0000B0, "Member 'UOperatorField::LeftField' has a wrong offset!");
static_assert(offsetof(UOperatorField, Operation) == 0x0000B8, "Member 'UOperatorField::Operation' has a wrong offset!");

// Class FieldSystemEngine.ToIntegerField
// 0x0008 (0x00A8 - 0x00A0)
class UToIntegerField final : public UFieldNodeInt
{
public:
	class UFieldNodeFloat*                        FloatField;                                        // 0x00A0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	class UToIntegerField* SetToIntegerField(const class UFieldNodeFloat* Param_FloatField);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ToIntegerField">();
	}
	static class UToIntegerField* GetDefaultObj()
	{
		return GetDefaultObjImpl<UToIntegerField>();
	}
};
static_assert(alignof(UToIntegerField) == 0x000008, "Wrong alignment on UToIntegerField");
static_assert(sizeof(UToIntegerField) == 0x0000A8, "Wrong size on UToIntegerField");
static_assert(offsetof(UToIntegerField, FloatField) == 0x0000A0, "Member 'UToIntegerField::FloatField' has a wrong offset!");

// Class FieldSystemEngine.ToFloatField
// 0x0008 (0x00A8 - 0x00A0)
class UToFloatField final : public UFieldNodeFloat
{
public:
	class UFieldNodeInt*                          IntField;                                          // 0x00A0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	class UToFloatField* SetToFloatField(const class UFieldNodeInt* IntegerField);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ToFloatField">();
	}
	static class UToFloatField* GetDefaultObj()
	{
		return GetDefaultObjImpl<UToFloatField>();
	}
};
static_assert(alignof(UToFloatField) == 0x000008, "Wrong alignment on UToFloatField");
static_assert(sizeof(UToFloatField) == 0x0000A8, "Wrong size on UToFloatField");
static_assert(offsetof(UToFloatField, IntField) == 0x0000A0, "Member 'UToFloatField::IntField' has a wrong offset!");

// Class FieldSystemEngine.CullingField
// 0x0018 (0x00B8 - 0x00A0)
class UCullingField final : public UFieldNodeBase
{
public:
	class UFieldNodeBase*                         Culling;                                           // 0x00A0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFieldNodeBase*                         Field;                                             // 0x00A8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFieldCullingOperationType                    Operation;                                         // 0x00B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12F3[0x7];                                     // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UCullingField* SetCullingField(const class UFieldNodeBase* Param_Culling, const class UFieldNodeBase* Param_Field, EFieldCullingOperationType Param_Operation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CullingField">();
	}
	static class UCullingField* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCullingField>();
	}
};
static_assert(alignof(UCullingField) == 0x000008, "Wrong alignment on UCullingField");
static_assert(sizeof(UCullingField) == 0x0000B8, "Wrong size on UCullingField");
static_assert(offsetof(UCullingField, Culling) == 0x0000A0, "Member 'UCullingField::Culling' has a wrong offset!");
static_assert(offsetof(UCullingField, Field) == 0x0000A8, "Member 'UCullingField::Field' has a wrong offset!");
static_assert(offsetof(UCullingField, Operation) == 0x0000B0, "Member 'UCullingField::Operation' has a wrong offset!");

// Class FieldSystemEngine.ReturnResultsTerminal
// 0x0000 (0x00A0 - 0x00A0)
class UReturnResultsTerminal final : public UFieldNodeBase
{
public:
	class UReturnResultsTerminal* SetReturnResultsTerminal();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ReturnResultsTerminal">();
	}
	static class UReturnResultsTerminal* GetDefaultObj()
	{
		return GetDefaultObjImpl<UReturnResultsTerminal>();
	}
};
static_assert(alignof(UReturnResultsTerminal) == 0x000008, "Wrong alignment on UReturnResultsTerminal");
static_assert(sizeof(UReturnResultsTerminal) == 0x0000A0, "Wrong size on UReturnResultsTerminal");

}

