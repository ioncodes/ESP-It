#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_PendingTrades

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "InputCore_structs.hpp"
#include "UMG_structs.hpp"
#include "MasterServerPlugin_structs.hpp"


namespace SDK::Params
{

// Function WB_PendingTrades.WB_PendingTrades_C.AcceptKeyPressed
// 0x0010 (0x0010 - 0x0000)
struct WB_PendingTrades_C_AcceptKeyPressed final
{
public:
	class UWB_PendingTradeRequest_C*              CallFunc_GetSelectedEntry_SelectedRequest;         // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_PendingTrades_C_AcceptKeyPressed) == 0x000008, "Wrong alignment on WB_PendingTrades_C_AcceptKeyPressed");
static_assert(sizeof(WB_PendingTrades_C_AcceptKeyPressed) == 0x000010, "Wrong size on WB_PendingTrades_C_AcceptKeyPressed");
static_assert(offsetof(WB_PendingTrades_C_AcceptKeyPressed, CallFunc_GetSelectedEntry_SelectedRequest) == 0x000000, "Member 'WB_PendingTrades_C_AcceptKeyPressed::CallFunc_GetSelectedEntry_SelectedRequest' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_AcceptKeyPressed, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'WB_PendingTrades_C_AcceptKeyPressed::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function WB_PendingTrades.WB_PendingTrades_C.ExecuteUbergraph_WB_PendingTrades
// 0x0108 (0x0108 - 0x0000)
struct WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(TArray<struct FTradeRequest>& Requests)> K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTradeRequest>                  K2Node_CustomEvent_requests_2;                     // 0x0018(0x0010)(ConstParm, ReferenceParm)
	TArray<struct FTradeRequest>                  Temp_struct_Variable;                              // 0x0028(0x0010)(ReferenceParm)
	class UGetIncomingTradeRequestsProxy*         CallFunc_GetIncomingTradeRequests_ReturnValue;     // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTradeRequest>                  K2Node_CustomEvent_requests_1;                     // 0x0048(0x0010)(ConstParm, ReferenceParm)
	TDelegate<void(TArray<struct FTradeRequest>& Requests)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0058(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<struct FTradeRequest>                  K2Node_CustomEvent_requests;                       // 0x0068(0x0010)(ConstParm, ReferenceParm)
	TDelegate<void(TArray<struct FTradeRequest>& Requests)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x0078(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<struct FTradeRequest>                  Temp_struct_Variable_1;                            // 0x0088(0x0010)(ReferenceParm)
	class UGetOutgoingTradeRequestsProxy*         CallFunc_GetOutgoingTradeRequests_ReturnValue;     // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<struct FTradeRequest>                  K2Node_CustomEvent_requests_3;                     // 0x00B0(0x0010)(ConstParm, ReferenceParm)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_1;            // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_1;            // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Incoming;                       // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E2[0x2];                                       // 0x00E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(TArray<struct FTradeRequest>& Requests)> K2Node_CreateDelegate_OutputDelegate_3;            // 0x00E4(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_4;            // 0x00F4(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades) == 0x000008, "Wrong alignment on WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades");
static_assert(sizeof(WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades) == 0x000108, "Wrong size on WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades");
static_assert(offsetof(WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades, EntryPoint) == 0x000000, "Member 'WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades::EntryPoint' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades, K2Node_CustomEvent_requests_2) == 0x000018, "Member 'WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades::K2Node_CustomEvent_requests_2' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades, Temp_struct_Variable) == 0x000028, "Member 'WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades, CallFunc_GetIncomingTradeRequests_ReturnValue) == 0x000038, "Member 'WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades::CallFunc_GetIncomingTradeRequests_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades, K2Node_CustomEvent_requests_1) == 0x000048, "Member 'WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades::K2Node_CustomEvent_requests_1' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades, K2Node_CreateDelegate_OutputDelegate_1) == 0x000058, "Member 'WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades, K2Node_CustomEvent_requests) == 0x000068, "Member 'WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades::K2Node_CustomEvent_requests' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades, K2Node_CreateDelegate_OutputDelegate_2) == 0x000078, "Member 'WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades, Temp_struct_Variable_1) == 0x000088, "Member 'WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades, CallFunc_GetOutgoingTradeRequests_ReturnValue) == 0x000098, "Member 'WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades::CallFunc_GetOutgoingTradeRequests_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades, CallFunc_IsValid_ReturnValue_1) == 0x0000A0, "Member 'WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades, CallFunc_GetGameInstance_ReturnValue) == 0x0000A8, "Member 'WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades, K2Node_CustomEvent_requests_3) == 0x0000B0, "Member 'WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades::K2Node_CustomEvent_requests_3' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades, K2Node_DynamicCast_AsB_Game_Instance) == 0x0000C0, "Member 'WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades, K2Node_DynamicCast_bSuccess) == 0x0000C8, "Member 'WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades, CallFunc_GetGameInstance_ReturnValue_1) == 0x0000D0, "Member 'WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades::CallFunc_GetGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades, K2Node_DynamicCast_AsB_Game_Instance_1) == 0x0000D8, "Member 'WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades::K2Node_DynamicCast_AsB_Game_Instance_1' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades, K2Node_DynamicCast_bSuccess_1) == 0x0000E0, "Member 'WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades, K2Node_CustomEvent_Incoming) == 0x0000E1, "Member 'WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades::K2Node_CustomEvent_Incoming' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades, K2Node_CreateDelegate_OutputDelegate_3) == 0x0000E4, "Member 'WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades, K2Node_CreateDelegate_OutputDelegate_4) == 0x0000F4, "Member 'WB_PendingTrades_C_ExecuteUbergraph_WB_PendingTrades::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");

// Function WB_PendingTrades.WB_PendingTrades_C.Get_ShoulderIcon_Visibility
// 0x0006 (0x0006 - 0x0000)
struct WB_PendingTrades_C_Get_ShoulderIcon_Visibility final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsGamepadMode_ReturnValue;                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_PendingTrades_C_Get_ShoulderIcon_Visibility) == 0x000001, "Wrong alignment on WB_PendingTrades_C_Get_ShoulderIcon_Visibility");
static_assert(sizeof(WB_PendingTrades_C_Get_ShoulderIcon_Visibility) == 0x000006, "Wrong size on WB_PendingTrades_C_Get_ShoulderIcon_Visibility");
static_assert(offsetof(WB_PendingTrades_C_Get_ShoulderIcon_Visibility, ReturnValue) == 0x000000, "Member 'WB_PendingTrades_C_Get_ShoulderIcon_Visibility::ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_Get_ShoulderIcon_Visibility, Temp_bool_Variable) == 0x000001, "Member 'WB_PendingTrades_C_Get_ShoulderIcon_Visibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_Get_ShoulderIcon_Visibility, Temp_byte_Variable) == 0x000002, "Member 'WB_PendingTrades_C_Get_ShoulderIcon_Visibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_Get_ShoulderIcon_Visibility, Temp_byte_Variable_1) == 0x000003, "Member 'WB_PendingTrades_C_Get_ShoulderIcon_Visibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_Get_ShoulderIcon_Visibility, CallFunc_IsGamepadMode_ReturnValue) == 0x000004, "Member 'WB_PendingTrades_C_Get_ShoulderIcon_Visibility::CallFunc_IsGamepadMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_Get_ShoulderIcon_Visibility, K2Node_Select_Default) == 0x000005, "Member 'WB_PendingTrades_C_Get_ShoulderIcon_Visibility::K2Node_Select_Default' has a wrong offset!");

// Function WB_PendingTrades.WB_PendingTrades_C.GetInitialFocusWidget
// 0x0008 (0x0008 - 0x0000)
struct WB_PendingTrades_C_GetInitialFocusWidget final
{
public:
	class UUserWidget*                            InitialFocusWidget;                                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_PendingTrades_C_GetInitialFocusWidget) == 0x000008, "Wrong alignment on WB_PendingTrades_C_GetInitialFocusWidget");
static_assert(sizeof(WB_PendingTrades_C_GetInitialFocusWidget) == 0x000008, "Wrong size on WB_PendingTrades_C_GetInitialFocusWidget");
static_assert(offsetof(WB_PendingTrades_C_GetInitialFocusWidget, InitialFocusWidget) == 0x000000, "Member 'WB_PendingTrades_C_GetInitialFocusWidget::InitialFocusWidget' has a wrong offset!");

// Function WB_PendingTrades.WB_PendingTrades_C.GetSelectedEntry
// 0x0068 (0x0068 - 0x0000)
struct WB_PendingTrades_C_GetSelectedEntry final
{
public:
	class UWB_PendingTradeRequest_C*              SelectedRequest;                                   // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UUserWidget*>                    CallFunc_GetDisplayedEntryWidgets_ReturnValue;     // 0x0018(0x0010)(ConstParm, ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_PendingTradeRequest_C*              K2Node_DynamicCast_AsWB_Pending_Trade_Request;     // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IUserObjectListEntry>  K2Node_DynamicCast_AsUser_Object_List_Entry;       // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsListItemSelected_ReturnValue;           // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_PendingTrades_C_GetSelectedEntry) == 0x000008, "Wrong alignment on WB_PendingTrades_C_GetSelectedEntry");
static_assert(sizeof(WB_PendingTrades_C_GetSelectedEntry) == 0x000068, "Wrong size on WB_PendingTrades_C_GetSelectedEntry");
static_assert(offsetof(WB_PendingTrades_C_GetSelectedEntry, SelectedRequest) == 0x000000, "Member 'WB_PendingTrades_C_GetSelectedEntry::SelectedRequest' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_GetSelectedEntry, Temp_int_Array_Index_Variable) == 0x000008, "Member 'WB_PendingTrades_C_GetSelectedEntry::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_GetSelectedEntry, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'WB_PendingTrades_C_GetSelectedEntry::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_GetSelectedEntry, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'WB_PendingTrades_C_GetSelectedEntry::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_GetSelectedEntry, CallFunc_GetDisplayedEntryWidgets_ReturnValue) == 0x000018, "Member 'WB_PendingTrades_C_GetSelectedEntry::CallFunc_GetDisplayedEntryWidgets_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_GetSelectedEntry, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'WB_PendingTrades_C_GetSelectedEntry::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_GetSelectedEntry, CallFunc_Array_Get_Item) == 0x000030, "Member 'WB_PendingTrades_C_GetSelectedEntry::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_GetSelectedEntry, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'WB_PendingTrades_C_GetSelectedEntry::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_GetSelectedEntry, K2Node_DynamicCast_AsWB_Pending_Trade_Request) == 0x000040, "Member 'WB_PendingTrades_C_GetSelectedEntry::K2Node_DynamicCast_AsWB_Pending_Trade_Request' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_GetSelectedEntry, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'WB_PendingTrades_C_GetSelectedEntry::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_GetSelectedEntry, K2Node_DynamicCast_AsUser_Object_List_Entry) == 0x000050, "Member 'WB_PendingTrades_C_GetSelectedEntry::K2Node_DynamicCast_AsUser_Object_List_Entry' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_GetSelectedEntry, K2Node_DynamicCast_bSuccess_1) == 0x000060, "Member 'WB_PendingTrades_C_GetSelectedEntry::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_GetSelectedEntry, CallFunc_IsListItemSelected_ReturnValue) == 0x000061, "Member 'WB_PendingTrades_C_GetSelectedEntry::CallFunc_IsListItemSelected_ReturnValue' has a wrong offset!");

// Function WB_PendingTrades.WB_PendingTrades_C.GetTradeRequests
// 0x0001 (0x0001 - 0x0000)
struct WB_PendingTrades_C_GetTradeRequests final
{
public:
	bool                                          Incoming;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_PendingTrades_C_GetTradeRequests) == 0x000001, "Wrong alignment on WB_PendingTrades_C_GetTradeRequests");
static_assert(sizeof(WB_PendingTrades_C_GetTradeRequests) == 0x000001, "Wrong size on WB_PendingTrades_C_GetTradeRequests");
static_assert(offsetof(WB_PendingTrades_C_GetTradeRequests, Incoming) == 0x000000, "Member 'WB_PendingTrades_C_GetTradeRequests::Incoming' has a wrong offset!");

// Function WB_PendingTrades.WB_PendingTrades_C.InventoryUpdated
// 0x0048 (0x0048 - 0x0000)
struct WB_PendingTrades_C_InventoryUpdated final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UUserWidget*>                    CallFunc_GetDisplayedEntryWidgets_ReturnValue;     // 0x0010(0x0010)(ConstParm, ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_PendingTradeRequest_C*              K2Node_DynamicCast_AsWB_Pending_Trade_Request;     // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_PendingTrades_C_InventoryUpdated) == 0x000008, "Wrong alignment on WB_PendingTrades_C_InventoryUpdated");
static_assert(sizeof(WB_PendingTrades_C_InventoryUpdated) == 0x000048, "Wrong size on WB_PendingTrades_C_InventoryUpdated");
static_assert(offsetof(WB_PendingTrades_C_InventoryUpdated, Temp_int_Array_Index_Variable) == 0x000000, "Member 'WB_PendingTrades_C_InventoryUpdated::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_InventoryUpdated, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'WB_PendingTrades_C_InventoryUpdated::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_InventoryUpdated, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'WB_PendingTrades_C_InventoryUpdated::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_InventoryUpdated, CallFunc_GetDisplayedEntryWidgets_ReturnValue) == 0x000010, "Member 'WB_PendingTrades_C_InventoryUpdated::CallFunc_GetDisplayedEntryWidgets_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_InventoryUpdated, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'WB_PendingTrades_C_InventoryUpdated::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_InventoryUpdated, CallFunc_Array_Get_Item) == 0x000028, "Member 'WB_PendingTrades_C_InventoryUpdated::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_InventoryUpdated, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'WB_PendingTrades_C_InventoryUpdated::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_InventoryUpdated, K2Node_DynamicCast_AsWB_Pending_Trade_Request) == 0x000038, "Member 'WB_PendingTrades_C_InventoryUpdated::K2Node_DynamicCast_AsWB_Pending_Trade_Request' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_InventoryUpdated, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'WB_PendingTrades_C_InventoryUpdated::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function WB_PendingTrades.WB_PendingTrades_C.OnFailure_07C387D64A181177E6DC79BDC208883E
// 0x0010 (0x0010 - 0x0000)
struct WB_PendingTrades_C_OnFailure_07C387D64A181177E6DC79BDC208883E final
{
public:
	TArray<struct FTradeRequest>                  Requests;                                          // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WB_PendingTrades_C_OnFailure_07C387D64A181177E6DC79BDC208883E) == 0x000008, "Wrong alignment on WB_PendingTrades_C_OnFailure_07C387D64A181177E6DC79BDC208883E");
static_assert(sizeof(WB_PendingTrades_C_OnFailure_07C387D64A181177E6DC79BDC208883E) == 0x000010, "Wrong size on WB_PendingTrades_C_OnFailure_07C387D64A181177E6DC79BDC208883E");
static_assert(offsetof(WB_PendingTrades_C_OnFailure_07C387D64A181177E6DC79BDC208883E, Requests) == 0x000000, "Member 'WB_PendingTrades_C_OnFailure_07C387D64A181177E6DC79BDC208883E::Requests' has a wrong offset!");

// Function WB_PendingTrades.WB_PendingTrades_C.OnFailure_AEF6B7D24DBB72DE16FA2CB877898848
// 0x0010 (0x0010 - 0x0000)
struct WB_PendingTrades_C_OnFailure_AEF6B7D24DBB72DE16FA2CB877898848 final
{
public:
	TArray<struct FTradeRequest>                  Requests;                                          // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WB_PendingTrades_C_OnFailure_AEF6B7D24DBB72DE16FA2CB877898848) == 0x000008, "Wrong alignment on WB_PendingTrades_C_OnFailure_AEF6B7D24DBB72DE16FA2CB877898848");
static_assert(sizeof(WB_PendingTrades_C_OnFailure_AEF6B7D24DBB72DE16FA2CB877898848) == 0x000010, "Wrong size on WB_PendingTrades_C_OnFailure_AEF6B7D24DBB72DE16FA2CB877898848");
static_assert(offsetof(WB_PendingTrades_C_OnFailure_AEF6B7D24DBB72DE16FA2CB877898848, Requests) == 0x000000, "Member 'WB_PendingTrades_C_OnFailure_AEF6B7D24DBB72DE16FA2CB877898848::Requests' has a wrong offset!");

// Function WB_PendingTrades.WB_PendingTrades_C.OnPreviewKeyDown
// 0x03B0 (0x03B0 - 0x0000)
struct WB_PendingTrades_C_OnPreviewKeyDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FKeyEvent                              InKeyEvent;                                        // 0x0038(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FEventReply                            ReturnValue;                                       // 0x0078(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_OnPreviewKeyDown_ReturnValue;             // 0x0130(0x00B8)()
	struct FKey                                   CallFunc_GetGamepadAcceptKey_ReturnValue;          // 0x01E8(0x0018)(HasGetValueTypeHash)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0200(0x00B8)()
	struct FKey                                   CallFunc_GetKey_ReturnValue;                       // 0x02B8(0x0018)(HasGetValueTypeHash)
	struct FEventReply                            CallFunc_Handled_ReturnValue_1;                    // 0x02D0(0x00B8)()
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue;            // 0x0388(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_389[0x7];                                      // 0x0389(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   CallFunc_GetKey_ReturnValue_1;                     // 0x0390(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_1;          // 0x03A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_2;          // 0x03A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x03AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_PendingTrades_C_OnPreviewKeyDown) == 0x000008, "Wrong alignment on WB_PendingTrades_C_OnPreviewKeyDown");
static_assert(sizeof(WB_PendingTrades_C_OnPreviewKeyDown) == 0x0003B0, "Wrong size on WB_PendingTrades_C_OnPreviewKeyDown");
static_assert(offsetof(WB_PendingTrades_C_OnPreviewKeyDown, MyGeometry) == 0x000000, "Member 'WB_PendingTrades_C_OnPreviewKeyDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_OnPreviewKeyDown, InKeyEvent) == 0x000038, "Member 'WB_PendingTrades_C_OnPreviewKeyDown::InKeyEvent' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_OnPreviewKeyDown, ReturnValue) == 0x000078, "Member 'WB_PendingTrades_C_OnPreviewKeyDown::ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_OnPreviewKeyDown, CallFunc_OnPreviewKeyDown_ReturnValue) == 0x000130, "Member 'WB_PendingTrades_C_OnPreviewKeyDown::CallFunc_OnPreviewKeyDown_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_OnPreviewKeyDown, CallFunc_GetGamepadAcceptKey_ReturnValue) == 0x0001E8, "Member 'WB_PendingTrades_C_OnPreviewKeyDown::CallFunc_GetGamepadAcceptKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_OnPreviewKeyDown, CallFunc_Handled_ReturnValue) == 0x000200, "Member 'WB_PendingTrades_C_OnPreviewKeyDown::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_OnPreviewKeyDown, CallFunc_GetKey_ReturnValue) == 0x0002B8, "Member 'WB_PendingTrades_C_OnPreviewKeyDown::CallFunc_GetKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_OnPreviewKeyDown, CallFunc_Handled_ReturnValue_1) == 0x0002D0, "Member 'WB_PendingTrades_C_OnPreviewKeyDown::CallFunc_Handled_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_OnPreviewKeyDown, CallFunc_EqualEqual_KeyKey_ReturnValue) == 0x000388, "Member 'WB_PendingTrades_C_OnPreviewKeyDown::CallFunc_EqualEqual_KeyKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_OnPreviewKeyDown, CallFunc_GetKey_ReturnValue_1) == 0x000390, "Member 'WB_PendingTrades_C_OnPreviewKeyDown::CallFunc_GetKey_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_OnPreviewKeyDown, CallFunc_EqualEqual_KeyKey_ReturnValue_1) == 0x0003A8, "Member 'WB_PendingTrades_C_OnPreviewKeyDown::CallFunc_EqualEqual_KeyKey_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_OnPreviewKeyDown, CallFunc_EqualEqual_KeyKey_ReturnValue_2) == 0x0003A9, "Member 'WB_PendingTrades_C_OnPreviewKeyDown::CallFunc_EqualEqual_KeyKey_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_OnPreviewKeyDown, CallFunc_BooleanOR_ReturnValue) == 0x0003AA, "Member 'WB_PendingTrades_C_OnPreviewKeyDown::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function WB_PendingTrades.WB_PendingTrades_C.OnSuccess_07C387D64A181177E6DC79BDC208883E
// 0x0010 (0x0010 - 0x0000)
struct WB_PendingTrades_C_OnSuccess_07C387D64A181177E6DC79BDC208883E final
{
public:
	TArray<struct FTradeRequest>                  Requests;                                          // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WB_PendingTrades_C_OnSuccess_07C387D64A181177E6DC79BDC208883E) == 0x000008, "Wrong alignment on WB_PendingTrades_C_OnSuccess_07C387D64A181177E6DC79BDC208883E");
static_assert(sizeof(WB_PendingTrades_C_OnSuccess_07C387D64A181177E6DC79BDC208883E) == 0x000010, "Wrong size on WB_PendingTrades_C_OnSuccess_07C387D64A181177E6DC79BDC208883E");
static_assert(offsetof(WB_PendingTrades_C_OnSuccess_07C387D64A181177E6DC79BDC208883E, Requests) == 0x000000, "Member 'WB_PendingTrades_C_OnSuccess_07C387D64A181177E6DC79BDC208883E::Requests' has a wrong offset!");

// Function WB_PendingTrades.WB_PendingTrades_C.OnSuccess_AEF6B7D24DBB72DE16FA2CB877898848
// 0x0010 (0x0010 - 0x0000)
struct WB_PendingTrades_C_OnSuccess_AEF6B7D24DBB72DE16FA2CB877898848 final
{
public:
	TArray<struct FTradeRequest>                  Requests;                                          // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WB_PendingTrades_C_OnSuccess_AEF6B7D24DBB72DE16FA2CB877898848) == 0x000008, "Wrong alignment on WB_PendingTrades_C_OnSuccess_AEF6B7D24DBB72DE16FA2CB877898848");
static_assert(sizeof(WB_PendingTrades_C_OnSuccess_AEF6B7D24DBB72DE16FA2CB877898848) == 0x000010, "Wrong size on WB_PendingTrades_C_OnSuccess_AEF6B7D24DBB72DE16FA2CB877898848");
static_assert(offsetof(WB_PendingTrades_C_OnSuccess_AEF6B7D24DBB72DE16FA2CB877898848, Requests) == 0x000000, "Member 'WB_PendingTrades_C_OnSuccess_AEF6B7D24DBB72DE16FA2CB877898848::Requests' has a wrong offset!");

// Function WB_PendingTrades.WB_PendingTrades_C.PopulateList
// 0x0138 (0x0138 - 0x0000)
struct WB_PendingTrades_C_PopulateList final
{
public:
	TArray<struct FTradeRequest>                  Requests;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          IsIncoming;                                        // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UObject*>                        TradeObjects;                                      // 0x0018(0x0010)(Edit, BlueprintVisible)
	class UB_PendingTradeRquestData_C*            TradeRequestData;                                  // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTradeRequest                          TradeRequest;                                      // 0x0030(0x0050)(Edit, BlueprintVisible)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTradeRequest                          CallFunc_Array_Get_Item;                           // 0x00A8(0x0050)()
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x00FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StriStri_ReturnValue;          // 0x00FD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FE[0x2];                                       // 0x00FE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UObject* ObjectA, class UObject* ObjectB, bool* Result)> K2Node_CreateDelegate_OutputDelegate;              // 0x0100(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0114(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_115[0x3];                                      // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_1;            // 0x0118(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_1;            // 0x0120(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UB_PendingTradeRquestData_C*            CallFunc_CreateObject_Object;                      // 0x0130(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_PendingTrades_C_PopulateList) == 0x000008, "Wrong alignment on WB_PendingTrades_C_PopulateList");
static_assert(sizeof(WB_PendingTrades_C_PopulateList) == 0x000138, "Wrong size on WB_PendingTrades_C_PopulateList");
static_assert(offsetof(WB_PendingTrades_C_PopulateList, Requests) == 0x000000, "Member 'WB_PendingTrades_C_PopulateList::Requests' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_PopulateList, IsIncoming) == 0x000010, "Member 'WB_PendingTrades_C_PopulateList::IsIncoming' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_PopulateList, TradeObjects) == 0x000018, "Member 'WB_PendingTrades_C_PopulateList::TradeObjects' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_PopulateList, TradeRequestData) == 0x000028, "Member 'WB_PendingTrades_C_PopulateList::TradeRequestData' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_PopulateList, TradeRequest) == 0x000030, "Member 'WB_PendingTrades_C_PopulateList::TradeRequest' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_PopulateList, CallFunc_GetGameInstance_ReturnValue) == 0x000080, "Member 'WB_PendingTrades_C_PopulateList::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_PopulateList, CallFunc_Array_Length_ReturnValue) == 0x000088, "Member 'WB_PendingTrades_C_PopulateList::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_PopulateList, K2Node_DynamicCast_AsB_Game_Instance) == 0x000090, "Member 'WB_PendingTrades_C_PopulateList::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_PopulateList, K2Node_DynamicCast_bSuccess) == 0x000098, "Member 'WB_PendingTrades_C_PopulateList::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_PopulateList, CallFunc_Subtract_IntInt_ReturnValue) == 0x00009C, "Member 'WB_PendingTrades_C_PopulateList::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_PopulateList, Temp_int_Loop_Counter_Variable) == 0x0000A0, "Member 'WB_PendingTrades_C_PopulateList::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_PopulateList, CallFunc_Array_Get_Item) == 0x0000A8, "Member 'WB_PendingTrades_C_PopulateList::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_PopulateList, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x0000F8, "Member 'WB_PendingTrades_C_PopulateList::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_PopulateList, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0000FC, "Member 'WB_PendingTrades_C_PopulateList::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_PopulateList, CallFunc_EqualEqual_StriStri_ReturnValue) == 0x0000FD, "Member 'WB_PendingTrades_C_PopulateList::CallFunc_EqualEqual_StriStri_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_PopulateList, K2Node_CreateDelegate_OutputDelegate) == 0x000100, "Member 'WB_PendingTrades_C_PopulateList::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_PopulateList, CallFunc_Array_Length_ReturnValue_1) == 0x000110, "Member 'WB_PendingTrades_C_PopulateList::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_PopulateList, CallFunc_Greater_IntInt_ReturnValue) == 0x000114, "Member 'WB_PendingTrades_C_PopulateList::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_PopulateList, CallFunc_GetGameInstance_ReturnValue_1) == 0x000118, "Member 'WB_PendingTrades_C_PopulateList::CallFunc_GetGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_PopulateList, K2Node_DynamicCast_AsB_Game_Instance_1) == 0x000120, "Member 'WB_PendingTrades_C_PopulateList::K2Node_DynamicCast_AsB_Game_Instance_1' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_PopulateList, K2Node_DynamicCast_bSuccess_1) == 0x000128, "Member 'WB_PendingTrades_C_PopulateList::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_PopulateList, CallFunc_Array_Add_ReturnValue) == 0x00012C, "Member 'WB_PendingTrades_C_PopulateList::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_PopulateList, CallFunc_CreateObject_Object) == 0x000130, "Member 'WB_PendingTrades_C_PopulateList::CallFunc_CreateObject_Object' has a wrong offset!");

// Function WB_PendingTrades.WB_PendingTrades_C.RemovePendingRequest
// 0x0040 (0x0040 - 0x0000)
struct WB_PendingTrades_C_RemovePendingRequest final
{
public:
	class UB_PendingTradeRquestData_C*            TradeRequestData;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         RemovedIndex;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_GetItemAt_ReturnValue;                    // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetIndexForItem_ReturnValue;              // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumItems_ReturnValue;                  // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_PendingTrades_C_RemovePendingRequest) == 0x000008, "Wrong alignment on WB_PendingTrades_C_RemovePendingRequest");
static_assert(sizeof(WB_PendingTrades_C_RemovePendingRequest) == 0x000040, "Wrong size on WB_PendingTrades_C_RemovePendingRequest");
static_assert(offsetof(WB_PendingTrades_C_RemovePendingRequest, TradeRequestData) == 0x000000, "Member 'WB_PendingTrades_C_RemovePendingRequest::TradeRequestData' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_RemovePendingRequest, RemovedIndex) == 0x000008, "Member 'WB_PendingTrades_C_RemovePendingRequest::RemovedIndex' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_RemovePendingRequest, CallFunc_GetGameInstance_ReturnValue) == 0x000010, "Member 'WB_PendingTrades_C_RemovePendingRequest::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_RemovePendingRequest, K2Node_DynamicCast_AsB_Game_Instance) == 0x000018, "Member 'WB_PendingTrades_C_RemovePendingRequest::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_RemovePendingRequest, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'WB_PendingTrades_C_RemovePendingRequest::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_RemovePendingRequest, CallFunc_Subtract_IntInt_ReturnValue) == 0x000024, "Member 'WB_PendingTrades_C_RemovePendingRequest::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_RemovePendingRequest, CallFunc_GetItemAt_ReturnValue) == 0x000028, "Member 'WB_PendingTrades_C_RemovePendingRequest::CallFunc_GetItemAt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_RemovePendingRequest, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'WB_PendingTrades_C_RemovePendingRequest::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_RemovePendingRequest, CallFunc_GetIndexForItem_ReturnValue) == 0x000034, "Member 'WB_PendingTrades_C_RemovePendingRequest::CallFunc_GetIndexForItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_RemovePendingRequest, CallFunc_GetNumItems_ReturnValue) == 0x000038, "Member 'WB_PendingTrades_C_RemovePendingRequest::CallFunc_GetNumItems_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_RemovePendingRequest, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00003C, "Member 'WB_PendingTrades_C_RemovePendingRequest::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function WB_PendingTrades.WB_PendingTrades_C.SortByDate
// 0x0038 (0x0038 - 0x0000)
struct WB_PendingTrades_C_SortByDate final
{
public:
	class UObject*                                ObjectA;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                ObjectB;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_PendingTradeRquestData_C*            K2Node_DynamicCast_AsB_Pending_Trade_Rquest_Data;  // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_PendingTradeRquestData_C*            K2Node_DynamicCast_AsB_Pending_Trade_Rquest_Data_1; // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_Int64Int64_ReturnValue;           // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_PendingTrades_C_SortByDate) == 0x000008, "Wrong alignment on WB_PendingTrades_C_SortByDate");
static_assert(sizeof(WB_PendingTrades_C_SortByDate) == 0x000038, "Wrong size on WB_PendingTrades_C_SortByDate");
static_assert(offsetof(WB_PendingTrades_C_SortByDate, ObjectA) == 0x000000, "Member 'WB_PendingTrades_C_SortByDate::ObjectA' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_SortByDate, ObjectB) == 0x000008, "Member 'WB_PendingTrades_C_SortByDate::ObjectB' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_SortByDate, Result) == 0x000010, "Member 'WB_PendingTrades_C_SortByDate::Result' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_SortByDate, K2Node_DynamicCast_AsB_Pending_Trade_Rquest_Data) == 0x000018, "Member 'WB_PendingTrades_C_SortByDate::K2Node_DynamicCast_AsB_Pending_Trade_Rquest_Data' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_SortByDate, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'WB_PendingTrades_C_SortByDate::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_SortByDate, K2Node_DynamicCast_AsB_Pending_Trade_Rquest_Data_1) == 0x000028, "Member 'WB_PendingTrades_C_SortByDate::K2Node_DynamicCast_AsB_Pending_Trade_Rquest_Data_1' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_SortByDate, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'WB_PendingTrades_C_SortByDate::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_SortByDate, CallFunc_Greater_Int64Int64_ReturnValue) == 0x000031, "Member 'WB_PendingTrades_C_SortByDate::CallFunc_Greater_Int64Int64_ReturnValue' has a wrong offset!");

// Function WB_PendingTrades.WB_PendingTrades_C.SpecialKeyPressed
// 0x0010 (0x0010 - 0x0000)
struct WB_PendingTrades_C_SpecialKeyPressed final
{
public:
	class UWB_PendingTradeRequest_C*              CallFunc_GetSelectedEntry_SelectedRequest;         // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_PendingTrades_C_SpecialKeyPressed) == 0x000008, "Wrong alignment on WB_PendingTrades_C_SpecialKeyPressed");
static_assert(sizeof(WB_PendingTrades_C_SpecialKeyPressed) == 0x000010, "Wrong size on WB_PendingTrades_C_SpecialKeyPressed");
static_assert(offsetof(WB_PendingTrades_C_SpecialKeyPressed, CallFunc_GetSelectedEntry_SelectedRequest) == 0x000000, "Member 'WB_PendingTrades_C_SpecialKeyPressed::CallFunc_GetSelectedEntry_SelectedRequest' has a wrong offset!");
static_assert(offsetof(WB_PendingTrades_C_SpecialKeyPressed, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'WB_PendingTrades_C_SpecialKeyPressed::CallFunc_IsValid_ReturnValue' has a wrong offset!");

}

