#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_BasePropLibrary

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function B_BasePropLibrary.B_BasePropLibrary_C.SetControlledByWitch
// 0x0018 (0x0018 - 0x0000)
struct B_BasePropLibrary_C_SetControlledByWitch final
{
public:
	class AB_PropPawnPhysics_C*                   Witch;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Template;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_BasePropLibrary_C_SetControlledByWitch) == 0x000008, "Wrong alignment on B_BasePropLibrary_C_SetControlledByWitch");
static_assert(sizeof(B_BasePropLibrary_C_SetControlledByWitch) == 0x000018, "Wrong size on B_BasePropLibrary_C_SetControlledByWitch");
static_assert(offsetof(B_BasePropLibrary_C_SetControlledByWitch, Witch) == 0x000000, "Member 'B_BasePropLibrary_C_SetControlledByWitch::Witch' has a wrong offset!");
static_assert(offsetof(B_BasePropLibrary_C_SetControlledByWitch, Template) == 0x000008, "Member 'B_BasePropLibrary_C_SetControlledByWitch::Template' has a wrong offset!");
static_assert(offsetof(B_BasePropLibrary_C_SetControlledByWitch, __WorldContext) == 0x000010, "Member 'B_BasePropLibrary_C_SetControlledByWitch::__WorldContext' has a wrong offset!");

// Function B_BasePropLibrary.B_BasePropLibrary_C.UpdateCameraDistance
// 0x0068 (0x0068 - 0x0000)
struct B_BasePropLibrary_C_UpdateCameraDistance final
{
public:
	class USpringArmComponent*                    SpringArm;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Prop;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IIProp_C>              K2Node_DynamicCast_AsIProp;                        // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C96[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetCameraDistance_CameraDistance;         // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_TargetArmLength_ImplicitCast;   // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_BasePropLibrary_C_UpdateCameraDistance) == 0x000008, "Wrong alignment on B_BasePropLibrary_C_UpdateCameraDistance");
static_assert(sizeof(B_BasePropLibrary_C_UpdateCameraDistance) == 0x000068, "Wrong size on B_BasePropLibrary_C_UpdateCameraDistance");
static_assert(offsetof(B_BasePropLibrary_C_UpdateCameraDistance, SpringArm) == 0x000000, "Member 'B_BasePropLibrary_C_UpdateCameraDistance::SpringArm' has a wrong offset!");
static_assert(offsetof(B_BasePropLibrary_C_UpdateCameraDistance, Prop) == 0x000008, "Member 'B_BasePropLibrary_C_UpdateCameraDistance::Prop' has a wrong offset!");
static_assert(offsetof(B_BasePropLibrary_C_UpdateCameraDistance, __WorldContext) == 0x000010, "Member 'B_BasePropLibrary_C_UpdateCameraDistance::__WorldContext' has a wrong offset!");
static_assert(offsetof(B_BasePropLibrary_C_UpdateCameraDistance, K2Node_DynamicCast_AsIProp) == 0x000018, "Member 'B_BasePropLibrary_C_UpdateCameraDistance::K2Node_DynamicCast_AsIProp' has a wrong offset!");
static_assert(offsetof(B_BasePropLibrary_C_UpdateCameraDistance, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'B_BasePropLibrary_C_UpdateCameraDistance::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_BasePropLibrary_C_UpdateCameraDistance, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000030, "Member 'B_BasePropLibrary_C_UpdateCameraDistance::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_BasePropLibrary_C_UpdateCameraDistance, CallFunc_GetCameraDistance_CameraDistance) == 0x000038, "Member 'B_BasePropLibrary_C_UpdateCameraDistance::CallFunc_GetCameraDistance_CameraDistance' has a wrong offset!");
static_assert(offsetof(B_BasePropLibrary_C_UpdateCameraDistance, CallFunc_MakeVector_ReturnValue) == 0x000040, "Member 'B_BasePropLibrary_C_UpdateCameraDistance::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_BasePropLibrary_C_UpdateCameraDistance, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x000058, "Member 'B_BasePropLibrary_C_UpdateCameraDistance::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_BasePropLibrary_C_UpdateCameraDistance, K2Node_VariableSet_TargetArmLength_ImplicitCast) == 0x000060, "Member 'B_BasePropLibrary_C_UpdateCameraDistance::K2Node_VariableSet_TargetArmLength_ImplicitCast' has a wrong offset!");

// Function B_BasePropLibrary.B_BasePropLibrary_C.UpdateHealth
// 0x0068 (0x0068 - 0x0000)
struct B_BasePropLibrary_C_UpdateHealth final
{
public:
	class UB_DamageHandler_C*                     DamageHandler;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Prop;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetHealth_ReturnHealth;                   // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UB_MatchParametersSubsystem_C*          CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IIProp_C>              K2Node_DynamicCast_AsIProp;                        // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C97[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetMaxHealth_MaxHealth;                   // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetMaxHealth_ReturnMaxHealth;             // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_BasePropLibrary_C_UpdateHealth) == 0x000008, "Wrong alignment on B_BasePropLibrary_C_UpdateHealth");
static_assert(sizeof(B_BasePropLibrary_C_UpdateHealth) == 0x000068, "Wrong size on B_BasePropLibrary_C_UpdateHealth");
static_assert(offsetof(B_BasePropLibrary_C_UpdateHealth, DamageHandler) == 0x000000, "Member 'B_BasePropLibrary_C_UpdateHealth::DamageHandler' has a wrong offset!");
static_assert(offsetof(B_BasePropLibrary_C_UpdateHealth, Prop) == 0x000008, "Member 'B_BasePropLibrary_C_UpdateHealth::Prop' has a wrong offset!");
static_assert(offsetof(B_BasePropLibrary_C_UpdateHealth, __WorldContext) == 0x000010, "Member 'B_BasePropLibrary_C_UpdateHealth::__WorldContext' has a wrong offset!");
static_assert(offsetof(B_BasePropLibrary_C_UpdateHealth, CallFunc_GetHealth_ReturnHealth) == 0x000018, "Member 'B_BasePropLibrary_C_UpdateHealth::CallFunc_GetHealth_ReturnHealth' has a wrong offset!");
static_assert(offsetof(B_BasePropLibrary_C_UpdateHealth, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000020, "Member 'B_BasePropLibrary_C_UpdateHealth::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_BasePropLibrary_C_UpdateHealth, K2Node_DynamicCast_AsIProp) == 0x000028, "Member 'B_BasePropLibrary_C_UpdateHealth::K2Node_DynamicCast_AsIProp' has a wrong offset!");
static_assert(offsetof(B_BasePropLibrary_C_UpdateHealth, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'B_BasePropLibrary_C_UpdateHealth::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_BasePropLibrary_C_UpdateHealth, CallFunc_GetMaxHealth_MaxHealth) == 0x000040, "Member 'B_BasePropLibrary_C_UpdateHealth::CallFunc_GetMaxHealth_MaxHealth' has a wrong offset!");
static_assert(offsetof(B_BasePropLibrary_C_UpdateHealth, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000048, "Member 'B_BasePropLibrary_C_UpdateHealth::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_BasePropLibrary_C_UpdateHealth, CallFunc_GetMaxHealth_ReturnMaxHealth) == 0x000050, "Member 'B_BasePropLibrary_C_UpdateHealth::CallFunc_GetMaxHealth_ReturnMaxHealth' has a wrong offset!");
static_assert(offsetof(B_BasePropLibrary_C_UpdateHealth, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000058, "Member 'B_BasePropLibrary_C_UpdateHealth::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_BasePropLibrary_C_UpdateHealth, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000060, "Member 'B_BasePropLibrary_C_UpdateHealth::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");

// Function B_BasePropLibrary.B_BasePropLibrary_C.UpdateName
// 0x0040 (0x0040 - 0x0000)
struct B_BasePropLibrary_C_UpdateName final
{
public:
	class AB_PropPawnPhysics_C*                   PropPawnPhysics;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Prop;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IIProp_C>              K2Node_DynamicCast_AsIProp;                        // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C98[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetName_Name;                             // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(B_BasePropLibrary_C_UpdateName) == 0x000008, "Wrong alignment on B_BasePropLibrary_C_UpdateName");
static_assert(sizeof(B_BasePropLibrary_C_UpdateName) == 0x000040, "Wrong size on B_BasePropLibrary_C_UpdateName");
static_assert(offsetof(B_BasePropLibrary_C_UpdateName, PropPawnPhysics) == 0x000000, "Member 'B_BasePropLibrary_C_UpdateName::PropPawnPhysics' has a wrong offset!");
static_assert(offsetof(B_BasePropLibrary_C_UpdateName, Prop) == 0x000008, "Member 'B_BasePropLibrary_C_UpdateName::Prop' has a wrong offset!");
static_assert(offsetof(B_BasePropLibrary_C_UpdateName, __WorldContext) == 0x000010, "Member 'B_BasePropLibrary_C_UpdateName::__WorldContext' has a wrong offset!");
static_assert(offsetof(B_BasePropLibrary_C_UpdateName, K2Node_DynamicCast_AsIProp) == 0x000018, "Member 'B_BasePropLibrary_C_UpdateName::K2Node_DynamicCast_AsIProp' has a wrong offset!");
static_assert(offsetof(B_BasePropLibrary_C_UpdateName, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'B_BasePropLibrary_C_UpdateName::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_BasePropLibrary_C_UpdateName, CallFunc_GetName_Name) == 0x000030, "Member 'B_BasePropLibrary_C_UpdateName::CallFunc_GetName_Name' has a wrong offset!");

// Function B_BasePropLibrary.B_BasePropLibrary_C.UpdateSpringArmLocation
// 0x0130 (0x0130 - 0x0000)
struct B_BasePropLibrary_C_UpdateSpringArmLocation final
{
public:
	class USpringArmComponent*                    SpringArm;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Prop;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IIProp_C>              K2Node_DynamicCast_AsIProp;                        // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C99[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetCenter_Center;                         // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0048(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(B_BasePropLibrary_C_UpdateSpringArmLocation) == 0x000008, "Wrong alignment on B_BasePropLibrary_C_UpdateSpringArmLocation");
static_assert(sizeof(B_BasePropLibrary_C_UpdateSpringArmLocation) == 0x000130, "Wrong size on B_BasePropLibrary_C_UpdateSpringArmLocation");
static_assert(offsetof(B_BasePropLibrary_C_UpdateSpringArmLocation, SpringArm) == 0x000000, "Member 'B_BasePropLibrary_C_UpdateSpringArmLocation::SpringArm' has a wrong offset!");
static_assert(offsetof(B_BasePropLibrary_C_UpdateSpringArmLocation, Prop) == 0x000008, "Member 'B_BasePropLibrary_C_UpdateSpringArmLocation::Prop' has a wrong offset!");
static_assert(offsetof(B_BasePropLibrary_C_UpdateSpringArmLocation, __WorldContext) == 0x000010, "Member 'B_BasePropLibrary_C_UpdateSpringArmLocation::__WorldContext' has a wrong offset!");
static_assert(offsetof(B_BasePropLibrary_C_UpdateSpringArmLocation, K2Node_DynamicCast_AsIProp) == 0x000018, "Member 'B_BasePropLibrary_C_UpdateSpringArmLocation::K2Node_DynamicCast_AsIProp' has a wrong offset!");
static_assert(offsetof(B_BasePropLibrary_C_UpdateSpringArmLocation, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'B_BasePropLibrary_C_UpdateSpringArmLocation::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_BasePropLibrary_C_UpdateSpringArmLocation, CallFunc_GetCenter_Center) == 0x000030, "Member 'B_BasePropLibrary_C_UpdateSpringArmLocation::CallFunc_GetCenter_Center' has a wrong offset!");
static_assert(offsetof(B_BasePropLibrary_C_UpdateSpringArmLocation, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000048, "Member 'B_BasePropLibrary_C_UpdateSpringArmLocation::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");

}

