#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_MenuPlayerController

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_MenuPlayerController.B_MenuPlayerController_C
// 0x0020 (0x0878 - 0x0858)
class AB_MenuPlayerController_C final : public APlayerController
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0858(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWB_MasterScreen_C*                     MasterScreen;                                      // 0x0860(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        RotationSpeed;                                     // 0x0868(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bMouseDown;                                        // 0x0870(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsRotating;                                       // 0x0871(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_B_MenuPlayerController(int32 EntryPoint);
	void GetMasterScreen(class UWB_MasterScreen_C** Param_MasterScreen);
	void InpActEvt_Fire_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_Fire_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_LeftMouseButton_K2Node_InputKeyEvent_2(const struct FKey& Key);
	void InpActEvt_LeftMouseButton_K2Node_InputKeyEvent_3(const struct FKey& Key);
	void InpActEvt_RightMouseButton_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_RightMouseButton_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpAxisEvt_Turn_K2Node_InputAxisEvent_4(float AxisValue);
	void InpAxisKeyEvt_Gamepad_LeftX_K2Node_InputAxisKeyEvent_0(float AxisValue);
	void InputRightThumbstickXMinusAxis(double AxisValue);
	void RotateSkinPreviewMesh(double DeltaRotation_Yaw);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_MenuPlayerController_C">();
	}
	static class AB_MenuPlayerController_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_MenuPlayerController_C>();
	}
};
static_assert(alignof(AB_MenuPlayerController_C) == 0x000008, "Wrong alignment on AB_MenuPlayerController_C");
static_assert(sizeof(AB_MenuPlayerController_C) == 0x000878, "Wrong size on AB_MenuPlayerController_C");
static_assert(offsetof(AB_MenuPlayerController_C, UberGraphFrame) == 0x000858, "Member 'AB_MenuPlayerController_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AB_MenuPlayerController_C, MasterScreen) == 0x000860, "Member 'AB_MenuPlayerController_C::MasterScreen' has a wrong offset!");
static_assert(offsetof(AB_MenuPlayerController_C, RotationSpeed) == 0x000868, "Member 'AB_MenuPlayerController_C::RotationSpeed' has a wrong offset!");
static_assert(offsetof(AB_MenuPlayerController_C, bMouseDown) == 0x000870, "Member 'AB_MenuPlayerController_C::bMouseDown' has a wrong offset!");
static_assert(offsetof(AB_MenuPlayerController_C, bIsRotating) == 0x000871, "Member 'AB_MenuPlayerController_C::bIsRotating' has a wrong offset!");

}

