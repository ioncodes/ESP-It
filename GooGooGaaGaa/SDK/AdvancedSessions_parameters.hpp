#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AdvancedSessions

#include "Basic.hpp"

#include "AdvancedSessions_structs.hpp"
#include "OnlineSubsystemUtils_structs.hpp"


namespace SDK::Params
{

// Function AdvancedSessions.AdvancedExternalUILibrary.ShowAccountUpgradeUI
// 0x0028 (0x0028 - 0x0000)
struct AdvancedExternalUILibrary_ShowAccountUpgradeUI final
{
public:
	struct FBPUniqueNetId                         PlayerRequestingAccountUpgradeUI;                  // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	EBlueprintResultSwitch                        Result;                                            // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19CA[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedExternalUILibrary_ShowAccountUpgradeUI) == 0x000008, "Wrong alignment on AdvancedExternalUILibrary_ShowAccountUpgradeUI");
static_assert(sizeof(AdvancedExternalUILibrary_ShowAccountUpgradeUI) == 0x000028, "Wrong size on AdvancedExternalUILibrary_ShowAccountUpgradeUI");
static_assert(offsetof(AdvancedExternalUILibrary_ShowAccountUpgradeUI, PlayerRequestingAccountUpgradeUI) == 0x000000, "Member 'AdvancedExternalUILibrary_ShowAccountUpgradeUI::PlayerRequestingAccountUpgradeUI' has a wrong offset!");
static_assert(offsetof(AdvancedExternalUILibrary_ShowAccountUpgradeUI, Result) == 0x000020, "Member 'AdvancedExternalUILibrary_ShowAccountUpgradeUI::Result' has a wrong offset!");

// Function AdvancedSessions.AdvancedExternalUILibrary.ShowFriendsUI
// 0x0010 (0x0010 - 0x0000)
struct AdvancedExternalUILibrary_ShowFriendsUI final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBlueprintResultSwitch                        Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19CB[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedExternalUILibrary_ShowFriendsUI) == 0x000008, "Wrong alignment on AdvancedExternalUILibrary_ShowFriendsUI");
static_assert(sizeof(AdvancedExternalUILibrary_ShowFriendsUI) == 0x000010, "Wrong size on AdvancedExternalUILibrary_ShowFriendsUI");
static_assert(offsetof(AdvancedExternalUILibrary_ShowFriendsUI, PlayerController) == 0x000000, "Member 'AdvancedExternalUILibrary_ShowFriendsUI::PlayerController' has a wrong offset!");
static_assert(offsetof(AdvancedExternalUILibrary_ShowFriendsUI, Result) == 0x000008, "Member 'AdvancedExternalUILibrary_ShowFriendsUI::Result' has a wrong offset!");

// Function AdvancedSessions.AdvancedExternalUILibrary.ShowInviteUI
// 0x0010 (0x0010 - 0x0000)
struct AdvancedExternalUILibrary_ShowInviteUI final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBlueprintResultSwitch                        Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19CC[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedExternalUILibrary_ShowInviteUI) == 0x000008, "Wrong alignment on AdvancedExternalUILibrary_ShowInviteUI");
static_assert(sizeof(AdvancedExternalUILibrary_ShowInviteUI) == 0x000010, "Wrong size on AdvancedExternalUILibrary_ShowInviteUI");
static_assert(offsetof(AdvancedExternalUILibrary_ShowInviteUI, PlayerController) == 0x000000, "Member 'AdvancedExternalUILibrary_ShowInviteUI::PlayerController' has a wrong offset!");
static_assert(offsetof(AdvancedExternalUILibrary_ShowInviteUI, Result) == 0x000008, "Member 'AdvancedExternalUILibrary_ShowInviteUI::Result' has a wrong offset!");

// Function AdvancedSessions.AdvancedExternalUILibrary.ShowLeaderBoardUI
// 0x0018 (0x0018 - 0x0000)
struct AdvancedExternalUILibrary_ShowLeaderBoardUI final
{
public:
	class FString                                 LeaderboardName;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBlueprintResultSwitch                        Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19CD[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedExternalUILibrary_ShowLeaderBoardUI) == 0x000008, "Wrong alignment on AdvancedExternalUILibrary_ShowLeaderBoardUI");
static_assert(sizeof(AdvancedExternalUILibrary_ShowLeaderBoardUI) == 0x000018, "Wrong size on AdvancedExternalUILibrary_ShowLeaderBoardUI");
static_assert(offsetof(AdvancedExternalUILibrary_ShowLeaderBoardUI, LeaderboardName) == 0x000000, "Member 'AdvancedExternalUILibrary_ShowLeaderBoardUI::LeaderboardName' has a wrong offset!");
static_assert(offsetof(AdvancedExternalUILibrary_ShowLeaderBoardUI, Result) == 0x000010, "Member 'AdvancedExternalUILibrary_ShowLeaderBoardUI::Result' has a wrong offset!");

// Function AdvancedSessions.AdvancedExternalUILibrary.ShowProfileUI
// 0x0048 (0x0048 - 0x0000)
struct AdvancedExternalUILibrary_ShowProfileUI final
{
public:
	struct FBPUniqueNetId                         PlayerViewingProfile;                              // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	struct FBPUniqueNetId                         PlayerToViewProfileOf;                             // 0x0020(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	EBlueprintResultSwitch                        Result;                                            // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19CE[0x7];                                     // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedExternalUILibrary_ShowProfileUI) == 0x000008, "Wrong alignment on AdvancedExternalUILibrary_ShowProfileUI");
static_assert(sizeof(AdvancedExternalUILibrary_ShowProfileUI) == 0x000048, "Wrong size on AdvancedExternalUILibrary_ShowProfileUI");
static_assert(offsetof(AdvancedExternalUILibrary_ShowProfileUI, PlayerViewingProfile) == 0x000000, "Member 'AdvancedExternalUILibrary_ShowProfileUI::PlayerViewingProfile' has a wrong offset!");
static_assert(offsetof(AdvancedExternalUILibrary_ShowProfileUI, PlayerToViewProfileOf) == 0x000020, "Member 'AdvancedExternalUILibrary_ShowProfileUI::PlayerToViewProfileOf' has a wrong offset!");
static_assert(offsetof(AdvancedExternalUILibrary_ShowProfileUI, Result) == 0x000040, "Member 'AdvancedExternalUILibrary_ShowProfileUI::Result' has a wrong offset!");

// Function AdvancedSessions.AdvancedExternalUILibrary.ShowWebURLUI
// 0x0040 (0x0040 - 0x0000)
struct AdvancedExternalUILibrary_ShowWebURLUI final
{
public:
	class FString                                 URLToShow;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBlueprintResultSwitch                        Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19CF[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         AllowedDomains;                                    // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bEmbedded;                                         // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowBackground;                                   // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowCloseButton;                                  // 0x002A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19D0[0x1];                                     // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OffsetX;                                           // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OffsetY;                                           // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeX;                                             // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeY;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19D1[0x4];                                     // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedExternalUILibrary_ShowWebURLUI) == 0x000008, "Wrong alignment on AdvancedExternalUILibrary_ShowWebURLUI");
static_assert(sizeof(AdvancedExternalUILibrary_ShowWebURLUI) == 0x000040, "Wrong size on AdvancedExternalUILibrary_ShowWebURLUI");
static_assert(offsetof(AdvancedExternalUILibrary_ShowWebURLUI, URLToShow) == 0x000000, "Member 'AdvancedExternalUILibrary_ShowWebURLUI::URLToShow' has a wrong offset!");
static_assert(offsetof(AdvancedExternalUILibrary_ShowWebURLUI, Result) == 0x000010, "Member 'AdvancedExternalUILibrary_ShowWebURLUI::Result' has a wrong offset!");
static_assert(offsetof(AdvancedExternalUILibrary_ShowWebURLUI, AllowedDomains) == 0x000018, "Member 'AdvancedExternalUILibrary_ShowWebURLUI::AllowedDomains' has a wrong offset!");
static_assert(offsetof(AdvancedExternalUILibrary_ShowWebURLUI, bEmbedded) == 0x000028, "Member 'AdvancedExternalUILibrary_ShowWebURLUI::bEmbedded' has a wrong offset!");
static_assert(offsetof(AdvancedExternalUILibrary_ShowWebURLUI, bShowBackground) == 0x000029, "Member 'AdvancedExternalUILibrary_ShowWebURLUI::bShowBackground' has a wrong offset!");
static_assert(offsetof(AdvancedExternalUILibrary_ShowWebURLUI, bShowCloseButton) == 0x00002A, "Member 'AdvancedExternalUILibrary_ShowWebURLUI::bShowCloseButton' has a wrong offset!");
static_assert(offsetof(AdvancedExternalUILibrary_ShowWebURLUI, OffsetX) == 0x00002C, "Member 'AdvancedExternalUILibrary_ShowWebURLUI::OffsetX' has a wrong offset!");
static_assert(offsetof(AdvancedExternalUILibrary_ShowWebURLUI, OffsetY) == 0x000030, "Member 'AdvancedExternalUILibrary_ShowWebURLUI::OffsetY' has a wrong offset!");
static_assert(offsetof(AdvancedExternalUILibrary_ShowWebURLUI, SizeX) == 0x000034, "Member 'AdvancedExternalUILibrary_ShowWebURLUI::SizeX' has a wrong offset!");
static_assert(offsetof(AdvancedExternalUILibrary_ShowWebURLUI, SizeY) == 0x000038, "Member 'AdvancedExternalUILibrary_ShowWebURLUI::SizeY' has a wrong offset!");

// Function AdvancedSessions.AdvancedFriendsGameInstance.OnPlayerLoginChanged
// 0x0004 (0x0004 - 0x0000)
struct AdvancedFriendsGameInstance_OnPlayerLoginChanged final
{
public:
	int32                                         PlayerNum;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedFriendsGameInstance_OnPlayerLoginChanged) == 0x000004, "Wrong alignment on AdvancedFriendsGameInstance_OnPlayerLoginChanged");
static_assert(sizeof(AdvancedFriendsGameInstance_OnPlayerLoginChanged) == 0x000004, "Wrong size on AdvancedFriendsGameInstance_OnPlayerLoginChanged");
static_assert(offsetof(AdvancedFriendsGameInstance_OnPlayerLoginChanged, PlayerNum) == 0x000000, "Member 'AdvancedFriendsGameInstance_OnPlayerLoginChanged::PlayerNum' has a wrong offset!");

// Function AdvancedSessions.AdvancedFriendsGameInstance.OnPlayerLoginStatusChanged
// 0x0028 (0x0028 - 0x0000)
struct AdvancedFriendsGameInstance_OnPlayerLoginStatusChanged final
{
public:
	int32                                         PlayerNum;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBPLoginStatus                                PreviousStatus;                                    // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBPLoginStatus                                NewStatus;                                         // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19D3[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBPUniqueNetId                         NewPlayerUniqueNetID;                              // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedFriendsGameInstance_OnPlayerLoginStatusChanged) == 0x000008, "Wrong alignment on AdvancedFriendsGameInstance_OnPlayerLoginStatusChanged");
static_assert(sizeof(AdvancedFriendsGameInstance_OnPlayerLoginStatusChanged) == 0x000028, "Wrong size on AdvancedFriendsGameInstance_OnPlayerLoginStatusChanged");
static_assert(offsetof(AdvancedFriendsGameInstance_OnPlayerLoginStatusChanged, PlayerNum) == 0x000000, "Member 'AdvancedFriendsGameInstance_OnPlayerLoginStatusChanged::PlayerNum' has a wrong offset!");
static_assert(offsetof(AdvancedFriendsGameInstance_OnPlayerLoginStatusChanged, PreviousStatus) == 0x000004, "Member 'AdvancedFriendsGameInstance_OnPlayerLoginStatusChanged::PreviousStatus' has a wrong offset!");
static_assert(offsetof(AdvancedFriendsGameInstance_OnPlayerLoginStatusChanged, NewStatus) == 0x000005, "Member 'AdvancedFriendsGameInstance_OnPlayerLoginStatusChanged::NewStatus' has a wrong offset!");
static_assert(offsetof(AdvancedFriendsGameInstance_OnPlayerLoginStatusChanged, NewPlayerUniqueNetID) == 0x000008, "Member 'AdvancedFriendsGameInstance_OnPlayerLoginStatusChanged::NewPlayerUniqueNetID' has a wrong offset!");

// Function AdvancedSessions.AdvancedFriendsGameInstance.OnPlayerTalkingStateChanged
// 0x0028 (0x0028 - 0x0000)
struct AdvancedFriendsGameInstance_OnPlayerTalkingStateChanged final
{
public:
	struct FBPUniqueNetId                         PlayerId;                                          // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          bIsTalking;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19D4[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedFriendsGameInstance_OnPlayerTalkingStateChanged) == 0x000008, "Wrong alignment on AdvancedFriendsGameInstance_OnPlayerTalkingStateChanged");
static_assert(sizeof(AdvancedFriendsGameInstance_OnPlayerTalkingStateChanged) == 0x000028, "Wrong size on AdvancedFriendsGameInstance_OnPlayerTalkingStateChanged");
static_assert(offsetof(AdvancedFriendsGameInstance_OnPlayerTalkingStateChanged, PlayerId) == 0x000000, "Member 'AdvancedFriendsGameInstance_OnPlayerTalkingStateChanged::PlayerId' has a wrong offset!");
static_assert(offsetof(AdvancedFriendsGameInstance_OnPlayerTalkingStateChanged, bIsTalking) == 0x000020, "Member 'AdvancedFriendsGameInstance_OnPlayerTalkingStateChanged::bIsTalking' has a wrong offset!");

// Function AdvancedSessions.AdvancedFriendsGameInstance.OnSessionInviteAccepted
// 0x0148 (0x0148 - 0x0000)
struct AdvancedFriendsGameInstance_OnSessionInviteAccepted final
{
public:
	int32                                         LocalPlayerNum;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19D5[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBPUniqueNetId                         PersonInvited;                                     // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
	struct FBlueprintSessionResult                SessionToJoin;                                     // 0x0028(0x0120)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedFriendsGameInstance_OnSessionInviteAccepted) == 0x000008, "Wrong alignment on AdvancedFriendsGameInstance_OnSessionInviteAccepted");
static_assert(sizeof(AdvancedFriendsGameInstance_OnSessionInviteAccepted) == 0x000148, "Wrong size on AdvancedFriendsGameInstance_OnSessionInviteAccepted");
static_assert(offsetof(AdvancedFriendsGameInstance_OnSessionInviteAccepted, LocalPlayerNum) == 0x000000, "Member 'AdvancedFriendsGameInstance_OnSessionInviteAccepted::LocalPlayerNum' has a wrong offset!");
static_assert(offsetof(AdvancedFriendsGameInstance_OnSessionInviteAccepted, PersonInvited) == 0x000008, "Member 'AdvancedFriendsGameInstance_OnSessionInviteAccepted::PersonInvited' has a wrong offset!");
static_assert(offsetof(AdvancedFriendsGameInstance_OnSessionInviteAccepted, SessionToJoin) == 0x000028, "Member 'AdvancedFriendsGameInstance_OnSessionInviteAccepted::SessionToJoin' has a wrong offset!");

// Function AdvancedSessions.AdvancedFriendsGameInstance.OnSessionInviteReceived
// 0x0158 (0x0158 - 0x0000)
struct AdvancedFriendsGameInstance_OnSessionInviteReceived final
{
public:
	int32                                         LocalPlayerNum;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19D6[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBPUniqueNetId                         PersonInviting;                                    // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
	class FString                                 AppId;                                             // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBlueprintSessionResult                SessionToJoin;                                     // 0x0038(0x0120)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedFriendsGameInstance_OnSessionInviteReceived) == 0x000008, "Wrong alignment on AdvancedFriendsGameInstance_OnSessionInviteReceived");
static_assert(sizeof(AdvancedFriendsGameInstance_OnSessionInviteReceived) == 0x000158, "Wrong size on AdvancedFriendsGameInstance_OnSessionInviteReceived");
static_assert(offsetof(AdvancedFriendsGameInstance_OnSessionInviteReceived, LocalPlayerNum) == 0x000000, "Member 'AdvancedFriendsGameInstance_OnSessionInviteReceived::LocalPlayerNum' has a wrong offset!");
static_assert(offsetof(AdvancedFriendsGameInstance_OnSessionInviteReceived, PersonInviting) == 0x000008, "Member 'AdvancedFriendsGameInstance_OnSessionInviteReceived::PersonInviting' has a wrong offset!");
static_assert(offsetof(AdvancedFriendsGameInstance_OnSessionInviteReceived, AppId) == 0x000028, "Member 'AdvancedFriendsGameInstance_OnSessionInviteReceived::AppId' has a wrong offset!");
static_assert(offsetof(AdvancedFriendsGameInstance_OnSessionInviteReceived, SessionToJoin) == 0x000038, "Member 'AdvancedFriendsGameInstance_OnSessionInviteReceived::SessionToJoin' has a wrong offset!");

// Function AdvancedSessions.AdvancedFriendsInterface.OnPlayerLoginChanged
// 0x0004 (0x0004 - 0x0000)
struct AdvancedFriendsInterface_OnPlayerLoginChanged final
{
public:
	int32                                         PlayerNum;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedFriendsInterface_OnPlayerLoginChanged) == 0x000004, "Wrong alignment on AdvancedFriendsInterface_OnPlayerLoginChanged");
static_assert(sizeof(AdvancedFriendsInterface_OnPlayerLoginChanged) == 0x000004, "Wrong size on AdvancedFriendsInterface_OnPlayerLoginChanged");
static_assert(offsetof(AdvancedFriendsInterface_OnPlayerLoginChanged, PlayerNum) == 0x000000, "Member 'AdvancedFriendsInterface_OnPlayerLoginChanged::PlayerNum' has a wrong offset!");

// Function AdvancedSessions.AdvancedFriendsInterface.OnPlayerLoginStatusChanged
// 0x0028 (0x0028 - 0x0000)
struct AdvancedFriendsInterface_OnPlayerLoginStatusChanged final
{
public:
	EBPLoginStatus                                PreviousStatus;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBPLoginStatus                                NewStatus;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19D7[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBPUniqueNetId                         PlayerUniqueNetID;                                 // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedFriendsInterface_OnPlayerLoginStatusChanged) == 0x000008, "Wrong alignment on AdvancedFriendsInterface_OnPlayerLoginStatusChanged");
static_assert(sizeof(AdvancedFriendsInterface_OnPlayerLoginStatusChanged) == 0x000028, "Wrong size on AdvancedFriendsInterface_OnPlayerLoginStatusChanged");
static_assert(offsetof(AdvancedFriendsInterface_OnPlayerLoginStatusChanged, PreviousStatus) == 0x000000, "Member 'AdvancedFriendsInterface_OnPlayerLoginStatusChanged::PreviousStatus' has a wrong offset!");
static_assert(offsetof(AdvancedFriendsInterface_OnPlayerLoginStatusChanged, NewStatus) == 0x000001, "Member 'AdvancedFriendsInterface_OnPlayerLoginStatusChanged::NewStatus' has a wrong offset!");
static_assert(offsetof(AdvancedFriendsInterface_OnPlayerLoginStatusChanged, PlayerUniqueNetID) == 0x000008, "Member 'AdvancedFriendsInterface_OnPlayerLoginStatusChanged::PlayerUniqueNetID' has a wrong offset!");

// Function AdvancedSessions.AdvancedFriendsInterface.OnPlayerVoiceStateChanged
// 0x0028 (0x0028 - 0x0000)
struct AdvancedFriendsInterface_OnPlayerVoiceStateChanged final
{
public:
	struct FBPUniqueNetId                         PlayerId;                                          // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          bIsTalking;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19D8[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedFriendsInterface_OnPlayerVoiceStateChanged) == 0x000008, "Wrong alignment on AdvancedFriendsInterface_OnPlayerVoiceStateChanged");
static_assert(sizeof(AdvancedFriendsInterface_OnPlayerVoiceStateChanged) == 0x000028, "Wrong size on AdvancedFriendsInterface_OnPlayerVoiceStateChanged");
static_assert(offsetof(AdvancedFriendsInterface_OnPlayerVoiceStateChanged, PlayerId) == 0x000000, "Member 'AdvancedFriendsInterface_OnPlayerVoiceStateChanged::PlayerId' has a wrong offset!");
static_assert(offsetof(AdvancedFriendsInterface_OnPlayerVoiceStateChanged, bIsTalking) == 0x000020, "Member 'AdvancedFriendsInterface_OnPlayerVoiceStateChanged::bIsTalking' has a wrong offset!");

// Function AdvancedSessions.AdvancedFriendsInterface.OnSessionInviteAccepted
// 0x0140 (0x0140 - 0x0000)
struct AdvancedFriendsInterface_OnSessionInviteAccepted final
{
public:
	struct FBPUniqueNetId                         PersonInvited;                                     // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	struct FBlueprintSessionResult                SearchResult;                                      // 0x0020(0x0120)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedFriendsInterface_OnSessionInviteAccepted) == 0x000008, "Wrong alignment on AdvancedFriendsInterface_OnSessionInviteAccepted");
static_assert(sizeof(AdvancedFriendsInterface_OnSessionInviteAccepted) == 0x000140, "Wrong size on AdvancedFriendsInterface_OnSessionInviteAccepted");
static_assert(offsetof(AdvancedFriendsInterface_OnSessionInviteAccepted, PersonInvited) == 0x000000, "Member 'AdvancedFriendsInterface_OnSessionInviteAccepted::PersonInvited' has a wrong offset!");
static_assert(offsetof(AdvancedFriendsInterface_OnSessionInviteAccepted, SearchResult) == 0x000020, "Member 'AdvancedFriendsInterface_OnSessionInviteAccepted::SearchResult' has a wrong offset!");

// Function AdvancedSessions.AdvancedFriendsInterface.OnSessionInviteReceived
// 0x0140 (0x0140 - 0x0000)
struct AdvancedFriendsInterface_OnSessionInviteReceived final
{
public:
	struct FBPUniqueNetId                         PersonInviting;                                    // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	struct FBlueprintSessionResult                SearchResult;                                      // 0x0020(0x0120)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedFriendsInterface_OnSessionInviteReceived) == 0x000008, "Wrong alignment on AdvancedFriendsInterface_OnSessionInviteReceived");
static_assert(sizeof(AdvancedFriendsInterface_OnSessionInviteReceived) == 0x000140, "Wrong size on AdvancedFriendsInterface_OnSessionInviteReceived");
static_assert(offsetof(AdvancedFriendsInterface_OnSessionInviteReceived, PersonInviting) == 0x000000, "Member 'AdvancedFriendsInterface_OnSessionInviteReceived::PersonInviting' has a wrong offset!");
static_assert(offsetof(AdvancedFriendsInterface_OnSessionInviteReceived, SearchResult) == 0x000020, "Member 'AdvancedFriendsInterface_OnSessionInviteReceived::SearchResult' has a wrong offset!");

// Function AdvancedSessions.AdvancedFriendsLibrary.GetFriend
// 0x0090 (0x0090 - 0x0000)
struct AdvancedFriendsLibrary_GetFriend final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBPUniqueNetId                         FriendUniqueNetId;                                 // 0x0008(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	struct FBPFriendInfo                          Friend;                                            // 0x0028(0x0068)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedFriendsLibrary_GetFriend) == 0x000008, "Wrong alignment on AdvancedFriendsLibrary_GetFriend");
static_assert(sizeof(AdvancedFriendsLibrary_GetFriend) == 0x000090, "Wrong size on AdvancedFriendsLibrary_GetFriend");
static_assert(offsetof(AdvancedFriendsLibrary_GetFriend, PlayerController) == 0x000000, "Member 'AdvancedFriendsLibrary_GetFriend::PlayerController' has a wrong offset!");
static_assert(offsetof(AdvancedFriendsLibrary_GetFriend, FriendUniqueNetId) == 0x000008, "Member 'AdvancedFriendsLibrary_GetFriend::FriendUniqueNetId' has a wrong offset!");
static_assert(offsetof(AdvancedFriendsLibrary_GetFriend, Friend) == 0x000028, "Member 'AdvancedFriendsLibrary_GetFriend::Friend' has a wrong offset!");

// Function AdvancedSessions.AdvancedFriendsLibrary.GetStoredFriendsList
// 0x0018 (0x0018 - 0x0000)
struct AdvancedFriendsLibrary_GetStoredFriendsList final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBPFriendInfo>                  FriendsList;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedFriendsLibrary_GetStoredFriendsList) == 0x000008, "Wrong alignment on AdvancedFriendsLibrary_GetStoredFriendsList");
static_assert(sizeof(AdvancedFriendsLibrary_GetStoredFriendsList) == 0x000018, "Wrong size on AdvancedFriendsLibrary_GetStoredFriendsList");
static_assert(offsetof(AdvancedFriendsLibrary_GetStoredFriendsList, PlayerController) == 0x000000, "Member 'AdvancedFriendsLibrary_GetStoredFriendsList::PlayerController' has a wrong offset!");
static_assert(offsetof(AdvancedFriendsLibrary_GetStoredFriendsList, FriendsList) == 0x000008, "Member 'AdvancedFriendsLibrary_GetStoredFriendsList::FriendsList' has a wrong offset!");

// Function AdvancedSessions.AdvancedFriendsLibrary.GetStoredRecentPlayersList
// 0x0030 (0x0030 - 0x0000)
struct AdvancedFriendsLibrary_GetStoredRecentPlayersList final
{
public:
	struct FBPUniqueNetId                         UniqueNetId;                                       // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	TArray<struct FBPOnlineRecentPlayer>          PlayersList;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedFriendsLibrary_GetStoredRecentPlayersList) == 0x000008, "Wrong alignment on AdvancedFriendsLibrary_GetStoredRecentPlayersList");
static_assert(sizeof(AdvancedFriendsLibrary_GetStoredRecentPlayersList) == 0x000030, "Wrong size on AdvancedFriendsLibrary_GetStoredRecentPlayersList");
static_assert(offsetof(AdvancedFriendsLibrary_GetStoredRecentPlayersList, UniqueNetId) == 0x000000, "Member 'AdvancedFriendsLibrary_GetStoredRecentPlayersList::UniqueNetId' has a wrong offset!");
static_assert(offsetof(AdvancedFriendsLibrary_GetStoredRecentPlayersList, PlayersList) == 0x000020, "Member 'AdvancedFriendsLibrary_GetStoredRecentPlayersList::PlayersList' has a wrong offset!");

// Function AdvancedSessions.AdvancedFriendsLibrary.IsAFriend
// 0x0030 (0x0030 - 0x0000)
struct AdvancedFriendsLibrary_IsAFriend final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBPUniqueNetId                         UniqueNetId;                                       // 0x0008(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	bool                                          IsFriend;                                          // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19D9[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedFriendsLibrary_IsAFriend) == 0x000008, "Wrong alignment on AdvancedFriendsLibrary_IsAFriend");
static_assert(sizeof(AdvancedFriendsLibrary_IsAFriend) == 0x000030, "Wrong size on AdvancedFriendsLibrary_IsAFriend");
static_assert(offsetof(AdvancedFriendsLibrary_IsAFriend, PlayerController) == 0x000000, "Member 'AdvancedFriendsLibrary_IsAFriend::PlayerController' has a wrong offset!");
static_assert(offsetof(AdvancedFriendsLibrary_IsAFriend, UniqueNetId) == 0x000008, "Member 'AdvancedFriendsLibrary_IsAFriend::UniqueNetId' has a wrong offset!");
static_assert(offsetof(AdvancedFriendsLibrary_IsAFriend, IsFriend) == 0x000028, "Member 'AdvancedFriendsLibrary_IsAFriend::IsFriend' has a wrong offset!");

// Function AdvancedSessions.AdvancedFriendsLibrary.SendSessionInviteToFriend
// 0x0030 (0x0030 - 0x0000)
struct AdvancedFriendsLibrary_SendSessionInviteToFriend final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBPUniqueNetId                         FriendUniqueNetId;                                 // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EBlueprintResultSwitch                        Result;                                            // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19DA[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedFriendsLibrary_SendSessionInviteToFriend) == 0x000008, "Wrong alignment on AdvancedFriendsLibrary_SendSessionInviteToFriend");
static_assert(sizeof(AdvancedFriendsLibrary_SendSessionInviteToFriend) == 0x000030, "Wrong size on AdvancedFriendsLibrary_SendSessionInviteToFriend");
static_assert(offsetof(AdvancedFriendsLibrary_SendSessionInviteToFriend, PlayerController) == 0x000000, "Member 'AdvancedFriendsLibrary_SendSessionInviteToFriend::PlayerController' has a wrong offset!");
static_assert(offsetof(AdvancedFriendsLibrary_SendSessionInviteToFriend, FriendUniqueNetId) == 0x000008, "Member 'AdvancedFriendsLibrary_SendSessionInviteToFriend::FriendUniqueNetId' has a wrong offset!");
static_assert(offsetof(AdvancedFriendsLibrary_SendSessionInviteToFriend, Result) == 0x000028, "Member 'AdvancedFriendsLibrary_SendSessionInviteToFriend::Result' has a wrong offset!");

// Function AdvancedSessions.AdvancedFriendsLibrary.SendSessionInviteToFriends
// 0x0020 (0x0020 - 0x0000)
struct AdvancedFriendsLibrary_SendSessionInviteToFriends final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBPUniqueNetId>                 Friends;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EBlueprintResultSwitch                        Result;                                            // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19DB[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedFriendsLibrary_SendSessionInviteToFriends) == 0x000008, "Wrong alignment on AdvancedFriendsLibrary_SendSessionInviteToFriends");
static_assert(sizeof(AdvancedFriendsLibrary_SendSessionInviteToFriends) == 0x000020, "Wrong size on AdvancedFriendsLibrary_SendSessionInviteToFriends");
static_assert(offsetof(AdvancedFriendsLibrary_SendSessionInviteToFriends, PlayerController) == 0x000000, "Member 'AdvancedFriendsLibrary_SendSessionInviteToFriends::PlayerController' has a wrong offset!");
static_assert(offsetof(AdvancedFriendsLibrary_SendSessionInviteToFriends, Friends) == 0x000008, "Member 'AdvancedFriendsLibrary_SendSessionInviteToFriends::Friends' has a wrong offset!");
static_assert(offsetof(AdvancedFriendsLibrary_SendSessionInviteToFriends, Result) == 0x000018, "Member 'AdvancedFriendsLibrary_SendSessionInviteToFriends::Result' has a wrong offset!");

// Function AdvancedSessions.AdvancedIdentityLibrary.GetAllUserAccounts
// 0x0018 (0x0018 - 0x0000)
struct AdvancedIdentityLibrary_GetAllUserAccounts final
{
public:
	TArray<struct FBPUserOnlineAccount>           AccountInfos;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	EBlueprintResultSwitch                        Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19DC[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedIdentityLibrary_GetAllUserAccounts) == 0x000008, "Wrong alignment on AdvancedIdentityLibrary_GetAllUserAccounts");
static_assert(sizeof(AdvancedIdentityLibrary_GetAllUserAccounts) == 0x000018, "Wrong size on AdvancedIdentityLibrary_GetAllUserAccounts");
static_assert(offsetof(AdvancedIdentityLibrary_GetAllUserAccounts, AccountInfos) == 0x000000, "Member 'AdvancedIdentityLibrary_GetAllUserAccounts::AccountInfos' has a wrong offset!");
static_assert(offsetof(AdvancedIdentityLibrary_GetAllUserAccounts, Result) == 0x000010, "Member 'AdvancedIdentityLibrary_GetAllUserAccounts::Result' has a wrong offset!");

// Function AdvancedSessions.AdvancedIdentityLibrary.GetLoginStatus
// 0x0028 (0x0028 - 0x0000)
struct AdvancedIdentityLibrary_GetLoginStatus final
{
public:
	struct FBPUniqueNetId                         UniqueNetId;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EBPLoginStatus                                LoginStatus;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBlueprintResultSwitch                        Result;                                            // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19DD[0x6];                                     // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedIdentityLibrary_GetLoginStatus) == 0x000008, "Wrong alignment on AdvancedIdentityLibrary_GetLoginStatus");
static_assert(sizeof(AdvancedIdentityLibrary_GetLoginStatus) == 0x000028, "Wrong size on AdvancedIdentityLibrary_GetLoginStatus");
static_assert(offsetof(AdvancedIdentityLibrary_GetLoginStatus, UniqueNetId) == 0x000000, "Member 'AdvancedIdentityLibrary_GetLoginStatus::UniqueNetId' has a wrong offset!");
static_assert(offsetof(AdvancedIdentityLibrary_GetLoginStatus, LoginStatus) == 0x000020, "Member 'AdvancedIdentityLibrary_GetLoginStatus::LoginStatus' has a wrong offset!");
static_assert(offsetof(AdvancedIdentityLibrary_GetLoginStatus, Result) == 0x000021, "Member 'AdvancedIdentityLibrary_GetLoginStatus::Result' has a wrong offset!");

// Function AdvancedSessions.AdvancedIdentityLibrary.GetPlayerAuthToken
// 0x0020 (0x0020 - 0x0000)
struct AdvancedIdentityLibrary_GetPlayerAuthToken final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AuthToken;                                         // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBlueprintResultSwitch                        Result;                                            // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19DE[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedIdentityLibrary_GetPlayerAuthToken) == 0x000008, "Wrong alignment on AdvancedIdentityLibrary_GetPlayerAuthToken");
static_assert(sizeof(AdvancedIdentityLibrary_GetPlayerAuthToken) == 0x000020, "Wrong size on AdvancedIdentityLibrary_GetPlayerAuthToken");
static_assert(offsetof(AdvancedIdentityLibrary_GetPlayerAuthToken, PlayerController) == 0x000000, "Member 'AdvancedIdentityLibrary_GetPlayerAuthToken::PlayerController' has a wrong offset!");
static_assert(offsetof(AdvancedIdentityLibrary_GetPlayerAuthToken, AuthToken) == 0x000008, "Member 'AdvancedIdentityLibrary_GetPlayerAuthToken::AuthToken' has a wrong offset!");
static_assert(offsetof(AdvancedIdentityLibrary_GetPlayerAuthToken, Result) == 0x000018, "Member 'AdvancedIdentityLibrary_GetPlayerAuthToken::Result' has a wrong offset!");

// Function AdvancedSessions.AdvancedIdentityLibrary.GetPlayerNickname
// 0x0030 (0x0030 - 0x0000)
struct AdvancedIdentityLibrary_GetPlayerNickname final
{
public:
	struct FBPUniqueNetId                         UniqueNetId;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 PlayerNickname;                                    // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedIdentityLibrary_GetPlayerNickname) == 0x000008, "Wrong alignment on AdvancedIdentityLibrary_GetPlayerNickname");
static_assert(sizeof(AdvancedIdentityLibrary_GetPlayerNickname) == 0x000030, "Wrong size on AdvancedIdentityLibrary_GetPlayerNickname");
static_assert(offsetof(AdvancedIdentityLibrary_GetPlayerNickname, UniqueNetId) == 0x000000, "Member 'AdvancedIdentityLibrary_GetPlayerNickname::UniqueNetId' has a wrong offset!");
static_assert(offsetof(AdvancedIdentityLibrary_GetPlayerNickname, PlayerNickname) == 0x000020, "Member 'AdvancedIdentityLibrary_GetPlayerNickname::PlayerNickname' has a wrong offset!");

// Function AdvancedSessions.AdvancedIdentityLibrary.GetUserAccount
// 0x0038 (0x0038 - 0x0000)
struct AdvancedIdentityLibrary_GetUserAccount final
{
public:
	struct FBPUniqueNetId                         UniqueNetId;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FBPUserOnlineAccount                   AccountInfo;                                       // 0x0020(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	EBlueprintResultSwitch                        Result;                                            // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19DF[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedIdentityLibrary_GetUserAccount) == 0x000008, "Wrong alignment on AdvancedIdentityLibrary_GetUserAccount");
static_assert(sizeof(AdvancedIdentityLibrary_GetUserAccount) == 0x000038, "Wrong size on AdvancedIdentityLibrary_GetUserAccount");
static_assert(offsetof(AdvancedIdentityLibrary_GetUserAccount, UniqueNetId) == 0x000000, "Member 'AdvancedIdentityLibrary_GetUserAccount::UniqueNetId' has a wrong offset!");
static_assert(offsetof(AdvancedIdentityLibrary_GetUserAccount, AccountInfo) == 0x000020, "Member 'AdvancedIdentityLibrary_GetUserAccount::AccountInfo' has a wrong offset!");
static_assert(offsetof(AdvancedIdentityLibrary_GetUserAccount, Result) == 0x000030, "Member 'AdvancedIdentityLibrary_GetUserAccount::Result' has a wrong offset!");

// Function AdvancedSessions.AdvancedIdentityLibrary.GetUserAccountAccessToken
// 0x0020 (0x0020 - 0x0000)
struct AdvancedIdentityLibrary_GetUserAccountAccessToken final
{
public:
	struct FBPUserOnlineAccount                   AccountInfo;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 AccessToken;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedIdentityLibrary_GetUserAccountAccessToken) == 0x000008, "Wrong alignment on AdvancedIdentityLibrary_GetUserAccountAccessToken");
static_assert(sizeof(AdvancedIdentityLibrary_GetUserAccountAccessToken) == 0x000020, "Wrong size on AdvancedIdentityLibrary_GetUserAccountAccessToken");
static_assert(offsetof(AdvancedIdentityLibrary_GetUserAccountAccessToken, AccountInfo) == 0x000000, "Member 'AdvancedIdentityLibrary_GetUserAccountAccessToken::AccountInfo' has a wrong offset!");
static_assert(offsetof(AdvancedIdentityLibrary_GetUserAccountAccessToken, AccessToken) == 0x000010, "Member 'AdvancedIdentityLibrary_GetUserAccountAccessToken::AccessToken' has a wrong offset!");

// Function AdvancedSessions.AdvancedIdentityLibrary.GetUserAccountAttribute
// 0x0038 (0x0038 - 0x0000)
struct AdvancedIdentityLibrary_GetUserAccountAttribute final
{
public:
	struct FBPUserOnlineAccount                   AccountInfo;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 AttributeName;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AttributeValue;                                    // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBlueprintResultSwitch                        Result;                                            // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19E0[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedIdentityLibrary_GetUserAccountAttribute) == 0x000008, "Wrong alignment on AdvancedIdentityLibrary_GetUserAccountAttribute");
static_assert(sizeof(AdvancedIdentityLibrary_GetUserAccountAttribute) == 0x000038, "Wrong size on AdvancedIdentityLibrary_GetUserAccountAttribute");
static_assert(offsetof(AdvancedIdentityLibrary_GetUserAccountAttribute, AccountInfo) == 0x000000, "Member 'AdvancedIdentityLibrary_GetUserAccountAttribute::AccountInfo' has a wrong offset!");
static_assert(offsetof(AdvancedIdentityLibrary_GetUserAccountAttribute, AttributeName) == 0x000010, "Member 'AdvancedIdentityLibrary_GetUserAccountAttribute::AttributeName' has a wrong offset!");
static_assert(offsetof(AdvancedIdentityLibrary_GetUserAccountAttribute, AttributeValue) == 0x000020, "Member 'AdvancedIdentityLibrary_GetUserAccountAttribute::AttributeValue' has a wrong offset!");
static_assert(offsetof(AdvancedIdentityLibrary_GetUserAccountAttribute, Result) == 0x000030, "Member 'AdvancedIdentityLibrary_GetUserAccountAttribute::Result' has a wrong offset!");

// Function AdvancedSessions.AdvancedIdentityLibrary.GetUserAccountAuthAttribute
// 0x0038 (0x0038 - 0x0000)
struct AdvancedIdentityLibrary_GetUserAccountAuthAttribute final
{
public:
	struct FBPUserOnlineAccount                   AccountInfo;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 AttributeName;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AuthAttribute;                                     // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBlueprintResultSwitch                        Result;                                            // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19E1[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedIdentityLibrary_GetUserAccountAuthAttribute) == 0x000008, "Wrong alignment on AdvancedIdentityLibrary_GetUserAccountAuthAttribute");
static_assert(sizeof(AdvancedIdentityLibrary_GetUserAccountAuthAttribute) == 0x000038, "Wrong size on AdvancedIdentityLibrary_GetUserAccountAuthAttribute");
static_assert(offsetof(AdvancedIdentityLibrary_GetUserAccountAuthAttribute, AccountInfo) == 0x000000, "Member 'AdvancedIdentityLibrary_GetUserAccountAuthAttribute::AccountInfo' has a wrong offset!");
static_assert(offsetof(AdvancedIdentityLibrary_GetUserAccountAuthAttribute, AttributeName) == 0x000010, "Member 'AdvancedIdentityLibrary_GetUserAccountAuthAttribute::AttributeName' has a wrong offset!");
static_assert(offsetof(AdvancedIdentityLibrary_GetUserAccountAuthAttribute, AuthAttribute) == 0x000020, "Member 'AdvancedIdentityLibrary_GetUserAccountAuthAttribute::AuthAttribute' has a wrong offset!");
static_assert(offsetof(AdvancedIdentityLibrary_GetUserAccountAuthAttribute, Result) == 0x000030, "Member 'AdvancedIdentityLibrary_GetUserAccountAuthAttribute::Result' has a wrong offset!");

// Function AdvancedSessions.AdvancedIdentityLibrary.GetUserAccountDisplayName
// 0x0020 (0x0020 - 0x0000)
struct AdvancedIdentityLibrary_GetUserAccountDisplayName final
{
public:
	struct FBPUserOnlineAccount                   AccountInfo;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedIdentityLibrary_GetUserAccountDisplayName) == 0x000008, "Wrong alignment on AdvancedIdentityLibrary_GetUserAccountDisplayName");
static_assert(sizeof(AdvancedIdentityLibrary_GetUserAccountDisplayName) == 0x000020, "Wrong size on AdvancedIdentityLibrary_GetUserAccountDisplayName");
static_assert(offsetof(AdvancedIdentityLibrary_GetUserAccountDisplayName, AccountInfo) == 0x000000, "Member 'AdvancedIdentityLibrary_GetUserAccountDisplayName::AccountInfo' has a wrong offset!");
static_assert(offsetof(AdvancedIdentityLibrary_GetUserAccountDisplayName, DisplayName) == 0x000010, "Member 'AdvancedIdentityLibrary_GetUserAccountDisplayName::DisplayName' has a wrong offset!");

// Function AdvancedSessions.AdvancedIdentityLibrary.GetUserAccountRealName
// 0x0020 (0x0020 - 0x0000)
struct AdvancedIdentityLibrary_GetUserAccountRealName final
{
public:
	struct FBPUserOnlineAccount                   AccountInfo;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 UserName;                                          // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedIdentityLibrary_GetUserAccountRealName) == 0x000008, "Wrong alignment on AdvancedIdentityLibrary_GetUserAccountRealName");
static_assert(sizeof(AdvancedIdentityLibrary_GetUserAccountRealName) == 0x000020, "Wrong size on AdvancedIdentityLibrary_GetUserAccountRealName");
static_assert(offsetof(AdvancedIdentityLibrary_GetUserAccountRealName, AccountInfo) == 0x000000, "Member 'AdvancedIdentityLibrary_GetUserAccountRealName::AccountInfo' has a wrong offset!");
static_assert(offsetof(AdvancedIdentityLibrary_GetUserAccountRealName, UserName) == 0x000010, "Member 'AdvancedIdentityLibrary_GetUserAccountRealName::UserName' has a wrong offset!");

// Function AdvancedSessions.AdvancedIdentityLibrary.GetUserId
// 0x0030 (0x0030 - 0x0000)
struct AdvancedIdentityLibrary_GetUserId final
{
public:
	struct FBPUserOnlineAccount                   AccountInfo;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FBPUniqueNetId                         UniqueNetId;                                       // 0x0010(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedIdentityLibrary_GetUserId) == 0x000008, "Wrong alignment on AdvancedIdentityLibrary_GetUserId");
static_assert(sizeof(AdvancedIdentityLibrary_GetUserId) == 0x000030, "Wrong size on AdvancedIdentityLibrary_GetUserId");
static_assert(offsetof(AdvancedIdentityLibrary_GetUserId, AccountInfo) == 0x000000, "Member 'AdvancedIdentityLibrary_GetUserId::AccountInfo' has a wrong offset!");
static_assert(offsetof(AdvancedIdentityLibrary_GetUserId, UniqueNetId) == 0x000010, "Member 'AdvancedIdentityLibrary_GetUserId::UniqueNetId' has a wrong offset!");

// Function AdvancedSessions.AdvancedIdentityLibrary.SetUserAccountAttribute
// 0x0038 (0x0038 - 0x0000)
struct AdvancedIdentityLibrary_SetUserAccountAttribute final
{
public:
	struct FBPUserOnlineAccount                   AccountInfo;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 AttributeName;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewAttributeValue;                                 // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBlueprintResultSwitch                        Result;                                            // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19E2[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedIdentityLibrary_SetUserAccountAttribute) == 0x000008, "Wrong alignment on AdvancedIdentityLibrary_SetUserAccountAttribute");
static_assert(sizeof(AdvancedIdentityLibrary_SetUserAccountAttribute) == 0x000038, "Wrong size on AdvancedIdentityLibrary_SetUserAccountAttribute");
static_assert(offsetof(AdvancedIdentityLibrary_SetUserAccountAttribute, AccountInfo) == 0x000000, "Member 'AdvancedIdentityLibrary_SetUserAccountAttribute::AccountInfo' has a wrong offset!");
static_assert(offsetof(AdvancedIdentityLibrary_SetUserAccountAttribute, AttributeName) == 0x000010, "Member 'AdvancedIdentityLibrary_SetUserAccountAttribute::AttributeName' has a wrong offset!");
static_assert(offsetof(AdvancedIdentityLibrary_SetUserAccountAttribute, NewAttributeValue) == 0x000020, "Member 'AdvancedIdentityLibrary_SetUserAccountAttribute::NewAttributeValue' has a wrong offset!");
static_assert(offsetof(AdvancedIdentityLibrary_SetUserAccountAttribute, Result) == 0x000030, "Member 'AdvancedIdentityLibrary_SetUserAccountAttribute::Result' has a wrong offset!");

// Function AdvancedSessions.AdvancedSessionsLibrary.AddOrModifyExtraSettings
// 0x0030 (0x0030 - 0x0000)
struct AdvancedSessionsLibrary_AddOrModifyExtraSettings final
{
public:
	TArray<struct FSessionPropertyKeyPair>        SettingsArray;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FSessionPropertyKeyPair>        NewOrChangedSettings;                              // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FSessionPropertyKeyPair>        ModifiedSettingsArray;                             // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedSessionsLibrary_AddOrModifyExtraSettings) == 0x000008, "Wrong alignment on AdvancedSessionsLibrary_AddOrModifyExtraSettings");
static_assert(sizeof(AdvancedSessionsLibrary_AddOrModifyExtraSettings) == 0x000030, "Wrong size on AdvancedSessionsLibrary_AddOrModifyExtraSettings");
static_assert(offsetof(AdvancedSessionsLibrary_AddOrModifyExtraSettings, SettingsArray) == 0x000000, "Member 'AdvancedSessionsLibrary_AddOrModifyExtraSettings::SettingsArray' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_AddOrModifyExtraSettings, NewOrChangedSettings) == 0x000010, "Member 'AdvancedSessionsLibrary_AddOrModifyExtraSettings::NewOrChangedSettings' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_AddOrModifyExtraSettings, ModifiedSettingsArray) == 0x000020, "Member 'AdvancedSessionsLibrary_AddOrModifyExtraSettings::ModifiedSettingsArray' has a wrong offset!");

// Function AdvancedSessions.AdvancedSessionsLibrary.BanPlayer
// 0x0030 (0x0030 - 0x0000)
struct AdvancedSessionsLibrary_BanPlayer final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      PlayerToBan;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   BanReason;                                         // 0x0010(0x0018)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19E3[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedSessionsLibrary_BanPlayer) == 0x000008, "Wrong alignment on AdvancedSessionsLibrary_BanPlayer");
static_assert(sizeof(AdvancedSessionsLibrary_BanPlayer) == 0x000030, "Wrong size on AdvancedSessionsLibrary_BanPlayer");
static_assert(offsetof(AdvancedSessionsLibrary_BanPlayer, WorldContextObject) == 0x000000, "Member 'AdvancedSessionsLibrary_BanPlayer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_BanPlayer, PlayerToBan) == 0x000008, "Member 'AdvancedSessionsLibrary_BanPlayer::PlayerToBan' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_BanPlayer, BanReason) == 0x000010, "Member 'AdvancedSessionsLibrary_BanPlayer::BanReason' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_BanPlayer, ReturnValue) == 0x000028, "Member 'AdvancedSessionsLibrary_BanPlayer::ReturnValue' has a wrong offset!");

// Function AdvancedSessions.AdvancedSessionsLibrary.EqualEqual_UNetIDUnetID
// 0x0048 (0x0048 - 0x0000)
struct AdvancedSessionsLibrary_EqualEqual_UNetIDUnetID final
{
public:
	struct FBPUniqueNetId                         A;                                                 // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FBPUniqueNetId                         B;                                                 // 0x0020(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19E4[0x7];                                     // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedSessionsLibrary_EqualEqual_UNetIDUnetID) == 0x000008, "Wrong alignment on AdvancedSessionsLibrary_EqualEqual_UNetIDUnetID");
static_assert(sizeof(AdvancedSessionsLibrary_EqualEqual_UNetIDUnetID) == 0x000048, "Wrong size on AdvancedSessionsLibrary_EqualEqual_UNetIDUnetID");
static_assert(offsetof(AdvancedSessionsLibrary_EqualEqual_UNetIDUnetID, A) == 0x000000, "Member 'AdvancedSessionsLibrary_EqualEqual_UNetIDUnetID::A' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_EqualEqual_UNetIDUnetID, B) == 0x000020, "Member 'AdvancedSessionsLibrary_EqualEqual_UNetIDUnetID::B' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_EqualEqual_UNetIDUnetID, ReturnValue) == 0x000040, "Member 'AdvancedSessionsLibrary_EqualEqual_UNetIDUnetID::ReturnValue' has a wrong offset!");

// Function AdvancedSessions.AdvancedSessionsLibrary.FindSessionPropertyByName
// 0x0048 (0x0048 - 0x0000)
struct AdvancedSessionsLibrary_FindSessionPropertyByName final
{
public:
	TArray<struct FSessionPropertyKeyPair>        ExtraSettings;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   SettingsName;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBlueprintResultSwitch                        Result;                                            // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19E5[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSessionPropertyKeyPair                OutProperty;                                       // 0x0020(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedSessionsLibrary_FindSessionPropertyByName) == 0x000008, "Wrong alignment on AdvancedSessionsLibrary_FindSessionPropertyByName");
static_assert(sizeof(AdvancedSessionsLibrary_FindSessionPropertyByName) == 0x000048, "Wrong size on AdvancedSessionsLibrary_FindSessionPropertyByName");
static_assert(offsetof(AdvancedSessionsLibrary_FindSessionPropertyByName, ExtraSettings) == 0x000000, "Member 'AdvancedSessionsLibrary_FindSessionPropertyByName::ExtraSettings' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_FindSessionPropertyByName, SettingsName) == 0x000010, "Member 'AdvancedSessionsLibrary_FindSessionPropertyByName::SettingsName' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_FindSessionPropertyByName, Result) == 0x000018, "Member 'AdvancedSessionsLibrary_FindSessionPropertyByName::Result' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_FindSessionPropertyByName, OutProperty) == 0x000020, "Member 'AdvancedSessionsLibrary_FindSessionPropertyByName::OutProperty' has a wrong offset!");

// Function AdvancedSessions.AdvancedSessionsLibrary.FindSessionPropertyIndexByName
// 0x0020 (0x0020 - 0x0000)
struct AdvancedSessionsLibrary_FindSessionPropertyIndexByName final
{
public:
	TArray<struct FSessionPropertyKeyPair>        ExtraSettings;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   SettingName;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBlueprintResultSwitch                        Result;                                            // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19E6[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OutIndex;                                          // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedSessionsLibrary_FindSessionPropertyIndexByName) == 0x000008, "Wrong alignment on AdvancedSessionsLibrary_FindSessionPropertyIndexByName");
static_assert(sizeof(AdvancedSessionsLibrary_FindSessionPropertyIndexByName) == 0x000020, "Wrong size on AdvancedSessionsLibrary_FindSessionPropertyIndexByName");
static_assert(offsetof(AdvancedSessionsLibrary_FindSessionPropertyIndexByName, ExtraSettings) == 0x000000, "Member 'AdvancedSessionsLibrary_FindSessionPropertyIndexByName::ExtraSettings' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_FindSessionPropertyIndexByName, SettingName) == 0x000010, "Member 'AdvancedSessionsLibrary_FindSessionPropertyIndexByName::SettingName' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_FindSessionPropertyIndexByName, Result) == 0x000018, "Member 'AdvancedSessionsLibrary_FindSessionPropertyIndexByName::Result' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_FindSessionPropertyIndexByName, OutIndex) == 0x00001C, "Member 'AdvancedSessionsLibrary_FindSessionPropertyIndexByName::OutIndex' has a wrong offset!");

// Function AdvancedSessions.AdvancedSessionsLibrary.GetCurrentSessionID_AsString
// 0x0018 (0x0018 - 0x0000)
struct AdvancedSessionsLibrary_GetCurrentSessionID_AsString final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionId;                                         // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedSessionsLibrary_GetCurrentSessionID_AsString) == 0x000008, "Wrong alignment on AdvancedSessionsLibrary_GetCurrentSessionID_AsString");
static_assert(sizeof(AdvancedSessionsLibrary_GetCurrentSessionID_AsString) == 0x000018, "Wrong size on AdvancedSessionsLibrary_GetCurrentSessionID_AsString");
static_assert(offsetof(AdvancedSessionsLibrary_GetCurrentSessionID_AsString, WorldContextObject) == 0x000000, "Member 'AdvancedSessionsLibrary_GetCurrentSessionID_AsString::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_GetCurrentSessionID_AsString, SessionId) == 0x000008, "Member 'AdvancedSessionsLibrary_GetCurrentSessionID_AsString::SessionId' has a wrong offset!");

// Function AdvancedSessions.AdvancedSessionsLibrary.GetCurrentUniqueBuildID
// 0x0004 (0x0004 - 0x0000)
struct AdvancedSessionsLibrary_GetCurrentUniqueBuildID final
{
public:
	int32                                         UniqueBuildId;                                     // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedSessionsLibrary_GetCurrentUniqueBuildID) == 0x000004, "Wrong alignment on AdvancedSessionsLibrary_GetCurrentUniqueBuildID");
static_assert(sizeof(AdvancedSessionsLibrary_GetCurrentUniqueBuildID) == 0x000004, "Wrong size on AdvancedSessionsLibrary_GetCurrentUniqueBuildID");
static_assert(offsetof(AdvancedSessionsLibrary_GetCurrentUniqueBuildID, UniqueBuildId) == 0x000000, "Member 'AdvancedSessionsLibrary_GetCurrentUniqueBuildID::UniqueBuildId' has a wrong offset!");

// Function AdvancedSessions.AdvancedSessionsLibrary.GetExtraSettings
// 0x0130 (0x0130 - 0x0000)
struct AdvancedSessionsLibrary_GetExtraSettings final
{
public:
	struct FBlueprintSessionResult                SessionResult;                                     // 0x0000(0x0120)(Parm, NativeAccessSpecifierPublic)
	TArray<struct FSessionPropertyKeyPair>        ExtraSettings;                                     // 0x0120(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedSessionsLibrary_GetExtraSettings) == 0x000008, "Wrong alignment on AdvancedSessionsLibrary_GetExtraSettings");
static_assert(sizeof(AdvancedSessionsLibrary_GetExtraSettings) == 0x000130, "Wrong size on AdvancedSessionsLibrary_GetExtraSettings");
static_assert(offsetof(AdvancedSessionsLibrary_GetExtraSettings, SessionResult) == 0x000000, "Member 'AdvancedSessionsLibrary_GetExtraSettings::SessionResult' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_GetExtraSettings, ExtraSettings) == 0x000120, "Member 'AdvancedSessionsLibrary_GetExtraSettings::ExtraSettings' has a wrong offset!");

// Function AdvancedSessions.AdvancedSessionsLibrary.GetNetPlayerIndex
// 0x0010 (0x0010 - 0x0000)
struct AdvancedSessionsLibrary_GetNetPlayerIndex final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NetPlayerIndex;                                    // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19E7[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedSessionsLibrary_GetNetPlayerIndex) == 0x000008, "Wrong alignment on AdvancedSessionsLibrary_GetNetPlayerIndex");
static_assert(sizeof(AdvancedSessionsLibrary_GetNetPlayerIndex) == 0x000010, "Wrong size on AdvancedSessionsLibrary_GetNetPlayerIndex");
static_assert(offsetof(AdvancedSessionsLibrary_GetNetPlayerIndex, PlayerController) == 0x000000, "Member 'AdvancedSessionsLibrary_GetNetPlayerIndex::PlayerController' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_GetNetPlayerIndex, NetPlayerIndex) == 0x000008, "Member 'AdvancedSessionsLibrary_GetNetPlayerIndex::NetPlayerIndex' has a wrong offset!");

// Function AdvancedSessions.AdvancedSessionsLibrary.GetNumberOfNetworkPlayers
// 0x0010 (0x0010 - 0x0000)
struct AdvancedSessionsLibrary_GetNumberOfNetworkPlayers final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumNetPlayers;                                     // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19E8[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedSessionsLibrary_GetNumberOfNetworkPlayers) == 0x000008, "Wrong alignment on AdvancedSessionsLibrary_GetNumberOfNetworkPlayers");
static_assert(sizeof(AdvancedSessionsLibrary_GetNumberOfNetworkPlayers) == 0x000010, "Wrong size on AdvancedSessionsLibrary_GetNumberOfNetworkPlayers");
static_assert(offsetof(AdvancedSessionsLibrary_GetNumberOfNetworkPlayers, WorldContextObject) == 0x000000, "Member 'AdvancedSessionsLibrary_GetNumberOfNetworkPlayers::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_GetNumberOfNetworkPlayers, NumNetPlayers) == 0x000008, "Member 'AdvancedSessionsLibrary_GetNumberOfNetworkPlayers::NumNetPlayers' has a wrong offset!");

// Function AdvancedSessions.AdvancedSessionsLibrary.GetPlayerName
// 0x0018 (0x0018 - 0x0000)
struct AdvancedSessionsLibrary_GetPlayerName final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedSessionsLibrary_GetPlayerName) == 0x000008, "Wrong alignment on AdvancedSessionsLibrary_GetPlayerName");
static_assert(sizeof(AdvancedSessionsLibrary_GetPlayerName) == 0x000018, "Wrong size on AdvancedSessionsLibrary_GetPlayerName");
static_assert(offsetof(AdvancedSessionsLibrary_GetPlayerName, PlayerController) == 0x000000, "Member 'AdvancedSessionsLibrary_GetPlayerName::PlayerController' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_GetPlayerName, PlayerName) == 0x000008, "Member 'AdvancedSessionsLibrary_GetPlayerName::PlayerName' has a wrong offset!");

// Function AdvancedSessions.AdvancedSessionsLibrary.GetSessionID_AsString
// 0x0130 (0x0130 - 0x0000)
struct AdvancedSessionsLibrary_GetSessionID_AsString final
{
public:
	struct FBlueprintSessionResult                SessionResult;                                     // 0x0000(0x0120)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 SessionId;                                         // 0x0120(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedSessionsLibrary_GetSessionID_AsString) == 0x000008, "Wrong alignment on AdvancedSessionsLibrary_GetSessionID_AsString");
static_assert(sizeof(AdvancedSessionsLibrary_GetSessionID_AsString) == 0x000130, "Wrong size on AdvancedSessionsLibrary_GetSessionID_AsString");
static_assert(offsetof(AdvancedSessionsLibrary_GetSessionID_AsString, SessionResult) == 0x000000, "Member 'AdvancedSessionsLibrary_GetSessionID_AsString::SessionResult' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_GetSessionID_AsString, SessionId) == 0x000120, "Member 'AdvancedSessionsLibrary_GetSessionID_AsString::SessionId' has a wrong offset!");

// Function AdvancedSessions.AdvancedSessionsLibrary.GetSessionPropertyBool
// 0x0020 (0x0020 - 0x0000)
struct AdvancedSessionsLibrary_GetSessionPropertyBool final
{
public:
	TArray<struct FSessionPropertyKeyPair>        ExtraSettings;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   SettingName;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESessionSettingSearchResult                   SearchResult;                                      // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SettingValue;                                      // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19E9[0x6];                                     // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedSessionsLibrary_GetSessionPropertyBool) == 0x000008, "Wrong alignment on AdvancedSessionsLibrary_GetSessionPropertyBool");
static_assert(sizeof(AdvancedSessionsLibrary_GetSessionPropertyBool) == 0x000020, "Wrong size on AdvancedSessionsLibrary_GetSessionPropertyBool");
static_assert(offsetof(AdvancedSessionsLibrary_GetSessionPropertyBool, ExtraSettings) == 0x000000, "Member 'AdvancedSessionsLibrary_GetSessionPropertyBool::ExtraSettings' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_GetSessionPropertyBool, SettingName) == 0x000010, "Member 'AdvancedSessionsLibrary_GetSessionPropertyBool::SettingName' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_GetSessionPropertyBool, SearchResult) == 0x000018, "Member 'AdvancedSessionsLibrary_GetSessionPropertyBool::SearchResult' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_GetSessionPropertyBool, SettingValue) == 0x000019, "Member 'AdvancedSessionsLibrary_GetSessionPropertyBool::SettingValue' has a wrong offset!");

// Function AdvancedSessions.AdvancedSessionsLibrary.GetSessionPropertyByte
// 0x0020 (0x0020 - 0x0000)
struct AdvancedSessionsLibrary_GetSessionPropertyByte final
{
public:
	TArray<struct FSessionPropertyKeyPair>        ExtraSettings;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   SettingName;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESessionSettingSearchResult                   SearchResult;                                      // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SettingValue;                                      // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19EA[0x6];                                     // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedSessionsLibrary_GetSessionPropertyByte) == 0x000008, "Wrong alignment on AdvancedSessionsLibrary_GetSessionPropertyByte");
static_assert(sizeof(AdvancedSessionsLibrary_GetSessionPropertyByte) == 0x000020, "Wrong size on AdvancedSessionsLibrary_GetSessionPropertyByte");
static_assert(offsetof(AdvancedSessionsLibrary_GetSessionPropertyByte, ExtraSettings) == 0x000000, "Member 'AdvancedSessionsLibrary_GetSessionPropertyByte::ExtraSettings' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_GetSessionPropertyByte, SettingName) == 0x000010, "Member 'AdvancedSessionsLibrary_GetSessionPropertyByte::SettingName' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_GetSessionPropertyByte, SearchResult) == 0x000018, "Member 'AdvancedSessionsLibrary_GetSessionPropertyByte::SearchResult' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_GetSessionPropertyByte, SettingValue) == 0x000019, "Member 'AdvancedSessionsLibrary_GetSessionPropertyByte::SettingValue' has a wrong offset!");

// Function AdvancedSessions.AdvancedSessionsLibrary.GetSessionPropertyFloat
// 0x0020 (0x0020 - 0x0000)
struct AdvancedSessionsLibrary_GetSessionPropertyFloat final
{
public:
	TArray<struct FSessionPropertyKeyPair>        ExtraSettings;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   SettingName;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESessionSettingSearchResult                   SearchResult;                                      // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19EB[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SettingValue;                                      // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedSessionsLibrary_GetSessionPropertyFloat) == 0x000008, "Wrong alignment on AdvancedSessionsLibrary_GetSessionPropertyFloat");
static_assert(sizeof(AdvancedSessionsLibrary_GetSessionPropertyFloat) == 0x000020, "Wrong size on AdvancedSessionsLibrary_GetSessionPropertyFloat");
static_assert(offsetof(AdvancedSessionsLibrary_GetSessionPropertyFloat, ExtraSettings) == 0x000000, "Member 'AdvancedSessionsLibrary_GetSessionPropertyFloat::ExtraSettings' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_GetSessionPropertyFloat, SettingName) == 0x000010, "Member 'AdvancedSessionsLibrary_GetSessionPropertyFloat::SettingName' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_GetSessionPropertyFloat, SearchResult) == 0x000018, "Member 'AdvancedSessionsLibrary_GetSessionPropertyFloat::SearchResult' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_GetSessionPropertyFloat, SettingValue) == 0x00001C, "Member 'AdvancedSessionsLibrary_GetSessionPropertyFloat::SettingValue' has a wrong offset!");

// Function AdvancedSessions.AdvancedSessionsLibrary.GetSessionPropertyInt
// 0x0020 (0x0020 - 0x0000)
struct AdvancedSessionsLibrary_GetSessionPropertyInt final
{
public:
	TArray<struct FSessionPropertyKeyPair>        ExtraSettings;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   SettingName;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESessionSettingSearchResult                   SearchResult;                                      // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19EC[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SettingValue;                                      // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedSessionsLibrary_GetSessionPropertyInt) == 0x000008, "Wrong alignment on AdvancedSessionsLibrary_GetSessionPropertyInt");
static_assert(sizeof(AdvancedSessionsLibrary_GetSessionPropertyInt) == 0x000020, "Wrong size on AdvancedSessionsLibrary_GetSessionPropertyInt");
static_assert(offsetof(AdvancedSessionsLibrary_GetSessionPropertyInt, ExtraSettings) == 0x000000, "Member 'AdvancedSessionsLibrary_GetSessionPropertyInt::ExtraSettings' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_GetSessionPropertyInt, SettingName) == 0x000010, "Member 'AdvancedSessionsLibrary_GetSessionPropertyInt::SettingName' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_GetSessionPropertyInt, SearchResult) == 0x000018, "Member 'AdvancedSessionsLibrary_GetSessionPropertyInt::SearchResult' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_GetSessionPropertyInt, SettingValue) == 0x00001C, "Member 'AdvancedSessionsLibrary_GetSessionPropertyInt::SettingValue' has a wrong offset!");

// Function AdvancedSessions.AdvancedSessionsLibrary.GetSessionPropertyKey
// 0x0030 (0x0030 - 0x0000)
struct AdvancedSessionsLibrary_GetSessionPropertyKey final
{
public:
	struct FSessionPropertyKeyPair                SessionProperty;                                   // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedSessionsLibrary_GetSessionPropertyKey) == 0x000008, "Wrong alignment on AdvancedSessionsLibrary_GetSessionPropertyKey");
static_assert(sizeof(AdvancedSessionsLibrary_GetSessionPropertyKey) == 0x000030, "Wrong size on AdvancedSessionsLibrary_GetSessionPropertyKey");
static_assert(offsetof(AdvancedSessionsLibrary_GetSessionPropertyKey, SessionProperty) == 0x000000, "Member 'AdvancedSessionsLibrary_GetSessionPropertyKey::SessionProperty' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_GetSessionPropertyKey, ReturnValue) == 0x000028, "Member 'AdvancedSessionsLibrary_GetSessionPropertyKey::ReturnValue' has a wrong offset!");

// Function AdvancedSessions.AdvancedSessionsLibrary.GetSessionPropertyString
// 0x0030 (0x0030 - 0x0000)
struct AdvancedSessionsLibrary_GetSessionPropertyString final
{
public:
	TArray<struct FSessionPropertyKeyPair>        ExtraSettings;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   SettingName;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESessionSettingSearchResult                   SearchResult;                                      // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19ED[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SettingValue;                                      // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedSessionsLibrary_GetSessionPropertyString) == 0x000008, "Wrong alignment on AdvancedSessionsLibrary_GetSessionPropertyString");
static_assert(sizeof(AdvancedSessionsLibrary_GetSessionPropertyString) == 0x000030, "Wrong size on AdvancedSessionsLibrary_GetSessionPropertyString");
static_assert(offsetof(AdvancedSessionsLibrary_GetSessionPropertyString, ExtraSettings) == 0x000000, "Member 'AdvancedSessionsLibrary_GetSessionPropertyString::ExtraSettings' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_GetSessionPropertyString, SettingName) == 0x000010, "Member 'AdvancedSessionsLibrary_GetSessionPropertyString::SettingName' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_GetSessionPropertyString, SearchResult) == 0x000018, "Member 'AdvancedSessionsLibrary_GetSessionPropertyString::SearchResult' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_GetSessionPropertyString, SettingValue) == 0x000020, "Member 'AdvancedSessionsLibrary_GetSessionPropertyString::SettingValue' has a wrong offset!");

// Function AdvancedSessions.AdvancedSessionsLibrary.GetSessionSettings
// 0x0038 (0x0038 - 0x0000)
struct AdvancedSessionsLibrary_GetSessionSettings final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumConnections;                                    // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumPrivateConnections;                             // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLAN;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDedicated;                                      // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowInvites;                                     // 0x0012(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowJoinInProgress;                              // 0x0013(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAnticheatEnabled;                               // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19EE[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BuildUniqueId;                                     // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19EF[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSessionPropertyKeyPair>        ExtraSettings;                                     // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	EBlueprintResultSwitch                        Result;                                            // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19F0[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedSessionsLibrary_GetSessionSettings) == 0x000008, "Wrong alignment on AdvancedSessionsLibrary_GetSessionSettings");
static_assert(sizeof(AdvancedSessionsLibrary_GetSessionSettings) == 0x000038, "Wrong size on AdvancedSessionsLibrary_GetSessionSettings");
static_assert(offsetof(AdvancedSessionsLibrary_GetSessionSettings, WorldContextObject) == 0x000000, "Member 'AdvancedSessionsLibrary_GetSessionSettings::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_GetSessionSettings, NumConnections) == 0x000008, "Member 'AdvancedSessionsLibrary_GetSessionSettings::NumConnections' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_GetSessionSettings, NumPrivateConnections) == 0x00000C, "Member 'AdvancedSessionsLibrary_GetSessionSettings::NumPrivateConnections' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_GetSessionSettings, bIsLAN) == 0x000010, "Member 'AdvancedSessionsLibrary_GetSessionSettings::bIsLAN' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_GetSessionSettings, bIsDedicated) == 0x000011, "Member 'AdvancedSessionsLibrary_GetSessionSettings::bIsDedicated' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_GetSessionSettings, bAllowInvites) == 0x000012, "Member 'AdvancedSessionsLibrary_GetSessionSettings::bAllowInvites' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_GetSessionSettings, bAllowJoinInProgress) == 0x000013, "Member 'AdvancedSessionsLibrary_GetSessionSettings::bAllowJoinInProgress' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_GetSessionSettings, bIsAnticheatEnabled) == 0x000014, "Member 'AdvancedSessionsLibrary_GetSessionSettings::bIsAnticheatEnabled' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_GetSessionSettings, BuildUniqueId) == 0x000018, "Member 'AdvancedSessionsLibrary_GetSessionSettings::BuildUniqueId' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_GetSessionSettings, ExtraSettings) == 0x000020, "Member 'AdvancedSessionsLibrary_GetSessionSettings::ExtraSettings' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_GetSessionSettings, Result) == 0x000030, "Member 'AdvancedSessionsLibrary_GetSessionSettings::Result' has a wrong offset!");

// Function AdvancedSessions.AdvancedSessionsLibrary.GetSessionState
// 0x0010 (0x0010 - 0x0000)
struct AdvancedSessionsLibrary_GetSessionState final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBPOnlineSessionState                         SessionState;                                      // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19F1[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedSessionsLibrary_GetSessionState) == 0x000008, "Wrong alignment on AdvancedSessionsLibrary_GetSessionState");
static_assert(sizeof(AdvancedSessionsLibrary_GetSessionState) == 0x000010, "Wrong size on AdvancedSessionsLibrary_GetSessionState");
static_assert(offsetof(AdvancedSessionsLibrary_GetSessionState, WorldContextObject) == 0x000000, "Member 'AdvancedSessionsLibrary_GetSessionState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_GetSessionState, SessionState) == 0x000008, "Member 'AdvancedSessionsLibrary_GetSessionState::SessionState' has a wrong offset!");

// Function AdvancedSessions.AdvancedSessionsLibrary.GetUniqueBuildID
// 0x0128 (0x0128 - 0x0000)
struct AdvancedSessionsLibrary_GetUniqueBuildID final
{
public:
	struct FBlueprintSessionResult                SessionResult;                                     // 0x0000(0x0120)(Parm, NativeAccessSpecifierPublic)
	int32                                         UniqueBuildId;                                     // 0x0120(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19F2[0x4];                                     // 0x0124(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedSessionsLibrary_GetUniqueBuildID) == 0x000008, "Wrong alignment on AdvancedSessionsLibrary_GetUniqueBuildID");
static_assert(sizeof(AdvancedSessionsLibrary_GetUniqueBuildID) == 0x000128, "Wrong size on AdvancedSessionsLibrary_GetUniqueBuildID");
static_assert(offsetof(AdvancedSessionsLibrary_GetUniqueBuildID, SessionResult) == 0x000000, "Member 'AdvancedSessionsLibrary_GetUniqueBuildID::SessionResult' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_GetUniqueBuildID, UniqueBuildId) == 0x000120, "Member 'AdvancedSessionsLibrary_GetUniqueBuildID::UniqueBuildId' has a wrong offset!");

// Function AdvancedSessions.AdvancedSessionsLibrary.GetUniqueNetID
// 0x0028 (0x0028 - 0x0000)
struct AdvancedSessionsLibrary_GetUniqueNetID final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBPUniqueNetId                         UniqueNetId;                                       // 0x0008(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedSessionsLibrary_GetUniqueNetID) == 0x000008, "Wrong alignment on AdvancedSessionsLibrary_GetUniqueNetID");
static_assert(sizeof(AdvancedSessionsLibrary_GetUniqueNetID) == 0x000028, "Wrong size on AdvancedSessionsLibrary_GetUniqueNetID");
static_assert(offsetof(AdvancedSessionsLibrary_GetUniqueNetID, PlayerController) == 0x000000, "Member 'AdvancedSessionsLibrary_GetUniqueNetID::PlayerController' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_GetUniqueNetID, UniqueNetId) == 0x000008, "Member 'AdvancedSessionsLibrary_GetUniqueNetID::UniqueNetId' has a wrong offset!");

// Function AdvancedSessions.AdvancedSessionsLibrary.GetUniqueNetIDFromPlayerState
// 0x0028 (0x0028 - 0x0000)
struct AdvancedSessionsLibrary_GetUniqueNetIDFromPlayerState final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBPUniqueNetId                         UniqueNetId;                                       // 0x0008(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedSessionsLibrary_GetUniqueNetIDFromPlayerState) == 0x000008, "Wrong alignment on AdvancedSessionsLibrary_GetUniqueNetIDFromPlayerState");
static_assert(sizeof(AdvancedSessionsLibrary_GetUniqueNetIDFromPlayerState) == 0x000028, "Wrong size on AdvancedSessionsLibrary_GetUniqueNetIDFromPlayerState");
static_assert(offsetof(AdvancedSessionsLibrary_GetUniqueNetIDFromPlayerState, PlayerState) == 0x000000, "Member 'AdvancedSessionsLibrary_GetUniqueNetIDFromPlayerState::PlayerState' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_GetUniqueNetIDFromPlayerState, UniqueNetId) == 0x000008, "Member 'AdvancedSessionsLibrary_GetUniqueNetIDFromPlayerState::UniqueNetId' has a wrong offset!");

// Function AdvancedSessions.AdvancedSessionsLibrary.HasOnlineSubsystem
// 0x000C (0x000C - 0x0000)
struct AdvancedSessionsLibrary_HasOnlineSubsystem final
{
public:
	class FName                                   SubSystemName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19F3[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedSessionsLibrary_HasOnlineSubsystem) == 0x000004, "Wrong alignment on AdvancedSessionsLibrary_HasOnlineSubsystem");
static_assert(sizeof(AdvancedSessionsLibrary_HasOnlineSubsystem) == 0x00000C, "Wrong size on AdvancedSessionsLibrary_HasOnlineSubsystem");
static_assert(offsetof(AdvancedSessionsLibrary_HasOnlineSubsystem, SubSystemName) == 0x000000, "Member 'AdvancedSessionsLibrary_HasOnlineSubsystem::SubSystemName' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_HasOnlineSubsystem, ReturnValue) == 0x000008, "Member 'AdvancedSessionsLibrary_HasOnlineSubsystem::ReturnValue' has a wrong offset!");

// Function AdvancedSessions.AdvancedSessionsLibrary.IsPlayerInSession
// 0x0030 (0x0030 - 0x0000)
struct AdvancedSessionsLibrary_IsPlayerInSession final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBPUniqueNetId                         PlayerToCheck;                                     // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsInSession;                                      // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19F4[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedSessionsLibrary_IsPlayerInSession) == 0x000008, "Wrong alignment on AdvancedSessionsLibrary_IsPlayerInSession");
static_assert(sizeof(AdvancedSessionsLibrary_IsPlayerInSession) == 0x000030, "Wrong size on AdvancedSessionsLibrary_IsPlayerInSession");
static_assert(offsetof(AdvancedSessionsLibrary_IsPlayerInSession, WorldContextObject) == 0x000000, "Member 'AdvancedSessionsLibrary_IsPlayerInSession::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_IsPlayerInSession, PlayerToCheck) == 0x000008, "Member 'AdvancedSessionsLibrary_IsPlayerInSession::PlayerToCheck' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_IsPlayerInSession, bIsInSession) == 0x000028, "Member 'AdvancedSessionsLibrary_IsPlayerInSession::bIsInSession' has a wrong offset!");

// Function AdvancedSessions.AdvancedSessionsLibrary.IsValidSession
// 0x0128 (0x0128 - 0x0000)
struct AdvancedSessionsLibrary_IsValidSession final
{
public:
	struct FBlueprintSessionResult                SessionResult;                                     // 0x0000(0x0120)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0120(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19F5[0x7];                                     // 0x0121(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedSessionsLibrary_IsValidSession) == 0x000008, "Wrong alignment on AdvancedSessionsLibrary_IsValidSession");
static_assert(sizeof(AdvancedSessionsLibrary_IsValidSession) == 0x000128, "Wrong size on AdvancedSessionsLibrary_IsValidSession");
static_assert(offsetof(AdvancedSessionsLibrary_IsValidSession, SessionResult) == 0x000000, "Member 'AdvancedSessionsLibrary_IsValidSession::SessionResult' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_IsValidSession, ReturnValue) == 0x000120, "Member 'AdvancedSessionsLibrary_IsValidSession::ReturnValue' has a wrong offset!");

// Function AdvancedSessions.AdvancedSessionsLibrary.IsValidUniqueNetID
// 0x0028 (0x0028 - 0x0000)
struct AdvancedSessionsLibrary_IsValidUniqueNetID final
{
public:
	struct FBPUniqueNetId                         UniqueNetId;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19F6[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedSessionsLibrary_IsValidUniqueNetID) == 0x000008, "Wrong alignment on AdvancedSessionsLibrary_IsValidUniqueNetID");
static_assert(sizeof(AdvancedSessionsLibrary_IsValidUniqueNetID) == 0x000028, "Wrong size on AdvancedSessionsLibrary_IsValidUniqueNetID");
static_assert(offsetof(AdvancedSessionsLibrary_IsValidUniqueNetID, UniqueNetId) == 0x000000, "Member 'AdvancedSessionsLibrary_IsValidUniqueNetID::UniqueNetId' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_IsValidUniqueNetID, ReturnValue) == 0x000020, "Member 'AdvancedSessionsLibrary_IsValidUniqueNetID::ReturnValue' has a wrong offset!");

// Function AdvancedSessions.AdvancedSessionsLibrary.KickPlayer
// 0x0030 (0x0030 - 0x0000)
struct AdvancedSessionsLibrary_KickPlayer final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      PlayerToKick;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   KickReason;                                        // 0x0010(0x0018)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19F7[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedSessionsLibrary_KickPlayer) == 0x000008, "Wrong alignment on AdvancedSessionsLibrary_KickPlayer");
static_assert(sizeof(AdvancedSessionsLibrary_KickPlayer) == 0x000030, "Wrong size on AdvancedSessionsLibrary_KickPlayer");
static_assert(offsetof(AdvancedSessionsLibrary_KickPlayer, WorldContextObject) == 0x000000, "Member 'AdvancedSessionsLibrary_KickPlayer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_KickPlayer, PlayerToKick) == 0x000008, "Member 'AdvancedSessionsLibrary_KickPlayer::PlayerToKick' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_KickPlayer, KickReason) == 0x000010, "Member 'AdvancedSessionsLibrary_KickPlayer::KickReason' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_KickPlayer, ReturnValue) == 0x000028, "Member 'AdvancedSessionsLibrary_KickPlayer::ReturnValue' has a wrong offset!");

// Function AdvancedSessions.AdvancedSessionsLibrary.MakeLiteralSessionPropertyBool
// 0x0038 (0x0038 - 0x0000)
struct AdvancedSessionsLibrary_MakeLiteralSessionPropertyBool final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19F8[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSessionPropertyKeyPair                ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedSessionsLibrary_MakeLiteralSessionPropertyBool) == 0x000008, "Wrong alignment on AdvancedSessionsLibrary_MakeLiteralSessionPropertyBool");
static_assert(sizeof(AdvancedSessionsLibrary_MakeLiteralSessionPropertyBool) == 0x000038, "Wrong size on AdvancedSessionsLibrary_MakeLiteralSessionPropertyBool");
static_assert(offsetof(AdvancedSessionsLibrary_MakeLiteralSessionPropertyBool, Key) == 0x000000, "Member 'AdvancedSessionsLibrary_MakeLiteralSessionPropertyBool::Key' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_MakeLiteralSessionPropertyBool, Value) == 0x000008, "Member 'AdvancedSessionsLibrary_MakeLiteralSessionPropertyBool::Value' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_MakeLiteralSessionPropertyBool, ReturnValue) == 0x000010, "Member 'AdvancedSessionsLibrary_MakeLiteralSessionPropertyBool::ReturnValue' has a wrong offset!");

// Function AdvancedSessions.AdvancedSessionsLibrary.MakeLiteralSessionPropertyByte
// 0x0038 (0x0038 - 0x0000)
struct AdvancedSessionsLibrary_MakeLiteralSessionPropertyByte final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Value;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19F9[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSessionPropertyKeyPair                ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedSessionsLibrary_MakeLiteralSessionPropertyByte) == 0x000008, "Wrong alignment on AdvancedSessionsLibrary_MakeLiteralSessionPropertyByte");
static_assert(sizeof(AdvancedSessionsLibrary_MakeLiteralSessionPropertyByte) == 0x000038, "Wrong size on AdvancedSessionsLibrary_MakeLiteralSessionPropertyByte");
static_assert(offsetof(AdvancedSessionsLibrary_MakeLiteralSessionPropertyByte, Key) == 0x000000, "Member 'AdvancedSessionsLibrary_MakeLiteralSessionPropertyByte::Key' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_MakeLiteralSessionPropertyByte, Value) == 0x000008, "Member 'AdvancedSessionsLibrary_MakeLiteralSessionPropertyByte::Value' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_MakeLiteralSessionPropertyByte, ReturnValue) == 0x000010, "Member 'AdvancedSessionsLibrary_MakeLiteralSessionPropertyByte::ReturnValue' has a wrong offset!");

// Function AdvancedSessions.AdvancedSessionsLibrary.MakeLiteralSessionPropertyFloat
// 0x0038 (0x0038 - 0x0000)
struct AdvancedSessionsLibrary_MakeLiteralSessionPropertyFloat final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19FA[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSessionPropertyKeyPair                ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedSessionsLibrary_MakeLiteralSessionPropertyFloat) == 0x000008, "Wrong alignment on AdvancedSessionsLibrary_MakeLiteralSessionPropertyFloat");
static_assert(sizeof(AdvancedSessionsLibrary_MakeLiteralSessionPropertyFloat) == 0x000038, "Wrong size on AdvancedSessionsLibrary_MakeLiteralSessionPropertyFloat");
static_assert(offsetof(AdvancedSessionsLibrary_MakeLiteralSessionPropertyFloat, Key) == 0x000000, "Member 'AdvancedSessionsLibrary_MakeLiteralSessionPropertyFloat::Key' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_MakeLiteralSessionPropertyFloat, Value) == 0x000008, "Member 'AdvancedSessionsLibrary_MakeLiteralSessionPropertyFloat::Value' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_MakeLiteralSessionPropertyFloat, ReturnValue) == 0x000010, "Member 'AdvancedSessionsLibrary_MakeLiteralSessionPropertyFloat::ReturnValue' has a wrong offset!");

// Function AdvancedSessions.AdvancedSessionsLibrary.MakeLiteralSessionPropertyInt
// 0x0038 (0x0038 - 0x0000)
struct AdvancedSessionsLibrary_MakeLiteralSessionPropertyInt final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19FB[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSessionPropertyKeyPair                ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedSessionsLibrary_MakeLiteralSessionPropertyInt) == 0x000008, "Wrong alignment on AdvancedSessionsLibrary_MakeLiteralSessionPropertyInt");
static_assert(sizeof(AdvancedSessionsLibrary_MakeLiteralSessionPropertyInt) == 0x000038, "Wrong size on AdvancedSessionsLibrary_MakeLiteralSessionPropertyInt");
static_assert(offsetof(AdvancedSessionsLibrary_MakeLiteralSessionPropertyInt, Key) == 0x000000, "Member 'AdvancedSessionsLibrary_MakeLiteralSessionPropertyInt::Key' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_MakeLiteralSessionPropertyInt, Value) == 0x000008, "Member 'AdvancedSessionsLibrary_MakeLiteralSessionPropertyInt::Value' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_MakeLiteralSessionPropertyInt, ReturnValue) == 0x000010, "Member 'AdvancedSessionsLibrary_MakeLiteralSessionPropertyInt::ReturnValue' has a wrong offset!");

// Function AdvancedSessions.AdvancedSessionsLibrary.MakeLiteralSessionPropertyString
// 0x0040 (0x0040 - 0x0000)
struct AdvancedSessionsLibrary_MakeLiteralSessionPropertyString final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSessionPropertyKeyPair                ReturnValue;                                       // 0x0018(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedSessionsLibrary_MakeLiteralSessionPropertyString) == 0x000008, "Wrong alignment on AdvancedSessionsLibrary_MakeLiteralSessionPropertyString");
static_assert(sizeof(AdvancedSessionsLibrary_MakeLiteralSessionPropertyString) == 0x000040, "Wrong size on AdvancedSessionsLibrary_MakeLiteralSessionPropertyString");
static_assert(offsetof(AdvancedSessionsLibrary_MakeLiteralSessionPropertyString, Key) == 0x000000, "Member 'AdvancedSessionsLibrary_MakeLiteralSessionPropertyString::Key' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_MakeLiteralSessionPropertyString, Value) == 0x000008, "Member 'AdvancedSessionsLibrary_MakeLiteralSessionPropertyString::Value' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_MakeLiteralSessionPropertyString, ReturnValue) == 0x000018, "Member 'AdvancedSessionsLibrary_MakeLiteralSessionPropertyString::ReturnValue' has a wrong offset!");

// Function AdvancedSessions.AdvancedSessionsLibrary.MakeLiteralSessionSearchProperty
// 0x0060 (0x0060 - 0x0000)
struct AdvancedSessionsLibrary_MakeLiteralSessionSearchProperty final
{
public:
	struct FSessionPropertyKeyPair                SessionSearchProperty;                             // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
	EOnlineComparisonOpRedux                      ComparisonOp;                                      // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19FC[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSessionsSearchSetting                 ReturnValue;                                       // 0x0030(0x0030)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedSessionsLibrary_MakeLiteralSessionSearchProperty) == 0x000008, "Wrong alignment on AdvancedSessionsLibrary_MakeLiteralSessionSearchProperty");
static_assert(sizeof(AdvancedSessionsLibrary_MakeLiteralSessionSearchProperty) == 0x000060, "Wrong size on AdvancedSessionsLibrary_MakeLiteralSessionSearchProperty");
static_assert(offsetof(AdvancedSessionsLibrary_MakeLiteralSessionSearchProperty, SessionSearchProperty) == 0x000000, "Member 'AdvancedSessionsLibrary_MakeLiteralSessionSearchProperty::SessionSearchProperty' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_MakeLiteralSessionSearchProperty, ComparisonOp) == 0x000028, "Member 'AdvancedSessionsLibrary_MakeLiteralSessionSearchProperty::ComparisonOp' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_MakeLiteralSessionSearchProperty, ReturnValue) == 0x000030, "Member 'AdvancedSessionsLibrary_MakeLiteralSessionSearchProperty::ReturnValue' has a wrong offset!");

// Function AdvancedSessions.AdvancedSessionsLibrary.ServerTravel
// 0x0020 (0x0020 - 0x0000)
struct AdvancedSessionsLibrary_ServerTravel final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InURL;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAbsolute;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldSkipGameNotify;                             // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19FD[0x5];                                     // 0x001B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedSessionsLibrary_ServerTravel) == 0x000008, "Wrong alignment on AdvancedSessionsLibrary_ServerTravel");
static_assert(sizeof(AdvancedSessionsLibrary_ServerTravel) == 0x000020, "Wrong size on AdvancedSessionsLibrary_ServerTravel");
static_assert(offsetof(AdvancedSessionsLibrary_ServerTravel, WorldContextObject) == 0x000000, "Member 'AdvancedSessionsLibrary_ServerTravel::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_ServerTravel, InURL) == 0x000008, "Member 'AdvancedSessionsLibrary_ServerTravel::InURL' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_ServerTravel, bAbsolute) == 0x000018, "Member 'AdvancedSessionsLibrary_ServerTravel::bAbsolute' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_ServerTravel, bShouldSkipGameNotify) == 0x000019, "Member 'AdvancedSessionsLibrary_ServerTravel::bShouldSkipGameNotify' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_ServerTravel, ReturnValue) == 0x00001A, "Member 'AdvancedSessionsLibrary_ServerTravel::ReturnValue' has a wrong offset!");

// Function AdvancedSessions.AdvancedSessionsLibrary.SetPlayerName
// 0x0018 (0x0018 - 0x0000)
struct AdvancedSessionsLibrary_SetPlayerName final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedSessionsLibrary_SetPlayerName) == 0x000008, "Wrong alignment on AdvancedSessionsLibrary_SetPlayerName");
static_assert(sizeof(AdvancedSessionsLibrary_SetPlayerName) == 0x000018, "Wrong size on AdvancedSessionsLibrary_SetPlayerName");
static_assert(offsetof(AdvancedSessionsLibrary_SetPlayerName, PlayerController) == 0x000000, "Member 'AdvancedSessionsLibrary_SetPlayerName::PlayerController' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_SetPlayerName, PlayerName) == 0x000008, "Member 'AdvancedSessionsLibrary_SetPlayerName::PlayerName' has a wrong offset!");

// Function AdvancedSessions.AdvancedSessionsLibrary.UniqueNetIdToString
// 0x0030 (0x0030 - 0x0000)
struct AdvancedSessionsLibrary_UniqueNetIdToString final
{
public:
	struct FBPUniqueNetId                         UniqueNetId;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 String;                                            // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedSessionsLibrary_UniqueNetIdToString) == 0x000008, "Wrong alignment on AdvancedSessionsLibrary_UniqueNetIdToString");
static_assert(sizeof(AdvancedSessionsLibrary_UniqueNetIdToString) == 0x000030, "Wrong size on AdvancedSessionsLibrary_UniqueNetIdToString");
static_assert(offsetof(AdvancedSessionsLibrary_UniqueNetIdToString, UniqueNetId) == 0x000000, "Member 'AdvancedSessionsLibrary_UniqueNetIdToString::UniqueNetId' has a wrong offset!");
static_assert(offsetof(AdvancedSessionsLibrary_UniqueNetIdToString, String) == 0x000020, "Member 'AdvancedSessionsLibrary_UniqueNetIdToString::String' has a wrong offset!");

// Function AdvancedSessions.AdvancedVoiceLibrary.GetNumLocalTalkers
// 0x0004 (0x0004 - 0x0000)
struct AdvancedVoiceLibrary_GetNumLocalTalkers final
{
public:
	int32                                         NumLocalTalkers;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedVoiceLibrary_GetNumLocalTalkers) == 0x000004, "Wrong alignment on AdvancedVoiceLibrary_GetNumLocalTalkers");
static_assert(sizeof(AdvancedVoiceLibrary_GetNumLocalTalkers) == 0x000004, "Wrong size on AdvancedVoiceLibrary_GetNumLocalTalkers");
static_assert(offsetof(AdvancedVoiceLibrary_GetNumLocalTalkers, NumLocalTalkers) == 0x000000, "Member 'AdvancedVoiceLibrary_GetNumLocalTalkers::NumLocalTalkers' has a wrong offset!");

// Function AdvancedSessions.AdvancedVoiceLibrary.IsHeadsetPresent
// 0x0002 (0x0002 - 0x0000)
struct AdvancedVoiceLibrary_IsHeadsetPresent final
{
public:
	bool                                          bHasHeadset;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         LocalPlayerNum;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedVoiceLibrary_IsHeadsetPresent) == 0x000001, "Wrong alignment on AdvancedVoiceLibrary_IsHeadsetPresent");
static_assert(sizeof(AdvancedVoiceLibrary_IsHeadsetPresent) == 0x000002, "Wrong size on AdvancedVoiceLibrary_IsHeadsetPresent");
static_assert(offsetof(AdvancedVoiceLibrary_IsHeadsetPresent, bHasHeadset) == 0x000000, "Member 'AdvancedVoiceLibrary_IsHeadsetPresent::bHasHeadset' has a wrong offset!");
static_assert(offsetof(AdvancedVoiceLibrary_IsHeadsetPresent, LocalPlayerNum) == 0x000001, "Member 'AdvancedVoiceLibrary_IsHeadsetPresent::LocalPlayerNum' has a wrong offset!");

// Function AdvancedSessions.AdvancedVoiceLibrary.IsLocalPlayerTalking
// 0x0002 (0x0002 - 0x0000)
struct AdvancedVoiceLibrary_IsLocalPlayerTalking final
{
public:
	uint8                                         LocalPlayerNum;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedVoiceLibrary_IsLocalPlayerTalking) == 0x000001, "Wrong alignment on AdvancedVoiceLibrary_IsLocalPlayerTalking");
static_assert(sizeof(AdvancedVoiceLibrary_IsLocalPlayerTalking) == 0x000002, "Wrong size on AdvancedVoiceLibrary_IsLocalPlayerTalking");
static_assert(offsetof(AdvancedVoiceLibrary_IsLocalPlayerTalking, LocalPlayerNum) == 0x000000, "Member 'AdvancedVoiceLibrary_IsLocalPlayerTalking::LocalPlayerNum' has a wrong offset!");
static_assert(offsetof(AdvancedVoiceLibrary_IsLocalPlayerTalking, ReturnValue) == 0x000001, "Member 'AdvancedVoiceLibrary_IsLocalPlayerTalking::ReturnValue' has a wrong offset!");

// Function AdvancedSessions.AdvancedVoiceLibrary.IsPlayerMuted
// 0x0030 (0x0030 - 0x0000)
struct AdvancedVoiceLibrary_IsPlayerMuted final
{
public:
	uint8                                         LocalUserNumChecking;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19FE[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBPUniqueNetId                         UniqueNetId;                                       // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19FF[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedVoiceLibrary_IsPlayerMuted) == 0x000008, "Wrong alignment on AdvancedVoiceLibrary_IsPlayerMuted");
static_assert(sizeof(AdvancedVoiceLibrary_IsPlayerMuted) == 0x000030, "Wrong size on AdvancedVoiceLibrary_IsPlayerMuted");
static_assert(offsetof(AdvancedVoiceLibrary_IsPlayerMuted, LocalUserNumChecking) == 0x000000, "Member 'AdvancedVoiceLibrary_IsPlayerMuted::LocalUserNumChecking' has a wrong offset!");
static_assert(offsetof(AdvancedVoiceLibrary_IsPlayerMuted, UniqueNetId) == 0x000008, "Member 'AdvancedVoiceLibrary_IsPlayerMuted::UniqueNetId' has a wrong offset!");
static_assert(offsetof(AdvancedVoiceLibrary_IsPlayerMuted, ReturnValue) == 0x000028, "Member 'AdvancedVoiceLibrary_IsPlayerMuted::ReturnValue' has a wrong offset!");

// Function AdvancedSessions.AdvancedVoiceLibrary.IsRemotePlayerTalking
// 0x0028 (0x0028 - 0x0000)
struct AdvancedVoiceLibrary_IsRemotePlayerTalking final
{
public:
	struct FBPUniqueNetId                         UniqueNetId;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A00[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedVoiceLibrary_IsRemotePlayerTalking) == 0x000008, "Wrong alignment on AdvancedVoiceLibrary_IsRemotePlayerTalking");
static_assert(sizeof(AdvancedVoiceLibrary_IsRemotePlayerTalking) == 0x000028, "Wrong size on AdvancedVoiceLibrary_IsRemotePlayerTalking");
static_assert(offsetof(AdvancedVoiceLibrary_IsRemotePlayerTalking, UniqueNetId) == 0x000000, "Member 'AdvancedVoiceLibrary_IsRemotePlayerTalking::UniqueNetId' has a wrong offset!");
static_assert(offsetof(AdvancedVoiceLibrary_IsRemotePlayerTalking, ReturnValue) == 0x000020, "Member 'AdvancedVoiceLibrary_IsRemotePlayerTalking::ReturnValue' has a wrong offset!");

// Function AdvancedSessions.AdvancedVoiceLibrary.MuteRemoteTalker
// 0x0030 (0x0030 - 0x0000)
struct AdvancedVoiceLibrary_MuteRemoteTalker final
{
public:
	uint8                                         LocalUserNum;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A01[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBPUniqueNetId                         UniqueNetId;                                       // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsSystemWide;                                     // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A02[0x6];                                     // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedVoiceLibrary_MuteRemoteTalker) == 0x000008, "Wrong alignment on AdvancedVoiceLibrary_MuteRemoteTalker");
static_assert(sizeof(AdvancedVoiceLibrary_MuteRemoteTalker) == 0x000030, "Wrong size on AdvancedVoiceLibrary_MuteRemoteTalker");
static_assert(offsetof(AdvancedVoiceLibrary_MuteRemoteTalker, LocalUserNum) == 0x000000, "Member 'AdvancedVoiceLibrary_MuteRemoteTalker::LocalUserNum' has a wrong offset!");
static_assert(offsetof(AdvancedVoiceLibrary_MuteRemoteTalker, UniqueNetId) == 0x000008, "Member 'AdvancedVoiceLibrary_MuteRemoteTalker::UniqueNetId' has a wrong offset!");
static_assert(offsetof(AdvancedVoiceLibrary_MuteRemoteTalker, bIsSystemWide) == 0x000028, "Member 'AdvancedVoiceLibrary_MuteRemoteTalker::bIsSystemWide' has a wrong offset!");
static_assert(offsetof(AdvancedVoiceLibrary_MuteRemoteTalker, ReturnValue) == 0x000029, "Member 'AdvancedVoiceLibrary_MuteRemoteTalker::ReturnValue' has a wrong offset!");

// Function AdvancedSessions.AdvancedVoiceLibrary.RegisterLocalTalker
// 0x0002 (0x0002 - 0x0000)
struct AdvancedVoiceLibrary_RegisterLocalTalker final
{
public:
	uint8                                         LocalPlayerNum;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedVoiceLibrary_RegisterLocalTalker) == 0x000001, "Wrong alignment on AdvancedVoiceLibrary_RegisterLocalTalker");
static_assert(sizeof(AdvancedVoiceLibrary_RegisterLocalTalker) == 0x000002, "Wrong size on AdvancedVoiceLibrary_RegisterLocalTalker");
static_assert(offsetof(AdvancedVoiceLibrary_RegisterLocalTalker, LocalPlayerNum) == 0x000000, "Member 'AdvancedVoiceLibrary_RegisterLocalTalker::LocalPlayerNum' has a wrong offset!");
static_assert(offsetof(AdvancedVoiceLibrary_RegisterLocalTalker, ReturnValue) == 0x000001, "Member 'AdvancedVoiceLibrary_RegisterLocalTalker::ReturnValue' has a wrong offset!");

// Function AdvancedSessions.AdvancedVoiceLibrary.RegisterRemoteTalker
// 0x0028 (0x0028 - 0x0000)
struct AdvancedVoiceLibrary_RegisterRemoteTalker final
{
public:
	struct FBPUniqueNetId                         UniqueNetId;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A03[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedVoiceLibrary_RegisterRemoteTalker) == 0x000008, "Wrong alignment on AdvancedVoiceLibrary_RegisterRemoteTalker");
static_assert(sizeof(AdvancedVoiceLibrary_RegisterRemoteTalker) == 0x000028, "Wrong size on AdvancedVoiceLibrary_RegisterRemoteTalker");
static_assert(offsetof(AdvancedVoiceLibrary_RegisterRemoteTalker, UniqueNetId) == 0x000000, "Member 'AdvancedVoiceLibrary_RegisterRemoteTalker::UniqueNetId' has a wrong offset!");
static_assert(offsetof(AdvancedVoiceLibrary_RegisterRemoteTalker, ReturnValue) == 0x000020, "Member 'AdvancedVoiceLibrary_RegisterRemoteTalker::ReturnValue' has a wrong offset!");

// Function AdvancedSessions.AdvancedVoiceLibrary.StartNetworkedVoice
// 0x0001 (0x0001 - 0x0000)
struct AdvancedVoiceLibrary_StartNetworkedVoice final
{
public:
	uint8                                         LocalPlayerNum;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedVoiceLibrary_StartNetworkedVoice) == 0x000001, "Wrong alignment on AdvancedVoiceLibrary_StartNetworkedVoice");
static_assert(sizeof(AdvancedVoiceLibrary_StartNetworkedVoice) == 0x000001, "Wrong size on AdvancedVoiceLibrary_StartNetworkedVoice");
static_assert(offsetof(AdvancedVoiceLibrary_StartNetworkedVoice, LocalPlayerNum) == 0x000000, "Member 'AdvancedVoiceLibrary_StartNetworkedVoice::LocalPlayerNum' has a wrong offset!");

// Function AdvancedSessions.AdvancedVoiceLibrary.StopNetworkedVoice
// 0x0001 (0x0001 - 0x0000)
struct AdvancedVoiceLibrary_StopNetworkedVoice final
{
public:
	uint8                                         LocalPlayerNum;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedVoiceLibrary_StopNetworkedVoice) == 0x000001, "Wrong alignment on AdvancedVoiceLibrary_StopNetworkedVoice");
static_assert(sizeof(AdvancedVoiceLibrary_StopNetworkedVoice) == 0x000001, "Wrong size on AdvancedVoiceLibrary_StopNetworkedVoice");
static_assert(offsetof(AdvancedVoiceLibrary_StopNetworkedVoice, LocalPlayerNum) == 0x000000, "Member 'AdvancedVoiceLibrary_StopNetworkedVoice::LocalPlayerNum' has a wrong offset!");

// Function AdvancedSessions.AdvancedVoiceLibrary.UnMuteRemoteTalker
// 0x0030 (0x0030 - 0x0000)
struct AdvancedVoiceLibrary_UnMuteRemoteTalker final
{
public:
	uint8                                         LocalUserNum;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A04[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBPUniqueNetId                         UniqueNetId;                                       // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsSystemWide;                                     // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A05[0x6];                                     // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedVoiceLibrary_UnMuteRemoteTalker) == 0x000008, "Wrong alignment on AdvancedVoiceLibrary_UnMuteRemoteTalker");
static_assert(sizeof(AdvancedVoiceLibrary_UnMuteRemoteTalker) == 0x000030, "Wrong size on AdvancedVoiceLibrary_UnMuteRemoteTalker");
static_assert(offsetof(AdvancedVoiceLibrary_UnMuteRemoteTalker, LocalUserNum) == 0x000000, "Member 'AdvancedVoiceLibrary_UnMuteRemoteTalker::LocalUserNum' has a wrong offset!");
static_assert(offsetof(AdvancedVoiceLibrary_UnMuteRemoteTalker, UniqueNetId) == 0x000008, "Member 'AdvancedVoiceLibrary_UnMuteRemoteTalker::UniqueNetId' has a wrong offset!");
static_assert(offsetof(AdvancedVoiceLibrary_UnMuteRemoteTalker, bIsSystemWide) == 0x000028, "Member 'AdvancedVoiceLibrary_UnMuteRemoteTalker::bIsSystemWide' has a wrong offset!");
static_assert(offsetof(AdvancedVoiceLibrary_UnMuteRemoteTalker, ReturnValue) == 0x000029, "Member 'AdvancedVoiceLibrary_UnMuteRemoteTalker::ReturnValue' has a wrong offset!");

// Function AdvancedSessions.AdvancedVoiceLibrary.UnRegisterLocalTalker
// 0x0001 (0x0001 - 0x0000)
struct AdvancedVoiceLibrary_UnRegisterLocalTalker final
{
public:
	uint8                                         LocalPlayerNum;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedVoiceLibrary_UnRegisterLocalTalker) == 0x000001, "Wrong alignment on AdvancedVoiceLibrary_UnRegisterLocalTalker");
static_assert(sizeof(AdvancedVoiceLibrary_UnRegisterLocalTalker) == 0x000001, "Wrong size on AdvancedVoiceLibrary_UnRegisterLocalTalker");
static_assert(offsetof(AdvancedVoiceLibrary_UnRegisterLocalTalker, LocalPlayerNum) == 0x000000, "Member 'AdvancedVoiceLibrary_UnRegisterLocalTalker::LocalPlayerNum' has a wrong offset!");

// Function AdvancedSessions.AdvancedVoiceLibrary.UnRegisterRemoteTalker
// 0x0028 (0x0028 - 0x0000)
struct AdvancedVoiceLibrary_UnRegisterRemoteTalker final
{
public:
	struct FBPUniqueNetId                         UniqueNetId;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A06[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedVoiceLibrary_UnRegisterRemoteTalker) == 0x000008, "Wrong alignment on AdvancedVoiceLibrary_UnRegisterRemoteTalker");
static_assert(sizeof(AdvancedVoiceLibrary_UnRegisterRemoteTalker) == 0x000028, "Wrong size on AdvancedVoiceLibrary_UnRegisterRemoteTalker");
static_assert(offsetof(AdvancedVoiceLibrary_UnRegisterRemoteTalker, UniqueNetId) == 0x000000, "Member 'AdvancedVoiceLibrary_UnRegisterRemoteTalker::UniqueNetId' has a wrong offset!");
static_assert(offsetof(AdvancedVoiceLibrary_UnRegisterRemoteTalker, ReturnValue) == 0x000020, "Member 'AdvancedVoiceLibrary_UnRegisterRemoteTalker::ReturnValue' has a wrong offset!");

// Function AdvancedSessions.AutoLoginUserCallbackProxy.AutoLoginUser
// 0x0018 (0x0018 - 0x0000)
struct AutoLoginUserCallbackProxy_AutoLoginUser final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LocalUserNum;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A08[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAutoLoginUserCallbackProxy*            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutoLoginUserCallbackProxy_AutoLoginUser) == 0x000008, "Wrong alignment on AutoLoginUserCallbackProxy_AutoLoginUser");
static_assert(sizeof(AutoLoginUserCallbackProxy_AutoLoginUser) == 0x000018, "Wrong size on AutoLoginUserCallbackProxy_AutoLoginUser");
static_assert(offsetof(AutoLoginUserCallbackProxy_AutoLoginUser, WorldContextObject) == 0x000000, "Member 'AutoLoginUserCallbackProxy_AutoLoginUser::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AutoLoginUserCallbackProxy_AutoLoginUser, LocalUserNum) == 0x000008, "Member 'AutoLoginUserCallbackProxy_AutoLoginUser::LocalUserNum' has a wrong offset!");
static_assert(offsetof(AutoLoginUserCallbackProxy_AutoLoginUser, ReturnValue) == 0x000010, "Member 'AutoLoginUserCallbackProxy_AutoLoginUser::ReturnValue' has a wrong offset!");

// Function AdvancedSessions.CancelFindSessionsCallbackProxy.CancelFindSessions
// 0x0018 (0x0018 - 0x0000)
struct CancelFindSessionsCallbackProxy_CancelFindSessions final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      PlayerController;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCancelFindSessionsCallbackProxy*       ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CancelFindSessionsCallbackProxy_CancelFindSessions) == 0x000008, "Wrong alignment on CancelFindSessionsCallbackProxy_CancelFindSessions");
static_assert(sizeof(CancelFindSessionsCallbackProxy_CancelFindSessions) == 0x000018, "Wrong size on CancelFindSessionsCallbackProxy_CancelFindSessions");
static_assert(offsetof(CancelFindSessionsCallbackProxy_CancelFindSessions, WorldContextObject) == 0x000000, "Member 'CancelFindSessionsCallbackProxy_CancelFindSessions::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CancelFindSessionsCallbackProxy_CancelFindSessions, PlayerController) == 0x000008, "Member 'CancelFindSessionsCallbackProxy_CancelFindSessions::PlayerController' has a wrong offset!");
static_assert(offsetof(CancelFindSessionsCallbackProxy_CancelFindSessions, ReturnValue) == 0x000010, "Member 'CancelFindSessionsCallbackProxy_CancelFindSessions::ReturnValue' has a wrong offset!");

// Function AdvancedSessions.CreateSessionCallbackProxyAdvanced.CreateAdvancedSession
// 0x0040 (0x0040 - 0x0000)
struct CreateSessionCallbackProxyAdvanced_CreateAdvancedSession final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSessionPropertyKeyPair>        ExtraSettings;                                     // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class APlayerController*                      PlayerController;                                  // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PublicConnections;                                 // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PrivateConnections;                                // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLAN;                                           // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowInvites;                                     // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDedicatedServer;                                // 0x002A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsePresence;                                      // 0x002B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLobbiesIfAvailable;                            // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowJoinViaPresence;                             // 0x002D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowJoinViaPresenceFriendsOnly;                  // 0x002E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAntiCheatProtected;                               // 0x002F(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsesStats;                                        // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldAdvertise;                                  // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLobbiesVoiceChatIfAvailable;                   // 0x0032(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStartAfterCreate;                                 // 0x0033(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A0B[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCreateSessionCallbackProxyAdvanced*    ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CreateSessionCallbackProxyAdvanced_CreateAdvancedSession) == 0x000008, "Wrong alignment on CreateSessionCallbackProxyAdvanced_CreateAdvancedSession");
static_assert(sizeof(CreateSessionCallbackProxyAdvanced_CreateAdvancedSession) == 0x000040, "Wrong size on CreateSessionCallbackProxyAdvanced_CreateAdvancedSession");
static_assert(offsetof(CreateSessionCallbackProxyAdvanced_CreateAdvancedSession, WorldContextObject) == 0x000000, "Member 'CreateSessionCallbackProxyAdvanced_CreateAdvancedSession::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CreateSessionCallbackProxyAdvanced_CreateAdvancedSession, ExtraSettings) == 0x000008, "Member 'CreateSessionCallbackProxyAdvanced_CreateAdvancedSession::ExtraSettings' has a wrong offset!");
static_assert(offsetof(CreateSessionCallbackProxyAdvanced_CreateAdvancedSession, PlayerController) == 0x000018, "Member 'CreateSessionCallbackProxyAdvanced_CreateAdvancedSession::PlayerController' has a wrong offset!");
static_assert(offsetof(CreateSessionCallbackProxyAdvanced_CreateAdvancedSession, PublicConnections) == 0x000020, "Member 'CreateSessionCallbackProxyAdvanced_CreateAdvancedSession::PublicConnections' has a wrong offset!");
static_assert(offsetof(CreateSessionCallbackProxyAdvanced_CreateAdvancedSession, PrivateConnections) == 0x000024, "Member 'CreateSessionCallbackProxyAdvanced_CreateAdvancedSession::PrivateConnections' has a wrong offset!");
static_assert(offsetof(CreateSessionCallbackProxyAdvanced_CreateAdvancedSession, bUseLAN) == 0x000028, "Member 'CreateSessionCallbackProxyAdvanced_CreateAdvancedSession::bUseLAN' has a wrong offset!");
static_assert(offsetof(CreateSessionCallbackProxyAdvanced_CreateAdvancedSession, bAllowInvites) == 0x000029, "Member 'CreateSessionCallbackProxyAdvanced_CreateAdvancedSession::bAllowInvites' has a wrong offset!");
static_assert(offsetof(CreateSessionCallbackProxyAdvanced_CreateAdvancedSession, bIsDedicatedServer) == 0x00002A, "Member 'CreateSessionCallbackProxyAdvanced_CreateAdvancedSession::bIsDedicatedServer' has a wrong offset!");
static_assert(offsetof(CreateSessionCallbackProxyAdvanced_CreateAdvancedSession, bUsePresence) == 0x00002B, "Member 'CreateSessionCallbackProxyAdvanced_CreateAdvancedSession::bUsePresence' has a wrong offset!");
static_assert(offsetof(CreateSessionCallbackProxyAdvanced_CreateAdvancedSession, bUseLobbiesIfAvailable) == 0x00002C, "Member 'CreateSessionCallbackProxyAdvanced_CreateAdvancedSession::bUseLobbiesIfAvailable' has a wrong offset!");
static_assert(offsetof(CreateSessionCallbackProxyAdvanced_CreateAdvancedSession, bAllowJoinViaPresence) == 0x00002D, "Member 'CreateSessionCallbackProxyAdvanced_CreateAdvancedSession::bAllowJoinViaPresence' has a wrong offset!");
static_assert(offsetof(CreateSessionCallbackProxyAdvanced_CreateAdvancedSession, bAllowJoinViaPresenceFriendsOnly) == 0x00002E, "Member 'CreateSessionCallbackProxyAdvanced_CreateAdvancedSession::bAllowJoinViaPresenceFriendsOnly' has a wrong offset!");
static_assert(offsetof(CreateSessionCallbackProxyAdvanced_CreateAdvancedSession, bAntiCheatProtected) == 0x00002F, "Member 'CreateSessionCallbackProxyAdvanced_CreateAdvancedSession::bAntiCheatProtected' has a wrong offset!");
static_assert(offsetof(CreateSessionCallbackProxyAdvanced_CreateAdvancedSession, bUsesStats) == 0x000030, "Member 'CreateSessionCallbackProxyAdvanced_CreateAdvancedSession::bUsesStats' has a wrong offset!");
static_assert(offsetof(CreateSessionCallbackProxyAdvanced_CreateAdvancedSession, bShouldAdvertise) == 0x000031, "Member 'CreateSessionCallbackProxyAdvanced_CreateAdvancedSession::bShouldAdvertise' has a wrong offset!");
static_assert(offsetof(CreateSessionCallbackProxyAdvanced_CreateAdvancedSession, bUseLobbiesVoiceChatIfAvailable) == 0x000032, "Member 'CreateSessionCallbackProxyAdvanced_CreateAdvancedSession::bUseLobbiesVoiceChatIfAvailable' has a wrong offset!");
static_assert(offsetof(CreateSessionCallbackProxyAdvanced_CreateAdvancedSession, bStartAfterCreate) == 0x000033, "Member 'CreateSessionCallbackProxyAdvanced_CreateAdvancedSession::bStartAfterCreate' has a wrong offset!");
static_assert(offsetof(CreateSessionCallbackProxyAdvanced_CreateAdvancedSession, ReturnValue) == 0x000038, "Member 'CreateSessionCallbackProxyAdvanced_CreateAdvancedSession::ReturnValue' has a wrong offset!");

// Function AdvancedSessions.EndSessionCallbackProxy.EndSession
// 0x0018 (0x0018 - 0x0000)
struct EndSessionCallbackProxy_EndSession final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      PlayerController;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEndSessionCallbackProxy*               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSessionCallbackProxy_EndSession) == 0x000008, "Wrong alignment on EndSessionCallbackProxy_EndSession");
static_assert(sizeof(EndSessionCallbackProxy_EndSession) == 0x000018, "Wrong size on EndSessionCallbackProxy_EndSession");
static_assert(offsetof(EndSessionCallbackProxy_EndSession, WorldContextObject) == 0x000000, "Member 'EndSessionCallbackProxy_EndSession::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndSessionCallbackProxy_EndSession, PlayerController) == 0x000008, "Member 'EndSessionCallbackProxy_EndSession::PlayerController' has a wrong offset!");
static_assert(offsetof(EndSessionCallbackProxy_EndSession, ReturnValue) == 0x000010, "Member 'EndSessionCallbackProxy_EndSession::ReturnValue' has a wrong offset!");

// Function AdvancedSessions.FindFriendSessionCallbackProxy.FindFriendSession
// 0x0038 (0x0038 - 0x0000)
struct FindFriendSessionCallbackProxy_FindFriendSession final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      PlayerController;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBPUniqueNetId                         FriendUniqueNetId;                                 // 0x0010(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UFindFriendSessionCallbackProxy*        ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FindFriendSessionCallbackProxy_FindFriendSession) == 0x000008, "Wrong alignment on FindFriendSessionCallbackProxy_FindFriendSession");
static_assert(sizeof(FindFriendSessionCallbackProxy_FindFriendSession) == 0x000038, "Wrong size on FindFriendSessionCallbackProxy_FindFriendSession");
static_assert(offsetof(FindFriendSessionCallbackProxy_FindFriendSession, WorldContextObject) == 0x000000, "Member 'FindFriendSessionCallbackProxy_FindFriendSession::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FindFriendSessionCallbackProxy_FindFriendSession, PlayerController) == 0x000008, "Member 'FindFriendSessionCallbackProxy_FindFriendSession::PlayerController' has a wrong offset!");
static_assert(offsetof(FindFriendSessionCallbackProxy_FindFriendSession, FriendUniqueNetId) == 0x000010, "Member 'FindFriendSessionCallbackProxy_FindFriendSession::FriendUniqueNetId' has a wrong offset!");
static_assert(offsetof(FindFriendSessionCallbackProxy_FindFriendSession, ReturnValue) == 0x000030, "Member 'FindFriendSessionCallbackProxy_FindFriendSession::ReturnValue' has a wrong offset!");

// Function AdvancedSessions.FindSessionsCallbackProxyAdvanced.FilterSessionResults
// 0x0030 (0x0030 - 0x0000)
struct FindSessionsCallbackProxyAdvanced_FilterSessionResults final
{
public:
	TArray<struct FBlueprintSessionResult>        SessionResults;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FSessionsSearchSetting>         Filters;                                           // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FBlueprintSessionResult>        FilteredResults;                                   // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FindSessionsCallbackProxyAdvanced_FilterSessionResults) == 0x000008, "Wrong alignment on FindSessionsCallbackProxyAdvanced_FilterSessionResults");
static_assert(sizeof(FindSessionsCallbackProxyAdvanced_FilterSessionResults) == 0x000030, "Wrong size on FindSessionsCallbackProxyAdvanced_FilterSessionResults");
static_assert(offsetof(FindSessionsCallbackProxyAdvanced_FilterSessionResults, SessionResults) == 0x000000, "Member 'FindSessionsCallbackProxyAdvanced_FilterSessionResults::SessionResults' has a wrong offset!");
static_assert(offsetof(FindSessionsCallbackProxyAdvanced_FilterSessionResults, Filters) == 0x000010, "Member 'FindSessionsCallbackProxyAdvanced_FilterSessionResults::Filters' has a wrong offset!");
static_assert(offsetof(FindSessionsCallbackProxyAdvanced_FilterSessionResults, FilteredResults) == 0x000020, "Member 'FindSessionsCallbackProxyAdvanced_FilterSessionResults::FilteredResults' has a wrong offset!");

// Function AdvancedSessions.FindSessionsCallbackProxyAdvanced.FindSessionsAdvanced
// 0x0038 (0x0038 - 0x0000)
struct FindSessionsCallbackProxyAdvanced_FindSessionsAdvanced final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      PlayerController;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxResults;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLAN;                                           // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBPServerPresenceSearchType                   ServerTypeToSearch;                                // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A0F[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSessionsSearchSetting>         Filters;                                           // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bEmptyServersOnly;                                 // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNonEmptyServersOnly;                              // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSecureServersOnly;                                // 0x002A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSearchLobbies;                                    // 0x002B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinSlotsAvailable;                                 // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFindSessionsCallbackProxyAdvanced*     ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FindSessionsCallbackProxyAdvanced_FindSessionsAdvanced) == 0x000008, "Wrong alignment on FindSessionsCallbackProxyAdvanced_FindSessionsAdvanced");
static_assert(sizeof(FindSessionsCallbackProxyAdvanced_FindSessionsAdvanced) == 0x000038, "Wrong size on FindSessionsCallbackProxyAdvanced_FindSessionsAdvanced");
static_assert(offsetof(FindSessionsCallbackProxyAdvanced_FindSessionsAdvanced, WorldContextObject) == 0x000000, "Member 'FindSessionsCallbackProxyAdvanced_FindSessionsAdvanced::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FindSessionsCallbackProxyAdvanced_FindSessionsAdvanced, PlayerController) == 0x000008, "Member 'FindSessionsCallbackProxyAdvanced_FindSessionsAdvanced::PlayerController' has a wrong offset!");
static_assert(offsetof(FindSessionsCallbackProxyAdvanced_FindSessionsAdvanced, MaxResults) == 0x000010, "Member 'FindSessionsCallbackProxyAdvanced_FindSessionsAdvanced::MaxResults' has a wrong offset!");
static_assert(offsetof(FindSessionsCallbackProxyAdvanced_FindSessionsAdvanced, bUseLAN) == 0x000014, "Member 'FindSessionsCallbackProxyAdvanced_FindSessionsAdvanced::bUseLAN' has a wrong offset!");
static_assert(offsetof(FindSessionsCallbackProxyAdvanced_FindSessionsAdvanced, ServerTypeToSearch) == 0x000015, "Member 'FindSessionsCallbackProxyAdvanced_FindSessionsAdvanced::ServerTypeToSearch' has a wrong offset!");
static_assert(offsetof(FindSessionsCallbackProxyAdvanced_FindSessionsAdvanced, Filters) == 0x000018, "Member 'FindSessionsCallbackProxyAdvanced_FindSessionsAdvanced::Filters' has a wrong offset!");
static_assert(offsetof(FindSessionsCallbackProxyAdvanced_FindSessionsAdvanced, bEmptyServersOnly) == 0x000028, "Member 'FindSessionsCallbackProxyAdvanced_FindSessionsAdvanced::bEmptyServersOnly' has a wrong offset!");
static_assert(offsetof(FindSessionsCallbackProxyAdvanced_FindSessionsAdvanced, bNonEmptyServersOnly) == 0x000029, "Member 'FindSessionsCallbackProxyAdvanced_FindSessionsAdvanced::bNonEmptyServersOnly' has a wrong offset!");
static_assert(offsetof(FindSessionsCallbackProxyAdvanced_FindSessionsAdvanced, bSecureServersOnly) == 0x00002A, "Member 'FindSessionsCallbackProxyAdvanced_FindSessionsAdvanced::bSecureServersOnly' has a wrong offset!");
static_assert(offsetof(FindSessionsCallbackProxyAdvanced_FindSessionsAdvanced, bSearchLobbies) == 0x00002B, "Member 'FindSessionsCallbackProxyAdvanced_FindSessionsAdvanced::bSearchLobbies' has a wrong offset!");
static_assert(offsetof(FindSessionsCallbackProxyAdvanced_FindSessionsAdvanced, MinSlotsAvailable) == 0x00002C, "Member 'FindSessionsCallbackProxyAdvanced_FindSessionsAdvanced::MinSlotsAvailable' has a wrong offset!");
static_assert(offsetof(FindSessionsCallbackProxyAdvanced_FindSessionsAdvanced, ReturnValue) == 0x000030, "Member 'FindSessionsCallbackProxyAdvanced_FindSessionsAdvanced::ReturnValue' has a wrong offset!");

// Function AdvancedSessions.GetFriendsCallbackProxy.GetAndStoreFriendsList
// 0x0018 (0x0018 - 0x0000)
struct GetFriendsCallbackProxy_GetAndStoreFriendsList final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      PlayerController;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGetFriendsCallbackProxy*               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GetFriendsCallbackProxy_GetAndStoreFriendsList) == 0x000008, "Wrong alignment on GetFriendsCallbackProxy_GetAndStoreFriendsList");
static_assert(sizeof(GetFriendsCallbackProxy_GetAndStoreFriendsList) == 0x000018, "Wrong size on GetFriendsCallbackProxy_GetAndStoreFriendsList");
static_assert(offsetof(GetFriendsCallbackProxy_GetAndStoreFriendsList, WorldContextObject) == 0x000000, "Member 'GetFriendsCallbackProxy_GetAndStoreFriendsList::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GetFriendsCallbackProxy_GetAndStoreFriendsList, PlayerController) == 0x000008, "Member 'GetFriendsCallbackProxy_GetAndStoreFriendsList::PlayerController' has a wrong offset!");
static_assert(offsetof(GetFriendsCallbackProxy_GetAndStoreFriendsList, ReturnValue) == 0x000010, "Member 'GetFriendsCallbackProxy_GetAndStoreFriendsList::ReturnValue' has a wrong offset!");

// Function AdvancedSessions.GetRecentPlayersCallbackProxy.GetAndStoreRecentPlayersList
// 0x0030 (0x0030 - 0x0000)
struct GetRecentPlayersCallbackProxy_GetAndStoreRecentPlayersList final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBPUniqueNetId                         UniqueNetId;                                       // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UGetRecentPlayersCallbackProxy*         ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GetRecentPlayersCallbackProxy_GetAndStoreRecentPlayersList) == 0x000008, "Wrong alignment on GetRecentPlayersCallbackProxy_GetAndStoreRecentPlayersList");
static_assert(sizeof(GetRecentPlayersCallbackProxy_GetAndStoreRecentPlayersList) == 0x000030, "Wrong size on GetRecentPlayersCallbackProxy_GetAndStoreRecentPlayersList");
static_assert(offsetof(GetRecentPlayersCallbackProxy_GetAndStoreRecentPlayersList, WorldContextObject) == 0x000000, "Member 'GetRecentPlayersCallbackProxy_GetAndStoreRecentPlayersList::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GetRecentPlayersCallbackProxy_GetAndStoreRecentPlayersList, UniqueNetId) == 0x000008, "Member 'GetRecentPlayersCallbackProxy_GetAndStoreRecentPlayersList::UniqueNetId' has a wrong offset!");
static_assert(offsetof(GetRecentPlayersCallbackProxy_GetAndStoreRecentPlayersList, ReturnValue) == 0x000028, "Member 'GetRecentPlayersCallbackProxy_GetAndStoreRecentPlayersList::ReturnValue' has a wrong offset!");

// Function AdvancedSessions.GetUserPrivilegeCallbackProxy.GetUserPrivilege
// 0x0038 (0x0038 - 0x0000)
struct GetUserPrivilegeCallbackProxy_GetUserPrivilege final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBPUserPrivileges                             PrivilegeToCheck;                                  // 0x0008(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A13[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBPUniqueNetId                         PlayerUniqueNetID;                                 // 0x0010(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UGetUserPrivilegeCallbackProxy*         ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GetUserPrivilegeCallbackProxy_GetUserPrivilege) == 0x000008, "Wrong alignment on GetUserPrivilegeCallbackProxy_GetUserPrivilege");
static_assert(sizeof(GetUserPrivilegeCallbackProxy_GetUserPrivilege) == 0x000038, "Wrong size on GetUserPrivilegeCallbackProxy_GetUserPrivilege");
static_assert(offsetof(GetUserPrivilegeCallbackProxy_GetUserPrivilege, WorldContextObject) == 0x000000, "Member 'GetUserPrivilegeCallbackProxy_GetUserPrivilege::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GetUserPrivilegeCallbackProxy_GetUserPrivilege, PrivilegeToCheck) == 0x000008, "Member 'GetUserPrivilegeCallbackProxy_GetUserPrivilege::PrivilegeToCheck' has a wrong offset!");
static_assert(offsetof(GetUserPrivilegeCallbackProxy_GetUserPrivilege, PlayerUniqueNetID) == 0x000010, "Member 'GetUserPrivilegeCallbackProxy_GetUserPrivilege::PlayerUniqueNetID' has a wrong offset!");
static_assert(offsetof(GetUserPrivilegeCallbackProxy_GetUserPrivilege, ReturnValue) == 0x000030, "Member 'GetUserPrivilegeCallbackProxy_GetUserPrivilege::ReturnValue' has a wrong offset!");

// Function AdvancedSessions.LoginUserCallbackProxy.LoginUser
// 0x0048 (0x0048 - 0x0000)
struct LoginUserCallbackProxy_LoginUser final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      PlayerController;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserToken;                                         // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AuthType;                                          // 0x0030(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULoginUserCallbackProxy*                ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoginUserCallbackProxy_LoginUser) == 0x000008, "Wrong alignment on LoginUserCallbackProxy_LoginUser");
static_assert(sizeof(LoginUserCallbackProxy_LoginUser) == 0x000048, "Wrong size on LoginUserCallbackProxy_LoginUser");
static_assert(offsetof(LoginUserCallbackProxy_LoginUser, WorldContextObject) == 0x000000, "Member 'LoginUserCallbackProxy_LoginUser::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LoginUserCallbackProxy_LoginUser, PlayerController) == 0x000008, "Member 'LoginUserCallbackProxy_LoginUser::PlayerController' has a wrong offset!");
static_assert(offsetof(LoginUserCallbackProxy_LoginUser, UserId) == 0x000010, "Member 'LoginUserCallbackProxy_LoginUser::UserId' has a wrong offset!");
static_assert(offsetof(LoginUserCallbackProxy_LoginUser, UserToken) == 0x000020, "Member 'LoginUserCallbackProxy_LoginUser::UserToken' has a wrong offset!");
static_assert(offsetof(LoginUserCallbackProxy_LoginUser, AuthType) == 0x000030, "Member 'LoginUserCallbackProxy_LoginUser::AuthType' has a wrong offset!");
static_assert(offsetof(LoginUserCallbackProxy_LoginUser, ReturnValue) == 0x000040, "Member 'LoginUserCallbackProxy_LoginUser::ReturnValue' has a wrong offset!");

// Function AdvancedSessions.LogoutUserCallbackProxy.LogoutUser
// 0x0018 (0x0018 - 0x0000)
struct LogoutUserCallbackProxy_LogoutUser final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      PlayerController;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULogoutUserCallbackProxy*               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LogoutUserCallbackProxy_LogoutUser) == 0x000008, "Wrong alignment on LogoutUserCallbackProxy_LogoutUser");
static_assert(sizeof(LogoutUserCallbackProxy_LogoutUser) == 0x000018, "Wrong size on LogoutUserCallbackProxy_LogoutUser");
static_assert(offsetof(LogoutUserCallbackProxy_LogoutUser, WorldContextObject) == 0x000000, "Member 'LogoutUserCallbackProxy_LogoutUser::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LogoutUserCallbackProxy_LogoutUser, PlayerController) == 0x000008, "Member 'LogoutUserCallbackProxy_LogoutUser::PlayerController' has a wrong offset!");
static_assert(offsetof(LogoutUserCallbackProxy_LogoutUser, ReturnValue) == 0x000010, "Member 'LogoutUserCallbackProxy_LogoutUser::ReturnValue' has a wrong offset!");

// Function AdvancedSessions.SendFriendInviteCallbackProxy.SendFriendInvite
// 0x0038 (0x0038 - 0x0000)
struct SendFriendInviteCallbackProxy_SendFriendInvite final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      PlayerController;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBPUniqueNetId                         UniqueNetIDInvited;                                // 0x0010(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class USendFriendInviteCallbackProxy*         ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SendFriendInviteCallbackProxy_SendFriendInvite) == 0x000008, "Wrong alignment on SendFriendInviteCallbackProxy_SendFriendInvite");
static_assert(sizeof(SendFriendInviteCallbackProxy_SendFriendInvite) == 0x000038, "Wrong size on SendFriendInviteCallbackProxy_SendFriendInvite");
static_assert(offsetof(SendFriendInviteCallbackProxy_SendFriendInvite, WorldContextObject) == 0x000000, "Member 'SendFriendInviteCallbackProxy_SendFriendInvite::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SendFriendInviteCallbackProxy_SendFriendInvite, PlayerController) == 0x000008, "Member 'SendFriendInviteCallbackProxy_SendFriendInvite::PlayerController' has a wrong offset!");
static_assert(offsetof(SendFriendInviteCallbackProxy_SendFriendInvite, UniqueNetIDInvited) == 0x000010, "Member 'SendFriendInviteCallbackProxy_SendFriendInvite::UniqueNetIDInvited' has a wrong offset!");
static_assert(offsetof(SendFriendInviteCallbackProxy_SendFriendInvite, ReturnValue) == 0x000030, "Member 'SendFriendInviteCallbackProxy_SendFriendInvite::ReturnValue' has a wrong offset!");

// Function AdvancedSessions.StartSessionCallbackProxyAdvanced.StartAdvancedSession
// 0x0010 (0x0010 - 0x0000)
struct StartSessionCallbackProxyAdvanced_StartAdvancedSession final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStartSessionCallbackProxyAdvanced*     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StartSessionCallbackProxyAdvanced_StartAdvancedSession) == 0x000008, "Wrong alignment on StartSessionCallbackProxyAdvanced_StartAdvancedSession");
static_assert(sizeof(StartSessionCallbackProxyAdvanced_StartAdvancedSession) == 0x000010, "Wrong size on StartSessionCallbackProxyAdvanced_StartAdvancedSession");
static_assert(offsetof(StartSessionCallbackProxyAdvanced_StartAdvancedSession, WorldContextObject) == 0x000000, "Member 'StartSessionCallbackProxyAdvanced_StartAdvancedSession::WorldContextObject' has a wrong offset!");
static_assert(offsetof(StartSessionCallbackProxyAdvanced_StartAdvancedSession, ReturnValue) == 0x000008, "Member 'StartSessionCallbackProxyAdvanced_StartAdvancedSession::ReturnValue' has a wrong offset!");

// Function AdvancedSessions.UpdateSessionCallbackProxyAdvanced.UpdateSession
// 0x0030 (0x0030 - 0x0000)
struct UpdateSessionCallbackProxyAdvanced_UpdateSession final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSessionPropertyKeyPair>        ExtraSettings;                                     // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         PublicConnections;                                 // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PrivateConnections;                                // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLAN;                                           // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowInvites;                                     // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowJoinInProgress;                              // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRefreshOnlineData;                                // 0x0023(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDedicatedServer;                                // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A19[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUpdateSessionCallbackProxyAdvanced*    ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UpdateSessionCallbackProxyAdvanced_UpdateSession) == 0x000008, "Wrong alignment on UpdateSessionCallbackProxyAdvanced_UpdateSession");
static_assert(sizeof(UpdateSessionCallbackProxyAdvanced_UpdateSession) == 0x000030, "Wrong size on UpdateSessionCallbackProxyAdvanced_UpdateSession");
static_assert(offsetof(UpdateSessionCallbackProxyAdvanced_UpdateSession, WorldContextObject) == 0x000000, "Member 'UpdateSessionCallbackProxyAdvanced_UpdateSession::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UpdateSessionCallbackProxyAdvanced_UpdateSession, ExtraSettings) == 0x000008, "Member 'UpdateSessionCallbackProxyAdvanced_UpdateSession::ExtraSettings' has a wrong offset!");
static_assert(offsetof(UpdateSessionCallbackProxyAdvanced_UpdateSession, PublicConnections) == 0x000018, "Member 'UpdateSessionCallbackProxyAdvanced_UpdateSession::PublicConnections' has a wrong offset!");
static_assert(offsetof(UpdateSessionCallbackProxyAdvanced_UpdateSession, PrivateConnections) == 0x00001C, "Member 'UpdateSessionCallbackProxyAdvanced_UpdateSession::PrivateConnections' has a wrong offset!");
static_assert(offsetof(UpdateSessionCallbackProxyAdvanced_UpdateSession, bUseLAN) == 0x000020, "Member 'UpdateSessionCallbackProxyAdvanced_UpdateSession::bUseLAN' has a wrong offset!");
static_assert(offsetof(UpdateSessionCallbackProxyAdvanced_UpdateSession, bAllowInvites) == 0x000021, "Member 'UpdateSessionCallbackProxyAdvanced_UpdateSession::bAllowInvites' has a wrong offset!");
static_assert(offsetof(UpdateSessionCallbackProxyAdvanced_UpdateSession, bAllowJoinInProgress) == 0x000022, "Member 'UpdateSessionCallbackProxyAdvanced_UpdateSession::bAllowJoinInProgress' has a wrong offset!");
static_assert(offsetof(UpdateSessionCallbackProxyAdvanced_UpdateSession, bRefreshOnlineData) == 0x000023, "Member 'UpdateSessionCallbackProxyAdvanced_UpdateSession::bRefreshOnlineData' has a wrong offset!");
static_assert(offsetof(UpdateSessionCallbackProxyAdvanced_UpdateSession, bIsDedicatedServer) == 0x000024, "Member 'UpdateSessionCallbackProxyAdvanced_UpdateSession::bIsDedicatedServer' has a wrong offset!");
static_assert(offsetof(UpdateSessionCallbackProxyAdvanced_UpdateSession, ReturnValue) == 0x000028, "Member 'UpdateSessionCallbackProxyAdvanced_UpdateSession::ReturnValue' has a wrong offset!");

}

