#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_PoceduralBorderMesh

#include "Basic.hpp"

#include "SplineSegmentStruct_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "GeometryFramework_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_PoceduralBorderMesh.B_PoceduralBorderMesh_C
// 0x00A8 (0x0358 - 0x02B0)
class AB_PoceduralBorderMesh_C final : public ADynamicMeshActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USplineComponent*                       Spline;                                            // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector2D>                      TwoDPositions;                                     // 0x02C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        WallDetail;                                        // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SegmentLength;                                     // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WallHeight;                                        // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WallHeightVisible;                                 // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CollisionThickness;                                // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CollisionEdgeExtension;                            // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CreateTopCover;                                    // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F1C[0x3];                                     // 0x0301(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Rows;                                              // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDynamicMeshPool*                       Mesh_Pool;                                         // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        WallLength;                                        // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 SegementList;                                      // 0x0318(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          DebugMaterial;                                     // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ClosedSplineLoop;                                  // 0x0329(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F1D[0x6];                                     // 0x032A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSplineSegmentStruct>           SplineSegments;                                    // 0x0330(0x0010)(Edit, BlueprintVisible)
	TArray<struct FSplineSegmentStruct>           AllSegments;                                       // 0x0340(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Drawdistance;                                      // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void UpdateDrawdistance(class UDynamicMeshComponent* Component);
	void TransformMesh(class UDynamicMesh* Mesh, int32 SegmentCounter);
	void SetupCollisionParameters(class UBoxComponent* BoxCollision);
	void ReceiveBeginPlay();
	void GetCollisionCoverExtents(double* BoxExtentX, double* BoxExtentY, double* CenterPointX, double* CenterPointY);
	void Get_Segment_Points();
	void GenerateSplinePoints();
	void GenerateMesh(class UDynamicMesh* TargetMesh);
	void FindSegment(int32 Param_Index, TArray<int32>& ControlPointIndex, struct FSplineSegmentStruct* Segment, int32* NextNew);
	void ExtendCollisionEdges(TArray<class UBoxComponent*>& Boxes);
	void ExecuteUbergraph_B_PoceduralBorderMesh(int32 EntryPoint);
	void CreateCollision();
	void CalculateLength();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_PoceduralBorderMesh_C">();
	}
	static class AB_PoceduralBorderMesh_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_PoceduralBorderMesh_C>();
	}
};
static_assert(alignof(AB_PoceduralBorderMesh_C) == 0x000008, "Wrong alignment on AB_PoceduralBorderMesh_C");
static_assert(sizeof(AB_PoceduralBorderMesh_C) == 0x000358, "Wrong size on AB_PoceduralBorderMesh_C");
static_assert(offsetof(AB_PoceduralBorderMesh_C, UberGraphFrame) == 0x0002B0, "Member 'AB_PoceduralBorderMesh_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AB_PoceduralBorderMesh_C, Spline) == 0x0002B8, "Member 'AB_PoceduralBorderMesh_C::Spline' has a wrong offset!");
static_assert(offsetof(AB_PoceduralBorderMesh_C, TwoDPositions) == 0x0002C0, "Member 'AB_PoceduralBorderMesh_C::TwoDPositions' has a wrong offset!");
static_assert(offsetof(AB_PoceduralBorderMesh_C, WallDetail) == 0x0002D0, "Member 'AB_PoceduralBorderMesh_C::WallDetail' has a wrong offset!");
static_assert(offsetof(AB_PoceduralBorderMesh_C, SegmentLength) == 0x0002D8, "Member 'AB_PoceduralBorderMesh_C::SegmentLength' has a wrong offset!");
static_assert(offsetof(AB_PoceduralBorderMesh_C, WallHeight) == 0x0002E0, "Member 'AB_PoceduralBorderMesh_C::WallHeight' has a wrong offset!");
static_assert(offsetof(AB_PoceduralBorderMesh_C, WallHeightVisible) == 0x0002E8, "Member 'AB_PoceduralBorderMesh_C::WallHeightVisible' has a wrong offset!");
static_assert(offsetof(AB_PoceduralBorderMesh_C, CollisionThickness) == 0x0002F0, "Member 'AB_PoceduralBorderMesh_C::CollisionThickness' has a wrong offset!");
static_assert(offsetof(AB_PoceduralBorderMesh_C, CollisionEdgeExtension) == 0x0002F8, "Member 'AB_PoceduralBorderMesh_C::CollisionEdgeExtension' has a wrong offset!");
static_assert(offsetof(AB_PoceduralBorderMesh_C, CreateTopCover) == 0x000300, "Member 'AB_PoceduralBorderMesh_C::CreateTopCover' has a wrong offset!");
static_assert(offsetof(AB_PoceduralBorderMesh_C, Rows) == 0x000304, "Member 'AB_PoceduralBorderMesh_C::Rows' has a wrong offset!");
static_assert(offsetof(AB_PoceduralBorderMesh_C, Mesh_Pool) == 0x000308, "Member 'AB_PoceduralBorderMesh_C::Mesh_Pool' has a wrong offset!");
static_assert(offsetof(AB_PoceduralBorderMesh_C, WallLength) == 0x000310, "Member 'AB_PoceduralBorderMesh_C::WallLength' has a wrong offset!");
static_assert(offsetof(AB_PoceduralBorderMesh_C, SegementList) == 0x000318, "Member 'AB_PoceduralBorderMesh_C::SegementList' has a wrong offset!");
static_assert(offsetof(AB_PoceduralBorderMesh_C, DebugMaterial) == 0x000328, "Member 'AB_PoceduralBorderMesh_C::DebugMaterial' has a wrong offset!");
static_assert(offsetof(AB_PoceduralBorderMesh_C, ClosedSplineLoop) == 0x000329, "Member 'AB_PoceduralBorderMesh_C::ClosedSplineLoop' has a wrong offset!");
static_assert(offsetof(AB_PoceduralBorderMesh_C, SplineSegments) == 0x000330, "Member 'AB_PoceduralBorderMesh_C::SplineSegments' has a wrong offset!");
static_assert(offsetof(AB_PoceduralBorderMesh_C, AllSegments) == 0x000340, "Member 'AB_PoceduralBorderMesh_C::AllSegments' has a wrong offset!");
static_assert(offsetof(AB_PoceduralBorderMesh_C, Drawdistance) == 0x000350, "Member 'AB_PoceduralBorderMesh_C::Drawdistance' has a wrong offset!");

}

