#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LowEntryExtendedStandardLibrary

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "LowEntryExtendedStandardLibrary_structs.hpp"


namespace SDK::Params
{

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataReader.GetBit
// 0x0001 (0x0001 - 0x0000)
struct LowEntryBitDataReader_GetBit final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataReader_GetBit) == 0x000001, "Wrong alignment on LowEntryBitDataReader_GetBit");
static_assert(sizeof(LowEntryBitDataReader_GetBit) == 0x000001, "Wrong size on LowEntryBitDataReader_GetBit");
static_assert(offsetof(LowEntryBitDataReader_GetBit, ReturnValue) == 0x000000, "Member 'LowEntryBitDataReader_GetBit::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataReader.GetBitArray
// 0x0010 (0x0010 - 0x0000)
struct LowEntryBitDataReader_GetBitArray final
{
public:
	TArray<bool>                                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataReader_GetBitArray) == 0x000008, "Wrong alignment on LowEntryBitDataReader_GetBitArray");
static_assert(sizeof(LowEntryBitDataReader_GetBitArray) == 0x000010, "Wrong size on LowEntryBitDataReader_GetBitArray");
static_assert(offsetof(LowEntryBitDataReader_GetBitArray, ReturnValue) == 0x000000, "Member 'LowEntryBitDataReader_GetBitArray::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataReader.GetBoolean
// 0x0001 (0x0001 - 0x0000)
struct LowEntryBitDataReader_GetBoolean final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataReader_GetBoolean) == 0x000001, "Wrong alignment on LowEntryBitDataReader_GetBoolean");
static_assert(sizeof(LowEntryBitDataReader_GetBoolean) == 0x000001, "Wrong size on LowEntryBitDataReader_GetBoolean");
static_assert(offsetof(LowEntryBitDataReader_GetBoolean, ReturnValue) == 0x000000, "Member 'LowEntryBitDataReader_GetBoolean::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataReader.GetBooleanArray
// 0x0010 (0x0010 - 0x0000)
struct LowEntryBitDataReader_GetBooleanArray final
{
public:
	TArray<bool>                                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataReader_GetBooleanArray) == 0x000008, "Wrong alignment on LowEntryBitDataReader_GetBooleanArray");
static_assert(sizeof(LowEntryBitDataReader_GetBooleanArray) == 0x000010, "Wrong size on LowEntryBitDataReader_GetBooleanArray");
static_assert(offsetof(LowEntryBitDataReader_GetBooleanArray, ReturnValue) == 0x000000, "Member 'LowEntryBitDataReader_GetBooleanArray::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataReader.GetByte
// 0x0001 (0x0001 - 0x0000)
struct LowEntryBitDataReader_GetByte final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataReader_GetByte) == 0x000001, "Wrong alignment on LowEntryBitDataReader_GetByte");
static_assert(sizeof(LowEntryBitDataReader_GetByte) == 0x000001, "Wrong size on LowEntryBitDataReader_GetByte");
static_assert(offsetof(LowEntryBitDataReader_GetByte, ReturnValue) == 0x000000, "Member 'LowEntryBitDataReader_GetByte::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataReader.GetByteArray
// 0x0010 (0x0010 - 0x0000)
struct LowEntryBitDataReader_GetByteArray final
{
public:
	TArray<uint8>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataReader_GetByteArray) == 0x000008, "Wrong alignment on LowEntryBitDataReader_GetByteArray");
static_assert(sizeof(LowEntryBitDataReader_GetByteArray) == 0x000010, "Wrong size on LowEntryBitDataReader_GetByteArray");
static_assert(offsetof(LowEntryBitDataReader_GetByteArray, ReturnValue) == 0x000000, "Member 'LowEntryBitDataReader_GetByteArray::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataReader.GetByteArrayLeastSignificantBits
// 0x0018 (0x0018 - 0x0000)
struct LowEntryBitDataReader_GetByteArrayLeastSignificantBits final
{
public:
	int32                                         BitCount;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B9C[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataReader_GetByteArrayLeastSignificantBits) == 0x000008, "Wrong alignment on LowEntryBitDataReader_GetByteArrayLeastSignificantBits");
static_assert(sizeof(LowEntryBitDataReader_GetByteArrayLeastSignificantBits) == 0x000018, "Wrong size on LowEntryBitDataReader_GetByteArrayLeastSignificantBits");
static_assert(offsetof(LowEntryBitDataReader_GetByteArrayLeastSignificantBits, BitCount) == 0x000000, "Member 'LowEntryBitDataReader_GetByteArrayLeastSignificantBits::BitCount' has a wrong offset!");
static_assert(offsetof(LowEntryBitDataReader_GetByteArrayLeastSignificantBits, ReturnValue) == 0x000008, "Member 'LowEntryBitDataReader_GetByteArrayLeastSignificantBits::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataReader.GetByteArrayMostSignificantBits
// 0x0018 (0x0018 - 0x0000)
struct LowEntryBitDataReader_GetByteArrayMostSignificantBits final
{
public:
	int32                                         BitCount;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B9D[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataReader_GetByteArrayMostSignificantBits) == 0x000008, "Wrong alignment on LowEntryBitDataReader_GetByteArrayMostSignificantBits");
static_assert(sizeof(LowEntryBitDataReader_GetByteArrayMostSignificantBits) == 0x000018, "Wrong size on LowEntryBitDataReader_GetByteArrayMostSignificantBits");
static_assert(offsetof(LowEntryBitDataReader_GetByteArrayMostSignificantBits, BitCount) == 0x000000, "Member 'LowEntryBitDataReader_GetByteArrayMostSignificantBits::BitCount' has a wrong offset!");
static_assert(offsetof(LowEntryBitDataReader_GetByteArrayMostSignificantBits, ReturnValue) == 0x000008, "Member 'LowEntryBitDataReader_GetByteArrayMostSignificantBits::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataReader.GetByteLeastSignificantBits
// 0x0008 (0x0008 - 0x0000)
struct LowEntryBitDataReader_GetByteLeastSignificantBits final
{
public:
	int32                                         BitCount;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B9E[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryBitDataReader_GetByteLeastSignificantBits) == 0x000004, "Wrong alignment on LowEntryBitDataReader_GetByteLeastSignificantBits");
static_assert(sizeof(LowEntryBitDataReader_GetByteLeastSignificantBits) == 0x000008, "Wrong size on LowEntryBitDataReader_GetByteLeastSignificantBits");
static_assert(offsetof(LowEntryBitDataReader_GetByteLeastSignificantBits, BitCount) == 0x000000, "Member 'LowEntryBitDataReader_GetByteLeastSignificantBits::BitCount' has a wrong offset!");
static_assert(offsetof(LowEntryBitDataReader_GetByteLeastSignificantBits, ReturnValue) == 0x000004, "Member 'LowEntryBitDataReader_GetByteLeastSignificantBits::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataReader.GetByteMostSignificantBits
// 0x0008 (0x0008 - 0x0000)
struct LowEntryBitDataReader_GetByteMostSignificantBits final
{
public:
	int32                                         BitCount;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B9F[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryBitDataReader_GetByteMostSignificantBits) == 0x000004, "Wrong alignment on LowEntryBitDataReader_GetByteMostSignificantBits");
static_assert(sizeof(LowEntryBitDataReader_GetByteMostSignificantBits) == 0x000008, "Wrong size on LowEntryBitDataReader_GetByteMostSignificantBits");
static_assert(offsetof(LowEntryBitDataReader_GetByteMostSignificantBits, BitCount) == 0x000000, "Member 'LowEntryBitDataReader_GetByteMostSignificantBits::BitCount' has a wrong offset!");
static_assert(offsetof(LowEntryBitDataReader_GetByteMostSignificantBits, ReturnValue) == 0x000004, "Member 'LowEntryBitDataReader_GetByteMostSignificantBits::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataReader.GetClone
// 0x0008 (0x0008 - 0x0000)
struct LowEntryBitDataReader_GetClone final
{
public:
	class ULowEntryBitDataReader*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataReader_GetClone) == 0x000008, "Wrong alignment on LowEntryBitDataReader_GetClone");
static_assert(sizeof(LowEntryBitDataReader_GetClone) == 0x000008, "Wrong size on LowEntryBitDataReader_GetClone");
static_assert(offsetof(LowEntryBitDataReader_GetClone, ReturnValue) == 0x000000, "Member 'LowEntryBitDataReader_GetClone::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataReader.GetDouble
// 0x0008 (0x0008 - 0x0000)
struct LowEntryBitDataReader_GetDouble final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataReader_GetDouble) == 0x000008, "Wrong alignment on LowEntryBitDataReader_GetDouble");
static_assert(sizeof(LowEntryBitDataReader_GetDouble) == 0x000008, "Wrong size on LowEntryBitDataReader_GetDouble");
static_assert(offsetof(LowEntryBitDataReader_GetDouble, ReturnValue) == 0x000000, "Member 'LowEntryBitDataReader_GetDouble::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataReader.GetDoubleArray
// 0x0010 (0x0010 - 0x0000)
struct LowEntryBitDataReader_GetDoubleArray final
{
public:
	TArray<double>                                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataReader_GetDoubleArray) == 0x000008, "Wrong alignment on LowEntryBitDataReader_GetDoubleArray");
static_assert(sizeof(LowEntryBitDataReader_GetDoubleArray) == 0x000010, "Wrong size on LowEntryBitDataReader_GetDoubleArray");
static_assert(offsetof(LowEntryBitDataReader_GetDoubleArray, ReturnValue) == 0x000000, "Member 'LowEntryBitDataReader_GetDoubleArray::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataReader.GetDoubleBytes
// 0x0008 (0x0008 - 0x0000)
struct LowEntryBitDataReader_GetDoubleBytes final
{
public:
	class ULowEntryDouble*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataReader_GetDoubleBytes) == 0x000008, "Wrong alignment on LowEntryBitDataReader_GetDoubleBytes");
static_assert(sizeof(LowEntryBitDataReader_GetDoubleBytes) == 0x000008, "Wrong size on LowEntryBitDataReader_GetDoubleBytes");
static_assert(offsetof(LowEntryBitDataReader_GetDoubleBytes, ReturnValue) == 0x000000, "Member 'LowEntryBitDataReader_GetDoubleBytes::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataReader.GetDoubleBytesArray
// 0x0010 (0x0010 - 0x0000)
struct LowEntryBitDataReader_GetDoubleBytesArray final
{
public:
	TArray<class ULowEntryDouble*>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataReader_GetDoubleBytesArray) == 0x000008, "Wrong alignment on LowEntryBitDataReader_GetDoubleBytesArray");
static_assert(sizeof(LowEntryBitDataReader_GetDoubleBytesArray) == 0x000010, "Wrong size on LowEntryBitDataReader_GetDoubleBytesArray");
static_assert(offsetof(LowEntryBitDataReader_GetDoubleBytesArray, ReturnValue) == 0x000000, "Member 'LowEntryBitDataReader_GetDoubleBytesArray::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataReader.GetFloat
// 0x0004 (0x0004 - 0x0000)
struct LowEntryBitDataReader_GetFloat final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataReader_GetFloat) == 0x000004, "Wrong alignment on LowEntryBitDataReader_GetFloat");
static_assert(sizeof(LowEntryBitDataReader_GetFloat) == 0x000004, "Wrong size on LowEntryBitDataReader_GetFloat");
static_assert(offsetof(LowEntryBitDataReader_GetFloat, ReturnValue) == 0x000000, "Member 'LowEntryBitDataReader_GetFloat::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataReader.GetFloatArray
// 0x0010 (0x0010 - 0x0000)
struct LowEntryBitDataReader_GetFloatArray final
{
public:
	TArray<float>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataReader_GetFloatArray) == 0x000008, "Wrong alignment on LowEntryBitDataReader_GetFloatArray");
static_assert(sizeof(LowEntryBitDataReader_GetFloatArray) == 0x000010, "Wrong size on LowEntryBitDataReader_GetFloatArray");
static_assert(offsetof(LowEntryBitDataReader_GetFloatArray, ReturnValue) == 0x000000, "Member 'LowEntryBitDataReader_GetFloatArray::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataReader.GetInteger
// 0x0004 (0x0004 - 0x0000)
struct LowEntryBitDataReader_GetInteger final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataReader_GetInteger) == 0x000004, "Wrong alignment on LowEntryBitDataReader_GetInteger");
static_assert(sizeof(LowEntryBitDataReader_GetInteger) == 0x000004, "Wrong size on LowEntryBitDataReader_GetInteger");
static_assert(offsetof(LowEntryBitDataReader_GetInteger, ReturnValue) == 0x000000, "Member 'LowEntryBitDataReader_GetInteger::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataReader.GetIntegerArray
// 0x0010 (0x0010 - 0x0000)
struct LowEntryBitDataReader_GetIntegerArray final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataReader_GetIntegerArray) == 0x000008, "Wrong alignment on LowEntryBitDataReader_GetIntegerArray");
static_assert(sizeof(LowEntryBitDataReader_GetIntegerArray) == 0x000010, "Wrong size on LowEntryBitDataReader_GetIntegerArray");
static_assert(offsetof(LowEntryBitDataReader_GetIntegerArray, ReturnValue) == 0x000000, "Member 'LowEntryBitDataReader_GetIntegerArray::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataReader.GetIntegerArrayLeastSignificantBits
// 0x0018 (0x0018 - 0x0000)
struct LowEntryBitDataReader_GetIntegerArrayLeastSignificantBits final
{
public:
	int32                                         BitCount;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BA0[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataReader_GetIntegerArrayLeastSignificantBits) == 0x000008, "Wrong alignment on LowEntryBitDataReader_GetIntegerArrayLeastSignificantBits");
static_assert(sizeof(LowEntryBitDataReader_GetIntegerArrayLeastSignificantBits) == 0x000018, "Wrong size on LowEntryBitDataReader_GetIntegerArrayLeastSignificantBits");
static_assert(offsetof(LowEntryBitDataReader_GetIntegerArrayLeastSignificantBits, BitCount) == 0x000000, "Member 'LowEntryBitDataReader_GetIntegerArrayLeastSignificantBits::BitCount' has a wrong offset!");
static_assert(offsetof(LowEntryBitDataReader_GetIntegerArrayLeastSignificantBits, ReturnValue) == 0x000008, "Member 'LowEntryBitDataReader_GetIntegerArrayLeastSignificantBits::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataReader.GetIntegerArrayMostSignificantBits
// 0x0018 (0x0018 - 0x0000)
struct LowEntryBitDataReader_GetIntegerArrayMostSignificantBits final
{
public:
	int32                                         BitCount;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BA1[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataReader_GetIntegerArrayMostSignificantBits) == 0x000008, "Wrong alignment on LowEntryBitDataReader_GetIntegerArrayMostSignificantBits");
static_assert(sizeof(LowEntryBitDataReader_GetIntegerArrayMostSignificantBits) == 0x000018, "Wrong size on LowEntryBitDataReader_GetIntegerArrayMostSignificantBits");
static_assert(offsetof(LowEntryBitDataReader_GetIntegerArrayMostSignificantBits, BitCount) == 0x000000, "Member 'LowEntryBitDataReader_GetIntegerArrayMostSignificantBits::BitCount' has a wrong offset!");
static_assert(offsetof(LowEntryBitDataReader_GetIntegerArrayMostSignificantBits, ReturnValue) == 0x000008, "Member 'LowEntryBitDataReader_GetIntegerArrayMostSignificantBits::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataReader.GetIntegerLeastSignificantBits
// 0x0008 (0x0008 - 0x0000)
struct LowEntryBitDataReader_GetIntegerLeastSignificantBits final
{
public:
	int32                                         BitCount;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataReader_GetIntegerLeastSignificantBits) == 0x000004, "Wrong alignment on LowEntryBitDataReader_GetIntegerLeastSignificantBits");
static_assert(sizeof(LowEntryBitDataReader_GetIntegerLeastSignificantBits) == 0x000008, "Wrong size on LowEntryBitDataReader_GetIntegerLeastSignificantBits");
static_assert(offsetof(LowEntryBitDataReader_GetIntegerLeastSignificantBits, BitCount) == 0x000000, "Member 'LowEntryBitDataReader_GetIntegerLeastSignificantBits::BitCount' has a wrong offset!");
static_assert(offsetof(LowEntryBitDataReader_GetIntegerLeastSignificantBits, ReturnValue) == 0x000004, "Member 'LowEntryBitDataReader_GetIntegerLeastSignificantBits::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataReader.GetIntegerMostSignificantBits
// 0x0008 (0x0008 - 0x0000)
struct LowEntryBitDataReader_GetIntegerMostSignificantBits final
{
public:
	int32                                         BitCount;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataReader_GetIntegerMostSignificantBits) == 0x000004, "Wrong alignment on LowEntryBitDataReader_GetIntegerMostSignificantBits");
static_assert(sizeof(LowEntryBitDataReader_GetIntegerMostSignificantBits) == 0x000008, "Wrong size on LowEntryBitDataReader_GetIntegerMostSignificantBits");
static_assert(offsetof(LowEntryBitDataReader_GetIntegerMostSignificantBits, BitCount) == 0x000000, "Member 'LowEntryBitDataReader_GetIntegerMostSignificantBits::BitCount' has a wrong offset!");
static_assert(offsetof(LowEntryBitDataReader_GetIntegerMostSignificantBits, ReturnValue) == 0x000004, "Member 'LowEntryBitDataReader_GetIntegerMostSignificantBits::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataReader.GetLong
// 0x0008 (0x0008 - 0x0000)
struct LowEntryBitDataReader_GetLong final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataReader_GetLong) == 0x000008, "Wrong alignment on LowEntryBitDataReader_GetLong");
static_assert(sizeof(LowEntryBitDataReader_GetLong) == 0x000008, "Wrong size on LowEntryBitDataReader_GetLong");
static_assert(offsetof(LowEntryBitDataReader_GetLong, ReturnValue) == 0x000000, "Member 'LowEntryBitDataReader_GetLong::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataReader.GetLongArray
// 0x0010 (0x0010 - 0x0000)
struct LowEntryBitDataReader_GetLongArray final
{
public:
	TArray<int64>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataReader_GetLongArray) == 0x000008, "Wrong alignment on LowEntryBitDataReader_GetLongArray");
static_assert(sizeof(LowEntryBitDataReader_GetLongArray) == 0x000010, "Wrong size on LowEntryBitDataReader_GetLongArray");
static_assert(offsetof(LowEntryBitDataReader_GetLongArray, ReturnValue) == 0x000000, "Member 'LowEntryBitDataReader_GetLongArray::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataReader.GetLongBytes
// 0x0008 (0x0008 - 0x0000)
struct LowEntryBitDataReader_GetLongBytes final
{
public:
	class ULowEntryLong*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataReader_GetLongBytes) == 0x000008, "Wrong alignment on LowEntryBitDataReader_GetLongBytes");
static_assert(sizeof(LowEntryBitDataReader_GetLongBytes) == 0x000008, "Wrong size on LowEntryBitDataReader_GetLongBytes");
static_assert(offsetof(LowEntryBitDataReader_GetLongBytes, ReturnValue) == 0x000000, "Member 'LowEntryBitDataReader_GetLongBytes::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataReader.GetLongBytesArray
// 0x0010 (0x0010 - 0x0000)
struct LowEntryBitDataReader_GetLongBytesArray final
{
public:
	TArray<class ULowEntryLong*>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataReader_GetLongBytesArray) == 0x000008, "Wrong alignment on LowEntryBitDataReader_GetLongBytesArray");
static_assert(sizeof(LowEntryBitDataReader_GetLongBytesArray) == 0x000010, "Wrong size on LowEntryBitDataReader_GetLongBytesArray");
static_assert(offsetof(LowEntryBitDataReader_GetLongBytesArray, ReturnValue) == 0x000000, "Member 'LowEntryBitDataReader_GetLongBytesArray::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataReader.GetPosition
// 0x0004 (0x0004 - 0x0000)
struct LowEntryBitDataReader_GetPosition final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataReader_GetPosition) == 0x000004, "Wrong alignment on LowEntryBitDataReader_GetPosition");
static_assert(sizeof(LowEntryBitDataReader_GetPosition) == 0x000004, "Wrong size on LowEntryBitDataReader_GetPosition");
static_assert(offsetof(LowEntryBitDataReader_GetPosition, ReturnValue) == 0x000000, "Member 'LowEntryBitDataReader_GetPosition::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataReader.GetPositiveInteger1
// 0x0004 (0x0004 - 0x0000)
struct LowEntryBitDataReader_GetPositiveInteger1 final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataReader_GetPositiveInteger1) == 0x000004, "Wrong alignment on LowEntryBitDataReader_GetPositiveInteger1");
static_assert(sizeof(LowEntryBitDataReader_GetPositiveInteger1) == 0x000004, "Wrong size on LowEntryBitDataReader_GetPositiveInteger1");
static_assert(offsetof(LowEntryBitDataReader_GetPositiveInteger1, ReturnValue) == 0x000000, "Member 'LowEntryBitDataReader_GetPositiveInteger1::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataReader.GetPositiveInteger1Array
// 0x0010 (0x0010 - 0x0000)
struct LowEntryBitDataReader_GetPositiveInteger1Array final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataReader_GetPositiveInteger1Array) == 0x000008, "Wrong alignment on LowEntryBitDataReader_GetPositiveInteger1Array");
static_assert(sizeof(LowEntryBitDataReader_GetPositiveInteger1Array) == 0x000010, "Wrong size on LowEntryBitDataReader_GetPositiveInteger1Array");
static_assert(offsetof(LowEntryBitDataReader_GetPositiveInteger1Array, ReturnValue) == 0x000000, "Member 'LowEntryBitDataReader_GetPositiveInteger1Array::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataReader.GetPositiveInteger2
// 0x0004 (0x0004 - 0x0000)
struct LowEntryBitDataReader_GetPositiveInteger2 final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataReader_GetPositiveInteger2) == 0x000004, "Wrong alignment on LowEntryBitDataReader_GetPositiveInteger2");
static_assert(sizeof(LowEntryBitDataReader_GetPositiveInteger2) == 0x000004, "Wrong size on LowEntryBitDataReader_GetPositiveInteger2");
static_assert(offsetof(LowEntryBitDataReader_GetPositiveInteger2, ReturnValue) == 0x000000, "Member 'LowEntryBitDataReader_GetPositiveInteger2::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataReader.GetPositiveInteger2Array
// 0x0010 (0x0010 - 0x0000)
struct LowEntryBitDataReader_GetPositiveInteger2Array final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataReader_GetPositiveInteger2Array) == 0x000008, "Wrong alignment on LowEntryBitDataReader_GetPositiveInteger2Array");
static_assert(sizeof(LowEntryBitDataReader_GetPositiveInteger2Array) == 0x000010, "Wrong size on LowEntryBitDataReader_GetPositiveInteger2Array");
static_assert(offsetof(LowEntryBitDataReader_GetPositiveInteger2Array, ReturnValue) == 0x000000, "Member 'LowEntryBitDataReader_GetPositiveInteger2Array::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataReader.GetPositiveInteger3
// 0x0004 (0x0004 - 0x0000)
struct LowEntryBitDataReader_GetPositiveInteger3 final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataReader_GetPositiveInteger3) == 0x000004, "Wrong alignment on LowEntryBitDataReader_GetPositiveInteger3");
static_assert(sizeof(LowEntryBitDataReader_GetPositiveInteger3) == 0x000004, "Wrong size on LowEntryBitDataReader_GetPositiveInteger3");
static_assert(offsetof(LowEntryBitDataReader_GetPositiveInteger3, ReturnValue) == 0x000000, "Member 'LowEntryBitDataReader_GetPositiveInteger3::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataReader.GetPositiveInteger3Array
// 0x0010 (0x0010 - 0x0000)
struct LowEntryBitDataReader_GetPositiveInteger3Array final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataReader_GetPositiveInteger3Array) == 0x000008, "Wrong alignment on LowEntryBitDataReader_GetPositiveInteger3Array");
static_assert(sizeof(LowEntryBitDataReader_GetPositiveInteger3Array) == 0x000010, "Wrong size on LowEntryBitDataReader_GetPositiveInteger3Array");
static_assert(offsetof(LowEntryBitDataReader_GetPositiveInteger3Array, ReturnValue) == 0x000000, "Member 'LowEntryBitDataReader_GetPositiveInteger3Array::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataReader.GetStringUtf8
// 0x0010 (0x0010 - 0x0000)
struct LowEntryBitDataReader_GetStringUtf8 final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataReader_GetStringUtf8) == 0x000008, "Wrong alignment on LowEntryBitDataReader_GetStringUtf8");
static_assert(sizeof(LowEntryBitDataReader_GetStringUtf8) == 0x000010, "Wrong size on LowEntryBitDataReader_GetStringUtf8");
static_assert(offsetof(LowEntryBitDataReader_GetStringUtf8, ReturnValue) == 0x000000, "Member 'LowEntryBitDataReader_GetStringUtf8::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataReader.GetStringUtf8Array
// 0x0010 (0x0010 - 0x0000)
struct LowEntryBitDataReader_GetStringUtf8Array final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataReader_GetStringUtf8Array) == 0x000008, "Wrong alignment on LowEntryBitDataReader_GetStringUtf8Array");
static_assert(sizeof(LowEntryBitDataReader_GetStringUtf8Array) == 0x000010, "Wrong size on LowEntryBitDataReader_GetStringUtf8Array");
static_assert(offsetof(LowEntryBitDataReader_GetStringUtf8Array, ReturnValue) == 0x000000, "Member 'LowEntryBitDataReader_GetStringUtf8Array::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataReader.Remaining
// 0x0004 (0x0004 - 0x0000)
struct LowEntryBitDataReader_Remaining final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataReader_Remaining) == 0x000004, "Wrong alignment on LowEntryBitDataReader_Remaining");
static_assert(sizeof(LowEntryBitDataReader_Remaining) == 0x000004, "Wrong size on LowEntryBitDataReader_Remaining");
static_assert(offsetof(LowEntryBitDataReader_Remaining, ReturnValue) == 0x000000, "Member 'LowEntryBitDataReader_Remaining::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataReader.SetPosition
// 0x0004 (0x0004 - 0x0000)
struct LowEntryBitDataReader_SetPosition final
{
public:
	int32                                         Position_;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataReader_SetPosition) == 0x000004, "Wrong alignment on LowEntryBitDataReader_SetPosition");
static_assert(sizeof(LowEntryBitDataReader_SetPosition) == 0x000004, "Wrong size on LowEntryBitDataReader_SetPosition");
static_assert(offsetof(LowEntryBitDataReader_SetPosition, Position_) == 0x000000, "Member 'LowEntryBitDataReader_SetPosition::Position_' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataWriter.AddBit
// 0x0001 (0x0001 - 0x0000)
struct LowEntryBitDataWriter_AddBit final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataWriter_AddBit) == 0x000001, "Wrong alignment on LowEntryBitDataWriter_AddBit");
static_assert(sizeof(LowEntryBitDataWriter_AddBit) == 0x000001, "Wrong size on LowEntryBitDataWriter_AddBit");
static_assert(offsetof(LowEntryBitDataWriter_AddBit, Value) == 0x000000, "Member 'LowEntryBitDataWriter_AddBit::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataWriter.AddBitArray
// 0x0010 (0x0010 - 0x0000)
struct LowEntryBitDataWriter_AddBitArray final
{
public:
	TArray<bool>                                  Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataWriter_AddBitArray) == 0x000008, "Wrong alignment on LowEntryBitDataWriter_AddBitArray");
static_assert(sizeof(LowEntryBitDataWriter_AddBitArray) == 0x000010, "Wrong size on LowEntryBitDataWriter_AddBitArray");
static_assert(offsetof(LowEntryBitDataWriter_AddBitArray, Value) == 0x000000, "Member 'LowEntryBitDataWriter_AddBitArray::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataWriter.AddBoolean
// 0x0001 (0x0001 - 0x0000)
struct LowEntryBitDataWriter_AddBoolean final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataWriter_AddBoolean) == 0x000001, "Wrong alignment on LowEntryBitDataWriter_AddBoolean");
static_assert(sizeof(LowEntryBitDataWriter_AddBoolean) == 0x000001, "Wrong size on LowEntryBitDataWriter_AddBoolean");
static_assert(offsetof(LowEntryBitDataWriter_AddBoolean, Value) == 0x000000, "Member 'LowEntryBitDataWriter_AddBoolean::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataWriter.AddBooleanArray
// 0x0010 (0x0010 - 0x0000)
struct LowEntryBitDataWriter_AddBooleanArray final
{
public:
	TArray<bool>                                  Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataWriter_AddBooleanArray) == 0x000008, "Wrong alignment on LowEntryBitDataWriter_AddBooleanArray");
static_assert(sizeof(LowEntryBitDataWriter_AddBooleanArray) == 0x000010, "Wrong size on LowEntryBitDataWriter_AddBooleanArray");
static_assert(offsetof(LowEntryBitDataWriter_AddBooleanArray, Value) == 0x000000, "Member 'LowEntryBitDataWriter_AddBooleanArray::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataWriter.AddByte
// 0x0001 (0x0001 - 0x0000)
struct LowEntryBitDataWriter_AddByte final
{
public:
	uint8                                         Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataWriter_AddByte) == 0x000001, "Wrong alignment on LowEntryBitDataWriter_AddByte");
static_assert(sizeof(LowEntryBitDataWriter_AddByte) == 0x000001, "Wrong size on LowEntryBitDataWriter_AddByte");
static_assert(offsetof(LowEntryBitDataWriter_AddByte, Value) == 0x000000, "Member 'LowEntryBitDataWriter_AddByte::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataWriter.AddByteArray
// 0x0010 (0x0010 - 0x0000)
struct LowEntryBitDataWriter_AddByteArray final
{
public:
	TArray<uint8>                                 Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataWriter_AddByteArray) == 0x000008, "Wrong alignment on LowEntryBitDataWriter_AddByteArray");
static_assert(sizeof(LowEntryBitDataWriter_AddByteArray) == 0x000010, "Wrong size on LowEntryBitDataWriter_AddByteArray");
static_assert(offsetof(LowEntryBitDataWriter_AddByteArray, Value) == 0x000000, "Member 'LowEntryBitDataWriter_AddByteArray::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataWriter.AddByteArrayLeastSignificantBits
// 0x0018 (0x0018 - 0x0000)
struct LowEntryBitDataWriter_AddByteArrayLeastSignificantBits final
{
public:
	TArray<uint8>                                 Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         BitCount;                                          // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BA3[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryBitDataWriter_AddByteArrayLeastSignificantBits) == 0x000008, "Wrong alignment on LowEntryBitDataWriter_AddByteArrayLeastSignificantBits");
static_assert(sizeof(LowEntryBitDataWriter_AddByteArrayLeastSignificantBits) == 0x000018, "Wrong size on LowEntryBitDataWriter_AddByteArrayLeastSignificantBits");
static_assert(offsetof(LowEntryBitDataWriter_AddByteArrayLeastSignificantBits, Value) == 0x000000, "Member 'LowEntryBitDataWriter_AddByteArrayLeastSignificantBits::Value' has a wrong offset!");
static_assert(offsetof(LowEntryBitDataWriter_AddByteArrayLeastSignificantBits, BitCount) == 0x000010, "Member 'LowEntryBitDataWriter_AddByteArrayLeastSignificantBits::BitCount' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataWriter.AddByteArrayMostSignificantBits
// 0x0018 (0x0018 - 0x0000)
struct LowEntryBitDataWriter_AddByteArrayMostSignificantBits final
{
public:
	TArray<uint8>                                 Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         BitCount;                                          // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BA4[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryBitDataWriter_AddByteArrayMostSignificantBits) == 0x000008, "Wrong alignment on LowEntryBitDataWriter_AddByteArrayMostSignificantBits");
static_assert(sizeof(LowEntryBitDataWriter_AddByteArrayMostSignificantBits) == 0x000018, "Wrong size on LowEntryBitDataWriter_AddByteArrayMostSignificantBits");
static_assert(offsetof(LowEntryBitDataWriter_AddByteArrayMostSignificantBits, Value) == 0x000000, "Member 'LowEntryBitDataWriter_AddByteArrayMostSignificantBits::Value' has a wrong offset!");
static_assert(offsetof(LowEntryBitDataWriter_AddByteArrayMostSignificantBits, BitCount) == 0x000010, "Member 'LowEntryBitDataWriter_AddByteArrayMostSignificantBits::BitCount' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataWriter.AddByteLeastSignificantBits
// 0x0008 (0x0008 - 0x0000)
struct LowEntryBitDataWriter_AddByteLeastSignificantBits final
{
public:
	uint8                                         Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BA5[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BitCount;                                          // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataWriter_AddByteLeastSignificantBits) == 0x000004, "Wrong alignment on LowEntryBitDataWriter_AddByteLeastSignificantBits");
static_assert(sizeof(LowEntryBitDataWriter_AddByteLeastSignificantBits) == 0x000008, "Wrong size on LowEntryBitDataWriter_AddByteLeastSignificantBits");
static_assert(offsetof(LowEntryBitDataWriter_AddByteLeastSignificantBits, Value) == 0x000000, "Member 'LowEntryBitDataWriter_AddByteLeastSignificantBits::Value' has a wrong offset!");
static_assert(offsetof(LowEntryBitDataWriter_AddByteLeastSignificantBits, BitCount) == 0x000004, "Member 'LowEntryBitDataWriter_AddByteLeastSignificantBits::BitCount' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataWriter.AddByteMostSignificantBits
// 0x0008 (0x0008 - 0x0000)
struct LowEntryBitDataWriter_AddByteMostSignificantBits final
{
public:
	uint8                                         Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BA6[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BitCount;                                          // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataWriter_AddByteMostSignificantBits) == 0x000004, "Wrong alignment on LowEntryBitDataWriter_AddByteMostSignificantBits");
static_assert(sizeof(LowEntryBitDataWriter_AddByteMostSignificantBits) == 0x000008, "Wrong size on LowEntryBitDataWriter_AddByteMostSignificantBits");
static_assert(offsetof(LowEntryBitDataWriter_AddByteMostSignificantBits, Value) == 0x000000, "Member 'LowEntryBitDataWriter_AddByteMostSignificantBits::Value' has a wrong offset!");
static_assert(offsetof(LowEntryBitDataWriter_AddByteMostSignificantBits, BitCount) == 0x000004, "Member 'LowEntryBitDataWriter_AddByteMostSignificantBits::BitCount' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataWriter.AddDouble
// 0x0008 (0x0008 - 0x0000)
struct LowEntryBitDataWriter_AddDouble final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataWriter_AddDouble) == 0x000008, "Wrong alignment on LowEntryBitDataWriter_AddDouble");
static_assert(sizeof(LowEntryBitDataWriter_AddDouble) == 0x000008, "Wrong size on LowEntryBitDataWriter_AddDouble");
static_assert(offsetof(LowEntryBitDataWriter_AddDouble, Value) == 0x000000, "Member 'LowEntryBitDataWriter_AddDouble::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataWriter.AddDoubleArray
// 0x0010 (0x0010 - 0x0000)
struct LowEntryBitDataWriter_AddDoubleArray final
{
public:
	TArray<double>                                Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataWriter_AddDoubleArray) == 0x000008, "Wrong alignment on LowEntryBitDataWriter_AddDoubleArray");
static_assert(sizeof(LowEntryBitDataWriter_AddDoubleArray) == 0x000010, "Wrong size on LowEntryBitDataWriter_AddDoubleArray");
static_assert(offsetof(LowEntryBitDataWriter_AddDoubleArray, Value) == 0x000000, "Member 'LowEntryBitDataWriter_AddDoubleArray::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataWriter.AddDoubleBytes
// 0x0008 (0x0008 - 0x0000)
struct LowEntryBitDataWriter_AddDoubleBytes final
{
public:
	class ULowEntryDouble*                        Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataWriter_AddDoubleBytes) == 0x000008, "Wrong alignment on LowEntryBitDataWriter_AddDoubleBytes");
static_assert(sizeof(LowEntryBitDataWriter_AddDoubleBytes) == 0x000008, "Wrong size on LowEntryBitDataWriter_AddDoubleBytes");
static_assert(offsetof(LowEntryBitDataWriter_AddDoubleBytes, Value) == 0x000000, "Member 'LowEntryBitDataWriter_AddDoubleBytes::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataWriter.AddDoubleBytesArray
// 0x0010 (0x0010 - 0x0000)
struct LowEntryBitDataWriter_AddDoubleBytesArray final
{
public:
	TArray<class ULowEntryDouble*>                Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataWriter_AddDoubleBytesArray) == 0x000008, "Wrong alignment on LowEntryBitDataWriter_AddDoubleBytesArray");
static_assert(sizeof(LowEntryBitDataWriter_AddDoubleBytesArray) == 0x000010, "Wrong size on LowEntryBitDataWriter_AddDoubleBytesArray");
static_assert(offsetof(LowEntryBitDataWriter_AddDoubleBytesArray, Value) == 0x000000, "Member 'LowEntryBitDataWriter_AddDoubleBytesArray::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataWriter.AddFloat
// 0x0004 (0x0004 - 0x0000)
struct LowEntryBitDataWriter_AddFloat final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataWriter_AddFloat) == 0x000004, "Wrong alignment on LowEntryBitDataWriter_AddFloat");
static_assert(sizeof(LowEntryBitDataWriter_AddFloat) == 0x000004, "Wrong size on LowEntryBitDataWriter_AddFloat");
static_assert(offsetof(LowEntryBitDataWriter_AddFloat, Value) == 0x000000, "Member 'LowEntryBitDataWriter_AddFloat::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataWriter.AddFloatArray
// 0x0010 (0x0010 - 0x0000)
struct LowEntryBitDataWriter_AddFloatArray final
{
public:
	TArray<float>                                 Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataWriter_AddFloatArray) == 0x000008, "Wrong alignment on LowEntryBitDataWriter_AddFloatArray");
static_assert(sizeof(LowEntryBitDataWriter_AddFloatArray) == 0x000010, "Wrong size on LowEntryBitDataWriter_AddFloatArray");
static_assert(offsetof(LowEntryBitDataWriter_AddFloatArray, Value) == 0x000000, "Member 'LowEntryBitDataWriter_AddFloatArray::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataWriter.AddInteger
// 0x0004 (0x0004 - 0x0000)
struct LowEntryBitDataWriter_AddInteger final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataWriter_AddInteger) == 0x000004, "Wrong alignment on LowEntryBitDataWriter_AddInteger");
static_assert(sizeof(LowEntryBitDataWriter_AddInteger) == 0x000004, "Wrong size on LowEntryBitDataWriter_AddInteger");
static_assert(offsetof(LowEntryBitDataWriter_AddInteger, Value) == 0x000000, "Member 'LowEntryBitDataWriter_AddInteger::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataWriter.AddIntegerArray
// 0x0010 (0x0010 - 0x0000)
struct LowEntryBitDataWriter_AddIntegerArray final
{
public:
	TArray<int32>                                 Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataWriter_AddIntegerArray) == 0x000008, "Wrong alignment on LowEntryBitDataWriter_AddIntegerArray");
static_assert(sizeof(LowEntryBitDataWriter_AddIntegerArray) == 0x000010, "Wrong size on LowEntryBitDataWriter_AddIntegerArray");
static_assert(offsetof(LowEntryBitDataWriter_AddIntegerArray, Value) == 0x000000, "Member 'LowEntryBitDataWriter_AddIntegerArray::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataWriter.AddIntegerArrayLeastSignificantBits
// 0x0018 (0x0018 - 0x0000)
struct LowEntryBitDataWriter_AddIntegerArrayLeastSignificantBits final
{
public:
	TArray<int32>                                 Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         BitCount;                                          // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BA7[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryBitDataWriter_AddIntegerArrayLeastSignificantBits) == 0x000008, "Wrong alignment on LowEntryBitDataWriter_AddIntegerArrayLeastSignificantBits");
static_assert(sizeof(LowEntryBitDataWriter_AddIntegerArrayLeastSignificantBits) == 0x000018, "Wrong size on LowEntryBitDataWriter_AddIntegerArrayLeastSignificantBits");
static_assert(offsetof(LowEntryBitDataWriter_AddIntegerArrayLeastSignificantBits, Value) == 0x000000, "Member 'LowEntryBitDataWriter_AddIntegerArrayLeastSignificantBits::Value' has a wrong offset!");
static_assert(offsetof(LowEntryBitDataWriter_AddIntegerArrayLeastSignificantBits, BitCount) == 0x000010, "Member 'LowEntryBitDataWriter_AddIntegerArrayLeastSignificantBits::BitCount' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataWriter.AddIntegerArrayMostSignificantBits
// 0x0018 (0x0018 - 0x0000)
struct LowEntryBitDataWriter_AddIntegerArrayMostSignificantBits final
{
public:
	TArray<int32>                                 Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         BitCount;                                          // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BA8[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryBitDataWriter_AddIntegerArrayMostSignificantBits) == 0x000008, "Wrong alignment on LowEntryBitDataWriter_AddIntegerArrayMostSignificantBits");
static_assert(sizeof(LowEntryBitDataWriter_AddIntegerArrayMostSignificantBits) == 0x000018, "Wrong size on LowEntryBitDataWriter_AddIntegerArrayMostSignificantBits");
static_assert(offsetof(LowEntryBitDataWriter_AddIntegerArrayMostSignificantBits, Value) == 0x000000, "Member 'LowEntryBitDataWriter_AddIntegerArrayMostSignificantBits::Value' has a wrong offset!");
static_assert(offsetof(LowEntryBitDataWriter_AddIntegerArrayMostSignificantBits, BitCount) == 0x000010, "Member 'LowEntryBitDataWriter_AddIntegerArrayMostSignificantBits::BitCount' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataWriter.AddIntegerLeastSignificantBits
// 0x0008 (0x0008 - 0x0000)
struct LowEntryBitDataWriter_AddIntegerLeastSignificantBits final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BitCount;                                          // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataWriter_AddIntegerLeastSignificantBits) == 0x000004, "Wrong alignment on LowEntryBitDataWriter_AddIntegerLeastSignificantBits");
static_assert(sizeof(LowEntryBitDataWriter_AddIntegerLeastSignificantBits) == 0x000008, "Wrong size on LowEntryBitDataWriter_AddIntegerLeastSignificantBits");
static_assert(offsetof(LowEntryBitDataWriter_AddIntegerLeastSignificantBits, Value) == 0x000000, "Member 'LowEntryBitDataWriter_AddIntegerLeastSignificantBits::Value' has a wrong offset!");
static_assert(offsetof(LowEntryBitDataWriter_AddIntegerLeastSignificantBits, BitCount) == 0x000004, "Member 'LowEntryBitDataWriter_AddIntegerLeastSignificantBits::BitCount' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataWriter.AddIntegerMostSignificantBits
// 0x0008 (0x0008 - 0x0000)
struct LowEntryBitDataWriter_AddIntegerMostSignificantBits final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BitCount;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataWriter_AddIntegerMostSignificantBits) == 0x000004, "Wrong alignment on LowEntryBitDataWriter_AddIntegerMostSignificantBits");
static_assert(sizeof(LowEntryBitDataWriter_AddIntegerMostSignificantBits) == 0x000008, "Wrong size on LowEntryBitDataWriter_AddIntegerMostSignificantBits");
static_assert(offsetof(LowEntryBitDataWriter_AddIntegerMostSignificantBits, Value) == 0x000000, "Member 'LowEntryBitDataWriter_AddIntegerMostSignificantBits::Value' has a wrong offset!");
static_assert(offsetof(LowEntryBitDataWriter_AddIntegerMostSignificantBits, BitCount) == 0x000004, "Member 'LowEntryBitDataWriter_AddIntegerMostSignificantBits::BitCount' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataWriter.AddLong
// 0x0008 (0x0008 - 0x0000)
struct LowEntryBitDataWriter_AddLong final
{
public:
	int64                                         Value;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataWriter_AddLong) == 0x000008, "Wrong alignment on LowEntryBitDataWriter_AddLong");
static_assert(sizeof(LowEntryBitDataWriter_AddLong) == 0x000008, "Wrong size on LowEntryBitDataWriter_AddLong");
static_assert(offsetof(LowEntryBitDataWriter_AddLong, Value) == 0x000000, "Member 'LowEntryBitDataWriter_AddLong::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataWriter.AddLongArray
// 0x0010 (0x0010 - 0x0000)
struct LowEntryBitDataWriter_AddLongArray final
{
public:
	TArray<int64>                                 Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataWriter_AddLongArray) == 0x000008, "Wrong alignment on LowEntryBitDataWriter_AddLongArray");
static_assert(sizeof(LowEntryBitDataWriter_AddLongArray) == 0x000010, "Wrong size on LowEntryBitDataWriter_AddLongArray");
static_assert(offsetof(LowEntryBitDataWriter_AddLongArray, Value) == 0x000000, "Member 'LowEntryBitDataWriter_AddLongArray::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataWriter.AddLongBytes
// 0x0008 (0x0008 - 0x0000)
struct LowEntryBitDataWriter_AddLongBytes final
{
public:
	class ULowEntryLong*                          Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataWriter_AddLongBytes) == 0x000008, "Wrong alignment on LowEntryBitDataWriter_AddLongBytes");
static_assert(sizeof(LowEntryBitDataWriter_AddLongBytes) == 0x000008, "Wrong size on LowEntryBitDataWriter_AddLongBytes");
static_assert(offsetof(LowEntryBitDataWriter_AddLongBytes, Value) == 0x000000, "Member 'LowEntryBitDataWriter_AddLongBytes::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataWriter.AddLongBytesArray
// 0x0010 (0x0010 - 0x0000)
struct LowEntryBitDataWriter_AddLongBytesArray final
{
public:
	TArray<class ULowEntryLong*>                  Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataWriter_AddLongBytesArray) == 0x000008, "Wrong alignment on LowEntryBitDataWriter_AddLongBytesArray");
static_assert(sizeof(LowEntryBitDataWriter_AddLongBytesArray) == 0x000010, "Wrong size on LowEntryBitDataWriter_AddLongBytesArray");
static_assert(offsetof(LowEntryBitDataWriter_AddLongBytesArray, Value) == 0x000000, "Member 'LowEntryBitDataWriter_AddLongBytesArray::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataWriter.AddPositiveInteger1
// 0x0004 (0x0004 - 0x0000)
struct LowEntryBitDataWriter_AddPositiveInteger1 final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataWriter_AddPositiveInteger1) == 0x000004, "Wrong alignment on LowEntryBitDataWriter_AddPositiveInteger1");
static_assert(sizeof(LowEntryBitDataWriter_AddPositiveInteger1) == 0x000004, "Wrong size on LowEntryBitDataWriter_AddPositiveInteger1");
static_assert(offsetof(LowEntryBitDataWriter_AddPositiveInteger1, Value) == 0x000000, "Member 'LowEntryBitDataWriter_AddPositiveInteger1::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataWriter.AddPositiveInteger1Array
// 0x0010 (0x0010 - 0x0000)
struct LowEntryBitDataWriter_AddPositiveInteger1Array final
{
public:
	TArray<int32>                                 Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataWriter_AddPositiveInteger1Array) == 0x000008, "Wrong alignment on LowEntryBitDataWriter_AddPositiveInteger1Array");
static_assert(sizeof(LowEntryBitDataWriter_AddPositiveInteger1Array) == 0x000010, "Wrong size on LowEntryBitDataWriter_AddPositiveInteger1Array");
static_assert(offsetof(LowEntryBitDataWriter_AddPositiveInteger1Array, Value) == 0x000000, "Member 'LowEntryBitDataWriter_AddPositiveInteger1Array::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataWriter.AddPositiveInteger2
// 0x0004 (0x0004 - 0x0000)
struct LowEntryBitDataWriter_AddPositiveInteger2 final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataWriter_AddPositiveInteger2) == 0x000004, "Wrong alignment on LowEntryBitDataWriter_AddPositiveInteger2");
static_assert(sizeof(LowEntryBitDataWriter_AddPositiveInteger2) == 0x000004, "Wrong size on LowEntryBitDataWriter_AddPositiveInteger2");
static_assert(offsetof(LowEntryBitDataWriter_AddPositiveInteger2, Value) == 0x000000, "Member 'LowEntryBitDataWriter_AddPositiveInteger2::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataWriter.AddPositiveInteger2Array
// 0x0010 (0x0010 - 0x0000)
struct LowEntryBitDataWriter_AddPositiveInteger2Array final
{
public:
	TArray<int32>                                 Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataWriter_AddPositiveInteger2Array) == 0x000008, "Wrong alignment on LowEntryBitDataWriter_AddPositiveInteger2Array");
static_assert(sizeof(LowEntryBitDataWriter_AddPositiveInteger2Array) == 0x000010, "Wrong size on LowEntryBitDataWriter_AddPositiveInteger2Array");
static_assert(offsetof(LowEntryBitDataWriter_AddPositiveInteger2Array, Value) == 0x000000, "Member 'LowEntryBitDataWriter_AddPositiveInteger2Array::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataWriter.AddPositiveInteger3
// 0x0004 (0x0004 - 0x0000)
struct LowEntryBitDataWriter_AddPositiveInteger3 final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataWriter_AddPositiveInteger3) == 0x000004, "Wrong alignment on LowEntryBitDataWriter_AddPositiveInteger3");
static_assert(sizeof(LowEntryBitDataWriter_AddPositiveInteger3) == 0x000004, "Wrong size on LowEntryBitDataWriter_AddPositiveInteger3");
static_assert(offsetof(LowEntryBitDataWriter_AddPositiveInteger3, Value) == 0x000000, "Member 'LowEntryBitDataWriter_AddPositiveInteger3::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataWriter.AddPositiveInteger3Array
// 0x0010 (0x0010 - 0x0000)
struct LowEntryBitDataWriter_AddPositiveInteger3Array final
{
public:
	TArray<int32>                                 Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataWriter_AddPositiveInteger3Array) == 0x000008, "Wrong alignment on LowEntryBitDataWriter_AddPositiveInteger3Array");
static_assert(sizeof(LowEntryBitDataWriter_AddPositiveInteger3Array) == 0x000010, "Wrong size on LowEntryBitDataWriter_AddPositiveInteger3Array");
static_assert(offsetof(LowEntryBitDataWriter_AddPositiveInteger3Array, Value) == 0x000000, "Member 'LowEntryBitDataWriter_AddPositiveInteger3Array::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataWriter.AddStringUtf8
// 0x0010 (0x0010 - 0x0000)
struct LowEntryBitDataWriter_AddStringUtf8 final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataWriter_AddStringUtf8) == 0x000008, "Wrong alignment on LowEntryBitDataWriter_AddStringUtf8");
static_assert(sizeof(LowEntryBitDataWriter_AddStringUtf8) == 0x000010, "Wrong size on LowEntryBitDataWriter_AddStringUtf8");
static_assert(offsetof(LowEntryBitDataWriter_AddStringUtf8, Value) == 0x000000, "Member 'LowEntryBitDataWriter_AddStringUtf8::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryBitDataWriter.AddStringUtf8Array
// 0x0010 (0x0010 - 0x0000)
struct LowEntryBitDataWriter_AddStringUtf8Array final
{
public:
	TArray<class FString>                         Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryBitDataWriter_AddStringUtf8Array) == 0x000008, "Wrong alignment on LowEntryBitDataWriter_AddStringUtf8Array");
static_assert(sizeof(LowEntryBitDataWriter_AddStringUtf8Array) == 0x000010, "Wrong size on LowEntryBitDataWriter_AddStringUtf8Array");
static_assert(offsetof(LowEntryBitDataWriter_AddStringUtf8Array, Value) == 0x000000, "Member 'LowEntryBitDataWriter_AddStringUtf8Array::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataReader.GetBoolean
// 0x0001 (0x0001 - 0x0000)
struct LowEntryByteDataReader_GetBoolean final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataReader_GetBoolean) == 0x000001, "Wrong alignment on LowEntryByteDataReader_GetBoolean");
static_assert(sizeof(LowEntryByteDataReader_GetBoolean) == 0x000001, "Wrong size on LowEntryByteDataReader_GetBoolean");
static_assert(offsetof(LowEntryByteDataReader_GetBoolean, ReturnValue) == 0x000000, "Member 'LowEntryByteDataReader_GetBoolean::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataReader.GetBooleanArray
// 0x0010 (0x0010 - 0x0000)
struct LowEntryByteDataReader_GetBooleanArray final
{
public:
	TArray<bool>                                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataReader_GetBooleanArray) == 0x000008, "Wrong alignment on LowEntryByteDataReader_GetBooleanArray");
static_assert(sizeof(LowEntryByteDataReader_GetBooleanArray) == 0x000010, "Wrong size on LowEntryByteDataReader_GetBooleanArray");
static_assert(offsetof(LowEntryByteDataReader_GetBooleanArray, ReturnValue) == 0x000000, "Member 'LowEntryByteDataReader_GetBooleanArray::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataReader.GetByte
// 0x0001 (0x0001 - 0x0000)
struct LowEntryByteDataReader_GetByte final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataReader_GetByte) == 0x000001, "Wrong alignment on LowEntryByteDataReader_GetByte");
static_assert(sizeof(LowEntryByteDataReader_GetByte) == 0x000001, "Wrong size on LowEntryByteDataReader_GetByte");
static_assert(offsetof(LowEntryByteDataReader_GetByte, ReturnValue) == 0x000000, "Member 'LowEntryByteDataReader_GetByte::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataReader.GetByteArray
// 0x0010 (0x0010 - 0x0000)
struct LowEntryByteDataReader_GetByteArray final
{
public:
	TArray<uint8>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataReader_GetByteArray) == 0x000008, "Wrong alignment on LowEntryByteDataReader_GetByteArray");
static_assert(sizeof(LowEntryByteDataReader_GetByteArray) == 0x000010, "Wrong size on LowEntryByteDataReader_GetByteArray");
static_assert(offsetof(LowEntryByteDataReader_GetByteArray, ReturnValue) == 0x000000, "Member 'LowEntryByteDataReader_GetByteArray::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataReader.GetClone
// 0x0008 (0x0008 - 0x0000)
struct LowEntryByteDataReader_GetClone final
{
public:
	class ULowEntryByteDataReader*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataReader_GetClone) == 0x000008, "Wrong alignment on LowEntryByteDataReader_GetClone");
static_assert(sizeof(LowEntryByteDataReader_GetClone) == 0x000008, "Wrong size on LowEntryByteDataReader_GetClone");
static_assert(offsetof(LowEntryByteDataReader_GetClone, ReturnValue) == 0x000000, "Member 'LowEntryByteDataReader_GetClone::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataReader.GetDouble
// 0x0008 (0x0008 - 0x0000)
struct LowEntryByteDataReader_GetDouble final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataReader_GetDouble) == 0x000008, "Wrong alignment on LowEntryByteDataReader_GetDouble");
static_assert(sizeof(LowEntryByteDataReader_GetDouble) == 0x000008, "Wrong size on LowEntryByteDataReader_GetDouble");
static_assert(offsetof(LowEntryByteDataReader_GetDouble, ReturnValue) == 0x000000, "Member 'LowEntryByteDataReader_GetDouble::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataReader.GetDoubleArray
// 0x0010 (0x0010 - 0x0000)
struct LowEntryByteDataReader_GetDoubleArray final
{
public:
	TArray<double>                                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataReader_GetDoubleArray) == 0x000008, "Wrong alignment on LowEntryByteDataReader_GetDoubleArray");
static_assert(sizeof(LowEntryByteDataReader_GetDoubleArray) == 0x000010, "Wrong size on LowEntryByteDataReader_GetDoubleArray");
static_assert(offsetof(LowEntryByteDataReader_GetDoubleArray, ReturnValue) == 0x000000, "Member 'LowEntryByteDataReader_GetDoubleArray::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataReader.GetDoubleBytes
// 0x0008 (0x0008 - 0x0000)
struct LowEntryByteDataReader_GetDoubleBytes final
{
public:
	class ULowEntryDouble*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataReader_GetDoubleBytes) == 0x000008, "Wrong alignment on LowEntryByteDataReader_GetDoubleBytes");
static_assert(sizeof(LowEntryByteDataReader_GetDoubleBytes) == 0x000008, "Wrong size on LowEntryByteDataReader_GetDoubleBytes");
static_assert(offsetof(LowEntryByteDataReader_GetDoubleBytes, ReturnValue) == 0x000000, "Member 'LowEntryByteDataReader_GetDoubleBytes::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataReader.GetDoubleBytesArray
// 0x0010 (0x0010 - 0x0000)
struct LowEntryByteDataReader_GetDoubleBytesArray final
{
public:
	TArray<class ULowEntryDouble*>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataReader_GetDoubleBytesArray) == 0x000008, "Wrong alignment on LowEntryByteDataReader_GetDoubleBytesArray");
static_assert(sizeof(LowEntryByteDataReader_GetDoubleBytesArray) == 0x000010, "Wrong size on LowEntryByteDataReader_GetDoubleBytesArray");
static_assert(offsetof(LowEntryByteDataReader_GetDoubleBytesArray, ReturnValue) == 0x000000, "Member 'LowEntryByteDataReader_GetDoubleBytesArray::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataReader.GetFloat
// 0x0004 (0x0004 - 0x0000)
struct LowEntryByteDataReader_GetFloat final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataReader_GetFloat) == 0x000004, "Wrong alignment on LowEntryByteDataReader_GetFloat");
static_assert(sizeof(LowEntryByteDataReader_GetFloat) == 0x000004, "Wrong size on LowEntryByteDataReader_GetFloat");
static_assert(offsetof(LowEntryByteDataReader_GetFloat, ReturnValue) == 0x000000, "Member 'LowEntryByteDataReader_GetFloat::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataReader.GetFloatArray
// 0x0010 (0x0010 - 0x0000)
struct LowEntryByteDataReader_GetFloatArray final
{
public:
	TArray<float>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataReader_GetFloatArray) == 0x000008, "Wrong alignment on LowEntryByteDataReader_GetFloatArray");
static_assert(sizeof(LowEntryByteDataReader_GetFloatArray) == 0x000010, "Wrong size on LowEntryByteDataReader_GetFloatArray");
static_assert(offsetof(LowEntryByteDataReader_GetFloatArray, ReturnValue) == 0x000000, "Member 'LowEntryByteDataReader_GetFloatArray::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataReader.GetInteger
// 0x0004 (0x0004 - 0x0000)
struct LowEntryByteDataReader_GetInteger final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataReader_GetInteger) == 0x000004, "Wrong alignment on LowEntryByteDataReader_GetInteger");
static_assert(sizeof(LowEntryByteDataReader_GetInteger) == 0x000004, "Wrong size on LowEntryByteDataReader_GetInteger");
static_assert(offsetof(LowEntryByteDataReader_GetInteger, ReturnValue) == 0x000000, "Member 'LowEntryByteDataReader_GetInteger::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataReader.GetIntegerArray
// 0x0010 (0x0010 - 0x0000)
struct LowEntryByteDataReader_GetIntegerArray final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataReader_GetIntegerArray) == 0x000008, "Wrong alignment on LowEntryByteDataReader_GetIntegerArray");
static_assert(sizeof(LowEntryByteDataReader_GetIntegerArray) == 0x000010, "Wrong size on LowEntryByteDataReader_GetIntegerArray");
static_assert(offsetof(LowEntryByteDataReader_GetIntegerArray, ReturnValue) == 0x000000, "Member 'LowEntryByteDataReader_GetIntegerArray::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataReader.GetLong
// 0x0008 (0x0008 - 0x0000)
struct LowEntryByteDataReader_GetLong final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataReader_GetLong) == 0x000008, "Wrong alignment on LowEntryByteDataReader_GetLong");
static_assert(sizeof(LowEntryByteDataReader_GetLong) == 0x000008, "Wrong size on LowEntryByteDataReader_GetLong");
static_assert(offsetof(LowEntryByteDataReader_GetLong, ReturnValue) == 0x000000, "Member 'LowEntryByteDataReader_GetLong::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataReader.GetLongArray
// 0x0010 (0x0010 - 0x0000)
struct LowEntryByteDataReader_GetLongArray final
{
public:
	TArray<int64>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataReader_GetLongArray) == 0x000008, "Wrong alignment on LowEntryByteDataReader_GetLongArray");
static_assert(sizeof(LowEntryByteDataReader_GetLongArray) == 0x000010, "Wrong size on LowEntryByteDataReader_GetLongArray");
static_assert(offsetof(LowEntryByteDataReader_GetLongArray, ReturnValue) == 0x000000, "Member 'LowEntryByteDataReader_GetLongArray::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataReader.GetLongBytes
// 0x0008 (0x0008 - 0x0000)
struct LowEntryByteDataReader_GetLongBytes final
{
public:
	class ULowEntryLong*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataReader_GetLongBytes) == 0x000008, "Wrong alignment on LowEntryByteDataReader_GetLongBytes");
static_assert(sizeof(LowEntryByteDataReader_GetLongBytes) == 0x000008, "Wrong size on LowEntryByteDataReader_GetLongBytes");
static_assert(offsetof(LowEntryByteDataReader_GetLongBytes, ReturnValue) == 0x000000, "Member 'LowEntryByteDataReader_GetLongBytes::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataReader.GetLongBytesArray
// 0x0010 (0x0010 - 0x0000)
struct LowEntryByteDataReader_GetLongBytesArray final
{
public:
	TArray<class ULowEntryLong*>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataReader_GetLongBytesArray) == 0x000008, "Wrong alignment on LowEntryByteDataReader_GetLongBytesArray");
static_assert(sizeof(LowEntryByteDataReader_GetLongBytesArray) == 0x000010, "Wrong size on LowEntryByteDataReader_GetLongBytesArray");
static_assert(offsetof(LowEntryByteDataReader_GetLongBytesArray, ReturnValue) == 0x000000, "Member 'LowEntryByteDataReader_GetLongBytesArray::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataReader.GetPosition
// 0x0004 (0x0004 - 0x0000)
struct LowEntryByteDataReader_GetPosition final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataReader_GetPosition) == 0x000004, "Wrong alignment on LowEntryByteDataReader_GetPosition");
static_assert(sizeof(LowEntryByteDataReader_GetPosition) == 0x000004, "Wrong size on LowEntryByteDataReader_GetPosition");
static_assert(offsetof(LowEntryByteDataReader_GetPosition, ReturnValue) == 0x000000, "Member 'LowEntryByteDataReader_GetPosition::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataReader.GetPositiveInteger1
// 0x0004 (0x0004 - 0x0000)
struct LowEntryByteDataReader_GetPositiveInteger1 final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataReader_GetPositiveInteger1) == 0x000004, "Wrong alignment on LowEntryByteDataReader_GetPositiveInteger1");
static_assert(sizeof(LowEntryByteDataReader_GetPositiveInteger1) == 0x000004, "Wrong size on LowEntryByteDataReader_GetPositiveInteger1");
static_assert(offsetof(LowEntryByteDataReader_GetPositiveInteger1, ReturnValue) == 0x000000, "Member 'LowEntryByteDataReader_GetPositiveInteger1::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataReader.GetPositiveInteger1Array
// 0x0010 (0x0010 - 0x0000)
struct LowEntryByteDataReader_GetPositiveInteger1Array final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataReader_GetPositiveInteger1Array) == 0x000008, "Wrong alignment on LowEntryByteDataReader_GetPositiveInteger1Array");
static_assert(sizeof(LowEntryByteDataReader_GetPositiveInteger1Array) == 0x000010, "Wrong size on LowEntryByteDataReader_GetPositiveInteger1Array");
static_assert(offsetof(LowEntryByteDataReader_GetPositiveInteger1Array, ReturnValue) == 0x000000, "Member 'LowEntryByteDataReader_GetPositiveInteger1Array::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataReader.GetPositiveInteger2
// 0x0004 (0x0004 - 0x0000)
struct LowEntryByteDataReader_GetPositiveInteger2 final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataReader_GetPositiveInteger2) == 0x000004, "Wrong alignment on LowEntryByteDataReader_GetPositiveInteger2");
static_assert(sizeof(LowEntryByteDataReader_GetPositiveInteger2) == 0x000004, "Wrong size on LowEntryByteDataReader_GetPositiveInteger2");
static_assert(offsetof(LowEntryByteDataReader_GetPositiveInteger2, ReturnValue) == 0x000000, "Member 'LowEntryByteDataReader_GetPositiveInteger2::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataReader.GetPositiveInteger2Array
// 0x0010 (0x0010 - 0x0000)
struct LowEntryByteDataReader_GetPositiveInteger2Array final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataReader_GetPositiveInteger2Array) == 0x000008, "Wrong alignment on LowEntryByteDataReader_GetPositiveInteger2Array");
static_assert(sizeof(LowEntryByteDataReader_GetPositiveInteger2Array) == 0x000010, "Wrong size on LowEntryByteDataReader_GetPositiveInteger2Array");
static_assert(offsetof(LowEntryByteDataReader_GetPositiveInteger2Array, ReturnValue) == 0x000000, "Member 'LowEntryByteDataReader_GetPositiveInteger2Array::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataReader.GetPositiveInteger3
// 0x0004 (0x0004 - 0x0000)
struct LowEntryByteDataReader_GetPositiveInteger3 final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataReader_GetPositiveInteger3) == 0x000004, "Wrong alignment on LowEntryByteDataReader_GetPositiveInteger3");
static_assert(sizeof(LowEntryByteDataReader_GetPositiveInteger3) == 0x000004, "Wrong size on LowEntryByteDataReader_GetPositiveInteger3");
static_assert(offsetof(LowEntryByteDataReader_GetPositiveInteger3, ReturnValue) == 0x000000, "Member 'LowEntryByteDataReader_GetPositiveInteger3::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataReader.GetPositiveInteger3Array
// 0x0010 (0x0010 - 0x0000)
struct LowEntryByteDataReader_GetPositiveInteger3Array final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataReader_GetPositiveInteger3Array) == 0x000008, "Wrong alignment on LowEntryByteDataReader_GetPositiveInteger3Array");
static_assert(sizeof(LowEntryByteDataReader_GetPositiveInteger3Array) == 0x000010, "Wrong size on LowEntryByteDataReader_GetPositiveInteger3Array");
static_assert(offsetof(LowEntryByteDataReader_GetPositiveInteger3Array, ReturnValue) == 0x000000, "Member 'LowEntryByteDataReader_GetPositiveInteger3Array::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataReader.GetStringUtf8
// 0x0010 (0x0010 - 0x0000)
struct LowEntryByteDataReader_GetStringUtf8 final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataReader_GetStringUtf8) == 0x000008, "Wrong alignment on LowEntryByteDataReader_GetStringUtf8");
static_assert(sizeof(LowEntryByteDataReader_GetStringUtf8) == 0x000010, "Wrong size on LowEntryByteDataReader_GetStringUtf8");
static_assert(offsetof(LowEntryByteDataReader_GetStringUtf8, ReturnValue) == 0x000000, "Member 'LowEntryByteDataReader_GetStringUtf8::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataReader.GetStringUtf8Array
// 0x0010 (0x0010 - 0x0000)
struct LowEntryByteDataReader_GetStringUtf8Array final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataReader_GetStringUtf8Array) == 0x000008, "Wrong alignment on LowEntryByteDataReader_GetStringUtf8Array");
static_assert(sizeof(LowEntryByteDataReader_GetStringUtf8Array) == 0x000010, "Wrong size on LowEntryByteDataReader_GetStringUtf8Array");
static_assert(offsetof(LowEntryByteDataReader_GetStringUtf8Array, ReturnValue) == 0x000000, "Member 'LowEntryByteDataReader_GetStringUtf8Array::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataReader.Remaining
// 0x0004 (0x0004 - 0x0000)
struct LowEntryByteDataReader_Remaining final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataReader_Remaining) == 0x000004, "Wrong alignment on LowEntryByteDataReader_Remaining");
static_assert(sizeof(LowEntryByteDataReader_Remaining) == 0x000004, "Wrong size on LowEntryByteDataReader_Remaining");
static_assert(offsetof(LowEntryByteDataReader_Remaining, ReturnValue) == 0x000000, "Member 'LowEntryByteDataReader_Remaining::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataReader.SetPosition
// 0x0004 (0x0004 - 0x0000)
struct LowEntryByteDataReader_SetPosition final
{
public:
	int32                                         Position_;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataReader_SetPosition) == 0x000004, "Wrong alignment on LowEntryByteDataReader_SetPosition");
static_assert(sizeof(LowEntryByteDataReader_SetPosition) == 0x000004, "Wrong size on LowEntryByteDataReader_SetPosition");
static_assert(offsetof(LowEntryByteDataReader_SetPosition, Position_) == 0x000000, "Member 'LowEntryByteDataReader_SetPosition::Position_' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataWriter.AddBoolean
// 0x0001 (0x0001 - 0x0000)
struct LowEntryByteDataWriter_AddBoolean final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataWriter_AddBoolean) == 0x000001, "Wrong alignment on LowEntryByteDataWriter_AddBoolean");
static_assert(sizeof(LowEntryByteDataWriter_AddBoolean) == 0x000001, "Wrong size on LowEntryByteDataWriter_AddBoolean");
static_assert(offsetof(LowEntryByteDataWriter_AddBoolean, Value) == 0x000000, "Member 'LowEntryByteDataWriter_AddBoolean::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataWriter.AddBooleanArray
// 0x0010 (0x0010 - 0x0000)
struct LowEntryByteDataWriter_AddBooleanArray final
{
public:
	TArray<bool>                                  Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataWriter_AddBooleanArray) == 0x000008, "Wrong alignment on LowEntryByteDataWriter_AddBooleanArray");
static_assert(sizeof(LowEntryByteDataWriter_AddBooleanArray) == 0x000010, "Wrong size on LowEntryByteDataWriter_AddBooleanArray");
static_assert(offsetof(LowEntryByteDataWriter_AddBooleanArray, Value) == 0x000000, "Member 'LowEntryByteDataWriter_AddBooleanArray::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataWriter.AddByte
// 0x0001 (0x0001 - 0x0000)
struct LowEntryByteDataWriter_AddByte final
{
public:
	uint8                                         Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataWriter_AddByte) == 0x000001, "Wrong alignment on LowEntryByteDataWriter_AddByte");
static_assert(sizeof(LowEntryByteDataWriter_AddByte) == 0x000001, "Wrong size on LowEntryByteDataWriter_AddByte");
static_assert(offsetof(LowEntryByteDataWriter_AddByte, Value) == 0x000000, "Member 'LowEntryByteDataWriter_AddByte::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataWriter.AddByteArray
// 0x0010 (0x0010 - 0x0000)
struct LowEntryByteDataWriter_AddByteArray final
{
public:
	TArray<uint8>                                 Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataWriter_AddByteArray) == 0x000008, "Wrong alignment on LowEntryByteDataWriter_AddByteArray");
static_assert(sizeof(LowEntryByteDataWriter_AddByteArray) == 0x000010, "Wrong size on LowEntryByteDataWriter_AddByteArray");
static_assert(offsetof(LowEntryByteDataWriter_AddByteArray, Value) == 0x000000, "Member 'LowEntryByteDataWriter_AddByteArray::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataWriter.AddDouble
// 0x0008 (0x0008 - 0x0000)
struct LowEntryByteDataWriter_AddDouble final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataWriter_AddDouble) == 0x000008, "Wrong alignment on LowEntryByteDataWriter_AddDouble");
static_assert(sizeof(LowEntryByteDataWriter_AddDouble) == 0x000008, "Wrong size on LowEntryByteDataWriter_AddDouble");
static_assert(offsetof(LowEntryByteDataWriter_AddDouble, Value) == 0x000000, "Member 'LowEntryByteDataWriter_AddDouble::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataWriter.AddDoubleArray
// 0x0010 (0x0010 - 0x0000)
struct LowEntryByteDataWriter_AddDoubleArray final
{
public:
	TArray<double>                                Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataWriter_AddDoubleArray) == 0x000008, "Wrong alignment on LowEntryByteDataWriter_AddDoubleArray");
static_assert(sizeof(LowEntryByteDataWriter_AddDoubleArray) == 0x000010, "Wrong size on LowEntryByteDataWriter_AddDoubleArray");
static_assert(offsetof(LowEntryByteDataWriter_AddDoubleArray, Value) == 0x000000, "Member 'LowEntryByteDataWriter_AddDoubleArray::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataWriter.AddDoubleBytes
// 0x0008 (0x0008 - 0x0000)
struct LowEntryByteDataWriter_AddDoubleBytes final
{
public:
	class ULowEntryDouble*                        Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataWriter_AddDoubleBytes) == 0x000008, "Wrong alignment on LowEntryByteDataWriter_AddDoubleBytes");
static_assert(sizeof(LowEntryByteDataWriter_AddDoubleBytes) == 0x000008, "Wrong size on LowEntryByteDataWriter_AddDoubleBytes");
static_assert(offsetof(LowEntryByteDataWriter_AddDoubleBytes, Value) == 0x000000, "Member 'LowEntryByteDataWriter_AddDoubleBytes::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataWriter.AddDoubleBytesArray
// 0x0010 (0x0010 - 0x0000)
struct LowEntryByteDataWriter_AddDoubleBytesArray final
{
public:
	TArray<class ULowEntryDouble*>                Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataWriter_AddDoubleBytesArray) == 0x000008, "Wrong alignment on LowEntryByteDataWriter_AddDoubleBytesArray");
static_assert(sizeof(LowEntryByteDataWriter_AddDoubleBytesArray) == 0x000010, "Wrong size on LowEntryByteDataWriter_AddDoubleBytesArray");
static_assert(offsetof(LowEntryByteDataWriter_AddDoubleBytesArray, Value) == 0x000000, "Member 'LowEntryByteDataWriter_AddDoubleBytesArray::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataWriter.AddFloat
// 0x0004 (0x0004 - 0x0000)
struct LowEntryByteDataWriter_AddFloat final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataWriter_AddFloat) == 0x000004, "Wrong alignment on LowEntryByteDataWriter_AddFloat");
static_assert(sizeof(LowEntryByteDataWriter_AddFloat) == 0x000004, "Wrong size on LowEntryByteDataWriter_AddFloat");
static_assert(offsetof(LowEntryByteDataWriter_AddFloat, Value) == 0x000000, "Member 'LowEntryByteDataWriter_AddFloat::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataWriter.AddFloatArray
// 0x0010 (0x0010 - 0x0000)
struct LowEntryByteDataWriter_AddFloatArray final
{
public:
	TArray<float>                                 Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataWriter_AddFloatArray) == 0x000008, "Wrong alignment on LowEntryByteDataWriter_AddFloatArray");
static_assert(sizeof(LowEntryByteDataWriter_AddFloatArray) == 0x000010, "Wrong size on LowEntryByteDataWriter_AddFloatArray");
static_assert(offsetof(LowEntryByteDataWriter_AddFloatArray, Value) == 0x000000, "Member 'LowEntryByteDataWriter_AddFloatArray::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataWriter.AddInteger
// 0x0004 (0x0004 - 0x0000)
struct LowEntryByteDataWriter_AddInteger final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataWriter_AddInteger) == 0x000004, "Wrong alignment on LowEntryByteDataWriter_AddInteger");
static_assert(sizeof(LowEntryByteDataWriter_AddInteger) == 0x000004, "Wrong size on LowEntryByteDataWriter_AddInteger");
static_assert(offsetof(LowEntryByteDataWriter_AddInteger, Value) == 0x000000, "Member 'LowEntryByteDataWriter_AddInteger::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataWriter.AddIntegerArray
// 0x0010 (0x0010 - 0x0000)
struct LowEntryByteDataWriter_AddIntegerArray final
{
public:
	TArray<int32>                                 Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataWriter_AddIntegerArray) == 0x000008, "Wrong alignment on LowEntryByteDataWriter_AddIntegerArray");
static_assert(sizeof(LowEntryByteDataWriter_AddIntegerArray) == 0x000010, "Wrong size on LowEntryByteDataWriter_AddIntegerArray");
static_assert(offsetof(LowEntryByteDataWriter_AddIntegerArray, Value) == 0x000000, "Member 'LowEntryByteDataWriter_AddIntegerArray::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataWriter.AddLong
// 0x0008 (0x0008 - 0x0000)
struct LowEntryByteDataWriter_AddLong final
{
public:
	int64                                         Value;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataWriter_AddLong) == 0x000008, "Wrong alignment on LowEntryByteDataWriter_AddLong");
static_assert(sizeof(LowEntryByteDataWriter_AddLong) == 0x000008, "Wrong size on LowEntryByteDataWriter_AddLong");
static_assert(offsetof(LowEntryByteDataWriter_AddLong, Value) == 0x000000, "Member 'LowEntryByteDataWriter_AddLong::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataWriter.AddLongArray
// 0x0010 (0x0010 - 0x0000)
struct LowEntryByteDataWriter_AddLongArray final
{
public:
	TArray<int64>                                 Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataWriter_AddLongArray) == 0x000008, "Wrong alignment on LowEntryByteDataWriter_AddLongArray");
static_assert(sizeof(LowEntryByteDataWriter_AddLongArray) == 0x000010, "Wrong size on LowEntryByteDataWriter_AddLongArray");
static_assert(offsetof(LowEntryByteDataWriter_AddLongArray, Value) == 0x000000, "Member 'LowEntryByteDataWriter_AddLongArray::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataWriter.AddLongBytes
// 0x0008 (0x0008 - 0x0000)
struct LowEntryByteDataWriter_AddLongBytes final
{
public:
	class ULowEntryLong*                          Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataWriter_AddLongBytes) == 0x000008, "Wrong alignment on LowEntryByteDataWriter_AddLongBytes");
static_assert(sizeof(LowEntryByteDataWriter_AddLongBytes) == 0x000008, "Wrong size on LowEntryByteDataWriter_AddLongBytes");
static_assert(offsetof(LowEntryByteDataWriter_AddLongBytes, Value) == 0x000000, "Member 'LowEntryByteDataWriter_AddLongBytes::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataWriter.AddLongBytesArray
// 0x0010 (0x0010 - 0x0000)
struct LowEntryByteDataWriter_AddLongBytesArray final
{
public:
	TArray<class ULowEntryLong*>                  Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataWriter_AddLongBytesArray) == 0x000008, "Wrong alignment on LowEntryByteDataWriter_AddLongBytesArray");
static_assert(sizeof(LowEntryByteDataWriter_AddLongBytesArray) == 0x000010, "Wrong size on LowEntryByteDataWriter_AddLongBytesArray");
static_assert(offsetof(LowEntryByteDataWriter_AddLongBytesArray, Value) == 0x000000, "Member 'LowEntryByteDataWriter_AddLongBytesArray::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataWriter.AddPositiveInteger1
// 0x0004 (0x0004 - 0x0000)
struct LowEntryByteDataWriter_AddPositiveInteger1 final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataWriter_AddPositiveInteger1) == 0x000004, "Wrong alignment on LowEntryByteDataWriter_AddPositiveInteger1");
static_assert(sizeof(LowEntryByteDataWriter_AddPositiveInteger1) == 0x000004, "Wrong size on LowEntryByteDataWriter_AddPositiveInteger1");
static_assert(offsetof(LowEntryByteDataWriter_AddPositiveInteger1, Value) == 0x000000, "Member 'LowEntryByteDataWriter_AddPositiveInteger1::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataWriter.AddPositiveInteger1Array
// 0x0010 (0x0010 - 0x0000)
struct LowEntryByteDataWriter_AddPositiveInteger1Array final
{
public:
	TArray<int32>                                 Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataWriter_AddPositiveInteger1Array) == 0x000008, "Wrong alignment on LowEntryByteDataWriter_AddPositiveInteger1Array");
static_assert(sizeof(LowEntryByteDataWriter_AddPositiveInteger1Array) == 0x000010, "Wrong size on LowEntryByteDataWriter_AddPositiveInteger1Array");
static_assert(offsetof(LowEntryByteDataWriter_AddPositiveInteger1Array, Value) == 0x000000, "Member 'LowEntryByteDataWriter_AddPositiveInteger1Array::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataWriter.AddPositiveInteger2
// 0x0004 (0x0004 - 0x0000)
struct LowEntryByteDataWriter_AddPositiveInteger2 final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataWriter_AddPositiveInteger2) == 0x000004, "Wrong alignment on LowEntryByteDataWriter_AddPositiveInteger2");
static_assert(sizeof(LowEntryByteDataWriter_AddPositiveInteger2) == 0x000004, "Wrong size on LowEntryByteDataWriter_AddPositiveInteger2");
static_assert(offsetof(LowEntryByteDataWriter_AddPositiveInteger2, Value) == 0x000000, "Member 'LowEntryByteDataWriter_AddPositiveInteger2::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataWriter.AddPositiveInteger2Array
// 0x0010 (0x0010 - 0x0000)
struct LowEntryByteDataWriter_AddPositiveInteger2Array final
{
public:
	TArray<int32>                                 Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataWriter_AddPositiveInteger2Array) == 0x000008, "Wrong alignment on LowEntryByteDataWriter_AddPositiveInteger2Array");
static_assert(sizeof(LowEntryByteDataWriter_AddPositiveInteger2Array) == 0x000010, "Wrong size on LowEntryByteDataWriter_AddPositiveInteger2Array");
static_assert(offsetof(LowEntryByteDataWriter_AddPositiveInteger2Array, Value) == 0x000000, "Member 'LowEntryByteDataWriter_AddPositiveInteger2Array::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataWriter.AddPositiveInteger3
// 0x0004 (0x0004 - 0x0000)
struct LowEntryByteDataWriter_AddPositiveInteger3 final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataWriter_AddPositiveInteger3) == 0x000004, "Wrong alignment on LowEntryByteDataWriter_AddPositiveInteger3");
static_assert(sizeof(LowEntryByteDataWriter_AddPositiveInteger3) == 0x000004, "Wrong size on LowEntryByteDataWriter_AddPositiveInteger3");
static_assert(offsetof(LowEntryByteDataWriter_AddPositiveInteger3, Value) == 0x000000, "Member 'LowEntryByteDataWriter_AddPositiveInteger3::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataWriter.AddPositiveInteger3Array
// 0x0010 (0x0010 - 0x0000)
struct LowEntryByteDataWriter_AddPositiveInteger3Array final
{
public:
	TArray<int32>                                 Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataWriter_AddPositiveInteger3Array) == 0x000008, "Wrong alignment on LowEntryByteDataWriter_AddPositiveInteger3Array");
static_assert(sizeof(LowEntryByteDataWriter_AddPositiveInteger3Array) == 0x000010, "Wrong size on LowEntryByteDataWriter_AddPositiveInteger3Array");
static_assert(offsetof(LowEntryByteDataWriter_AddPositiveInteger3Array, Value) == 0x000000, "Member 'LowEntryByteDataWriter_AddPositiveInteger3Array::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataWriter.AddStringUtf8
// 0x0010 (0x0010 - 0x0000)
struct LowEntryByteDataWriter_AddStringUtf8 final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataWriter_AddStringUtf8) == 0x000008, "Wrong alignment on LowEntryByteDataWriter_AddStringUtf8");
static_assert(sizeof(LowEntryByteDataWriter_AddStringUtf8) == 0x000010, "Wrong size on LowEntryByteDataWriter_AddStringUtf8");
static_assert(offsetof(LowEntryByteDataWriter_AddStringUtf8, Value) == 0x000000, "Member 'LowEntryByteDataWriter_AddStringUtf8::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryByteDataWriter.AddStringUtf8Array
// 0x0010 (0x0010 - 0x0000)
struct LowEntryByteDataWriter_AddStringUtf8Array final
{
public:
	TArray<class FString>                         Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryByteDataWriter_AddStringUtf8Array) == 0x000008, "Wrong alignment on LowEntryByteDataWriter_AddStringUtf8Array");
static_assert(sizeof(LowEntryByteDataWriter_AddStringUtf8Array) == 0x000010, "Wrong size on LowEntryByteDataWriter_AddStringUtf8Array");
static_assert(offsetof(LowEntryByteDataWriter_AddStringUtf8Array, Value) == 0x000000, "Member 'LowEntryByteDataWriter_AddStringUtf8Array::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryDouble.CastToLongBytes
// 0x0008 (0x0008 - 0x0000)
struct LowEntryDouble_CastToLongBytes final
{
public:
	class ULowEntryLong*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryDouble_CastToLongBytes) == 0x000008, "Wrong alignment on LowEntryDouble_CastToLongBytes");
static_assert(sizeof(LowEntryDouble_CastToLongBytes) == 0x000008, "Wrong size on LowEntryDouble_CastToLongBytes");
static_assert(offsetof(LowEntryDouble_CastToLongBytes, ReturnValue) == 0x000000, "Member 'LowEntryDouble_CastToLongBytes::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryDouble.CastToString
// 0x0018 (0x0018 - 0x0000)
struct LowEntryDouble_CastToString final
{
public:
	int32                                         MinFractionalDigits;                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BAD[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryDouble_CastToString) == 0x000008, "Wrong alignment on LowEntryDouble_CastToString");
static_assert(sizeof(LowEntryDouble_CastToString) == 0x000018, "Wrong size on LowEntryDouble_CastToString");
static_assert(offsetof(LowEntryDouble_CastToString, MinFractionalDigits) == 0x000000, "Member 'LowEntryDouble_CastToString::MinFractionalDigits' has a wrong offset!");
static_assert(offsetof(LowEntryDouble_CastToString, ReturnValue) == 0x000008, "Member 'LowEntryDouble_CastToString::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryDouble.CreateClone
// 0x0008 (0x0008 - 0x0000)
struct LowEntryDouble_CreateClone final
{
public:
	class ULowEntryDouble*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryDouble_CreateClone) == 0x000008, "Wrong alignment on LowEntryDouble_CreateClone");
static_assert(sizeof(LowEntryDouble_CreateClone) == 0x000008, "Wrong size on LowEntryDouble_CreateClone");
static_assert(offsetof(LowEntryDouble_CreateClone, ReturnValue) == 0x000000, "Member 'LowEntryDouble_CreateClone::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryDouble.DoubleBytes_Add
// 0x0008 (0x0008 - 0x0000)
struct LowEntryDouble_DoubleBytes_Add final
{
public:
	class ULowEntryDouble*                        Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryDouble_DoubleBytes_Add) == 0x000008, "Wrong alignment on LowEntryDouble_DoubleBytes_Add");
static_assert(sizeof(LowEntryDouble_DoubleBytes_Add) == 0x000008, "Wrong size on LowEntryDouble_DoubleBytes_Add");
static_assert(offsetof(LowEntryDouble_DoubleBytes_Add, Value) == 0x000000, "Member 'LowEntryDouble_DoubleBytes_Add::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryDouble.DoubleBytes_Equals
// 0x0010 (0x0010 - 0x0000)
struct LowEntryDouble_DoubleBytes_Equals final
{
public:
	class ULowEntryDouble*                        Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BAE[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryDouble_DoubleBytes_Equals) == 0x000008, "Wrong alignment on LowEntryDouble_DoubleBytes_Equals");
static_assert(sizeof(LowEntryDouble_DoubleBytes_Equals) == 0x000010, "Wrong size on LowEntryDouble_DoubleBytes_Equals");
static_assert(offsetof(LowEntryDouble_DoubleBytes_Equals, Value) == 0x000000, "Member 'LowEntryDouble_DoubleBytes_Equals::Value' has a wrong offset!");
static_assert(offsetof(LowEntryDouble_DoubleBytes_Equals, ReturnValue) == 0x000008, "Member 'LowEntryDouble_DoubleBytes_Equals::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryDouble.DoubleBytes_GreaterThan
// 0x0010 (0x0010 - 0x0000)
struct LowEntryDouble_DoubleBytes_GreaterThan final
{
public:
	class ULowEntryDouble*                        Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BAF[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryDouble_DoubleBytes_GreaterThan) == 0x000008, "Wrong alignment on LowEntryDouble_DoubleBytes_GreaterThan");
static_assert(sizeof(LowEntryDouble_DoubleBytes_GreaterThan) == 0x000010, "Wrong size on LowEntryDouble_DoubleBytes_GreaterThan");
static_assert(offsetof(LowEntryDouble_DoubleBytes_GreaterThan, Value) == 0x000000, "Member 'LowEntryDouble_DoubleBytes_GreaterThan::Value' has a wrong offset!");
static_assert(offsetof(LowEntryDouble_DoubleBytes_GreaterThan, ReturnValue) == 0x000008, "Member 'LowEntryDouble_DoubleBytes_GreaterThan::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryDouble.DoubleBytes_LessThan
// 0x0010 (0x0010 - 0x0000)
struct LowEntryDouble_DoubleBytes_LessThan final
{
public:
	class ULowEntryDouble*                        Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BB0[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryDouble_DoubleBytes_LessThan) == 0x000008, "Wrong alignment on LowEntryDouble_DoubleBytes_LessThan");
static_assert(sizeof(LowEntryDouble_DoubleBytes_LessThan) == 0x000010, "Wrong size on LowEntryDouble_DoubleBytes_LessThan");
static_assert(offsetof(LowEntryDouble_DoubleBytes_LessThan, Value) == 0x000000, "Member 'LowEntryDouble_DoubleBytes_LessThan::Value' has a wrong offset!");
static_assert(offsetof(LowEntryDouble_DoubleBytes_LessThan, ReturnValue) == 0x000008, "Member 'LowEntryDouble_DoubleBytes_LessThan::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryDouble.DoubleBytes_Subtract
// 0x0008 (0x0008 - 0x0000)
struct LowEntryDouble_DoubleBytes_Subtract final
{
public:
	class ULowEntryDouble*                        Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryDouble_DoubleBytes_Subtract) == 0x000008, "Wrong alignment on LowEntryDouble_DoubleBytes_Subtract");
static_assert(sizeof(LowEntryDouble_DoubleBytes_Subtract) == 0x000008, "Wrong size on LowEntryDouble_DoubleBytes_Subtract");
static_assert(offsetof(LowEntryDouble_DoubleBytes_Subtract, Value) == 0x000000, "Member 'LowEntryDouble_DoubleBytes_Subtract::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryDouble.Float_Add
// 0x0008 (0x0008 - 0x0000)
struct LowEntryDouble_Float_Add final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryDouble_Float_Add) == 0x000008, "Wrong alignment on LowEntryDouble_Float_Add");
static_assert(sizeof(LowEntryDouble_Float_Add) == 0x000008, "Wrong size on LowEntryDouble_Float_Add");
static_assert(offsetof(LowEntryDouble_Float_Add, Value) == 0x000000, "Member 'LowEntryDouble_Float_Add::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryDouble.Float_Equals
// 0x0010 (0x0010 - 0x0000)
struct LowEntryDouble_Float_Equals final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BB1[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryDouble_Float_Equals) == 0x000008, "Wrong alignment on LowEntryDouble_Float_Equals");
static_assert(sizeof(LowEntryDouble_Float_Equals) == 0x000010, "Wrong size on LowEntryDouble_Float_Equals");
static_assert(offsetof(LowEntryDouble_Float_Equals, Value) == 0x000000, "Member 'LowEntryDouble_Float_Equals::Value' has a wrong offset!");
static_assert(offsetof(LowEntryDouble_Float_Equals, ReturnValue) == 0x000008, "Member 'LowEntryDouble_Float_Equals::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryDouble.Float_GreaterThan
// 0x0010 (0x0010 - 0x0000)
struct LowEntryDouble_Float_GreaterThan final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BB2[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryDouble_Float_GreaterThan) == 0x000008, "Wrong alignment on LowEntryDouble_Float_GreaterThan");
static_assert(sizeof(LowEntryDouble_Float_GreaterThan) == 0x000010, "Wrong size on LowEntryDouble_Float_GreaterThan");
static_assert(offsetof(LowEntryDouble_Float_GreaterThan, Value) == 0x000000, "Member 'LowEntryDouble_Float_GreaterThan::Value' has a wrong offset!");
static_assert(offsetof(LowEntryDouble_Float_GreaterThan, ReturnValue) == 0x000008, "Member 'LowEntryDouble_Float_GreaterThan::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryDouble.Float_LessThan
// 0x0010 (0x0010 - 0x0000)
struct LowEntryDouble_Float_LessThan final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BB3[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryDouble_Float_LessThan) == 0x000008, "Wrong alignment on LowEntryDouble_Float_LessThan");
static_assert(sizeof(LowEntryDouble_Float_LessThan) == 0x000010, "Wrong size on LowEntryDouble_Float_LessThan");
static_assert(offsetof(LowEntryDouble_Float_LessThan, Value) == 0x000000, "Member 'LowEntryDouble_Float_LessThan::Value' has a wrong offset!");
static_assert(offsetof(LowEntryDouble_Float_LessThan, ReturnValue) == 0x000008, "Member 'LowEntryDouble_Float_LessThan::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryDouble.Float_Subtract
// 0x0008 (0x0008 - 0x0000)
struct LowEntryDouble_Float_Subtract final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryDouble_Float_Subtract) == 0x000008, "Wrong alignment on LowEntryDouble_Float_Subtract");
static_assert(sizeof(LowEntryDouble_Float_Subtract) == 0x000008, "Wrong size on LowEntryDouble_Float_Subtract");
static_assert(offsetof(LowEntryDouble_Float_Subtract, Value) == 0x000000, "Member 'LowEntryDouble_Float_Subtract::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryDouble.GetBytes
// 0x0010 (0x0010 - 0x0000)
struct LowEntryDouble_GetBytes final
{
public:
	TArray<uint8>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryDouble_GetBytes) == 0x000008, "Wrong alignment on LowEntryDouble_GetBytes");
static_assert(sizeof(LowEntryDouble_GetBytes) == 0x000010, "Wrong size on LowEntryDouble_GetBytes");
static_assert(offsetof(LowEntryDouble_GetBytes, ReturnValue) == 0x000000, "Member 'LowEntryDouble_GetBytes::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryDouble.GetDouble
// 0x0008 (0x0008 - 0x0000)
struct LowEntryDouble_GetDouble final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryDouble_GetDouble) == 0x000008, "Wrong alignment on LowEntryDouble_GetDouble");
static_assert(sizeof(LowEntryDouble_GetDouble) == 0x000008, "Wrong size on LowEntryDouble_GetDouble");
static_assert(offsetof(LowEntryDouble_GetDouble, ReturnValue) == 0x000000, "Member 'LowEntryDouble_GetDouble::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryDouble.Integer_GreaterThan
// 0x0008 (0x0008 - 0x0000)
struct LowEntryDouble_Integer_GreaterThan final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BB4[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryDouble_Integer_GreaterThan) == 0x000004, "Wrong alignment on LowEntryDouble_Integer_GreaterThan");
static_assert(sizeof(LowEntryDouble_Integer_GreaterThan) == 0x000008, "Wrong size on LowEntryDouble_Integer_GreaterThan");
static_assert(offsetof(LowEntryDouble_Integer_GreaterThan, Value) == 0x000000, "Member 'LowEntryDouble_Integer_GreaterThan::Value' has a wrong offset!");
static_assert(offsetof(LowEntryDouble_Integer_GreaterThan, ReturnValue) == 0x000004, "Member 'LowEntryDouble_Integer_GreaterThan::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryDouble.Integer_LessThan
// 0x0008 (0x0008 - 0x0000)
struct LowEntryDouble_Integer_LessThan final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BB5[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryDouble_Integer_LessThan) == 0x000004, "Wrong alignment on LowEntryDouble_Integer_LessThan");
static_assert(sizeof(LowEntryDouble_Integer_LessThan) == 0x000008, "Wrong size on LowEntryDouble_Integer_LessThan");
static_assert(offsetof(LowEntryDouble_Integer_LessThan, Value) == 0x000000, "Member 'LowEntryDouble_Integer_LessThan::Value' has a wrong offset!");
static_assert(offsetof(LowEntryDouble_Integer_LessThan, ReturnValue) == 0x000004, "Member 'LowEntryDouble_Integer_LessThan::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryDouble.LongBytes_GreaterThan
// 0x0010 (0x0010 - 0x0000)
struct LowEntryDouble_LongBytes_GreaterThan final
{
public:
	class ULowEntryLong*                          Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BB6[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryDouble_LongBytes_GreaterThan) == 0x000008, "Wrong alignment on LowEntryDouble_LongBytes_GreaterThan");
static_assert(sizeof(LowEntryDouble_LongBytes_GreaterThan) == 0x000010, "Wrong size on LowEntryDouble_LongBytes_GreaterThan");
static_assert(offsetof(LowEntryDouble_LongBytes_GreaterThan, Value) == 0x000000, "Member 'LowEntryDouble_LongBytes_GreaterThan::Value' has a wrong offset!");
static_assert(offsetof(LowEntryDouble_LongBytes_GreaterThan, ReturnValue) == 0x000008, "Member 'LowEntryDouble_LongBytes_GreaterThan::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryDouble.LongBytes_LessThan
// 0x0010 (0x0010 - 0x0000)
struct LowEntryDouble_LongBytes_LessThan final
{
public:
	class ULowEntryLong*                          Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BB7[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryDouble_LongBytes_LessThan) == 0x000008, "Wrong alignment on LowEntryDouble_LongBytes_LessThan");
static_assert(sizeof(LowEntryDouble_LongBytes_LessThan) == 0x000010, "Wrong size on LowEntryDouble_LongBytes_LessThan");
static_assert(offsetof(LowEntryDouble_LongBytes_LessThan, Value) == 0x000000, "Member 'LowEntryDouble_LongBytes_LessThan::Value' has a wrong offset!");
static_assert(offsetof(LowEntryDouble_LongBytes_LessThan, ReturnValue) == 0x000008, "Member 'LowEntryDouble_LongBytes_LessThan::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryDouble.SetBytes
// 0x0018 (0x0018 - 0x0000)
struct LowEntryDouble_SetBytes final
{
public:
	TArray<uint8>                                 ByteArray;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryDouble_SetBytes) == 0x000008, "Wrong alignment on LowEntryDouble_SetBytes");
static_assert(sizeof(LowEntryDouble_SetBytes) == 0x000018, "Wrong size on LowEntryDouble_SetBytes");
static_assert(offsetof(LowEntryDouble_SetBytes, ByteArray) == 0x000000, "Member 'LowEntryDouble_SetBytes::ByteArray' has a wrong offset!");
static_assert(offsetof(LowEntryDouble_SetBytes, Param_Index) == 0x000010, "Member 'LowEntryDouble_SetBytes::Param_Index' has a wrong offset!");
static_assert(offsetof(LowEntryDouble_SetBytes, Length) == 0x000014, "Member 'LowEntryDouble_SetBytes::Length' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryDouble.SetDouble
// 0x0008 (0x0008 - 0x0000)
struct LowEntryDouble_SetDouble final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryDouble_SetDouble) == 0x000008, "Wrong alignment on LowEntryDouble_SetDouble");
static_assert(sizeof(LowEntryDouble_SetDouble) == 0x000008, "Wrong size on LowEntryDouble_SetDouble");
static_assert(offsetof(LowEntryDouble_SetDouble, Value) == 0x000000, "Member 'LowEntryDouble_SetDouble::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.AndroidPlatform
// 0x0001 (0x0001 - 0x0000)
struct LowEntryExtendedStandardLibrary_AndroidPlatform final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_AndroidPlatform) == 0x000001, "Wrong alignment on LowEntryExtendedStandardLibrary_AndroidPlatform");
static_assert(sizeof(LowEntryExtendedStandardLibrary_AndroidPlatform) == 0x000001, "Wrong size on LowEntryExtendedStandardLibrary_AndroidPlatform");
static_assert(offsetof(LowEntryExtendedStandardLibrary_AndroidPlatform, ReturnValue) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_AndroidPlatform::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.AreAndroidHeadphonesPluggedIn
// 0x0001 (0x0001 - 0x0000)
struct LowEntryExtendedStandardLibrary_AreAndroidHeadphonesPluggedIn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_AreAndroidHeadphonesPluggedIn) == 0x000001, "Wrong alignment on LowEntryExtendedStandardLibrary_AreAndroidHeadphonesPluggedIn");
static_assert(sizeof(LowEntryExtendedStandardLibrary_AreAndroidHeadphonesPluggedIn) == 0x000001, "Wrong size on LowEntryExtendedStandardLibrary_AreAndroidHeadphonesPluggedIn");
static_assert(offsetof(LowEntryExtendedStandardLibrary_AreAndroidHeadphonesPluggedIn, ReturnValue) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_AreAndroidHeadphonesPluggedIn::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.AreBytesEqual
// 0x0038 (0x0038 - 0x0000)
struct LowEntryExtendedStandardLibrary_AreBytesEqual final
{
public:
	TArray<uint8>                                 A;                                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 B;                                                 // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         IndexA;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LengthA;                                           // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IndexB;                                            // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LengthB;                                           // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BB9[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_AreBytesEqual) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_AreBytesEqual");
static_assert(sizeof(LowEntryExtendedStandardLibrary_AreBytesEqual) == 0x000038, "Wrong size on LowEntryExtendedStandardLibrary_AreBytesEqual");
static_assert(offsetof(LowEntryExtendedStandardLibrary_AreBytesEqual, A) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_AreBytesEqual::A' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_AreBytesEqual, B) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_AreBytesEqual::B' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_AreBytesEqual, IndexA) == 0x000020, "Member 'LowEntryExtendedStandardLibrary_AreBytesEqual::IndexA' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_AreBytesEqual, LengthA) == 0x000024, "Member 'LowEntryExtendedStandardLibrary_AreBytesEqual::LengthA' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_AreBytesEqual, IndexB) == 0x000028, "Member 'LowEntryExtendedStandardLibrary_AreBytesEqual::IndexB' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_AreBytesEqual, LengthB) == 0x00002C, "Member 'LowEntryExtendedStandardLibrary_AreBytesEqual::LengthB' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_AreBytesEqual, ReturnValue) == 0x000030, "Member 'LowEntryExtendedStandardLibrary_AreBytesEqual::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.Base64ToBase64Url
// 0x0020 (0x0020 - 0x0000)
struct LowEntryExtendedStandardLibrary_Base64ToBase64Url final
{
public:
	class FString                                 Base64;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_Base64ToBase64Url) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_Base64ToBase64Url");
static_assert(sizeof(LowEntryExtendedStandardLibrary_Base64ToBase64Url) == 0x000020, "Wrong size on LowEntryExtendedStandardLibrary_Base64ToBase64Url");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Base64ToBase64Url, Base64) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_Base64ToBase64Url::Base64' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Base64ToBase64Url, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_Base64ToBase64Url::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.Base64ToBytes
// 0x0020 (0x0020 - 0x0000)
struct LowEntryExtendedStandardLibrary_Base64ToBytes final
{
public:
	class FString                                 Base64;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_Base64ToBytes) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_Base64ToBytes");
static_assert(sizeof(LowEntryExtendedStandardLibrary_Base64ToBytes) == 0x000020, "Wrong size on LowEntryExtendedStandardLibrary_Base64ToBytes");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Base64ToBytes, Base64) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_Base64ToBytes::Base64' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Base64ToBytes, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_Base64ToBytes::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.Base64UrlToBase64
// 0x0020 (0x0020 - 0x0000)
struct LowEntryExtendedStandardLibrary_Base64UrlToBase64 final
{
public:
	class FString                                 Base64Url;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_Base64UrlToBase64) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_Base64UrlToBase64");
static_assert(sizeof(LowEntryExtendedStandardLibrary_Base64UrlToBase64) == 0x000020, "Wrong size on LowEntryExtendedStandardLibrary_Base64UrlToBase64");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Base64UrlToBase64, Base64Url) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_Base64UrlToBase64::Base64Url' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Base64UrlToBase64, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_Base64UrlToBase64::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.Base64UrlToBytes
// 0x0020 (0x0020 - 0x0000)
struct LowEntryExtendedStandardLibrary_Base64UrlToBytes final
{
public:
	class FString                                 Base64Url;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_Base64UrlToBytes) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_Base64UrlToBytes");
static_assert(sizeof(LowEntryExtendedStandardLibrary_Base64UrlToBytes) == 0x000020, "Wrong size on LowEntryExtendedStandardLibrary_Base64UrlToBytes");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Base64UrlToBytes, Base64Url) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_Base64UrlToBytes::Base64Url' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Base64UrlToBytes, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_Base64UrlToBytes::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BCrypt
// 0x0040 (0x0040 - 0x0000)
struct LowEntryExtendedStandardLibrary_BCrypt final
{
public:
	TArray<uint8>                                 ByteArray;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Salt;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Strength;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BBA[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BCrypt) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BCrypt");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BCrypt) == 0x000040, "Wrong size on LowEntryExtendedStandardLibrary_BCrypt");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BCrypt, ByteArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BCrypt::ByteArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BCrypt, Salt) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_BCrypt::Salt' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BCrypt, Strength) == 0x000020, "Member 'LowEntryExtendedStandardLibrary_BCrypt::Strength' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BCrypt, Param_Index) == 0x000024, "Member 'LowEntryExtendedStandardLibrary_BCrypt::Param_Index' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BCrypt, Length) == 0x000028, "Member 'LowEntryExtendedStandardLibrary_BCrypt::Length' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BCrypt, ReturnValue) == 0x000030, "Member 'LowEntryExtendedStandardLibrary_BCrypt::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BinaryToBytes
// 0x0020 (0x0020 - 0x0000)
struct LowEntryExtendedStandardLibrary_BinaryToBytes final
{
public:
	class FString                                 Binary;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BinaryToBytes) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BinaryToBytes");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BinaryToBytes) == 0x000020, "Wrong size on LowEntryExtendedStandardLibrary_BinaryToBytes");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BinaryToBytes, Binary) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BinaryToBytes::Binary' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BinaryToBytes, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_BinaryToBytes::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BitDataEntry_CreateFromBit
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromBit final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BBB[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULowEntryBitDataEntry*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromBit) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromBit");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromBit) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromBit");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromBit, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromBit::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromBit, ReturnValue) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromBit::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BitDataEntry_CreateFromBitArray
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromBitArray final
{
public:
	TArray<bool>                                  Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class ULowEntryBitDataEntry*                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromBitArray) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromBitArray");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromBitArray) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromBitArray");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromBitArray, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromBitArray::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromBitArray, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromBitArray::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BitDataEntry_CreateFromBoolean
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromBoolean final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BBC[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULowEntryBitDataEntry*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromBoolean) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromBoolean");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromBoolean) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromBoolean");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromBoolean, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromBoolean::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromBoolean, ReturnValue) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromBoolean::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BitDataEntry_CreateFromBooleanArray
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromBooleanArray final
{
public:
	TArray<bool>                                  Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class ULowEntryBitDataEntry*                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromBooleanArray) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromBooleanArray");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromBooleanArray) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromBooleanArray");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromBooleanArray, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromBooleanArray::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromBooleanArray, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromBooleanArray::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BitDataEntry_CreateFromByte
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByte final
{
public:
	uint8                                         Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BBD[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULowEntryBitDataEntry*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByte) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByte");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByte) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByte");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByte, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByte::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByte, ReturnValue) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByte::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BitDataEntry_CreateFromByteArray
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteArray final
{
public:
	TArray<uint8>                                 Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class ULowEntryBitDataEntry*                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteArray) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteArray");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteArray) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteArray");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteArray, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteArray::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteArray, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteArray::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BitDataEntry_CreateFromByteArrayLeastSignificantBits
// 0x0020 (0x0020 - 0x0000)
struct LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteArrayLeastSignificantBits final
{
public:
	TArray<uint8>                                 Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         BitCount;                                          // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BBE[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULowEntryBitDataEntry*                  ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteArrayLeastSignificantBits) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteArrayLeastSignificantBits");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteArrayLeastSignificantBits) == 0x000020, "Wrong size on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteArrayLeastSignificantBits");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteArrayLeastSignificantBits, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteArrayLeastSignificantBits::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteArrayLeastSignificantBits, BitCount) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteArrayLeastSignificantBits::BitCount' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteArrayLeastSignificantBits, ReturnValue) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteArrayLeastSignificantBits::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BitDataEntry_CreateFromByteArrayMostSignificantBits
// 0x0020 (0x0020 - 0x0000)
struct LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteArrayMostSignificantBits final
{
public:
	TArray<uint8>                                 Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         BitCount;                                          // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BBF[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULowEntryBitDataEntry*                  ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteArrayMostSignificantBits) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteArrayMostSignificantBits");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteArrayMostSignificantBits) == 0x000020, "Wrong size on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteArrayMostSignificantBits");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteArrayMostSignificantBits, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteArrayMostSignificantBits::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteArrayMostSignificantBits, BitCount) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteArrayMostSignificantBits::BitCount' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteArrayMostSignificantBits, ReturnValue) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteArrayMostSignificantBits::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BitDataEntry_CreateFromByteLeastSignificantBits
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteLeastSignificantBits final
{
public:
	uint8                                         Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BC0[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BitCount;                                          // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULowEntryBitDataEntry*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteLeastSignificantBits) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteLeastSignificantBits");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteLeastSignificantBits) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteLeastSignificantBits");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteLeastSignificantBits, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteLeastSignificantBits::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteLeastSignificantBits, BitCount) == 0x000004, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteLeastSignificantBits::BitCount' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteLeastSignificantBits, ReturnValue) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteLeastSignificantBits::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BitDataEntry_CreateFromByteMostSignificantBits
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteMostSignificantBits final
{
public:
	uint8                                         Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BC1[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BitCount;                                          // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULowEntryBitDataEntry*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteMostSignificantBits) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteMostSignificantBits");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteMostSignificantBits) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteMostSignificantBits");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteMostSignificantBits, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteMostSignificantBits::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteMostSignificantBits, BitCount) == 0x000004, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteMostSignificantBits::BitCount' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteMostSignificantBits, ReturnValue) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromByteMostSignificantBits::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BitDataEntry_CreateFromDouble
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromDouble final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULowEntryBitDataEntry*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromDouble) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromDouble");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromDouble) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromDouble");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromDouble, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromDouble::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromDouble, ReturnValue) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromDouble::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BitDataEntry_CreateFromDoubleArray
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromDoubleArray final
{
public:
	TArray<double>                                Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class ULowEntryBitDataEntry*                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromDoubleArray) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromDoubleArray");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromDoubleArray) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromDoubleArray");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromDoubleArray, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromDoubleArray::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromDoubleArray, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromDoubleArray::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BitDataEntry_CreateFromDoubleBytes
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromDoubleBytes final
{
public:
	class ULowEntryDouble*                        Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULowEntryBitDataEntry*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromDoubleBytes) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromDoubleBytes");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromDoubleBytes) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromDoubleBytes");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromDoubleBytes, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromDoubleBytes::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromDoubleBytes, ReturnValue) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromDoubleBytes::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BitDataEntry_CreateFromDoubleBytesArray
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromDoubleBytesArray final
{
public:
	TArray<class ULowEntryDouble*>                Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class ULowEntryBitDataEntry*                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromDoubleBytesArray) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromDoubleBytesArray");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromDoubleBytesArray) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromDoubleBytesArray");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromDoubleBytesArray, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromDoubleBytesArray::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromDoubleBytesArray, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromDoubleBytesArray::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BitDataEntry_CreateFromFloat
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromFloat final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BC2[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULowEntryBitDataEntry*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromFloat) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromFloat");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromFloat) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromFloat");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromFloat, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromFloat::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromFloat, ReturnValue) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromFloat::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BitDataEntry_CreateFromFloatArray
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromFloatArray final
{
public:
	TArray<float>                                 Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class ULowEntryBitDataEntry*                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromFloatArray) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromFloatArray");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromFloatArray) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromFloatArray");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromFloatArray, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromFloatArray::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromFloatArray, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromFloatArray::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BitDataEntry_CreateFromInteger
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromInteger final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BC3[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULowEntryBitDataEntry*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromInteger) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromInteger");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromInteger) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromInteger");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromInteger, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromInteger::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromInteger, ReturnValue) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromInteger::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BitDataEntry_CreateFromIntegerArray
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerArray final
{
public:
	TArray<int32>                                 Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class ULowEntryBitDataEntry*                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerArray) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerArray");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerArray) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerArray");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerArray, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerArray::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerArray, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerArray::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BitDataEntry_CreateFromIntegerArrayLeastSignificantBits
// 0x0020 (0x0020 - 0x0000)
struct LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerArrayLeastSignificantBits final
{
public:
	TArray<int32>                                 Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         BitCount;                                          // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BC4[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULowEntryBitDataEntry*                  ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerArrayLeastSignificantBits) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerArrayLeastSignificantBits");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerArrayLeastSignificantBits) == 0x000020, "Wrong size on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerArrayLeastSignificantBits");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerArrayLeastSignificantBits, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerArrayLeastSignificantBits::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerArrayLeastSignificantBits, BitCount) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerArrayLeastSignificantBits::BitCount' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerArrayLeastSignificantBits, ReturnValue) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerArrayLeastSignificantBits::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BitDataEntry_CreateFromIntegerArrayMostSignificantBits
// 0x0020 (0x0020 - 0x0000)
struct LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerArrayMostSignificantBits final
{
public:
	TArray<int32>                                 Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         BitCount;                                          // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BC5[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULowEntryBitDataEntry*                  ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerArrayMostSignificantBits) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerArrayMostSignificantBits");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerArrayMostSignificantBits) == 0x000020, "Wrong size on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerArrayMostSignificantBits");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerArrayMostSignificantBits, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerArrayMostSignificantBits::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerArrayMostSignificantBits, BitCount) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerArrayMostSignificantBits::BitCount' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerArrayMostSignificantBits, ReturnValue) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerArrayMostSignificantBits::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BitDataEntry_CreateFromIntegerLeastSignificantBits
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerLeastSignificantBits final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BitCount;                                          // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULowEntryBitDataEntry*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerLeastSignificantBits) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerLeastSignificantBits");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerLeastSignificantBits) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerLeastSignificantBits");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerLeastSignificantBits, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerLeastSignificantBits::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerLeastSignificantBits, BitCount) == 0x000004, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerLeastSignificantBits::BitCount' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerLeastSignificantBits, ReturnValue) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerLeastSignificantBits::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BitDataEntry_CreateFromIntegerMostSignificantBits
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerMostSignificantBits final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BitCount;                                          // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULowEntryBitDataEntry*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerMostSignificantBits) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerMostSignificantBits");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerMostSignificantBits) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerMostSignificantBits");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerMostSignificantBits, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerMostSignificantBits::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerMostSignificantBits, BitCount) == 0x000004, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerMostSignificantBits::BitCount' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerMostSignificantBits, ReturnValue) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromIntegerMostSignificantBits::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BitDataEntry_CreateFromLong
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromLong final
{
public:
	int64                                         Value;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULowEntryBitDataEntry*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromLong) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromLong");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromLong) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromLong");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromLong, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromLong::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromLong, ReturnValue) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromLong::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BitDataEntry_CreateFromLongArray
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromLongArray final
{
public:
	TArray<int64>                                 Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class ULowEntryBitDataEntry*                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromLongArray) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromLongArray");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromLongArray) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromLongArray");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromLongArray, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromLongArray::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromLongArray, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromLongArray::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BitDataEntry_CreateFromLongBytes
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromLongBytes final
{
public:
	class ULowEntryLong*                          Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULowEntryBitDataEntry*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromLongBytes) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromLongBytes");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromLongBytes) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromLongBytes");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromLongBytes, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromLongBytes::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromLongBytes, ReturnValue) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromLongBytes::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BitDataEntry_CreateFromLongBytesArray
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromLongBytesArray final
{
public:
	TArray<class ULowEntryLong*>                  Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class ULowEntryBitDataEntry*                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromLongBytesArray) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromLongBytesArray");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromLongBytesArray) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromLongBytesArray");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromLongBytesArray, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromLongBytesArray::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromLongBytesArray, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromLongBytesArray::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BitDataEntry_CreateFromPositiveInteger1
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger1 final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BC6[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULowEntryBitDataEntry*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger1) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger1");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger1) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger1");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger1, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger1::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger1, ReturnValue) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger1::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BitDataEntry_CreateFromPositiveInteger1Array
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger1Array final
{
public:
	TArray<int32>                                 Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class ULowEntryBitDataEntry*                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger1Array) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger1Array");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger1Array) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger1Array");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger1Array, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger1Array::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger1Array, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger1Array::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BitDataEntry_CreateFromPositiveInteger2
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger2 final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BC7[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULowEntryBitDataEntry*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger2) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger2");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger2) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger2");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger2, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger2::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger2, ReturnValue) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger2::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BitDataEntry_CreateFromPositiveInteger2Array
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger2Array final
{
public:
	TArray<int32>                                 Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class ULowEntryBitDataEntry*                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger2Array) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger2Array");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger2Array) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger2Array");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger2Array, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger2Array::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger2Array, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger2Array::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BitDataEntry_CreateFromPositiveInteger3
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger3 final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BC8[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULowEntryBitDataEntry*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger3) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger3");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger3) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger3");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger3, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger3::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger3, ReturnValue) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger3::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BitDataEntry_CreateFromPositiveInteger3Array
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger3Array final
{
public:
	TArray<int32>                                 Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class ULowEntryBitDataEntry*                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger3Array) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger3Array");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger3Array) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger3Array");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger3Array, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger3Array::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger3Array, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromPositiveInteger3Array::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BitDataEntry_CreateFromStringUtf8
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromStringUtf8 final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULowEntryBitDataEntry*                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromStringUtf8) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromStringUtf8");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromStringUtf8) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromStringUtf8");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromStringUtf8, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromStringUtf8::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromStringUtf8, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromStringUtf8::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BitDataEntry_CreateFromStringUtf8Array
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromStringUtf8Array final
{
public:
	TArray<class FString>                         Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class ULowEntryBitDataEntry*                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromStringUtf8Array) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromStringUtf8Array");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromStringUtf8Array) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromStringUtf8Array");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromStringUtf8Array, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromStringUtf8Array::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromStringUtf8Array, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_BitDataEntry_CreateFromStringUtf8Array::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BitDataReader_Create
// 0x0020 (0x0020 - 0x0000)
struct LowEntryExtendedStandardLibrary_BitDataReader_Create final
{
public:
	TArray<uint8>                                 Bytes;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULowEntryBitDataReader*                 ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BitDataReader_Create) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BitDataReader_Create");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BitDataReader_Create) == 0x000020, "Wrong size on LowEntryExtendedStandardLibrary_BitDataReader_Create");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataReader_Create, Bytes) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BitDataReader_Create::Bytes' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataReader_Create, Param_Index) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_BitDataReader_Create::Param_Index' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataReader_Create, Length) == 0x000014, "Member 'LowEntryExtendedStandardLibrary_BitDataReader_Create::Length' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataReader_Create, ReturnValue) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_BitDataReader_Create::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BitDataWriter_CreateFromEntryArray
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_BitDataWriter_CreateFromEntryArray final
{
public:
	TArray<class ULowEntryBitDataEntry*>          Array;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class ULowEntryBitDataWriter*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BitDataWriter_CreateFromEntryArray) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BitDataWriter_CreateFromEntryArray");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BitDataWriter_CreateFromEntryArray) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_BitDataWriter_CreateFromEntryArray");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataWriter_CreateFromEntryArray, Array) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BitDataWriter_CreateFromEntryArray::Array' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataWriter_CreateFromEntryArray, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_BitDataWriter_CreateFromEntryArray::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BitDataWriter_CreateFromEntryArrayPure
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_BitDataWriter_CreateFromEntryArrayPure final
{
public:
	TArray<class ULowEntryBitDataEntry*>          Array;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class ULowEntryBitDataWriter*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BitDataWriter_CreateFromEntryArrayPure) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BitDataWriter_CreateFromEntryArrayPure");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BitDataWriter_CreateFromEntryArrayPure) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_BitDataWriter_CreateFromEntryArrayPure");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataWriter_CreateFromEntryArrayPure, Array) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BitDataWriter_CreateFromEntryArrayPure::Array' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataWriter_CreateFromEntryArrayPure, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_BitDataWriter_CreateFromEntryArrayPure::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BitDataWriter_GetBytes
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_BitDataWriter_GetBytes final
{
public:
	class ULowEntryBitDataWriter*                 BitDataWriter;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BitDataWriter_GetBytes) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BitDataWriter_GetBytes");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BitDataWriter_GetBytes) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_BitDataWriter_GetBytes");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataWriter_GetBytes, BitDataWriter) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BitDataWriter_GetBytes::BitDataWriter' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitDataWriter_GetBytes, ReturnValue) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_BitDataWriter_GetBytes::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BitsToByte
// 0x0009 (0x0009 - 0x0000)
struct LowEntryExtendedStandardLibrary_BitsToByte final
{
public:
	bool                                          Bit1;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Bit2;                                              // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Bit3;                                              // 0x0002(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Bit4;                                              // 0x0003(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Bit5;                                              // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Bit6;                                              // 0x0005(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Bit7;                                              // 0x0006(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Bit8;                                              // 0x0007(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Byte;                                              // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BitsToByte) == 0x000001, "Wrong alignment on LowEntryExtendedStandardLibrary_BitsToByte");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BitsToByte) == 0x000009, "Wrong size on LowEntryExtendedStandardLibrary_BitsToByte");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitsToByte, Bit1) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BitsToByte::Bit1' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitsToByte, Bit2) == 0x000001, "Member 'LowEntryExtendedStandardLibrary_BitsToByte::Bit2' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitsToByte, Bit3) == 0x000002, "Member 'LowEntryExtendedStandardLibrary_BitsToByte::Bit3' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitsToByte, Bit4) == 0x000003, "Member 'LowEntryExtendedStandardLibrary_BitsToByte::Bit4' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitsToByte, Bit5) == 0x000004, "Member 'LowEntryExtendedStandardLibrary_BitsToByte::Bit5' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitsToByte, Bit6) == 0x000005, "Member 'LowEntryExtendedStandardLibrary_BitsToByte::Bit6' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitsToByte, Bit7) == 0x000006, "Member 'LowEntryExtendedStandardLibrary_BitsToByte::Bit7' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitsToByte, Bit8) == 0x000007, "Member 'LowEntryExtendedStandardLibrary_BitsToByte::Bit8' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitsToByte, Byte) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_BitsToByte::Byte' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BitStringToBytes
// 0x0020 (0x0020 - 0x0000)
struct LowEntryExtendedStandardLibrary_BitStringToBytes final
{
public:
	class FString                                 Bits;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BitStringToBytes) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BitStringToBytes");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BitStringToBytes) == 0x000020, "Wrong size on LowEntryExtendedStandardLibrary_BitStringToBytes");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitStringToBytes, Bits) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BitStringToBytes::Bits' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BitStringToBytes, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_BitStringToBytes::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BooleanToByte
// 0x0002 (0x0002 - 0x0000)
struct LowEntryExtendedStandardLibrary_BooleanToByte final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BooleanToByte) == 0x000001, "Wrong alignment on LowEntryExtendedStandardLibrary_BooleanToByte");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BooleanToByte) == 0x000002, "Wrong size on LowEntryExtendedStandardLibrary_BooleanToByte");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BooleanToByte, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BooleanToByte::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BooleanToByte, ReturnValue) == 0x000001, "Member 'LowEntryExtendedStandardLibrary_BooleanToByte::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BooleanToBytes
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_BooleanToBytes final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BC9[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BooleanToBytes) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BooleanToBytes");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BooleanToBytes) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_BooleanToBytes");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BooleanToBytes, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BooleanToBytes::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BooleanToBytes, ReturnValue) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_BooleanToBytes::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.ByteDataEntry_CreateFromBoolean
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromBoolean final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BCA[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULowEntryByteDataEntry*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromBoolean) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromBoolean");
static_assert(sizeof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromBoolean) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromBoolean");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromBoolean, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromBoolean::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromBoolean, ReturnValue) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromBoolean::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.ByteDataEntry_CreateFromBooleanArray
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromBooleanArray final
{
public:
	TArray<bool>                                  Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class ULowEntryByteDataEntry*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromBooleanArray) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromBooleanArray");
static_assert(sizeof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromBooleanArray) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromBooleanArray");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromBooleanArray, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromBooleanArray::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromBooleanArray, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromBooleanArray::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.ByteDataEntry_CreateFromByte
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromByte final
{
public:
	uint8                                         Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BCB[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULowEntryByteDataEntry*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromByte) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromByte");
static_assert(sizeof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromByte) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromByte");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromByte, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromByte::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromByte, ReturnValue) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromByte::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.ByteDataEntry_CreateFromByteArray
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromByteArray final
{
public:
	TArray<uint8>                                 Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class ULowEntryByteDataEntry*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromByteArray) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromByteArray");
static_assert(sizeof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromByteArray) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromByteArray");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromByteArray, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromByteArray::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromByteArray, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromByteArray::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.ByteDataEntry_CreateFromDouble
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromDouble final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULowEntryByteDataEntry*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromDouble) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromDouble");
static_assert(sizeof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromDouble) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromDouble");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromDouble, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromDouble::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromDouble, ReturnValue) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromDouble::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.ByteDataEntry_CreateFromDoubleArray
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromDoubleArray final
{
public:
	TArray<double>                                Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class ULowEntryByteDataEntry*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromDoubleArray) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromDoubleArray");
static_assert(sizeof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromDoubleArray) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromDoubleArray");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromDoubleArray, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromDoubleArray::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromDoubleArray, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromDoubleArray::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.ByteDataEntry_CreateFromDoubleBytes
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromDoubleBytes final
{
public:
	class ULowEntryDouble*                        Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULowEntryByteDataEntry*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromDoubleBytes) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromDoubleBytes");
static_assert(sizeof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromDoubleBytes) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromDoubleBytes");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromDoubleBytes, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromDoubleBytes::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromDoubleBytes, ReturnValue) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromDoubleBytes::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.ByteDataEntry_CreateFromDoubleBytesArray
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromDoubleBytesArray final
{
public:
	TArray<class ULowEntryDouble*>                Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class ULowEntryByteDataEntry*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromDoubleBytesArray) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromDoubleBytesArray");
static_assert(sizeof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromDoubleBytesArray) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromDoubleBytesArray");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromDoubleBytesArray, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromDoubleBytesArray::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromDoubleBytesArray, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromDoubleBytesArray::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.ByteDataEntry_CreateFromFloat
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromFloat final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BCC[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULowEntryByteDataEntry*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromFloat) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromFloat");
static_assert(sizeof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromFloat) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromFloat");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromFloat, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromFloat::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromFloat, ReturnValue) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromFloat::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.ByteDataEntry_CreateFromFloatArray
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromFloatArray final
{
public:
	TArray<float>                                 Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class ULowEntryByteDataEntry*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromFloatArray) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromFloatArray");
static_assert(sizeof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromFloatArray) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromFloatArray");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromFloatArray, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromFloatArray::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromFloatArray, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromFloatArray::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.ByteDataEntry_CreateFromInteger
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromInteger final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BCD[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULowEntryByteDataEntry*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromInteger) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromInteger");
static_assert(sizeof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromInteger) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromInteger");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromInteger, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromInteger::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromInteger, ReturnValue) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromInteger::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.ByteDataEntry_CreateFromIntegerArray
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromIntegerArray final
{
public:
	TArray<int32>                                 Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class ULowEntryByteDataEntry*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromIntegerArray) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromIntegerArray");
static_assert(sizeof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromIntegerArray) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromIntegerArray");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromIntegerArray, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromIntegerArray::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromIntegerArray, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromIntegerArray::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.ByteDataEntry_CreateFromLong
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromLong final
{
public:
	int64                                         Value;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULowEntryByteDataEntry*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromLong) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromLong");
static_assert(sizeof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromLong) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromLong");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromLong, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromLong::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromLong, ReturnValue) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromLong::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.ByteDataEntry_CreateFromLongArray
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromLongArray final
{
public:
	TArray<int64>                                 Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class ULowEntryByteDataEntry*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromLongArray) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromLongArray");
static_assert(sizeof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromLongArray) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromLongArray");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromLongArray, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromLongArray::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromLongArray, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromLongArray::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.ByteDataEntry_CreateFromLongBytes
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromLongBytes final
{
public:
	class ULowEntryLong*                          Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULowEntryByteDataEntry*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromLongBytes) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromLongBytes");
static_assert(sizeof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromLongBytes) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromLongBytes");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromLongBytes, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromLongBytes::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromLongBytes, ReturnValue) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromLongBytes::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.ByteDataEntry_CreateFromLongBytesArray
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromLongBytesArray final
{
public:
	TArray<class ULowEntryLong*>                  Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class ULowEntryByteDataEntry*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromLongBytesArray) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromLongBytesArray");
static_assert(sizeof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromLongBytesArray) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromLongBytesArray");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromLongBytesArray, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromLongBytesArray::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromLongBytesArray, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromLongBytesArray::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.ByteDataEntry_CreateFromPositiveInteger1
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger1 final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BCE[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULowEntryByteDataEntry*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger1) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger1");
static_assert(sizeof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger1) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger1");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger1, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger1::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger1, ReturnValue) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger1::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.ByteDataEntry_CreateFromPositiveInteger1Array
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger1Array final
{
public:
	TArray<int32>                                 Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class ULowEntryByteDataEntry*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger1Array) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger1Array");
static_assert(sizeof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger1Array) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger1Array");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger1Array, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger1Array::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger1Array, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger1Array::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.ByteDataEntry_CreateFromPositiveInteger2
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger2 final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BCF[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULowEntryByteDataEntry*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger2) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger2");
static_assert(sizeof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger2) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger2");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger2, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger2::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger2, ReturnValue) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger2::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.ByteDataEntry_CreateFromPositiveInteger2Array
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger2Array final
{
public:
	TArray<int32>                                 Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class ULowEntryByteDataEntry*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger2Array) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger2Array");
static_assert(sizeof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger2Array) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger2Array");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger2Array, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger2Array::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger2Array, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger2Array::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.ByteDataEntry_CreateFromPositiveInteger3
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger3 final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BD0[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULowEntryByteDataEntry*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger3) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger3");
static_assert(sizeof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger3) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger3");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger3, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger3::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger3, ReturnValue) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger3::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.ByteDataEntry_CreateFromPositiveInteger3Array
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger3Array final
{
public:
	TArray<int32>                                 Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class ULowEntryByteDataEntry*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger3Array) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger3Array");
static_assert(sizeof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger3Array) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger3Array");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger3Array, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger3Array::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger3Array, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromPositiveInteger3Array::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.ByteDataEntry_CreateFromStringUtf8
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromStringUtf8 final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULowEntryByteDataEntry*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromStringUtf8) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromStringUtf8");
static_assert(sizeof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromStringUtf8) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromStringUtf8");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromStringUtf8, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromStringUtf8::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromStringUtf8, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromStringUtf8::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.ByteDataEntry_CreateFromStringUtf8Array
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromStringUtf8Array final
{
public:
	TArray<class FString>                         Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class ULowEntryByteDataEntry*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromStringUtf8Array) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromStringUtf8Array");
static_assert(sizeof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromStringUtf8Array) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromStringUtf8Array");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromStringUtf8Array, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromStringUtf8Array::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromStringUtf8Array, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_ByteDataEntry_CreateFromStringUtf8Array::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.ByteDataReader_Create
// 0x0020 (0x0020 - 0x0000)
struct LowEntryExtendedStandardLibrary_ByteDataReader_Create final
{
public:
	TArray<uint8>                                 Bytes;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULowEntryByteDataReader*                ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_ByteDataReader_Create) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_ByteDataReader_Create");
static_assert(sizeof(LowEntryExtendedStandardLibrary_ByteDataReader_Create) == 0x000020, "Wrong size on LowEntryExtendedStandardLibrary_ByteDataReader_Create");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataReader_Create, Bytes) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_ByteDataReader_Create::Bytes' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataReader_Create, Param_Index) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_ByteDataReader_Create::Param_Index' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataReader_Create, Length) == 0x000014, "Member 'LowEntryExtendedStandardLibrary_ByteDataReader_Create::Length' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataReader_Create, ReturnValue) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_ByteDataReader_Create::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.ByteDataWriter_CreateFromEntryArray
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_ByteDataWriter_CreateFromEntryArray final
{
public:
	TArray<class ULowEntryByteDataEntry*>         Array;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class ULowEntryByteDataWriter*                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_ByteDataWriter_CreateFromEntryArray) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_ByteDataWriter_CreateFromEntryArray");
static_assert(sizeof(LowEntryExtendedStandardLibrary_ByteDataWriter_CreateFromEntryArray) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_ByteDataWriter_CreateFromEntryArray");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataWriter_CreateFromEntryArray, Array) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_ByteDataWriter_CreateFromEntryArray::Array' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataWriter_CreateFromEntryArray, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_ByteDataWriter_CreateFromEntryArray::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.ByteDataWriter_CreateFromEntryArrayPure
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_ByteDataWriter_CreateFromEntryArrayPure final
{
public:
	TArray<class ULowEntryByteDataEntry*>         Array;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class ULowEntryByteDataWriter*                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_ByteDataWriter_CreateFromEntryArrayPure) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_ByteDataWriter_CreateFromEntryArrayPure");
static_assert(sizeof(LowEntryExtendedStandardLibrary_ByteDataWriter_CreateFromEntryArrayPure) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_ByteDataWriter_CreateFromEntryArrayPure");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataWriter_CreateFromEntryArrayPure, Array) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_ByteDataWriter_CreateFromEntryArrayPure::Array' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataWriter_CreateFromEntryArrayPure, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_ByteDataWriter_CreateFromEntryArrayPure::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.ByteDataWriter_GetBytes
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_ByteDataWriter_GetBytes final
{
public:
	class ULowEntryByteDataWriter*                ByteDataWriter;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_ByteDataWriter_GetBytes) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_ByteDataWriter_GetBytes");
static_assert(sizeof(LowEntryExtendedStandardLibrary_ByteDataWriter_GetBytes) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_ByteDataWriter_GetBytes");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataWriter_GetBytes, ByteDataWriter) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_ByteDataWriter_GetBytes::ByteDataWriter' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteDataWriter_GetBytes, ReturnValue) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_ByteDataWriter_GetBytes::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BytesSubArray
// 0x0028 (0x0028 - 0x0000)
struct LowEntryExtendedStandardLibrary_BytesSubArray final
{
public:
	TArray<uint8>                                 ByteArray;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BytesSubArray) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BytesSubArray");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BytesSubArray) == 0x000028, "Wrong size on LowEntryExtendedStandardLibrary_BytesSubArray");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesSubArray, ByteArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BytesSubArray::ByteArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesSubArray, Param_Index) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_BytesSubArray::Param_Index' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesSubArray, Length) == 0x000014, "Member 'LowEntryExtendedStandardLibrary_BytesSubArray::Length' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesSubArray, ReturnValue) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_BytesSubArray::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BytesToBase64
// 0x0028 (0x0028 - 0x0000)
struct LowEntryExtendedStandardLibrary_BytesToBase64 final
{
public:
	TArray<uint8>                                 ByteArray;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BytesToBase64) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BytesToBase64");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BytesToBase64) == 0x000028, "Wrong size on LowEntryExtendedStandardLibrary_BytesToBase64");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToBase64, ByteArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BytesToBase64::ByteArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToBase64, Param_Index) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_BytesToBase64::Param_Index' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToBase64, Length) == 0x000014, "Member 'LowEntryExtendedStandardLibrary_BytesToBase64::Length' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToBase64, ReturnValue) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_BytesToBase64::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BytesToBase64Url
// 0x0028 (0x0028 - 0x0000)
struct LowEntryExtendedStandardLibrary_BytesToBase64Url final
{
public:
	TArray<uint8>                                 ByteArray;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BytesToBase64Url) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BytesToBase64Url");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BytesToBase64Url) == 0x000028, "Wrong size on LowEntryExtendedStandardLibrary_BytesToBase64Url");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToBase64Url, ByteArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BytesToBase64Url::ByteArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToBase64Url, Param_Index) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_BytesToBase64Url::Param_Index' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToBase64Url, Length) == 0x000014, "Member 'LowEntryExtendedStandardLibrary_BytesToBase64Url::Length' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToBase64Url, ReturnValue) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_BytesToBase64Url::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BytesToBinary
// 0x0030 (0x0030 - 0x0000)
struct LowEntryExtendedStandardLibrary_BytesToBinary final
{
public:
	TArray<uint8>                                 ByteArray;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          AddSpaces;                                         // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BD1[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param_Index;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BD2[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BytesToBinary) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BytesToBinary");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BytesToBinary) == 0x000030, "Wrong size on LowEntryExtendedStandardLibrary_BytesToBinary");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToBinary, ByteArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BytesToBinary::ByteArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToBinary, AddSpaces) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_BytesToBinary::AddSpaces' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToBinary, Param_Index) == 0x000014, "Member 'LowEntryExtendedStandardLibrary_BytesToBinary::Param_Index' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToBinary, Length) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_BytesToBinary::Length' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToBinary, ReturnValue) == 0x000020, "Member 'LowEntryExtendedStandardLibrary_BytesToBinary::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BytesToBitString
// 0x0030 (0x0030 - 0x0000)
struct LowEntryExtendedStandardLibrary_BytesToBitString final
{
public:
	TArray<uint8>                                 ByteArray;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          AddSpaces;                                         // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BD3[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param_Index;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BD4[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BytesToBitString) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BytesToBitString");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BytesToBitString) == 0x000030, "Wrong size on LowEntryExtendedStandardLibrary_BytesToBitString");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToBitString, ByteArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BytesToBitString::ByteArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToBitString, AddSpaces) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_BytesToBitString::AddSpaces' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToBitString, Param_Index) == 0x000014, "Member 'LowEntryExtendedStandardLibrary_BytesToBitString::Param_Index' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToBitString, Length) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_BytesToBitString::Length' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToBitString, ReturnValue) == 0x000020, "Member 'LowEntryExtendedStandardLibrary_BytesToBitString::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BytesToBoolean
// 0x0020 (0x0020 - 0x0000)
struct LowEntryExtendedStandardLibrary_BytesToBoolean final
{
public:
	TArray<uint8>                                 ByteArray;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BD5[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BytesToBoolean) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BytesToBoolean");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BytesToBoolean) == 0x000020, "Wrong size on LowEntryExtendedStandardLibrary_BytesToBoolean");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToBoolean, ByteArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BytesToBoolean::ByteArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToBoolean, Param_Index) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_BytesToBoolean::Param_Index' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToBoolean, Length) == 0x000014, "Member 'LowEntryExtendedStandardLibrary_BytesToBoolean::Length' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToBoolean, ReturnValue) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_BytesToBoolean::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BytesToByte
// 0x0020 (0x0020 - 0x0000)
struct LowEntryExtendedStandardLibrary_BytesToByte final
{
public:
	TArray<uint8>                                 ByteArray;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BD6[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BytesToByte) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BytesToByte");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BytesToByte) == 0x000020, "Wrong size on LowEntryExtendedStandardLibrary_BytesToByte");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToByte, ByteArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BytesToByte::ByteArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToByte, Param_Index) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_BytesToByte::Param_Index' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToByte, Length) == 0x000014, "Member 'LowEntryExtendedStandardLibrary_BytesToByte::Length' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToByte, ReturnValue) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_BytesToByte::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BytesToDouble
// 0x0020 (0x0020 - 0x0000)
struct LowEntryExtendedStandardLibrary_BytesToDouble final
{
public:
	TArray<uint8>                                 ByteArray;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BytesToDouble) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BytesToDouble");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BytesToDouble) == 0x000020, "Wrong size on LowEntryExtendedStandardLibrary_BytesToDouble");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToDouble, ByteArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BytesToDouble::ByteArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToDouble, Param_Index) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_BytesToDouble::Param_Index' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToDouble, Length) == 0x000014, "Member 'LowEntryExtendedStandardLibrary_BytesToDouble::Length' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToDouble, ReturnValue) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_BytesToDouble::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BytesToDoubleBytes
// 0x0020 (0x0020 - 0x0000)
struct LowEntryExtendedStandardLibrary_BytesToDoubleBytes final
{
public:
	TArray<uint8>                                 ByteArray;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULowEntryDouble*                        ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BytesToDoubleBytes) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BytesToDoubleBytes");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BytesToDoubleBytes) == 0x000020, "Wrong size on LowEntryExtendedStandardLibrary_BytesToDoubleBytes");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToDoubleBytes, ByteArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BytesToDoubleBytes::ByteArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToDoubleBytes, Param_Index) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_BytesToDoubleBytes::Param_Index' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToDoubleBytes, Length) == 0x000014, "Member 'LowEntryExtendedStandardLibrary_BytesToDoubleBytes::Length' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToDoubleBytes, ReturnValue) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_BytesToDoubleBytes::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BytesToExistingImage
// 0x0038 (0x0038 - 0x0000)
struct LowEntryExtendedStandardLibrary_BytesToExistingImage final
{
public:
	bool                                          ReusedGivenTexture2D;                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BD7[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Texture2D;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ByteArray;                                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	ELowEntryImageFormat                          ImageFormat;                                       // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BD8[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param_Index;                                       // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BD9[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BytesToExistingImage) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BytesToExistingImage");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BytesToExistingImage) == 0x000038, "Wrong size on LowEntryExtendedStandardLibrary_BytesToExistingImage");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToExistingImage, ReusedGivenTexture2D) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BytesToExistingImage::ReusedGivenTexture2D' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToExistingImage, Texture2D) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_BytesToExistingImage::Texture2D' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToExistingImage, ByteArray) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_BytesToExistingImage::ByteArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToExistingImage, ImageFormat) == 0x000020, "Member 'LowEntryExtendedStandardLibrary_BytesToExistingImage::ImageFormat' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToExistingImage, Param_Index) == 0x000024, "Member 'LowEntryExtendedStandardLibrary_BytesToExistingImage::Param_Index' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToExistingImage, Length) == 0x000028, "Member 'LowEntryExtendedStandardLibrary_BytesToExistingImage::Length' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToExistingImage, ReturnValue) == 0x000030, "Member 'LowEntryExtendedStandardLibrary_BytesToExistingImage::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BytesToFloat
// 0x0020 (0x0020 - 0x0000)
struct LowEntryExtendedStandardLibrary_BytesToFloat final
{
public:
	TArray<uint8>                                 ByteArray;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BDA[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BytesToFloat) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BytesToFloat");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BytesToFloat) == 0x000020, "Wrong size on LowEntryExtendedStandardLibrary_BytesToFloat");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToFloat, ByteArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BytesToFloat::ByteArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToFloat, Param_Index) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_BytesToFloat::Param_Index' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToFloat, Length) == 0x000014, "Member 'LowEntryExtendedStandardLibrary_BytesToFloat::Length' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToFloat, ReturnValue) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_BytesToFloat::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BytesToHex
// 0x0030 (0x0030 - 0x0000)
struct LowEntryExtendedStandardLibrary_BytesToHex final
{
public:
	TArray<uint8>                                 ByteArray;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          AddSpaces;                                         // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BDB[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param_Index;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BDC[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BytesToHex) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BytesToHex");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BytesToHex) == 0x000030, "Wrong size on LowEntryExtendedStandardLibrary_BytesToHex");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToHex, ByteArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BytesToHex::ByteArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToHex, AddSpaces) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_BytesToHex::AddSpaces' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToHex, Param_Index) == 0x000014, "Member 'LowEntryExtendedStandardLibrary_BytesToHex::Param_Index' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToHex, Length) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_BytesToHex::Length' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToHex, ReturnValue) == 0x000020, "Member 'LowEntryExtendedStandardLibrary_BytesToHex::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BytesToImage
// 0x0028 (0x0028 - 0x0000)
struct LowEntryExtendedStandardLibrary_BytesToImage final
{
public:
	TArray<uint8>                                 ByteArray;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	ELowEntryImageFormat                          ImageFormat;                                       // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BDD[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param_Index;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BDE[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BytesToImage) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BytesToImage");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BytesToImage) == 0x000028, "Wrong size on LowEntryExtendedStandardLibrary_BytesToImage");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToImage, ByteArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BytesToImage::ByteArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToImage, ImageFormat) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_BytesToImage::ImageFormat' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToImage, Param_Index) == 0x000014, "Member 'LowEntryExtendedStandardLibrary_BytesToImage::Param_Index' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToImage, Length) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_BytesToImage::Length' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToImage, ReturnValue) == 0x000020, "Member 'LowEntryExtendedStandardLibrary_BytesToImage::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BytesToInteger
// 0x0020 (0x0020 - 0x0000)
struct LowEntryExtendedStandardLibrary_BytesToInteger final
{
public:
	TArray<uint8>                                 ByteArray;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BDF[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BytesToInteger) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BytesToInteger");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BytesToInteger) == 0x000020, "Wrong size on LowEntryExtendedStandardLibrary_BytesToInteger");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToInteger, ByteArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BytesToInteger::ByteArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToInteger, Param_Index) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_BytesToInteger::Param_Index' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToInteger, Length) == 0x000014, "Member 'LowEntryExtendedStandardLibrary_BytesToInteger::Length' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToInteger, ReturnValue) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_BytesToInteger::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BytesToLong
// 0x0020 (0x0020 - 0x0000)
struct LowEntryExtendedStandardLibrary_BytesToLong final
{
public:
	TArray<uint8>                                 ByteArray;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BytesToLong) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BytesToLong");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BytesToLong) == 0x000020, "Wrong size on LowEntryExtendedStandardLibrary_BytesToLong");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToLong, ByteArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BytesToLong::ByteArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToLong, Param_Index) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_BytesToLong::Param_Index' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToLong, Length) == 0x000014, "Member 'LowEntryExtendedStandardLibrary_BytesToLong::Length' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToLong, ReturnValue) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_BytesToLong::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BytesToLongBytes
// 0x0020 (0x0020 - 0x0000)
struct LowEntryExtendedStandardLibrary_BytesToLongBytes final
{
public:
	TArray<uint8>                                 ByteArray;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULowEntryLong*                          ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BytesToLongBytes) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BytesToLongBytes");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BytesToLongBytes) == 0x000020, "Wrong size on LowEntryExtendedStandardLibrary_BytesToLongBytes");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToLongBytes, ByteArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BytesToLongBytes::ByteArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToLongBytes, Param_Index) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_BytesToLongBytes::Param_Index' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToLongBytes, Length) == 0x000014, "Member 'LowEntryExtendedStandardLibrary_BytesToLongBytes::Length' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToLongBytes, ReturnValue) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_BytesToLongBytes::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BytesToPixels
// 0x0038 (0x0038 - 0x0000)
struct LowEntryExtendedStandardLibrary_BytesToPixels final
{
public:
	TArray<uint8>                                 ByteArray;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	ELowEntryImageFormat                          ImageFormat;                                       // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BE0[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Width;                                             // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BE1[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FColor>                         Pixels;                                            // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BytesToPixels) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BytesToPixels");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BytesToPixels) == 0x000038, "Wrong size on LowEntryExtendedStandardLibrary_BytesToPixels");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToPixels, ByteArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BytesToPixels::ByteArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToPixels, ImageFormat) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_BytesToPixels::ImageFormat' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToPixels, Width) == 0x000014, "Member 'LowEntryExtendedStandardLibrary_BytesToPixels::Width' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToPixels, Height) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_BytesToPixels::Height' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToPixels, Pixels) == 0x000020, "Member 'LowEntryExtendedStandardLibrary_BytesToPixels::Pixels' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToPixels, Param_Index) == 0x000030, "Member 'LowEntryExtendedStandardLibrary_BytesToPixels::Param_Index' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToPixels, Length) == 0x000034, "Member 'LowEntryExtendedStandardLibrary_BytesToPixels::Length' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.BytesToStringUtf8
// 0x0028 (0x0028 - 0x0000)
struct LowEntryExtendedStandardLibrary_BytesToStringUtf8 final
{
public:
	TArray<uint8>                                 ByteArray;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_BytesToStringUtf8) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_BytesToStringUtf8");
static_assert(sizeof(LowEntryExtendedStandardLibrary_BytesToStringUtf8) == 0x000028, "Wrong size on LowEntryExtendedStandardLibrary_BytesToStringUtf8");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToStringUtf8, ByteArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_BytesToStringUtf8::ByteArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToStringUtf8, Param_Index) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_BytesToStringUtf8::Param_Index' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToStringUtf8, Length) == 0x000014, "Member 'LowEntryExtendedStandardLibrary_BytesToStringUtf8::Length' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_BytesToStringUtf8, ReturnValue) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_BytesToStringUtf8::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.ByteToBits
// 0x0009 (0x0009 - 0x0000)
struct LowEntryExtendedStandardLibrary_ByteToBits final
{
public:
	uint8                                         Byte;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Bit1;                                              // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Bit2;                                              // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Bit3;                                              // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Bit4;                                              // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Bit5;                                              // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Bit6;                                              // 0x0006(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Bit7;                                              // 0x0007(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Bit8;                                              // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_ByteToBits) == 0x000001, "Wrong alignment on LowEntryExtendedStandardLibrary_ByteToBits");
static_assert(sizeof(LowEntryExtendedStandardLibrary_ByteToBits) == 0x000009, "Wrong size on LowEntryExtendedStandardLibrary_ByteToBits");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteToBits, Byte) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_ByteToBits::Byte' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteToBits, Bit1) == 0x000001, "Member 'LowEntryExtendedStandardLibrary_ByteToBits::Bit1' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteToBits, Bit2) == 0x000002, "Member 'LowEntryExtendedStandardLibrary_ByteToBits::Bit2' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteToBits, Bit3) == 0x000003, "Member 'LowEntryExtendedStandardLibrary_ByteToBits::Bit3' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteToBits, Bit4) == 0x000004, "Member 'LowEntryExtendedStandardLibrary_ByteToBits::Bit4' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteToBits, Bit5) == 0x000005, "Member 'LowEntryExtendedStandardLibrary_ByteToBits::Bit5' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteToBits, Bit6) == 0x000006, "Member 'LowEntryExtendedStandardLibrary_ByteToBits::Bit6' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteToBits, Bit7) == 0x000007, "Member 'LowEntryExtendedStandardLibrary_ByteToBits::Bit7' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteToBits, Bit8) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_ByteToBits::Bit8' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.ByteToBoolean
// 0x0002 (0x0002 - 0x0000)
struct LowEntryExtendedStandardLibrary_ByteToBoolean final
{
public:
	uint8                                         Byte;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_ByteToBoolean) == 0x000001, "Wrong alignment on LowEntryExtendedStandardLibrary_ByteToBoolean");
static_assert(sizeof(LowEntryExtendedStandardLibrary_ByteToBoolean) == 0x000002, "Wrong size on LowEntryExtendedStandardLibrary_ByteToBoolean");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteToBoolean, Byte) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_ByteToBoolean::Byte' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteToBoolean, ReturnValue) == 0x000001, "Member 'LowEntryExtendedStandardLibrary_ByteToBoolean::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.ByteToBytes
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_ByteToBytes final
{
public:
	uint8                                         Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BE2[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_ByteToBytes) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_ByteToBytes");
static_assert(sizeof(LowEntryExtendedStandardLibrary_ByteToBytes) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_ByteToBytes");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteToBytes, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_ByteToBytes::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ByteToBytes, ReturnValue) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_ByteToBytes::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.CarriageReturnCharacter
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_CarriageReturnCharacter final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_CarriageReturnCharacter) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_CarriageReturnCharacter");
static_assert(sizeof(LowEntryExtendedStandardLibrary_CarriageReturnCharacter) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_CarriageReturnCharacter");
static_assert(offsetof(LowEntryExtendedStandardLibrary_CarriageReturnCharacter, ReturnValue) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_CarriageReturnCharacter::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.CaseSwitchByte
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_CaseSwitchByte final
{
public:
	int32                                         OnlyCheckFirstX;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Value;                                             // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         _1__;                                              // 0x0005(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         _2__;                                              // 0x0006(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         _3__;                                              // 0x0007(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         _4__;                                              // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         _5__;                                              // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         _6__;                                              // 0x000A(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         _7__;                                              // 0x000B(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         _8__;                                              // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         _9__;                                              // 0x000D(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         _10__;                                             // 0x000E(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELowEntryExtendedStandardLibrary1to10other    Branch;                                            // 0x000F(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_CaseSwitchByte) == 0x000004, "Wrong alignment on LowEntryExtendedStandardLibrary_CaseSwitchByte");
static_assert(sizeof(LowEntryExtendedStandardLibrary_CaseSwitchByte) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_CaseSwitchByte");
static_assert(offsetof(LowEntryExtendedStandardLibrary_CaseSwitchByte, OnlyCheckFirstX) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_CaseSwitchByte::OnlyCheckFirstX' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_CaseSwitchByte, Value) == 0x000004, "Member 'LowEntryExtendedStandardLibrary_CaseSwitchByte::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_CaseSwitchByte, _1__) == 0x000005, "Member 'LowEntryExtendedStandardLibrary_CaseSwitchByte::_1__' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_CaseSwitchByte, _2__) == 0x000006, "Member 'LowEntryExtendedStandardLibrary_CaseSwitchByte::_2__' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_CaseSwitchByte, _3__) == 0x000007, "Member 'LowEntryExtendedStandardLibrary_CaseSwitchByte::_3__' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_CaseSwitchByte, _4__) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_CaseSwitchByte::_4__' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_CaseSwitchByte, _5__) == 0x000009, "Member 'LowEntryExtendedStandardLibrary_CaseSwitchByte::_5__' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_CaseSwitchByte, _6__) == 0x00000A, "Member 'LowEntryExtendedStandardLibrary_CaseSwitchByte::_6__' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_CaseSwitchByte, _7__) == 0x00000B, "Member 'LowEntryExtendedStandardLibrary_CaseSwitchByte::_7__' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_CaseSwitchByte, _8__) == 0x00000C, "Member 'LowEntryExtendedStandardLibrary_CaseSwitchByte::_8__' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_CaseSwitchByte, _9__) == 0x00000D, "Member 'LowEntryExtendedStandardLibrary_CaseSwitchByte::_9__' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_CaseSwitchByte, _10__) == 0x00000E, "Member 'LowEntryExtendedStandardLibrary_CaseSwitchByte::_10__' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_CaseSwitchByte, Branch) == 0x00000F, "Member 'LowEntryExtendedStandardLibrary_CaseSwitchByte::Branch' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.CaseSwitchInteger
// 0x0034 (0x0034 - 0x0000)
struct LowEntryExtendedStandardLibrary_CaseSwitchInteger final
{
public:
	int32                                         OnlyCheckFirstX;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _1__;                                              // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _2__;                                              // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _3__;                                              // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _4__;                                              // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _5__;                                              // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _6__;                                              // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _7__;                                              // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _8__;                                              // 0x0024(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _9__;                                              // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _10__;                                             // 0x002C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELowEntryExtendedStandardLibrary1to10other    Branch;                                            // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BE3[0x3];                                     // 0x0031(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_CaseSwitchInteger) == 0x000004, "Wrong alignment on LowEntryExtendedStandardLibrary_CaseSwitchInteger");
static_assert(sizeof(LowEntryExtendedStandardLibrary_CaseSwitchInteger) == 0x000034, "Wrong size on LowEntryExtendedStandardLibrary_CaseSwitchInteger");
static_assert(offsetof(LowEntryExtendedStandardLibrary_CaseSwitchInteger, OnlyCheckFirstX) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_CaseSwitchInteger::OnlyCheckFirstX' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_CaseSwitchInteger, Value) == 0x000004, "Member 'LowEntryExtendedStandardLibrary_CaseSwitchInteger::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_CaseSwitchInteger, _1__) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_CaseSwitchInteger::_1__' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_CaseSwitchInteger, _2__) == 0x00000C, "Member 'LowEntryExtendedStandardLibrary_CaseSwitchInteger::_2__' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_CaseSwitchInteger, _3__) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_CaseSwitchInteger::_3__' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_CaseSwitchInteger, _4__) == 0x000014, "Member 'LowEntryExtendedStandardLibrary_CaseSwitchInteger::_4__' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_CaseSwitchInteger, _5__) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_CaseSwitchInteger::_5__' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_CaseSwitchInteger, _6__) == 0x00001C, "Member 'LowEntryExtendedStandardLibrary_CaseSwitchInteger::_6__' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_CaseSwitchInteger, _7__) == 0x000020, "Member 'LowEntryExtendedStandardLibrary_CaseSwitchInteger::_7__' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_CaseSwitchInteger, _8__) == 0x000024, "Member 'LowEntryExtendedStandardLibrary_CaseSwitchInteger::_8__' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_CaseSwitchInteger, _9__) == 0x000028, "Member 'LowEntryExtendedStandardLibrary_CaseSwitchInteger::_9__' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_CaseSwitchInteger, _10__) == 0x00002C, "Member 'LowEntryExtendedStandardLibrary_CaseSwitchInteger::_10__' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_CaseSwitchInteger, Branch) == 0x000030, "Member 'LowEntryExtendedStandardLibrary_CaseSwitchInteger::Branch' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.CaseSwitchObject
// 0x0068 (0x0068 - 0x0000)
struct LowEntryExtendedStandardLibrary_CaseSwitchObject final
{
public:
	int32                                         OnlyCheckFirstX;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BE4[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Value;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          _1__;                                              // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          _2__;                                              // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          _3__;                                              // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          _4__;                                              // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          _5__;                                              // 0x0030(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          _6__;                                              // 0x0038(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          _7__;                                              // 0x0040(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          _8__;                                              // 0x0048(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          _9__;                                              // 0x0050(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          _10__;                                             // 0x0058(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELowEntryExtendedStandardLibrary1to10other    Branch;                                            // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BE5[0x7];                                     // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_CaseSwitchObject) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_CaseSwitchObject");
static_assert(sizeof(LowEntryExtendedStandardLibrary_CaseSwitchObject) == 0x000068, "Wrong size on LowEntryExtendedStandardLibrary_CaseSwitchObject");
static_assert(offsetof(LowEntryExtendedStandardLibrary_CaseSwitchObject, OnlyCheckFirstX) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_CaseSwitchObject::OnlyCheckFirstX' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_CaseSwitchObject, Value) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_CaseSwitchObject::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_CaseSwitchObject, _1__) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_CaseSwitchObject::_1__' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_CaseSwitchObject, _2__) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_CaseSwitchObject::_2__' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_CaseSwitchObject, _3__) == 0x000020, "Member 'LowEntryExtendedStandardLibrary_CaseSwitchObject::_3__' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_CaseSwitchObject, _4__) == 0x000028, "Member 'LowEntryExtendedStandardLibrary_CaseSwitchObject::_4__' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_CaseSwitchObject, _5__) == 0x000030, "Member 'LowEntryExtendedStandardLibrary_CaseSwitchObject::_5__' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_CaseSwitchObject, _6__) == 0x000038, "Member 'LowEntryExtendedStandardLibrary_CaseSwitchObject::_6__' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_CaseSwitchObject, _7__) == 0x000040, "Member 'LowEntryExtendedStandardLibrary_CaseSwitchObject::_7__' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_CaseSwitchObject, _8__) == 0x000048, "Member 'LowEntryExtendedStandardLibrary_CaseSwitchObject::_8__' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_CaseSwitchObject, _9__) == 0x000050, "Member 'LowEntryExtendedStandardLibrary_CaseSwitchObject::_9__' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_CaseSwitchObject, _10__) == 0x000058, "Member 'LowEntryExtendedStandardLibrary_CaseSwitchObject::_10__' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_CaseSwitchObject, Branch) == 0x000060, "Member 'LowEntryExtendedStandardLibrary_CaseSwitchObject::Branch' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.CeilDecimals
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_CeilDecimals final
{
public:
	double                                        Number;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Decimals;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BE6[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_CeilDecimals) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_CeilDecimals");
static_assert(sizeof(LowEntryExtendedStandardLibrary_CeilDecimals) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_CeilDecimals");
static_assert(offsetof(LowEntryExtendedStandardLibrary_CeilDecimals, Number) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_CeilDecimals::Number' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_CeilDecimals, Decimals) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_CeilDecimals::Decimals' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_CeilDecimals, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_CeilDecimals::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.ChangeMap
// 0x0030 (0x0030 - 0x0000)
struct LowEntryExtendedStandardLibrary_ChangeMap final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Map;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Args;                                              // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      SpecificPlayer;                                    // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_ChangeMap) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_ChangeMap");
static_assert(sizeof(LowEntryExtendedStandardLibrary_ChangeMap) == 0x000030, "Wrong size on LowEntryExtendedStandardLibrary_ChangeMap");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ChangeMap, WorldContextObject) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_ChangeMap::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ChangeMap, Map) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_ChangeMap::Map' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ChangeMap, Args) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_ChangeMap::Args' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ChangeMap, SpecificPlayer) == 0x000028, "Member 'LowEntryExtendedStandardLibrary_ChangeMap::SpecificPlayer' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.ClearUserFocus
// 0x0004 (0x0004 - 0x0000)
struct LowEntryExtendedStandardLibrary_ClearUserFocus final
{
public:
	int32                                         UserIndex;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_ClearUserFocus) == 0x000004, "Wrong alignment on LowEntryExtendedStandardLibrary_ClearUserFocus");
static_assert(sizeof(LowEntryExtendedStandardLibrary_ClearUserFocus) == 0x000004, "Wrong size on LowEntryExtendedStandardLibrary_ClearUserFocus");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ClearUserFocus, UserIndex) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_ClearUserFocus::UserIndex' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.ClipboardGet
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_ClipboardGet final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_ClipboardGet) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_ClipboardGet");
static_assert(sizeof(LowEntryExtendedStandardLibrary_ClipboardGet) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_ClipboardGet");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ClipboardGet, ReturnValue) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_ClipboardGet::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.ClipboardSet
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_ClipboardSet final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_ClipboardSet) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_ClipboardSet");
static_assert(sizeof(LowEntryExtendedStandardLibrary_ClipboardSet) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_ClipboardSet");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ClipboardSet, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_ClipboardSet::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.ConvertLocalDateToUtcDate
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_ConvertLocalDateToUtcDate final
{
public:
	struct FDateTime                              Local;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Utc;                                               // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_ConvertLocalDateToUtcDate) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_ConvertLocalDateToUtcDate");
static_assert(sizeof(LowEntryExtendedStandardLibrary_ConvertLocalDateToUtcDate) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_ConvertLocalDateToUtcDate");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ConvertLocalDateToUtcDate, Local) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_ConvertLocalDateToUtcDate::Local' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ConvertLocalDateToUtcDate, Utc) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_ConvertLocalDateToUtcDate::Utc' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.ConvertUtcDateToLocalDate
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_ConvertUtcDateToLocalDate final
{
public:
	struct FDateTime                              Utc;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Local;                                             // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_ConvertUtcDateToLocalDate) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_ConvertUtcDateToLocalDate");
static_assert(sizeof(LowEntryExtendedStandardLibrary_ConvertUtcDateToLocalDate) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_ConvertUtcDateToLocalDate");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ConvertUtcDateToLocalDate, Utc) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_ConvertUtcDateToLocalDate::Utc' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ConvertUtcDateToLocalDate, Local) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_ConvertUtcDateToLocalDate::Local' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.CreateObject
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_CreateObject final
{
public:
	TSubclassOf<class UObject>                    Param_Class;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Object;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_CreateObject) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_CreateObject");
static_assert(sizeof(LowEntryExtendedStandardLibrary_CreateObject) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_CreateObject");
static_assert(offsetof(LowEntryExtendedStandardLibrary_CreateObject, Param_Class) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_CreateObject::Param_Class' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_CreateObject, Object) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_CreateObject::Object' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.CreateString
// 0x0028 (0x0028 - 0x0000)
struct LowEntryExtendedStandardLibrary_CreateString final
{
public:
	int32                                         Length;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BE7[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Filler;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_CreateString) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_CreateString");
static_assert(sizeof(LowEntryExtendedStandardLibrary_CreateString) == 0x000028, "Wrong size on LowEntryExtendedStandardLibrary_CreateString");
static_assert(offsetof(LowEntryExtendedStandardLibrary_CreateString, Length) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_CreateString::Length' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_CreateString, Filler) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_CreateString::Filler' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_CreateString, ReturnValue) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_CreateString::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.DateTime_FromUnixTimestamp
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_DateTime_FromUnixTimestamp final
{
public:
	class ULowEntryLong*                          Timestamp;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              DateTime;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_DateTime_FromUnixTimestamp) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_DateTime_FromUnixTimestamp");
static_assert(sizeof(LowEntryExtendedStandardLibrary_DateTime_FromUnixTimestamp) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_DateTime_FromUnixTimestamp");
static_assert(offsetof(LowEntryExtendedStandardLibrary_DateTime_FromUnixTimestamp, Timestamp) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_DateTime_FromUnixTimestamp::Timestamp' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_DateTime_FromUnixTimestamp, DateTime) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_DateTime_FromUnixTimestamp::DateTime' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.DateTime_ToIso8601
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_DateTime_ToIso8601 final
{
public:
	struct FDateTime                              DateTime;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 String;                                            // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_DateTime_ToIso8601) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_DateTime_ToIso8601");
static_assert(sizeof(LowEntryExtendedStandardLibrary_DateTime_ToIso8601) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_DateTime_ToIso8601");
static_assert(offsetof(LowEntryExtendedStandardLibrary_DateTime_ToIso8601, DateTime) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_DateTime_ToIso8601::DateTime' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_DateTime_ToIso8601, String) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_DateTime_ToIso8601::String' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.DateTime_ToString
// 0x0028 (0x0028 - 0x0000)
struct LowEntryExtendedStandardLibrary_DateTime_ToString final
{
public:
	struct FDateTime                              DateTime;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 String;                                            // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Format;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_DateTime_ToString) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_DateTime_ToString");
static_assert(sizeof(LowEntryExtendedStandardLibrary_DateTime_ToString) == 0x000028, "Wrong size on LowEntryExtendedStandardLibrary_DateTime_ToString");
static_assert(offsetof(LowEntryExtendedStandardLibrary_DateTime_ToString, DateTime) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_DateTime_ToString::DateTime' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_DateTime_ToString, String) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_DateTime_ToString::String' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_DateTime_ToString, Format) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_DateTime_ToString::Format' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.DateTime_ToUnixTimestamp
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_DateTime_ToUnixTimestamp final
{
public:
	struct FDateTime                              DateTime;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULowEntryLong*                          Timestamp;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_DateTime_ToUnixTimestamp) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_DateTime_ToUnixTimestamp");
static_assert(sizeof(LowEntryExtendedStandardLibrary_DateTime_ToUnixTimestamp) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_DateTime_ToUnixTimestamp");
static_assert(offsetof(LowEntryExtendedStandardLibrary_DateTime_ToUnixTimestamp, DateTime) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_DateTime_ToUnixTimestamp::DateTime' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_DateTime_ToUnixTimestamp, Timestamp) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_DateTime_ToUnixTimestamp::Timestamp' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.DebugBuild
// 0x0001 (0x0001 - 0x0000)
struct LowEntryExtendedStandardLibrary_DebugBuild final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_DebugBuild) == 0x000001, "Wrong alignment on LowEntryExtendedStandardLibrary_DebugBuild");
static_assert(sizeof(LowEntryExtendedStandardLibrary_DebugBuild) == 0x000001, "Wrong size on LowEntryExtendedStandardLibrary_DebugBuild");
static_assert(offsetof(LowEntryExtendedStandardLibrary_DebugBuild, ReturnValue) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_DebugBuild::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.DelayFrames
// 0x0028 (0x0028 - 0x0000)
struct LowEntryExtendedStandardLibrary_DelayFrames final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Frames;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BE8[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_DelayFrames) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_DelayFrames");
static_assert(sizeof(LowEntryExtendedStandardLibrary_DelayFrames) == 0x000028, "Wrong size on LowEntryExtendedStandardLibrary_DelayFrames");
static_assert(offsetof(LowEntryExtendedStandardLibrary_DelayFrames, WorldContextObject) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_DelayFrames::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_DelayFrames, Frames) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_DelayFrames::Frames' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_DelayFrames, LatentInfo) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_DelayFrames::LatentInfo' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.DesktopPlatform
// 0x0001 (0x0001 - 0x0000)
struct LowEntryExtendedStandardLibrary_DesktopPlatform final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_DesktopPlatform) == 0x000001, "Wrong alignment on LowEntryExtendedStandardLibrary_DesktopPlatform");
static_assert(sizeof(LowEntryExtendedStandardLibrary_DesktopPlatform) == 0x000001, "Wrong size on LowEntryExtendedStandardLibrary_DesktopPlatform");
static_assert(offsetof(LowEntryExtendedStandardLibrary_DesktopPlatform, ReturnValue) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_DesktopPlatform::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.DevelopmentBuild
// 0x0001 (0x0001 - 0x0000)
struct LowEntryExtendedStandardLibrary_DevelopmentBuild final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_DevelopmentBuild) == 0x000001, "Wrong alignment on LowEntryExtendedStandardLibrary_DevelopmentBuild");
static_assert(sizeof(LowEntryExtendedStandardLibrary_DevelopmentBuild) == 0x000001, "Wrong size on LowEntryExtendedStandardLibrary_DevelopmentBuild");
static_assert(offsetof(LowEntryExtendedStandardLibrary_DevelopmentBuild, ReturnValue) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_DevelopmentBuild::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.Divide_Vector2DVector2D
// 0x0030 (0x0030 - 0x0000)
struct LowEntryExtendedStandardLibrary_Divide_Vector2DVector2D final
{
public:
	struct FVector2D                              A;                                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              B;                                                 // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_Divide_Vector2DVector2D) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_Divide_Vector2DVector2D");
static_assert(sizeof(LowEntryExtendedStandardLibrary_Divide_Vector2DVector2D) == 0x000030, "Wrong size on LowEntryExtendedStandardLibrary_Divide_Vector2DVector2D");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Divide_Vector2DVector2D, A) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_Divide_Vector2DVector2D::A' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Divide_Vector2DVector2D, B) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_Divide_Vector2DVector2D::B' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Divide_Vector2DVector2D, ReturnValue) == 0x000020, "Member 'LowEntryExtendedStandardLibrary_Divide_Vector2DVector2D::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.Double_Create
// 0x0020 (0x0020 - 0x0000)
struct LowEntryExtendedStandardLibrary_Double_Create final
{
public:
	TArray<uint8>                                 ByteArray;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULowEntryDouble*                        ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_Double_Create) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_Double_Create");
static_assert(sizeof(LowEntryExtendedStandardLibrary_Double_Create) == 0x000020, "Wrong size on LowEntryExtendedStandardLibrary_Double_Create");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Double_Create, ByteArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_Double_Create::ByteArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Double_Create, Param_Index) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_Double_Create::Param_Index' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Double_Create, Length) == 0x000014, "Member 'LowEntryExtendedStandardLibrary_Double_Create::Length' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Double_Create, ReturnValue) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_Double_Create::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.Double_CreateZero
// 0x0008 (0x0008 - 0x0000)
struct LowEntryExtendedStandardLibrary_Double_CreateZero final
{
public:
	class ULowEntryDouble*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_Double_CreateZero) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_Double_CreateZero");
static_assert(sizeof(LowEntryExtendedStandardLibrary_Double_CreateZero) == 0x000008, "Wrong size on LowEntryExtendedStandardLibrary_Double_CreateZero");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Double_CreateZero, ReturnValue) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_Double_CreateZero::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.DoubleToBytes
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_DoubleToBytes final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_DoubleToBytes) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_DoubleToBytes");
static_assert(sizeof(LowEntryExtendedStandardLibrary_DoubleToBytes) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_DoubleToBytes");
static_assert(offsetof(LowEntryExtendedStandardLibrary_DoubleToBytes, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_DoubleToBytes::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_DoubleToBytes, ReturnValue) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_DoubleToBytes::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.EncapsulateByteArray
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_EncapsulateByteArray final
{
public:
	TArray<uint8>                                 ByteArray;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class ULowEntryByteArray*                     ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_EncapsulateByteArray) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_EncapsulateByteArray");
static_assert(sizeof(LowEntryExtendedStandardLibrary_EncapsulateByteArray) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_EncapsulateByteArray");
static_assert(offsetof(LowEntryExtendedStandardLibrary_EncapsulateByteArray, ByteArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_EncapsulateByteArray::ByteArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_EncapsulateByteArray, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_EncapsulateByteArray::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.ExecToBoolean
// 0x0002 (0x0002 - 0x0000)
struct LowEntryExtendedStandardLibrary_ExecToBoolean final
{
public:
	ELowEntryExtendedStandardLibraryTrueOrFalse   Branch;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_ExecToBoolean) == 0x000001, "Wrong alignment on LowEntryExtendedStandardLibrary_ExecToBoolean");
static_assert(sizeof(LowEntryExtendedStandardLibrary_ExecToBoolean) == 0x000002, "Wrong size on LowEntryExtendedStandardLibrary_ExecToBoolean");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ExecToBoolean, Branch) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_ExecToBoolean::Branch' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ExecToBoolean, Value) == 0x000001, "Member 'LowEntryExtendedStandardLibrary_ExecToBoolean::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.ExecToByte
// 0x0002 (0x0002 - 0x0000)
struct LowEntryExtendedStandardLibrary_ExecToByte final
{
public:
	ELowEntryExtendedStandardLibrary0to9          Branch;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Value;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_ExecToByte) == 0x000001, "Wrong alignment on LowEntryExtendedStandardLibrary_ExecToByte");
static_assert(sizeof(LowEntryExtendedStandardLibrary_ExecToByte) == 0x000002, "Wrong size on LowEntryExtendedStandardLibrary_ExecToByte");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ExecToByte, Branch) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_ExecToByte::Branch' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ExecToByte, Value) == 0x000001, "Member 'LowEntryExtendedStandardLibrary_ExecToByte::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.ExecToInteger
// 0x0008 (0x0008 - 0x0000)
struct LowEntryExtendedStandardLibrary_ExecToInteger final
{
public:
	ELowEntryExtendedStandardLibrary0to9          Branch;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BE9[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_ExecToInteger) == 0x000004, "Wrong alignment on LowEntryExtendedStandardLibrary_ExecToInteger");
static_assert(sizeof(LowEntryExtendedStandardLibrary_ExecToInteger) == 0x000008, "Wrong size on LowEntryExtendedStandardLibrary_ExecToInteger");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ExecToInteger, Branch) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_ExecToInteger::Branch' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ExecToInteger, Value) == 0x000004, "Member 'LowEntryExtendedStandardLibrary_ExecToInteger::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.FloatToBytes
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_FloatToBytes final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BEA[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_FloatToBytes) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_FloatToBytes");
static_assert(sizeof(LowEntryExtendedStandardLibrary_FloatToBytes) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_FloatToBytes");
static_assert(offsetof(LowEntryExtendedStandardLibrary_FloatToBytes, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_FloatToBytes::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_FloatToBytes, ReturnValue) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_FloatToBytes::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.FloorDecimals
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_FloorDecimals final
{
public:
	double                                        Number;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Decimals;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BEB[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_FloorDecimals) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_FloorDecimals");
static_assert(sizeof(LowEntryExtendedStandardLibrary_FloorDecimals) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_FloorDecimals");
static_assert(offsetof(LowEntryExtendedStandardLibrary_FloorDecimals, Number) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_FloorDecimals::Number' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_FloorDecimals, Decimals) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_FloorDecimals::Decimals' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_FloorDecimals, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_FloorDecimals::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GenerateRandomBytes
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_GenerateRandomBytes final
{
public:
	int32                                         Length;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BEC[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ByteArray;                                         // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GenerateRandomBytes) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_GenerateRandomBytes");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GenerateRandomBytes) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_GenerateRandomBytes");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GenerateRandomBytes, Length) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GenerateRandomBytes::Length' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GenerateRandomBytes, ByteArray) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_GenerateRandomBytes::ByteArray' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GenerateRandomBytesRandomLength
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_GenerateRandomBytesRandomLength final
{
public:
	int32                                         MinLength;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLength;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ByteArray;                                         // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GenerateRandomBytesRandomLength) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_GenerateRandomBytesRandomLength");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GenerateRandomBytesRandomLength) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_GenerateRandomBytesRandomLength");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GenerateRandomBytesRandomLength, MinLength) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GenerateRandomBytesRandomLength::MinLength' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GenerateRandomBytesRandomLength, MaxLength) == 0x000004, "Member 'LowEntryExtendedStandardLibrary_GenerateRandomBytesRandomLength::MaxLength' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GenerateRandomBytesRandomLength, ByteArray) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_GenerateRandomBytesRandomLength::ByteArray' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GetAbsoluteSize
// 0x0048 (0x0048 - 0x0000)
struct LowEntryExtendedStandardLibrary_GetAbsoluteSize final
{
public:
	struct FGeometry                              Geometry;                                          // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GetAbsoluteSize) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_GetAbsoluteSize");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GetAbsoluteSize) == 0x000048, "Wrong size on LowEntryExtendedStandardLibrary_GetAbsoluteSize");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetAbsoluteSize, Geometry) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GetAbsoluteSize::Geometry' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetAbsoluteSize, ReturnValue) == 0x000038, "Member 'LowEntryExtendedStandardLibrary_GetAbsoluteSize::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GetAbsoluteToLocalScale
// 0x0048 (0x0048 - 0x0000)
struct LowEntryExtendedStandardLibrary_GetAbsoluteToLocalScale final
{
public:
	struct FGeometry                              Geometry;                                          // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GetAbsoluteToLocalScale) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_GetAbsoluteToLocalScale");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GetAbsoluteToLocalScale) == 0x000048, "Wrong size on LowEntryExtendedStandardLibrary_GetAbsoluteToLocalScale");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetAbsoluteToLocalScale, Geometry) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GetAbsoluteToLocalScale::Geometry' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetAbsoluteToLocalScale, ReturnValue) == 0x000038, "Member 'LowEntryExtendedStandardLibrary_GetAbsoluteToLocalScale::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GetAndroidBuildVersion
// 0x0004 (0x0004 - 0x0000)
struct LowEntryExtendedStandardLibrary_GetAndroidBuildVersion final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GetAndroidBuildVersion) == 0x000004, "Wrong alignment on LowEntryExtendedStandardLibrary_GetAndroidBuildVersion");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GetAndroidBuildVersion) == 0x000004, "Wrong size on LowEntryExtendedStandardLibrary_GetAndroidBuildVersion");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetAndroidBuildVersion, ReturnValue) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GetAndroidBuildVersion::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GetAndroidDefaultLocale
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_GetAndroidDefaultLocale final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GetAndroidDefaultLocale) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_GetAndroidDefaultLocale");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GetAndroidDefaultLocale) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_GetAndroidDefaultLocale");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetAndroidDefaultLocale, ReturnValue) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GetAndroidDefaultLocale::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GetAndroidDeviceMake
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_GetAndroidDeviceMake final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GetAndroidDeviceMake) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_GetAndroidDeviceMake");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GetAndroidDeviceMake) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_GetAndroidDeviceMake");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetAndroidDeviceMake, ReturnValue) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GetAndroidDeviceMake::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GetAndroidDeviceModel
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_GetAndroidDeviceModel final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GetAndroidDeviceModel) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_GetAndroidDeviceModel");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GetAndroidDeviceModel) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_GetAndroidDeviceModel");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetAndroidDeviceModel, ReturnValue) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GetAndroidDeviceModel::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GetAndroidGlVersion
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_GetAndroidGlVersion final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GetAndroidGlVersion) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_GetAndroidGlVersion");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GetAndroidGlVersion) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_GetAndroidGlVersion");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetAndroidGlVersion, ReturnValue) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GetAndroidGlVersion::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GetAndroidGpuFamily
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_GetAndroidGpuFamily final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GetAndroidGpuFamily) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_GetAndroidGpuFamily");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GetAndroidGpuFamily) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_GetAndroidGpuFamily");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetAndroidGpuFamily, ReturnValue) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GetAndroidGpuFamily::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GetAndroidNumberOfCores
// 0x0004 (0x0004 - 0x0000)
struct LowEntryExtendedStandardLibrary_GetAndroidNumberOfCores final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GetAndroidNumberOfCores) == 0x000004, "Wrong alignment on LowEntryExtendedStandardLibrary_GetAndroidNumberOfCores");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GetAndroidNumberOfCores) == 0x000004, "Wrong size on LowEntryExtendedStandardLibrary_GetAndroidNumberOfCores");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetAndroidNumberOfCores, ReturnValue) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GetAndroidNumberOfCores::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GetAndroidOsLanguage
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_GetAndroidOsLanguage final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GetAndroidOsLanguage) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_GetAndroidOsLanguage");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GetAndroidOsLanguage) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_GetAndroidOsLanguage");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetAndroidOsLanguage, ReturnValue) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GetAndroidOsLanguage::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GetAndroidVersion
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_GetAndroidVersion final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GetAndroidVersion) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_GetAndroidVersion");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GetAndroidVersion) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_GetAndroidVersion");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetAndroidVersion, ReturnValue) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GetAndroidVersion::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GetAndroidVolume
// 0x0004 (0x0004 - 0x0000)
struct LowEntryExtendedStandardLibrary_GetAndroidVolume final
{
public:
	int32                                         Volume;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GetAndroidVolume) == 0x000004, "Wrong alignment on LowEntryExtendedStandardLibrary_GetAndroidVolume");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GetAndroidVolume) == 0x000004, "Wrong size on LowEntryExtendedStandardLibrary_GetAndroidVolume");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetAndroidVolume, Volume) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GetAndroidVolume::Volume' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GetBatteryCharge
// 0x0008 (0x0008 - 0x0000)
struct LowEntryExtendedStandardLibrary_GetBatteryCharge final
{
public:
	int32                                         Percentage;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BED[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GetBatteryCharge) == 0x000004, "Wrong alignment on LowEntryExtendedStandardLibrary_GetBatteryCharge");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GetBatteryCharge) == 0x000008, "Wrong size on LowEntryExtendedStandardLibrary_GetBatteryCharge");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetBatteryCharge, Percentage) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GetBatteryCharge::Percentage' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetBatteryCharge, Success) == 0x000004, "Member 'LowEntryExtendedStandardLibrary_GetBatteryCharge::Success' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GetBatteryState
// 0x0002 (0x0002 - 0x0000)
struct LowEntryExtendedStandardLibrary_GetBatteryState final
{
public:
	ELowEntryBatteryState                         State;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GetBatteryState) == 0x000001, "Wrong alignment on LowEntryExtendedStandardLibrary_GetBatteryState");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GetBatteryState) == 0x000002, "Wrong size on LowEntryExtendedStandardLibrary_GetBatteryState");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetBatteryState, State) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GetBatteryState::State' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetBatteryState, Success) == 0x000001, "Member 'LowEntryExtendedStandardLibrary_GetBatteryState::Success' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GetBatteryTemperature
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_GetBatteryTemperature final
{
public:
	double                                        Celsius;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BEE[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GetBatteryTemperature) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_GetBatteryTemperature");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GetBatteryTemperature) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_GetBatteryTemperature");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetBatteryTemperature, Celsius) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GetBatteryTemperature::Celsius' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetBatteryTemperature, Success) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_GetBatteryTemperature::Success' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GetByteWithBitSet
// 0x000C (0x000C - 0x0000)
struct LowEntryExtendedStandardLibrary_GetByteWithBitSet final
{
public:
	uint8                                         Byte;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BEF[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Bit;                                               // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BF0[0x2];                                     // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GetByteWithBitSet) == 0x000004, "Wrong alignment on LowEntryExtendedStandardLibrary_GetByteWithBitSet");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GetByteWithBitSet) == 0x00000C, "Wrong size on LowEntryExtendedStandardLibrary_GetByteWithBitSet");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetByteWithBitSet, Byte) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GetByteWithBitSet::Byte' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetByteWithBitSet, Bit) == 0x000004, "Member 'LowEntryExtendedStandardLibrary_GetByteWithBitSet::Bit' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetByteWithBitSet, Value) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_GetByteWithBitSet::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetByteWithBitSet, ReturnValue) == 0x000009, "Member 'LowEntryExtendedStandardLibrary_GetByteWithBitSet::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GetClassWithName
// 0x0020 (0x0020 - 0x0000)
struct LowEntryExtendedStandardLibrary_GetClassWithName final
{
public:
	class FString                                 ClassName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 Class_;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BF1[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GetClassWithName) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_GetClassWithName");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GetClassWithName) == 0x000020, "Wrong size on LowEntryExtendedStandardLibrary_GetClassWithName");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetClassWithName, ClassName) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GetClassWithName::ClassName' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetClassWithName, Class_) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_GetClassWithName::Class_' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetClassWithName, Success) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_GetClassWithName::Success' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GetCurrentVolume
// 0x0008 (0x0008 - 0x0000)
struct LowEntryExtendedStandardLibrary_GetCurrentVolume final
{
public:
	int32                                         Volume;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BF2[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GetCurrentVolume) == 0x000004, "Wrong alignment on LowEntryExtendedStandardLibrary_GetCurrentVolume");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GetCurrentVolume) == 0x000008, "Wrong size on LowEntryExtendedStandardLibrary_GetCurrentVolume");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetCurrentVolume, Volume) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GetCurrentVolume::Volume' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetCurrentVolume, Success) == 0x000004, "Member 'LowEntryExtendedStandardLibrary_GetCurrentVolume::Success' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GetCurrentVolumePercentage
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_GetCurrentVolumePercentage final
{
public:
	double                                        Percentage;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BF3[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GetCurrentVolumePercentage) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_GetCurrentVolumePercentage");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GetCurrentVolumePercentage) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_GetCurrentVolumePercentage");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetCurrentVolumePercentage, Percentage) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GetCurrentVolumePercentage::Percentage' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetCurrentVolumePercentage, Success) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_GetCurrentVolumePercentage::Success' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GetGenericTeamId
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_GetGenericTeamId final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TeamID;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BF4[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GetGenericTeamId) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_GetGenericTeamId");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GetGenericTeamId) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_GetGenericTeamId");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetGenericTeamId, Target) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GetGenericTeamId::Target' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetGenericTeamId, TeamID) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_GetGenericTeamId::TeamID' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GetKeyboardFocusedWidgetType
// 0x0008 (0x0008 - 0x0000)
struct LowEntryExtendedStandardLibrary_GetKeyboardFocusedWidgetType final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GetKeyboardFocusedWidgetType) == 0x000004, "Wrong alignment on LowEntryExtendedStandardLibrary_GetKeyboardFocusedWidgetType");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GetKeyboardFocusedWidgetType) == 0x000008, "Wrong size on LowEntryExtendedStandardLibrary_GetKeyboardFocusedWidgetType");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetKeyboardFocusedWidgetType, ReturnValue) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GetKeyboardFocusedWidgetType::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GetLocalToAbsoluteScale
// 0x0048 (0x0048 - 0x0000)
struct LowEntryExtendedStandardLibrary_GetLocalToAbsoluteScale final
{
public:
	struct FGeometry                              Geometry;                                          // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GetLocalToAbsoluteScale) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_GetLocalToAbsoluteScale");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GetLocalToAbsoluteScale) == 0x000048, "Wrong size on LowEntryExtendedStandardLibrary_GetLocalToAbsoluteScale");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetLocalToAbsoluteScale, Geometry) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GetLocalToAbsoluteScale::Geometry' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetLocalToAbsoluteScale, ReturnValue) == 0x000038, "Member 'LowEntryExtendedStandardLibrary_GetLocalToAbsoluteScale::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GetMaximumVolume
// 0x0008 (0x0008 - 0x0000)
struct LowEntryExtendedStandardLibrary_GetMaximumVolume final
{
public:
	int32                                         Volume;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BF5[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GetMaximumVolume) == 0x000004, "Wrong alignment on LowEntryExtendedStandardLibrary_GetMaximumVolume");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GetMaximumVolume) == 0x000008, "Wrong size on LowEntryExtendedStandardLibrary_GetMaximumVolume");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetMaximumVolume, Volume) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GetMaximumVolume::Volume' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetMaximumVolume, Success) == 0x000004, "Member 'LowEntryExtendedStandardLibrary_GetMaximumVolume::Success' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GetMousePosition
// 0x000C (0x000C - 0x0000)
struct LowEntryExtendedStandardLibrary_GetMousePosition final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BF6[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         X;                                                 // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GetMousePosition) == 0x000004, "Wrong alignment on LowEntryExtendedStandardLibrary_GetMousePosition");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GetMousePosition) == 0x00000C, "Wrong size on LowEntryExtendedStandardLibrary_GetMousePosition");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetMousePosition, Success) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GetMousePosition::Success' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetMousePosition, X) == 0x000004, "Member 'LowEntryExtendedStandardLibrary_GetMousePosition::X' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetMousePosition, Y) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_GetMousePosition::Y' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GetMousePositionInPercentages
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_GetMousePositionInPercentages final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BF7[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        X;                                                 // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Y;                                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GetMousePositionInPercentages) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_GetMousePositionInPercentages");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GetMousePositionInPercentages) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_GetMousePositionInPercentages");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetMousePositionInPercentages, Success) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GetMousePositionInPercentages::Success' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetMousePositionInPercentages, X) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_GetMousePositionInPercentages::X' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetMousePositionInPercentages, Y) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_GetMousePositionInPercentages::Y' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GetPrimaryMonitorResolution
// 0x0008 (0x0008 - 0x0000)
struct LowEntryExtendedStandardLibrary_GetPrimaryMonitorResolution final
{
public:
	int32                                         Width;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GetPrimaryMonitorResolution) == 0x000004, "Wrong alignment on LowEntryExtendedStandardLibrary_GetPrimaryMonitorResolution");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GetPrimaryMonitorResolution) == 0x000008, "Wrong size on LowEntryExtendedStandardLibrary_GetPrimaryMonitorResolution");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetPrimaryMonitorResolution, Width) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GetPrimaryMonitorResolution::Width' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetPrimaryMonitorResolution, Height) == 0x000004, "Member 'LowEntryExtendedStandardLibrary_GetPrimaryMonitorResolution::Height' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GetPrimaryMonitorWorkArea
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_GetPrimaryMonitorWorkArea final
{
public:
	int32                                         X;                                                 // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GetPrimaryMonitorWorkArea) == 0x000004, "Wrong alignment on LowEntryExtendedStandardLibrary_GetPrimaryMonitorWorkArea");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GetPrimaryMonitorWorkArea) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_GetPrimaryMonitorWorkArea");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetPrimaryMonitorWorkArea, X) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GetPrimaryMonitorWorkArea::X' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetPrimaryMonitorWorkArea, Y) == 0x000004, "Member 'LowEntryExtendedStandardLibrary_GetPrimaryMonitorWorkArea::Y' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetPrimaryMonitorWorkArea, Width) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_GetPrimaryMonitorWorkArea::Width' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetPrimaryMonitorWorkArea, Height) == 0x00000C, "Member 'LowEntryExtendedStandardLibrary_GetPrimaryMonitorWorkArea::Height' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GetProjectName
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_GetProjectName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GetProjectName) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_GetProjectName");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GetProjectName) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_GetProjectName");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetProjectName, ReturnValue) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GetProjectName::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GetProjectVersion
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_GetProjectVersion final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GetProjectVersion) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_GetProjectVersion");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GetProjectVersion) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_GetProjectVersion");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetProjectVersion, ReturnValue) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GetProjectVersion::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GetSplitScreenType
// 0x0001 (0x0001 - 0x0000)
struct LowEntryExtendedStandardLibrary_GetSplitScreenType final
{
public:
	ELowEntrySplitScreenType                      Type;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GetSplitScreenType) == 0x000001, "Wrong alignment on LowEntryExtendedStandardLibrary_GetSplitScreenType");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GetSplitScreenType) == 0x000001, "Wrong size on LowEntryExtendedStandardLibrary_GetSplitScreenType");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetSplitScreenType, Type) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GetSplitScreenType::Type' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GetUserFocusedWidgetType
// 0x000C (0x000C - 0x0000)
struct LowEntryExtendedStandardLibrary_GetUserFocusedWidgetType final
{
public:
	int32                                         UserIndex;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GetUserFocusedWidgetType) == 0x000004, "Wrong alignment on LowEntryExtendedStandardLibrary_GetUserFocusedWidgetType");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GetUserFocusedWidgetType) == 0x00000C, "Wrong size on LowEntryExtendedStandardLibrary_GetUserFocusedWidgetType");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetUserFocusedWidgetType, UserIndex) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GetUserFocusedWidgetType::UserIndex' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetUserFocusedWidgetType, ReturnValue) == 0x000004, "Member 'LowEntryExtendedStandardLibrary_GetUserFocusedWidgetType::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GetWindowBorderSize
// 0x0014 (0x0014 - 0x0000)
struct LowEntryExtendedStandardLibrary_GetWindowBorderSize final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BF8[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                Margin;                                            // 0x0004(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GetWindowBorderSize) == 0x000004, "Wrong alignment on LowEntryExtendedStandardLibrary_GetWindowBorderSize");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GetWindowBorderSize) == 0x000014, "Wrong size on LowEntryExtendedStandardLibrary_GetWindowBorderSize");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetWindowBorderSize, Success) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GetWindowBorderSize::Success' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetWindowBorderSize, Margin) == 0x000004, "Member 'LowEntryExtendedStandardLibrary_GetWindowBorderSize::Margin' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GetWindowBounds
// 0x0014 (0x0014 - 0x0000)
struct LowEntryExtendedStandardLibrary_GetWindowBounds final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BF9[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         X;                                                 // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GetWindowBounds) == 0x000004, "Wrong alignment on LowEntryExtendedStandardLibrary_GetWindowBounds");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GetWindowBounds) == 0x000014, "Wrong size on LowEntryExtendedStandardLibrary_GetWindowBounds");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetWindowBounds, Success) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GetWindowBounds::Success' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetWindowBounds, X) == 0x000004, "Member 'LowEntryExtendedStandardLibrary_GetWindowBounds::X' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetWindowBounds, Y) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_GetWindowBounds::Y' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetWindowBounds, Width) == 0x00000C, "Member 'LowEntryExtendedStandardLibrary_GetWindowBounds::Width' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetWindowBounds, Height) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_GetWindowBounds::Height' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GetWindowMode
// 0x0003 (0x0003 - 0x0000)
struct LowEntryExtendedStandardLibrary_GetWindowMode final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Fullscreen;                                        // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFullscreenWindowed;                              // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GetWindowMode) == 0x000001, "Wrong alignment on LowEntryExtendedStandardLibrary_GetWindowMode");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GetWindowMode) == 0x000003, "Wrong size on LowEntryExtendedStandardLibrary_GetWindowMode");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetWindowMode, Success) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GetWindowMode::Success' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetWindowMode, Fullscreen) == 0x000001, "Member 'LowEntryExtendedStandardLibrary_GetWindowMode::Fullscreen' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetWindowMode, IsFullscreenWindowed) == 0x000002, "Member 'LowEntryExtendedStandardLibrary_GetWindowMode::IsFullscreenWindowed' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GetWindowPositiomInPercentagesCentered
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_GetWindowPositiomInPercentagesCentered final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BFA[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        X;                                                 // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Y;                                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GetWindowPositiomInPercentagesCentered) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_GetWindowPositiomInPercentagesCentered");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GetWindowPositiomInPercentagesCentered) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_GetWindowPositiomInPercentagesCentered");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetWindowPositiomInPercentagesCentered, Success) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GetWindowPositiomInPercentagesCentered::Success' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetWindowPositiomInPercentagesCentered, X) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_GetWindowPositiomInPercentagesCentered::X' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetWindowPositiomInPercentagesCentered, Y) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_GetWindowPositiomInPercentagesCentered::Y' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GetWindowPosition
// 0x000C (0x000C - 0x0000)
struct LowEntryExtendedStandardLibrary_GetWindowPosition final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BFB[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         X;                                                 // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GetWindowPosition) == 0x000004, "Wrong alignment on LowEntryExtendedStandardLibrary_GetWindowPosition");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GetWindowPosition) == 0x00000C, "Wrong size on LowEntryExtendedStandardLibrary_GetWindowPosition");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetWindowPosition, Success) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GetWindowPosition::Success' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetWindowPosition, X) == 0x000004, "Member 'LowEntryExtendedStandardLibrary_GetWindowPosition::X' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetWindowPosition, Y) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_GetWindowPosition::Y' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GetWindowPositionInPercentagesCentered
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_GetWindowPositionInPercentagesCentered final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BFC[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        X;                                                 // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Y;                                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GetWindowPositionInPercentagesCentered) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_GetWindowPositionInPercentagesCentered");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GetWindowPositionInPercentagesCentered) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_GetWindowPositionInPercentagesCentered");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetWindowPositionInPercentagesCentered, Success) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GetWindowPositionInPercentagesCentered::Success' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetWindowPositionInPercentagesCentered, X) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_GetWindowPositionInPercentagesCentered::X' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetWindowPositionInPercentagesCentered, Y) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_GetWindowPositionInPercentagesCentered::Y' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GetWindowSize
// 0x000C (0x000C - 0x0000)
struct LowEntryExtendedStandardLibrary_GetWindowSize final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BFD[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Width;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GetWindowSize) == 0x000004, "Wrong alignment on LowEntryExtendedStandardLibrary_GetWindowSize");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GetWindowSize) == 0x00000C, "Wrong size on LowEntryExtendedStandardLibrary_GetWindowSize");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetWindowSize, Success) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GetWindowSize::Success' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetWindowSize, Width) == 0x000004, "Member 'LowEntryExtendedStandardLibrary_GetWindowSize::Width' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GetWindowSize, Height) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_GetWindowSize::Height' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GrayscalePixel
// 0x0008 (0x0008 - 0x0000)
struct LowEntryExtendedStandardLibrary_GrayscalePixel final
{
public:
	struct FColor                                 Pixel;                                             // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GrayscalePixel) == 0x000004, "Wrong alignment on LowEntryExtendedStandardLibrary_GrayscalePixel");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GrayscalePixel) == 0x000008, "Wrong size on LowEntryExtendedStandardLibrary_GrayscalePixel");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GrayscalePixel, Pixel) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GrayscalePixel::Pixel' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GrayscalePixel, ReturnValue) == 0x000004, "Member 'LowEntryExtendedStandardLibrary_GrayscalePixel::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GrayscalePixels
// 0x0020 (0x0020 - 0x0000)
struct LowEntryExtendedStandardLibrary_GrayscalePixels final
{
public:
	TArray<struct FColor>                         Pixel;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FColor>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GrayscalePixels) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_GrayscalePixels");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GrayscalePixels) == 0x000020, "Wrong size on LowEntryExtendedStandardLibrary_GrayscalePixels");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GrayscalePixels, Pixel) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GrayscalePixels::Pixel' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GrayscalePixels, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_GrayscalePixels::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GreaterByteFloat
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_GreaterByteFloat final
{
public:
	uint8                                         A;                                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BFE[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        B;                                                 // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BFF[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GreaterByteFloat) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_GreaterByteFloat");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GreaterByteFloat) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_GreaterByteFloat");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GreaterByteFloat, A) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GreaterByteFloat::A' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GreaterByteFloat, B) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_GreaterByteFloat::B' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GreaterByteFloat, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_GreaterByteFloat::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GreaterByteInteger
// 0x000C (0x000C - 0x0000)
struct LowEntryExtendedStandardLibrary_GreaterByteInteger final
{
public:
	uint8                                         A;                                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C00[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         B;                                                 // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C01[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GreaterByteInteger) == 0x000004, "Wrong alignment on LowEntryExtendedStandardLibrary_GreaterByteInteger");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GreaterByteInteger) == 0x00000C, "Wrong size on LowEntryExtendedStandardLibrary_GreaterByteInteger");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GreaterByteInteger, A) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GreaterByteInteger::A' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GreaterByteInteger, B) == 0x000004, "Member 'LowEntryExtendedStandardLibrary_GreaterByteInteger::B' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GreaterByteInteger, ReturnValue) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_GreaterByteInteger::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GreaterEqualByteFloat
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_GreaterEqualByteFloat final
{
public:
	uint8                                         A;                                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C02[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        B;                                                 // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C03[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GreaterEqualByteFloat) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_GreaterEqualByteFloat");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GreaterEqualByteFloat) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_GreaterEqualByteFloat");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GreaterEqualByteFloat, A) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GreaterEqualByteFloat::A' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GreaterEqualByteFloat, B) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_GreaterEqualByteFloat::B' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GreaterEqualByteFloat, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_GreaterEqualByteFloat::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GreaterEqualByteInteger
// 0x000C (0x000C - 0x0000)
struct LowEntryExtendedStandardLibrary_GreaterEqualByteInteger final
{
public:
	uint8                                         A;                                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C04[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         B;                                                 // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C05[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GreaterEqualByteInteger) == 0x000004, "Wrong alignment on LowEntryExtendedStandardLibrary_GreaterEqualByteInteger");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GreaterEqualByteInteger) == 0x00000C, "Wrong size on LowEntryExtendedStandardLibrary_GreaterEqualByteInteger");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GreaterEqualByteInteger, A) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GreaterEqualByteInteger::A' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GreaterEqualByteInteger, B) == 0x000004, "Member 'LowEntryExtendedStandardLibrary_GreaterEqualByteInteger::B' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GreaterEqualByteInteger, ReturnValue) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_GreaterEqualByteInteger::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GreaterEqualFloatByte
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_GreaterEqualFloatByte final
{
public:
	double                                        A;                                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         B;                                                 // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C06[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GreaterEqualFloatByte) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_GreaterEqualFloatByte");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GreaterEqualFloatByte) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_GreaterEqualFloatByte");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GreaterEqualFloatByte, A) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GreaterEqualFloatByte::A' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GreaterEqualFloatByte, B) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_GreaterEqualFloatByte::B' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GreaterEqualFloatByte, ReturnValue) == 0x000009, "Member 'LowEntryExtendedStandardLibrary_GreaterEqualFloatByte::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GreaterEqualFloatInteger
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_GreaterEqualFloatInteger final
{
public:
	double                                        A;                                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         B;                                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C07[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GreaterEqualFloatInteger) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_GreaterEqualFloatInteger");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GreaterEqualFloatInteger) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_GreaterEqualFloatInteger");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GreaterEqualFloatInteger, A) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GreaterEqualFloatInteger::A' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GreaterEqualFloatInteger, B) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_GreaterEqualFloatInteger::B' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GreaterEqualFloatInteger, ReturnValue) == 0x00000C, "Member 'LowEntryExtendedStandardLibrary_GreaterEqualFloatInteger::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GreaterEqualIntegerByte
// 0x0008 (0x0008 - 0x0000)
struct LowEntryExtendedStandardLibrary_GreaterEqualIntegerByte final
{
public:
	int32                                         A;                                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         B;                                                 // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C08[0x2];                                     // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GreaterEqualIntegerByte) == 0x000004, "Wrong alignment on LowEntryExtendedStandardLibrary_GreaterEqualIntegerByte");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GreaterEqualIntegerByte) == 0x000008, "Wrong size on LowEntryExtendedStandardLibrary_GreaterEqualIntegerByte");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GreaterEqualIntegerByte, A) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GreaterEqualIntegerByte::A' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GreaterEqualIntegerByte, B) == 0x000004, "Member 'LowEntryExtendedStandardLibrary_GreaterEqualIntegerByte::B' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GreaterEqualIntegerByte, ReturnValue) == 0x000005, "Member 'LowEntryExtendedStandardLibrary_GreaterEqualIntegerByte::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GreaterEqualIntegerFloat
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_GreaterEqualIntegerFloat final
{
public:
	int32                                         A;                                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C09[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        B;                                                 // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C0A[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GreaterEqualIntegerFloat) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_GreaterEqualIntegerFloat");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GreaterEqualIntegerFloat) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_GreaterEqualIntegerFloat");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GreaterEqualIntegerFloat, A) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GreaterEqualIntegerFloat::A' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GreaterEqualIntegerFloat, B) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_GreaterEqualIntegerFloat::B' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GreaterEqualIntegerFloat, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_GreaterEqualIntegerFloat::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GreaterEqualStringString
// 0x0028 (0x0028 - 0x0000)
struct LowEntryExtendedStandardLibrary_GreaterEqualStringString final
{
public:
	class FString                                 A;                                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 B;                                                 // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C0B[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GreaterEqualStringString) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_GreaterEqualStringString");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GreaterEqualStringString) == 0x000028, "Wrong size on LowEntryExtendedStandardLibrary_GreaterEqualStringString");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GreaterEqualStringString, A) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GreaterEqualStringString::A' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GreaterEqualStringString, B) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_GreaterEqualStringString::B' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GreaterEqualStringString, ReturnValue) == 0x000020, "Member 'LowEntryExtendedStandardLibrary_GreaterEqualStringString::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GreaterFloatByte
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_GreaterFloatByte final
{
public:
	double                                        A;                                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         B;                                                 // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C0C[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GreaterFloatByte) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_GreaterFloatByte");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GreaterFloatByte) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_GreaterFloatByte");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GreaterFloatByte, A) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GreaterFloatByte::A' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GreaterFloatByte, B) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_GreaterFloatByte::B' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GreaterFloatByte, ReturnValue) == 0x000009, "Member 'LowEntryExtendedStandardLibrary_GreaterFloatByte::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GreaterFloatInteger
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_GreaterFloatInteger final
{
public:
	double                                        A;                                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         B;                                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C0D[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GreaterFloatInteger) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_GreaterFloatInteger");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GreaterFloatInteger) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_GreaterFloatInteger");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GreaterFloatInteger, A) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GreaterFloatInteger::A' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GreaterFloatInteger, B) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_GreaterFloatInteger::B' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GreaterFloatInteger, ReturnValue) == 0x00000C, "Member 'LowEntryExtendedStandardLibrary_GreaterFloatInteger::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GreaterIntegerByte
// 0x0008 (0x0008 - 0x0000)
struct LowEntryExtendedStandardLibrary_GreaterIntegerByte final
{
public:
	int32                                         A;                                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         B;                                                 // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C0E[0x2];                                     // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GreaterIntegerByte) == 0x000004, "Wrong alignment on LowEntryExtendedStandardLibrary_GreaterIntegerByte");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GreaterIntegerByte) == 0x000008, "Wrong size on LowEntryExtendedStandardLibrary_GreaterIntegerByte");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GreaterIntegerByte, A) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GreaterIntegerByte::A' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GreaterIntegerByte, B) == 0x000004, "Member 'LowEntryExtendedStandardLibrary_GreaterIntegerByte::B' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GreaterIntegerByte, ReturnValue) == 0x000005, "Member 'LowEntryExtendedStandardLibrary_GreaterIntegerByte::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GreaterIntegerFloat
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_GreaterIntegerFloat final
{
public:
	int32                                         A;                                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C0F[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        B;                                                 // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C10[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GreaterIntegerFloat) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_GreaterIntegerFloat");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GreaterIntegerFloat) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_GreaterIntegerFloat");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GreaterIntegerFloat, A) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GreaterIntegerFloat::A' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GreaterIntegerFloat, B) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_GreaterIntegerFloat::B' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GreaterIntegerFloat, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_GreaterIntegerFloat::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.GreaterStringString
// 0x0028 (0x0028 - 0x0000)
struct LowEntryExtendedStandardLibrary_GreaterStringString final
{
public:
	class FString                                 A;                                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 B;                                                 // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C11[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_GreaterStringString) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_GreaterStringString");
static_assert(sizeof(LowEntryExtendedStandardLibrary_GreaterStringString) == 0x000028, "Wrong size on LowEntryExtendedStandardLibrary_GreaterStringString");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GreaterStringString, A) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_GreaterStringString::A' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GreaterStringString, B) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_GreaterStringString::B' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_GreaterStringString, ReturnValue) == 0x000020, "Member 'LowEntryExtendedStandardLibrary_GreaterStringString::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.Hashcash
// 0x0028 (0x0028 - 0x0000)
struct LowEntryExtendedStandardLibrary_Hashcash final
{
public:
	class FString                                 Resource;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Bits;                                              // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C12[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_Hashcash) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_Hashcash");
static_assert(sizeof(LowEntryExtendedStandardLibrary_Hashcash) == 0x000028, "Wrong size on LowEntryExtendedStandardLibrary_Hashcash");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Hashcash, Resource) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_Hashcash::Resource' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Hashcash, Bits) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_Hashcash::Bits' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Hashcash, ReturnValue) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_Hashcash::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.HashcashArray
// 0x0028 (0x0028 - 0x0000)
struct LowEntryExtendedStandardLibrary_HashcashArray final
{
public:
	TArray<class FString>                         Resources;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Bits;                                              // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C13[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_HashcashArray) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_HashcashArray");
static_assert(sizeof(LowEntryExtendedStandardLibrary_HashcashArray) == 0x000028, "Wrong size on LowEntryExtendedStandardLibrary_HashcashArray");
static_assert(offsetof(LowEntryExtendedStandardLibrary_HashcashArray, Resources) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_HashcashArray::Resources' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_HashcashArray, Bits) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_HashcashArray::Bits' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_HashcashArray, ReturnValue) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_HashcashArray::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.HashcashArrayCustomCreationDate
// 0x0030 (0x0030 - 0x0000)
struct LowEntryExtendedStandardLibrary_HashcashArrayCustomCreationDate final
{
public:
	TArray<class FString>                         Resources;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FDateTime                              UtcDate;                                           // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Bits;                                              // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C14[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_HashcashArrayCustomCreationDate) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_HashcashArrayCustomCreationDate");
static_assert(sizeof(LowEntryExtendedStandardLibrary_HashcashArrayCustomCreationDate) == 0x000030, "Wrong size on LowEntryExtendedStandardLibrary_HashcashArrayCustomCreationDate");
static_assert(offsetof(LowEntryExtendedStandardLibrary_HashcashArrayCustomCreationDate, Resources) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_HashcashArrayCustomCreationDate::Resources' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_HashcashArrayCustomCreationDate, UtcDate) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_HashcashArrayCustomCreationDate::UtcDate' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_HashcashArrayCustomCreationDate, Bits) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_HashcashArrayCustomCreationDate::Bits' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_HashcashArrayCustomCreationDate, ReturnValue) == 0x000020, "Member 'LowEntryExtendedStandardLibrary_HashcashArrayCustomCreationDate::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.HashcashCustomCreationDate
// 0x0030 (0x0030 - 0x0000)
struct LowEntryExtendedStandardLibrary_HashcashCustomCreationDate final
{
public:
	class FString                                 Resource;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UtcDate;                                           // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Bits;                                              // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C15[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_HashcashCustomCreationDate) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_HashcashCustomCreationDate");
static_assert(sizeof(LowEntryExtendedStandardLibrary_HashcashCustomCreationDate) == 0x000030, "Wrong size on LowEntryExtendedStandardLibrary_HashcashCustomCreationDate");
static_assert(offsetof(LowEntryExtendedStandardLibrary_HashcashCustomCreationDate, Resource) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_HashcashCustomCreationDate::Resource' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_HashcashCustomCreationDate, UtcDate) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_HashcashCustomCreationDate::UtcDate' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_HashcashCustomCreationDate, Bits) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_HashcashCustomCreationDate::Bits' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_HashcashCustomCreationDate, ReturnValue) == 0x000020, "Member 'LowEntryExtendedStandardLibrary_HashcashCustomCreationDate::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.HashcashParse
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_HashcashParse final
{
public:
	class FString                                 Hash;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULowEntryParsedHashcash*                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_HashcashParse) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_HashcashParse");
static_assert(sizeof(LowEntryExtendedStandardLibrary_HashcashParse) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_HashcashParse");
static_assert(offsetof(LowEntryExtendedStandardLibrary_HashcashParse, Hash) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_HashcashParse::Hash' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_HashcashParse, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_HashcashParse::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.HashcashParseArray
// 0x0020 (0x0020 - 0x0000)
struct LowEntryExtendedStandardLibrary_HashcashParseArray final
{
public:
	TArray<class FString>                         Hashes;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class ULowEntryParsedHashcash*>        ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_HashcashParseArray) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_HashcashParseArray");
static_assert(sizeof(LowEntryExtendedStandardLibrary_HashcashParseArray) == 0x000020, "Wrong size on LowEntryExtendedStandardLibrary_HashcashParseArray");
static_assert(offsetof(LowEntryExtendedStandardLibrary_HashcashParseArray, Hashes) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_HashcashParseArray::Hashes' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_HashcashParseArray, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_HashcashParseArray::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.HexToBytes
// 0x0020 (0x0020 - 0x0000)
struct LowEntryExtendedStandardLibrary_HexToBytes final
{
public:
	class FString                                 Hex;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_HexToBytes) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_HexToBytes");
static_assert(sizeof(LowEntryExtendedStandardLibrary_HexToBytes) == 0x000020, "Wrong size on LowEntryExtendedStandardLibrary_HexToBytes");
static_assert(offsetof(LowEntryExtendedStandardLibrary_HexToBytes, Hex) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_HexToBytes::Hex' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_HexToBytes, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_HexToBytes::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.HMAC
// 0x0040 (0x0040 - 0x0000)
struct LowEntryExtendedStandardLibrary_HMAC final
{
public:
	TArray<uint8>                                 ByteArray;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Key;                                               // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	ELowEntryHmacAlgorithm                        Algorithm;                                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C16[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param_Index;                                       // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C17[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_HMAC) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_HMAC");
static_assert(sizeof(LowEntryExtendedStandardLibrary_HMAC) == 0x000040, "Wrong size on LowEntryExtendedStandardLibrary_HMAC");
static_assert(offsetof(LowEntryExtendedStandardLibrary_HMAC, ByteArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_HMAC::ByteArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_HMAC, Key) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_HMAC::Key' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_HMAC, Algorithm) == 0x000020, "Member 'LowEntryExtendedStandardLibrary_HMAC::Algorithm' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_HMAC, Param_Index) == 0x000024, "Member 'LowEntryExtendedStandardLibrary_HMAC::Param_Index' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_HMAC, Length) == 0x000028, "Member 'LowEntryExtendedStandardLibrary_HMAC::Length' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_HMAC, ReturnValue) == 0x000030, "Member 'LowEntryExtendedStandardLibrary_HMAC::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.HostGame
// 0x0030 (0x0030 - 0x0000)
struct LowEntryExtendedStandardLibrary_HostGame final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Map;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Args;                                              // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      SpecificPlayer;                                    // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_HostGame) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_HostGame");
static_assert(sizeof(LowEntryExtendedStandardLibrary_HostGame) == 0x000030, "Wrong size on LowEntryExtendedStandardLibrary_HostGame");
static_assert(offsetof(LowEntryExtendedStandardLibrary_HostGame, WorldContextObject) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_HostGame::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_HostGame, Map) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_HostGame::Map' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_HostGame, Args) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_HostGame::Args' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_HostGame, SpecificPlayer) == 0x000028, "Member 'LowEntryExtendedStandardLibrary_HostGame::SpecificPlayer' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.Html5Platform
// 0x0001 (0x0001 - 0x0000)
struct LowEntryExtendedStandardLibrary_Html5Platform final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_Html5Platform) == 0x000001, "Wrong alignment on LowEntryExtendedStandardLibrary_Html5Platform");
static_assert(sizeof(LowEntryExtendedStandardLibrary_Html5Platform) == 0x000001, "Wrong size on LowEntryExtendedStandardLibrary_Html5Platform");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Html5Platform, ReturnValue) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_Html5Platform::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.IntegerToBytes
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_IntegerToBytes final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C18[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_IntegerToBytes) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_IntegerToBytes");
static_assert(sizeof(LowEntryExtendedStandardLibrary_IntegerToBytes) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_IntegerToBytes");
static_assert(offsetof(LowEntryExtendedStandardLibrary_IntegerToBytes, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_IntegerToBytes::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_IntegerToBytes, ReturnValue) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_IntegerToBytes::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.IosPlatform
// 0x0001 (0x0001 - 0x0000)
struct LowEntryExtendedStandardLibrary_IosPlatform final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_IosPlatform) == 0x000001, "Wrong alignment on LowEntryExtendedStandardLibrary_IosPlatform");
static_assert(sizeof(LowEntryExtendedStandardLibrary_IosPlatform) == 0x000001, "Wrong size on LowEntryExtendedStandardLibrary_IosPlatform");
static_assert(offsetof(LowEntryExtendedStandardLibrary_IosPlatform, ReturnValue) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_IosPlatform::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.IsBitSet
// 0x000C (0x000C - 0x0000)
struct LowEntryExtendedStandardLibrary_IsBitSet final
{
public:
	uint8                                         B;                                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C19[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Bit;                                               // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C1A[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_IsBitSet) == 0x000004, "Wrong alignment on LowEntryExtendedStandardLibrary_IsBitSet");
static_assert(sizeof(LowEntryExtendedStandardLibrary_IsBitSet) == 0x00000C, "Wrong size on LowEntryExtendedStandardLibrary_IsBitSet");
static_assert(offsetof(LowEntryExtendedStandardLibrary_IsBitSet, B) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_IsBitSet::B' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_IsBitSet, Bit) == 0x000004, "Member 'LowEntryExtendedStandardLibrary_IsBitSet::Bit' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_IsBitSet, ReturnValue) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_IsBitSet::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.IsWorldRenderingEnabled
// 0x0002 (0x0002 - 0x0000)
struct LowEntryExtendedStandardLibrary_IsWorldRenderingEnabled final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_IsWorldRenderingEnabled) == 0x000001, "Wrong alignment on LowEntryExtendedStandardLibrary_IsWorldRenderingEnabled");
static_assert(sizeof(LowEntryExtendedStandardLibrary_IsWorldRenderingEnabled) == 0x000002, "Wrong size on LowEntryExtendedStandardLibrary_IsWorldRenderingEnabled");
static_assert(offsetof(LowEntryExtendedStandardLibrary_IsWorldRenderingEnabled, Success) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_IsWorldRenderingEnabled::Success' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_IsWorldRenderingEnabled, Enabled) == 0x000001, "Member 'LowEntryExtendedStandardLibrary_IsWorldRenderingEnabled::Enabled' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.JoinGame
// 0x0030 (0x0030 - 0x0000)
struct LowEntryExtendedStandardLibrary_JoinGame final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerAddress;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Args;                                              // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      SpecificPlayer;                                    // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_JoinGame) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_JoinGame");
static_assert(sizeof(LowEntryExtendedStandardLibrary_JoinGame) == 0x000030, "Wrong size on LowEntryExtendedStandardLibrary_JoinGame");
static_assert(offsetof(LowEntryExtendedStandardLibrary_JoinGame, WorldContextObject) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_JoinGame::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_JoinGame, ServerAddress) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_JoinGame::ServerAddress' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_JoinGame, Args) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_JoinGame::Args' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_JoinGame, SpecificPlayer) == 0x000028, "Member 'LowEntryExtendedStandardLibrary_JoinGame::SpecificPlayer' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.LatentAction_Create_Boolean
// 0x0008 (0x0008 - 0x0000)
struct LowEntryExtendedStandardLibrary_LatentAction_Create_Boolean final
{
public:
	class ULowEntryLatentActionBoolean*           LatentAction;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_LatentAction_Create_Boolean) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_LatentAction_Create_Boolean");
static_assert(sizeof(LowEntryExtendedStandardLibrary_LatentAction_Create_Boolean) == 0x000008, "Wrong size on LowEntryExtendedStandardLibrary_LatentAction_Create_Boolean");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LatentAction_Create_Boolean, LatentAction) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_LatentAction_Create_Boolean::LatentAction' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.LatentAction_Create_Float
// 0x0008 (0x0008 - 0x0000)
struct LowEntryExtendedStandardLibrary_LatentAction_Create_Float final
{
public:
	class ULowEntryLatentActionFloat*             LatentAction;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_LatentAction_Create_Float) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_LatentAction_Create_Float");
static_assert(sizeof(LowEntryExtendedStandardLibrary_LatentAction_Create_Float) == 0x000008, "Wrong size on LowEntryExtendedStandardLibrary_LatentAction_Create_Float");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LatentAction_Create_Float, LatentAction) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_LatentAction_Create_Float::LatentAction' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.LatentAction_Create_Integer
// 0x0008 (0x0008 - 0x0000)
struct LowEntryExtendedStandardLibrary_LatentAction_Create_Integer final
{
public:
	class ULowEntryLatentActionInteger*           LatentAction;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_LatentAction_Create_Integer) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_LatentAction_Create_Integer");
static_assert(sizeof(LowEntryExtendedStandardLibrary_LatentAction_Create_Integer) == 0x000008, "Wrong size on LowEntryExtendedStandardLibrary_LatentAction_Create_Integer");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LatentAction_Create_Integer, LatentAction) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_LatentAction_Create_Integer::LatentAction' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.LatentAction_Create_None
// 0x0008 (0x0008 - 0x0000)
struct LowEntryExtendedStandardLibrary_LatentAction_Create_None final
{
public:
	class ULowEntryLatentActionNone*              LatentAction;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_LatentAction_Create_None) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_LatentAction_Create_None");
static_assert(sizeof(LowEntryExtendedStandardLibrary_LatentAction_Create_None) == 0x000008, "Wrong size on LowEntryExtendedStandardLibrary_LatentAction_Create_None");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LatentAction_Create_None, LatentAction) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_LatentAction_Create_None::LatentAction' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.LatentAction_Create_Object
// 0x0008 (0x0008 - 0x0000)
struct LowEntryExtendedStandardLibrary_LatentAction_Create_Object final
{
public:
	class ULowEntryLatentActionObject*            LatentAction;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_LatentAction_Create_Object) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_LatentAction_Create_Object");
static_assert(sizeof(LowEntryExtendedStandardLibrary_LatentAction_Create_Object) == 0x000008, "Wrong size on LowEntryExtendedStandardLibrary_LatentAction_Create_Object");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LatentAction_Create_Object, LatentAction) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_LatentAction_Create_Object::LatentAction' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.LatentAction_Create_String
// 0x0008 (0x0008 - 0x0000)
struct LowEntryExtendedStandardLibrary_LatentAction_Create_String final
{
public:
	class ULowEntryLatentActionString*            LatentAction;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_LatentAction_Create_String) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_LatentAction_Create_String");
static_assert(sizeof(LowEntryExtendedStandardLibrary_LatentAction_Create_String) == 0x000008, "Wrong size on LowEntryExtendedStandardLibrary_LatentAction_Create_String");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LatentAction_Create_String, LatentAction) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_LatentAction_Create_String::LatentAction' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.LessByteFloat
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_LessByteFloat final
{
public:
	uint8                                         A;                                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C1B[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        B;                                                 // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C1C[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_LessByteFloat) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_LessByteFloat");
static_assert(sizeof(LowEntryExtendedStandardLibrary_LessByteFloat) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_LessByteFloat");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LessByteFloat, A) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_LessByteFloat::A' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LessByteFloat, B) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_LessByteFloat::B' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LessByteFloat, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_LessByteFloat::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.LessByteInteger
// 0x000C (0x000C - 0x0000)
struct LowEntryExtendedStandardLibrary_LessByteInteger final
{
public:
	uint8                                         A;                                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C1D[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         B;                                                 // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C1E[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_LessByteInteger) == 0x000004, "Wrong alignment on LowEntryExtendedStandardLibrary_LessByteInteger");
static_assert(sizeof(LowEntryExtendedStandardLibrary_LessByteInteger) == 0x00000C, "Wrong size on LowEntryExtendedStandardLibrary_LessByteInteger");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LessByteInteger, A) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_LessByteInteger::A' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LessByteInteger, B) == 0x000004, "Member 'LowEntryExtendedStandardLibrary_LessByteInteger::B' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LessByteInteger, ReturnValue) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_LessByteInteger::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.LessEqualByteFloat
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_LessEqualByteFloat final
{
public:
	uint8                                         A;                                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C1F[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        B;                                                 // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C20[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_LessEqualByteFloat) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_LessEqualByteFloat");
static_assert(sizeof(LowEntryExtendedStandardLibrary_LessEqualByteFloat) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_LessEqualByteFloat");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LessEqualByteFloat, A) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_LessEqualByteFloat::A' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LessEqualByteFloat, B) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_LessEqualByteFloat::B' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LessEqualByteFloat, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_LessEqualByteFloat::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.LessEqualByteInteger
// 0x000C (0x000C - 0x0000)
struct LowEntryExtendedStandardLibrary_LessEqualByteInteger final
{
public:
	uint8                                         A;                                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C21[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         B;                                                 // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C22[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_LessEqualByteInteger) == 0x000004, "Wrong alignment on LowEntryExtendedStandardLibrary_LessEqualByteInteger");
static_assert(sizeof(LowEntryExtendedStandardLibrary_LessEqualByteInteger) == 0x00000C, "Wrong size on LowEntryExtendedStandardLibrary_LessEqualByteInteger");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LessEqualByteInteger, A) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_LessEqualByteInteger::A' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LessEqualByteInteger, B) == 0x000004, "Member 'LowEntryExtendedStandardLibrary_LessEqualByteInteger::B' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LessEqualByteInteger, ReturnValue) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_LessEqualByteInteger::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.LessEqualFloatByte
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_LessEqualFloatByte final
{
public:
	double                                        A;                                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         B;                                                 // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C23[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_LessEqualFloatByte) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_LessEqualFloatByte");
static_assert(sizeof(LowEntryExtendedStandardLibrary_LessEqualFloatByte) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_LessEqualFloatByte");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LessEqualFloatByte, A) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_LessEqualFloatByte::A' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LessEqualFloatByte, B) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_LessEqualFloatByte::B' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LessEqualFloatByte, ReturnValue) == 0x000009, "Member 'LowEntryExtendedStandardLibrary_LessEqualFloatByte::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.LessEqualFloatInteger
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_LessEqualFloatInteger final
{
public:
	double                                        A;                                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         B;                                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C24[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_LessEqualFloatInteger) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_LessEqualFloatInteger");
static_assert(sizeof(LowEntryExtendedStandardLibrary_LessEqualFloatInteger) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_LessEqualFloatInteger");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LessEqualFloatInteger, A) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_LessEqualFloatInteger::A' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LessEqualFloatInteger, B) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_LessEqualFloatInteger::B' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LessEqualFloatInteger, ReturnValue) == 0x00000C, "Member 'LowEntryExtendedStandardLibrary_LessEqualFloatInteger::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.LessEqualIntegerByte
// 0x0008 (0x0008 - 0x0000)
struct LowEntryExtendedStandardLibrary_LessEqualIntegerByte final
{
public:
	int32                                         A;                                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         B;                                                 // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C25[0x2];                                     // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_LessEqualIntegerByte) == 0x000004, "Wrong alignment on LowEntryExtendedStandardLibrary_LessEqualIntegerByte");
static_assert(sizeof(LowEntryExtendedStandardLibrary_LessEqualIntegerByte) == 0x000008, "Wrong size on LowEntryExtendedStandardLibrary_LessEqualIntegerByte");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LessEqualIntegerByte, A) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_LessEqualIntegerByte::A' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LessEqualIntegerByte, B) == 0x000004, "Member 'LowEntryExtendedStandardLibrary_LessEqualIntegerByte::B' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LessEqualIntegerByte, ReturnValue) == 0x000005, "Member 'LowEntryExtendedStandardLibrary_LessEqualIntegerByte::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.LessEqualIntegerFloat
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_LessEqualIntegerFloat final
{
public:
	int32                                         A;                                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C26[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        B;                                                 // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C27[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_LessEqualIntegerFloat) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_LessEqualIntegerFloat");
static_assert(sizeof(LowEntryExtendedStandardLibrary_LessEqualIntegerFloat) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_LessEqualIntegerFloat");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LessEqualIntegerFloat, A) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_LessEqualIntegerFloat::A' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LessEqualIntegerFloat, B) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_LessEqualIntegerFloat::B' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LessEqualIntegerFloat, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_LessEqualIntegerFloat::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.LessEqualStringString
// 0x0028 (0x0028 - 0x0000)
struct LowEntryExtendedStandardLibrary_LessEqualStringString final
{
public:
	class FString                                 A;                                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 B;                                                 // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C28[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_LessEqualStringString) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_LessEqualStringString");
static_assert(sizeof(LowEntryExtendedStandardLibrary_LessEqualStringString) == 0x000028, "Wrong size on LowEntryExtendedStandardLibrary_LessEqualStringString");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LessEqualStringString, A) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_LessEqualStringString::A' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LessEqualStringString, B) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_LessEqualStringString::B' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LessEqualStringString, ReturnValue) == 0x000020, "Member 'LowEntryExtendedStandardLibrary_LessEqualStringString::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.LessFloatByte
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_LessFloatByte final
{
public:
	double                                        A;                                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         B;                                                 // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C29[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_LessFloatByte) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_LessFloatByte");
static_assert(sizeof(LowEntryExtendedStandardLibrary_LessFloatByte) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_LessFloatByte");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LessFloatByte, A) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_LessFloatByte::A' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LessFloatByte, B) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_LessFloatByte::B' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LessFloatByte, ReturnValue) == 0x000009, "Member 'LowEntryExtendedStandardLibrary_LessFloatByte::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.LessFloatInteger
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_LessFloatInteger final
{
public:
	double                                        A;                                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         B;                                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C2A[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_LessFloatInteger) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_LessFloatInteger");
static_assert(sizeof(LowEntryExtendedStandardLibrary_LessFloatInteger) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_LessFloatInteger");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LessFloatInteger, A) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_LessFloatInteger::A' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LessFloatInteger, B) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_LessFloatInteger::B' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LessFloatInteger, ReturnValue) == 0x00000C, "Member 'LowEntryExtendedStandardLibrary_LessFloatInteger::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.LessIntegerByte
// 0x0008 (0x0008 - 0x0000)
struct LowEntryExtendedStandardLibrary_LessIntegerByte final
{
public:
	int32                                         A;                                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         B;                                                 // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C2B[0x2];                                     // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_LessIntegerByte) == 0x000004, "Wrong alignment on LowEntryExtendedStandardLibrary_LessIntegerByte");
static_assert(sizeof(LowEntryExtendedStandardLibrary_LessIntegerByte) == 0x000008, "Wrong size on LowEntryExtendedStandardLibrary_LessIntegerByte");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LessIntegerByte, A) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_LessIntegerByte::A' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LessIntegerByte, B) == 0x000004, "Member 'LowEntryExtendedStandardLibrary_LessIntegerByte::B' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LessIntegerByte, ReturnValue) == 0x000005, "Member 'LowEntryExtendedStandardLibrary_LessIntegerByte::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.LessIntegerFloat
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_LessIntegerFloat final
{
public:
	int32                                         A;                                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C2C[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        B;                                                 // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C2D[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_LessIntegerFloat) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_LessIntegerFloat");
static_assert(sizeof(LowEntryExtendedStandardLibrary_LessIntegerFloat) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_LessIntegerFloat");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LessIntegerFloat, A) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_LessIntegerFloat::A' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LessIntegerFloat, B) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_LessIntegerFloat::B' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LessIntegerFloat, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_LessIntegerFloat::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.LessStringString
// 0x0028 (0x0028 - 0x0000)
struct LowEntryExtendedStandardLibrary_LessStringString final
{
public:
	class FString                                 A;                                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 B;                                                 // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C2E[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_LessStringString) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_LessStringString");
static_assert(sizeof(LowEntryExtendedStandardLibrary_LessStringString) == 0x000028, "Wrong size on LowEntryExtendedStandardLibrary_LessStringString");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LessStringString, A) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_LessStringString::A' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LessStringString, B) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_LessStringString::B' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LessStringString, ReturnValue) == 0x000020, "Member 'LowEntryExtendedStandardLibrary_LessStringString::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.LinuxPlatform
// 0x0001 (0x0001 - 0x0000)
struct LowEntryExtendedStandardLibrary_LinuxPlatform final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_LinuxPlatform) == 0x000001, "Wrong alignment on LowEntryExtendedStandardLibrary_LinuxPlatform");
static_assert(sizeof(LowEntryExtendedStandardLibrary_LinuxPlatform) == 0x000001, "Wrong size on LowEntryExtendedStandardLibrary_LinuxPlatform");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LinuxPlatform, ReturnValue) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_LinuxPlatform::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.LoadVideo
// 0x0038 (0x0038 - 0x0000)
struct LowEntryExtendedStandardLibrary_LoadVideo final
{
public:
	class UMediaSoundComponent*                   MediaSoundComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 URL;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C2F[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMediaPlayer*                           MediaPlayer;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMediaTexture*                          MediaTexture;                                      // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayOnOpen;                                        // 0x0030(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Loop;                                              // 0x0031(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C30[0x6];                                     // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_LoadVideo) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_LoadVideo");
static_assert(sizeof(LowEntryExtendedStandardLibrary_LoadVideo) == 0x000038, "Wrong size on LowEntryExtendedStandardLibrary_LoadVideo");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LoadVideo, MediaSoundComponent) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_LoadVideo::MediaSoundComponent' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LoadVideo, URL) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_LoadVideo::URL' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LoadVideo, Success) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_LoadVideo::Success' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LoadVideo, MediaPlayer) == 0x000020, "Member 'LowEntryExtendedStandardLibrary_LoadVideo::MediaPlayer' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LoadVideo, MediaTexture) == 0x000028, "Member 'LowEntryExtendedStandardLibrary_LoadVideo::MediaTexture' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LoadVideo, PlayOnOpen) == 0x000030, "Member 'LowEntryExtendedStandardLibrary_LoadVideo::PlayOnOpen' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LoadVideo, Loop) == 0x000031, "Member 'LowEntryExtendedStandardLibrary_LoadVideo::Loop' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.Long_Create
// 0x0020 (0x0020 - 0x0000)
struct LowEntryExtendedStandardLibrary_Long_Create final
{
public:
	TArray<uint8>                                 ByteArray;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULowEntryLong*                          ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_Long_Create) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_Long_Create");
static_assert(sizeof(LowEntryExtendedStandardLibrary_Long_Create) == 0x000020, "Wrong size on LowEntryExtendedStandardLibrary_Long_Create");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Long_Create, ByteArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_Long_Create::ByteArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Long_Create, Param_Index) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_Long_Create::Param_Index' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Long_Create, Length) == 0x000014, "Member 'LowEntryExtendedStandardLibrary_Long_Create::Length' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Long_Create, ReturnValue) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_Long_Create::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.Long_CreateZero
// 0x0008 (0x0008 - 0x0000)
struct LowEntryExtendedStandardLibrary_Long_CreateZero final
{
public:
	class ULowEntryLong*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_Long_CreateZero) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_Long_CreateZero");
static_assert(sizeof(LowEntryExtendedStandardLibrary_Long_CreateZero) == 0x000008, "Wrong size on LowEntryExtendedStandardLibrary_Long_CreateZero");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Long_CreateZero, ReturnValue) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_Long_CreateZero::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.LongToBytes
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_LongToBytes final
{
public:
	int64                                         Value;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_LongToBytes) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_LongToBytes");
static_assert(sizeof(LowEntryExtendedStandardLibrary_LongToBytes) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_LongToBytes");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LongToBytes, Value) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_LongToBytes::Value' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_LongToBytes, ReturnValue) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_LongToBytes::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.MacPlatform
// 0x0001 (0x0001 - 0x0000)
struct LowEntryExtendedStandardLibrary_MacPlatform final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_MacPlatform) == 0x000001, "Wrong alignment on LowEntryExtendedStandardLibrary_MacPlatform");
static_assert(sizeof(LowEntryExtendedStandardLibrary_MacPlatform) == 0x000001, "Wrong size on LowEntryExtendedStandardLibrary_MacPlatform");
static_assert(offsetof(LowEntryExtendedStandardLibrary_MacPlatform, ReturnValue) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_MacPlatform::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.MaxOfDateTimeArray
// 0x0020 (0x0020 - 0x0000)
struct LowEntryExtendedStandardLibrary_MaxOfDateTimeArray final
{
public:
	TArray<struct FDateTime>                      DateTimeArray;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         IndexOfMaxValue;                                   // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C31[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              MaxValue;                                          // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_MaxOfDateTimeArray) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_MaxOfDateTimeArray");
static_assert(sizeof(LowEntryExtendedStandardLibrary_MaxOfDateTimeArray) == 0x000020, "Wrong size on LowEntryExtendedStandardLibrary_MaxOfDateTimeArray");
static_assert(offsetof(LowEntryExtendedStandardLibrary_MaxOfDateTimeArray, DateTimeArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_MaxOfDateTimeArray::DateTimeArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_MaxOfDateTimeArray, IndexOfMaxValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_MaxOfDateTimeArray::IndexOfMaxValue' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_MaxOfDateTimeArray, MaxValue) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_MaxOfDateTimeArray::MaxValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.MaxOfStringArray
// 0x0028 (0x0028 - 0x0000)
struct LowEntryExtendedStandardLibrary_MaxOfStringArray final
{
public:
	TArray<class FString>                         StringArray;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         IndexOfMaxValue;                                   // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C32[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MaxValue;                                          // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_MaxOfStringArray) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_MaxOfStringArray");
static_assert(sizeof(LowEntryExtendedStandardLibrary_MaxOfStringArray) == 0x000028, "Wrong size on LowEntryExtendedStandardLibrary_MaxOfStringArray");
static_assert(offsetof(LowEntryExtendedStandardLibrary_MaxOfStringArray, StringArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_MaxOfStringArray::StringArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_MaxOfStringArray, IndexOfMaxValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_MaxOfStringArray::IndexOfMaxValue' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_MaxOfStringArray, MaxValue) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_MaxOfStringArray::MaxValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.MaxOfTimespanArray
// 0x0020 (0x0020 - 0x0000)
struct LowEntryExtendedStandardLibrary_MaxOfTimespanArray final
{
public:
	TArray<struct FTimespan>                      TimespanArray;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         IndexOfMaxValue;                                   // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C33[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              MaxValue;                                          // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_MaxOfTimespanArray) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_MaxOfTimespanArray");
static_assert(sizeof(LowEntryExtendedStandardLibrary_MaxOfTimespanArray) == 0x000020, "Wrong size on LowEntryExtendedStandardLibrary_MaxOfTimespanArray");
static_assert(offsetof(LowEntryExtendedStandardLibrary_MaxOfTimespanArray, TimespanArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_MaxOfTimespanArray::TimespanArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_MaxOfTimespanArray, IndexOfMaxValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_MaxOfTimespanArray::IndexOfMaxValue' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_MaxOfTimespanArray, MaxValue) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_MaxOfTimespanArray::MaxValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.MaxString
// 0x0030 (0x0030 - 0x0000)
struct LowEntryExtendedStandardLibrary_MaxString final
{
public:
	class FString                                 A;                                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 B;                                                 // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_MaxString) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_MaxString");
static_assert(sizeof(LowEntryExtendedStandardLibrary_MaxString) == 0x000030, "Wrong size on LowEntryExtendedStandardLibrary_MaxString");
static_assert(offsetof(LowEntryExtendedStandardLibrary_MaxString, A) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_MaxString::A' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_MaxString, B) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_MaxString::B' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_MaxString, ReturnValue) == 0x000020, "Member 'LowEntryExtendedStandardLibrary_MaxString::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.Md5
// 0x0028 (0x0028 - 0x0000)
struct LowEntryExtendedStandardLibrary_Md5 final
{
public:
	TArray<uint8>                                 ByteArray;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_Md5) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_Md5");
static_assert(sizeof(LowEntryExtendedStandardLibrary_Md5) == 0x000028, "Wrong size on LowEntryExtendedStandardLibrary_Md5");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Md5, ByteArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_Md5::ByteArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Md5, Param_Index) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_Md5::Param_Index' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Md5, Length) == 0x000014, "Member 'LowEntryExtendedStandardLibrary_Md5::Length' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Md5, ReturnValue) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_Md5::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.MergeBytes
// 0x0030 (0x0030 - 0x0000)
struct LowEntryExtendedStandardLibrary_MergeBytes final
{
public:
	TArray<uint8>                                 A;                                                 // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 B;                                                 // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_MergeBytes) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_MergeBytes");
static_assert(sizeof(LowEntryExtendedStandardLibrary_MergeBytes) == 0x000030, "Wrong size on LowEntryExtendedStandardLibrary_MergeBytes");
static_assert(offsetof(LowEntryExtendedStandardLibrary_MergeBytes, A) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_MergeBytes::A' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_MergeBytes, B) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_MergeBytes::B' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_MergeBytes, ReturnValue) == 0x000020, "Member 'LowEntryExtendedStandardLibrary_MergeBytes::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.MergeEncapsulatedByteArrays
// 0x0020 (0x0020 - 0x0000)
struct LowEntryExtendedStandardLibrary_MergeEncapsulatedByteArrays final
{
public:
	TArray<class ULowEntryByteArray*>             ByteArrays;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_MergeEncapsulatedByteArrays) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_MergeEncapsulatedByteArrays");
static_assert(sizeof(LowEntryExtendedStandardLibrary_MergeEncapsulatedByteArrays) == 0x000020, "Wrong size on LowEntryExtendedStandardLibrary_MergeEncapsulatedByteArrays");
static_assert(offsetof(LowEntryExtendedStandardLibrary_MergeEncapsulatedByteArrays, ByteArrays) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_MergeEncapsulatedByteArrays::ByteArrays' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_MergeEncapsulatedByteArrays, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_MergeEncapsulatedByteArrays::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.MinOfDateTimeArray
// 0x0020 (0x0020 - 0x0000)
struct LowEntryExtendedStandardLibrary_MinOfDateTimeArray final
{
public:
	TArray<struct FDateTime>                      DateTimeArray;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         IndexOfMinValue;                                   // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C34[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              MinValue;                                          // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_MinOfDateTimeArray) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_MinOfDateTimeArray");
static_assert(sizeof(LowEntryExtendedStandardLibrary_MinOfDateTimeArray) == 0x000020, "Wrong size on LowEntryExtendedStandardLibrary_MinOfDateTimeArray");
static_assert(offsetof(LowEntryExtendedStandardLibrary_MinOfDateTimeArray, DateTimeArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_MinOfDateTimeArray::DateTimeArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_MinOfDateTimeArray, IndexOfMinValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_MinOfDateTimeArray::IndexOfMinValue' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_MinOfDateTimeArray, MinValue) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_MinOfDateTimeArray::MinValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.MinOfStringArray
// 0x0028 (0x0028 - 0x0000)
struct LowEntryExtendedStandardLibrary_MinOfStringArray final
{
public:
	TArray<class FString>                         StringArray;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         IndexOfMinValue;                                   // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C35[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MinValue;                                          // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_MinOfStringArray) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_MinOfStringArray");
static_assert(sizeof(LowEntryExtendedStandardLibrary_MinOfStringArray) == 0x000028, "Wrong size on LowEntryExtendedStandardLibrary_MinOfStringArray");
static_assert(offsetof(LowEntryExtendedStandardLibrary_MinOfStringArray, StringArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_MinOfStringArray::StringArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_MinOfStringArray, IndexOfMinValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_MinOfStringArray::IndexOfMinValue' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_MinOfStringArray, MinValue) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_MinOfStringArray::MinValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.MinOfTimespanArray
// 0x0020 (0x0020 - 0x0000)
struct LowEntryExtendedStandardLibrary_MinOfTimespanArray final
{
public:
	TArray<struct FTimespan>                      TimespanArray;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         IndexOfMinValue;                                   // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C36[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              MinValue;                                          // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_MinOfTimespanArray) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_MinOfTimespanArray");
static_assert(sizeof(LowEntryExtendedStandardLibrary_MinOfTimespanArray) == 0x000020, "Wrong size on LowEntryExtendedStandardLibrary_MinOfTimespanArray");
static_assert(offsetof(LowEntryExtendedStandardLibrary_MinOfTimespanArray, TimespanArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_MinOfTimespanArray::TimespanArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_MinOfTimespanArray, IndexOfMinValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_MinOfTimespanArray::IndexOfMinValue' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_MinOfTimespanArray, MinValue) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_MinOfTimespanArray::MinValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.MinString
// 0x0030 (0x0030 - 0x0000)
struct LowEntryExtendedStandardLibrary_MinString final
{
public:
	class FString                                 A;                                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 B;                                                 // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_MinString) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_MinString");
static_assert(sizeof(LowEntryExtendedStandardLibrary_MinString) == 0x000030, "Wrong size on LowEntryExtendedStandardLibrary_MinString");
static_assert(offsetof(LowEntryExtendedStandardLibrary_MinString, A) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_MinString::A' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_MinString, B) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_MinString::B' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_MinString, ReturnValue) == 0x000020, "Member 'LowEntryExtendedStandardLibrary_MinString::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.NewlineCharacter
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_NewlineCharacter final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_NewlineCharacter) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_NewlineCharacter");
static_assert(sizeof(LowEntryExtendedStandardLibrary_NewlineCharacter) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_NewlineCharacter");
static_assert(offsetof(LowEntryExtendedStandardLibrary_NewlineCharacter, ReturnValue) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_NewlineCharacter::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.NextQueueExecution
// 0x0008 (0x0008 - 0x0000)
struct LowEntryExtendedStandardLibrary_NextQueueExecution final
{
public:
	class ULowEntryExecutionQueue*                Queue;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_NextQueueExecution) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_NextQueueExecution");
static_assert(sizeof(LowEntryExtendedStandardLibrary_NextQueueExecution) == 0x000008, "Wrong size on LowEntryExtendedStandardLibrary_NextQueueExecution");
static_assert(offsetof(LowEntryExtendedStandardLibrary_NextQueueExecution, Queue) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_NextQueueExecution::Queue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.ParsedHashcashIsValid
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_ParsedHashcashIsValid final
{
public:
	class ULowEntryParsedHashcash*                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C37[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_ParsedHashcashIsValid) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_ParsedHashcashIsValid");
static_assert(sizeof(LowEntryExtendedStandardLibrary_ParsedHashcashIsValid) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_ParsedHashcashIsValid");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ParsedHashcashIsValid, Target) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_ParsedHashcashIsValid::Target' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ParsedHashcashIsValid, ReturnValue) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_ParsedHashcashIsValid::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.ParseStringIntoDoubleBytes
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_ParseStringIntoDoubleBytes final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULowEntryDouble*                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_ParseStringIntoDoubleBytes) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_ParseStringIntoDoubleBytes");
static_assert(sizeof(LowEntryExtendedStandardLibrary_ParseStringIntoDoubleBytes) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_ParseStringIntoDoubleBytes");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ParseStringIntoDoubleBytes, String) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_ParseStringIntoDoubleBytes::String' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ParseStringIntoDoubleBytes, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_ParseStringIntoDoubleBytes::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.ParseStringIntoLong
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_ParseStringIntoLong final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_ParseStringIntoLong) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_ParseStringIntoLong");
static_assert(sizeof(LowEntryExtendedStandardLibrary_ParseStringIntoLong) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_ParseStringIntoLong");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ParseStringIntoLong, String) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_ParseStringIntoLong::String' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ParseStringIntoLong, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_ParseStringIntoLong::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.ParseStringIntoLongBytes
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_ParseStringIntoLongBytes final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULowEntryLong*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_ParseStringIntoLongBytes) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_ParseStringIntoLongBytes");
static_assert(sizeof(LowEntryExtendedStandardLibrary_ParseStringIntoLongBytes) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_ParseStringIntoLongBytes");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ParseStringIntoLongBytes, String) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_ParseStringIntoLongBytes::String' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ParseStringIntoLongBytes, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_ParseStringIntoLongBytes::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.Pearson
// 0x0030 (0x0030 - 0x0000)
struct LowEntryExtendedStandardLibrary_Pearson final
{
public:
	TArray<uint8>                                 ByteArray;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         HashLength;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C38[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_Pearson) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_Pearson");
static_assert(sizeof(LowEntryExtendedStandardLibrary_Pearson) == 0x000030, "Wrong size on LowEntryExtendedStandardLibrary_Pearson");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Pearson, ByteArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_Pearson::ByteArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Pearson, HashLength) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_Pearson::HashLength' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Pearson, Param_Index) == 0x000014, "Member 'LowEntryExtendedStandardLibrary_Pearson::Param_Index' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Pearson, Length) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_Pearson::Length' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Pearson, ReturnValue) == 0x000020, "Member 'LowEntryExtendedStandardLibrary_Pearson::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.PixelsToBytes
// 0x0038 (0x0038 - 0x0000)
struct LowEntryExtendedStandardLibrary_PixelsToBytes final
{
public:
	int32                                         Width;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FColor>                         Pixels;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	ELowEntryImageFormat                          ImageFormat;                                       // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C39[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ByteArray;                                         // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CompressionQuality;                                // 0x0030(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C3A[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_PixelsToBytes) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_PixelsToBytes");
static_assert(sizeof(LowEntryExtendedStandardLibrary_PixelsToBytes) == 0x000038, "Wrong size on LowEntryExtendedStandardLibrary_PixelsToBytes");
static_assert(offsetof(LowEntryExtendedStandardLibrary_PixelsToBytes, Width) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_PixelsToBytes::Width' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_PixelsToBytes, Height) == 0x000004, "Member 'LowEntryExtendedStandardLibrary_PixelsToBytes::Height' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_PixelsToBytes, Pixels) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_PixelsToBytes::Pixels' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_PixelsToBytes, ImageFormat) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_PixelsToBytes::ImageFormat' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_PixelsToBytes, ByteArray) == 0x000020, "Member 'LowEntryExtendedStandardLibrary_PixelsToBytes::ByteArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_PixelsToBytes, CompressionQuality) == 0x000030, "Member 'LowEntryExtendedStandardLibrary_PixelsToBytes::CompressionQuality' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.PixelsToExistingTexture2D
// 0x0030 (0x0030 - 0x0000)
struct LowEntryExtendedStandardLibrary_PixelsToExistingTexture2D final
{
public:
	bool                                          ReusedGivenTexture2D;                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C3B[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Texture2D;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FColor>                         Pixels;                                            // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_PixelsToExistingTexture2D) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_PixelsToExistingTexture2D");
static_assert(sizeof(LowEntryExtendedStandardLibrary_PixelsToExistingTexture2D) == 0x000030, "Wrong size on LowEntryExtendedStandardLibrary_PixelsToExistingTexture2D");
static_assert(offsetof(LowEntryExtendedStandardLibrary_PixelsToExistingTexture2D, ReusedGivenTexture2D) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_PixelsToExistingTexture2D::ReusedGivenTexture2D' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_PixelsToExistingTexture2D, Texture2D) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_PixelsToExistingTexture2D::Texture2D' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_PixelsToExistingTexture2D, Width) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_PixelsToExistingTexture2D::Width' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_PixelsToExistingTexture2D, Height) == 0x000014, "Member 'LowEntryExtendedStandardLibrary_PixelsToExistingTexture2D::Height' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_PixelsToExistingTexture2D, Pixels) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_PixelsToExistingTexture2D::Pixels' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_PixelsToExistingTexture2D, ReturnValue) == 0x000028, "Member 'LowEntryExtendedStandardLibrary_PixelsToExistingTexture2D::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.PixelsToTexture2D
// 0x0020 (0x0020 - 0x0000)
struct LowEntryExtendedStandardLibrary_PixelsToTexture2D final
{
public:
	int32                                         Width;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FColor>                         Pixels;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_PixelsToTexture2D) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_PixelsToTexture2D");
static_assert(sizeof(LowEntryExtendedStandardLibrary_PixelsToTexture2D) == 0x000020, "Wrong size on LowEntryExtendedStandardLibrary_PixelsToTexture2D");
static_assert(offsetof(LowEntryExtendedStandardLibrary_PixelsToTexture2D, Width) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_PixelsToTexture2D::Width' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_PixelsToTexture2D, Height) == 0x000004, "Member 'LowEntryExtendedStandardLibrary_PixelsToTexture2D::Height' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_PixelsToTexture2D, Pixels) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_PixelsToTexture2D::Pixels' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_PixelsToTexture2D, ReturnValue) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_PixelsToTexture2D::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.PlayerControllerGetLocalPlayer
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_PlayerControllerGetLocalPlayer final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C3C[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULocalPlayer*                           LocalPlayer;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_PlayerControllerGetLocalPlayer) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_PlayerControllerGetLocalPlayer");
static_assert(sizeof(LowEntryExtendedStandardLibrary_PlayerControllerGetLocalPlayer) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_PlayerControllerGetLocalPlayer");
static_assert(offsetof(LowEntryExtendedStandardLibrary_PlayerControllerGetLocalPlayer, PlayerController) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_PlayerControllerGetLocalPlayer::PlayerController' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_PlayerControllerGetLocalPlayer, Success) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_PlayerControllerGetLocalPlayer::Success' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_PlayerControllerGetLocalPlayer, LocalPlayer) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_PlayerControllerGetLocalPlayer::LocalPlayer' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.Ps4Platform
// 0x0001 (0x0001 - 0x0000)
struct LowEntryExtendedStandardLibrary_Ps4Platform final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_Ps4Platform) == 0x000001, "Wrong alignment on LowEntryExtendedStandardLibrary_Ps4Platform");
static_assert(sizeof(LowEntryExtendedStandardLibrary_Ps4Platform) == 0x000001, "Wrong size on LowEntryExtendedStandardLibrary_Ps4Platform");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Ps4Platform, ReturnValue) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_Ps4Platform::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.QueueExecutions
// 0x0028 (0x0028 - 0x0000)
struct LowEntryExtendedStandardLibrary_QueueExecutions final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULowEntryExecutionQueue*                Queue;                                             // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_QueueExecutions) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_QueueExecutions");
static_assert(sizeof(LowEntryExtendedStandardLibrary_QueueExecutions) == 0x000028, "Wrong size on LowEntryExtendedStandardLibrary_QueueExecutions");
static_assert(offsetof(LowEntryExtendedStandardLibrary_QueueExecutions, WorldContextObject) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_QueueExecutions::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_QueueExecutions, Queue) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_QueueExecutions::Queue' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_QueueExecutions, LatentInfo) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_QueueExecutions::LatentInfo' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.RandomDelay
// 0x0030 (0x0030 - 0x0000)
struct LowEntryExtendedStandardLibrary_RandomDelay final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MinDuration;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MaxDuration;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0018(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_RandomDelay) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_RandomDelay");
static_assert(sizeof(LowEntryExtendedStandardLibrary_RandomDelay) == 0x000030, "Wrong size on LowEntryExtendedStandardLibrary_RandomDelay");
static_assert(offsetof(LowEntryExtendedStandardLibrary_RandomDelay, WorldContextObject) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_RandomDelay::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_RandomDelay, MinDuration) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_RandomDelay::MinDuration' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_RandomDelay, MaxDuration) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_RandomDelay::MaxDuration' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_RandomDelay, LatentInfo) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_RandomDelay::LatentInfo' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.RandomDelayFrames
// 0x0028 (0x0028 - 0x0000)
struct LowEntryExtendedStandardLibrary_RandomDelayFrames final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinFrames;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxFrames;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_RandomDelayFrames) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_RandomDelayFrames");
static_assert(sizeof(LowEntryExtendedStandardLibrary_RandomDelayFrames) == 0x000028, "Wrong size on LowEntryExtendedStandardLibrary_RandomDelayFrames");
static_assert(offsetof(LowEntryExtendedStandardLibrary_RandomDelayFrames, WorldContextObject) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_RandomDelayFrames::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_RandomDelayFrames, MinFrames) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_RandomDelayFrames::MinFrames' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_RandomDelayFrames, MaxFrames) == 0x00000C, "Member 'LowEntryExtendedStandardLibrary_RandomDelayFrames::MaxFrames' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_RandomDelayFrames, LatentInfo) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_RandomDelayFrames::LatentInfo' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.RegexCount
// 0x0028 (0x0028 - 0x0000)
struct LowEntryExtendedStandardLibrary_RegexCount final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Pattern;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C3D[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_RegexCount) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_RegexCount");
static_assert(sizeof(LowEntryExtendedStandardLibrary_RegexCount) == 0x000028, "Wrong size on LowEntryExtendedStandardLibrary_RegexCount");
static_assert(offsetof(LowEntryExtendedStandardLibrary_RegexCount, String) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_RegexCount::String' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_RegexCount, Pattern) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_RegexCount::Pattern' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_RegexCount, ReturnValue) == 0x000020, "Member 'LowEntryExtendedStandardLibrary_RegexCount::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.RegexGetMatches
// 0x0030 (0x0030 - 0x0000)
struct LowEntryExtendedStandardLibrary_RegexGetMatches final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Pattern;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLowEntryRegexMatch>            ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_RegexGetMatches) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_RegexGetMatches");
static_assert(sizeof(LowEntryExtendedStandardLibrary_RegexGetMatches) == 0x000030, "Wrong size on LowEntryExtendedStandardLibrary_RegexGetMatches");
static_assert(offsetof(LowEntryExtendedStandardLibrary_RegexGetMatches, String) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_RegexGetMatches::String' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_RegexGetMatches, Pattern) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_RegexGetMatches::Pattern' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_RegexGetMatches, ReturnValue) == 0x000020, "Member 'LowEntryExtendedStandardLibrary_RegexGetMatches::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.RegexMatch
// 0x0028 (0x0028 - 0x0000)
struct LowEntryExtendedStandardLibrary_RegexMatch final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Pattern;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C3E[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_RegexMatch) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_RegexMatch");
static_assert(sizeof(LowEntryExtendedStandardLibrary_RegexMatch) == 0x000028, "Wrong size on LowEntryExtendedStandardLibrary_RegexMatch");
static_assert(offsetof(LowEntryExtendedStandardLibrary_RegexMatch, String) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_RegexMatch::String' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_RegexMatch, Pattern) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_RegexMatch::Pattern' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_RegexMatch, ReturnValue) == 0x000020, "Member 'LowEntryExtendedStandardLibrary_RegexMatch::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.RegexReplace
// 0x0040 (0x0040 - 0x0000)
struct LowEntryExtendedStandardLibrary_RegexReplace final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Pattern;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Replacement;                                       // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_RegexReplace) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_RegexReplace");
static_assert(sizeof(LowEntryExtendedStandardLibrary_RegexReplace) == 0x000040, "Wrong size on LowEntryExtendedStandardLibrary_RegexReplace");
static_assert(offsetof(LowEntryExtendedStandardLibrary_RegexReplace, String) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_RegexReplace::String' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_RegexReplace, Pattern) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_RegexReplace::Pattern' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_RegexReplace, Replacement) == 0x000020, "Member 'LowEntryExtendedStandardLibrary_RegexReplace::Replacement' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_RegexReplace, ReturnValue) == 0x000030, "Member 'LowEntryExtendedStandardLibrary_RegexReplace::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.RemoveCharactersExcept
// 0x0038 (0x0038 - 0x0000)
struct LowEntryExtendedStandardLibrary_RemoveCharactersExcept final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KeepLowercaseAZ;                                   // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KeepUppercaseAZ;                                   // 0x0011(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KeepNumbers;                                       // 0x0012(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C3F[0x5];                                     // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OtherCharactersToKeep;                             // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_RemoveCharactersExcept) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_RemoveCharactersExcept");
static_assert(sizeof(LowEntryExtendedStandardLibrary_RemoveCharactersExcept) == 0x000038, "Wrong size on LowEntryExtendedStandardLibrary_RemoveCharactersExcept");
static_assert(offsetof(LowEntryExtendedStandardLibrary_RemoveCharactersExcept, String) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_RemoveCharactersExcept::String' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_RemoveCharactersExcept, KeepLowercaseAZ) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_RemoveCharactersExcept::KeepLowercaseAZ' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_RemoveCharactersExcept, KeepUppercaseAZ) == 0x000011, "Member 'LowEntryExtendedStandardLibrary_RemoveCharactersExcept::KeepUppercaseAZ' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_RemoveCharactersExcept, KeepNumbers) == 0x000012, "Member 'LowEntryExtendedStandardLibrary_RemoveCharactersExcept::KeepNumbers' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_RemoveCharactersExcept, OtherCharactersToKeep) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_RemoveCharactersExcept::OtherCharactersToKeep' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_RemoveCharactersExcept, ReturnValue) == 0x000028, "Member 'LowEntryExtendedStandardLibrary_RemoveCharactersExcept::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.ReplaceCharactersExcept
// 0x0048 (0x0048 - 0x0000)
struct LowEntryExtendedStandardLibrary_ReplaceCharactersExcept final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReplacementCharacter;                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KeepLowercaseAZ;                                   // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KeepUppercaseAZ;                                   // 0x0021(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KeepNumbers;                                       // 0x0022(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C40[0x5];                                     // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OtherCharactersToKeep;                             // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_ReplaceCharactersExcept) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_ReplaceCharactersExcept");
static_assert(sizeof(LowEntryExtendedStandardLibrary_ReplaceCharactersExcept) == 0x000048, "Wrong size on LowEntryExtendedStandardLibrary_ReplaceCharactersExcept");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ReplaceCharactersExcept, String) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_ReplaceCharactersExcept::String' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ReplaceCharactersExcept, ReplacementCharacter) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_ReplaceCharactersExcept::ReplacementCharacter' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ReplaceCharactersExcept, KeepLowercaseAZ) == 0x000020, "Member 'LowEntryExtendedStandardLibrary_ReplaceCharactersExcept::KeepLowercaseAZ' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ReplaceCharactersExcept, KeepUppercaseAZ) == 0x000021, "Member 'LowEntryExtendedStandardLibrary_ReplaceCharactersExcept::KeepUppercaseAZ' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ReplaceCharactersExcept, KeepNumbers) == 0x000022, "Member 'LowEntryExtendedStandardLibrary_ReplaceCharactersExcept::KeepNumbers' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ReplaceCharactersExcept, OtherCharactersToKeep) == 0x000028, "Member 'LowEntryExtendedStandardLibrary_ReplaceCharactersExcept::OtherCharactersToKeep' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ReplaceCharactersExcept, ReturnValue) == 0x000038, "Member 'LowEntryExtendedStandardLibrary_ReplaceCharactersExcept::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.RetriggerableDelayFrames
// 0x0028 (0x0028 - 0x0000)
struct LowEntryExtendedStandardLibrary_RetriggerableDelayFrames final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Frames;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C41[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_RetriggerableDelayFrames) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_RetriggerableDelayFrames");
static_assert(sizeof(LowEntryExtendedStandardLibrary_RetriggerableDelayFrames) == 0x000028, "Wrong size on LowEntryExtendedStandardLibrary_RetriggerableDelayFrames");
static_assert(offsetof(LowEntryExtendedStandardLibrary_RetriggerableDelayFrames, WorldContextObject) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_RetriggerableDelayFrames::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_RetriggerableDelayFrames, Frames) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_RetriggerableDelayFrames::Frames' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_RetriggerableDelayFrames, LatentInfo) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_RetriggerableDelayFrames::LatentInfo' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.RetriggerableRandomDelay
// 0x0030 (0x0030 - 0x0000)
struct LowEntryExtendedStandardLibrary_RetriggerableRandomDelay final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MinDuration;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MaxDuration;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0018(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_RetriggerableRandomDelay) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_RetriggerableRandomDelay");
static_assert(sizeof(LowEntryExtendedStandardLibrary_RetriggerableRandomDelay) == 0x000030, "Wrong size on LowEntryExtendedStandardLibrary_RetriggerableRandomDelay");
static_assert(offsetof(LowEntryExtendedStandardLibrary_RetriggerableRandomDelay, WorldContextObject) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_RetriggerableRandomDelay::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_RetriggerableRandomDelay, MinDuration) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_RetriggerableRandomDelay::MinDuration' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_RetriggerableRandomDelay, MaxDuration) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_RetriggerableRandomDelay::MaxDuration' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_RetriggerableRandomDelay, LatentInfo) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_RetriggerableRandomDelay::LatentInfo' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.RetriggerableRandomDelayFrames
// 0x0028 (0x0028 - 0x0000)
struct LowEntryExtendedStandardLibrary_RetriggerableRandomDelayFrames final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinFrames;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxFrames;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_RetriggerableRandomDelayFrames) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_RetriggerableRandomDelayFrames");
static_assert(sizeof(LowEntryExtendedStandardLibrary_RetriggerableRandomDelayFrames) == 0x000028, "Wrong size on LowEntryExtendedStandardLibrary_RetriggerableRandomDelayFrames");
static_assert(offsetof(LowEntryExtendedStandardLibrary_RetriggerableRandomDelayFrames, WorldContextObject) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_RetriggerableRandomDelayFrames::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_RetriggerableRandomDelayFrames, MinFrames) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_RetriggerableRandomDelayFrames::MinFrames' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_RetriggerableRandomDelayFrames, MaxFrames) == 0x00000C, "Member 'LowEntryExtendedStandardLibrary_RetriggerableRandomDelayFrames::MaxFrames' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_RetriggerableRandomDelayFrames, LatentInfo) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_RetriggerableRandomDelayFrames::LatentInfo' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.RoundDecimals
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_RoundDecimals final
{
public:
	double                                        Number;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Decimals;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C42[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_RoundDecimals) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_RoundDecimals");
static_assert(sizeof(LowEntryExtendedStandardLibrary_RoundDecimals) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_RoundDecimals");
static_assert(offsetof(LowEntryExtendedStandardLibrary_RoundDecimals, Number) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_RoundDecimals::Number' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_RoundDecimals, Decimals) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_RoundDecimals::Decimals' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_RoundDecimals, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_RoundDecimals::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.SceneCapture2D_GetFov
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_SceneCapture2D_GetFov final
{
public:
	class ASceneCapture2D*                        SceneCapture2D;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        FOV;                                               // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_SceneCapture2D_GetFov) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_SceneCapture2D_GetFov");
static_assert(sizeof(LowEntryExtendedStandardLibrary_SceneCapture2D_GetFov) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_SceneCapture2D_GetFov");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SceneCapture2D_GetFov, SceneCapture2D) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_SceneCapture2D_GetFov::SceneCapture2D' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SceneCapture2D_GetFov, FOV) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_SceneCapture2D_GetFov::FOV' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.SceneCapture2D_SetFov
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_SceneCapture2D_SetFov final
{
public:
	class ASceneCapture2D*                        SceneCapture2D;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        FOV;                                               // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_SceneCapture2D_SetFov) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_SceneCapture2D_SetFov");
static_assert(sizeof(LowEntryExtendedStandardLibrary_SceneCapture2D_SetFov) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_SceneCapture2D_SetFov");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SceneCapture2D_SetFov, SceneCapture2D) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_SceneCapture2D_SetFov::SceneCapture2D' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SceneCapture2D_SetFov, FOV) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_SceneCapture2D_SetFov::FOV' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.SceneCapture2DToBytes
// 0x0028 (0x0028 - 0x0000)
struct LowEntryExtendedStandardLibrary_SceneCapture2DToBytes final
{
public:
	class ASceneCapture2D*                        SceneCapture2D;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELowEntryImageFormat                          ImageFormat;                                       // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C43[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ByteArray;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CompressionQuality;                                // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C44[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_SceneCapture2DToBytes) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_SceneCapture2DToBytes");
static_assert(sizeof(LowEntryExtendedStandardLibrary_SceneCapture2DToBytes) == 0x000028, "Wrong size on LowEntryExtendedStandardLibrary_SceneCapture2DToBytes");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SceneCapture2DToBytes, SceneCapture2D) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_SceneCapture2DToBytes::SceneCapture2D' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SceneCapture2DToBytes, ImageFormat) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_SceneCapture2DToBytes::ImageFormat' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SceneCapture2DToBytes, ByteArray) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_SceneCapture2DToBytes::ByteArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SceneCapture2DToBytes, CompressionQuality) == 0x000020, "Member 'LowEntryExtendedStandardLibrary_SceneCapture2DToBytes::CompressionQuality' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.SceneCapture2DToPixels
// 0x0020 (0x0020 - 0x0000)
struct LowEntryExtendedStandardLibrary_SceneCapture2DToPixels final
{
public:
	class ASceneCapture2D*                        SceneCapture2D;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FColor>                         Pixels;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_SceneCapture2DToPixels) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_SceneCapture2DToPixels");
static_assert(sizeof(LowEntryExtendedStandardLibrary_SceneCapture2DToPixels) == 0x000020, "Wrong size on LowEntryExtendedStandardLibrary_SceneCapture2DToPixels");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SceneCapture2DToPixels, SceneCapture2D) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_SceneCapture2DToPixels::SceneCapture2D' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SceneCapture2DToPixels, Width) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_SceneCapture2DToPixels::Width' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SceneCapture2DToPixels, Height) == 0x00000C, "Member 'LowEntryExtendedStandardLibrary_SceneCapture2DToPixels::Height' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SceneCapture2DToPixels, Pixels) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_SceneCapture2DToPixels::Pixels' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.SceneCaptureComponent2D_GetFov
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_SceneCaptureComponent2D_GetFov final
{
public:
	class USceneCaptureComponent2D*               SceneCaptureComponent2D;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        FOV;                                               // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_SceneCaptureComponent2D_GetFov) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_SceneCaptureComponent2D_GetFov");
static_assert(sizeof(LowEntryExtendedStandardLibrary_SceneCaptureComponent2D_GetFov) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_SceneCaptureComponent2D_GetFov");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SceneCaptureComponent2D_GetFov, SceneCaptureComponent2D) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_SceneCaptureComponent2D_GetFov::SceneCaptureComponent2D' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SceneCaptureComponent2D_GetFov, FOV) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_SceneCaptureComponent2D_GetFov::FOV' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.SceneCaptureComponent2D_SetFov
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_SceneCaptureComponent2D_SetFov final
{
public:
	class USceneCaptureComponent2D*               SceneCaptureComponent2D;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        FOV;                                               // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_SceneCaptureComponent2D_SetFov) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_SceneCaptureComponent2D_SetFov");
static_assert(sizeof(LowEntryExtendedStandardLibrary_SceneCaptureComponent2D_SetFov) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_SceneCaptureComponent2D_SetFov");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SceneCaptureComponent2D_SetFov, SceneCaptureComponent2D) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_SceneCaptureComponent2D_SetFov::SceneCaptureComponent2D' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SceneCaptureComponent2D_SetFov, FOV) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_SceneCaptureComponent2D_SetFov::FOV' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.SceneCaptureComponent2DToBytes
// 0x0028 (0x0028 - 0x0000)
struct LowEntryExtendedStandardLibrary_SceneCaptureComponent2DToBytes final
{
public:
	class USceneCaptureComponent2D*               SceneCaptureComponent2D;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELowEntryImageFormat                          ImageFormat;                                       // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C45[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ByteArray;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CompressionQuality;                                // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C46[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_SceneCaptureComponent2DToBytes) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_SceneCaptureComponent2DToBytes");
static_assert(sizeof(LowEntryExtendedStandardLibrary_SceneCaptureComponent2DToBytes) == 0x000028, "Wrong size on LowEntryExtendedStandardLibrary_SceneCaptureComponent2DToBytes");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SceneCaptureComponent2DToBytes, SceneCaptureComponent2D) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_SceneCaptureComponent2DToBytes::SceneCaptureComponent2D' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SceneCaptureComponent2DToBytes, ImageFormat) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_SceneCaptureComponent2DToBytes::ImageFormat' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SceneCaptureComponent2DToBytes, ByteArray) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_SceneCaptureComponent2DToBytes::ByteArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SceneCaptureComponent2DToBytes, CompressionQuality) == 0x000020, "Member 'LowEntryExtendedStandardLibrary_SceneCaptureComponent2DToBytes::CompressionQuality' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.SceneCaptureComponent2DToPixels
// 0x0020 (0x0020 - 0x0000)
struct LowEntryExtendedStandardLibrary_SceneCaptureComponent2DToPixels final
{
public:
	class USceneCaptureComponent2D*               SceneCaptureComponent2D;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FColor>                         Pixels;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_SceneCaptureComponent2DToPixels) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_SceneCaptureComponent2DToPixels");
static_assert(sizeof(LowEntryExtendedStandardLibrary_SceneCaptureComponent2DToPixels) == 0x000020, "Wrong size on LowEntryExtendedStandardLibrary_SceneCaptureComponent2DToPixels");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SceneCaptureComponent2DToPixels, SceneCaptureComponent2D) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_SceneCaptureComponent2DToPixels::SceneCaptureComponent2D' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SceneCaptureComponent2DToPixels, Width) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_SceneCaptureComponent2DToPixels::Width' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SceneCaptureComponent2DToPixels, Height) == 0x00000C, "Member 'LowEntryExtendedStandardLibrary_SceneCaptureComponent2DToPixels::Height' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SceneCaptureComponent2DToPixels, Pixels) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_SceneCaptureComponent2DToPixels::Pixels' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.ServerChangeMap
// 0x0030 (0x0030 - 0x0000)
struct LowEntryExtendedStandardLibrary_ServerChangeMap final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Map;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Args;                                              // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      SpecificPlayer;                                    // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_ServerChangeMap) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_ServerChangeMap");
static_assert(sizeof(LowEntryExtendedStandardLibrary_ServerChangeMap) == 0x000030, "Wrong size on LowEntryExtendedStandardLibrary_ServerChangeMap");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ServerChangeMap, WorldContextObject) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_ServerChangeMap::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ServerChangeMap, Map) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_ServerChangeMap::Map' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ServerChangeMap, Args) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_ServerChangeMap::Args' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ServerChangeMap, SpecificPlayer) == 0x000028, "Member 'LowEntryExtendedStandardLibrary_ServerChangeMap::SpecificPlayer' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.SetGenericTeamId
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_SetGenericTeamId final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TeamID;                                            // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C47[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_SetGenericTeamId) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_SetGenericTeamId");
static_assert(sizeof(LowEntryExtendedStandardLibrary_SetGenericTeamId) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_SetGenericTeamId");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SetGenericTeamId, Target) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_SetGenericTeamId::Target' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SetGenericTeamId, TeamID) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_SetGenericTeamId::TeamID' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.SetMouseLockedToViewport
// 0x0001 (0x0001 - 0x0000)
struct LowEntryExtendedStandardLibrary_SetMouseLockedToViewport final
{
public:
	bool                                          Locked;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_SetMouseLockedToViewport) == 0x000001, "Wrong alignment on LowEntryExtendedStandardLibrary_SetMouseLockedToViewport");
static_assert(sizeof(LowEntryExtendedStandardLibrary_SetMouseLockedToViewport) == 0x000001, "Wrong size on LowEntryExtendedStandardLibrary_SetMouseLockedToViewport");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SetMouseLockedToViewport, Locked) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_SetMouseLockedToViewport::Locked' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.SetMousePosition
// 0x0008 (0x0008 - 0x0000)
struct LowEntryExtendedStandardLibrary_SetMousePosition final
{
public:
	int32                                         X;                                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_SetMousePosition) == 0x000004, "Wrong alignment on LowEntryExtendedStandardLibrary_SetMousePosition");
static_assert(sizeof(LowEntryExtendedStandardLibrary_SetMousePosition) == 0x000008, "Wrong size on LowEntryExtendedStandardLibrary_SetMousePosition");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SetMousePosition, X) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_SetMousePosition::X' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SetMousePosition, Y) == 0x000004, "Member 'LowEntryExtendedStandardLibrary_SetMousePosition::Y' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.SetMousePositionInPercentages
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_SetMousePositionInPercentages final
{
public:
	double                                        X;                                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Y;                                                 // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_SetMousePositionInPercentages) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_SetMousePositionInPercentages");
static_assert(sizeof(LowEntryExtendedStandardLibrary_SetMousePositionInPercentages) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_SetMousePositionInPercentages");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SetMousePositionInPercentages, X) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_SetMousePositionInPercentages::X' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SetMousePositionInPercentages, Y) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_SetMousePositionInPercentages::Y' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.SetSplitScreenEnabled
// 0x0001 (0x0001 - 0x0000)
struct LowEntryExtendedStandardLibrary_SetSplitScreenEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_SetSplitScreenEnabled) == 0x000001, "Wrong alignment on LowEntryExtendedStandardLibrary_SetSplitScreenEnabled");
static_assert(sizeof(LowEntryExtendedStandardLibrary_SetSplitScreenEnabled) == 0x000001, "Wrong size on LowEntryExtendedStandardLibrary_SetSplitScreenEnabled");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SetSplitScreenEnabled, Enabled) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_SetSplitScreenEnabled::Enabled' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.SetSplitScreenType_ThreePlayers
// 0x0001 (0x0001 - 0x0000)
struct LowEntryExtendedStandardLibrary_SetSplitScreenType_ThreePlayers final
{
public:
	ELowEntrySplitScreenTypeThreePlayers          Type;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_SetSplitScreenType_ThreePlayers) == 0x000001, "Wrong alignment on LowEntryExtendedStandardLibrary_SetSplitScreenType_ThreePlayers");
static_assert(sizeof(LowEntryExtendedStandardLibrary_SetSplitScreenType_ThreePlayers) == 0x000001, "Wrong size on LowEntryExtendedStandardLibrary_SetSplitScreenType_ThreePlayers");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SetSplitScreenType_ThreePlayers, Type) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_SetSplitScreenType_ThreePlayers::Type' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.SetSplitScreenType_TwoPlayers
// 0x0001 (0x0001 - 0x0000)
struct LowEntryExtendedStandardLibrary_SetSplitScreenType_TwoPlayers final
{
public:
	ELowEntrySplitScreenTypeTwoPlayers            Type;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_SetSplitScreenType_TwoPlayers) == 0x000001, "Wrong alignment on LowEntryExtendedStandardLibrary_SetSplitScreenType_TwoPlayers");
static_assert(sizeof(LowEntryExtendedStandardLibrary_SetSplitScreenType_TwoPlayers) == 0x000001, "Wrong size on LowEntryExtendedStandardLibrary_SetSplitScreenType_TwoPlayers");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SetSplitScreenType_TwoPlayers, Type) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_SetSplitScreenType_TwoPlayers::Type' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.SetWindowMode
// 0x0002 (0x0002 - 0x0000)
struct LowEntryExtendedStandardLibrary_SetWindowMode final
{
public:
	bool                                          Fullscreen;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFullscreenWindowed;                              // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_SetWindowMode) == 0x000001, "Wrong alignment on LowEntryExtendedStandardLibrary_SetWindowMode");
static_assert(sizeof(LowEntryExtendedStandardLibrary_SetWindowMode) == 0x000002, "Wrong size on LowEntryExtendedStandardLibrary_SetWindowMode");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SetWindowMode, Fullscreen) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_SetWindowMode::Fullscreen' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SetWindowMode, IsFullscreenWindowed) == 0x000001, "Member 'LowEntryExtendedStandardLibrary_SetWindowMode::IsFullscreenWindowed' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.SetWindowPositiomInPercentagesCentered
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_SetWindowPositiomInPercentagesCentered final
{
public:
	double                                        X;                                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Y;                                                 // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_SetWindowPositiomInPercentagesCentered) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_SetWindowPositiomInPercentagesCentered");
static_assert(sizeof(LowEntryExtendedStandardLibrary_SetWindowPositiomInPercentagesCentered) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_SetWindowPositiomInPercentagesCentered");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SetWindowPositiomInPercentagesCentered, X) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_SetWindowPositiomInPercentagesCentered::X' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SetWindowPositiomInPercentagesCentered, Y) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_SetWindowPositiomInPercentagesCentered::Y' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.SetWindowPosition
// 0x0008 (0x0008 - 0x0000)
struct LowEntryExtendedStandardLibrary_SetWindowPosition final
{
public:
	int32                                         X;                                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_SetWindowPosition) == 0x000004, "Wrong alignment on LowEntryExtendedStandardLibrary_SetWindowPosition");
static_assert(sizeof(LowEntryExtendedStandardLibrary_SetWindowPosition) == 0x000008, "Wrong size on LowEntryExtendedStandardLibrary_SetWindowPosition");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SetWindowPosition, X) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_SetWindowPosition::X' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SetWindowPosition, Y) == 0x000004, "Member 'LowEntryExtendedStandardLibrary_SetWindowPosition::Y' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.SetWindowPositionInPercentagesCentered
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_SetWindowPositionInPercentagesCentered final
{
public:
	double                                        X;                                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Y;                                                 // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_SetWindowPositionInPercentagesCentered) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_SetWindowPositionInPercentagesCentered");
static_assert(sizeof(LowEntryExtendedStandardLibrary_SetWindowPositionInPercentagesCentered) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_SetWindowPositionInPercentagesCentered");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SetWindowPositionInPercentagesCentered, X) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_SetWindowPositionInPercentagesCentered::X' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SetWindowPositionInPercentagesCentered, Y) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_SetWindowPositionInPercentagesCentered::Y' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.SetWindowSize
// 0x0008 (0x0008 - 0x0000)
struct LowEntryExtendedStandardLibrary_SetWindowSize final
{
public:
	int32                                         Width;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_SetWindowSize) == 0x000004, "Wrong alignment on LowEntryExtendedStandardLibrary_SetWindowSize");
static_assert(sizeof(LowEntryExtendedStandardLibrary_SetWindowSize) == 0x000008, "Wrong size on LowEntryExtendedStandardLibrary_SetWindowSize");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SetWindowSize, Width) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_SetWindowSize::Width' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SetWindowSize, Height) == 0x000004, "Member 'LowEntryExtendedStandardLibrary_SetWindowSize::Height' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.SetWorldRenderingEnabled
// 0x0001 (0x0001 - 0x0000)
struct LowEntryExtendedStandardLibrary_SetWorldRenderingEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_SetWorldRenderingEnabled) == 0x000001, "Wrong alignment on LowEntryExtendedStandardLibrary_SetWorldRenderingEnabled");
static_assert(sizeof(LowEntryExtendedStandardLibrary_SetWorldRenderingEnabled) == 0x000001, "Wrong size on LowEntryExtendedStandardLibrary_SetWorldRenderingEnabled");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SetWorldRenderingEnabled, Enabled) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_SetWorldRenderingEnabled::Enabled' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.Sha1
// 0x0028 (0x0028 - 0x0000)
struct LowEntryExtendedStandardLibrary_Sha1 final
{
public:
	TArray<uint8>                                 ByteArray;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_Sha1) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_Sha1");
static_assert(sizeof(LowEntryExtendedStandardLibrary_Sha1) == 0x000028, "Wrong size on LowEntryExtendedStandardLibrary_Sha1");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Sha1, ByteArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_Sha1::ByteArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Sha1, Param_Index) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_Sha1::Param_Index' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Sha1, Length) == 0x000014, "Member 'LowEntryExtendedStandardLibrary_Sha1::Length' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Sha1, ReturnValue) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_Sha1::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.Sha256
// 0x0028 (0x0028 - 0x0000)
struct LowEntryExtendedStandardLibrary_Sha256 final
{
public:
	TArray<uint8>                                 ByteArray;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_Sha256) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_Sha256");
static_assert(sizeof(LowEntryExtendedStandardLibrary_Sha256) == 0x000028, "Wrong size on LowEntryExtendedStandardLibrary_Sha256");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Sha256, ByteArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_Sha256::ByteArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Sha256, Param_Index) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_Sha256::Param_Index' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Sha256, Length) == 0x000014, "Member 'LowEntryExtendedStandardLibrary_Sha256::Length' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Sha256, ReturnValue) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_Sha256::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.Sha512
// 0x0028 (0x0028 - 0x0000)
struct LowEntryExtendedStandardLibrary_Sha512 final
{
public:
	TArray<uint8>                                 ByteArray;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_Sha512) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_Sha512");
static_assert(sizeof(LowEntryExtendedStandardLibrary_Sha512) == 0x000028, "Wrong size on LowEntryExtendedStandardLibrary_Sha512");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Sha512, ByteArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_Sha512::ByteArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Sha512, Param_Index) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_Sha512::Param_Index' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Sha512, Length) == 0x000014, "Member 'LowEntryExtendedStandardLibrary_Sha512::Length' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Sha512, ReturnValue) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_Sha512::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.ShippingBuild
// 0x0001 (0x0001 - 0x0000)
struct LowEntryExtendedStandardLibrary_ShippingBuild final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_ShippingBuild) == 0x000001, "Wrong alignment on LowEntryExtendedStandardLibrary_ShippingBuild");
static_assert(sizeof(LowEntryExtendedStandardLibrary_ShippingBuild) == 0x000001, "Wrong size on LowEntryExtendedStandardLibrary_ShippingBuild");
static_assert(offsetof(LowEntryExtendedStandardLibrary_ShippingBuild, ReturnValue) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_ShippingBuild::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.SimpleKismetSystemLibraryPrintString
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_SimpleKismetSystemLibraryPrintString final
{
public:
	class FString                                 InString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_SimpleKismetSystemLibraryPrintString) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_SimpleKismetSystemLibraryPrintString");
static_assert(sizeof(LowEntryExtendedStandardLibrary_SimpleKismetSystemLibraryPrintString) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_SimpleKismetSystemLibraryPrintString");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SimpleKismetSystemLibraryPrintString, InString) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_SimpleKismetSystemLibraryPrintString::InString' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.SortByteArray
// 0x0028 (0x0028 - 0x0000)
struct LowEntryExtendedStandardLibrary_SortByteArray final
{
public:
	TArray<uint8>                                 ByteArray;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          Reversed;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C48[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_SortByteArray) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_SortByteArray");
static_assert(sizeof(LowEntryExtendedStandardLibrary_SortByteArray) == 0x000028, "Wrong size on LowEntryExtendedStandardLibrary_SortByteArray");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SortByteArray, ByteArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_SortByteArray::ByteArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SortByteArray, Reversed) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_SortByteArray::Reversed' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SortByteArray, ReturnValue) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_SortByteArray::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.SortByteArrayDirectly
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_SortByteArrayDirectly final
{
public:
	TArray<uint8>                                 ByteArray;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          Reversed;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C49[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_SortByteArrayDirectly) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_SortByteArrayDirectly");
static_assert(sizeof(LowEntryExtendedStandardLibrary_SortByteArrayDirectly) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_SortByteArrayDirectly");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SortByteArrayDirectly, ByteArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_SortByteArrayDirectly::ByteArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SortByteArrayDirectly, Reversed) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_SortByteArrayDirectly::Reversed' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.SortDateTimeArray
// 0x0028 (0x0028 - 0x0000)
struct LowEntryExtendedStandardLibrary_SortDateTimeArray final
{
public:
	TArray<struct FDateTime>                      DateTimeArray;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          Reversed;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C4A[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDateTime>                      ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_SortDateTimeArray) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_SortDateTimeArray");
static_assert(sizeof(LowEntryExtendedStandardLibrary_SortDateTimeArray) == 0x000028, "Wrong size on LowEntryExtendedStandardLibrary_SortDateTimeArray");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SortDateTimeArray, DateTimeArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_SortDateTimeArray::DateTimeArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SortDateTimeArray, Reversed) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_SortDateTimeArray::Reversed' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SortDateTimeArray, ReturnValue) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_SortDateTimeArray::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.SortDateTimeArrayDirectly
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_SortDateTimeArrayDirectly final
{
public:
	TArray<struct FDateTime>                      DateTimeArray;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          Reversed;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C4B[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_SortDateTimeArrayDirectly) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_SortDateTimeArrayDirectly");
static_assert(sizeof(LowEntryExtendedStandardLibrary_SortDateTimeArrayDirectly) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_SortDateTimeArrayDirectly");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SortDateTimeArrayDirectly, DateTimeArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_SortDateTimeArrayDirectly::DateTimeArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SortDateTimeArrayDirectly, Reversed) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_SortDateTimeArrayDirectly::Reversed' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.SortDoubleArray
// 0x0028 (0x0028 - 0x0000)
struct LowEntryExtendedStandardLibrary_SortDoubleArray final
{
public:
	TArray<double>                                DoubleArray;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          Reversed;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C4C[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<double>                                ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_SortDoubleArray) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_SortDoubleArray");
static_assert(sizeof(LowEntryExtendedStandardLibrary_SortDoubleArray) == 0x000028, "Wrong size on LowEntryExtendedStandardLibrary_SortDoubleArray");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SortDoubleArray, DoubleArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_SortDoubleArray::DoubleArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SortDoubleArray, Reversed) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_SortDoubleArray::Reversed' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SortDoubleArray, ReturnValue) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_SortDoubleArray::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.SortDoubleArrayDirectly
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_SortDoubleArrayDirectly final
{
public:
	TArray<double>                                DoubleArray;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          Reversed;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C4D[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_SortDoubleArrayDirectly) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_SortDoubleArrayDirectly");
static_assert(sizeof(LowEntryExtendedStandardLibrary_SortDoubleArrayDirectly) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_SortDoubleArrayDirectly");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SortDoubleArrayDirectly, DoubleArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_SortDoubleArrayDirectly::DoubleArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SortDoubleArrayDirectly, Reversed) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_SortDoubleArrayDirectly::Reversed' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.SortFloatArray
// 0x0028 (0x0028 - 0x0000)
struct LowEntryExtendedStandardLibrary_SortFloatArray final
{
public:
	TArray<float>                                 FloatArray;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          Reversed;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C4E[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_SortFloatArray) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_SortFloatArray");
static_assert(sizeof(LowEntryExtendedStandardLibrary_SortFloatArray) == 0x000028, "Wrong size on LowEntryExtendedStandardLibrary_SortFloatArray");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SortFloatArray, FloatArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_SortFloatArray::FloatArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SortFloatArray, Reversed) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_SortFloatArray::Reversed' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SortFloatArray, ReturnValue) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_SortFloatArray::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.SortFloatArrayDirectly
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_SortFloatArrayDirectly final
{
public:
	TArray<float>                                 FloatArray;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          Reversed;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C4F[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_SortFloatArrayDirectly) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_SortFloatArrayDirectly");
static_assert(sizeof(LowEntryExtendedStandardLibrary_SortFloatArrayDirectly) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_SortFloatArrayDirectly");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SortFloatArrayDirectly, FloatArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_SortFloatArrayDirectly::FloatArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SortFloatArrayDirectly, Reversed) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_SortFloatArrayDirectly::Reversed' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.SortIntegerArray
// 0x0028 (0x0028 - 0x0000)
struct LowEntryExtendedStandardLibrary_SortIntegerArray final
{
public:
	TArray<int32>                                 IntegerArray;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          Reversed;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C50[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_SortIntegerArray) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_SortIntegerArray");
static_assert(sizeof(LowEntryExtendedStandardLibrary_SortIntegerArray) == 0x000028, "Wrong size on LowEntryExtendedStandardLibrary_SortIntegerArray");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SortIntegerArray, IntegerArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_SortIntegerArray::IntegerArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SortIntegerArray, Reversed) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_SortIntegerArray::Reversed' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SortIntegerArray, ReturnValue) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_SortIntegerArray::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.SortIntegerArrayDirectly
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_SortIntegerArrayDirectly final
{
public:
	TArray<int32>                                 IntegerArray;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          Reversed;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C51[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_SortIntegerArrayDirectly) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_SortIntegerArrayDirectly");
static_assert(sizeof(LowEntryExtendedStandardLibrary_SortIntegerArrayDirectly) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_SortIntegerArrayDirectly");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SortIntegerArrayDirectly, IntegerArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_SortIntegerArrayDirectly::IntegerArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SortIntegerArrayDirectly, Reversed) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_SortIntegerArrayDirectly::Reversed' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.SortObjectArray
// 0x0038 (0x0038 - 0x0000)
struct LowEntryExtendedStandardLibrary_SortObjectArray final
{
public:
	TArray<class UObject*>                        ObjectArray;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(class UObject* ObjectA, class UObject* ObjectB, bool* Result)> Comparator;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Reversed;                                          // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C52[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UObject*>                        ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_SortObjectArray) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_SortObjectArray");
static_assert(sizeof(LowEntryExtendedStandardLibrary_SortObjectArray) == 0x000038, "Wrong size on LowEntryExtendedStandardLibrary_SortObjectArray");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SortObjectArray, ObjectArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_SortObjectArray::ObjectArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SortObjectArray, Comparator) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_SortObjectArray::Comparator' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SortObjectArray, Reversed) == 0x000020, "Member 'LowEntryExtendedStandardLibrary_SortObjectArray::Reversed' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SortObjectArray, ReturnValue) == 0x000028, "Member 'LowEntryExtendedStandardLibrary_SortObjectArray::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.SortObjectArrayDirectly
// 0x0028 (0x0028 - 0x0000)
struct LowEntryExtendedStandardLibrary_SortObjectArrayDirectly final
{
public:
	TArray<class UObject*>                        ObjectArray;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(class UObject* ObjectA, class UObject* ObjectB, bool* Result)> Comparator;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Reversed;                                          // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C53[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_SortObjectArrayDirectly) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_SortObjectArrayDirectly");
static_assert(sizeof(LowEntryExtendedStandardLibrary_SortObjectArrayDirectly) == 0x000028, "Wrong size on LowEntryExtendedStandardLibrary_SortObjectArrayDirectly");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SortObjectArrayDirectly, ObjectArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_SortObjectArrayDirectly::ObjectArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SortObjectArrayDirectly, Comparator) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_SortObjectArrayDirectly::Comparator' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SortObjectArrayDirectly, Reversed) == 0x000020, "Member 'LowEntryExtendedStandardLibrary_SortObjectArrayDirectly::Reversed' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.SortStringArray
// 0x0028 (0x0028 - 0x0000)
struct LowEntryExtendedStandardLibrary_SortStringArray final
{
public:
	TArray<class FString>                         StringArray;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          Reversed;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C54[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_SortStringArray) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_SortStringArray");
static_assert(sizeof(LowEntryExtendedStandardLibrary_SortStringArray) == 0x000028, "Wrong size on LowEntryExtendedStandardLibrary_SortStringArray");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SortStringArray, StringArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_SortStringArray::StringArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SortStringArray, Reversed) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_SortStringArray::Reversed' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SortStringArray, ReturnValue) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_SortStringArray::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.SortStringArrayDirectly
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_SortStringArrayDirectly final
{
public:
	TArray<class FString>                         StringArray;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          Reversed;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C55[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_SortStringArrayDirectly) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_SortStringArrayDirectly");
static_assert(sizeof(LowEntryExtendedStandardLibrary_SortStringArrayDirectly) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_SortStringArrayDirectly");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SortStringArrayDirectly, StringArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_SortStringArrayDirectly::StringArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SortStringArrayDirectly, Reversed) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_SortStringArrayDirectly::Reversed' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.SortTimespanArray
// 0x0028 (0x0028 - 0x0000)
struct LowEntryExtendedStandardLibrary_SortTimespanArray final
{
public:
	TArray<struct FTimespan>                      TimespanArray;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          Reversed;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C56[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTimespan>                      ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_SortTimespanArray) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_SortTimespanArray");
static_assert(sizeof(LowEntryExtendedStandardLibrary_SortTimespanArray) == 0x000028, "Wrong size on LowEntryExtendedStandardLibrary_SortTimespanArray");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SortTimespanArray, TimespanArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_SortTimespanArray::TimespanArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SortTimespanArray, Reversed) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_SortTimespanArray::Reversed' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SortTimespanArray, ReturnValue) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_SortTimespanArray::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.SortTimespanArrayDirectly
// 0x0018 (0x0018 - 0x0000)
struct LowEntryExtendedStandardLibrary_SortTimespanArrayDirectly final
{
public:
	TArray<struct FTimespan>                      TimespanArray;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          Reversed;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C57[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_SortTimespanArrayDirectly) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_SortTimespanArrayDirectly");
static_assert(sizeof(LowEntryExtendedStandardLibrary_SortTimespanArrayDirectly) == 0x000018, "Wrong size on LowEntryExtendedStandardLibrary_SortTimespanArrayDirectly");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SortTimespanArrayDirectly, TimespanArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_SortTimespanArrayDirectly::TimespanArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SortTimespanArrayDirectly, Reversed) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_SortTimespanArrayDirectly::Reversed' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.SoundClass_GetPitch
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_SoundClass_GetPitch final
{
public:
	class USoundClass*                            SoundClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_SoundClass_GetPitch) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_SoundClass_GetPitch");
static_assert(sizeof(LowEntryExtendedStandardLibrary_SoundClass_GetPitch) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_SoundClass_GetPitch");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SoundClass_GetPitch, SoundClass) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_SoundClass_GetPitch::SoundClass' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SoundClass_GetPitch, ReturnValue) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_SoundClass_GetPitch::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.SoundClass_GetVolume
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_SoundClass_GetVolume final
{
public:
	class USoundClass*                            SoundClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_SoundClass_GetVolume) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_SoundClass_GetVolume");
static_assert(sizeof(LowEntryExtendedStandardLibrary_SoundClass_GetVolume) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_SoundClass_GetVolume");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SoundClass_GetVolume, SoundClass) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_SoundClass_GetVolume::SoundClass' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SoundClass_GetVolume, ReturnValue) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_SoundClass_GetVolume::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.SoundClass_SetPitch
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_SoundClass_SetPitch final
{
public:
	class USoundClass*                            SoundClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Pitch;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_SoundClass_SetPitch) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_SoundClass_SetPitch");
static_assert(sizeof(LowEntryExtendedStandardLibrary_SoundClass_SetPitch) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_SoundClass_SetPitch");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SoundClass_SetPitch, SoundClass) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_SoundClass_SetPitch::SoundClass' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SoundClass_SetPitch, Pitch) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_SoundClass_SetPitch::Pitch' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.SoundClass_SetVolume
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_SoundClass_SetVolume final
{
public:
	class USoundClass*                            SoundClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Volume;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_SoundClass_SetVolume) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_SoundClass_SetVolume");
static_assert(sizeof(LowEntryExtendedStandardLibrary_SoundClass_SetVolume) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_SoundClass_SetVolume");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SoundClass_SetVolume, SoundClass) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_SoundClass_SetVolume::SoundClass' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SoundClass_SetVolume, Volume) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_SoundClass_SetVolume::Volume' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.SplitBytes
// 0x0038 (0x0038 - 0x0000)
struct LowEntryExtendedStandardLibrary_SplitBytes final
{
public:
	TArray<uint8>                                 ByteArray;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         LengthA;                                           // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C58[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 A;                                                 // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 B;                                                 // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_SplitBytes) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_SplitBytes");
static_assert(sizeof(LowEntryExtendedStandardLibrary_SplitBytes) == 0x000038, "Wrong size on LowEntryExtendedStandardLibrary_SplitBytes");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SplitBytes, ByteArray) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_SplitBytes::ByteArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SplitBytes, LengthA) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_SplitBytes::LengthA' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SplitBytes, A) == 0x000018, "Member 'LowEntryExtendedStandardLibrary_SplitBytes::A' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SplitBytes, B) == 0x000028, "Member 'LowEntryExtendedStandardLibrary_SplitBytes::B' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.StringToBytesUtf8
// 0x0020 (0x0020 - 0x0000)
struct LowEntryExtendedStandardLibrary_StringToBytesUtf8 final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_StringToBytesUtf8) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_StringToBytesUtf8");
static_assert(sizeof(LowEntryExtendedStandardLibrary_StringToBytesUtf8) == 0x000020, "Wrong size on LowEntryExtendedStandardLibrary_StringToBytesUtf8");
static_assert(offsetof(LowEntryExtendedStandardLibrary_StringToBytesUtf8, String) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_StringToBytesUtf8::String' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_StringToBytesUtf8, ReturnValue) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_StringToBytesUtf8::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.SwitchPlatform
// 0x0001 (0x0001 - 0x0000)
struct LowEntryExtendedStandardLibrary_SwitchPlatform final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_SwitchPlatform) == 0x000001, "Wrong alignment on LowEntryExtendedStandardLibrary_SwitchPlatform");
static_assert(sizeof(LowEntryExtendedStandardLibrary_SwitchPlatform) == 0x000001, "Wrong size on LowEntryExtendedStandardLibrary_SwitchPlatform");
static_assert(offsetof(LowEntryExtendedStandardLibrary_SwitchPlatform, ReturnValue) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_SwitchPlatform::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.TabCharacter
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_TabCharacter final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_TabCharacter) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_TabCharacter");
static_assert(sizeof(LowEntryExtendedStandardLibrary_TabCharacter) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_TabCharacter");
static_assert(offsetof(LowEntryExtendedStandardLibrary_TabCharacter, ReturnValue) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_TabCharacter::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.TestBuild
// 0x0001 (0x0001 - 0x0000)
struct LowEntryExtendedStandardLibrary_TestBuild final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_TestBuild) == 0x000001, "Wrong alignment on LowEntryExtendedStandardLibrary_TestBuild");
static_assert(sizeof(LowEntryExtendedStandardLibrary_TestBuild) == 0x000001, "Wrong size on LowEntryExtendedStandardLibrary_TestBuild");
static_assert(offsetof(LowEntryExtendedStandardLibrary_TestBuild, ReturnValue) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_TestBuild::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.Texture2DToBytes
// 0x0028 (0x0028 - 0x0000)
struct LowEntryExtendedStandardLibrary_Texture2DToBytes final
{
public:
	class UTexture2D*                             Texture2D;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELowEntryImageFormat                          ImageFormat;                                       // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C59[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ByteArray;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CompressionQuality;                                // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C5A[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_Texture2DToBytes) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_Texture2DToBytes");
static_assert(sizeof(LowEntryExtendedStandardLibrary_Texture2DToBytes) == 0x000028, "Wrong size on LowEntryExtendedStandardLibrary_Texture2DToBytes");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Texture2DToBytes, Texture2D) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_Texture2DToBytes::Texture2D' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Texture2DToBytes, ImageFormat) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_Texture2DToBytes::ImageFormat' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Texture2DToBytes, ByteArray) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_Texture2DToBytes::ByteArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Texture2DToBytes, CompressionQuality) == 0x000020, "Member 'LowEntryExtendedStandardLibrary_Texture2DToBytes::CompressionQuality' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.Texture2DToPixels
// 0x0020 (0x0020 - 0x0000)
struct LowEntryExtendedStandardLibrary_Texture2DToPixels final
{
public:
	class UTexture2D*                             Texture2D;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FColor>                         Pixels;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_Texture2DToPixels) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_Texture2DToPixels");
static_assert(sizeof(LowEntryExtendedStandardLibrary_Texture2DToPixels) == 0x000020, "Wrong size on LowEntryExtendedStandardLibrary_Texture2DToPixels");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Texture2DToPixels, Texture2D) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_Texture2DToPixels::Texture2D' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Texture2DToPixels, Width) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_Texture2DToPixels::Width' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Texture2DToPixels, Height) == 0x00000C, "Member 'LowEntryExtendedStandardLibrary_Texture2DToPixels::Height' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Texture2DToPixels, Pixels) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_Texture2DToPixels::Pixels' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.TextureRenderTarget2DToBytes
// 0x0028 (0x0028 - 0x0000)
struct LowEntryExtendedStandardLibrary_TextureRenderTarget2DToBytes final
{
public:
	class UTextureRenderTarget2D*                 TextureRenderTarget2D;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELowEntryImageFormat                          ImageFormat;                                       // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C5B[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ByteArray;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CompressionQuality;                                // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C5C[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_TextureRenderTarget2DToBytes) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_TextureRenderTarget2DToBytes");
static_assert(sizeof(LowEntryExtendedStandardLibrary_TextureRenderTarget2DToBytes) == 0x000028, "Wrong size on LowEntryExtendedStandardLibrary_TextureRenderTarget2DToBytes");
static_assert(offsetof(LowEntryExtendedStandardLibrary_TextureRenderTarget2DToBytes, TextureRenderTarget2D) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_TextureRenderTarget2DToBytes::TextureRenderTarget2D' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_TextureRenderTarget2DToBytes, ImageFormat) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_TextureRenderTarget2DToBytes::ImageFormat' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_TextureRenderTarget2DToBytes, ByteArray) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_TextureRenderTarget2DToBytes::ByteArray' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_TextureRenderTarget2DToBytes, CompressionQuality) == 0x000020, "Member 'LowEntryExtendedStandardLibrary_TextureRenderTarget2DToBytes::CompressionQuality' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.TextureRenderTarget2DToPixels
// 0x0020 (0x0020 - 0x0000)
struct LowEntryExtendedStandardLibrary_TextureRenderTarget2DToPixels final
{
public:
	class UTextureRenderTarget2D*                 TextureRenderTarget2D;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FColor>                         Pixels;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_TextureRenderTarget2DToPixels) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_TextureRenderTarget2DToPixels");
static_assert(sizeof(LowEntryExtendedStandardLibrary_TextureRenderTarget2DToPixels) == 0x000020, "Wrong size on LowEntryExtendedStandardLibrary_TextureRenderTarget2DToPixels");
static_assert(offsetof(LowEntryExtendedStandardLibrary_TextureRenderTarget2DToPixels, TextureRenderTarget2D) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_TextureRenderTarget2DToPixels::TextureRenderTarget2D' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_TextureRenderTarget2DToPixels, Width) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_TextureRenderTarget2DToPixels::Width' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_TextureRenderTarget2DToPixels, Height) == 0x00000C, "Member 'LowEntryExtendedStandardLibrary_TextureRenderTarget2DToPixels::Height' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_TextureRenderTarget2DToPixels, Pixels) == 0x000010, "Member 'LowEntryExtendedStandardLibrary_TextureRenderTarget2DToPixels::Pixels' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.TextureUpdateResource
// 0x0008 (0x0008 - 0x0000)
struct LowEntryExtendedStandardLibrary_TextureUpdateResource final
{
public:
	class UTexture*                               Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_TextureUpdateResource) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_TextureUpdateResource");
static_assert(sizeof(LowEntryExtendedStandardLibrary_TextureUpdateResource) == 0x000008, "Wrong size on LowEntryExtendedStandardLibrary_TextureUpdateResource");
static_assert(offsetof(LowEntryExtendedStandardLibrary_TextureUpdateResource, Texture) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_TextureUpdateResource::Texture' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.TickFrames
// 0x0030 (0x0030 - 0x0000)
struct LowEntryExtendedStandardLibrary_TickFrames final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Ticks;                                             // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FramesInterval;                                    // 0x0024(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Tick;                                              // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C5D[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_TickFrames) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_TickFrames");
static_assert(sizeof(LowEntryExtendedStandardLibrary_TickFrames) == 0x000030, "Wrong size on LowEntryExtendedStandardLibrary_TickFrames");
static_assert(offsetof(LowEntryExtendedStandardLibrary_TickFrames, WorldContextObject) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_TickFrames::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_TickFrames, LatentInfo) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_TickFrames::LatentInfo' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_TickFrames, Ticks) == 0x000020, "Member 'LowEntryExtendedStandardLibrary_TickFrames::Ticks' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_TickFrames, FramesInterval) == 0x000024, "Member 'LowEntryExtendedStandardLibrary_TickFrames::FramesInterval' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_TickFrames, Tick) == 0x000028, "Member 'LowEntryExtendedStandardLibrary_TickFrames::Tick' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.TickSeconds
// 0x0038 (0x0038 - 0x0000)
struct LowEntryExtendedStandardLibrary_TickSeconds final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Ticks;                                             // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C5E[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SecondsInterval;                                   // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Tick;                                              // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C5F[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryExtendedStandardLibrary_TickSeconds) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_TickSeconds");
static_assert(sizeof(LowEntryExtendedStandardLibrary_TickSeconds) == 0x000038, "Wrong size on LowEntryExtendedStandardLibrary_TickSeconds");
static_assert(offsetof(LowEntryExtendedStandardLibrary_TickSeconds, WorldContextObject) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_TickSeconds::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_TickSeconds, LatentInfo) == 0x000008, "Member 'LowEntryExtendedStandardLibrary_TickSeconds::LatentInfo' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_TickSeconds, Ticks) == 0x000020, "Member 'LowEntryExtendedStandardLibrary_TickSeconds::Ticks' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_TickSeconds, SecondsInterval) == 0x000028, "Member 'LowEntryExtendedStandardLibrary_TickSeconds::SecondsInterval' has a wrong offset!");
static_assert(offsetof(LowEntryExtendedStandardLibrary_TickSeconds, Tick) == 0x000030, "Member 'LowEntryExtendedStandardLibrary_TickSeconds::Tick' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.Windows32Platform
// 0x0001 (0x0001 - 0x0000)
struct LowEntryExtendedStandardLibrary_Windows32Platform final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_Windows32Platform) == 0x000001, "Wrong alignment on LowEntryExtendedStandardLibrary_Windows32Platform");
static_assert(sizeof(LowEntryExtendedStandardLibrary_Windows32Platform) == 0x000001, "Wrong size on LowEntryExtendedStandardLibrary_Windows32Platform");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Windows32Platform, ReturnValue) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_Windows32Platform::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.Windows64Platform
// 0x0001 (0x0001 - 0x0000)
struct LowEntryExtendedStandardLibrary_Windows64Platform final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_Windows64Platform) == 0x000001, "Wrong alignment on LowEntryExtendedStandardLibrary_Windows64Platform");
static_assert(sizeof(LowEntryExtendedStandardLibrary_Windows64Platform) == 0x000001, "Wrong size on LowEntryExtendedStandardLibrary_Windows64Platform");
static_assert(offsetof(LowEntryExtendedStandardLibrary_Windows64Platform, ReturnValue) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_Windows64Platform::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.WindowsNewlineCharacter
// 0x0010 (0x0010 - 0x0000)
struct LowEntryExtendedStandardLibrary_WindowsNewlineCharacter final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_WindowsNewlineCharacter) == 0x000008, "Wrong alignment on LowEntryExtendedStandardLibrary_WindowsNewlineCharacter");
static_assert(sizeof(LowEntryExtendedStandardLibrary_WindowsNewlineCharacter) == 0x000010, "Wrong size on LowEntryExtendedStandardLibrary_WindowsNewlineCharacter");
static_assert(offsetof(LowEntryExtendedStandardLibrary_WindowsNewlineCharacter, ReturnValue) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_WindowsNewlineCharacter::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.WindowsPlatform
// 0x0001 (0x0001 - 0x0000)
struct LowEntryExtendedStandardLibrary_WindowsPlatform final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_WindowsPlatform) == 0x000001, "Wrong alignment on LowEntryExtendedStandardLibrary_WindowsPlatform");
static_assert(sizeof(LowEntryExtendedStandardLibrary_WindowsPlatform) == 0x000001, "Wrong size on LowEntryExtendedStandardLibrary_WindowsPlatform");
static_assert(offsetof(LowEntryExtendedStandardLibrary_WindowsPlatform, ReturnValue) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_WindowsPlatform::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.WindowsRtArmPlatform
// 0x0001 (0x0001 - 0x0000)
struct LowEntryExtendedStandardLibrary_WindowsRtArmPlatform final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_WindowsRtArmPlatform) == 0x000001, "Wrong alignment on LowEntryExtendedStandardLibrary_WindowsRtArmPlatform");
static_assert(sizeof(LowEntryExtendedStandardLibrary_WindowsRtArmPlatform) == 0x000001, "Wrong size on LowEntryExtendedStandardLibrary_WindowsRtArmPlatform");
static_assert(offsetof(LowEntryExtendedStandardLibrary_WindowsRtArmPlatform, ReturnValue) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_WindowsRtArmPlatform::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.WindowsRtPlatform
// 0x0001 (0x0001 - 0x0000)
struct LowEntryExtendedStandardLibrary_WindowsRtPlatform final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_WindowsRtPlatform) == 0x000001, "Wrong alignment on LowEntryExtendedStandardLibrary_WindowsRtPlatform");
static_assert(sizeof(LowEntryExtendedStandardLibrary_WindowsRtPlatform) == 0x000001, "Wrong size on LowEntryExtendedStandardLibrary_WindowsRtPlatform");
static_assert(offsetof(LowEntryExtendedStandardLibrary_WindowsRtPlatform, ReturnValue) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_WindowsRtPlatform::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.WithEditor
// 0x0001 (0x0001 - 0x0000)
struct LowEntryExtendedStandardLibrary_WithEditor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_WithEditor) == 0x000001, "Wrong alignment on LowEntryExtendedStandardLibrary_WithEditor");
static_assert(sizeof(LowEntryExtendedStandardLibrary_WithEditor) == 0x000001, "Wrong size on LowEntryExtendedStandardLibrary_WithEditor");
static_assert(offsetof(LowEntryExtendedStandardLibrary_WithEditor, ReturnValue) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_WithEditor::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryExtendedStandardLibrary.XboxOnePlatform
// 0x0001 (0x0001 - 0x0000)
struct LowEntryExtendedStandardLibrary_XboxOnePlatform final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryExtendedStandardLibrary_XboxOnePlatform) == 0x000001, "Wrong alignment on LowEntryExtendedStandardLibrary_XboxOnePlatform");
static_assert(sizeof(LowEntryExtendedStandardLibrary_XboxOnePlatform) == 0x000001, "Wrong size on LowEntryExtendedStandardLibrary_XboxOnePlatform");
static_assert(offsetof(LowEntryExtendedStandardLibrary_XboxOnePlatform, ReturnValue) == 0x000000, "Member 'LowEntryExtendedStandardLibrary_XboxOnePlatform::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryLatentActionBoolean.Done
// 0x0001 (0x0001 - 0x0000)
struct LowEntryLatentActionBoolean_Done final
{
public:
	bool                                          Result_;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryLatentActionBoolean_Done) == 0x000001, "Wrong alignment on LowEntryLatentActionBoolean_Done");
static_assert(sizeof(LowEntryLatentActionBoolean_Done) == 0x000001, "Wrong size on LowEntryLatentActionBoolean_Done");
static_assert(offsetof(LowEntryLatentActionBoolean_Done, Result_) == 0x000000, "Member 'LowEntryLatentActionBoolean_Done::Result_' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryLatentActionBoolean.GetResult
// 0x0001 (0x0001 - 0x0000)
struct LowEntryLatentActionBoolean_GetResult final
{
public:
	bool                                          Result_;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryLatentActionBoolean_GetResult) == 0x000001, "Wrong alignment on LowEntryLatentActionBoolean_GetResult");
static_assert(sizeof(LowEntryLatentActionBoolean_GetResult) == 0x000001, "Wrong size on LowEntryLatentActionBoolean_GetResult");
static_assert(offsetof(LowEntryLatentActionBoolean_GetResult, Result_) == 0x000000, "Member 'LowEntryLatentActionBoolean_GetResult::Result_' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryLatentActionBoolean.IsDone
// 0x0001 (0x0001 - 0x0000)
struct LowEntryLatentActionBoolean_IsDone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryLatentActionBoolean_IsDone) == 0x000001, "Wrong alignment on LowEntryLatentActionBoolean_IsDone");
static_assert(sizeof(LowEntryLatentActionBoolean_IsDone) == 0x000001, "Wrong size on LowEntryLatentActionBoolean_IsDone");
static_assert(offsetof(LowEntryLatentActionBoolean_IsDone, ReturnValue) == 0x000000, "Member 'LowEntryLatentActionBoolean_IsDone::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryLatentActionBoolean.WaitTillDone
// 0x0028 (0x0028 - 0x0000)
struct LowEntryLatentActionBoolean_WaitTillDone final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Result_;                                           // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C61[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryLatentActionBoolean_WaitTillDone) == 0x000008, "Wrong alignment on LowEntryLatentActionBoolean_WaitTillDone");
static_assert(sizeof(LowEntryLatentActionBoolean_WaitTillDone) == 0x000028, "Wrong size on LowEntryLatentActionBoolean_WaitTillDone");
static_assert(offsetof(LowEntryLatentActionBoolean_WaitTillDone, WorldContextObject) == 0x000000, "Member 'LowEntryLatentActionBoolean_WaitTillDone::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LowEntryLatentActionBoolean_WaitTillDone, LatentInfo) == 0x000008, "Member 'LowEntryLatentActionBoolean_WaitTillDone::LatentInfo' has a wrong offset!");
static_assert(offsetof(LowEntryLatentActionBoolean_WaitTillDone, Result_) == 0x000020, "Member 'LowEntryLatentActionBoolean_WaitTillDone::Result_' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryLatentActionFloat.Done
// 0x0008 (0x0008 - 0x0000)
struct LowEntryLatentActionFloat_Done final
{
public:
	double                                        Result_;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryLatentActionFloat_Done) == 0x000008, "Wrong alignment on LowEntryLatentActionFloat_Done");
static_assert(sizeof(LowEntryLatentActionFloat_Done) == 0x000008, "Wrong size on LowEntryLatentActionFloat_Done");
static_assert(offsetof(LowEntryLatentActionFloat_Done, Result_) == 0x000000, "Member 'LowEntryLatentActionFloat_Done::Result_' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryLatentActionFloat.GetResult
// 0x0008 (0x0008 - 0x0000)
struct LowEntryLatentActionFloat_GetResult final
{
public:
	double                                        Result_;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryLatentActionFloat_GetResult) == 0x000008, "Wrong alignment on LowEntryLatentActionFloat_GetResult");
static_assert(sizeof(LowEntryLatentActionFloat_GetResult) == 0x000008, "Wrong size on LowEntryLatentActionFloat_GetResult");
static_assert(offsetof(LowEntryLatentActionFloat_GetResult, Result_) == 0x000000, "Member 'LowEntryLatentActionFloat_GetResult::Result_' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryLatentActionFloat.IsDone
// 0x0001 (0x0001 - 0x0000)
struct LowEntryLatentActionFloat_IsDone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryLatentActionFloat_IsDone) == 0x000001, "Wrong alignment on LowEntryLatentActionFloat_IsDone");
static_assert(sizeof(LowEntryLatentActionFloat_IsDone) == 0x000001, "Wrong size on LowEntryLatentActionFloat_IsDone");
static_assert(offsetof(LowEntryLatentActionFloat_IsDone, ReturnValue) == 0x000000, "Member 'LowEntryLatentActionFloat_IsDone::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryLatentActionFloat.WaitTillDone
// 0x0028 (0x0028 - 0x0000)
struct LowEntryLatentActionFloat_WaitTillDone final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	double                                        Result_;                                           // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryLatentActionFloat_WaitTillDone) == 0x000008, "Wrong alignment on LowEntryLatentActionFloat_WaitTillDone");
static_assert(sizeof(LowEntryLatentActionFloat_WaitTillDone) == 0x000028, "Wrong size on LowEntryLatentActionFloat_WaitTillDone");
static_assert(offsetof(LowEntryLatentActionFloat_WaitTillDone, WorldContextObject) == 0x000000, "Member 'LowEntryLatentActionFloat_WaitTillDone::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LowEntryLatentActionFloat_WaitTillDone, LatentInfo) == 0x000008, "Member 'LowEntryLatentActionFloat_WaitTillDone::LatentInfo' has a wrong offset!");
static_assert(offsetof(LowEntryLatentActionFloat_WaitTillDone, Result_) == 0x000020, "Member 'LowEntryLatentActionFloat_WaitTillDone::Result_' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryLatentActionInteger.Done
// 0x0004 (0x0004 - 0x0000)
struct LowEntryLatentActionInteger_Done final
{
public:
	int32                                         Result_;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryLatentActionInteger_Done) == 0x000004, "Wrong alignment on LowEntryLatentActionInteger_Done");
static_assert(sizeof(LowEntryLatentActionInteger_Done) == 0x000004, "Wrong size on LowEntryLatentActionInteger_Done");
static_assert(offsetof(LowEntryLatentActionInteger_Done, Result_) == 0x000000, "Member 'LowEntryLatentActionInteger_Done::Result_' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryLatentActionInteger.GetResult
// 0x0004 (0x0004 - 0x0000)
struct LowEntryLatentActionInteger_GetResult final
{
public:
	int32                                         Result_;                                           // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryLatentActionInteger_GetResult) == 0x000004, "Wrong alignment on LowEntryLatentActionInteger_GetResult");
static_assert(sizeof(LowEntryLatentActionInteger_GetResult) == 0x000004, "Wrong size on LowEntryLatentActionInteger_GetResult");
static_assert(offsetof(LowEntryLatentActionInteger_GetResult, Result_) == 0x000000, "Member 'LowEntryLatentActionInteger_GetResult::Result_' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryLatentActionInteger.IsDone
// 0x0001 (0x0001 - 0x0000)
struct LowEntryLatentActionInteger_IsDone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryLatentActionInteger_IsDone) == 0x000001, "Wrong alignment on LowEntryLatentActionInteger_IsDone");
static_assert(sizeof(LowEntryLatentActionInteger_IsDone) == 0x000001, "Wrong size on LowEntryLatentActionInteger_IsDone");
static_assert(offsetof(LowEntryLatentActionInteger_IsDone, ReturnValue) == 0x000000, "Member 'LowEntryLatentActionInteger_IsDone::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryLatentActionInteger.WaitTillDone
// 0x0028 (0x0028 - 0x0000)
struct LowEntryLatentActionInteger_WaitTillDone final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Result_;                                           // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C66[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryLatentActionInteger_WaitTillDone) == 0x000008, "Wrong alignment on LowEntryLatentActionInteger_WaitTillDone");
static_assert(sizeof(LowEntryLatentActionInteger_WaitTillDone) == 0x000028, "Wrong size on LowEntryLatentActionInteger_WaitTillDone");
static_assert(offsetof(LowEntryLatentActionInteger_WaitTillDone, WorldContextObject) == 0x000000, "Member 'LowEntryLatentActionInteger_WaitTillDone::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LowEntryLatentActionInteger_WaitTillDone, LatentInfo) == 0x000008, "Member 'LowEntryLatentActionInteger_WaitTillDone::LatentInfo' has a wrong offset!");
static_assert(offsetof(LowEntryLatentActionInteger_WaitTillDone, Result_) == 0x000020, "Member 'LowEntryLatentActionInteger_WaitTillDone::Result_' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryLatentActionNone.IsDone
// 0x0001 (0x0001 - 0x0000)
struct LowEntryLatentActionNone_IsDone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryLatentActionNone_IsDone) == 0x000001, "Wrong alignment on LowEntryLatentActionNone_IsDone");
static_assert(sizeof(LowEntryLatentActionNone_IsDone) == 0x000001, "Wrong size on LowEntryLatentActionNone_IsDone");
static_assert(offsetof(LowEntryLatentActionNone_IsDone, ReturnValue) == 0x000000, "Member 'LowEntryLatentActionNone_IsDone::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryLatentActionNone.WaitTillDone
// 0x0020 (0x0020 - 0x0000)
struct LowEntryLatentActionNone_WaitTillDone final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryLatentActionNone_WaitTillDone) == 0x000008, "Wrong alignment on LowEntryLatentActionNone_WaitTillDone");
static_assert(sizeof(LowEntryLatentActionNone_WaitTillDone) == 0x000020, "Wrong size on LowEntryLatentActionNone_WaitTillDone");
static_assert(offsetof(LowEntryLatentActionNone_WaitTillDone, WorldContextObject) == 0x000000, "Member 'LowEntryLatentActionNone_WaitTillDone::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LowEntryLatentActionNone_WaitTillDone, LatentInfo) == 0x000008, "Member 'LowEntryLatentActionNone_WaitTillDone::LatentInfo' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryLatentActionObject.Done
// 0x0008 (0x0008 - 0x0000)
struct LowEntryLatentActionObject_Done final
{
public:
	class UObject*                                Result_;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryLatentActionObject_Done) == 0x000008, "Wrong alignment on LowEntryLatentActionObject_Done");
static_assert(sizeof(LowEntryLatentActionObject_Done) == 0x000008, "Wrong size on LowEntryLatentActionObject_Done");
static_assert(offsetof(LowEntryLatentActionObject_Done, Result_) == 0x000000, "Member 'LowEntryLatentActionObject_Done::Result_' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryLatentActionObject.GetResult
// 0x0008 (0x0008 - 0x0000)
struct LowEntryLatentActionObject_GetResult final
{
public:
	class UObject*                                Result_;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryLatentActionObject_GetResult) == 0x000008, "Wrong alignment on LowEntryLatentActionObject_GetResult");
static_assert(sizeof(LowEntryLatentActionObject_GetResult) == 0x000008, "Wrong size on LowEntryLatentActionObject_GetResult");
static_assert(offsetof(LowEntryLatentActionObject_GetResult, Result_) == 0x000000, "Member 'LowEntryLatentActionObject_GetResult::Result_' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryLatentActionObject.IsDone
// 0x0001 (0x0001 - 0x0000)
struct LowEntryLatentActionObject_IsDone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryLatentActionObject_IsDone) == 0x000001, "Wrong alignment on LowEntryLatentActionObject_IsDone");
static_assert(sizeof(LowEntryLatentActionObject_IsDone) == 0x000001, "Wrong size on LowEntryLatentActionObject_IsDone");
static_assert(offsetof(LowEntryLatentActionObject_IsDone, ReturnValue) == 0x000000, "Member 'LowEntryLatentActionObject_IsDone::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryLatentActionObject.WaitTillDone
// 0x0028 (0x0028 - 0x0000)
struct LowEntryLatentActionObject_WaitTillDone final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UObject*                                Result_;                                           // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryLatentActionObject_WaitTillDone) == 0x000008, "Wrong alignment on LowEntryLatentActionObject_WaitTillDone");
static_assert(sizeof(LowEntryLatentActionObject_WaitTillDone) == 0x000028, "Wrong size on LowEntryLatentActionObject_WaitTillDone");
static_assert(offsetof(LowEntryLatentActionObject_WaitTillDone, WorldContextObject) == 0x000000, "Member 'LowEntryLatentActionObject_WaitTillDone::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LowEntryLatentActionObject_WaitTillDone, LatentInfo) == 0x000008, "Member 'LowEntryLatentActionObject_WaitTillDone::LatentInfo' has a wrong offset!");
static_assert(offsetof(LowEntryLatentActionObject_WaitTillDone, Result_) == 0x000020, "Member 'LowEntryLatentActionObject_WaitTillDone::Result_' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryLatentActionString.Done
// 0x0010 (0x0010 - 0x0000)
struct LowEntryLatentActionString_Done final
{
public:
	class FString                                 Result_;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryLatentActionString_Done) == 0x000008, "Wrong alignment on LowEntryLatentActionString_Done");
static_assert(sizeof(LowEntryLatentActionString_Done) == 0x000010, "Wrong size on LowEntryLatentActionString_Done");
static_assert(offsetof(LowEntryLatentActionString_Done, Result_) == 0x000000, "Member 'LowEntryLatentActionString_Done::Result_' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryLatentActionString.GetResult
// 0x0010 (0x0010 - 0x0000)
struct LowEntryLatentActionString_GetResult final
{
public:
	class FString                                 Result_;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryLatentActionString_GetResult) == 0x000008, "Wrong alignment on LowEntryLatentActionString_GetResult");
static_assert(sizeof(LowEntryLatentActionString_GetResult) == 0x000010, "Wrong size on LowEntryLatentActionString_GetResult");
static_assert(offsetof(LowEntryLatentActionString_GetResult, Result_) == 0x000000, "Member 'LowEntryLatentActionString_GetResult::Result_' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryLatentActionString.IsDone
// 0x0001 (0x0001 - 0x0000)
struct LowEntryLatentActionString_IsDone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryLatentActionString_IsDone) == 0x000001, "Wrong alignment on LowEntryLatentActionString_IsDone");
static_assert(sizeof(LowEntryLatentActionString_IsDone) == 0x000001, "Wrong size on LowEntryLatentActionString_IsDone");
static_assert(offsetof(LowEntryLatentActionString_IsDone, ReturnValue) == 0x000000, "Member 'LowEntryLatentActionString_IsDone::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryLatentActionString.WaitTillDone
// 0x0030 (0x0030 - 0x0000)
struct LowEntryLatentActionString_WaitTillDone final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Result_;                                           // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryLatentActionString_WaitTillDone) == 0x000008, "Wrong alignment on LowEntryLatentActionString_WaitTillDone");
static_assert(sizeof(LowEntryLatentActionString_WaitTillDone) == 0x000030, "Wrong size on LowEntryLatentActionString_WaitTillDone");
static_assert(offsetof(LowEntryLatentActionString_WaitTillDone, WorldContextObject) == 0x000000, "Member 'LowEntryLatentActionString_WaitTillDone::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LowEntryLatentActionString_WaitTillDone, LatentInfo) == 0x000008, "Member 'LowEntryLatentActionString_WaitTillDone::LatentInfo' has a wrong offset!");
static_assert(offsetof(LowEntryLatentActionString_WaitTillDone, Result_) == 0x000020, "Member 'LowEntryLatentActionString_WaitTillDone::Result_' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryLong.CastToDoubleBytes
// 0x0008 (0x0008 - 0x0000)
struct LowEntryLong_CastToDoubleBytes final
{
public:
	class ULowEntryDouble*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryLong_CastToDoubleBytes) == 0x000008, "Wrong alignment on LowEntryLong_CastToDoubleBytes");
static_assert(sizeof(LowEntryLong_CastToDoubleBytes) == 0x000008, "Wrong size on LowEntryLong_CastToDoubleBytes");
static_assert(offsetof(LowEntryLong_CastToDoubleBytes, ReturnValue) == 0x000000, "Member 'LowEntryLong_CastToDoubleBytes::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryLong.CastToString
// 0x0010 (0x0010 - 0x0000)
struct LowEntryLong_CastToString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryLong_CastToString) == 0x000008, "Wrong alignment on LowEntryLong_CastToString");
static_assert(sizeof(LowEntryLong_CastToString) == 0x000010, "Wrong size on LowEntryLong_CastToString");
static_assert(offsetof(LowEntryLong_CastToString, ReturnValue) == 0x000000, "Member 'LowEntryLong_CastToString::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryLong.CreateClone
// 0x0008 (0x0008 - 0x0000)
struct LowEntryLong_CreateClone final
{
public:
	class ULowEntryLong*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryLong_CreateClone) == 0x000008, "Wrong alignment on LowEntryLong_CreateClone");
static_assert(sizeof(LowEntryLong_CreateClone) == 0x000008, "Wrong size on LowEntryLong_CreateClone");
static_assert(offsetof(LowEntryLong_CreateClone, ReturnValue) == 0x000000, "Member 'LowEntryLong_CreateClone::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryLong.DoubleBytes_GreaterThan
// 0x0010 (0x0010 - 0x0000)
struct LowEntryLong_DoubleBytes_GreaterThan final
{
public:
	class ULowEntryDouble*                        Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C6C[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryLong_DoubleBytes_GreaterThan) == 0x000008, "Wrong alignment on LowEntryLong_DoubleBytes_GreaterThan");
static_assert(sizeof(LowEntryLong_DoubleBytes_GreaterThan) == 0x000010, "Wrong size on LowEntryLong_DoubleBytes_GreaterThan");
static_assert(offsetof(LowEntryLong_DoubleBytes_GreaterThan, Value) == 0x000000, "Member 'LowEntryLong_DoubleBytes_GreaterThan::Value' has a wrong offset!");
static_assert(offsetof(LowEntryLong_DoubleBytes_GreaterThan, ReturnValue) == 0x000008, "Member 'LowEntryLong_DoubleBytes_GreaterThan::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryLong.DoubleBytes_LessThan
// 0x0010 (0x0010 - 0x0000)
struct LowEntryLong_DoubleBytes_LessThan final
{
public:
	class ULowEntryDouble*                        Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C6D[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryLong_DoubleBytes_LessThan) == 0x000008, "Wrong alignment on LowEntryLong_DoubleBytes_LessThan");
static_assert(sizeof(LowEntryLong_DoubleBytes_LessThan) == 0x000010, "Wrong size on LowEntryLong_DoubleBytes_LessThan");
static_assert(offsetof(LowEntryLong_DoubleBytes_LessThan, Value) == 0x000000, "Member 'LowEntryLong_DoubleBytes_LessThan::Value' has a wrong offset!");
static_assert(offsetof(LowEntryLong_DoubleBytes_LessThan, ReturnValue) == 0x000008, "Member 'LowEntryLong_DoubleBytes_LessThan::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryLong.Float_GreaterThan
// 0x0010 (0x0010 - 0x0000)
struct LowEntryLong_Float_GreaterThan final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C6E[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryLong_Float_GreaterThan) == 0x000008, "Wrong alignment on LowEntryLong_Float_GreaterThan");
static_assert(sizeof(LowEntryLong_Float_GreaterThan) == 0x000010, "Wrong size on LowEntryLong_Float_GreaterThan");
static_assert(offsetof(LowEntryLong_Float_GreaterThan, Value) == 0x000000, "Member 'LowEntryLong_Float_GreaterThan::Value' has a wrong offset!");
static_assert(offsetof(LowEntryLong_Float_GreaterThan, ReturnValue) == 0x000008, "Member 'LowEntryLong_Float_GreaterThan::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryLong.Float_LessThan
// 0x0010 (0x0010 - 0x0000)
struct LowEntryLong_Float_LessThan final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C6F[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryLong_Float_LessThan) == 0x000008, "Wrong alignment on LowEntryLong_Float_LessThan");
static_assert(sizeof(LowEntryLong_Float_LessThan) == 0x000010, "Wrong size on LowEntryLong_Float_LessThan");
static_assert(offsetof(LowEntryLong_Float_LessThan, Value) == 0x000000, "Member 'LowEntryLong_Float_LessThan::Value' has a wrong offset!");
static_assert(offsetof(LowEntryLong_Float_LessThan, ReturnValue) == 0x000008, "Member 'LowEntryLong_Float_LessThan::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryLong.GetBytes
// 0x0010 (0x0010 - 0x0000)
struct LowEntryLong_GetBytes final
{
public:
	TArray<uint8>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryLong_GetBytes) == 0x000008, "Wrong alignment on LowEntryLong_GetBytes");
static_assert(sizeof(LowEntryLong_GetBytes) == 0x000010, "Wrong size on LowEntryLong_GetBytes");
static_assert(offsetof(LowEntryLong_GetBytes, ReturnValue) == 0x000000, "Member 'LowEntryLong_GetBytes::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryLong.GetLong
// 0x0008 (0x0008 - 0x0000)
struct LowEntryLong_GetLong final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryLong_GetLong) == 0x000008, "Wrong alignment on LowEntryLong_GetLong");
static_assert(sizeof(LowEntryLong_GetLong) == 0x000008, "Wrong size on LowEntryLong_GetLong");
static_assert(offsetof(LowEntryLong_GetLong, ReturnValue) == 0x000000, "Member 'LowEntryLong_GetLong::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryLong.Integer_Add
// 0x0004 (0x0004 - 0x0000)
struct LowEntryLong_Integer_Add final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryLong_Integer_Add) == 0x000004, "Wrong alignment on LowEntryLong_Integer_Add");
static_assert(sizeof(LowEntryLong_Integer_Add) == 0x000004, "Wrong size on LowEntryLong_Integer_Add");
static_assert(offsetof(LowEntryLong_Integer_Add, Value) == 0x000000, "Member 'LowEntryLong_Integer_Add::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryLong.Integer_Equals
// 0x0008 (0x0008 - 0x0000)
struct LowEntryLong_Integer_Equals final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C70[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryLong_Integer_Equals) == 0x000004, "Wrong alignment on LowEntryLong_Integer_Equals");
static_assert(sizeof(LowEntryLong_Integer_Equals) == 0x000008, "Wrong size on LowEntryLong_Integer_Equals");
static_assert(offsetof(LowEntryLong_Integer_Equals, Value) == 0x000000, "Member 'LowEntryLong_Integer_Equals::Value' has a wrong offset!");
static_assert(offsetof(LowEntryLong_Integer_Equals, ReturnValue) == 0x000004, "Member 'LowEntryLong_Integer_Equals::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryLong.Integer_GreaterThan
// 0x0008 (0x0008 - 0x0000)
struct LowEntryLong_Integer_GreaterThan final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C71[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryLong_Integer_GreaterThan) == 0x000004, "Wrong alignment on LowEntryLong_Integer_GreaterThan");
static_assert(sizeof(LowEntryLong_Integer_GreaterThan) == 0x000008, "Wrong size on LowEntryLong_Integer_GreaterThan");
static_assert(offsetof(LowEntryLong_Integer_GreaterThan, Value) == 0x000000, "Member 'LowEntryLong_Integer_GreaterThan::Value' has a wrong offset!");
static_assert(offsetof(LowEntryLong_Integer_GreaterThan, ReturnValue) == 0x000004, "Member 'LowEntryLong_Integer_GreaterThan::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryLong.Integer_LessThan
// 0x0008 (0x0008 - 0x0000)
struct LowEntryLong_Integer_LessThan final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C72[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryLong_Integer_LessThan) == 0x000004, "Wrong alignment on LowEntryLong_Integer_LessThan");
static_assert(sizeof(LowEntryLong_Integer_LessThan) == 0x000008, "Wrong size on LowEntryLong_Integer_LessThan");
static_assert(offsetof(LowEntryLong_Integer_LessThan, Value) == 0x000000, "Member 'LowEntryLong_Integer_LessThan::Value' has a wrong offset!");
static_assert(offsetof(LowEntryLong_Integer_LessThan, ReturnValue) == 0x000004, "Member 'LowEntryLong_Integer_LessThan::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryLong.Integer_Subtract
// 0x0004 (0x0004 - 0x0000)
struct LowEntryLong_Integer_Subtract final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryLong_Integer_Subtract) == 0x000004, "Wrong alignment on LowEntryLong_Integer_Subtract");
static_assert(sizeof(LowEntryLong_Integer_Subtract) == 0x000004, "Wrong size on LowEntryLong_Integer_Subtract");
static_assert(offsetof(LowEntryLong_Integer_Subtract, Value) == 0x000000, "Member 'LowEntryLong_Integer_Subtract::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryLong.LongBytes_Add
// 0x0008 (0x0008 - 0x0000)
struct LowEntryLong_LongBytes_Add final
{
public:
	class ULowEntryLong*                          Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryLong_LongBytes_Add) == 0x000008, "Wrong alignment on LowEntryLong_LongBytes_Add");
static_assert(sizeof(LowEntryLong_LongBytes_Add) == 0x000008, "Wrong size on LowEntryLong_LongBytes_Add");
static_assert(offsetof(LowEntryLong_LongBytes_Add, Value) == 0x000000, "Member 'LowEntryLong_LongBytes_Add::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryLong.LongBytes_Equals
// 0x0010 (0x0010 - 0x0000)
struct LowEntryLong_LongBytes_Equals final
{
public:
	class ULowEntryLong*                          Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C73[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryLong_LongBytes_Equals) == 0x000008, "Wrong alignment on LowEntryLong_LongBytes_Equals");
static_assert(sizeof(LowEntryLong_LongBytes_Equals) == 0x000010, "Wrong size on LowEntryLong_LongBytes_Equals");
static_assert(offsetof(LowEntryLong_LongBytes_Equals, Value) == 0x000000, "Member 'LowEntryLong_LongBytes_Equals::Value' has a wrong offset!");
static_assert(offsetof(LowEntryLong_LongBytes_Equals, ReturnValue) == 0x000008, "Member 'LowEntryLong_LongBytes_Equals::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryLong.LongBytes_GreaterThan
// 0x0010 (0x0010 - 0x0000)
struct LowEntryLong_LongBytes_GreaterThan final
{
public:
	class ULowEntryLong*                          Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C74[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryLong_LongBytes_GreaterThan) == 0x000008, "Wrong alignment on LowEntryLong_LongBytes_GreaterThan");
static_assert(sizeof(LowEntryLong_LongBytes_GreaterThan) == 0x000010, "Wrong size on LowEntryLong_LongBytes_GreaterThan");
static_assert(offsetof(LowEntryLong_LongBytes_GreaterThan, Value) == 0x000000, "Member 'LowEntryLong_LongBytes_GreaterThan::Value' has a wrong offset!");
static_assert(offsetof(LowEntryLong_LongBytes_GreaterThan, ReturnValue) == 0x000008, "Member 'LowEntryLong_LongBytes_GreaterThan::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryLong.LongBytes_LessThan
// 0x0010 (0x0010 - 0x0000)
struct LowEntryLong_LongBytes_LessThan final
{
public:
	class ULowEntryLong*                          Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C75[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryLong_LongBytes_LessThan) == 0x000008, "Wrong alignment on LowEntryLong_LongBytes_LessThan");
static_assert(sizeof(LowEntryLong_LongBytes_LessThan) == 0x000010, "Wrong size on LowEntryLong_LongBytes_LessThan");
static_assert(offsetof(LowEntryLong_LongBytes_LessThan, Value) == 0x000000, "Member 'LowEntryLong_LongBytes_LessThan::Value' has a wrong offset!");
static_assert(offsetof(LowEntryLong_LongBytes_LessThan, ReturnValue) == 0x000008, "Member 'LowEntryLong_LongBytes_LessThan::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryLong.LongBytes_Subtract
// 0x0008 (0x0008 - 0x0000)
struct LowEntryLong_LongBytes_Subtract final
{
public:
	class ULowEntryLong*                          Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryLong_LongBytes_Subtract) == 0x000008, "Wrong alignment on LowEntryLong_LongBytes_Subtract");
static_assert(sizeof(LowEntryLong_LongBytes_Subtract) == 0x000008, "Wrong size on LowEntryLong_LongBytes_Subtract");
static_assert(offsetof(LowEntryLong_LongBytes_Subtract, Value) == 0x000000, "Member 'LowEntryLong_LongBytes_Subtract::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryLong.SetBytes
// 0x0018 (0x0018 - 0x0000)
struct LowEntryLong_SetBytes final
{
public:
	TArray<uint8>                                 ByteArray;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryLong_SetBytes) == 0x000008, "Wrong alignment on LowEntryLong_SetBytes");
static_assert(sizeof(LowEntryLong_SetBytes) == 0x000018, "Wrong size on LowEntryLong_SetBytes");
static_assert(offsetof(LowEntryLong_SetBytes, ByteArray) == 0x000000, "Member 'LowEntryLong_SetBytes::ByteArray' has a wrong offset!");
static_assert(offsetof(LowEntryLong_SetBytes, Param_Index) == 0x000010, "Member 'LowEntryLong_SetBytes::Param_Index' has a wrong offset!");
static_assert(offsetof(LowEntryLong_SetBytes, Length) == 0x000014, "Member 'LowEntryLong_SetBytes::Length' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryLong.SetLong
// 0x0008 (0x0008 - 0x0000)
struct LowEntryLong_SetLong final
{
public:
	int64                                         Value;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryLong_SetLong) == 0x000008, "Wrong alignment on LowEntryLong_SetLong");
static_assert(sizeof(LowEntryLong_SetLong) == 0x000008, "Wrong size on LowEntryLong_SetLong");
static_assert(offsetof(LowEntryLong_SetLong, Value) == 0x000000, "Member 'LowEntryLong_SetLong::Value' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryParsedHashcash.GetBits
// 0x0004 (0x0004 - 0x0000)
struct LowEntryParsedHashcash_GetBits final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryParsedHashcash_GetBits) == 0x000004, "Wrong alignment on LowEntryParsedHashcash_GetBits");
static_assert(sizeof(LowEntryParsedHashcash_GetBits) == 0x000004, "Wrong size on LowEntryParsedHashcash_GetBits");
static_assert(offsetof(LowEntryParsedHashcash_GetBits, ReturnValue) == 0x000000, "Member 'LowEntryParsedHashcash_GetBits::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryParsedHashcash.GetDate
// 0x0008 (0x0008 - 0x0000)
struct LowEntryParsedHashcash_GetDate final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryParsedHashcash_GetDate) == 0x000008, "Wrong alignment on LowEntryParsedHashcash_GetDate");
static_assert(sizeof(LowEntryParsedHashcash_GetDate) == 0x000008, "Wrong size on LowEntryParsedHashcash_GetDate");
static_assert(offsetof(LowEntryParsedHashcash_GetDate, ReturnValue) == 0x000000, "Member 'LowEntryParsedHashcash_GetDate::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryParsedHashcash.GetResource
// 0x0010 (0x0010 - 0x0000)
struct LowEntryParsedHashcash_GetResource final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryParsedHashcash_GetResource) == 0x000008, "Wrong alignment on LowEntryParsedHashcash_GetResource");
static_assert(sizeof(LowEntryParsedHashcash_GetResource) == 0x000010, "Wrong size on LowEntryParsedHashcash_GetResource");
static_assert(offsetof(LowEntryParsedHashcash_GetResource, ReturnValue) == 0x000000, "Member 'LowEntryParsedHashcash_GetResource::ReturnValue' has a wrong offset!");

// Function LowEntryExtendedStandardLibrary.LowEntryParsedHashcash.ToString
// 0x0010 (0x0010 - 0x0000)
struct LowEntryParsedHashcash_ToString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryParsedHashcash_ToString) == 0x000008, "Wrong alignment on LowEntryParsedHashcash_ToString");
static_assert(sizeof(LowEntryParsedHashcash_ToString) == 0x000010, "Wrong size on LowEntryParsedHashcash_ToString");
static_assert(offsetof(LowEntryParsedHashcash_ToString, ReturnValue) == 0x000000, "Member 'LowEntryParsedHashcash_ToString::ReturnValue' has a wrong offset!");

}

