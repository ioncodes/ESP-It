#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: IMapLayoutLoading

#include "Basic.hpp"

#include "IMapLayoutLoading_classes.hpp"
#include "IMapLayoutLoading_parameters.hpp"


namespace SDK
{

// Function IMapLayoutLoading.IMapLayoutLoading_C.SpawnActionPlaceableStatic
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Class_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Activated                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_PlaceableStaticProp_C*        SpawnedActor                                           (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IIMapLayoutLoading_C::SpawnActionPlaceableStatic(class UClass* Class_0, const struct FTransform& Transform, bool Activated, class ABP_PlaceableStaticProp_C** SpawnedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IMapLayoutLoading_C", "SpawnActionPlaceableStatic");

	Params::IMapLayoutLoading_C_SpawnActionPlaceableStatic Parms{};

	Parms.Class_0 = Class_0;
	Parms.Transform = std::move(Transform);
	Parms.Activated = Activated;

	UObject::ProcessEvent(Func, &Parms);

	if (SpawnedActor != nullptr)
		*SpawnedActor = Parms.SpawnedActor;
}


// Function IMapLayoutLoading.IMapLayoutLoading_C.SpawnActionProp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Class_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    StartAwake                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsFrozen                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Activated                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AB_StaticMeshProp_C*              SpawnedActor                                           (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IIMapLayoutLoading_C::SpawnActionProp(class UClass* Class_0, const struct FTransform& Transform, bool StartAwake, bool IsFrozen, bool Activated, class AB_StaticMeshProp_C** SpawnedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IMapLayoutLoading_C", "SpawnActionProp");

	Params::IMapLayoutLoading_C_SpawnActionProp Parms{};

	Parms.Class_0 = Class_0;
	Parms.Transform = std::move(Transform);
	Parms.StartAwake = StartAwake;
	Parms.IsFrozen = IsFrozen;
	Parms.Activated = Activated;

	UObject::ProcessEvent(Func, &Parms);

	if (SpawnedActor != nullptr)
		*SpawnedActor = Parms.SpawnedActor;
}


// Function IMapLayoutLoading.IMapLayoutLoading_C.SpawnPlaceableLight
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Class_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Activated                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_PlaceableLight_C*             SpawnedActor                                           (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IIMapLayoutLoading_C::SpawnPlaceableLight(class UClass* Class_0, const struct FTransform& Transform, const struct FVector& Color, bool Activated, class ABP_PlaceableLight_C** SpawnedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IMapLayoutLoading_C", "SpawnPlaceableLight");

	Params::IMapLayoutLoading_C_SpawnPlaceableLight Parms{};

	Parms.Class_0 = Class_0;
	Parms.Transform = std::move(Transform);
	Parms.Color = std::move(Color);
	Parms.Activated = Activated;

	UObject::ProcessEvent(Func, &Parms);

	if (SpawnedActor != nullptr)
		*SpawnedActor = Parms.SpawnedActor;
}


// Function IMapLayoutLoading.IMapLayoutLoading_C.SpawnPlaceableStatic
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Class_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_PlaceableStaticProp_C*        SpawnedActor                                           (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IIMapLayoutLoading_C::SpawnPlaceableStatic(class UClass* Class_0, const struct FTransform& Transform, class ABP_PlaceableStaticProp_C** SpawnedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IMapLayoutLoading_C", "SpawnPlaceableStatic");

	Params::IMapLayoutLoading_C_SpawnPlaceableStatic Parms{};

	Parms.Class_0 = Class_0;
	Parms.Transform = std::move(Transform);

	UObject::ProcessEvent(Func, &Parms);

	if (SpawnedActor != nullptr)
		*SpawnedActor = Parms.SpawnedActor;
}


// Function IMapLayoutLoading.IMapLayoutLoading_C.SpawnProp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Class_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    StartAwake                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsFrozen                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AB_StaticMeshProp_C*              SpawnedActor                                           (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IIMapLayoutLoading_C::SpawnProp(class UClass* Class_0, const struct FTransform& Transform, bool StartAwake, bool IsFrozen, class AB_StaticMeshProp_C** SpawnedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IMapLayoutLoading_C", "SpawnProp");

	Params::IMapLayoutLoading_C_SpawnProp Parms{};

	Parms.Class_0 = Class_0;
	Parms.Transform = std::move(Transform);
	Parms.StartAwake = StartAwake;
	Parms.IsFrozen = IsFrozen;

	UObject::ProcessEvent(Func, &Parms);

	if (SpawnedActor != nullptr)
		*SpawnedActor = Parms.SpawnedActor;
}


// Function IMapLayoutLoading.IMapLayoutLoading_C.SpawnSwitch
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Class_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    BreaksAfterUse                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_Switch_C*                     SpawnedActor                                           (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IIMapLayoutLoading_C::SpawnSwitch(class UClass* Class_0, const struct FTransform& Transform, bool BreaksAfterUse, class ABP_Switch_C** SpawnedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IMapLayoutLoading_C", "SpawnSwitch");

	Params::IMapLayoutLoading_C_SpawnSwitch Parms{};

	Parms.Class_0 = Class_0;
	Parms.Transform = std::move(Transform);
	Parms.BreaksAfterUse = BreaksAfterUse;

	UObject::ProcessEvent(Func, &Parms);

	if (SpawnedActor != nullptr)
		*SpawnedActor = Parms.SpawnedActor;
}

}

