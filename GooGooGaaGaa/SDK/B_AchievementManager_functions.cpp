#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_AchievementManager

#include "Basic.hpp"

#include "B_AchievementManager_classes.hpp"
#include "B_AchievementManager_parameters.hpp"


namespace SDK
{

// Function B_AchievementManager.B_AchievementManager_C.Achievement Is Not Owned
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AB_PlayerState_C*                 PlayerState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FName                             Param_Name                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsNotOwned                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_AchievementManager_C::Achievement_Is_Not_Owned(class AB_PlayerState_C* PlayerState, class FName Param_Name, bool* IsNotOwned)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_AchievementManager_C", "Achievement Is Not Owned");

	Params::B_AchievementManager_C_Achievement_Is_Not_Owned Parms{};

	Parms.PlayerState = PlayerState;
	Parms.Param_Name = Param_Name;

	UObject::ProcessEvent(Func, &Parms);

	if (IsNotOwned != nullptr)
		*IsNotOwned = Parms.IsNotOwned;
}


// Function B_AchievementManager.B_AchievementManager_C.Activate Achievement
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AB_PlayerState_C*                 PlayerState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// E_Achievements                          AchievementType                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_AchievementManager_C::Activate_Achievement(class AB_PlayerState_C* PlayerState, E_Achievements AchievementType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_AchievementManager_C", "Activate Achievement");

	Params::B_AchievementManager_C_Activate_Achievement Parms{};

	Parms.PlayerState = PlayerState;
	Parms.AchievementType = AchievementType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_AchievementManager.B_AchievementManager_C.Activate By Id
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AB_PlayerState_C*                 PlayerState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// E_Achievements                          Achievement_Type                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PropId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_AchievementManager_C::Activate_By_Id(class AB_PlayerState_C* PlayerState, E_Achievements Achievement_Type, int32 PropId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_AchievementManager_C", "Activate By Id");

	Params::B_AchievementManager_C_Activate_By_Id Parms{};

	Parms.PlayerState = PlayerState;
	Parms.Achievement_Type = Achievement_Type;
	Parms.PropId = PropId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_AchievementManager.B_AchievementManager_C.Check Achievement Validity
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AB_PlayerState_C*                 PlayerState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UB_Achievement_C*                 Achievement                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_AchievementManager_C::Check_Achievement_Validity(class AB_PlayerState_C* PlayerState, class UB_Achievement_C* Achievement, bool* IsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_AchievementManager_C", "Check Achievement Validity");

	Params::B_AchievementManager_C_Check_Achievement_Validity Parms{};

	Parms.PlayerState = PlayerState;
	Parms.Achievement = Achievement;

	UObject::ProcessEvent(Func, &Parms);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;
}


// Function B_AchievementManager.B_AchievementManager_C.Check Prop Achievements
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PropId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AB_PlayerState_C*                 PlayerState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AB_SeekGameState_C*               SeekGameState                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UB_AchievementManager_C::Check_Prop_Achievements(int32 PropId, class AB_PlayerState_C* PlayerState, class AB_SeekGameState_C* SeekGameState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_AchievementManager_C", "Check Prop Achievements");

	Params::B_AchievementManager_C_Check_Prop_Achievements Parms{};

	Parms.PropId = PropId;
	Parms.PlayerState = PlayerState;
	Parms.SeekGameState = SeekGameState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_AchievementManager.B_AchievementManager_C.CheckDefaultNrOfActivePlayers
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Sufficient_Players                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_AchievementManager_C::CheckDefaultNrOfActivePlayers(bool* Sufficient_Players)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_AchievementManager_C", "CheckDefaultNrOfActivePlayers");

	Params::B_AchievementManager_C_CheckDefaultNrOfActivePlayers Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Sufficient_Players != nullptr)
		*Sufficient_Players = Parms.Sufficient_Players;
}


// Function B_AchievementManager.B_AchievementManager_C.CheckNrOfActivePlayers
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Sufficient_Players                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_AchievementManager_C::CheckNrOfActivePlayers(bool* Sufficient_Players)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_AchievementManager_C", "CheckNrOfActivePlayers");

	Params::B_AchievementManager_C_CheckNrOfActivePlayers Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Sufficient_Players != nullptr)
		*Sufficient_Players = Parms.Sufficient_Players;
}


// Function B_AchievementManager.B_AchievementManager_C.Create New Achievement Instance
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UB_Achievement_C*                 Model                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UB_Achievement_C*                 Achievement                                            (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_AchievementManager_C::Create_New_Achievement_Instance(class UB_Achievement_C* Model, class UB_Achievement_C** Achievement, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_AchievementManager_C", "Create New Achievement Instance");

	Params::B_AchievementManager_C_Create_New_Achievement_Instance Parms{};

	Parms.Model = Model;

	UObject::ProcessEvent(Func, &Parms);

	if (Achievement != nullptr)
		*Achievement = Parms.Achievement;

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function B_AchievementManager.B_AchievementManager_C.Deactivate Achievement
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AB_PlayerState_C*                 PlayerState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// E_Achievements                          AchievementType                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_AchievementManager_C::Deactivate_Achievement(class AB_PlayerState_C* PlayerState, E_Achievements AchievementType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_AchievementManager_C", "Deactivate Achievement");

	Params::B_AchievementManager_C_Deactivate_Achievement Parms{};

	Parms.PlayerState = PlayerState;
	Parms.AchievementType = AchievementType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_AchievementManager.B_AchievementManager_C.ExecuteUbergraph_B_AchievementManager
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_AchievementManager_C::ExecuteUbergraph_B_AchievementManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_AchievementManager_C", "ExecuteUbergraph_B_AchievementManager");

	Params::B_AchievementManager_C_ExecuteUbergraph_B_AchievementManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_AchievementManager.B_AchievementManager_C.Get AchBarrelRoll Ids
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<int32>                           IDs                                                    (Parm, OutParm)

void UB_AchievementManager_C::Get_AchBarrelRoll_Ids(TArray<int32>* IDs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_AchievementManager_C", "Get AchBarrelRoll Ids");

	Params::B_AchievementManager_C_Get_AchBarrelRoll_Ids Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IDs != nullptr)
		*IDs = std::move(Parms.IDs);
}


// Function B_AchievementManager.B_AchievementManager_C.Get AchBig Ids
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<int32>                           IDs                                                    (Parm, OutParm)

void UB_AchievementManager_C::Get_AchBig_Ids(TArray<int32>* IDs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_AchievementManager_C", "Get AchBig Ids");

	Params::B_AchievementManager_C_Get_AchBig_Ids Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IDs != nullptr)
		*IDs = std::move(Parms.IDs);
}


// Function B_AchievementManager.B_AchievementManager_C.Get AchFruitSalad Ids
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<int32>                           IDs                                                    (Parm, OutParm)

void UB_AchievementManager_C::Get_AchFruitSalad_Ids(TArray<int32>* IDs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_AchievementManager_C", "Get AchFruitSalad Ids");

	Params::B_AchievementManager_C_Get_AchFruitSalad_Ids Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IDs != nullptr)
		*IDs = std::move(Parms.IDs);
}


// Function B_AchievementManager.B_AchievementManager_C.Get Achievement Key
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UB_Achievement_C*                 Achievement                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// E_Achievements                          Key                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_AchievementManager_C::Get_Achievement_Key(class UB_Achievement_C* Achievement, E_Achievements* Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_AchievementManager_C", "Get Achievement Key");

	Params::B_AchievementManager_C_Get_Achievement_Key Parms{};

	Parms.Achievement = Achievement;

	UObject::ProcessEvent(Func, &Parms);

	if (Key != nullptr)
		*Key = Parms.Key;
}


// Function B_AchievementManager.B_AchievementManager_C.Get AchPhoto Ids
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<int32>                           IDs                                                    (Parm, OutParm)

void UB_AchievementManager_C::Get_AchPhoto_Ids(TArray<int32>* IDs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_AchievementManager_C", "Get AchPhoto Ids");

	Params::B_AchievementManager_C_Get_AchPhoto_Ids Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IDs != nullptr)
		*IDs = std::move(Parms.IDs);
}


// Function B_AchievementManager.B_AchievementManager_C.Get Divider
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Divider                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_AchievementManager_C::Get_Divider(int32 Param_Index, int32* Divider)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_AchievementManager_C", "Get Divider");

	Params::B_AchievementManager_C_Get_Divider Parms{};

	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);

	if (Divider != nullptr)
		*Divider = Parms.Divider;
}


// Function B_AchievementManager.B_AchievementManager_C.Get Player Achievement
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AB_PlayerState_C*                 PlayerState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// E_Achievements                          Achievement_Type                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UB_Achievement_C*                 Achievement                                            (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_AchievementManager_C::Get_Player_Achievement(class AB_PlayerState_C* PlayerState, E_Achievements Achievement_Type, class UB_Achievement_C** Achievement, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_AchievementManager_C", "Get Player Achievement");

	Params::B_AchievementManager_C_Get_Player_Achievement Parms{};

	Parms.PlayerState = PlayerState;
	Parms.Achievement_Type = Achievement_Type;

	UObject::ProcessEvent(Func, &Parms);

	if (Achievement != nullptr)
		*Achievement = Parms.Achievement;

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function B_AchievementManager.B_AchievementManager_C.Give Achievement
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AB_PlayerState_C*                 PlayerState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// E_Achievements                          Achievement_Type                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_AchievementManager_C::Give_Achievement(class AB_PlayerState_C* PlayerState, E_Achievements Achievement_Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_AchievementManager_C", "Give Achievement");

	Params::B_AchievementManager_C_Give_Achievement Parms{};

	Parms.PlayerState = PlayerState;
	Parms.Achievement_Type = Achievement_Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_AchievementManager.B_AchievementManager_C.Initialize GS
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AB_PlayerState_C*                 Player_State                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UB_AchievementManager_C::Initialize_GS(class AB_PlayerState_C* Player_State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_AchievementManager_C", "Initialize GS");

	Params::B_AchievementManager_C_Initialize_GS Parms{};

	Parms.Player_State = Player_State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_AchievementManager.B_AchievementManager_C.Initialize Player Achievement List
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AB_PlayerState_C*                 PlayerState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UB_AchievementManager_C::Initialize_Player_Achievement_List(class AB_PlayerState_C* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_AchievementManager_C", "Initialize Player Achievement List");

	Params::B_AchievementManager_C_Initialize_Player_Achievement_List Parms{};

	Parms.PlayerState = PlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_AchievementManager.B_AchievementManager_C.Reset Or Disable Prop Achievements
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PropId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AB_PlayerState_C*                 PlayerState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AB_SeekGameState_C*               SeekGameState                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UB_AchievementManager_C::Reset_Or_Disable_Prop_Achievements(int32 PropId, class AB_PlayerState_C* PlayerState, class AB_SeekGameState_C* SeekGameState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_AchievementManager_C", "Reset Or Disable Prop Achievements");

	Params::B_AchievementManager_C_Reset_Or_Disable_Prop_Achievements Parms{};

	Parms.PropId = PropId;
	Parms.PlayerState = PlayerState;
	Parms.SeekGameState = SeekGameState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_AchievementManager.B_AchievementManager_C.Set Achievement Conversion Map
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UB_AchievementManager_C::Set_Achievement_Conversion_Map()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_AchievementManager_C", "Set Achievement Conversion Map");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_AchievementManager.B_AchievementManager_C.Set Individual Achievement Content
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UB_Achievement_C*                 Achievement                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// E_Achievements                          Achievement_Type                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Starts_Active                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Requires_Player_Survival                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Mobification                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Hide_and_Seek                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Hunt_a_Hag                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Fill_the_Pot                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Target_Value                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Required_Player_Amount                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_AchievementManager_C::Set_Individual_Achievement_Content(class UB_Achievement_C* Achievement, E_Achievements Achievement_Type, bool Starts_Active, bool Requires_Player_Survival, bool Mobification, bool Hide_and_Seek, bool Hunt_a_Hag, bool Fill_the_Pot, int32 Target_Value, int32 Required_Player_Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_AchievementManager_C", "Set Individual Achievement Content");

	Params::B_AchievementManager_C_Set_Individual_Achievement_Content Parms{};

	Parms.Achievement = Achievement;
	Parms.Achievement_Type = Achievement_Type;
	Parms.Starts_Active = Starts_Active;
	Parms.Requires_Player_Survival = Requires_Player_Survival;
	Parms.Mobification = Mobification;
	Parms.Hide_and_Seek = Hide_and_Seek;
	Parms.Hunt_a_Hag = Hunt_a_Hag;
	Parms.Fill_the_Pot = Fill_the_Pot;
	Parms.Target_Value = Target_Value;
	Parms.Required_Player_Amount = Required_Player_Amount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_AchievementManager.B_AchievementManager_C.Set Level Name List
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UB_AchievementManager_C::Set_Level_Name_List()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_AchievementManager_C", "Set Level Name List");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_AchievementManager.B_AchievementManager_C.Set Name Conversion Map
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UB_AchievementManager_C::Set_Name_Conversion_Map()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_AchievementManager_C", "Set Name Conversion Map");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_AchievementManager.B_AchievementManager_C.Set Valid Game Modes
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UB_Achievement_C*                 Achievement                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Mobification                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Hide_and_Seek                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Hunt_a_Hag                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Fill_the_Pot                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_AchievementManager_C::Set_Valid_Game_Modes(class UB_Achievement_C* Achievement, bool Mobification, bool Hide_and_Seek, bool Hunt_a_Hag, bool Fill_the_Pot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_AchievementManager_C", "Set Valid Game Modes");

	Params::B_AchievementManager_C_Set_Valid_Game_Modes Parms{};

	Parms.Achievement = Achievement;
	Parms.Mobification = Mobification;
	Parms.Hide_and_Seek = Hide_and_Seek;
	Parms.Hunt_a_Hag = Hunt_a_Hag;
	Parms.Fill_the_Pot = Fill_the_Pot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_AchievementManager.B_AchievementManager_C.SetAchievementContent
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UB_GameInstance_C*                Param_GameInstance                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AB_GameMode_C*                    Param_GameMode                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UB_AchievementManager_C::SetAchievementContent(class UB_GameInstance_C* Param_GameInstance, class AB_GameMode_C* Param_GameMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_AchievementManager_C", "SetAchievementContent");

	Params::B_AchievementManager_C_SetAchievementContent Parms{};

	Parms.Param_GameInstance = Param_GameInstance;
	Parms.Param_GameMode = Param_GameMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_AchievementManager.B_AchievementManager_C.Test AchFruitSalad Ids
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PropId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UB_Achievement_C*                 Achievement                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Give_Achievement                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_AchievementManager_C::Test_AchFruitSalad_Ids(int32 PropId, class UB_Achievement_C* Achievement, bool* Give_Achievement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_AchievementManager_C", "Test AchFruitSalad Ids");

	Params::B_AchievementManager_C_Test_AchFruitSalad_Ids Parms{};

	Parms.PropId = PropId;
	Parms.Achievement = Achievement;

	UObject::ProcessEvent(Func, &Parms);

	if (Give_Achievement != nullptr)
		*Give_Achievement = Parms.Give_Achievement;
}


// Function B_AchievementManager.B_AchievementManager_C.Test Amount Of Won Maps
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   AllMapsCode                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    GiveAchievement                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_AchievementManager_C::Test_Amount_Of_Won_Maps(int32 AllMapsCode, bool* GiveAchievement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_AchievementManager_C", "Test Amount Of Won Maps");

	Params::B_AchievementManager_C_Test_Amount_Of_Won_Maps Parms{};

	Parms.AllMapsCode = AllMapsCode;

	UObject::ProcessEvent(Func, &Parms);

	if (GiveAchievement != nullptr)
		*GiveAchievement = Parms.GiveAchievement;
}


// Function B_AchievementManager.B_AchievementManager_C.Test Hunter Catch in Air
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FDateTime                        StartInAir                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FDateTime                        EndInAir                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AB_PlayerState_C*                 PlayerState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UB_Achievement_C*                 Achievement                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Give_Achievement                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_AchievementManager_C::Test_Hunter_Catch_in_Air(const struct FDateTime& StartInAir, const struct FDateTime& EndInAir, class AB_PlayerState_C* PlayerState, class UB_Achievement_C* Achievement, bool* Give_Achievement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_AchievementManager_C", "Test Hunter Catch in Air");

	Params::B_AchievementManager_C_Test_Hunter_Catch_in_Air Parms{};

	Parms.StartInAir = std::move(StartInAir);
	Parms.EndInAir = std::move(EndInAir);
	Parms.PlayerState = PlayerState;
	Parms.Achievement = Achievement;

	UObject::ProcessEvent(Func, &Parms);

	if (Give_Achievement != nullptr)
		*Give_Achievement = Parms.Give_Achievement;
}


// Function B_AchievementManager.B_AchievementManager_C.Test Luaq Statue Photo
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Param_PhotoTarget                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AB_PlayerState_C*                 Player_State                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UB_Achievement_C*                 Achievement                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Give_Achievement                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_AchievementManager_C::Test_Luaq_Statue_Photo(class AActor* Param_PhotoTarget, class AB_PlayerState_C* Player_State, class UB_Achievement_C* Achievement, bool* Give_Achievement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_AchievementManager_C", "Test Luaq Statue Photo");

	Params::B_AchievementManager_C_Test_Luaq_Statue_Photo Parms{};

	Parms.Param_PhotoTarget = Param_PhotoTarget;
	Parms.Player_State = Player_State;
	Parms.Achievement = Achievement;

	UObject::ProcessEvent(Func, &Parms);

	if (Give_Achievement != nullptr)
		*Give_Achievement = Parms.Give_Achievement;
}


// Function B_AchievementManager.B_AchievementManager_C.Test Match Value
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UB_Achievement_C*                 Achievement                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Give_Achievement                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_AchievementManager_C::Test_Match_Value(class UB_Achievement_C* Achievement, bool* Give_Achievement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_AchievementManager_C", "Test Match Value");

	Params::B_AchievementManager_C_Test_Match_Value Parms{};

	Parms.Achievement = Achievement;

	UObject::ProcessEvent(Func, &Parms);

	if (Give_Achievement != nullptr)
		*Give_Achievement = Parms.Give_Achievement;
}


// Function B_AchievementManager.B_AchievementManager_C.Test Non-Survival Achievement
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_Achievements                          AchievementType                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AB_PlayerState_C*                 PlayerState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   PropId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  TravelDistance                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           ControlledProp                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FDateTime                        StartHunterInAir                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FDateTime                        EndHunterInAir                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_PhotoTarget                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UB_AchievementManager_C::Test_NonMinusSurvival_Achievement(E_Achievements AchievementType, class AB_PlayerState_C* PlayerState, int32 PropId, double TravelDistance, class AActor* ControlledProp, const struct FDateTime& StartHunterInAir, const struct FDateTime& EndHunterInAir, class AActor* Param_PhotoTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_AchievementManager_C", "Test Non-Survival Achievement");

	Params::B_AchievementManager_C_Test_NonMinusSurvival_Achievement Parms{};

	Parms.AchievementType = AchievementType;
	Parms.PlayerState = PlayerState;
	Parms.PropId = PropId;
	Parms.TravelDistance = TravelDistance;
	Parms.ControlledProp = ControlledProp;
	Parms.StartHunterInAir = std::move(StartHunterInAir);
	Parms.EndHunterInAir = std::move(EndHunterInAir);
	Parms.Param_PhotoTarget = Param_PhotoTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_AchievementManager.B_AchievementManager_C.Test Survival Achievement
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AB_PlayerState_C*                 PlayerState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UB_Achievement_C*                 Achievement                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UB_AchievementManager_C::Test_Survival_Achievement(class AB_PlayerState_C* PlayerState, class UB_Achievement_C* Achievement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_AchievementManager_C", "Test Survival Achievement");

	Params::B_AchievementManager_C_Test_Survival_Achievement Parms{};

	Parms.PlayerState = PlayerState;
	Parms.Achievement = Achievement;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_AchievementManager.B_AchievementManager_C.Test Travel Distance
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UB_Achievement_C*                 Achievement                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  NewTravelDistance                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Barrel                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    GiveAchievement                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_AchievementManager_C::Test_Travel_Distance(class UB_Achievement_C* Achievement, double NewTravelDistance, class AActor* Barrel, bool* GiveAchievement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_AchievementManager_C", "Test Travel Distance");

	Params::B_AchievementManager_C_Test_Travel_Distance Parms{};

	Parms.Achievement = Achievement;
	Parms.NewTravelDistance = NewTravelDistance;
	Parms.Barrel = Barrel;

	UObject::ProcessEvent(Func, &Parms);

	if (GiveAchievement != nullptr)
		*GiveAchievement = Parms.GiveAchievement;
}


// Function B_AchievementManager.B_AchievementManager_C.Update Map Stat
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Current_Level                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class AB_PlayerState_C*                 Player_State                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UB_AchievementManager_C::Update_Map_Stat(const class FString& Current_Level, class AB_PlayerState_C* Player_State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_AchievementManager_C", "Update Map Stat");

	Params::B_AchievementManager_C_Update_Map_Stat Parms{};

	Parms.Current_Level = std::move(Current_Level);
	Parms.Player_State = Player_State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_AchievementManager.B_AchievementManager_C.Update Pickup Stat
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AB_PlayerState_C*                 PlayerState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UB_AchievementManager_C::Update_Pickup_Stat(class AB_PlayerState_C* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_AchievementManager_C", "Update Pickup Stat");

	Params::B_AchievementManager_C_Update_Pickup_Stat Parms{};

	Parms.PlayerState = PlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_AchievementManager.B_AchievementManager_C.GetDefaultCompletionRequiredAmountOfPlayers
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   DefaultRequiredAmount                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_AchievementManager_C::GetDefaultCompletionRequiredAmountOfPlayers(int32* DefaultRequiredAmount) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_AchievementManager_C", "GetDefaultCompletionRequiredAmountOfPlayers");

	Params::B_AchievementManager_C_GetDefaultCompletionRequiredAmountOfPlayers Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DefaultRequiredAmount != nullptr)
		*DefaultRequiredAmount = Parms.DefaultRequiredAmount;
}


// Function B_AchievementManager.B_AchievementManager_C.GetStatsAndAchievementsManager
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UB_NewStatsAndAchievementsManager_C*Result                                                 (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UB_AchievementManager_C::GetStatsAndAchievementsManager(class UB_NewStatsAndAchievementsManager_C** Result) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_AchievementManager_C", "GetStatsAndAchievementsManager");

	Params::B_AchievementManager_C_GetStatsAndAchievementsManager Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}

}

