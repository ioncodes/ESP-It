#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MetasoundFrontend

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum MetasoundFrontend.ESetParamResult
// NumValues: 0x0003
enum class ESetParamResult : uint8
{
	Succeeded                                = 0,
	Failed                                   = 1,
	ESetParamResult_MAX                      = 2,
};

// Enum MetasoundFrontend.EMetasoundFrontendVertexAccessType
// NumValues: 0x0004
enum class EMetasoundFrontendVertexAccessType : uint32
{
	Reference                                = 0,
	Value                                    = 1,
	Unset                                    = 2,
	EMetasoundFrontendVertexAccessType_MAX   = 3,
};

// Enum MetasoundFrontend.EMetasoundFrontendClassType
// NumValues: 0x000C
enum class EMetasoundFrontendClassType : uint8
{
	External                                 = 0,
	Graph                                    = 1,
	Input                                    = 2,
	Output                                   = 3,
	Literal                                  = 4,
	Variable                                 = 5,
	VariableDeferredAccessor                 = 6,
	VariableAccessor                         = 7,
	VariableMutator                          = 8,
	Template                                 = 9,
	Invalid                                  = 10,
	EMetasoundFrontendClassType_MAX          = 11,
};

// Enum MetasoundFrontend.EMetasoundFrontendNodeStyleDisplayVisibility
// NumValues: 0x0003
enum class EMetasoundFrontendNodeStyleDisplayVisibility : uint8
{
	Visible                                  = 0,
	Hidden                                   = 1,
	EMetasoundFrontendNodeStyleDisplayVisibility_MAX = 2,
};

// Enum MetasoundFrontend.EMetasoundFrontendLiteralType
// NumValues: 0x000E
enum class EMetasoundFrontendLiteralType : uint8
{
	None                                     = 0,
	Boolean                                  = 1,
	Integer                                  = 2,
	Float                                    = 3,
	String                                   = 4,
	UObject                                  = 5,
	NoneArray                                = 6,
	BooleanArray                             = 7,
	IntegerArray                             = 8,
	FloatArray                               = 9,
	StringArray                              = 10,
	UObjectArray                             = 11,
	Invalid                                  = 12,
	EMetasoundFrontendLiteralType_MAX        = 13,
};

// ScriptStruct MetasoundFrontend.MetasoundFrontendVersionNumber
// 0x0008 (0x0008 - 0x0000)
struct FMetasoundFrontendVersionNumber final
{
public:
	int32                                         Major;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minor;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMetasoundFrontendVersionNumber) == 0x000004, "Wrong alignment on FMetasoundFrontendVersionNumber");
static_assert(sizeof(FMetasoundFrontendVersionNumber) == 0x000008, "Wrong size on FMetasoundFrontendVersionNumber");
static_assert(offsetof(FMetasoundFrontendVersionNumber, Major) == 0x000000, "Member 'FMetasoundFrontendVersionNumber::Major' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendVersionNumber, Minor) == 0x000004, "Member 'FMetasoundFrontendVersionNumber::Minor' has a wrong offset!");

// ScriptStruct MetasoundFrontend.MetasoundFrontendVersion
// 0x0010 (0x0010 - 0x0000)
struct FMetasoundFrontendVersion final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMetasoundFrontendVersionNumber        Number;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMetasoundFrontendVersion) == 0x000004, "Wrong alignment on FMetasoundFrontendVersion");
static_assert(sizeof(FMetasoundFrontendVersion) == 0x000010, "Wrong size on FMetasoundFrontendVersion");
static_assert(offsetof(FMetasoundFrontendVersion, Name) == 0x000000, "Member 'FMetasoundFrontendVersion::Name' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendVersion, Number) == 0x000008, "Member 'FMetasoundFrontendVersion::Number' has a wrong offset!");

// ScriptStruct MetasoundFrontend.MetasoundFrontendVertex
// 0x0020 (0x0020 - 0x0000)
struct FMetasoundFrontendVertex
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TypeName;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  VertexID;                                          // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMetasoundFrontendVertex) == 0x000004, "Wrong alignment on FMetasoundFrontendVertex");
static_assert(sizeof(FMetasoundFrontendVertex) == 0x000020, "Wrong size on FMetasoundFrontendVertex");
static_assert(offsetof(FMetasoundFrontendVertex, Name) == 0x000000, "Member 'FMetasoundFrontendVertex::Name' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendVertex, TypeName) == 0x000008, "Member 'FMetasoundFrontendVertex::TypeName' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendVertex, VertexID) == 0x000010, "Member 'FMetasoundFrontendVertex::VertexID' has a wrong offset!");

// ScriptStruct MetasoundFrontend.MetasoundFrontendVertexHandle
// 0x0020 (0x0020 - 0x0000)
struct FMetasoundFrontendVertexHandle
{
public:
	struct FGuid                                  NodeID;                                            // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  VertexID;                                          // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMetasoundFrontendVertexHandle) == 0x000004, "Wrong alignment on FMetasoundFrontendVertexHandle");
static_assert(sizeof(FMetasoundFrontendVertexHandle) == 0x000020, "Wrong size on FMetasoundFrontendVertexHandle");
static_assert(offsetof(FMetasoundFrontendVertexHandle, NodeID) == 0x000000, "Member 'FMetasoundFrontendVertexHandle::NodeID' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendVertexHandle, VertexID) == 0x000010, "Member 'FMetasoundFrontendVertexHandle::VertexID' has a wrong offset!");

// ScriptStruct MetasoundFrontend.MetasoundFrontendLiteral
// 0x0058 (0x0058 - 0x0000)
struct FMetasoundFrontendLiteral final
{
public:
	EMetasoundFrontendLiteralType                 Type;                                              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AsNumDefault;                                      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<bool>                                  AsBoolean;                                         // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 AsInteger;                                         // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 AsFloat;                                           // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         AsString;                                          // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class UObject*>                        AsUObject;                                         // 0x0048(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMetasoundFrontendLiteral) == 0x000008, "Wrong alignment on FMetasoundFrontendLiteral");
static_assert(sizeof(FMetasoundFrontendLiteral) == 0x000058, "Wrong size on FMetasoundFrontendLiteral");
static_assert(offsetof(FMetasoundFrontendLiteral, Type) == 0x000000, "Member 'FMetasoundFrontendLiteral::Type' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendLiteral, AsNumDefault) == 0x000004, "Member 'FMetasoundFrontendLiteral::AsNumDefault' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendLiteral, AsBoolean) == 0x000008, "Member 'FMetasoundFrontendLiteral::AsBoolean' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendLiteral, AsInteger) == 0x000018, "Member 'FMetasoundFrontendLiteral::AsInteger' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendLiteral, AsFloat) == 0x000028, "Member 'FMetasoundFrontendLiteral::AsFloat' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendLiteral, AsString) == 0x000038, "Member 'FMetasoundFrontendLiteral::AsString' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendLiteral, AsUObject) == 0x000048, "Member 'FMetasoundFrontendLiteral::AsUObject' has a wrong offset!");

// ScriptStruct MetasoundFrontend.MetasoundFrontendVertexLiteral
// 0x0068 (0x0068 - 0x0000)
struct FMetasoundFrontendVertexLiteral final
{
public:
	struct FGuid                                  VertexID;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMetasoundFrontendLiteral              Value;                                             // 0x0010(0x0058)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMetasoundFrontendVertexLiteral) == 0x000008, "Wrong alignment on FMetasoundFrontendVertexLiteral");
static_assert(sizeof(FMetasoundFrontendVertexLiteral) == 0x000068, "Wrong size on FMetasoundFrontendVertexLiteral");
static_assert(offsetof(FMetasoundFrontendVertexLiteral, VertexID) == 0x000000, "Member 'FMetasoundFrontendVertexLiteral::VertexID' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendVertexLiteral, Value) == 0x000010, "Member 'FMetasoundFrontendVertexLiteral::Value' has a wrong offset!");

// ScriptStruct MetasoundFrontend.MetasoundFrontendVariable
// 0x00B8 (0x00B8 - 0x0000)
struct FMetasoundFrontendVariable final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TypeName;                                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMetasoundFrontendLiteral              Literal;                                           // 0x0010(0x0058)(NativeAccessSpecifierPublic)
	struct FGuid                                  ID;                                                // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  VariableNodeID;                                    // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  MutatorNodeID;                                     // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGuid>                          AccessorNodeIDs;                                   // 0x0098(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGuid>                          DeferredAccessorNodeIDs;                           // 0x00A8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMetasoundFrontendVariable) == 0x000008, "Wrong alignment on FMetasoundFrontendVariable");
static_assert(sizeof(FMetasoundFrontendVariable) == 0x0000B8, "Wrong size on FMetasoundFrontendVariable");
static_assert(offsetof(FMetasoundFrontendVariable, Name) == 0x000000, "Member 'FMetasoundFrontendVariable::Name' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendVariable, TypeName) == 0x000008, "Member 'FMetasoundFrontendVariable::TypeName' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendVariable, Literal) == 0x000010, "Member 'FMetasoundFrontendVariable::Literal' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendVariable, ID) == 0x000068, "Member 'FMetasoundFrontendVariable::ID' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendVariable, VariableNodeID) == 0x000078, "Member 'FMetasoundFrontendVariable::VariableNodeID' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendVariable, MutatorNodeID) == 0x000088, "Member 'FMetasoundFrontendVariable::MutatorNodeID' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendVariable, AccessorNodeIDs) == 0x000098, "Member 'FMetasoundFrontendVariable::AccessorNodeIDs' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendVariable, DeferredAccessorNodeIDs) == 0x0000A8, "Member 'FMetasoundFrontendVariable::DeferredAccessorNodeIDs' has a wrong offset!");

// ScriptStruct MetasoundFrontend.MetasoundFrontendNodeInterface
// 0x0030 (0x0030 - 0x0000)
struct FMetasoundFrontendNodeInterface final
{
public:
	TArray<struct FMetasoundFrontendVertex>       Inputs;                                            // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMetasoundFrontendVertex>       Outputs;                                           // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMetasoundFrontendVertex>       Environment;                                       // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMetasoundFrontendNodeInterface) == 0x000008, "Wrong alignment on FMetasoundFrontendNodeInterface");
static_assert(sizeof(FMetasoundFrontendNodeInterface) == 0x000030, "Wrong size on FMetasoundFrontendNodeInterface");
static_assert(offsetof(FMetasoundFrontendNodeInterface, Inputs) == 0x000000, "Member 'FMetasoundFrontendNodeInterface::Inputs' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendNodeInterface, Outputs) == 0x000010, "Member 'FMetasoundFrontendNodeInterface::Outputs' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendNodeInterface, Environment) == 0x000020, "Member 'FMetasoundFrontendNodeInterface::Environment' has a wrong offset!");

// ScriptStruct MetasoundFrontend.MetasoundFrontendNodeStyleDisplay
// 0x0001 (0x0001 - 0x0000)
struct FMetasoundFrontendNodeStyleDisplay final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMetasoundFrontendNodeStyleDisplay) == 0x000001, "Wrong alignment on FMetasoundFrontendNodeStyleDisplay");
static_assert(sizeof(FMetasoundFrontendNodeStyleDisplay) == 0x000001, "Wrong size on FMetasoundFrontendNodeStyleDisplay");

// ScriptStruct MetasoundFrontend.MetasoundFrontendNodeStyle
// 0x0001 (0x0001 - 0x0000)
struct FMetasoundFrontendNodeStyle final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMetasoundFrontendNodeStyle) == 0x000001, "Wrong alignment on FMetasoundFrontendNodeStyle");
static_assert(sizeof(FMetasoundFrontendNodeStyle) == 0x000001, "Wrong size on FMetasoundFrontendNodeStyle");

// ScriptStruct MetasoundFrontend.MetasoundFrontendNode
// 0x0068 (0x0068 - 0x0000)
struct FMetasoundFrontendNode final
{
public:
	struct FGuid                                  ID;                                                // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGuid                                  ClassID;                                           // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name;                                              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMetasoundFrontendNodeInterface        Interface;                                         // 0x0028(0x0030)(NativeAccessSpecifierPublic)
	TArray<struct FMetasoundFrontendVertexLiteral> InputLiterals;                                     // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMetasoundFrontendNode) == 0x000008, "Wrong alignment on FMetasoundFrontendNode");
static_assert(sizeof(FMetasoundFrontendNode) == 0x000068, "Wrong size on FMetasoundFrontendNode");
static_assert(offsetof(FMetasoundFrontendNode, ID) == 0x000000, "Member 'FMetasoundFrontendNode::ID' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendNode, ClassID) == 0x000010, "Member 'FMetasoundFrontendNode::ClassID' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendNode, Name) == 0x000020, "Member 'FMetasoundFrontendNode::Name' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendNode, Interface) == 0x000028, "Member 'FMetasoundFrontendNode::Interface' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendNode, InputLiterals) == 0x000058, "Member 'FMetasoundFrontendNode::InputLiterals' has a wrong offset!");

// ScriptStruct MetasoundFrontend.MetasoundFrontendEdge
// 0x0040 (0x0040 - 0x0000)
struct FMetasoundFrontendEdge final
{
public:
	struct FGuid                                  FromNodeID;                                        // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  FromVertexID;                                      // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ToNodeID;                                          // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ToVertexID;                                        // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMetasoundFrontendEdge) == 0x000004, "Wrong alignment on FMetasoundFrontendEdge");
static_assert(sizeof(FMetasoundFrontendEdge) == 0x000040, "Wrong size on FMetasoundFrontendEdge");
static_assert(offsetof(FMetasoundFrontendEdge, FromNodeID) == 0x000000, "Member 'FMetasoundFrontendEdge::FromNodeID' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendEdge, FromVertexID) == 0x000010, "Member 'FMetasoundFrontendEdge::FromVertexID' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendEdge, ToNodeID) == 0x000020, "Member 'FMetasoundFrontendEdge::ToNodeID' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendEdge, ToVertexID) == 0x000030, "Member 'FMetasoundFrontendEdge::ToVertexID' has a wrong offset!");

// ScriptStruct MetasoundFrontend.MetasoundFrontendEdgeStyleLiteralColorPair
// 0x0068 (0x0068 - 0x0000)
struct FMetasoundFrontendEdgeStyleLiteralColorPair final
{
public:
	struct FMetasoundFrontendLiteral              Value;                                             // 0x0000(0x0058)(NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMetasoundFrontendEdgeStyleLiteralColorPair) == 0x000008, "Wrong alignment on FMetasoundFrontendEdgeStyleLiteralColorPair");
static_assert(sizeof(FMetasoundFrontendEdgeStyleLiteralColorPair) == 0x000068, "Wrong size on FMetasoundFrontendEdgeStyleLiteralColorPair");
static_assert(offsetof(FMetasoundFrontendEdgeStyleLiteralColorPair, Value) == 0x000000, "Member 'FMetasoundFrontendEdgeStyleLiteralColorPair::Value' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendEdgeStyleLiteralColorPair, Color) == 0x000058, "Member 'FMetasoundFrontendEdgeStyleLiteralColorPair::Color' has a wrong offset!");

// ScriptStruct MetasoundFrontend.MetasoundFrontendEdgeStyle
// 0x0028 (0x0028 - 0x0000)
struct FMetasoundFrontendEdgeStyle final
{
public:
	struct FGuid                                  NodeID;                                            // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OutputName;                                        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMetasoundFrontendEdgeStyleLiteralColorPair> LiteralColorPairs;                                 // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMetasoundFrontendEdgeStyle) == 0x000008, "Wrong alignment on FMetasoundFrontendEdgeStyle");
static_assert(sizeof(FMetasoundFrontendEdgeStyle) == 0x000028, "Wrong size on FMetasoundFrontendEdgeStyle");
static_assert(offsetof(FMetasoundFrontendEdgeStyle, NodeID) == 0x000000, "Member 'FMetasoundFrontendEdgeStyle::NodeID' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendEdgeStyle, OutputName) == 0x000010, "Member 'FMetasoundFrontendEdgeStyle::OutputName' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendEdgeStyle, LiteralColorPairs) == 0x000018, "Member 'FMetasoundFrontendEdgeStyle::LiteralColorPairs' has a wrong offset!");

// ScriptStruct MetasoundFrontend.MetasoundFrontendGraphStyle
// 0x0018 (0x0018 - 0x0000)
struct FMetasoundFrontendGraphStyle final
{
public:
	bool                                          bIsGraphEditable;                                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMetasoundFrontendEdgeStyle>    EdgeStyles;                                        // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMetasoundFrontendGraphStyle) == 0x000008, "Wrong alignment on FMetasoundFrontendGraphStyle");
static_assert(sizeof(FMetasoundFrontendGraphStyle) == 0x000018, "Wrong size on FMetasoundFrontendGraphStyle");
static_assert(offsetof(FMetasoundFrontendGraphStyle, bIsGraphEditable) == 0x000000, "Member 'FMetasoundFrontendGraphStyle::bIsGraphEditable' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendGraphStyle, EdgeStyles) == 0x000008, "Member 'FMetasoundFrontendGraphStyle::EdgeStyles' has a wrong offset!");

// ScriptStruct MetasoundFrontend.MetasoundFrontendGraph
// 0x0030 (0x0030 - 0x0000)
struct FMetasoundFrontendGraph final
{
public:
	TArray<struct FMetasoundFrontendNode>         Nodes;                                             // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMetasoundFrontendEdge>         Edges;                                             // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMetasoundFrontendVariable>     Variables;                                         // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMetasoundFrontendGraph) == 0x000008, "Wrong alignment on FMetasoundFrontendGraph");
static_assert(sizeof(FMetasoundFrontendGraph) == 0x000030, "Wrong size on FMetasoundFrontendGraph");
static_assert(offsetof(FMetasoundFrontendGraph, Nodes) == 0x000000, "Member 'FMetasoundFrontendGraph::Nodes' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendGraph, Edges) == 0x000010, "Member 'FMetasoundFrontendGraph::Edges' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendGraph, Variables) == 0x000020, "Member 'FMetasoundFrontendGraph::Variables' has a wrong offset!");

// ScriptStruct MetasoundFrontend.MetasoundFrontendVertexMetadata
// 0x0001 (0x0001 - 0x0000)
struct FMetasoundFrontendVertexMetadata final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMetasoundFrontendVertexMetadata) == 0x000001, "Wrong alignment on FMetasoundFrontendVertexMetadata");
static_assert(sizeof(FMetasoundFrontendVertexMetadata) == 0x000001, "Wrong size on FMetasoundFrontendVertexMetadata");

// ScriptStruct MetasoundFrontend.MetasoundFrontendClassVertex
// 0x0014 (0x0034 - 0x0020)
struct FMetasoundFrontendClassVertex : public FMetasoundFrontendVertex
{
public:
	struct FGuid                                  NodeID;                                            // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMetasoundFrontendVertexAccessType            AccessType;                                        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMetasoundFrontendClassVertex) == 0x000004, "Wrong alignment on FMetasoundFrontendClassVertex");
static_assert(sizeof(FMetasoundFrontendClassVertex) == 0x000034, "Wrong size on FMetasoundFrontendClassVertex");
static_assert(offsetof(FMetasoundFrontendClassVertex, NodeID) == 0x000020, "Member 'FMetasoundFrontendClassVertex::NodeID' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendClassVertex, AccessType) == 0x000030, "Member 'FMetasoundFrontendClassVertex::AccessType' has a wrong offset!");

// ScriptStruct MetasoundFrontend.MetasoundFrontendClassStyleDisplay
// 0x0001 (0x0001 - 0x0000)
struct FMetasoundFrontendClassStyleDisplay final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMetasoundFrontendClassStyleDisplay) == 0x000001, "Wrong alignment on FMetasoundFrontendClassStyleDisplay");
static_assert(sizeof(FMetasoundFrontendClassStyleDisplay) == 0x000001, "Wrong size on FMetasoundFrontendClassStyleDisplay");

// ScriptStruct MetasoundFrontend.MetasoundFrontendClassInput
// 0x005C (0x0090 - 0x0034)
struct FMetasoundFrontendClassInput final : public FMetasoundFrontendClassVertex
{
public:
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMetasoundFrontendLiteral              DefaultLiteral;                                    // 0x0038(0x0058)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMetasoundFrontendClassInput) == 0x000008, "Wrong alignment on FMetasoundFrontendClassInput");
static_assert(sizeof(FMetasoundFrontendClassInput) == 0x000090, "Wrong size on FMetasoundFrontendClassInput");
static_assert(offsetof(FMetasoundFrontendClassInput, DefaultLiteral) == 0x000038, "Member 'FMetasoundFrontendClassInput::DefaultLiteral' has a wrong offset!");

// ScriptStruct MetasoundFrontend.MetasoundFrontendClassVariable
// 0x005C (0x0090 - 0x0034)
struct FMetasoundFrontendClassVariable final : public FMetasoundFrontendClassVertex
{
public:
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMetasoundFrontendLiteral              DefaultLiteral;                                    // 0x0038(0x0058)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMetasoundFrontendClassVariable) == 0x000008, "Wrong alignment on FMetasoundFrontendClassVariable");
static_assert(sizeof(FMetasoundFrontendClassVariable) == 0x000090, "Wrong size on FMetasoundFrontendClassVariable");
static_assert(offsetof(FMetasoundFrontendClassVariable, DefaultLiteral) == 0x000038, "Member 'FMetasoundFrontendClassVariable::DefaultLiteral' has a wrong offset!");

// ScriptStruct MetasoundFrontend.MetasoundFrontendClassOutput
// 0x0000 (0x0034 - 0x0034)
struct FMetasoundFrontendClassOutput final : public FMetasoundFrontendClassVertex
{
};
static_assert(alignof(FMetasoundFrontendClassOutput) == 0x000004, "Wrong alignment on FMetasoundFrontendClassOutput");
static_assert(sizeof(FMetasoundFrontendClassOutput) == 0x000034, "Wrong size on FMetasoundFrontendClassOutput");

// ScriptStruct MetasoundFrontend.MetasoundFrontendClassEnvironmentVariable
// 0x0014 (0x0014 - 0x0000)
struct FMetasoundFrontendClassEnvironmentVariable final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TypeName;                                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRequired;                                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMetasoundFrontendClassEnvironmentVariable) == 0x000004, "Wrong alignment on FMetasoundFrontendClassEnvironmentVariable");
static_assert(sizeof(FMetasoundFrontendClassEnvironmentVariable) == 0x000014, "Wrong size on FMetasoundFrontendClassEnvironmentVariable");
static_assert(offsetof(FMetasoundFrontendClassEnvironmentVariable, Name) == 0x000000, "Member 'FMetasoundFrontendClassEnvironmentVariable::Name' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendClassEnvironmentVariable, TypeName) == 0x000008, "Member 'FMetasoundFrontendClassEnvironmentVariable::TypeName' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendClassEnvironmentVariable, bIsRequired) == 0x000010, "Member 'FMetasoundFrontendClassEnvironmentVariable::bIsRequired' has a wrong offset!");

// ScriptStruct MetasoundFrontend.MetasoundFrontendInterfaceStyle
// 0x0001 (0x0001 - 0x0000)
struct FMetasoundFrontendInterfaceStyle final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMetasoundFrontendInterfaceStyle) == 0x000001, "Wrong alignment on FMetasoundFrontendInterfaceStyle");
static_assert(sizeof(FMetasoundFrontendInterfaceStyle) == 0x000001, "Wrong size on FMetasoundFrontendInterfaceStyle");

// ScriptStruct MetasoundFrontend.MetasoundFrontendClassInterface
// 0x0040 (0x0040 - 0x0000)
struct FMetasoundFrontendClassInterface
{
public:
	TArray<struct FMetasoundFrontendClassInput>   Inputs;                                            // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FMetasoundFrontendClassOutput>  Outputs;                                           // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FMetasoundFrontendClassEnvironmentVariable> Environment;                                       // 0x0020(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	struct FGuid                                  ChangeID;                                          // 0x0030(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMetasoundFrontendClassInterface) == 0x000008, "Wrong alignment on FMetasoundFrontendClassInterface");
static_assert(sizeof(FMetasoundFrontendClassInterface) == 0x000040, "Wrong size on FMetasoundFrontendClassInterface");
static_assert(offsetof(FMetasoundFrontendClassInterface, Inputs) == 0x000000, "Member 'FMetasoundFrontendClassInterface::Inputs' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendClassInterface, Outputs) == 0x000010, "Member 'FMetasoundFrontendClassInterface::Outputs' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendClassInterface, Environment) == 0x000020, "Member 'FMetasoundFrontendClassInterface::Environment' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendClassInterface, ChangeID) == 0x000030, "Member 'FMetasoundFrontendClassInterface::ChangeID' has a wrong offset!");

// ScriptStruct MetasoundFrontend.MetasoundFrontendInterfaceVertexBinding
// 0x0010 (0x0010 - 0x0000)
struct FMetasoundFrontendInterfaceVertexBinding final
{
public:
	class FName                                   OutputName;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InputName;                                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMetasoundFrontendInterfaceVertexBinding) == 0x000004, "Wrong alignment on FMetasoundFrontendInterfaceVertexBinding");
static_assert(sizeof(FMetasoundFrontendInterfaceVertexBinding) == 0x000010, "Wrong size on FMetasoundFrontendInterfaceVertexBinding");
static_assert(offsetof(FMetasoundFrontendInterfaceVertexBinding, OutputName) == 0x000000, "Member 'FMetasoundFrontendInterfaceVertexBinding::OutputName' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendInterfaceVertexBinding, InputName) == 0x000008, "Member 'FMetasoundFrontendInterfaceVertexBinding::InputName' has a wrong offset!");

// ScriptStruct MetasoundFrontend.MetasoundFrontendInterfaceBinding
// 0x0038 (0x0038 - 0x0000)
struct FMetasoundFrontendInterfaceBinding final
{
public:
	struct FMetasoundFrontendVersion              OutputInterfaceVersion;                            // 0x0000(0x0010)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMetasoundFrontendVersion              InputInterfaceVersion;                             // 0x0010(0x0010)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BindingPriority;                                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMetasoundFrontendInterfaceVertexBinding> VertexBindings;                                    // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMetasoundFrontendInterfaceBinding) == 0x000008, "Wrong alignment on FMetasoundFrontendInterfaceBinding");
static_assert(sizeof(FMetasoundFrontendInterfaceBinding) == 0x000038, "Wrong size on FMetasoundFrontendInterfaceBinding");
static_assert(offsetof(FMetasoundFrontendInterfaceBinding, OutputInterfaceVersion) == 0x000000, "Member 'FMetasoundFrontendInterfaceBinding::OutputInterfaceVersion' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendInterfaceBinding, InputInterfaceVersion) == 0x000010, "Member 'FMetasoundFrontendInterfaceBinding::InputInterfaceVersion' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendInterfaceBinding, BindingPriority) == 0x000020, "Member 'FMetasoundFrontendInterfaceBinding::BindingPriority' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendInterfaceBinding, VertexBindings) == 0x000028, "Member 'FMetasoundFrontendInterfaceBinding::VertexBindings' has a wrong offset!");

// ScriptStruct MetasoundFrontend.MetasoundFrontendInterfaceUClassOptions
// 0x0014 (0x0014 - 0x0000)
struct FMetasoundFrontendInterfaceUClassOptions final
{
public:
	struct FTopLevelAssetPath                     ClassPath;                                         // 0x0000(0x0010)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsModifiable;                                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDefault;                                        // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMetasoundFrontendInterfaceUClassOptions) == 0x000004, "Wrong alignment on FMetasoundFrontendInterfaceUClassOptions");
static_assert(sizeof(FMetasoundFrontendInterfaceUClassOptions) == 0x000014, "Wrong size on FMetasoundFrontendInterfaceUClassOptions");
static_assert(offsetof(FMetasoundFrontendInterfaceUClassOptions, ClassPath) == 0x000000, "Member 'FMetasoundFrontendInterfaceUClassOptions::ClassPath' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendInterfaceUClassOptions, bIsModifiable) == 0x000010, "Member 'FMetasoundFrontendInterfaceUClassOptions::bIsModifiable' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendInterfaceUClassOptions, bIsDefault) == 0x000011, "Member 'FMetasoundFrontendInterfaceUClassOptions::bIsDefault' has a wrong offset!");

// ScriptStruct MetasoundFrontend.MetasoundFrontendInterface
// 0x0020 (0x0060 - 0x0040)
struct FMetasoundFrontendInterface final : public FMetasoundFrontendClassInterface
{
public:
	struct FMetasoundFrontendVersion              Version;                                           // 0x0040(0x0010)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMetasoundFrontendInterfaceUClassOptions> UClassOptions;                                     // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMetasoundFrontendInterface) == 0x000008, "Wrong alignment on FMetasoundFrontendInterface");
static_assert(sizeof(FMetasoundFrontendInterface) == 0x000060, "Wrong size on FMetasoundFrontendInterface");
static_assert(offsetof(FMetasoundFrontendInterface, Version) == 0x000040, "Member 'FMetasoundFrontendInterface::Version' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendInterface, UClassOptions) == 0x000050, "Member 'FMetasoundFrontendInterface::UClassOptions' has a wrong offset!");

// ScriptStruct MetasoundFrontend.MetasoundFrontendClassName
// 0x0018 (0x0018 - 0x0000)
struct FMetasoundFrontendClassName final
{
public:
	class FName                                   NameSpace;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Variant;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMetasoundFrontendClassName) == 0x000004, "Wrong alignment on FMetasoundFrontendClassName");
static_assert(sizeof(FMetasoundFrontendClassName) == 0x000018, "Wrong size on FMetasoundFrontendClassName");
static_assert(offsetof(FMetasoundFrontendClassName, NameSpace) == 0x000000, "Member 'FMetasoundFrontendClassName::NameSpace' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendClassName, Name) == 0x000008, "Member 'FMetasoundFrontendClassName::Name' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendClassName, Variant) == 0x000010, "Member 'FMetasoundFrontendClassName::Variant' has a wrong offset!");

// ScriptStruct MetasoundFrontend.MetasoundFrontendClassMetadata
// 0x0034 (0x0034 - 0x0000)
struct FMetasoundFrontendClassMetadata final
{
public:
	struct FMetasoundFrontendClassName            ClassName;                                         // 0x0000(0x0018)(Edit, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FMetasoundFrontendVersionNumber        Version;                                           // 0x0018(0x0008)(Edit, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EMetasoundFrontendClassType                   Type;                                              // 0x0020(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsDeprecated;                                     // 0x0021(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bAutoUpdateManagesInterface;                       // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  ChangeID;                                          // 0x0024(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMetasoundFrontendClassMetadata) == 0x000004, "Wrong alignment on FMetasoundFrontendClassMetadata");
static_assert(sizeof(FMetasoundFrontendClassMetadata) == 0x000034, "Wrong size on FMetasoundFrontendClassMetadata");
static_assert(offsetof(FMetasoundFrontendClassMetadata, ClassName) == 0x000000, "Member 'FMetasoundFrontendClassMetadata::ClassName' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendClassMetadata, Version) == 0x000018, "Member 'FMetasoundFrontendClassMetadata::Version' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendClassMetadata, Type) == 0x000020, "Member 'FMetasoundFrontendClassMetadata::Type' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendClassMetadata, bIsDeprecated) == 0x000021, "Member 'FMetasoundFrontendClassMetadata::bIsDeprecated' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendClassMetadata, bAutoUpdateManagesInterface) == 0x000022, "Member 'FMetasoundFrontendClassMetadata::bAutoUpdateManagesInterface' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendClassMetadata, ChangeID) == 0x000024, "Member 'FMetasoundFrontendClassMetadata::ChangeID' has a wrong offset!");

// ScriptStruct MetasoundFrontend.MetasoundFrontendClassStyle
// 0x0001 (0x0001 - 0x0000)
struct FMetasoundFrontendClassStyle final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMetasoundFrontendClassStyle) == 0x000001, "Wrong alignment on FMetasoundFrontendClassStyle");
static_assert(sizeof(FMetasoundFrontendClassStyle) == 0x000001, "Wrong size on FMetasoundFrontendClassStyle");

// ScriptStruct MetasoundFrontend.MetasoundFrontendClass
// 0x0090 (0x0090 - 0x0000)
struct FMetasoundFrontendClass
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  ID;                                                // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMetasoundFrontendClassMetadata        MetaData;                                          // 0x0018(0x0034)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMetasoundFrontendClassInterface       Interface;                                         // 0x0050(0x0040)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMetasoundFrontendClass) == 0x000008, "Wrong alignment on FMetasoundFrontendClass");
static_assert(sizeof(FMetasoundFrontendClass) == 0x000090, "Wrong size on FMetasoundFrontendClass");
static_assert(offsetof(FMetasoundFrontendClass, ID) == 0x000008, "Member 'FMetasoundFrontendClass::ID' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendClass, MetaData) == 0x000018, "Member 'FMetasoundFrontendClass::MetaData' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendClass, Interface) == 0x000050, "Member 'FMetasoundFrontendClass::Interface' has a wrong offset!");

// ScriptStruct MetasoundFrontend.MetasoundFrontendGraphClassPresetOptions
// 0x0058 (0x0058 - 0x0000)
struct FMetasoundFrontendGraphClassPresetOptions final
{
public:
	bool                                          bIsPreset;                                         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class FName>                             InputsInheritingDefault;                           // 0x0008(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FMetasoundFrontendGraphClassPresetOptions) == 0x000008, "Wrong alignment on FMetasoundFrontendGraphClassPresetOptions");
static_assert(sizeof(FMetasoundFrontendGraphClassPresetOptions) == 0x000058, "Wrong size on FMetasoundFrontendGraphClassPresetOptions");
static_assert(offsetof(FMetasoundFrontendGraphClassPresetOptions, bIsPreset) == 0x000000, "Member 'FMetasoundFrontendGraphClassPresetOptions::bIsPreset' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendGraphClassPresetOptions, InputsInheritingDefault) == 0x000008, "Member 'FMetasoundFrontendGraphClassPresetOptions::InputsInheritingDefault' has a wrong offset!");

// ScriptStruct MetasoundFrontend.MetasoundFrontendGraphClass
// 0x0088 (0x0118 - 0x0090)
struct FMetasoundFrontendGraphClass final : public FMetasoundFrontendClass
{
public:
	struct FMetasoundFrontendGraph                Graph;                                             // 0x0090(0x0030)(NativeAccessSpecifierPublic)
	struct FMetasoundFrontendGraphClassPresetOptions PresetOptions;                                     // 0x00C0(0x0058)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FMetasoundFrontendGraphClass) == 0x000008, "Wrong alignment on FMetasoundFrontendGraphClass");
static_assert(sizeof(FMetasoundFrontendGraphClass) == 0x000118, "Wrong size on FMetasoundFrontendGraphClass");
static_assert(offsetof(FMetasoundFrontendGraphClass, Graph) == 0x000090, "Member 'FMetasoundFrontendGraphClass::Graph' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendGraphClass, PresetOptions) == 0x0000C0, "Member 'FMetasoundFrontendGraphClass::PresetOptions' has a wrong offset!");

// ScriptStruct MetasoundFrontend.MetasoundFrontendDocumentMetadata
// 0x0010 (0x0010 - 0x0000)
struct FMetasoundFrontendDocumentMetadata final
{
public:
	struct FMetasoundFrontendVersion              Version;                                           // 0x0000(0x0010)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMetasoundFrontendDocumentMetadata) == 0x000004, "Wrong alignment on FMetasoundFrontendDocumentMetadata");
static_assert(sizeof(FMetasoundFrontendDocumentMetadata) == 0x000010, "Wrong size on FMetasoundFrontendDocumentMetadata");
static_assert(offsetof(FMetasoundFrontendDocumentMetadata, Version) == 0x000000, "Member 'FMetasoundFrontendDocumentMetadata::Version' has a wrong offset!");

// ScriptStruct MetasoundFrontend.MetasoundFrontendDocument
// 0x01D0 (0x01D0 - 0x0000)
struct FMetasoundFrontendDocument final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMetasoundFrontendDocumentMetadata     MetaData;                                          // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TSet<struct FMetasoundFrontendVersion>        Interfaces;                                        // 0x0020(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FMetasoundFrontendGraphClass           RootGraph;                                         // 0x0070(0x0118)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FMetasoundFrontendGraphClass>   Subgraphs;                                         // 0x0188(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMetasoundFrontendClass>        Dependencies;                                      // 0x0198(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FMetasoundFrontendVersion              ArchetypeVersion;                                  // 0x01A8(0x0010)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FMetasoundFrontendVersion>      InterfaceVersions;                                 // 0x01B8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C8[0x8];                                      // 0x01C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMetasoundFrontendDocument) == 0x000008, "Wrong alignment on FMetasoundFrontendDocument");
static_assert(sizeof(FMetasoundFrontendDocument) == 0x0001D0, "Wrong size on FMetasoundFrontendDocument");
static_assert(offsetof(FMetasoundFrontendDocument, MetaData) == 0x000010, "Member 'FMetasoundFrontendDocument::MetaData' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendDocument, Interfaces) == 0x000020, "Member 'FMetasoundFrontendDocument::Interfaces' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendDocument, RootGraph) == 0x000070, "Member 'FMetasoundFrontendDocument::RootGraph' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendDocument, Subgraphs) == 0x000188, "Member 'FMetasoundFrontendDocument::Subgraphs' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendDocument, Dependencies) == 0x000198, "Member 'FMetasoundFrontendDocument::Dependencies' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendDocument, ArchetypeVersion) == 0x0001A8, "Member 'FMetasoundFrontendDocument::ArchetypeVersion' has a wrong offset!");
static_assert(offsetof(FMetasoundFrontendDocument, InterfaceVersions) == 0x0001B8, "Member 'FMetasoundFrontendDocument::InterfaceVersions' has a wrong offset!");

// ScriptStruct MetasoundFrontend.MetaSoundFrontendDocumentBuilder
// 0x0038 (0x0038 - 0x0000)
struct FMetaSoundFrontendDocumentBuilder final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IMetaSoundDocumentInterface> DocumentInterface;                                 // 0x0008(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_18[0x20];                                      // 0x0018(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMetaSoundFrontendDocumentBuilder) == 0x000008, "Wrong alignment on FMetaSoundFrontendDocumentBuilder");
static_assert(sizeof(FMetaSoundFrontendDocumentBuilder) == 0x000038, "Wrong size on FMetaSoundFrontendDocumentBuilder");
static_assert(offsetof(FMetaSoundFrontendDocumentBuilder, DocumentInterface) == 0x000008, "Member 'FMetaSoundFrontendDocumentBuilder::DocumentInterface' has a wrong offset!");

}

