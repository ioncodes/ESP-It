#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ControlRig

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AnimationCore_structs.hpp"
#include "MovieScene_structs.hpp"
#include "RigVM_structs.hpp"
#include "Constraints_structs.hpp"
#include "MovieSceneTracks_structs.hpp"


namespace SDK
{

// Enum ControlRig.ERigElementType
// NumValues: 0x000C
enum class ERigElementType : uint8
{
	None                                     = 0,
	Bone                                     = 1,
	Null                                     = 2,
	Space                                    = 2,
	Control                                  = 4,
	Curve                                    = 8,
	RigidBody                                = 16,
	Reference                                = 32,
	Last                                     = 64,
	All                                      = 63,
	ToResetAfterConstructionEvent            = 13,
	ERigElementType_MAX                      = 65,
};

// Enum ControlRig.ERigHierarchyNotification
// NumValues: 0x0010
enum class ERigHierarchyNotification : uint8
{
	ElementAdded                             = 0,
	ElementRemoved                           = 1,
	ElementRenamed                           = 2,
	ElementSelected                          = 3,
	ElementDeselected                        = 4,
	ParentChanged                            = 5,
	HierarchyReset                           = 6,
	ControlSettingChanged                    = 7,
	ControlVisibilityChanged                 = 8,
	ControlDrivenListChanged                 = 9,
	ControlShapeTransformChanged             = 10,
	ParentWeightsChanged                     = 11,
	InteractionBracketOpened                 = 12,
	InteractionBracketClosed                 = 13,
	ElementReordered                         = 14,
	Max                                      = 15,
};

// Enum ControlRig.ERigControlTransformChannel
// NumValues: 0x000A
enum class ERigControlTransformChannel : uint8
{
	TranslationX                             = 0,
	TranslationY                             = 1,
	TranslationZ                             = 2,
	Pitch                                    = 3,
	Yaw                                      = 4,
	Roll                                     = 5,
	ScaleX                                   = 6,
	ScaleY                                   = 7,
	ScaleZ                                   = 8,
	ERigControlTransformChannel_MAX          = 9,
};

// Enum ControlRig.ERigControlVisibility
// NumValues: 0x0003
enum class ERigControlVisibility : uint8
{
	UserDefined                              = 0,
	BasedOnSelection                         = 1,
	ERigControlVisibility_MAX                = 2,
};

// Enum ControlRig.ERigControlAxis
// NumValues: 0x0004
enum class ERigControlAxis : uint8
{
	X                                        = 0,
	Y                                        = 1,
	Z                                        = 2,
	ERigControlAxis_MAX                      = 3,
};

// Enum ControlRig.ERigControlType
// NumValues: 0x000B
enum class ERigControlType : uint8
{
	Bool                                     = 0,
	Float                                    = 1,
	Integer                                  = 2,
	Vector2D                                 = 3,
	Position                                 = 4,
	Scale                                    = 5,
	Rotator                                  = 6,
	Transform                                = 7,
	TransformNoScale                         = 8,
	EulerTransform                           = 9,
	ERigControlType_MAX                      = 10,
};

// Enum ControlRig.ERigControlAnimationType
// NumValues: 0x0005
enum class ERigControlAnimationType : uint8
{
	AnimationControl                         = 0,
	AnimationChannel                         = 1,
	ProxyControl                             = 2,
	VisualCue                                = 3,
	ERigControlAnimationType_MAX             = 4,
};

// Enum ControlRig.ERigExecutionType
// NumValues: 0x0003
enum class ERigExecutionType : uint8
{
	Runtime                                  = 0,
	Editing                                  = 1,
	Max                                      = 2,
};

// Enum ControlRig.ERigTransformStackEntryType
// NumValues: 0x0005
enum class ERigTransformStackEntryType : uint8
{
	TransformPose                            = 0,
	ControlOffset                            = 1,
	ControlShape                             = 2,
	CurveValue                               = 3,
	ERigTransformStackEntryType_MAX          = 4,
};

// Enum ControlRig.ERigTransformType
// NumValues: 0x0006
enum class ERigTransformType : uint8
{
	InitialLocal                             = 0,
	CurrentLocal                             = 1,
	InitialGlobal                            = 2,
	CurrentGlobal                            = 3,
	NumTransformTypes                        = 4,
	ERigTransformType_MAX                    = 5,
};

// Enum ControlRig.EControlRigInteractionType
// NumValues: 0x0006
enum class EControlRigInteractionType : uint8
{
	None                                     = 0,
	Translate                                = 1,
	Rotate                                   = 2,
	Scale                                    = 4,
	All                                      = 7,
	EControlRigInteractionType_MAX           = 8,
};

// Enum ControlRig.EControlRigVectorKind
// NumValues: 0x0003
enum class EControlRigVectorKind : uint8
{
	Direction                                = 0,
	Location                                 = 1,
	EControlRigVectorKind_MAX                = 2,
};

// Enum ControlRig.EControlRigComponentSpace
// NumValues: 0x0006
enum class EControlRigComponentSpace : uint8
{
	WorldSpace                               = 0,
	ActorSpace                               = 1,
	ComponentSpace                           = 2,
	RigSpace                                 = 3,
	LocalSpace                               = 4,
	Max                                      = 5,
};

// Enum ControlRig.EControlRigComponentMapDirection
// NumValues: 0x0003
enum class EControlRigComponentMapDirection : uint8
{
	Input                                    = 0,
	Output                                   = 1,
	EControlRigComponentMapDirection_MAX     = 2,
};

// Enum ControlRig.ETransformSpaceMode
// NumValues: 0x0005
enum class ETransformSpaceMode : uint8
{
	LocalSpace                               = 0,
	GlobalSpace                              = 1,
	BaseSpace                                = 2,
	BaseJoint                                = 3,
	Max                                      = 4,
};

// Enum ControlRig.ETransformGetterType
// NumValues: 0x0003
enum class ETransformGetterType : uint8
{
	Initial                                  = 0,
	Current                                  = 1,
	Max                                      = 2,
};

// Enum ControlRig.EControlRigTestDataPlaybackMode
// NumValues: 0x0004
enum class EControlRigTestDataPlaybackMode : uint8
{
	Live                                     = 0,
	ReplayInputs                             = 1,
	GroundTruth                              = 2,
	Max                                      = 3,
};

// Enum ControlRig.ECRSimConstraintType
// NumValues: 0x0005
enum class ECRSimConstraintType : uint8
{
	Distance                                 = 0,
	DistanceFromA                            = 1,
	DistanceFromB                            = 2,
	Plane                                    = 3,
	ECRSimConstraintType_MAX                 = 4,
};

// Enum ControlRig.ECRSimPointForceType
// NumValues: 0x0002
enum class ECRSimPointForceType : uint8
{
	Direction                                = 0,
	ECRSimPointForceType_MAX                 = 1,
};

// Enum ControlRig.ECRSimSoftCollisionType
// NumValues: 0x0004
enum class ECRSimSoftCollisionType : uint8
{
	Plane                                    = 0,
	Sphere                                   = 1,
	Cone                                     = 2,
	ECRSimSoftCollisionType_MAX              = 3,
};

// Enum ControlRig.EControlRigFKRigExecuteMode
// NumValues: 0x0004
enum class EControlRigFKRigExecuteMode : uint8
{
	Replace                                  = 0,
	Additive                                 = 1,
	Direct                                   = 2,
	Max                                      = 3,
};

// Enum ControlRig.ERigBoneType
// NumValues: 0x0003
enum class ERigBoneType : uint8
{
	Imported                                 = 0,
	User                                     = 1,
	ERigBoneType_MAX                         = 2,
};

// Enum ControlRig.ERigMetadataType
// NumValues: 0x0016
enum class ERigMetadataType : uint8
{
	Bool                                     = 0,
	BoolArray                                = 1,
	Float                                    = 2,
	FloatArray                               = 3,
	Int32                                    = 4,
	Int32Array                               = 5,
	Name                                     = 6,
	NameArray                                = 7,
	Vector                                   = 8,
	VectorArray                              = 9,
	Rotator                                  = 10,
	RotatorArray                             = 11,
	Quat                                     = 12,
	QuatArray                                = 13,
	Transform                                = 14,
	TransformArray                           = 15,
	LinearColor                              = 16,
	LinearColorArray                         = 17,
	RigElementKey                            = 18,
	RigElementKeyArray                       = 19,
	Invalid                                  = 20,
	ERigMetadataType_MAX                     = 21,
};

// Enum ControlRig.ERigEvent
// NumValues: 0x0005
enum class ERigEvent : uint8
{
	None                                     = 0,
	RequestAutoKey                           = 1,
	OpenUndoBracket                          = 2,
	CloseUndoBracket                         = 3,
	Max                                      = 4,
};

// Enum ControlRig.EControlRigSetKey
// NumValues: 0x0004
enum class EControlRigSetKey : uint8
{
	DoNotCare                                = 0,
	Always                                   = 1,
	Never                                    = 2,
	EControlRigSetKey_MAX                    = 3,
};

// Enum ControlRig.ERigControlValueType
// NumValues: 0x0005
enum class ERigControlValueType : uint8
{
	Initial                                  = 0,
	Current                                  = 1,
	Minimum                                  = 2,
	Maximum                                  = 3,
	ERigControlValueType_MAX                 = 4,
};

// Enum ControlRig.ERigSpaceType
// NumValues: 0x0005
enum class ERigSpaceType : uint8
{
	Global                                   = 0,
	Bone                                     = 1,
	Control                                  = 2,
	Space                                    = 3,
	ERigSpaceType_MAX                        = 4,
};

// Enum ControlRig.EMovieSceneControlRigSpaceType
// NumValues: 0x0004
enum class EMovieSceneControlRigSpaceType : uint8
{
	Parent                                   = 0,
	World                                    = 1,
	ControlRig                               = 2,
	EMovieSceneControlRigSpaceType_MAX       = 3,
};

// Enum ControlRig.EControlRigDrawHierarchyMode
// NumValues: 0x0002
enum class EControlRigDrawHierarchyMode : uint8
{
	Axes                                     = 0,
	Max                                      = 1,
};

// Enum ControlRig.EAimMode
// NumValues: 0x0003
enum class EAimMode : uint8
{
	AimAtTarget                              = 0,
	OrientToTarget                           = 1,
	MAX                                      = 2,
};

// Enum ControlRig.EApplyTransformMode
// NumValues: 0x0003
enum class EApplyTransformMode : uint8
{
	Override                                 = 0,
	Additive                                 = 1,
	Max                                      = 2,
};

// Enum ControlRig.ERigSwitchParentMode
// NumValues: 0x0004
enum class ERigSwitchParentMode : uint8
{
	World                                    = 0,
	DefaultParent                            = 1,
	ParentItem                               = 2,
	ERigSwitchParentMode_MAX                 = 3,
};

// Enum ControlRig.EControlRigCurveAlignment
// NumValues: 0x0003
enum class EControlRigCurveAlignment : uint8
{
	Front                                    = 0,
	Stretched                                = 1,
	EControlRigCurveAlignment_MAX            = 2,
};

// Enum ControlRig.EControlRigModifyBoneMode
// NumValues: 0x0005
enum class EControlRigModifyBoneMode : uint8
{
	OverrideLocal                            = 0,
	OverrideGlobal                           = 1,
	AdditiveLocal                            = 2,
	AdditiveGlobal                           = 3,
	Max                                      = 4,
};

// Enum ControlRig.EConstraintInterpType
// NumValues: 0x0003
enum class EConstraintInterpType : uint8
{
	Average                                  = 0,
	Shortest                                 = 1,
	Max                                      = 2,
};

// ScriptStruct ControlRig.RigComputedTransform
// 0x0060 (0x0060 - 0x0000)
struct FRigComputedTransform final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigComputedTransform) == 0x000010, "Wrong alignment on FRigComputedTransform");
static_assert(sizeof(FRigComputedTransform) == 0x000060, "Wrong size on FRigComputedTransform");
static_assert(offsetof(FRigComputedTransform, Transform) == 0x000000, "Member 'FRigComputedTransform::Transform' has a wrong offset!");

// ScriptStruct ControlRig.RigLocalAndGlobalTransform
// 0x00D0 (0x00D0 - 0x0000)
struct FRigLocalAndGlobalTransform final
{
public:
	struct FRigComputedTransform                  Local;                                             // 0x0000(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FRigComputedTransform                  Global;                                            // 0x0060(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_29A2[0x10];                                    // 0x00C0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigLocalAndGlobalTransform) == 0x000010, "Wrong alignment on FRigLocalAndGlobalTransform");
static_assert(sizeof(FRigLocalAndGlobalTransform) == 0x0000D0, "Wrong size on FRigLocalAndGlobalTransform");
static_assert(offsetof(FRigLocalAndGlobalTransform, Local) == 0x000000, "Member 'FRigLocalAndGlobalTransform::Local' has a wrong offset!");
static_assert(offsetof(FRigLocalAndGlobalTransform, Global) == 0x000060, "Member 'FRigLocalAndGlobalTransform::Global' has a wrong offset!");

// ScriptStruct ControlRig.RigCurrentAndInitialTransform
// 0x01A0 (0x01A0 - 0x0000)
struct FRigCurrentAndInitialTransform final
{
public:
	struct FRigLocalAndGlobalTransform            Current;                                           // 0x0000(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FRigLocalAndGlobalTransform            Initial;                                           // 0x00D0(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigCurrentAndInitialTransform) == 0x000010, "Wrong alignment on FRigCurrentAndInitialTransform");
static_assert(sizeof(FRigCurrentAndInitialTransform) == 0x0001A0, "Wrong size on FRigCurrentAndInitialTransform");
static_assert(offsetof(FRigCurrentAndInitialTransform, Current) == 0x000000, "Member 'FRigCurrentAndInitialTransform::Current' has a wrong offset!");
static_assert(offsetof(FRigCurrentAndInitialTransform, Initial) == 0x0000D0, "Member 'FRigCurrentAndInitialTransform::Initial' has a wrong offset!");

// ScriptStruct ControlRig.RigElementKey
// 0x000C (0x000C - 0x0000)
struct FRigElementKey final
{
public:
	ERigElementType                               Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29A3[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Name;                                              // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigElementKey) == 0x000004, "Wrong alignment on FRigElementKey");
static_assert(sizeof(FRigElementKey) == 0x00000C, "Wrong size on FRigElementKey");
static_assert(offsetof(FRigElementKey, Type) == 0x000000, "Member 'FRigElementKey::Type' has a wrong offset!");
static_assert(offsetof(FRigElementKey, Name) == 0x000004, "Member 'FRigElementKey::Name' has a wrong offset!");

// ScriptStruct ControlRig.RigBaseElement
// 0x00E8 (0x00E8 - 0x0000)
struct FRigBaseElement
{
public:
	uint8                                         Pad_29A4[0x8];                                     // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKey                         Key;                                               // 0x0008(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_29A5[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 NameString;                                        // 0x0018(0x0010)(ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Index;                                             // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SubIndex;                                          // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_29A6[0xA8];                                    // 0x0030(0x00A8)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CreatedAtInstructionIndex;                         // 0x00D8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_29A7[0x8];                                     // 0x00DC(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bSelected;                                         // 0x00E4(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_29A8[0x3];                                     // 0x00E5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigBaseElement) == 0x000008, "Wrong alignment on FRigBaseElement");
static_assert(sizeof(FRigBaseElement) == 0x0000E8, "Wrong size on FRigBaseElement");
static_assert(offsetof(FRigBaseElement, Key) == 0x000008, "Member 'FRigBaseElement::Key' has a wrong offset!");
static_assert(offsetof(FRigBaseElement, NameString) == 0x000018, "Member 'FRigBaseElement::NameString' has a wrong offset!");
static_assert(offsetof(FRigBaseElement, Index) == 0x000028, "Member 'FRigBaseElement::Index' has a wrong offset!");
static_assert(offsetof(FRigBaseElement, SubIndex) == 0x00002C, "Member 'FRigBaseElement::SubIndex' has a wrong offset!");
static_assert(offsetof(FRigBaseElement, CreatedAtInstructionIndex) == 0x0000D8, "Member 'FRigBaseElement::CreatedAtInstructionIndex' has a wrong offset!");
static_assert(offsetof(FRigBaseElement, bSelected) == 0x0000E4, "Member 'FRigBaseElement::bSelected' has a wrong offset!");

// ScriptStruct ControlRig.RigTransformElement
// 0x01E8 (0x02D0 - 0x00E8)
struct FRigTransformElement : public FRigBaseElement
{
public:
	uint8                                         Pad_29A9[0x8];                                     // 0x00E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigCurrentAndInitialTransform         Pose;                                              // 0x00F0(0x01A0)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_29AA[0x40];                                    // 0x0290(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigTransformElement) == 0x000010, "Wrong alignment on FRigTransformElement");
static_assert(sizeof(FRigTransformElement) == 0x0002D0, "Wrong size on FRigTransformElement");
static_assert(offsetof(FRigTransformElement, Pose) == 0x0000F0, "Member 'FRigTransformElement::Pose' has a wrong offset!");

// ScriptStruct ControlRig.RigElementWeight
// 0x000C (0x000C - 0x0000)
struct FRigElementWeight final
{
public:
	float                                         Location;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rotation;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigElementWeight) == 0x000004, "Wrong alignment on FRigElementWeight");
static_assert(sizeof(FRigElementWeight) == 0x00000C, "Wrong size on FRigElementWeight");
static_assert(offsetof(FRigElementWeight, Location) == 0x000000, "Member 'FRigElementWeight::Location' has a wrong offset!");
static_assert(offsetof(FRigElementWeight, Rotation) == 0x000004, "Member 'FRigElementWeight::Rotation' has a wrong offset!");
static_assert(offsetof(FRigElementWeight, Scale) == 0x000008, "Member 'FRigElementWeight::Scale' has a wrong offset!");

// ScriptStruct ControlRig.RigHierarchyCopyPasteContentPerElement
// 0x01E0 (0x01E0 - 0x0000)
struct FRigHierarchyCopyPasteContentPerElement final
{
public:
	struct FRigElementKey                         Key;                                               // 0x0000(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29AB[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Content;                                           // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRigElementKey>                 Parents;                                           // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRigElementWeight>              ParentWeights;                                     // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FRigCurrentAndInitialTransform         Pose;                                              // 0x0040(0x01A0)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigHierarchyCopyPasteContentPerElement) == 0x000010, "Wrong alignment on FRigHierarchyCopyPasteContentPerElement");
static_assert(sizeof(FRigHierarchyCopyPasteContentPerElement) == 0x0001E0, "Wrong size on FRigHierarchyCopyPasteContentPerElement");
static_assert(offsetof(FRigHierarchyCopyPasteContentPerElement, Key) == 0x000000, "Member 'FRigHierarchyCopyPasteContentPerElement::Key' has a wrong offset!");
static_assert(offsetof(FRigHierarchyCopyPasteContentPerElement, Content) == 0x000010, "Member 'FRigHierarchyCopyPasteContentPerElement::Content' has a wrong offset!");
static_assert(offsetof(FRigHierarchyCopyPasteContentPerElement, Parents) == 0x000020, "Member 'FRigHierarchyCopyPasteContentPerElement::Parents' has a wrong offset!");
static_assert(offsetof(FRigHierarchyCopyPasteContentPerElement, ParentWeights) == 0x000030, "Member 'FRigHierarchyCopyPasteContentPerElement::ParentWeights' has a wrong offset!");
static_assert(offsetof(FRigHierarchyCopyPasteContentPerElement, Pose) == 0x000040, "Member 'FRigHierarchyCopyPasteContentPerElement::Pose' has a wrong offset!");

// ScriptStruct ControlRig.RigHierarchyCopyPasteContent
// 0x0050 (0x0050 - 0x0000)
struct FRigHierarchyCopyPasteContent final
{
public:
	TArray<struct FRigHierarchyCopyPasteContentPerElement> Elements;                                          // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<ERigElementType>                       Types;                                             // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Contents;                                          // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     LocalTransforms;                                   // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     GlobalTransforms;                                  // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigHierarchyCopyPasteContent) == 0x000008, "Wrong alignment on FRigHierarchyCopyPasteContent");
static_assert(sizeof(FRigHierarchyCopyPasteContent) == 0x000050, "Wrong size on FRigHierarchyCopyPasteContent");
static_assert(offsetof(FRigHierarchyCopyPasteContent, Elements) == 0x000000, "Member 'FRigHierarchyCopyPasteContent::Elements' has a wrong offset!");
static_assert(offsetof(FRigHierarchyCopyPasteContent, Types) == 0x000010, "Member 'FRigHierarchyCopyPasteContent::Types' has a wrong offset!");
static_assert(offsetof(FRigHierarchyCopyPasteContent, Contents) == 0x000020, "Member 'FRigHierarchyCopyPasteContent::Contents' has a wrong offset!");
static_assert(offsetof(FRigHierarchyCopyPasteContent, LocalTransforms) == 0x000030, "Member 'FRigHierarchyCopyPasteContent::LocalTransforms' has a wrong offset!");
static_assert(offsetof(FRigHierarchyCopyPasteContent, GlobalTransforms) == 0x000040, "Member 'FRigHierarchyCopyPasteContent::GlobalTransforms' has a wrong offset!");

// ScriptStruct ControlRig.RigHierarchySettings
// 0x0004 (0x0004 - 0x0000)
struct FRigHierarchySettings final
{
public:
	int32                                         ProceduralElementLimit;                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigHierarchySettings) == 0x000004, "Wrong alignment on FRigHierarchySettings");
static_assert(sizeof(FRigHierarchySettings) == 0x000004, "Wrong size on FRigHierarchySettings");
static_assert(offsetof(FRigHierarchySettings, ProceduralElementLimit) == 0x000000, "Member 'FRigHierarchySettings::ProceduralElementLimit' has a wrong offset!");

// ScriptStruct ControlRig.CachedRigElement
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FCachedRigElement final
{
public:
	struct FRigElementKey                         Key;                                               // 0x0000(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint16                                        Index;                                             // 0x000C(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_29AC[0x2];                                     // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ContainerVersion;                                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_29AD[0xC];                                     // 0x0014(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCachedRigElement) == 0x000008, "Wrong alignment on FCachedRigElement");
static_assert(sizeof(FCachedRigElement) == 0x000020, "Wrong size on FCachedRigElement");
static_assert(offsetof(FCachedRigElement, Key) == 0x000000, "Member 'FCachedRigElement::Key' has a wrong offset!");
static_assert(offsetof(FCachedRigElement, Index) == 0x00000C, "Member 'FCachedRigElement::Index' has a wrong offset!");
static_assert(offsetof(FCachedRigElement, ContainerVersion) == 0x000010, "Member 'FCachedRigElement::ContainerVersion' has a wrong offset!");

// ScriptStruct ControlRig.ControlRigExecuteContext
// 0x0060 (0x0150 - 0x00F0)
struct FControlRigExecuteContext final : public FRigVMExecuteContext
{
public:
	uint8                                         Pad_29AE[0x60];                                    // 0x00F0(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FControlRigExecuteContext) == 0x000010, "Wrong alignment on FControlRigExecuteContext");
static_assert(sizeof(FControlRigExecuteContext) == 0x000150, "Wrong size on FControlRigExecuteContext");

// ScriptStruct ControlRig.RigUnit
// 0x0000 (0x0008 - 0x0008)
struct FRigUnit : public FRigVMStruct
{
};
static_assert(alignof(FRigUnit) == 0x000008, "Wrong alignment on FRigUnit");
static_assert(sizeof(FRigUnit) == 0x000008, "Wrong size on FRigUnit");

// ScriptStruct ControlRig.RigUnitMutable
// 0x0158 (0x0160 - 0x0008)
struct FRigUnitMutable : public FRigUnit
{
public:
	uint8                                         Pad_29AF[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FControlRigExecuteContext              ExecuteContext;                                    // 0x0010(0x0150)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnitMutable) == 0x000010, "Wrong alignment on FRigUnitMutable");
static_assert(sizeof(FRigUnitMutable) == 0x000160, "Wrong size on FRigUnitMutable");
static_assert(offsetof(FRigUnitMutable, ExecuteContext) == 0x000010, "Member 'FRigUnitMutable::ExecuteContext' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SetTransform
// 0x00A0 (0x0200 - 0x0160)
struct FRigUnit_SetTransform final : public FRigUnitMutable
{
public:
	struct FRigElementKey                         Item;                                              // 0x0160(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigVMTransformSpace                          Space;                                             // 0x016C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitial;                                          // 0x016D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29B0[0x2];                                     // 0x016E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Value;                                             // 0x0170(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x01D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29B1[0x3];                                     // 0x01D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCachedRigElement                      CachedIndex;                                       // 0x01D8(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29B2[0x8];                                     // 0x01F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_SetTransform) == 0x000010, "Wrong alignment on FRigUnit_SetTransform");
static_assert(sizeof(FRigUnit_SetTransform) == 0x000200, "Wrong size on FRigUnit_SetTransform");
static_assert(offsetof(FRigUnit_SetTransform, Item) == 0x000160, "Member 'FRigUnit_SetTransform::Item' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetTransform, Space) == 0x00016C, "Member 'FRigUnit_SetTransform::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetTransform, bInitial) == 0x00016D, "Member 'FRigUnit_SetTransform::bInitial' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetTransform, Value) == 0x000170, "Member 'FRigUnit_SetTransform::Value' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetTransform, Weight) == 0x0001D0, "Member 'FRigUnit_SetTransform::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetTransform, bPropagateToChildren) == 0x0001D4, "Member 'FRigUnit_SetTransform::bPropagateToChildren' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetTransform, CachedIndex) == 0x0001D8, "Member 'FRigUnit_SetTransform::CachedIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigPoseElement
// 0x00F0 (0x00F0 - 0x0000)
struct FRigPoseElement final
{
public:
	struct FCachedRigElement                      Index;                                             // 0x0000(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             GlobalTransform;                                   // 0x0020(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             LocalTransform;                                    // 0x0080(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurveValue;                                        // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29B3[0xC];                                     // 0x00E4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigPoseElement) == 0x000010, "Wrong alignment on FRigPoseElement");
static_assert(sizeof(FRigPoseElement) == 0x0000F0, "Wrong size on FRigPoseElement");
static_assert(offsetof(FRigPoseElement, Index) == 0x000000, "Member 'FRigPoseElement::Index' has a wrong offset!");
static_assert(offsetof(FRigPoseElement, GlobalTransform) == 0x000020, "Member 'FRigPoseElement::GlobalTransform' has a wrong offset!");
static_assert(offsetof(FRigPoseElement, LocalTransform) == 0x000080, "Member 'FRigPoseElement::LocalTransform' has a wrong offset!");
static_assert(offsetof(FRigPoseElement, CurveValue) == 0x0000E0, "Member 'FRigPoseElement::CurveValue' has a wrong offset!");

// ScriptStruct ControlRig.RigPose
// 0x0070 (0x0070 - 0x0000)
struct FRigPose final
{
public:
	TArray<struct FRigPoseElement>                Elements;                                          // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         HierarchyTopologyVersion;                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PoseHash;                                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29B4[0x58];                                    // 0x0018(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigPose) == 0x000008, "Wrong alignment on FRigPose");
static_assert(sizeof(FRigPose) == 0x000070, "Wrong size on FRigPose");
static_assert(offsetof(FRigPose, Elements) == 0x000000, "Member 'FRigPose::Elements' has a wrong offset!");
static_assert(offsetof(FRigPose, HierarchyTopologyVersion) == 0x000010, "Member 'FRigPose::HierarchyTopologyVersion' has a wrong offset!");
static_assert(offsetof(FRigPose, PoseHash) == 0x000014, "Member 'FRigPose::PoseHash' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_HierarchyBase
// 0x0000 (0x0008 - 0x0008)
struct FRigUnit_HierarchyBase : public FRigUnit
{
};
static_assert(alignof(FRigUnit_HierarchyBase) == 0x000008, "Wrong alignment on FRigUnit_HierarchyBase");
static_assert(sizeof(FRigUnit_HierarchyBase) == 0x000008, "Wrong size on FRigUnit_HierarchyBase");

// ScriptStruct ControlRig.RigUnit_HierarchyGetPoseItemArray
// 0x0088 (0x0090 - 0x0008)
struct FRigUnit_HierarchyGetPoseItemArray final : public FRigUnit_HierarchyBase
{
public:
	bool                                          Initial;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigElementType                               ElementType;                                       // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29B5[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigElementKey>                 ItemsToGet;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FRigPose                               Pose;                                              // 0x0020(0x0070)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_HierarchyGetPoseItemArray) == 0x000008, "Wrong alignment on FRigUnit_HierarchyGetPoseItemArray");
static_assert(sizeof(FRigUnit_HierarchyGetPoseItemArray) == 0x000090, "Wrong size on FRigUnit_HierarchyGetPoseItemArray");
static_assert(offsetof(FRigUnit_HierarchyGetPoseItemArray, Initial) == 0x000008, "Member 'FRigUnit_HierarchyGetPoseItemArray::Initial' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyGetPoseItemArray, ElementType) == 0x000009, "Member 'FRigUnit_HierarchyGetPoseItemArray::ElementType' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyGetPoseItemArray, ItemsToGet) == 0x000010, "Member 'FRigUnit_HierarchyGetPoseItemArray::ItemsToGet' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyGetPoseItemArray, Pose) == 0x000020, "Member 'FRigUnit_HierarchyGetPoseItemArray::Pose' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_DrawContainerSetThickness
// 0x0010 (0x0170 - 0x0160)
struct FRigUnit_DrawContainerSetThickness final : public FRigUnitMutable
{
public:
	class FName                                   InstructionName;                                   // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29B6[0x4];                                     // 0x016C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_DrawContainerSetThickness) == 0x000010, "Wrong alignment on FRigUnit_DrawContainerSetThickness");
static_assert(sizeof(FRigUnit_DrawContainerSetThickness) == 0x000170, "Wrong size on FRigUnit_DrawContainerSetThickness");
static_assert(offsetof(FRigUnit_DrawContainerSetThickness, InstructionName) == 0x000160, "Member 'FRigUnit_DrawContainerSetThickness::InstructionName' has a wrong offset!");
static_assert(offsetof(FRigUnit_DrawContainerSetThickness, Thickness) == 0x000168, "Member 'FRigUnit_DrawContainerSetThickness::Thickness' has a wrong offset!");

// ScriptStruct ControlRig.RigMultiParentElement
// 0x0100 (0x03D0 - 0x02D0)
struct FRigMultiParentElement : public FRigTransformElement
{
public:
	uint8                                         Pad_29B7[0x100];                                   // 0x02D0(0x0100)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigMultiParentElement) == 0x000010, "Wrong alignment on FRigMultiParentElement");
static_assert(sizeof(FRigMultiParentElement) == 0x0003D0, "Wrong size on FRigMultiParentElement");

// ScriptStruct ControlRig.RigNullElement
// 0x0000 (0x03D0 - 0x03D0)
struct FRigNullElement final : public FRigMultiParentElement
{
};
static_assert(alignof(FRigNullElement) == 0x000010, "Wrong alignment on FRigNullElement");
static_assert(sizeof(FRigNullElement) == 0x0003D0, "Wrong size on FRigNullElement");

// ScriptStruct ControlRig.CRSimContainer
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FCRSimContainer
{
public:
	uint8                                         Pad_29B8[0x8];                                     // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeStep;                                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccumulatedTime;                                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeLeftForStep;                                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29B9[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCRSimContainer) == 0x000008, "Wrong alignment on FCRSimContainer");
static_assert(sizeof(FCRSimContainer) == 0x000018, "Wrong size on FCRSimContainer");
static_assert(offsetof(FCRSimContainer, TimeStep) == 0x000008, "Member 'FCRSimContainer::TimeStep' has a wrong offset!");
static_assert(offsetof(FCRSimContainer, AccumulatedTime) == 0x00000C, "Member 'FCRSimContainer::AccumulatedTime' has a wrong offset!");
static_assert(offsetof(FCRSimContainer, TimeLeftForStep) == 0x000010, "Member 'FCRSimContainer::TimeLeftForStep' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SphereTraceWorld
// 0x0070 (0x0078 - 0x0008)
struct FRigUnit_SphereTraceWorld final : public FRigUnit
{
public:
	struct FVector                                Start;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             Channel;                                           // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29BA[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Radius;                                            // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHit;                                              // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29BB[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitLocation;                                       // 0x0048(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitNormal;                                         // 0x0060(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_SphereTraceWorld) == 0x000008, "Wrong alignment on FRigUnit_SphereTraceWorld");
static_assert(sizeof(FRigUnit_SphereTraceWorld) == 0x000078, "Wrong size on FRigUnit_SphereTraceWorld");
static_assert(offsetof(FRigUnit_SphereTraceWorld, Start) == 0x000008, "Member 'FRigUnit_SphereTraceWorld::Start' has a wrong offset!");
static_assert(offsetof(FRigUnit_SphereTraceWorld, End) == 0x000020, "Member 'FRigUnit_SphereTraceWorld::End' has a wrong offset!");
static_assert(offsetof(FRigUnit_SphereTraceWorld, Channel) == 0x000038, "Member 'FRigUnit_SphereTraceWorld::Channel' has a wrong offset!");
static_assert(offsetof(FRigUnit_SphereTraceWorld, Radius) == 0x00003C, "Member 'FRigUnit_SphereTraceWorld::Radius' has a wrong offset!");
static_assert(offsetof(FRigUnit_SphereTraceWorld, bHit) == 0x000040, "Member 'FRigUnit_SphereTraceWorld::bHit' has a wrong offset!");
static_assert(offsetof(FRigUnit_SphereTraceWorld, HitLocation) == 0x000048, "Member 'FRigUnit_SphereTraceWorld::HitLocation' has a wrong offset!");
static_assert(offsetof(FRigUnit_SphereTraceWorld, HitNormal) == 0x000060, "Member 'FRigUnit_SphereTraceWorld::HitNormal' has a wrong offset!");

// ScriptStruct ControlRig.ControlRigTestDataVariable
// 0x0020 (0x0020 - 0x0000)
struct FControlRigTestDataVariable final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CPPType;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FControlRigTestDataVariable) == 0x000008, "Wrong alignment on FControlRigTestDataVariable");
static_assert(sizeof(FControlRigTestDataVariable) == 0x000020, "Wrong size on FControlRigTestDataVariable");
static_assert(offsetof(FControlRigTestDataVariable, Name) == 0x000000, "Member 'FControlRigTestDataVariable::Name' has a wrong offset!");
static_assert(offsetof(FControlRigTestDataVariable, CPPType) == 0x000008, "Member 'FControlRigTestDataVariable::CPPType' has a wrong offset!");
static_assert(offsetof(FControlRigTestDataVariable, Value) == 0x000010, "Member 'FControlRigTestDataVariable::Value' has a wrong offset!");

// ScriptStruct ControlRig.ConstraintParent
// 0x0010 (0x0010 - 0x0000)
struct FConstraintParent final
{
public:
	struct FRigElementKey                         Item;                                              // 0x0000(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConstraintParent) == 0x000004, "Wrong alignment on FConstraintParent");
static_assert(sizeof(FConstraintParent) == 0x000010, "Wrong size on FConstraintParent");
static_assert(offsetof(FConstraintParent, Item) == 0x000000, "Member 'FConstraintParent::Item' has a wrong offset!");
static_assert(offsetof(FConstraintParent, Weight) == 0x00000C, "Member 'FConstraintParent::Weight' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_HighlevelBaseMutable
// 0x0000 (0x0160 - 0x0160)
struct FRigUnit_HighlevelBaseMutable : public FRigUnitMutable
{
};
static_assert(alignof(FRigUnit_HighlevelBaseMutable) == 0x000010, "Wrong alignment on FRigUnit_HighlevelBaseMutable");
static_assert(sizeof(FRigUnit_HighlevelBaseMutable) == 0x000160, "Wrong size on FRigUnit_HighlevelBaseMutable");

// ScriptStruct ControlRig.RigUnit_PositionConstraintLocalSpaceOffset
// 0x0060 (0x01C0 - 0x0160)
struct FRigUnit_PositionConstraintLocalSpaceOffset final : public FRigUnit_HighlevelBaseMutable
{
public:
	struct FRigElementKey                         Child;                                             // 0x0160(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMaintainOffset;                                   // 0x016C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFilterOptionPerAxis                   Filter;                                            // 0x016D(0x0003)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FConstraintParent>              Parents;                                           // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29BC[0x4];                                     // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCachedRigElement                      ChildCache;                                        // 0x0188(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCachedRigElement>              ParentCaches;                                      // 0x01A8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_29BD[0x8];                                     // 0x01B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_PositionConstraintLocalSpaceOffset) == 0x000010, "Wrong alignment on FRigUnit_PositionConstraintLocalSpaceOffset");
static_assert(sizeof(FRigUnit_PositionConstraintLocalSpaceOffset) == 0x0001C0, "Wrong size on FRigUnit_PositionConstraintLocalSpaceOffset");
static_assert(offsetof(FRigUnit_PositionConstraintLocalSpaceOffset, Child) == 0x000160, "Member 'FRigUnit_PositionConstraintLocalSpaceOffset::Child' has a wrong offset!");
static_assert(offsetof(FRigUnit_PositionConstraintLocalSpaceOffset, bMaintainOffset) == 0x00016C, "Member 'FRigUnit_PositionConstraintLocalSpaceOffset::bMaintainOffset' has a wrong offset!");
static_assert(offsetof(FRigUnit_PositionConstraintLocalSpaceOffset, Filter) == 0x00016D, "Member 'FRigUnit_PositionConstraintLocalSpaceOffset::Filter' has a wrong offset!");
static_assert(offsetof(FRigUnit_PositionConstraintLocalSpaceOffset, Parents) == 0x000170, "Member 'FRigUnit_PositionConstraintLocalSpaceOffset::Parents' has a wrong offset!");
static_assert(offsetof(FRigUnit_PositionConstraintLocalSpaceOffset, Weight) == 0x000180, "Member 'FRigUnit_PositionConstraintLocalSpaceOffset::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_PositionConstraintLocalSpaceOffset, ChildCache) == 0x000188, "Member 'FRigUnit_PositionConstraintLocalSpaceOffset::ChildCache' has a wrong offset!");
static_assert(offsetof(FRigUnit_PositionConstraintLocalSpaceOffset, ParentCaches) == 0x0001A8, "Member 'FRigUnit_PositionConstraintLocalSpaceOffset::ParentCaches' has a wrong offset!");

// ScriptStruct ControlRig.RigControlLimitEnabled
// 0x0002 (0x0002 - 0x0000)
struct FRigControlLimitEnabled final
{
public:
	bool                                          bMinimum;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMaximum;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigControlLimitEnabled) == 0x000001, "Wrong alignment on FRigControlLimitEnabled");
static_assert(sizeof(FRigControlLimitEnabled) == 0x000002, "Wrong size on FRigControlLimitEnabled");
static_assert(offsetof(FRigControlLimitEnabled, bMinimum) == 0x000000, "Member 'FRigControlLimitEnabled::bMinimum' has a wrong offset!");
static_assert(offsetof(FRigControlLimitEnabled, bMaximum) == 0x000001, "Member 'FRigControlLimitEnabled::bMaximum' has a wrong offset!");

// ScriptStruct ControlRig.RigControlValueStorage
// 0x0084 (0x0084 - 0x0000)
struct FRigControlValueStorage final
{
public:
	float                                         Float00;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Float01;                                           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Float02;                                           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Float03;                                           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Float10;                                           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Float11;                                           // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Float12;                                           // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Float13;                                           // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Float20;                                           // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Float21;                                           // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Float22;                                           // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Float23;                                           // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Float30;                                           // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Float31;                                           // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Float32;                                           // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Float33;                                           // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Float00_2;                                         // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Float01_2;                                         // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Float02_2;                                         // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Float03_2;                                         // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Float10_2;                                         // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Float11_2;                                         // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Float12_2;                                         // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Float13_2;                                         // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Float20_2;                                         // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Float21_2;                                         // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Float22_2;                                         // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Float23_2;                                         // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Float30_2;                                         // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Float31_2;                                         // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Float32_2;                                         // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Float33_2;                                         // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValid;                                            // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29BE[0x3];                                     // 0x0081(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigControlValueStorage) == 0x000004, "Wrong alignment on FRigControlValueStorage");
static_assert(sizeof(FRigControlValueStorage) == 0x000084, "Wrong size on FRigControlValueStorage");
static_assert(offsetof(FRigControlValueStorage, Float00) == 0x000000, "Member 'FRigControlValueStorage::Float00' has a wrong offset!");
static_assert(offsetof(FRigControlValueStorage, Float01) == 0x000004, "Member 'FRigControlValueStorage::Float01' has a wrong offset!");
static_assert(offsetof(FRigControlValueStorage, Float02) == 0x000008, "Member 'FRigControlValueStorage::Float02' has a wrong offset!");
static_assert(offsetof(FRigControlValueStorage, Float03) == 0x00000C, "Member 'FRigControlValueStorage::Float03' has a wrong offset!");
static_assert(offsetof(FRigControlValueStorage, Float10) == 0x000010, "Member 'FRigControlValueStorage::Float10' has a wrong offset!");
static_assert(offsetof(FRigControlValueStorage, Float11) == 0x000014, "Member 'FRigControlValueStorage::Float11' has a wrong offset!");
static_assert(offsetof(FRigControlValueStorage, Float12) == 0x000018, "Member 'FRigControlValueStorage::Float12' has a wrong offset!");
static_assert(offsetof(FRigControlValueStorage, Float13) == 0x00001C, "Member 'FRigControlValueStorage::Float13' has a wrong offset!");
static_assert(offsetof(FRigControlValueStorage, Float20) == 0x000020, "Member 'FRigControlValueStorage::Float20' has a wrong offset!");
static_assert(offsetof(FRigControlValueStorage, Float21) == 0x000024, "Member 'FRigControlValueStorage::Float21' has a wrong offset!");
static_assert(offsetof(FRigControlValueStorage, Float22) == 0x000028, "Member 'FRigControlValueStorage::Float22' has a wrong offset!");
static_assert(offsetof(FRigControlValueStorage, Float23) == 0x00002C, "Member 'FRigControlValueStorage::Float23' has a wrong offset!");
static_assert(offsetof(FRigControlValueStorage, Float30) == 0x000030, "Member 'FRigControlValueStorage::Float30' has a wrong offset!");
static_assert(offsetof(FRigControlValueStorage, Float31) == 0x000034, "Member 'FRigControlValueStorage::Float31' has a wrong offset!");
static_assert(offsetof(FRigControlValueStorage, Float32) == 0x000038, "Member 'FRigControlValueStorage::Float32' has a wrong offset!");
static_assert(offsetof(FRigControlValueStorage, Float33) == 0x00003C, "Member 'FRigControlValueStorage::Float33' has a wrong offset!");
static_assert(offsetof(FRigControlValueStorage, Float00_2) == 0x000040, "Member 'FRigControlValueStorage::Float00_2' has a wrong offset!");
static_assert(offsetof(FRigControlValueStorage, Float01_2) == 0x000044, "Member 'FRigControlValueStorage::Float01_2' has a wrong offset!");
static_assert(offsetof(FRigControlValueStorage, Float02_2) == 0x000048, "Member 'FRigControlValueStorage::Float02_2' has a wrong offset!");
static_assert(offsetof(FRigControlValueStorage, Float03_2) == 0x00004C, "Member 'FRigControlValueStorage::Float03_2' has a wrong offset!");
static_assert(offsetof(FRigControlValueStorage, Float10_2) == 0x000050, "Member 'FRigControlValueStorage::Float10_2' has a wrong offset!");
static_assert(offsetof(FRigControlValueStorage, Float11_2) == 0x000054, "Member 'FRigControlValueStorage::Float11_2' has a wrong offset!");
static_assert(offsetof(FRigControlValueStorage, Float12_2) == 0x000058, "Member 'FRigControlValueStorage::Float12_2' has a wrong offset!");
static_assert(offsetof(FRigControlValueStorage, Float13_2) == 0x00005C, "Member 'FRigControlValueStorage::Float13_2' has a wrong offset!");
static_assert(offsetof(FRigControlValueStorage, Float20_2) == 0x000060, "Member 'FRigControlValueStorage::Float20_2' has a wrong offset!");
static_assert(offsetof(FRigControlValueStorage, Float21_2) == 0x000064, "Member 'FRigControlValueStorage::Float21_2' has a wrong offset!");
static_assert(offsetof(FRigControlValueStorage, Float22_2) == 0x000068, "Member 'FRigControlValueStorage::Float22_2' has a wrong offset!");
static_assert(offsetof(FRigControlValueStorage, Float23_2) == 0x00006C, "Member 'FRigControlValueStorage::Float23_2' has a wrong offset!");
static_assert(offsetof(FRigControlValueStorage, Float30_2) == 0x000070, "Member 'FRigControlValueStorage::Float30_2' has a wrong offset!");
static_assert(offsetof(FRigControlValueStorage, Float31_2) == 0x000074, "Member 'FRigControlValueStorage::Float31_2' has a wrong offset!");
static_assert(offsetof(FRigControlValueStorage, Float32_2) == 0x000078, "Member 'FRigControlValueStorage::Float32_2' has a wrong offset!");
static_assert(offsetof(FRigControlValueStorage, Float33_2) == 0x00007C, "Member 'FRigControlValueStorage::Float33_2' has a wrong offset!");
static_assert(offsetof(FRigControlValueStorage, bValid) == 0x000080, "Member 'FRigControlValueStorage::bValid' has a wrong offset!");

// ScriptStruct ControlRig.RigControlValue
// 0x0084 (0x0084 - 0x0000)
struct FRigControlValue final
{
public:
	struct FRigControlValueStorage                FloatStorage;                                      // 0x0000(0x0084)(NoDestructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FRigControlValue) == 0x000004, "Wrong alignment on FRigControlValue");
static_assert(sizeof(FRigControlValue) == 0x000084, "Wrong size on FRigControlValue");
static_assert(offsetof(FRigControlValue, FloatStorage) == 0x000000, "Member 'FRigControlValue::FloatStorage' has a wrong offset!");

// ScriptStruct ControlRig.RigControlElementCustomization
// 0x0020 (0x0020 - 0x0000)
struct FRigControlElementCustomization final
{
public:
	TArray<struct FRigElementKey>                 AvailableSpaces;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRigElementKey>                 RemovedSpaces;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigControlElementCustomization) == 0x000008, "Wrong alignment on FRigControlElementCustomization");
static_assert(sizeof(FRigControlElementCustomization) == 0x000020, "Wrong size on FRigControlElementCustomization");
static_assert(offsetof(FRigControlElementCustomization, AvailableSpaces) == 0x000000, "Member 'FRigControlElementCustomization::AvailableSpaces' has a wrong offset!");
static_assert(offsetof(FRigControlElementCustomization, RemovedSpaces) == 0x000010, "Member 'FRigControlElementCustomization::RemovedSpaces' has a wrong offset!");

// ScriptStruct ControlRig.RigControlSettings
// 0x01B8 (0x01B8 - 0x0000)
struct FRigControlSettings final
{
public:
	ERigControlAnimationType                      AnimationType;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigControlType                               ControlType;                                       // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29BF[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DisplayName;                                       // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigControlAxis                               PrimaryAxis;                                       // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCurve;                                          // 0x000D(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29C0[0x2];                                     // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigControlLimitEnabled>        LimitEnabled;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bDrawLimits;                                       // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29C1[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigControlValue                       MinimumValue;                                      // 0x0024(0x0084)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRigControlValue                       MaximumValue;                                      // 0x00A8(0x0084)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bShapeVisible;                                     // 0x012C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigControlVisibility                         ShapeVisibility;                                   // 0x012D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29C2[0x2];                                     // 0x012E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ShapeName;                                         // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShapeColor;                                        // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTransientControl;                               // 0x0148(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29C3[0x7];                                     // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UEnum*                                  ControlEnum;                                       // 0x0150(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigControlElementCustomization        Customization;                                     // 0x0158(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FRigElementKey>                 DrivenControls;                                    // 0x0178(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_29C4[0x10];                                    // 0x0188(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bGroupWithParentControl;                           // 0x0198(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestrictSpaceSwitching;                           // 0x0199(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29C5[0x6];                                     // 0x019A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ERigControlTransformChannel>           FilteredChannels;                                  // 0x01A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	EEulerRotationOrder                           PreferredRotationOrder;                            // 0x01B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsePreferredRotationOrder;                        // 0x01B1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29C6[0x6];                                     // 0x01B2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigControlSettings) == 0x000008, "Wrong alignment on FRigControlSettings");
static_assert(sizeof(FRigControlSettings) == 0x0001B8, "Wrong size on FRigControlSettings");
static_assert(offsetof(FRigControlSettings, AnimationType) == 0x000000, "Member 'FRigControlSettings::AnimationType' has a wrong offset!");
static_assert(offsetof(FRigControlSettings, ControlType) == 0x000001, "Member 'FRigControlSettings::ControlType' has a wrong offset!");
static_assert(offsetof(FRigControlSettings, DisplayName) == 0x000004, "Member 'FRigControlSettings::DisplayName' has a wrong offset!");
static_assert(offsetof(FRigControlSettings, PrimaryAxis) == 0x00000C, "Member 'FRigControlSettings::PrimaryAxis' has a wrong offset!");
static_assert(offsetof(FRigControlSettings, bIsCurve) == 0x00000D, "Member 'FRigControlSettings::bIsCurve' has a wrong offset!");
static_assert(offsetof(FRigControlSettings, LimitEnabled) == 0x000010, "Member 'FRigControlSettings::LimitEnabled' has a wrong offset!");
static_assert(offsetof(FRigControlSettings, bDrawLimits) == 0x000020, "Member 'FRigControlSettings::bDrawLimits' has a wrong offset!");
static_assert(offsetof(FRigControlSettings, MinimumValue) == 0x000024, "Member 'FRigControlSettings::MinimumValue' has a wrong offset!");
static_assert(offsetof(FRigControlSettings, MaximumValue) == 0x0000A8, "Member 'FRigControlSettings::MaximumValue' has a wrong offset!");
static_assert(offsetof(FRigControlSettings, bShapeVisible) == 0x00012C, "Member 'FRigControlSettings::bShapeVisible' has a wrong offset!");
static_assert(offsetof(FRigControlSettings, ShapeVisibility) == 0x00012D, "Member 'FRigControlSettings::ShapeVisibility' has a wrong offset!");
static_assert(offsetof(FRigControlSettings, ShapeName) == 0x000130, "Member 'FRigControlSettings::ShapeName' has a wrong offset!");
static_assert(offsetof(FRigControlSettings, ShapeColor) == 0x000138, "Member 'FRigControlSettings::ShapeColor' has a wrong offset!");
static_assert(offsetof(FRigControlSettings, bIsTransientControl) == 0x000148, "Member 'FRigControlSettings::bIsTransientControl' has a wrong offset!");
static_assert(offsetof(FRigControlSettings, ControlEnum) == 0x000150, "Member 'FRigControlSettings::ControlEnum' has a wrong offset!");
static_assert(offsetof(FRigControlSettings, Customization) == 0x000158, "Member 'FRigControlSettings::Customization' has a wrong offset!");
static_assert(offsetof(FRigControlSettings, DrivenControls) == 0x000178, "Member 'FRigControlSettings::DrivenControls' has a wrong offset!");
static_assert(offsetof(FRigControlSettings, bGroupWithParentControl) == 0x000198, "Member 'FRigControlSettings::bGroupWithParentControl' has a wrong offset!");
static_assert(offsetof(FRigControlSettings, bRestrictSpaceSwitching) == 0x000199, "Member 'FRigControlSettings::bRestrictSpaceSwitching' has a wrong offset!");
static_assert(offsetof(FRigControlSettings, FilteredChannels) == 0x0001A0, "Member 'FRigControlSettings::FilteredChannels' has a wrong offset!");
static_assert(offsetof(FRigControlSettings, PreferredRotationOrder) == 0x0001B0, "Member 'FRigControlSettings::PreferredRotationOrder' has a wrong offset!");
static_assert(offsetof(FRigControlSettings, bUsePreferredRotationOrder) == 0x0001B1, "Member 'FRigControlSettings::bUsePreferredRotationOrder' has a wrong offset!");

// ScriptStruct ControlRig.RigPreferredEulerAngles
// 0x0038 (0x0038 - 0x0000)
struct FRigPreferredEulerAngles final
{
public:
	EEulerRotationOrder                           RotationOrder;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29C7[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Current;                                           // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Initial;                                           // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigPreferredEulerAngles) == 0x000008, "Wrong alignment on FRigPreferredEulerAngles");
static_assert(sizeof(FRigPreferredEulerAngles) == 0x000038, "Wrong size on FRigPreferredEulerAngles");
static_assert(offsetof(FRigPreferredEulerAngles, RotationOrder) == 0x000000, "Member 'FRigPreferredEulerAngles::RotationOrder' has a wrong offset!");
static_assert(offsetof(FRigPreferredEulerAngles, Current) == 0x000008, "Member 'FRigPreferredEulerAngles::Current' has a wrong offset!");
static_assert(offsetof(FRigPreferredEulerAngles, Initial) == 0x000020, "Member 'FRigPreferredEulerAngles::Initial' has a wrong offset!");

// ScriptStruct ControlRig.RigControlElement
// 0x0540 (0x0910 - 0x03D0)
struct FRigControlElement final : public FRigMultiParentElement
{
public:
	struct FRigControlSettings                    Settings;                                          // 0x03D0(0x01B8)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29C8[0x8];                                     // 0x0588(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigCurrentAndInitialTransform         Offset;                                            // 0x0590(0x01A0)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FRigCurrentAndInitialTransform         Shape;                                             // 0x0730(0x01A0)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FRigPreferredEulerAngles               PreferredEulerAngles;                              // 0x08D0(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_29C9[0x8];                                     // 0x0908(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigControlElement) == 0x000010, "Wrong alignment on FRigControlElement");
static_assert(sizeof(FRigControlElement) == 0x000910, "Wrong size on FRigControlElement");
static_assert(offsetof(FRigControlElement, Settings) == 0x0003D0, "Member 'FRigControlElement::Settings' has a wrong offset!");
static_assert(offsetof(FRigControlElement, Offset) == 0x000590, "Member 'FRigControlElement::Offset' has a wrong offset!");
static_assert(offsetof(FRigControlElement, Shape) == 0x000730, "Member 'FRigControlElement::Shape' has a wrong offset!");
static_assert(offsetof(FRigControlElement, PreferredEulerAngles) == 0x0008D0, "Member 'FRigControlElement::PreferredEulerAngles' has a wrong offset!");

// ScriptStruct ControlRig.RigSingleParentElement
// 0x0010 (0x02E0 - 0x02D0)
#pragma pack(push, 0x1)
struct alignas(0x10) FRigSingleParentElement : public FRigTransformElement
{
public:
	uint8                                         Pad_29CA[0x8];                                     // 0x02D0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
#pragma pack(pop)
static_assert(alignof(FRigSingleParentElement) == 0x000010, "Wrong alignment on FRigSingleParentElement");
static_assert(sizeof(FRigSingleParentElement) == 0x0002E0, "Wrong size on FRigSingleParentElement");

// ScriptStruct ControlRig.RigUnit_HierarchyAddControlVector_LimitSettings
// 0x0040 (0x0040 - 0x0000)
struct FRigUnit_HierarchyAddControlVector_LimitSettings final
{
public:
	struct FRigControlLimitEnabled                LimitX;                                            // 0x0000(0x0002)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRigControlLimitEnabled                LimitY;                                            // 0x0002(0x0002)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRigControlLimitEnabled                LimitZ;                                            // 0x0004(0x0002)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_29CB[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                MinValue;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MaxValue;                                          // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawLimits;                                       // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29CC[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_HierarchyAddControlVector_LimitSettings) == 0x000008, "Wrong alignment on FRigUnit_HierarchyAddControlVector_LimitSettings");
static_assert(sizeof(FRigUnit_HierarchyAddControlVector_LimitSettings) == 0x000040, "Wrong size on FRigUnit_HierarchyAddControlVector_LimitSettings");
static_assert(offsetof(FRigUnit_HierarchyAddControlVector_LimitSettings, LimitX) == 0x000000, "Member 'FRigUnit_HierarchyAddControlVector_LimitSettings::LimitX' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControlVector_LimitSettings, LimitY) == 0x000002, "Member 'FRigUnit_HierarchyAddControlVector_LimitSettings::LimitY' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControlVector_LimitSettings, LimitZ) == 0x000004, "Member 'FRigUnit_HierarchyAddControlVector_LimitSettings::LimitZ' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControlVector_LimitSettings, MinValue) == 0x000008, "Member 'FRigUnit_HierarchyAddControlVector_LimitSettings::MinValue' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControlVector_LimitSettings, MaxValue) == 0x000020, "Member 'FRigUnit_HierarchyAddControlVector_LimitSettings::MaxValue' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControlVector_LimitSettings, bDrawLimits) == 0x000038, "Member 'FRigUnit_HierarchyAddControlVector_LimitSettings::bDrawLimits' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_HierarchyAddControl_ShapeSettings
// 0x0080 (0x0080 - 0x0000)
struct FRigUnit_HierarchyAddControl_ShapeSettings final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29CD[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Name;                                              // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x000C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29CE[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0020(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_HierarchyAddControl_ShapeSettings) == 0x000010, "Wrong alignment on FRigUnit_HierarchyAddControl_ShapeSettings");
static_assert(sizeof(FRigUnit_HierarchyAddControl_ShapeSettings) == 0x000080, "Wrong size on FRigUnit_HierarchyAddControl_ShapeSettings");
static_assert(offsetof(FRigUnit_HierarchyAddControl_ShapeSettings, bVisible) == 0x000000, "Member 'FRigUnit_HierarchyAddControl_ShapeSettings::bVisible' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControl_ShapeSettings, Name) == 0x000004, "Member 'FRigUnit_HierarchyAddControl_ShapeSettings::Name' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControl_ShapeSettings, Color) == 0x00000C, "Member 'FRigUnit_HierarchyAddControl_ShapeSettings::Color' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControl_ShapeSettings, Transform) == 0x000020, "Member 'FRigUnit_HierarchyAddControl_ShapeSettings::Transform' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_HierarchyAddControl_ProxySettings
// 0x0020 (0x0020 - 0x0000)
struct FRigUnit_HierarchyAddControl_ProxySettings final
{
public:
	bool                                          bIsProxy;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29CF[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigElementKey>                 DrivenControls;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	ERigControlVisibility                         ShapeVisibility;                                   // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29D0[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_HierarchyAddControl_ProxySettings) == 0x000008, "Wrong alignment on FRigUnit_HierarchyAddControl_ProxySettings");
static_assert(sizeof(FRigUnit_HierarchyAddControl_ProxySettings) == 0x000020, "Wrong size on FRigUnit_HierarchyAddControl_ProxySettings");
static_assert(offsetof(FRigUnit_HierarchyAddControl_ProxySettings, bIsProxy) == 0x000000, "Member 'FRigUnit_HierarchyAddControl_ProxySettings::bIsProxy' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControl_ProxySettings, DrivenControls) == 0x000008, "Member 'FRigUnit_HierarchyAddControl_ProxySettings::DrivenControls' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControl_ProxySettings, ShapeVisibility) == 0x000018, "Member 'FRigUnit_HierarchyAddControl_ProxySettings::ShapeVisibility' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_HierarchyAddControl_Settings
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FRigUnit_HierarchyAddControl_Settings
{
public:
	uint8                                         Pad_29D1[0x8];                                     // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DisplayName;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_HierarchyAddControl_Settings) == 0x000008, "Wrong alignment on FRigUnit_HierarchyAddControl_Settings");
static_assert(sizeof(FRigUnit_HierarchyAddControl_Settings) == 0x000010, "Wrong size on FRigUnit_HierarchyAddControl_Settings");
static_assert(offsetof(FRigUnit_HierarchyAddControl_Settings, DisplayName) == 0x000008, "Member 'FRigUnit_HierarchyAddControl_Settings::DisplayName' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_HierarchyAddControlVector_Settings
// 0x0100 (0x0110 - 0x0010)
struct FRigUnit_HierarchyAddControlVector_Settings final : public FRigUnit_HierarchyAddControl_Settings
{
public:
	ERigVMTransformSpace                          InitialSpace;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPosition;                                       // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29D2[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_HierarchyAddControlVector_LimitSettings Limits;                                            // 0x0018(0x0040)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_29D3[0x8];                                     // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_HierarchyAddControl_ShapeSettings Shape;                                             // 0x0060(0x0080)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRigUnit_HierarchyAddControl_ProxySettings Proxy;                                             // 0x00E0(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<ERigControlTransformChannel>           FilteredChannels;                                  // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_HierarchyAddControlVector_Settings) == 0x000010, "Wrong alignment on FRigUnit_HierarchyAddControlVector_Settings");
static_assert(sizeof(FRigUnit_HierarchyAddControlVector_Settings) == 0x000110, "Wrong size on FRigUnit_HierarchyAddControlVector_Settings");
static_assert(offsetof(FRigUnit_HierarchyAddControlVector_Settings, InitialSpace) == 0x000010, "Member 'FRigUnit_HierarchyAddControlVector_Settings::InitialSpace' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControlVector_Settings, bIsPosition) == 0x000011, "Member 'FRigUnit_HierarchyAddControlVector_Settings::bIsPosition' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControlVector_Settings, Limits) == 0x000018, "Member 'FRigUnit_HierarchyAddControlVector_Settings::Limits' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControlVector_Settings, Shape) == 0x000060, "Member 'FRigUnit_HierarchyAddControlVector_Settings::Shape' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControlVector_Settings, Proxy) == 0x0000E0, "Member 'FRigUnit_HierarchyAddControlVector_Settings::Proxy' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControlVector_Settings, FilteredChannels) == 0x000100, "Member 'FRigUnit_HierarchyAddControlVector_Settings::FilteredChannels' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_AimBone_DebugSettings
// 0x0070 (0x0070 - 0x0000)
struct FRigUnit_AimBone_DebugSettings final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29D4[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Scale;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29D5[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             WorldOffset;                                       // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_AimBone_DebugSettings) == 0x000010, "Wrong alignment on FRigUnit_AimBone_DebugSettings");
static_assert(sizeof(FRigUnit_AimBone_DebugSettings) == 0x000070, "Wrong size on FRigUnit_AimBone_DebugSettings");
static_assert(offsetof(FRigUnit_AimBone_DebugSettings, bEnabled) == 0x000000, "Member 'FRigUnit_AimBone_DebugSettings::bEnabled' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimBone_DebugSettings, Scale) == 0x000004, "Member 'FRigUnit_AimBone_DebugSettings::Scale' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimBone_DebugSettings, WorldOffset) == 0x000010, "Member 'FRigUnit_AimBone_DebugSettings::WorldOffset' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_AimConstraint_AdvancedSettings
// 0x0080 (0x0080 - 0x0000)
struct FRigUnit_AimConstraint_AdvancedSettings final
{
public:
	struct FRigUnit_AimBone_DebugSettings         DebugSettings;                                     // 0x0000(0x0070)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EEulerRotationOrder                           RotationOrderForFilter;                            // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29D6[0xF];                                     // 0x0071(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_AimConstraint_AdvancedSettings) == 0x000010, "Wrong alignment on FRigUnit_AimConstraint_AdvancedSettings");
static_assert(sizeof(FRigUnit_AimConstraint_AdvancedSettings) == 0x000080, "Wrong size on FRigUnit_AimConstraint_AdvancedSettings");
static_assert(offsetof(FRigUnit_AimConstraint_AdvancedSettings, DebugSettings) == 0x000000, "Member 'FRigUnit_AimConstraint_AdvancedSettings::DebugSettings' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimConstraint_AdvancedSettings, RotationOrderForFilter) == 0x000070, "Member 'FRigUnit_AimConstraint_AdvancedSettings::RotationOrderForFilter' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_BeginExecution
// 0x0158 (0x0160 - 0x0008)
struct FRigUnit_BeginExecution final : public FRigUnit
{
public:
	uint8                                         Pad_29D7[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FControlRigExecuteContext              ExecuteContext;                                    // 0x0010(0x0150)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_BeginExecution) == 0x000010, "Wrong alignment on FRigUnit_BeginExecution");
static_assert(sizeof(FRigUnit_BeginExecution) == 0x000160, "Wrong size on FRigUnit_BeginExecution");
static_assert(offsetof(FRigUnit_BeginExecution, ExecuteContext) == 0x000010, "Member 'FRigUnit_BeginExecution::ExecuteContext' has a wrong offset!");

// ScriptStruct ControlRig.ControlRigAnimNodeEventName
// 0x0008 (0x0008 - 0x0000)
struct FControlRigAnimNodeEventName final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FControlRigAnimNodeEventName) == 0x000004, "Wrong alignment on FControlRigAnimNodeEventName");
static_assert(sizeof(FControlRigAnimNodeEventName) == 0x000008, "Wrong size on FControlRigAnimNodeEventName");
static_assert(offsetof(FControlRigAnimNodeEventName, EventName) == 0x000000, "Member 'FControlRigAnimNodeEventName::EventName' has a wrong offset!");

// ScriptStruct ControlRig.ControlRigIOSettings
// 0x0002 (0x0002 - 0x0000)
struct FControlRigIOSettings final
{
public:
	bool                                          bUpdatePose;                                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateCurves;                                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FControlRigIOSettings) == 0x000001, "Wrong alignment on FControlRigIOSettings");
static_assert(sizeof(FControlRigIOSettings) == 0x000002, "Wrong size on FControlRigIOSettings");
static_assert(offsetof(FControlRigIOSettings, bUpdatePose) == 0x000000, "Member 'FControlRigIOSettings::bUpdatePose' has a wrong offset!");
static_assert(offsetof(FControlRigIOSettings, bUpdateCurves) == 0x000001, "Member 'FControlRigIOSettings::bUpdateCurves' has a wrong offset!");

// ScriptStruct ControlRig.AnimNode_ControlRigBase
// 0x01D8 (0x0230 - 0x0058)
struct FAnimNode_ControlRigBase : public FAnimNode_CustomProperty
{
public:
	struct FPoseLink                              Source;                                            // 0x0058(0x0010)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bResetInputPoseToInitial;                          // 0x0068(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTransferInputPose;                                // 0x0069(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTransferInputCurves;                              // 0x006A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTransferPoseInGlobalSpace;                        // 0x006B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_29D8[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBoneReference>                 InputBonesToTransfer;                              // 0x0070(0x0010)(Edit, ZeroConstructor, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	TArray<struct FBoneReference>                 OutputBonesToTransfer;                             // 0x0080(0x0010)(Edit, ZeroConstructor, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_29D9[0x170];                                   // 0x0090(0x0170)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UNodeMappingContainer>   NodeMappingContainer;                              // 0x0200(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FControlRigIOSettings                  InputSettings;                                     // 0x0208(0x0002)(Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FControlRigIOSettings                  OutputSettings;                                    // 0x020A(0x0002)(Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bExecute;                                          // 0x020C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_29DA[0xB];                                     // 0x020D(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FControlRigAnimNodeEventName>   EventQueue;                                        // 0x0218(0x0010)(Edit, ZeroConstructor, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_29DB[0x8];                                     // 0x0228(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_ControlRigBase) == 0x000008, "Wrong alignment on FAnimNode_ControlRigBase");
static_assert(sizeof(FAnimNode_ControlRigBase) == 0x000230, "Wrong size on FAnimNode_ControlRigBase");
static_assert(offsetof(FAnimNode_ControlRigBase, Source) == 0x000058, "Member 'FAnimNode_ControlRigBase::Source' has a wrong offset!");
static_assert(offsetof(FAnimNode_ControlRigBase, bResetInputPoseToInitial) == 0x000068, "Member 'FAnimNode_ControlRigBase::bResetInputPoseToInitial' has a wrong offset!");
static_assert(offsetof(FAnimNode_ControlRigBase, bTransferInputPose) == 0x000069, "Member 'FAnimNode_ControlRigBase::bTransferInputPose' has a wrong offset!");
static_assert(offsetof(FAnimNode_ControlRigBase, bTransferInputCurves) == 0x00006A, "Member 'FAnimNode_ControlRigBase::bTransferInputCurves' has a wrong offset!");
static_assert(offsetof(FAnimNode_ControlRigBase, bTransferPoseInGlobalSpace) == 0x00006B, "Member 'FAnimNode_ControlRigBase::bTransferPoseInGlobalSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_ControlRigBase, InputBonesToTransfer) == 0x000070, "Member 'FAnimNode_ControlRigBase::InputBonesToTransfer' has a wrong offset!");
static_assert(offsetof(FAnimNode_ControlRigBase, OutputBonesToTransfer) == 0x000080, "Member 'FAnimNode_ControlRigBase::OutputBonesToTransfer' has a wrong offset!");
static_assert(offsetof(FAnimNode_ControlRigBase, NodeMappingContainer) == 0x000200, "Member 'FAnimNode_ControlRigBase::NodeMappingContainer' has a wrong offset!");
static_assert(offsetof(FAnimNode_ControlRigBase, InputSettings) == 0x000208, "Member 'FAnimNode_ControlRigBase::InputSettings' has a wrong offset!");
static_assert(offsetof(FAnimNode_ControlRigBase, OutputSettings) == 0x00020A, "Member 'FAnimNode_ControlRigBase::OutputSettings' has a wrong offset!");
static_assert(offsetof(FAnimNode_ControlRigBase, bExecute) == 0x00020C, "Member 'FAnimNode_ControlRigBase::bExecute' has a wrong offset!");
static_assert(offsetof(FAnimNode_ControlRigBase, EventQueue) == 0x000218, "Member 'FAnimNode_ControlRigBase::EventQueue' has a wrong offset!");

// ScriptStruct ControlRig.AnimNode_ControlRig
// 0x0230 (0x0460 - 0x0230)
struct FAnimNode_ControlRig final : public FAnimNode_ControlRigBase
{
public:
	TSubclassOf<class UControlRig>                ControlRigClass;                                   // 0x0230(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UControlRig*                            ControlRig;                                        // 0x0238(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Alpha;                                             // 0x0240(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EAnimAlphaInputType                           AlphaInputType;                                    // 0x0244(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bAlphaBoolEnabled : 1;                             // 0x0245(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bSetRefPoseFromSkeleton : 1;                       // 0x0245(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_29DC[0x2];                                     // 0x0246(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInputScaleBias                        AlphaScaleBias;                                    // 0x0248(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FInputAlphaBoolBlend                   AlphaBoolBlend;                                    // 0x0250(0x0048)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	class FName                                   AlphaCurveName;                                    // 0x0298(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FInputScaleBiasClamp                   AlphaScaleBiasClamp;                               // 0x02A0(0x0030)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	TMap<class FName, class FName>                InputMapping;                                      // 0x02D0(0x0050)(NativeAccessSpecifierPrivate)
	TMap<class FName, class FName>                OutputMapping;                                     // 0x0320(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_29DD[0xB0];                                    // 0x0370(0x00B0)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LODThreshold;                                      // 0x0420(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_29DE[0x3C];                                    // 0x0424(0x003C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_ControlRig) == 0x000008, "Wrong alignment on FAnimNode_ControlRig");
static_assert(sizeof(FAnimNode_ControlRig) == 0x000460, "Wrong size on FAnimNode_ControlRig");
static_assert(offsetof(FAnimNode_ControlRig, ControlRigClass) == 0x000230, "Member 'FAnimNode_ControlRig::ControlRigClass' has a wrong offset!");
static_assert(offsetof(FAnimNode_ControlRig, ControlRig) == 0x000238, "Member 'FAnimNode_ControlRig::ControlRig' has a wrong offset!");
static_assert(offsetof(FAnimNode_ControlRig, Alpha) == 0x000240, "Member 'FAnimNode_ControlRig::Alpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_ControlRig, AlphaInputType) == 0x000244, "Member 'FAnimNode_ControlRig::AlphaInputType' has a wrong offset!");
static_assert(offsetof(FAnimNode_ControlRig, AlphaScaleBias) == 0x000248, "Member 'FAnimNode_ControlRig::AlphaScaleBias' has a wrong offset!");
static_assert(offsetof(FAnimNode_ControlRig, AlphaBoolBlend) == 0x000250, "Member 'FAnimNode_ControlRig::AlphaBoolBlend' has a wrong offset!");
static_assert(offsetof(FAnimNode_ControlRig, AlphaCurveName) == 0x000298, "Member 'FAnimNode_ControlRig::AlphaCurveName' has a wrong offset!");
static_assert(offsetof(FAnimNode_ControlRig, AlphaScaleBiasClamp) == 0x0002A0, "Member 'FAnimNode_ControlRig::AlphaScaleBiasClamp' has a wrong offset!");
static_assert(offsetof(FAnimNode_ControlRig, InputMapping) == 0x0002D0, "Member 'FAnimNode_ControlRig::InputMapping' has a wrong offset!");
static_assert(offsetof(FAnimNode_ControlRig, OutputMapping) == 0x000320, "Member 'FAnimNode_ControlRig::OutputMapping' has a wrong offset!");
static_assert(offsetof(FAnimNode_ControlRig, LODThreshold) == 0x000420, "Member 'FAnimNode_ControlRig::LODThreshold' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_ToWorldSpace_Rotation
// 0x0048 (0x0050 - 0x0008)
struct FRigUnit_ToWorldSpace_Rotation final : public FRigUnit
{
public:
	uint8                                         Pad_29DF[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Value;                                             // 0x0010(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  World;                                             // 0x0030(0x0020)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_ToWorldSpace_Rotation) == 0x000010, "Wrong alignment on FRigUnit_ToWorldSpace_Rotation");
static_assert(sizeof(FRigUnit_ToWorldSpace_Rotation) == 0x000050, "Wrong size on FRigUnit_ToWorldSpace_Rotation");
static_assert(offsetof(FRigUnit_ToWorldSpace_Rotation, Value) == 0x000010, "Member 'FRigUnit_ToWorldSpace_Rotation::Value' has a wrong offset!");
static_assert(offsetof(FRigUnit_ToWorldSpace_Rotation, World) == 0x000030, "Member 'FRigUnit_ToWorldSpace_Rotation::World' has a wrong offset!");

// ScriptStruct ControlRig.RigRigidBodySettings
// 0x0004 (0x0004 - 0x0000)
struct FRigRigidBodySettings final
{
public:
	float                                         Mass;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigRigidBodySettings) == 0x000004, "Wrong alignment on FRigRigidBodySettings");
static_assert(sizeof(FRigRigidBodySettings) == 0x000004, "Wrong size on FRigRigidBodySettings");
static_assert(offsetof(FRigRigidBodySettings, Mass) == 0x000000, "Member 'FRigRigidBodySettings::Mass' has a wrong offset!");

// ScriptStruct ControlRig.RigRigidBodyElement
// 0x0000 (0x02E0 - 0x02E0)
struct FRigRigidBodyElement final : public FRigSingleParentElement
{
public:
	struct FRigRigidBodySettings                  Settings;                                          // 0x02D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_29E0[0x4];                                     // 0x02DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigRigidBodyElement) == 0x000010, "Wrong alignment on FRigRigidBodyElement");
static_assert(sizeof(FRigRigidBodyElement) == 0x0002E0, "Wrong size on FRigRigidBodyElement");
static_assert(offsetof(FRigRigidBodyElement, Settings) == 0x0002D8, "Member 'FRigRigidBodyElement::Settings' has a wrong offset!");

// ScriptStruct ControlRig.RigElementKeyCollection
// 0x0010 (0x0010 - 0x0000)
struct FRigElementKeyCollection final
{
public:
	TArray<struct FRigElementKey>                 Keys;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigElementKeyCollection) == 0x000008, "Wrong alignment on FRigElementKeyCollection");
static_assert(sizeof(FRigElementKeyCollection) == 0x000010, "Wrong size on FRigElementKeyCollection");
static_assert(offsetof(FRigElementKeyCollection, Keys) == 0x000000, "Member 'FRigElementKeyCollection::Keys' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_CollectionBase
// 0x0000 (0x0008 - 0x0008)
struct FRigUnit_CollectionBase : public FRigUnit
{
};
static_assert(alignof(FRigUnit_CollectionBase) == 0x000008, "Wrong alignment on FRigUnit_CollectionBase");
static_assert(sizeof(FRigUnit_CollectionBase) == 0x000008, "Wrong size on FRigUnit_CollectionBase");

// ScriptStruct ControlRig.RigUnit_CollectionDifference
// 0x0030 (0x0038 - 0x0008)
struct FRigUnit_CollectionDifference final : public FRigUnit_CollectionBase
{
public:
	struct FRigElementKeyCollection               A;                                                 // 0x0008(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKeyCollection               B;                                                 // 0x0018(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKeyCollection               Collection;                                        // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_CollectionDifference) == 0x000008, "Wrong alignment on FRigUnit_CollectionDifference");
static_assert(sizeof(FRigUnit_CollectionDifference) == 0x000038, "Wrong size on FRigUnit_CollectionDifference");
static_assert(offsetof(FRigUnit_CollectionDifference, A) == 0x000008, "Member 'FRigUnit_CollectionDifference::A' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionDifference, B) == 0x000018, "Member 'FRigUnit_CollectionDifference::B' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionDifference, Collection) == 0x000028, "Member 'FRigUnit_CollectionDifference::Collection' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_ChainHarmonics_Wave
// 0x0078 (0x0078 - 0x0000)
struct FRigUnit_ChainHarmonics_Wave final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29E1[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WaveFrequency;                                     // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WaveAmplitude;                                     // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WaveOffset;                                        // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WaveNoise;                                         // 0x0050(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaveMinimum;                                       // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaveMaximum;                                       // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigVMAnimEasingType                          WaveEase;                                          // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29E2[0x7];                                     // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_ChainHarmonics_Wave) == 0x000008, "Wrong alignment on FRigUnit_ChainHarmonics_Wave");
static_assert(sizeof(FRigUnit_ChainHarmonics_Wave) == 0x000078, "Wrong size on FRigUnit_ChainHarmonics_Wave");
static_assert(offsetof(FRigUnit_ChainHarmonics_Wave, bEnabled) == 0x000000, "Member 'FRigUnit_ChainHarmonics_Wave::bEnabled' has a wrong offset!");
static_assert(offsetof(FRigUnit_ChainHarmonics_Wave, WaveFrequency) == 0x000008, "Member 'FRigUnit_ChainHarmonics_Wave::WaveFrequency' has a wrong offset!");
static_assert(offsetof(FRigUnit_ChainHarmonics_Wave, WaveAmplitude) == 0x000020, "Member 'FRigUnit_ChainHarmonics_Wave::WaveAmplitude' has a wrong offset!");
static_assert(offsetof(FRigUnit_ChainHarmonics_Wave, WaveOffset) == 0x000038, "Member 'FRigUnit_ChainHarmonics_Wave::WaveOffset' has a wrong offset!");
static_assert(offsetof(FRigUnit_ChainHarmonics_Wave, WaveNoise) == 0x000050, "Member 'FRigUnit_ChainHarmonics_Wave::WaveNoise' has a wrong offset!");
static_assert(offsetof(FRigUnit_ChainHarmonics_Wave, WaveMinimum) == 0x000068, "Member 'FRigUnit_ChainHarmonics_Wave::WaveMinimum' has a wrong offset!");
static_assert(offsetof(FRigUnit_ChainHarmonics_Wave, WaveMaximum) == 0x00006C, "Member 'FRigUnit_ChainHarmonics_Wave::WaveMaximum' has a wrong offset!");
static_assert(offsetof(FRigUnit_ChainHarmonics_Wave, WaveEase) == 0x000070, "Member 'FRigUnit_ChainHarmonics_Wave::WaveEase' has a wrong offset!");

// ScriptStruct ControlRig.RigInfluenceEntry
// 0x0020 (0x0020 - 0x0000)
struct FRigInfluenceEntry final
{
public:
	struct FRigElementKey                         Source;                                            // 0x0000(0x000C)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_29E3[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigElementKey>                 AffectedList;                                      // 0x0010(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FRigInfluenceEntry) == 0x000008, "Wrong alignment on FRigInfluenceEntry");
static_assert(sizeof(FRigInfluenceEntry) == 0x000020, "Wrong size on FRigInfluenceEntry");
static_assert(offsetof(FRigInfluenceEntry, Source) == 0x000000, "Member 'FRigInfluenceEntry::Source' has a wrong offset!");
static_assert(offsetof(FRigInfluenceEntry, AffectedList) == 0x000010, "Member 'FRigInfluenceEntry::AffectedList' has a wrong offset!");

// ScriptStruct ControlRig.RigInfluenceMap
// 0x0068 (0x0068 - 0x0000)
struct FRigInfluenceMap final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FRigInfluenceEntry>             Entries;                                           // 0x0008(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TMap<struct FRigElementKey, int32>            KeyToIndex;                                        // 0x0018(0x0050)(Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FRigInfluenceMap) == 0x000008, "Wrong alignment on FRigInfluenceMap");
static_assert(sizeof(FRigInfluenceMap) == 0x000068, "Wrong size on FRigInfluenceMap");
static_assert(offsetof(FRigInfluenceMap, EventName) == 0x000000, "Member 'FRigInfluenceMap::EventName' has a wrong offset!");
static_assert(offsetof(FRigInfluenceMap, Entries) == 0x000008, "Member 'FRigInfluenceMap::Entries' has a wrong offset!");
static_assert(offsetof(FRigInfluenceMap, KeyToIndex) == 0x000018, "Member 'FRigInfluenceMap::KeyToIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigInfluenceMapPerEvent
// 0x0060 (0x0060 - 0x0000)
struct FRigInfluenceMapPerEvent final
{
public:
	TArray<struct FRigInfluenceMap>               Maps;                                              // 0x0000(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, int32>                      EventToIndex;                                      // 0x0010(0x0050)(Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FRigInfluenceMapPerEvent) == 0x000008, "Wrong alignment on FRigInfluenceMapPerEvent");
static_assert(sizeof(FRigInfluenceMapPerEvent) == 0x000060, "Wrong size on FRigInfluenceMapPerEvent");
static_assert(offsetof(FRigInfluenceMapPerEvent, Maps) == 0x000000, "Member 'FRigInfluenceMapPerEvent::Maps' has a wrong offset!");
static_assert(offsetof(FRigInfluenceMapPerEvent, EventToIndex) == 0x000010, "Member 'FRigInfluenceMapPerEvent::EventToIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_DebugBaseMutable
// 0x0000 (0x0160 - 0x0160)
struct FRigUnit_DebugBaseMutable : public FRigUnitMutable
{
};
static_assert(alignof(FRigUnit_DebugBaseMutable) == 0x000010, "Wrong alignment on FRigUnit_DebugBaseMutable");
static_assert(sizeof(FRigUnit_DebugBaseMutable) == 0x000160, "Wrong size on FRigUnit_DebugBaseMutable");

// ScriptStruct ControlRig.RigUnit_DynamicHierarchyBaseMutable
// 0x0000 (0x0160 - 0x0160)
struct FRigUnit_DynamicHierarchyBaseMutable : public FRigUnitMutable
{
};
static_assert(alignof(FRigUnit_DynamicHierarchyBaseMutable) == 0x000010, "Wrong alignment on FRigUnit_DynamicHierarchyBaseMutable");
static_assert(sizeof(FRigUnit_DynamicHierarchyBaseMutable) == 0x000160, "Wrong size on FRigUnit_DynamicHierarchyBaseMutable");

// ScriptStruct ControlRig.RigUnit_HierarchyAddElement
// 0x0020 (0x0180 - 0x0160)
struct FRigUnit_HierarchyAddElement : public FRigUnit_DynamicHierarchyBaseMutable
{
public:
	struct FRigElementKey                         Parent;                                            // 0x0160(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name;                                              // 0x016C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         Item;                                              // 0x0174(0x000C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_HierarchyAddElement) == 0x000010, "Wrong alignment on FRigUnit_HierarchyAddElement");
static_assert(sizeof(FRigUnit_HierarchyAddElement) == 0x000180, "Wrong size on FRigUnit_HierarchyAddElement");
static_assert(offsetof(FRigUnit_HierarchyAddElement, Parent) == 0x000160, "Member 'FRigUnit_HierarchyAddElement::Parent' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddElement, Name) == 0x00016C, "Member 'FRigUnit_HierarchyAddElement::Name' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddElement, Item) == 0x000174, "Member 'FRigUnit_HierarchyAddElement::Item' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_HierarchyAddControlElement
// 0x0070 (0x01F0 - 0x0180)
#pragma pack(push, 0x1)
struct alignas(0x10) FRigUnit_HierarchyAddControlElement : public FRigUnit_HierarchyAddElement
{
public:
	struct FTransform                             OffsetTransform;                                   // 0x0180(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigVMTransformSpace                          OffsetSpace;                                       // 0x01E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29E4[0x7];                                     // 0x01E1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
#pragma pack(pop)
static_assert(alignof(FRigUnit_HierarchyAddControlElement) == 0x000010, "Wrong alignment on FRigUnit_HierarchyAddControlElement");
static_assert(sizeof(FRigUnit_HierarchyAddControlElement) == 0x0001F0, "Wrong size on FRigUnit_HierarchyAddControlElement");
static_assert(offsetof(FRigUnit_HierarchyAddControlElement, OffsetTransform) == 0x000180, "Member 'FRigUnit_HierarchyAddControlElement::OffsetTransform' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControlElement, OffsetSpace) == 0x0001E0, "Member 'FRigUnit_HierarchyAddControlElement::OffsetSpace' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_HierarchyAddControlVector
// 0x0120 (0x0310 - 0x01F0)
struct FRigUnit_HierarchyAddControlVector final : public FRigUnit_HierarchyAddControlElement
{
public:
	struct FVector                                InitialValue;                                      // 0x01E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigUnit_HierarchyAddControlVector_Settings Settings;                                          // 0x0200(0x0110)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_HierarchyAddControlVector) == 0x000010, "Wrong alignment on FRigUnit_HierarchyAddControlVector");
static_assert(sizeof(FRigUnit_HierarchyAddControlVector) == 0x000310, "Wrong size on FRigUnit_HierarchyAddControlVector");
static_assert(offsetof(FRigUnit_HierarchyAddControlVector, InitialValue) == 0x0001E8, "Member 'FRigUnit_HierarchyAddControlVector::InitialValue' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControlVector, Settings) == 0x000200, "Member 'FRigUnit_HierarchyAddControlVector::Settings' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_DebugPose
// 0x0258 (0x0260 - 0x0008)
struct FRigUnit_DebugPose final : public FRigVMFunction_DebugBase
{
public:
	uint8                                         Pad_29E5[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FControlRigExecuteContext              ExecuteContext;                                    // 0x0010(0x0150)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	struct FRigPose                               Pose;                                              // 0x0160(0x0070)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x01D4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x01E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29E6[0x8];                                     // 0x01E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             WorldOffset;                                       // 0x01F0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0250(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29E7[0xF];                                     // 0x0251(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_DebugPose) == 0x000010, "Wrong alignment on FRigUnit_DebugPose");
static_assert(sizeof(FRigUnit_DebugPose) == 0x000260, "Wrong size on FRigUnit_DebugPose");
static_assert(offsetof(FRigUnit_DebugPose, ExecuteContext) == 0x000010, "Member 'FRigUnit_DebugPose::ExecuteContext' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugPose, Pose) == 0x000160, "Member 'FRigUnit_DebugPose::Pose' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugPose, Scale) == 0x0001D0, "Member 'FRigUnit_DebugPose::Scale' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugPose, Color) == 0x0001D4, "Member 'FRigUnit_DebugPose::Color' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugPose, Thickness) == 0x0001E4, "Member 'FRigUnit_DebugPose::Thickness' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugPose, WorldOffset) == 0x0001F0, "Member 'FRigUnit_DebugPose::WorldOffset' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugPose, bEnabled) == 0x000250, "Member 'FRigUnit_DebugPose::bEnabled' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_AimItem_Target
// 0x0048 (0x0048 - 0x0000)
struct FRigUnit_AimItem_Target final
{
public:
	float                                         Weight;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29E8[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Axis;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Target;                                            // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EControlRigVectorKind                         Kind;                                              // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29E9[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKey                         Space;                                             // 0x003C(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_AimItem_Target) == 0x000008, "Wrong alignment on FRigUnit_AimItem_Target");
static_assert(sizeof(FRigUnit_AimItem_Target) == 0x000048, "Wrong size on FRigUnit_AimItem_Target");
static_assert(offsetof(FRigUnit_AimItem_Target, Weight) == 0x000000, "Member 'FRigUnit_AimItem_Target::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimItem_Target, Axis) == 0x000008, "Member 'FRigUnit_AimItem_Target::Axis' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimItem_Target, Target) == 0x000020, "Member 'FRigUnit_AimItem_Target::Target' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimItem_Target, Kind) == 0x000038, "Member 'FRigUnit_AimItem_Target::Kind' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimItem_Target, Space) == 0x00003C, "Member 'FRigUnit_AimItem_Target::Space' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_AimItem
// 0x0190 (0x02F0 - 0x0160)
struct FRigUnit_AimItem final : public FRigUnit_HighlevelBaseMutable
{
public:
	struct FRigElementKey                         Item;                                              // 0x0160(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29EA[0x4];                                     // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_AimItem_Target                Primary;                                           // 0x0170(0x0048)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRigUnit_AimItem_Target                Secondary;                                         // 0x01B8(0x0048)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0200(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29EB[0xC];                                     // 0x0204(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_AimBone_DebugSettings         DebugSettings;                                     // 0x0210(0x0070)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedItem;                                        // 0x0280(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      PrimaryCachedSpace;                                // 0x02A0(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      SecondaryCachedSpace;                              // 0x02C0(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInitialized;                                    // 0x02E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29EC[0xF];                                     // 0x02E1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_AimItem) == 0x000010, "Wrong alignment on FRigUnit_AimItem");
static_assert(sizeof(FRigUnit_AimItem) == 0x0002F0, "Wrong size on FRigUnit_AimItem");
static_assert(offsetof(FRigUnit_AimItem, Item) == 0x000160, "Member 'FRigUnit_AimItem::Item' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimItem, Primary) == 0x000170, "Member 'FRigUnit_AimItem::Primary' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimItem, Secondary) == 0x0001B8, "Member 'FRigUnit_AimItem::Secondary' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimItem, Weight) == 0x000200, "Member 'FRigUnit_AimItem::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimItem, DebugSettings) == 0x000210, "Member 'FRigUnit_AimItem::DebugSettings' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimItem, CachedItem) == 0x000280, "Member 'FRigUnit_AimItem::CachedItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimItem, PrimaryCachedSpace) == 0x0002A0, "Member 'FRigUnit_AimItem::PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimItem, SecondaryCachedSpace) == 0x0002C0, "Member 'FRigUnit_AimItem::SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimItem, bIsInitialized) == 0x0002E0, "Member 'FRigUnit_AimItem::bIsInitialized' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_HierarchyAddBone
// 0x0070 (0x01F0 - 0x0180)
struct FRigUnit_HierarchyAddBone final : public FRigUnit_HierarchyAddElement
{
public:
	struct FTransform                             Transform;                                         // 0x0180(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigVMTransformSpace                          Space;                                             // 0x01E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29ED[0xF];                                     // 0x01E1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_HierarchyAddBone) == 0x000010, "Wrong alignment on FRigUnit_HierarchyAddBone");
static_assert(sizeof(FRigUnit_HierarchyAddBone) == 0x0001F0, "Wrong size on FRigUnit_HierarchyAddBone");
static_assert(offsetof(FRigUnit_HierarchyAddBone, Transform) == 0x000180, "Member 'FRigUnit_HierarchyAddBone::Transform' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddBone, Space) == 0x0001E0, "Member 'FRigUnit_HierarchyAddBone::Space' has a wrong offset!");

// ScriptStruct ControlRig.MovieSceneControlRigInstanceData
// 0x0140 (0x0148 - 0x0008)
struct FMovieSceneControlRigInstanceData final : public FMovieSceneSequenceInstanceData
{
public:
	bool                                          bAdditive;                                         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyBoneFilter;                                  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29EE[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInputBlendPose                        BoneFilter;                                        // 0x0010(0x0010)(NativeAccessSpecifierPublic)
	struct FMovieSceneFloatChannel                Weight;                                            // 0x0020(0x0110)(NativeAccessSpecifierPublic)
	struct FMovieSceneEvaluationOperand           Operand;                                           // 0x0130(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29EF[0x4];                                     // 0x0144(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneControlRigInstanceData) == 0x000008, "Wrong alignment on FMovieSceneControlRigInstanceData");
static_assert(sizeof(FMovieSceneControlRigInstanceData) == 0x000148, "Wrong size on FMovieSceneControlRigInstanceData");
static_assert(offsetof(FMovieSceneControlRigInstanceData, bAdditive) == 0x000008, "Member 'FMovieSceneControlRigInstanceData::bAdditive' has a wrong offset!");
static_assert(offsetof(FMovieSceneControlRigInstanceData, bApplyBoneFilter) == 0x000009, "Member 'FMovieSceneControlRigInstanceData::bApplyBoneFilter' has a wrong offset!");
static_assert(offsetof(FMovieSceneControlRigInstanceData, BoneFilter) == 0x000010, "Member 'FMovieSceneControlRigInstanceData::BoneFilter' has a wrong offset!");
static_assert(offsetof(FMovieSceneControlRigInstanceData, Weight) == 0x000020, "Member 'FMovieSceneControlRigInstanceData::Weight' has a wrong offset!");
static_assert(offsetof(FMovieSceneControlRigInstanceData, Operand) == 0x000130, "Member 'FMovieSceneControlRigInstanceData::Operand' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SetScale
// 0x0050 (0x01B0 - 0x0160)
struct FRigUnit_SetScale final : public FRigUnitMutable
{
public:
	struct FRigElementKey                         Item;                                              // 0x0160(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigVMTransformSpace                          Space;                                             // 0x016C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitial;                                          // 0x016D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29F0[0x2];                                     // 0x016E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Scale;                                             // 0x0170(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x018C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29F1[0x3];                                     // 0x018D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCachedRigElement                      CachedIndex;                                       // 0x0190(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_SetScale) == 0x000010, "Wrong alignment on FRigUnit_SetScale");
static_assert(sizeof(FRigUnit_SetScale) == 0x0001B0, "Wrong size on FRigUnit_SetScale");
static_assert(offsetof(FRigUnit_SetScale, Item) == 0x000160, "Member 'FRigUnit_SetScale::Item' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetScale, Space) == 0x00016C, "Member 'FRigUnit_SetScale::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetScale, bInitial) == 0x00016D, "Member 'FRigUnit_SetScale::bInitial' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetScale, Scale) == 0x000170, "Member 'FRigUnit_SetScale::Scale' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetScale, Weight) == 0x000188, "Member 'FRigUnit_SetScale::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetScale, bPropagateToChildren) == 0x00018C, "Member 'FRigUnit_SetScale::bPropagateToChildren' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetScale, CachedIndex) == 0x000190, "Member 'FRigUnit_SetScale::CachedIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigTransformStackEntry
// 0x00F0 (0x00F0 - 0x0000)
struct FRigTransformStackEntry final
{
public:
	struct FRigElementKey                         Key;                                               // 0x0000(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigTransformStackEntryType                   EntryType;                                         // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigTransformType                             TransformType;                                     // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29F2[0x2];                                     // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OldTransform;                                      // 0x0010(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             NewTransform;                                      // 0x0070(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectChildren;                                   // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29F3[0x7];                                     // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Callstack;                                         // 0x00D8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_29F4[0x8];                                     // 0x00E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigTransformStackEntry) == 0x000010, "Wrong alignment on FRigTransformStackEntry");
static_assert(sizeof(FRigTransformStackEntry) == 0x0000F0, "Wrong size on FRigTransformStackEntry");
static_assert(offsetof(FRigTransformStackEntry, Key) == 0x000000, "Member 'FRigTransformStackEntry::Key' has a wrong offset!");
static_assert(offsetof(FRigTransformStackEntry, EntryType) == 0x00000C, "Member 'FRigTransformStackEntry::EntryType' has a wrong offset!");
static_assert(offsetof(FRigTransformStackEntry, TransformType) == 0x00000D, "Member 'FRigTransformStackEntry::TransformType' has a wrong offset!");
static_assert(offsetof(FRigTransformStackEntry, OldTransform) == 0x000010, "Member 'FRigTransformStackEntry::OldTransform' has a wrong offset!");
static_assert(offsetof(FRigTransformStackEntry, NewTransform) == 0x000070, "Member 'FRigTransformStackEntry::NewTransform' has a wrong offset!");
static_assert(offsetof(FRigTransformStackEntry, bAffectChildren) == 0x0000D0, "Member 'FRigTransformStackEntry::bAffectChildren' has a wrong offset!");
static_assert(offsetof(FRigTransformStackEntry, Callstack) == 0x0000D8, "Member 'FRigTransformStackEntry::Callstack' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_BoneHarmonics_BoneTarget
// 0x000C (0x000C - 0x0000)
struct FRigUnit_BoneHarmonics_BoneTarget final
{
public:
	class FName                                   bone;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ratio;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_BoneHarmonics_BoneTarget) == 0x000004, "Wrong alignment on FRigUnit_BoneHarmonics_BoneTarget");
static_assert(sizeof(FRigUnit_BoneHarmonics_BoneTarget) == 0x00000C, "Wrong size on FRigUnit_BoneHarmonics_BoneTarget");
static_assert(offsetof(FRigUnit_BoneHarmonics_BoneTarget, bone) == 0x000000, "Member 'FRigUnit_BoneHarmonics_BoneTarget::bone' has a wrong offset!");
static_assert(offsetof(FRigUnit_BoneHarmonics_BoneTarget, Ratio) == 0x000008, "Member 'FRigUnit_BoneHarmonics_BoneTarget::Ratio' has a wrong offset!");

// ScriptStruct ControlRig.RigElementParentConstraint
// 0x0090 (0x0090 - 0x0000)
struct alignas(0x10) FRigElementParentConstraint final
{
public:
	uint8                                         Pad_29F5[0x90];                                    // 0x0000(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigElementParentConstraint) == 0x000010, "Wrong alignment on FRigElementParentConstraint");
static_assert(sizeof(FRigElementParentConstraint) == 0x000090, "Wrong size on FRigElementParentConstraint");

// ScriptStruct ControlRig.RigUnit_ChainHarmonics_Pendulum
// 0x0058 (0x0058 - 0x0000)
struct FRigUnit_ChainHarmonics_Pendulum final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29F6[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PendulumStiffness;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PendulumGravity;                                   // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PendulumBlend;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PendulumDrag;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PendulumMinimum;                                   // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PendulumMaximum;                                   // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigVMAnimEasingType                          PendulumEase;                                      // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29F7[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                UnwindAxis;                                        // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnwindMinimum;                                     // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnwindMaximum;                                     // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_ChainHarmonics_Pendulum) == 0x000008, "Wrong alignment on FRigUnit_ChainHarmonics_Pendulum");
static_assert(sizeof(FRigUnit_ChainHarmonics_Pendulum) == 0x000058, "Wrong size on FRigUnit_ChainHarmonics_Pendulum");
static_assert(offsetof(FRigUnit_ChainHarmonics_Pendulum, bEnabled) == 0x000000, "Member 'FRigUnit_ChainHarmonics_Pendulum::bEnabled' has a wrong offset!");
static_assert(offsetof(FRigUnit_ChainHarmonics_Pendulum, PendulumStiffness) == 0x000004, "Member 'FRigUnit_ChainHarmonics_Pendulum::PendulumStiffness' has a wrong offset!");
static_assert(offsetof(FRigUnit_ChainHarmonics_Pendulum, PendulumGravity) == 0x000008, "Member 'FRigUnit_ChainHarmonics_Pendulum::PendulumGravity' has a wrong offset!");
static_assert(offsetof(FRigUnit_ChainHarmonics_Pendulum, PendulumBlend) == 0x000020, "Member 'FRigUnit_ChainHarmonics_Pendulum::PendulumBlend' has a wrong offset!");
static_assert(offsetof(FRigUnit_ChainHarmonics_Pendulum, PendulumDrag) == 0x000024, "Member 'FRigUnit_ChainHarmonics_Pendulum::PendulumDrag' has a wrong offset!");
static_assert(offsetof(FRigUnit_ChainHarmonics_Pendulum, PendulumMinimum) == 0x000028, "Member 'FRigUnit_ChainHarmonics_Pendulum::PendulumMinimum' has a wrong offset!");
static_assert(offsetof(FRigUnit_ChainHarmonics_Pendulum, PendulumMaximum) == 0x00002C, "Member 'FRigUnit_ChainHarmonics_Pendulum::PendulumMaximum' has a wrong offset!");
static_assert(offsetof(FRigUnit_ChainHarmonics_Pendulum, PendulumEase) == 0x000030, "Member 'FRigUnit_ChainHarmonics_Pendulum::PendulumEase' has a wrong offset!");
static_assert(offsetof(FRigUnit_ChainHarmonics_Pendulum, UnwindAxis) == 0x000038, "Member 'FRigUnit_ChainHarmonics_Pendulum::UnwindAxis' has a wrong offset!");
static_assert(offsetof(FRigUnit_ChainHarmonics_Pendulum, UnwindMinimum) == 0x000050, "Member 'FRigUnit_ChainHarmonics_Pendulum::UnwindMinimum' has a wrong offset!");
static_assert(offsetof(FRigUnit_ChainHarmonics_Pendulum, UnwindMaximum) == 0x000054, "Member 'FRigUnit_ChainHarmonics_Pendulum::UnwindMaximum' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_ChainHarmonics_Reach
// 0x0048 (0x0048 - 0x0000)
struct FRigUnit_ChainHarmonics_Reach final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29F8[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReachTarget;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReachAxis;                                         // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReachMinimum;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReachMaximum;                                      // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigVMAnimEasingType                          ReachEase;                                         // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29F9[0x7];                                     // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_ChainHarmonics_Reach) == 0x000008, "Wrong alignment on FRigUnit_ChainHarmonics_Reach");
static_assert(sizeof(FRigUnit_ChainHarmonics_Reach) == 0x000048, "Wrong size on FRigUnit_ChainHarmonics_Reach");
static_assert(offsetof(FRigUnit_ChainHarmonics_Reach, bEnabled) == 0x000000, "Member 'FRigUnit_ChainHarmonics_Reach::bEnabled' has a wrong offset!");
static_assert(offsetof(FRigUnit_ChainHarmonics_Reach, ReachTarget) == 0x000008, "Member 'FRigUnit_ChainHarmonics_Reach::ReachTarget' has a wrong offset!");
static_assert(offsetof(FRigUnit_ChainHarmonics_Reach, ReachAxis) == 0x000020, "Member 'FRigUnit_ChainHarmonics_Reach::ReachAxis' has a wrong offset!");
static_assert(offsetof(FRigUnit_ChainHarmonics_Reach, ReachMinimum) == 0x000038, "Member 'FRigUnit_ChainHarmonics_Reach::ReachMinimum' has a wrong offset!");
static_assert(offsetof(FRigUnit_ChainHarmonics_Reach, ReachMaximum) == 0x00003C, "Member 'FRigUnit_ChainHarmonics_Reach::ReachMaximum' has a wrong offset!");
static_assert(offsetof(FRigUnit_ChainHarmonics_Reach, ReachEase) == 0x000040, "Member 'FRigUnit_ChainHarmonics_Reach::ReachEase' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_ChainHarmonics_WorkData
// 0x0098 (0x0098 - 0x0000)
struct FRigUnit_ChainHarmonics_WorkData final
{
public:
	struct FVector                                Time;                                              // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCachedRigElement>              Items;                                             // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 Ratio;                                             // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        LocalTip;                                          // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        PendulumTip;                                       // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        PendulumPosition;                                  // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        PendulumVelocity;                                  // 0x0068(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        HierarchyLine;                                     // 0x0078(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        VelocityLines;                                     // 0x0088(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_ChainHarmonics_WorkData) == 0x000008, "Wrong alignment on FRigUnit_ChainHarmonics_WorkData");
static_assert(sizeof(FRigUnit_ChainHarmonics_WorkData) == 0x000098, "Wrong size on FRigUnit_ChainHarmonics_WorkData");
static_assert(offsetof(FRigUnit_ChainHarmonics_WorkData, Time) == 0x000000, "Member 'FRigUnit_ChainHarmonics_WorkData::Time' has a wrong offset!");
static_assert(offsetof(FRigUnit_ChainHarmonics_WorkData, Items) == 0x000018, "Member 'FRigUnit_ChainHarmonics_WorkData::Items' has a wrong offset!");
static_assert(offsetof(FRigUnit_ChainHarmonics_WorkData, Ratio) == 0x000028, "Member 'FRigUnit_ChainHarmonics_WorkData::Ratio' has a wrong offset!");
static_assert(offsetof(FRigUnit_ChainHarmonics_WorkData, LocalTip) == 0x000038, "Member 'FRigUnit_ChainHarmonics_WorkData::LocalTip' has a wrong offset!");
static_assert(offsetof(FRigUnit_ChainHarmonics_WorkData, PendulumTip) == 0x000048, "Member 'FRigUnit_ChainHarmonics_WorkData::PendulumTip' has a wrong offset!");
static_assert(offsetof(FRigUnit_ChainHarmonics_WorkData, PendulumPosition) == 0x000058, "Member 'FRigUnit_ChainHarmonics_WorkData::PendulumPosition' has a wrong offset!");
static_assert(offsetof(FRigUnit_ChainHarmonics_WorkData, PendulumVelocity) == 0x000068, "Member 'FRigUnit_ChainHarmonics_WorkData::PendulumVelocity' has a wrong offset!");
static_assert(offsetof(FRigUnit_ChainHarmonics_WorkData, HierarchyLine) == 0x000078, "Member 'FRigUnit_ChainHarmonics_WorkData::HierarchyLine' has a wrong offset!");
static_assert(offsetof(FRigUnit_ChainHarmonics_WorkData, VelocityLines) == 0x000088, "Member 'FRigUnit_ChainHarmonics_WorkData::VelocityLines' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_ChainHarmonicsPerItem
// 0x02D0 (0x0430 - 0x0160)
struct FRigUnit_ChainHarmonicsPerItem final : public FRigUnit_HighlevelBaseMutable
{
public:
	struct FRigElementKey                         ChainRoot;                                         // 0x0160(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29FA[0x4];                                     // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Speed;                                             // 0x0170(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigUnit_ChainHarmonics_Reach          Reach;                                             // 0x0188(0x0048)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRigUnit_ChainHarmonics_Wave           Wave;                                              // 0x01D0(0x0078)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     WaveCurve;                                         // 0x0248(0x0088)(Edit, BlueprintVisible, EditConst, NativeAccessSpecifierPublic)
	struct FRigUnit_ChainHarmonics_Pendulum       Pendulum;                                          // 0x02D0(0x0058)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bDrawDebug;                                        // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29FB[0x7];                                     // 0x0329(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             DrawWorldOffset;                                   // 0x0330(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigUnit_ChainHarmonics_WorkData       WorkData;                                          // 0x0390(0x0098)(Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_29FC[0x8];                                     // 0x0428(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_ChainHarmonicsPerItem) == 0x000010, "Wrong alignment on FRigUnit_ChainHarmonicsPerItem");
static_assert(sizeof(FRigUnit_ChainHarmonicsPerItem) == 0x000430, "Wrong size on FRigUnit_ChainHarmonicsPerItem");
static_assert(offsetof(FRigUnit_ChainHarmonicsPerItem, ChainRoot) == 0x000160, "Member 'FRigUnit_ChainHarmonicsPerItem::ChainRoot' has a wrong offset!");
static_assert(offsetof(FRigUnit_ChainHarmonicsPerItem, Speed) == 0x000170, "Member 'FRigUnit_ChainHarmonicsPerItem::Speed' has a wrong offset!");
static_assert(offsetof(FRigUnit_ChainHarmonicsPerItem, Reach) == 0x000188, "Member 'FRigUnit_ChainHarmonicsPerItem::Reach' has a wrong offset!");
static_assert(offsetof(FRigUnit_ChainHarmonicsPerItem, Wave) == 0x0001D0, "Member 'FRigUnit_ChainHarmonicsPerItem::Wave' has a wrong offset!");
static_assert(offsetof(FRigUnit_ChainHarmonicsPerItem, WaveCurve) == 0x000248, "Member 'FRigUnit_ChainHarmonicsPerItem::WaveCurve' has a wrong offset!");
static_assert(offsetof(FRigUnit_ChainHarmonicsPerItem, Pendulum) == 0x0002D0, "Member 'FRigUnit_ChainHarmonicsPerItem::Pendulum' has a wrong offset!");
static_assert(offsetof(FRigUnit_ChainHarmonicsPerItem, bDrawDebug) == 0x000328, "Member 'FRigUnit_ChainHarmonicsPerItem::bDrawDebug' has a wrong offset!");
static_assert(offsetof(FRigUnit_ChainHarmonicsPerItem, DrawWorldOffset) == 0x000330, "Member 'FRigUnit_ChainHarmonicsPerItem::DrawWorldOffset' has a wrong offset!");
static_assert(offsetof(FRigUnit_ChainHarmonicsPerItem, WorkData) == 0x000390, "Member 'FRigUnit_ChainHarmonicsPerItem::WorkData' has a wrong offset!");

// ScriptStruct ControlRig.RigBoneElement
// 0x0000 (0x02E0 - 0x02E0)
struct FRigBoneElement final : public FRigSingleParentElement
{
public:
	ERigBoneType                                  BoneType;                                          // 0x02D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29FD[0x7];                                     // 0x02D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigBoneElement) == 0x000010, "Wrong alignment on FRigBoneElement");
static_assert(sizeof(FRigBoneElement) == 0x0002E0, "Wrong size on FRigBoneElement");
static_assert(offsetof(FRigBoneElement, BoneType) == 0x0002D8, "Member 'FRigBoneElement::BoneType' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_Harmonics_TargetItem
// 0x0010 (0x0010 - 0x0000)
struct FRigUnit_Harmonics_TargetItem final
{
public:
	struct FRigElementKey                         Item;                                              // 0x0000(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ratio;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_Harmonics_TargetItem) == 0x000004, "Wrong alignment on FRigUnit_Harmonics_TargetItem");
static_assert(sizeof(FRigUnit_Harmonics_TargetItem) == 0x000010, "Wrong size on FRigUnit_Harmonics_TargetItem");
static_assert(offsetof(FRigUnit_Harmonics_TargetItem, Item) == 0x000000, "Member 'FRigUnit_Harmonics_TargetItem::Item' has a wrong offset!");
static_assert(offsetof(FRigUnit_Harmonics_TargetItem, Ratio) == 0x00000C, "Member 'FRigUnit_Harmonics_TargetItem::Ratio' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_BoneHarmonics_WorkData
// 0x0028 (0x0028 - 0x0000)
struct FRigUnit_BoneHarmonics_WorkData final
{
public:
	TArray<struct FCachedRigElement>              CachedItems;                                       // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                WaveTime;                                          // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_BoneHarmonics_WorkData) == 0x000008, "Wrong alignment on FRigUnit_BoneHarmonics_WorkData");
static_assert(sizeof(FRigUnit_BoneHarmonics_WorkData) == 0x000028, "Wrong size on FRigUnit_BoneHarmonics_WorkData");
static_assert(offsetof(FRigUnit_BoneHarmonics_WorkData, CachedItems) == 0x000000, "Member 'FRigUnit_BoneHarmonics_WorkData::CachedItems' has a wrong offset!");
static_assert(offsetof(FRigUnit_BoneHarmonics_WorkData, WaveTime) == 0x000010, "Member 'FRigUnit_BoneHarmonics_WorkData::WaveTime' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_ItemHarmonics
// 0x00C0 (0x0220 - 0x0160)
struct FRigUnit_ItemHarmonics final : public FRigUnit_HighlevelBaseMutable
{
public:
	TArray<struct FRigUnit_Harmonics_TargetItem>  Targets;                                           // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	struct FVector                                WaveSpeed;                                         // 0x0170(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WaveFrequency;                                     // 0x0188(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WaveAmplitude;                                     // 0x01A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WaveOffset;                                        // 0x01B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WaveNoise;                                         // 0x01D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigVMAnimEasingType                          WaveEase;                                          // 0x01E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29FE[0x3];                                     // 0x01E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WaveMinimum;                                       // 0x01EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaveMaximum;                                       // 0x01F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEulerRotationOrder                           RotationOrder;                                     // 0x01F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29FF[0x3];                                     // 0x01F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_BoneHarmonics_WorkData        WorkData;                                          // 0x01F8(0x0028)(Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_ItemHarmonics) == 0x000010, "Wrong alignment on FRigUnit_ItemHarmonics");
static_assert(sizeof(FRigUnit_ItemHarmonics) == 0x000220, "Wrong size on FRigUnit_ItemHarmonics");
static_assert(offsetof(FRigUnit_ItemHarmonics, Targets) == 0x000160, "Member 'FRigUnit_ItemHarmonics::Targets' has a wrong offset!");
static_assert(offsetof(FRigUnit_ItemHarmonics, WaveSpeed) == 0x000170, "Member 'FRigUnit_ItemHarmonics::WaveSpeed' has a wrong offset!");
static_assert(offsetof(FRigUnit_ItemHarmonics, WaveFrequency) == 0x000188, "Member 'FRigUnit_ItemHarmonics::WaveFrequency' has a wrong offset!");
static_assert(offsetof(FRigUnit_ItemHarmonics, WaveAmplitude) == 0x0001A0, "Member 'FRigUnit_ItemHarmonics::WaveAmplitude' has a wrong offset!");
static_assert(offsetof(FRigUnit_ItemHarmonics, WaveOffset) == 0x0001B8, "Member 'FRigUnit_ItemHarmonics::WaveOffset' has a wrong offset!");
static_assert(offsetof(FRigUnit_ItemHarmonics, WaveNoise) == 0x0001D0, "Member 'FRigUnit_ItemHarmonics::WaveNoise' has a wrong offset!");
static_assert(offsetof(FRigUnit_ItemHarmonics, WaveEase) == 0x0001E8, "Member 'FRigUnit_ItemHarmonics::WaveEase' has a wrong offset!");
static_assert(offsetof(FRigUnit_ItemHarmonics, WaveMinimum) == 0x0001EC, "Member 'FRigUnit_ItemHarmonics::WaveMinimum' has a wrong offset!");
static_assert(offsetof(FRigUnit_ItemHarmonics, WaveMaximum) == 0x0001F0, "Member 'FRigUnit_ItemHarmonics::WaveMaximum' has a wrong offset!");
static_assert(offsetof(FRigUnit_ItemHarmonics, RotationOrder) == 0x0001F4, "Member 'FRigUnit_ItemHarmonics::RotationOrder' has a wrong offset!");
static_assert(offsetof(FRigUnit_ItemHarmonics, WorkData) == 0x0001F8, "Member 'FRigUnit_ItemHarmonics::WorkData' has a wrong offset!");

// ScriptStruct ControlRig.RigCurveElement
// 0x0008 (0x00F0 - 0x00E8)
struct FRigCurveElement final : public FRigBaseElement
{
public:
	uint8                                         Pad_2A00[0x8];                                     // 0x00E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigCurveElement) == 0x000008, "Wrong alignment on FRigCurveElement");
static_assert(sizeof(FRigCurveElement) == 0x0000F0, "Wrong size on FRigCurveElement");

// ScriptStruct ControlRig.RigReferenceElement
// 0x0010 (0x02F0 - 0x02E0)
struct FRigReferenceElement final : public FRigSingleParentElement
{
public:
	uint8                                         Pad_2A01[0x18];                                    // 0x02D8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigReferenceElement) == 0x000010, "Wrong alignment on FRigReferenceElement");
static_assert(sizeof(FRigReferenceElement) == 0x0002F0, "Wrong size on FRigReferenceElement");

// ScriptStruct ControlRig.RigUnit_DebugBase
// 0x0000 (0x0008 - 0x0008)
struct FRigUnit_DebugBase : public FRigUnit
{
};
static_assert(alignof(FRigUnit_DebugBase) == 0x000008, "Wrong alignment on FRigUnit_DebugBase");
static_assert(sizeof(FRigUnit_DebugBase) == 0x000008, "Wrong size on FRigUnit_DebugBase");

// ScriptStruct ControlRig.RigUnit_HighlevelBase
// 0x0000 (0x0008 - 0x0008)
struct FRigUnit_HighlevelBase : public FRigUnit
{
};
static_assert(alignof(FRigUnit_HighlevelBase) == 0x000008, "Wrong alignment on FRigUnit_HighlevelBase");
static_assert(sizeof(FRigUnit_HighlevelBase) == 0x000008, "Wrong size on FRigUnit_HighlevelBase");

// ScriptStruct ControlRig.StructReference
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FStructReference final
{
public:
	uint8                                         Pad_2A02[0x8];                                     // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStructReference) == 0x000008, "Wrong alignment on FStructReference");
static_assert(sizeof(FStructReference) == 0x000008, "Wrong size on FStructReference");

// ScriptStruct ControlRig.RigUnit_SetMultiControlBool_Entry
// 0x000C (0x000C - 0x0000)
struct FRigUnit_SetMultiControlBool_Entry final
{
public:
	class FName                                   Control;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BoolValue;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A03[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_SetMultiControlBool_Entry) == 0x000004, "Wrong alignment on FRigUnit_SetMultiControlBool_Entry");
static_assert(sizeof(FRigUnit_SetMultiControlBool_Entry) == 0x00000C, "Wrong size on FRigUnit_SetMultiControlBool_Entry");
static_assert(offsetof(FRigUnit_SetMultiControlBool_Entry, Control) == 0x000000, "Member 'FRigUnit_SetMultiControlBool_Entry::Control' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetMultiControlBool_Entry, BoolValue) == 0x000008, "Member 'FRigUnit_SetMultiControlBool_Entry::BoolValue' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_GetControlDrivenList
// 0x0038 (0x0040 - 0x0008)
struct FRigUnit_GetControlDrivenList final : public FRigUnit
{
public:
	class FName                                   Control;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRigElementKey>                 Driven;                                            // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedControlIndex;                                // 0x0020(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_GetControlDrivenList) == 0x000008, "Wrong alignment on FRigUnit_GetControlDrivenList");
static_assert(sizeof(FRigUnit_GetControlDrivenList) == 0x000040, "Wrong size on FRigUnit_GetControlDrivenList");
static_assert(offsetof(FRigUnit_GetControlDrivenList, Control) == 0x000008, "Member 'FRigUnit_GetControlDrivenList::Control' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetControlDrivenList, Driven) == 0x000010, "Member 'FRigUnit_GetControlDrivenList::Driven' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetControlDrivenList, CachedControlIndex) == 0x000020, "Member 'FRigUnit_GetControlDrivenList::CachedControlIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_AimBoneMath
// 0x0228 (0x0230 - 0x0008)
struct FRigUnit_AimBoneMath final : public FRigUnit_HighlevelBase
{
public:
	uint8                                         Pad_2A04[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InputTransform;                                    // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigUnit_AimItem_Target                Primary;                                           // 0x0070(0x0048)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRigUnit_AimItem_Target                Secondary;                                         // 0x00B8(0x0048)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A05[0xC];                                     // 0x0104(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Result;                                            // 0x0110(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigUnit_AimBone_DebugSettings         DebugSettings;                                     // 0x0170(0x0070)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      PrimaryCachedSpace;                                // 0x01E0(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      SecondaryCachedSpace;                              // 0x0200(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInitialized;                                    // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A06[0xF];                                     // 0x0221(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_AimBoneMath) == 0x000010, "Wrong alignment on FRigUnit_AimBoneMath");
static_assert(sizeof(FRigUnit_AimBoneMath) == 0x000230, "Wrong size on FRigUnit_AimBoneMath");
static_assert(offsetof(FRigUnit_AimBoneMath, InputTransform) == 0x000010, "Member 'FRigUnit_AimBoneMath::InputTransform' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimBoneMath, Primary) == 0x000070, "Member 'FRigUnit_AimBoneMath::Primary' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimBoneMath, Secondary) == 0x0000B8, "Member 'FRigUnit_AimBoneMath::Secondary' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimBoneMath, Weight) == 0x000100, "Member 'FRigUnit_AimBoneMath::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimBoneMath, Result) == 0x000110, "Member 'FRigUnit_AimBoneMath::Result' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimBoneMath, DebugSettings) == 0x000170, "Member 'FRigUnit_AimBoneMath::DebugSettings' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimBoneMath, PrimaryCachedSpace) == 0x0001E0, "Member 'FRigUnit_AimBoneMath::PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimBoneMath, SecondaryCachedSpace) == 0x000200, "Member 'FRigUnit_AimBoneMath::SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimBoneMath, bIsInitialized) == 0x000220, "Member 'FRigUnit_AimBoneMath::bIsInitialized' has a wrong offset!");

// ScriptStruct ControlRig.AnimNode_ControlRig_ExternalSource
// 0x0008 (0x0238 - 0x0230)
struct FAnimNode_ControlRig_ExternalSource final : public FAnimNode_ControlRigBase
{
public:
	TWeakObjectPtr<class UControlRig>             ControlRig;                                        // 0x0230(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FAnimNode_ControlRig_ExternalSource) == 0x000008, "Wrong alignment on FAnimNode_ControlRig_ExternalSource");
static_assert(sizeof(FAnimNode_ControlRig_ExternalSource) == 0x000238, "Wrong size on FAnimNode_ControlRig_ExternalSource");
static_assert(offsetof(FAnimNode_ControlRig_ExternalSource, ControlRig) == 0x000230, "Member 'FAnimNode_ControlRig_ExternalSource::ControlRig' has a wrong offset!");

// ScriptStruct ControlRig.ControlRigAnimInstanceProxy
// 0x00A0 (0x07A0 - 0x0700)
struct FControlRigAnimInstanceProxy final : public FAnimInstanceProxy
{
public:
	uint8                                         Pad_2A07[0xA0];                                    // 0x0700(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FControlRigAnimInstanceProxy) == 0x000010, "Wrong alignment on FControlRigAnimInstanceProxy");
static_assert(sizeof(FControlRigAnimInstanceProxy) == 0x0007A0, "Wrong size on FControlRigAnimInstanceProxy");

// ScriptStruct ControlRig.RigUnit_SetShapeTransform
// 0x0090 (0x01F0 - 0x0160)
struct FRigUnit_SetShapeTransform final : public FRigUnitMutable
{
public:
	class FName                                   Control;                                           // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A08[0x8];                                     // 0x0168(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0170(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedControlIndex;                                // 0x01D0(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_SetShapeTransform) == 0x000010, "Wrong alignment on FRigUnit_SetShapeTransform");
static_assert(sizeof(FRigUnit_SetShapeTransform) == 0x0001F0, "Wrong size on FRigUnit_SetShapeTransform");
static_assert(offsetof(FRigUnit_SetShapeTransform, Control) == 0x000160, "Member 'FRigUnit_SetShapeTransform::Control' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetShapeTransform, Transform) == 0x000170, "Member 'FRigUnit_SetShapeTransform::Transform' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetShapeTransform, CachedControlIndex) == 0x0001D0, "Member 'FRigUnit_SetShapeTransform::CachedControlIndex' has a wrong offset!");

// ScriptStruct ControlRig.ControlRigComponentMappedElement
// 0x00F0 (0x00F0 - 0x0000)
struct FControlRigComponentMappedElement final
{
public:
	struct FSoftComponentReference                ComponentReference;                                // 0x0000(0x0048)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         TransformIndex;                                    // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TransformName;                                     // 0x004C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigElementType                               ElementType;                                       // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A09[0x3];                                     // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ElementName;                                       // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EControlRigComponentMapDirection              Direction;                                         // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A0A[0xF];                                     // 0x0061(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Offset;                                            // 0x0070(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EControlRigComponentSpace                     Space;                                             // 0x00D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A0B[0x3];                                     // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        SceneComponent;                                    // 0x00D8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ElementIndex;                                      // 0x00E0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubIndex;                                          // 0x00E4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A0C[0x8];                                     // 0x00E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FControlRigComponentMappedElement) == 0x000010, "Wrong alignment on FControlRigComponentMappedElement");
static_assert(sizeof(FControlRigComponentMappedElement) == 0x0000F0, "Wrong size on FControlRigComponentMappedElement");
static_assert(offsetof(FControlRigComponentMappedElement, ComponentReference) == 0x000000, "Member 'FControlRigComponentMappedElement::ComponentReference' has a wrong offset!");
static_assert(offsetof(FControlRigComponentMappedElement, TransformIndex) == 0x000048, "Member 'FControlRigComponentMappedElement::TransformIndex' has a wrong offset!");
static_assert(offsetof(FControlRigComponentMappedElement, TransformName) == 0x00004C, "Member 'FControlRigComponentMappedElement::TransformName' has a wrong offset!");
static_assert(offsetof(FControlRigComponentMappedElement, ElementType) == 0x000054, "Member 'FControlRigComponentMappedElement::ElementType' has a wrong offset!");
static_assert(offsetof(FControlRigComponentMappedElement, ElementName) == 0x000058, "Member 'FControlRigComponentMappedElement::ElementName' has a wrong offset!");
static_assert(offsetof(FControlRigComponentMappedElement, Direction) == 0x000060, "Member 'FControlRigComponentMappedElement::Direction' has a wrong offset!");
static_assert(offsetof(FControlRigComponentMappedElement, Offset) == 0x000070, "Member 'FControlRigComponentMappedElement::Offset' has a wrong offset!");
static_assert(offsetof(FControlRigComponentMappedElement, Weight) == 0x0000D0, "Member 'FControlRigComponentMappedElement::Weight' has a wrong offset!");
static_assert(offsetof(FControlRigComponentMappedElement, Space) == 0x0000D4, "Member 'FControlRigComponentMappedElement::Space' has a wrong offset!");
static_assert(offsetof(FControlRigComponentMappedElement, SceneComponent) == 0x0000D8, "Member 'FControlRigComponentMappedElement::SceneComponent' has a wrong offset!");
static_assert(offsetof(FControlRigComponentMappedElement, ElementIndex) == 0x0000E0, "Member 'FControlRigComponentMappedElement::ElementIndex' has a wrong offset!");
static_assert(offsetof(FControlRigComponentMappedElement, SubIndex) == 0x0000E4, "Member 'FControlRigComponentMappedElement::SubIndex' has a wrong offset!");

// ScriptStruct ControlRig.ControlRigComponentMappedComponent
// 0x0018 (0x0018 - 0x0000)
struct FControlRigComponentMappedComponent final
{
public:
	class USceneComponent*                        Component;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ElementName;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigElementType                               ElementType;                                       // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EControlRigComponentMapDirection              Direction;                                         // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A0D[0x6];                                     // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FControlRigComponentMappedComponent) == 0x000008, "Wrong alignment on FControlRigComponentMappedComponent");
static_assert(sizeof(FControlRigComponentMappedComponent) == 0x000018, "Wrong size on FControlRigComponentMappedComponent");
static_assert(offsetof(FControlRigComponentMappedComponent, Component) == 0x000000, "Member 'FControlRigComponentMappedComponent::Component' has a wrong offset!");
static_assert(offsetof(FControlRigComponentMappedComponent, ElementName) == 0x000008, "Member 'FControlRigComponentMappedComponent::ElementName' has a wrong offset!");
static_assert(offsetof(FControlRigComponentMappedComponent, ElementType) == 0x000010, "Member 'FControlRigComponentMappedComponent::ElementType' has a wrong offset!");
static_assert(offsetof(FControlRigComponentMappedComponent, Direction) == 0x000011, "Member 'FControlRigComponentMappedComponent::Direction' has a wrong offset!");

// ScriptStruct ControlRig.ControlRigComponentMappedBone
// 0x0010 (0x0010 - 0x0000)
struct FControlRigComponentMappedBone final
{
public:
	class FName                                   Source;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Target;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FControlRigComponentMappedBone) == 0x000004, "Wrong alignment on FControlRigComponentMappedBone");
static_assert(sizeof(FControlRigComponentMappedBone) == 0x000010, "Wrong size on FControlRigComponentMappedBone");
static_assert(offsetof(FControlRigComponentMappedBone, Source) == 0x000000, "Member 'FControlRigComponentMappedBone::Source' has a wrong offset!");
static_assert(offsetof(FControlRigComponentMappedBone, Target) == 0x000008, "Member 'FControlRigComponentMappedBone::Target' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_HierarchyImportFromSkeleton
// 0x0020 (0x0180 - 0x0160)
struct FRigUnit_HierarchyImportFromSkeleton final : public FRigUnit_DynamicHierarchyBaseMutable
{
public:
	class FName                                   Namespace;                                         // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeCurves;                                    // 0x0168(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A0E[0x7];                                     // 0x0169(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigElementKey>                 Items;                                             // 0x0170(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_HierarchyImportFromSkeleton) == 0x000010, "Wrong alignment on FRigUnit_HierarchyImportFromSkeleton");
static_assert(sizeof(FRigUnit_HierarchyImportFromSkeleton) == 0x000180, "Wrong size on FRigUnit_HierarchyImportFromSkeleton");
static_assert(offsetof(FRigUnit_HierarchyImportFromSkeleton, Namespace) == 0x000160, "Member 'FRigUnit_HierarchyImportFromSkeleton::Namespace' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyImportFromSkeleton, bIncludeCurves) == 0x000168, "Member 'FRigUnit_HierarchyImportFromSkeleton::bIncludeCurves' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyImportFromSkeleton, Items) == 0x000170, "Member 'FRigUnit_HierarchyImportFromSkeleton::Items' has a wrong offset!");

// ScriptStruct ControlRig.ControlRigComponentMappedCurve
// 0x0010 (0x0010 - 0x0000)
struct FControlRigComponentMappedCurve final
{
public:
	class FName                                   Source;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Target;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FControlRigComponentMappedCurve) == 0x000004, "Wrong alignment on FControlRigComponentMappedCurve");
static_assert(sizeof(FControlRigComponentMappedCurve) == 0x000010, "Wrong size on FControlRigComponentMappedCurve");
static_assert(offsetof(FControlRigComponentMappedCurve, Source) == 0x000000, "Member 'FControlRigComponentMappedCurve::Source' has a wrong offset!");
static_assert(offsetof(FControlRigComponentMappedCurve, Target) == 0x000008, "Member 'FControlRigComponentMappedCurve::Target' has a wrong offset!");

// ScriptStruct ControlRig.ControlShapeActorCreationParam
// 0x01C0 (0x01C0 - 0x0000)
struct alignas(0x10) FControlShapeActorCreationParam final
{
public:
	uint8                                         Pad_2A0F[0x1C0];                                   // 0x0000(0x01C0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FControlShapeActorCreationParam) == 0x000010, "Wrong alignment on FControlShapeActorCreationParam");
static_assert(sizeof(FControlShapeActorCreationParam) == 0x0001C0, "Wrong size on FControlShapeActorCreationParam");

// ScriptStruct ControlRig.RigUnit_BinaryTransformOp
// 0x0128 (0x0130 - 0x0008)
struct FRigUnit_BinaryTransformOp : public FRigUnit
{
public:
	uint8                                         Pad_2A10[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Argument0;                                         // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Argument1;                                         // 0x0070(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Result;                                            // 0x00D0(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_BinaryTransformOp) == 0x000010, "Wrong alignment on FRigUnit_BinaryTransformOp");
static_assert(sizeof(FRigUnit_BinaryTransformOp) == 0x000130, "Wrong size on FRigUnit_BinaryTransformOp");
static_assert(offsetof(FRigUnit_BinaryTransformOp, Argument0) == 0x000010, "Member 'FRigUnit_BinaryTransformOp::Argument0' has a wrong offset!");
static_assert(offsetof(FRigUnit_BinaryTransformOp, Argument1) == 0x000070, "Member 'FRigUnit_BinaryTransformOp::Argument1' has a wrong offset!");
static_assert(offsetof(FRigUnit_BinaryTransformOp, Result) == 0x0000D0, "Member 'FRigUnit_BinaryTransformOp::Result' has a wrong offset!");

// ScriptStruct ControlRig.ControlRigShapeDefinition
// 0x00A0 (0x00A0 - 0x0000)
struct FControlRigShapeDefinition final
{
public:
	class FName                                   ShapeName;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStaticMesh>             StaticMesh;                                        // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Transform;                                         // 0x0030(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A11[0x10];                                    // 0x0090(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FControlRigShapeDefinition) == 0x000010, "Wrong alignment on FControlRigShapeDefinition");
static_assert(sizeof(FControlRigShapeDefinition) == 0x0000A0, "Wrong size on FControlRigShapeDefinition");
static_assert(offsetof(FControlRigShapeDefinition, ShapeName) == 0x000000, "Member 'FControlRigShapeDefinition::ShapeName' has a wrong offset!");
static_assert(offsetof(FControlRigShapeDefinition, StaticMesh) == 0x000008, "Member 'FControlRigShapeDefinition::StaticMesh' has a wrong offset!");
static_assert(offsetof(FControlRigShapeDefinition, Transform) == 0x000030, "Member 'FControlRigShapeDefinition::Transform' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_HierarchyAddNull
// 0x0070 (0x01F0 - 0x0180)
struct FRigUnit_HierarchyAddNull final : public FRigUnit_HierarchyAddElement
{
public:
	struct FTransform                             Transform;                                         // 0x0180(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigVMTransformSpace                          Space;                                             // 0x01E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A12[0xF];                                     // 0x01E1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_HierarchyAddNull) == 0x000010, "Wrong alignment on FRigUnit_HierarchyAddNull");
static_assert(sizeof(FRigUnit_HierarchyAddNull) == 0x0001F0, "Wrong size on FRigUnit_HierarchyAddNull");
static_assert(offsetof(FRigUnit_HierarchyAddNull, Transform) == 0x000180, "Member 'FRigUnit_HierarchyAddNull::Transform' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddNull, Space) == 0x0001E0, "Member 'FRigUnit_HierarchyAddNull::Space' has a wrong offset!");

// ScriptStruct ControlRig.ControlRigTestDataFrame
// 0x0090 (0x0090 - 0x0000)
struct FControlRigTestDataFrame final
{
public:
	double                                        AbsoluteTime;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        DeltaTime;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FControlRigTestDataVariable>    Variables;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	struct FRigPose                               Pose;                                              // 0x0020(0x0070)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FControlRigTestDataFrame) == 0x000008, "Wrong alignment on FControlRigTestDataFrame");
static_assert(sizeof(FControlRigTestDataFrame) == 0x000090, "Wrong size on FControlRigTestDataFrame");
static_assert(offsetof(FControlRigTestDataFrame, AbsoluteTime) == 0x000000, "Member 'FControlRigTestDataFrame::AbsoluteTime' has a wrong offset!");
static_assert(offsetof(FControlRigTestDataFrame, DeltaTime) == 0x000008, "Member 'FControlRigTestDataFrame::DeltaTime' has a wrong offset!");
static_assert(offsetof(FControlRigTestDataFrame, Variables) == 0x000010, "Member 'FControlRigTestDataFrame::Variables' has a wrong offset!");
static_assert(offsetof(FControlRigTestDataFrame, Pose) == 0x000020, "Member 'FControlRigTestDataFrame::Pose' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_HierarchySetParentWeights
// 0x0020 (0x0180 - 0x0160)
struct FRigUnit_HierarchySetParentWeights final : public FRigUnit_DynamicHierarchyBaseMutable
{
public:
	struct FRigElementKey                         Child;                                             // 0x0160(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A13[0x4];                                     // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigElementWeight>              Weights;                                           // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_HierarchySetParentWeights) == 0x000010, "Wrong alignment on FRigUnit_HierarchySetParentWeights");
static_assert(sizeof(FRigUnit_HierarchySetParentWeights) == 0x000180, "Wrong size on FRigUnit_HierarchySetParentWeights");
static_assert(offsetof(FRigUnit_HierarchySetParentWeights, Child) == 0x000160, "Member 'FRigUnit_HierarchySetParentWeights::Child' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchySetParentWeights, Weights) == 0x000170, "Member 'FRigUnit_HierarchySetParentWeights::Weights' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_QuaternionFromAxisAndAngle
// 0x0048 (0x0050 - 0x0008)
struct FRigUnit_QuaternionFromAxisAndAngle final : public FRigUnit
{
public:
	struct FVector                                Axis;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A14[0xC];                                     // 0x0024(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Result;                                            // 0x0030(0x0020)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_QuaternionFromAxisAndAngle) == 0x000010, "Wrong alignment on FRigUnit_QuaternionFromAxisAndAngle");
static_assert(sizeof(FRigUnit_QuaternionFromAxisAndAngle) == 0x000050, "Wrong size on FRigUnit_QuaternionFromAxisAndAngle");
static_assert(offsetof(FRigUnit_QuaternionFromAxisAndAngle, Axis) == 0x000008, "Member 'FRigUnit_QuaternionFromAxisAndAngle::Axis' has a wrong offset!");
static_assert(offsetof(FRigUnit_QuaternionFromAxisAndAngle, Angle) == 0x000020, "Member 'FRigUnit_QuaternionFromAxisAndAngle::Angle' has a wrong offset!");
static_assert(offsetof(FRigUnit_QuaternionFromAxisAndAngle, Result) == 0x000030, "Member 'FRigUnit_QuaternionFromAxisAndAngle::Result' has a wrong offset!");

// ScriptStruct ControlRig.ControlRigValidationContext
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FControlRigValidationContext final
{
public:
	uint8                                         Pad_2A15[0x28];                                    // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FControlRigValidationContext) == 0x000008, "Wrong alignment on FControlRigValidationContext");
static_assert(sizeof(FControlRigValidationContext) == 0x000028, "Wrong size on FControlRigValidationContext");

// ScriptStruct ControlRig.RigUnit_Distance_VectorVector
// 0x0038 (0x0040 - 0x0008)
struct FRigUnit_Distance_VectorVector final : public FRigUnit
{
public:
	struct FVector                                Argument0;                                         // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Argument1;                                         // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Result;                                            // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A16[0x4];                                     // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_Distance_VectorVector) == 0x000008, "Wrong alignment on FRigUnit_Distance_VectorVector");
static_assert(sizeof(FRigUnit_Distance_VectorVector) == 0x000040, "Wrong size on FRigUnit_Distance_VectorVector");
static_assert(offsetof(FRigUnit_Distance_VectorVector, Argument0) == 0x000008, "Member 'FRigUnit_Distance_VectorVector::Argument0' has a wrong offset!");
static_assert(offsetof(FRigUnit_Distance_VectorVector, Argument1) == 0x000020, "Member 'FRigUnit_Distance_VectorVector::Argument1' has a wrong offset!");
static_assert(offsetof(FRigUnit_Distance_VectorVector, Result) == 0x000038, "Member 'FRigUnit_Distance_VectorVector::Result' has a wrong offset!");

// ScriptStruct ControlRig.CRSimLinearSpring
// 0x0010 (0x0010 - 0x0000)
struct FCRSimLinearSpring final
{
public:
	int32                                         SubjectA;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubjectB;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Coefficient;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Equilibrium;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRSimLinearSpring) == 0x000004, "Wrong alignment on FCRSimLinearSpring");
static_assert(sizeof(FCRSimLinearSpring) == 0x000010, "Wrong size on FCRSimLinearSpring");
static_assert(offsetof(FCRSimLinearSpring, SubjectA) == 0x000000, "Member 'FCRSimLinearSpring::SubjectA' has a wrong offset!");
static_assert(offsetof(FCRSimLinearSpring, SubjectB) == 0x000004, "Member 'FCRSimLinearSpring::SubjectB' has a wrong offset!");
static_assert(offsetof(FCRSimLinearSpring, Coefficient) == 0x000008, "Member 'FCRSimLinearSpring::Coefficient' has a wrong offset!");
static_assert(offsetof(FCRSimLinearSpring, Equilibrium) == 0x00000C, "Member 'FCRSimLinearSpring::Equilibrium' has a wrong offset!");

// ScriptStruct ControlRig.CRSimPointConstraint
// 0x0040 (0x0040 - 0x0000)
struct FCRSimPointConstraint final
{
public:
	ECRSimConstraintType                          Type;                                              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A17[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SubjectA;                                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubjectB;                                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A18[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DataA;                                             // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DataB;                                             // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRSimPointConstraint) == 0x000008, "Wrong alignment on FCRSimPointConstraint");
static_assert(sizeof(FCRSimPointConstraint) == 0x000040, "Wrong size on FCRSimPointConstraint");
static_assert(offsetof(FCRSimPointConstraint, Type) == 0x000000, "Member 'FCRSimPointConstraint::Type' has a wrong offset!");
static_assert(offsetof(FCRSimPointConstraint, SubjectA) == 0x000004, "Member 'FCRSimPointConstraint::SubjectA' has a wrong offset!");
static_assert(offsetof(FCRSimPointConstraint, SubjectB) == 0x000008, "Member 'FCRSimPointConstraint::SubjectB' has a wrong offset!");
static_assert(offsetof(FCRSimPointConstraint, DataA) == 0x000010, "Member 'FCRSimPointConstraint::DataA' has a wrong offset!");
static_assert(offsetof(FCRSimPointConstraint, DataB) == 0x000028, "Member 'FCRSimPointConstraint::DataB' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_GetRelativeTransform
// 0x0000 (0x0130 - 0x0130)
struct FRigUnit_GetRelativeTransform final : public FRigUnit_BinaryTransformOp
{
};
static_assert(alignof(FRigUnit_GetRelativeTransform) == 0x000010, "Wrong alignment on FRigUnit_GetRelativeTransform");
static_assert(sizeof(FRigUnit_GetRelativeTransform) == 0x000130, "Wrong size on FRigUnit_GetRelativeTransform");

// ScriptStruct ControlRig.CRSimPointForce
// 0x0028 (0x0028 - 0x0000)
struct FCRSimPointForce final
{
public:
	ECRSimPointForceType                          ForceType;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A19[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Vector;                                            // 0x0008(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Coefficient;                                       // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNormalize;                                        // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A1A[0x3];                                     // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCRSimPointForce) == 0x000008, "Wrong alignment on FCRSimPointForce");
static_assert(sizeof(FCRSimPointForce) == 0x000028, "Wrong size on FCRSimPointForce");
static_assert(offsetof(FCRSimPointForce, ForceType) == 0x000000, "Member 'FCRSimPointForce::ForceType' has a wrong offset!");
static_assert(offsetof(FCRSimPointForce, Vector) == 0x000008, "Member 'FCRSimPointForce::Vector' has a wrong offset!");
static_assert(offsetof(FCRSimPointForce, Coefficient) == 0x000020, "Member 'FCRSimPointForce::Coefficient' has a wrong offset!");
static_assert(offsetof(FCRSimPointForce, bNormalize) == 0x000024, "Member 'FCRSimPointForce::bNormalize' has a wrong offset!");

// ScriptStruct ControlRig.CRSimSoftCollision
// 0x0080 (0x0080 - 0x0000)
struct FCRSimSoftCollision final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECRSimSoftCollisionType                       ShapeType;                                         // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A1B[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinimumDistance;                                   // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaximumDistance;                                   // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigVMAnimEasingType                          FalloffType;                                       // 0x006C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A1C[0x3];                                     // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Coefficient;                                       // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInverted;                                         // 0x0074(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A1D[0xB];                                     // 0x0075(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCRSimSoftCollision) == 0x000010, "Wrong alignment on FCRSimSoftCollision");
static_assert(sizeof(FCRSimSoftCollision) == 0x000080, "Wrong size on FCRSimSoftCollision");
static_assert(offsetof(FCRSimSoftCollision, Transform) == 0x000000, "Member 'FCRSimSoftCollision::Transform' has a wrong offset!");
static_assert(offsetof(FCRSimSoftCollision, ShapeType) == 0x000060, "Member 'FCRSimSoftCollision::ShapeType' has a wrong offset!");
static_assert(offsetof(FCRSimSoftCollision, MinimumDistance) == 0x000064, "Member 'FCRSimSoftCollision::MinimumDistance' has a wrong offset!");
static_assert(offsetof(FCRSimSoftCollision, MaximumDistance) == 0x000068, "Member 'FCRSimSoftCollision::MaximumDistance' has a wrong offset!");
static_assert(offsetof(FCRSimSoftCollision, FalloffType) == 0x00006C, "Member 'FCRSimSoftCollision::FalloffType' has a wrong offset!");
static_assert(offsetof(FCRSimSoftCollision, Coefficient) == 0x000070, "Member 'FCRSimSoftCollision::Coefficient' has a wrong offset!");
static_assert(offsetof(FCRSimSoftCollision, bInverted) == 0x000074, "Member 'FCRSimSoftCollision::bInverted' has a wrong offset!");

// ScriptStruct ControlRig.CRSimPointContainer
// 0x0060 (0x0078 - 0x0018)
struct FCRSimPointContainer final : public FCRSimContainer
{
public:
	TArray<struct FRigVMSimPoint>                 Points;                                            // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCRSimLinearSpring>             Springs;                                           // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCRSimPointForce>               Forces;                                            // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCRSimSoftCollision>            CollisionVolumes;                                  // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCRSimPointConstraint>          Constraints;                                       // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRigVMSimPoint>                 PreviousStep;                                      // 0x0068(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FCRSimPointContainer) == 0x000008, "Wrong alignment on FCRSimPointContainer");
static_assert(sizeof(FCRSimPointContainer) == 0x000078, "Wrong size on FCRSimPointContainer");
static_assert(offsetof(FCRSimPointContainer, Points) == 0x000018, "Member 'FCRSimPointContainer::Points' has a wrong offset!");
static_assert(offsetof(FCRSimPointContainer, Springs) == 0x000028, "Member 'FCRSimPointContainer::Springs' has a wrong offset!");
static_assert(offsetof(FCRSimPointContainer, Forces) == 0x000038, "Member 'FCRSimPointContainer::Forces' has a wrong offset!");
static_assert(offsetof(FCRSimPointContainer, CollisionVolumes) == 0x000048, "Member 'FCRSimPointContainer::CollisionVolumes' has a wrong offset!");
static_assert(offsetof(FCRSimPointContainer, Constraints) == 0x000058, "Member 'FCRSimPointContainer::Constraints' has a wrong offset!");
static_assert(offsetof(FCRSimPointContainer, PreviousStep) == 0x000068, "Member 'FCRSimPointContainer::PreviousStep' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_UnaryQuaternionOp
// 0x0048 (0x0050 - 0x0008)
struct FRigUnit_UnaryQuaternionOp : public FRigUnit
{
public:
	uint8                                         Pad_2A1E[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Argument;                                          // 0x0010(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  Result;                                            // 0x0030(0x0020)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_UnaryQuaternionOp) == 0x000010, "Wrong alignment on FRigUnit_UnaryQuaternionOp");
static_assert(sizeof(FRigUnit_UnaryQuaternionOp) == 0x000050, "Wrong size on FRigUnit_UnaryQuaternionOp");
static_assert(offsetof(FRigUnit_UnaryQuaternionOp, Argument) == 0x000010, "Member 'FRigUnit_UnaryQuaternionOp::Argument' has a wrong offset!");
static_assert(offsetof(FRigUnit_UnaryQuaternionOp, Result) == 0x000030, "Member 'FRigUnit_UnaryQuaternionOp::Result' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_InverseQuaterion
// 0x0000 (0x0050 - 0x0050)
struct FRigUnit_InverseQuaterion final : public FRigUnit_UnaryQuaternionOp
{
};
static_assert(alignof(FRigUnit_InverseQuaterion) == 0x000010, "Wrong alignment on FRigUnit_InverseQuaterion");
static_assert(sizeof(FRigUnit_InverseQuaterion) == 0x000050, "Wrong size on FRigUnit_InverseQuaterion");

// ScriptStruct ControlRig.ConstraintNodeData
// 0x0140 (0x0140 - 0x0000)
struct FConstraintNodeData final
{
public:
	struct FTransform                             RelativeParent;                                    // 0x0000(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FConstraintOffset                      ConstraintOffset;                                  // 0x0060(0x00C0)(NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   LinkedNode;                                        // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTransformConstraint>           Constraints;                                       // 0x0128(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A1F[0x8];                                     // 0x0138(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConstraintNodeData) == 0x000010, "Wrong alignment on FConstraintNodeData");
static_assert(sizeof(FConstraintNodeData) == 0x000140, "Wrong size on FConstraintNodeData");
static_assert(offsetof(FConstraintNodeData, RelativeParent) == 0x000000, "Member 'FConstraintNodeData::RelativeParent' has a wrong offset!");
static_assert(offsetof(FConstraintNodeData, ConstraintOffset) == 0x000060, "Member 'FConstraintNodeData::ConstraintOffset' has a wrong offset!");
static_assert(offsetof(FConstraintNodeData, LinkedNode) == 0x000120, "Member 'FConstraintNodeData::LinkedNode' has a wrong offset!");
static_assert(offsetof(FConstraintNodeData, Constraints) == 0x000128, "Member 'FConstraintNodeData::Constraints' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_BinaryVectorOp
// 0x0048 (0x0050 - 0x0008)
struct FRigUnit_BinaryVectorOp : public FRigUnit
{
public:
	struct FVector                                Argument0;                                         // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Argument1;                                         // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Result;                                            // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_BinaryVectorOp) == 0x000008, "Wrong alignment on FRigUnit_BinaryVectorOp");
static_assert(sizeof(FRigUnit_BinaryVectorOp) == 0x000050, "Wrong size on FRigUnit_BinaryVectorOp");
static_assert(offsetof(FRigUnit_BinaryVectorOp, Argument0) == 0x000008, "Member 'FRigUnit_BinaryVectorOp::Argument0' has a wrong offset!");
static_assert(offsetof(FRigUnit_BinaryVectorOp, Argument1) == 0x000020, "Member 'FRigUnit_BinaryVectorOp::Argument1' has a wrong offset!");
static_assert(offsetof(FRigUnit_BinaryVectorOp, Result) == 0x000038, "Member 'FRigUnit_BinaryVectorOp::Result' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_Subtract_VectorVector
// 0x0000 (0x0050 - 0x0050)
struct FRigUnit_Subtract_VectorVector final : public FRigUnit_BinaryVectorOp
{
};
static_assert(alignof(FRigUnit_Subtract_VectorVector) == 0x000008, "Wrong alignment on FRigUnit_Subtract_VectorVector");
static_assert(sizeof(FRigUnit_Subtract_VectorVector) == 0x000050, "Wrong size on FRigUnit_Subtract_VectorVector");

// ScriptStruct ControlRig.AnimationHierarchy
// 0x0010 (0x0088 - 0x0078)
struct FAnimationHierarchy final : public FNodeHierarchyWithUserData
{
public:
	TArray<struct FConstraintNodeData>            UserData;                                          // 0x0078(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimationHierarchy) == 0x000008, "Wrong alignment on FAnimationHierarchy");
static_assert(sizeof(FAnimationHierarchy) == 0x000088, "Wrong size on FAnimationHierarchy");
static_assert(offsetof(FAnimationHierarchy, UserData) == 0x000078, "Member 'FAnimationHierarchy::UserData' has a wrong offset!");

// ScriptStruct ControlRig.RigElement
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FRigElement
{
public:
	uint8                                         Pad_2A20[0x8];                                     // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Name;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A21[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigElement) == 0x000008, "Wrong alignment on FRigElement");
static_assert(sizeof(FRigElement) == 0x000018, "Wrong size on FRigElement");
static_assert(offsetof(FRigElement, Name) == 0x000008, "Member 'FRigElement::Name' has a wrong offset!");
static_assert(offsetof(FRigElement, Index) == 0x000010, "Member 'FRigElement::Index' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_TwoBoneIKFK
// 0x0310 (0x0470 - 0x0160)
struct FRigUnit_TwoBoneIKFK final : public FRigUnitMutable
{
public:
	class FName                                   StartJoint;                                        // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndJoint;                                          // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PoleTarget;                                        // 0x0170(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Spin;                                              // 0x0188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A22[0x4];                                     // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             EndEffector;                                       // 0x0190(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IKBlend;                                           // 0x01F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A23[0xC];                                     // 0x01F4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             StartJointFKTransform;                             // 0x0200(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTransform                             MidJointFKTransform;                               // 0x0260(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTransform                             EndJointFKTransform;                               // 0x02C0(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PreviousFKIKBlend;                                 // 0x0320(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A24[0xC];                                     // 0x0324(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             StartJointIKTransform;                             // 0x0330(0x0060)(Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTransform                             MidJointIKTransform;                               // 0x0390(0x0060)(Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTransform                             EndJointIKTransform;                               // 0x03F0(0x0060)(Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         StartJointIndex;                                   // 0x0450(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MidJointIndex;                                     // 0x0454(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         EndJointIndex;                                     // 0x0458(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         UpperLimbLength;                                   // 0x045C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LowerLimbLength;                                   // 0x0460(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsInitialized;                                    // 0x0464(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A25[0xB];                                     // 0x0465(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_TwoBoneIKFK) == 0x000010, "Wrong alignment on FRigUnit_TwoBoneIKFK");
static_assert(sizeof(FRigUnit_TwoBoneIKFK) == 0x000470, "Wrong size on FRigUnit_TwoBoneIKFK");
static_assert(offsetof(FRigUnit_TwoBoneIKFK, StartJoint) == 0x000160, "Member 'FRigUnit_TwoBoneIKFK::StartJoint' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKFK, EndJoint) == 0x000168, "Member 'FRigUnit_TwoBoneIKFK::EndJoint' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKFK, PoleTarget) == 0x000170, "Member 'FRigUnit_TwoBoneIKFK::PoleTarget' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKFK, Spin) == 0x000188, "Member 'FRigUnit_TwoBoneIKFK::Spin' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKFK, EndEffector) == 0x000190, "Member 'FRigUnit_TwoBoneIKFK::EndEffector' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKFK, IKBlend) == 0x0001F0, "Member 'FRigUnit_TwoBoneIKFK::IKBlend' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKFK, StartJointFKTransform) == 0x000200, "Member 'FRigUnit_TwoBoneIKFK::StartJointFKTransform' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKFK, MidJointFKTransform) == 0x000260, "Member 'FRigUnit_TwoBoneIKFK::MidJointFKTransform' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKFK, EndJointFKTransform) == 0x0002C0, "Member 'FRigUnit_TwoBoneIKFK::EndJointFKTransform' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKFK, PreviousFKIKBlend) == 0x000320, "Member 'FRigUnit_TwoBoneIKFK::PreviousFKIKBlend' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKFK, StartJointIKTransform) == 0x000330, "Member 'FRigUnit_TwoBoneIKFK::StartJointIKTransform' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKFK, MidJointIKTransform) == 0x000390, "Member 'FRigUnit_TwoBoneIKFK::MidJointIKTransform' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKFK, EndJointIKTransform) == 0x0003F0, "Member 'FRigUnit_TwoBoneIKFK::EndJointIKTransform' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKFK, StartJointIndex) == 0x000450, "Member 'FRigUnit_TwoBoneIKFK::StartJointIndex' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKFK, MidJointIndex) == 0x000454, "Member 'FRigUnit_TwoBoneIKFK::MidJointIndex' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKFK, EndJointIndex) == 0x000458, "Member 'FRigUnit_TwoBoneIKFK::EndJointIndex' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKFK, UpperLimbLength) == 0x00045C, "Member 'FRigUnit_TwoBoneIKFK::UpperLimbLength' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKFK, LowerLimbLength) == 0x000460, "Member 'FRigUnit_TwoBoneIKFK::LowerLimbLength' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKFK, bIsInitialized) == 0x000464, "Member 'FRigUnit_TwoBoneIKFK::bIsInitialized' has a wrong offset!");

// ScriptStruct ControlRig.RigBone
// 0x0158 (0x0170 - 0x0018)
struct FRigBone final : public FRigElement
{
public:
	class FName                                   ParentName;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParentIndex;                                       // 0x0020(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A26[0xC];                                     // 0x0024(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InitialTransform;                                  // 0x0030(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             GlobalTransform;                                   // 0x0090(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             LocalTransform;                                    // 0x00F0(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Dependents;                                        // 0x0150(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	ERigBoneType                                  Type;                                              // 0x0160(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A27[0xF];                                     // 0x0161(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigBone) == 0x000010, "Wrong alignment on FRigBone");
static_assert(sizeof(FRigBone) == 0x000170, "Wrong size on FRigBone");
static_assert(offsetof(FRigBone, ParentName) == 0x000018, "Member 'FRigBone::ParentName' has a wrong offset!");
static_assert(offsetof(FRigBone, ParentIndex) == 0x000020, "Member 'FRigBone::ParentIndex' has a wrong offset!");
static_assert(offsetof(FRigBone, InitialTransform) == 0x000030, "Member 'FRigBone::InitialTransform' has a wrong offset!");
static_assert(offsetof(FRigBone, GlobalTransform) == 0x000090, "Member 'FRigBone::GlobalTransform' has a wrong offset!");
static_assert(offsetof(FRigBone, LocalTransform) == 0x0000F0, "Member 'FRigBone::LocalTransform' has a wrong offset!");
static_assert(offsetof(FRigBone, Dependents) == 0x000150, "Member 'FRigBone::Dependents' has a wrong offset!");
static_assert(offsetof(FRigBone, Type) == 0x000160, "Member 'FRigBone::Type' has a wrong offset!");

// ScriptStruct ControlRig.RigBoneHierarchy
// 0x0010 (0x0010 - 0x0000)
struct FRigBoneHierarchy final
{
public:
	TArray<struct FRigBone>                       Bones;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FRigBoneHierarchy) == 0x000008, "Wrong alignment on FRigBoneHierarchy");
static_assert(sizeof(FRigBoneHierarchy) == 0x000010, "Wrong size on FRigBoneHierarchy");
static_assert(offsetof(FRigBoneHierarchy, Bones) == 0x000000, "Member 'FRigBoneHierarchy::Bones' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_AimConstraint_WorkData
// 0x0010 (0x0010 - 0x0000)
struct FRigUnit_AimConstraint_WorkData final
{
public:
	TArray<struct FConstraintData>                ConstraintData;                                    // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_AimConstraint_WorkData) == 0x000008, "Wrong alignment on FRigUnit_AimConstraint_WorkData");
static_assert(sizeof(FRigUnit_AimConstraint_WorkData) == 0x000010, "Wrong size on FRigUnit_AimConstraint_WorkData");
static_assert(offsetof(FRigUnit_AimConstraint_WorkData, ConstraintData) == 0x000000, "Member 'FRigUnit_AimConstraint_WorkData::ConstraintData' has a wrong offset!");

// ScriptStruct ControlRig.RigControl
// 0x0348 (0x0360 - 0x0018)
struct FRigControl final : public FRigElement
{
public:
	ERigControlType                               ControlType;                                       // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A28[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DisplayName;                                       // 0x001C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParentName;                                        // 0x0024(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParentIndex;                                       // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpaceName;                                         // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpaceIndex;                                        // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A29[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OffsetTransform;                                   // 0x0040(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigControlValue                       InitialValue;                                      // 0x00A0(0x0084)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FRigControlValue                       Value;                                             // 0x0124(0x0084)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	ERigControlAxis                               PrimaryAxis;                                       // 0x01A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCurve;                                          // 0x01A9(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimatable;                                       // 0x01AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLimitTranslation;                                 // 0x01AB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLimitRotation;                                    // 0x01AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLimitScale;                                       // 0x01AD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawLimits;                                       // 0x01AE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A2A[0x1];                                     // 0x01AF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigControlValue                       MinimumValue;                                      // 0x01B0(0x0084)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRigControlValue                       MaximumValue;                                      // 0x0234(0x0084)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bGizmoEnabled;                                     // 0x02B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGizmoVisible;                                     // 0x02B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A2B[0x2];                                     // 0x02BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   GizmoName;                                         // 0x02BC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A2C[0xC];                                     // 0x02C4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             GizmoTransform;                                    // 0x02D0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           GizmoColor;                                        // 0x0330(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Dependents;                                        // 0x0340(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	bool                                          bIsTransientControl;                               // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A2D[0x7];                                     // 0x0351(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UEnum*                                  ControlEnum;                                       // 0x0358(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigControl) == 0x000010, "Wrong alignment on FRigControl");
static_assert(sizeof(FRigControl) == 0x000360, "Wrong size on FRigControl");
static_assert(offsetof(FRigControl, ControlType) == 0x000018, "Member 'FRigControl::ControlType' has a wrong offset!");
static_assert(offsetof(FRigControl, DisplayName) == 0x00001C, "Member 'FRigControl::DisplayName' has a wrong offset!");
static_assert(offsetof(FRigControl, ParentName) == 0x000024, "Member 'FRigControl::ParentName' has a wrong offset!");
static_assert(offsetof(FRigControl, ParentIndex) == 0x00002C, "Member 'FRigControl::ParentIndex' has a wrong offset!");
static_assert(offsetof(FRigControl, SpaceName) == 0x000030, "Member 'FRigControl::SpaceName' has a wrong offset!");
static_assert(offsetof(FRigControl, SpaceIndex) == 0x000038, "Member 'FRigControl::SpaceIndex' has a wrong offset!");
static_assert(offsetof(FRigControl, OffsetTransform) == 0x000040, "Member 'FRigControl::OffsetTransform' has a wrong offset!");
static_assert(offsetof(FRigControl, InitialValue) == 0x0000A0, "Member 'FRigControl::InitialValue' has a wrong offset!");
static_assert(offsetof(FRigControl, Value) == 0x000124, "Member 'FRigControl::Value' has a wrong offset!");
static_assert(offsetof(FRigControl, PrimaryAxis) == 0x0001A8, "Member 'FRigControl::PrimaryAxis' has a wrong offset!");
static_assert(offsetof(FRigControl, bIsCurve) == 0x0001A9, "Member 'FRigControl::bIsCurve' has a wrong offset!");
static_assert(offsetof(FRigControl, bAnimatable) == 0x0001AA, "Member 'FRigControl::bAnimatable' has a wrong offset!");
static_assert(offsetof(FRigControl, bLimitTranslation) == 0x0001AB, "Member 'FRigControl::bLimitTranslation' has a wrong offset!");
static_assert(offsetof(FRigControl, bLimitRotation) == 0x0001AC, "Member 'FRigControl::bLimitRotation' has a wrong offset!");
static_assert(offsetof(FRigControl, bLimitScale) == 0x0001AD, "Member 'FRigControl::bLimitScale' has a wrong offset!");
static_assert(offsetof(FRigControl, bDrawLimits) == 0x0001AE, "Member 'FRigControl::bDrawLimits' has a wrong offset!");
static_assert(offsetof(FRigControl, MinimumValue) == 0x0001B0, "Member 'FRigControl::MinimumValue' has a wrong offset!");
static_assert(offsetof(FRigControl, MaximumValue) == 0x000234, "Member 'FRigControl::MaximumValue' has a wrong offset!");
static_assert(offsetof(FRigControl, bGizmoEnabled) == 0x0002B8, "Member 'FRigControl::bGizmoEnabled' has a wrong offset!");
static_assert(offsetof(FRigControl, bGizmoVisible) == 0x0002B9, "Member 'FRigControl::bGizmoVisible' has a wrong offset!");
static_assert(offsetof(FRigControl, GizmoName) == 0x0002BC, "Member 'FRigControl::GizmoName' has a wrong offset!");
static_assert(offsetof(FRigControl, GizmoTransform) == 0x0002D0, "Member 'FRigControl::GizmoTransform' has a wrong offset!");
static_assert(offsetof(FRigControl, GizmoColor) == 0x000330, "Member 'FRigControl::GizmoColor' has a wrong offset!");
static_assert(offsetof(FRigControl, Dependents) == 0x000340, "Member 'FRigControl::Dependents' has a wrong offset!");
static_assert(offsetof(FRigControl, bIsTransientControl) == 0x000350, "Member 'FRigControl::bIsTransientControl' has a wrong offset!");
static_assert(offsetof(FRigControl, ControlEnum) == 0x000358, "Member 'FRigControl::ControlEnum' has a wrong offset!");

// ScriptStruct ControlRig.RigControlHierarchy
// 0x0010 (0x0010 - 0x0000)
struct FRigControlHierarchy final
{
public:
	TArray<struct FRigControl>                    Controls;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FRigControlHierarchy) == 0x000008, "Wrong alignment on FRigControlHierarchy");
static_assert(sizeof(FRigControlHierarchy) == 0x000010, "Wrong size on FRigControlHierarchy");
static_assert(offsetof(FRigControlHierarchy, Controls) == 0x000000, "Member 'FRigControlHierarchy::Controls' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_Multiply_VectorVector
// 0x0000 (0x0050 - 0x0050)
struct FRigUnit_Multiply_VectorVector final : public FRigUnit_BinaryVectorOp
{
};
static_assert(alignof(FRigUnit_Multiply_VectorVector) == 0x000008, "Wrong alignment on FRigUnit_Multiply_VectorVector");
static_assert(sizeof(FRigUnit_Multiply_VectorVector) == 0x000050, "Wrong size on FRigUnit_Multiply_VectorVector");

// ScriptStruct ControlRig.RigCurve
// 0x0008 (0x0020 - 0x0018)
struct FRigCurve final : public FRigElement
{
public:
	float                                         Value;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A2E[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigCurve) == 0x000008, "Wrong alignment on FRigCurve");
static_assert(sizeof(FRigCurve) == 0x000020, "Wrong size on FRigCurve");
static_assert(offsetof(FRigCurve, Value) == 0x000018, "Member 'FRigCurve::Value' has a wrong offset!");

// ScriptStruct ControlRig.RigCurveContainer
// 0x0010 (0x0010 - 0x0000)
struct FRigCurveContainer final
{
public:
	TArray<struct FRigCurve>                      Curves;                                            // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FRigCurveContainer) == 0x000008, "Wrong alignment on FRigCurveContainer");
static_assert(sizeof(FRigCurveContainer) == 0x000010, "Wrong size on FRigCurveContainer");
static_assert(offsetof(FRigCurveContainer, Curves) == 0x000000, "Member 'FRigCurveContainer::Curves' has a wrong offset!");

// ScriptStruct ControlRig.BlendTarget
// 0x0070 (0x0070 - 0x0000)
struct FBlendTarget final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A2F[0xC];                                     // 0x0064(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBlendTarget) == 0x000010, "Wrong alignment on FBlendTarget");
static_assert(sizeof(FBlendTarget) == 0x000070, "Wrong size on FBlendTarget");
static_assert(offsetof(FBlendTarget, Transform) == 0x000000, "Member 'FBlendTarget::Transform' has a wrong offset!");
static_assert(offsetof(FBlendTarget, Weight) == 0x000060, "Member 'FBlendTarget::Weight' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_BlendTransform
// 0x00D8 (0x00E0 - 0x0008)
struct FRigUnit_BlendTransform final : public FRigUnit
{
public:
	uint8                                         Pad_2A30[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Source;                                            // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBlendTarget>                   Targets;                                           // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FTransform                             Result;                                            // 0x0080(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_BlendTransform) == 0x000010, "Wrong alignment on FRigUnit_BlendTransform");
static_assert(sizeof(FRigUnit_BlendTransform) == 0x0000E0, "Wrong size on FRigUnit_BlendTransform");
static_assert(offsetof(FRigUnit_BlendTransform, Source) == 0x000010, "Member 'FRigUnit_BlendTransform::Source' has a wrong offset!");
static_assert(offsetof(FRigUnit_BlendTransform, Targets) == 0x000070, "Member 'FRigUnit_BlendTransform::Targets' has a wrong offset!");
static_assert(offsetof(FRigUnit_BlendTransform, Result) == 0x000080, "Member 'FRigUnit_BlendTransform::Result' has a wrong offset!");

// ScriptStruct ControlRig.RigSpace
// 0x00D8 (0x00F0 - 0x0018)
struct FRigSpace final : public FRigElement
{
public:
	ERigSpaceType                                 SpaceType;                                         // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A31[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ParentName;                                        // 0x001C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParentIndex;                                       // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A32[0x8];                                     // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InitialTransform;                                  // 0x0030(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             LocalTransform;                                    // 0x0090(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigSpace) == 0x000010, "Wrong alignment on FRigSpace");
static_assert(sizeof(FRigSpace) == 0x0000F0, "Wrong size on FRigSpace");
static_assert(offsetof(FRigSpace, SpaceType) == 0x000018, "Member 'FRigSpace::SpaceType' has a wrong offset!");
static_assert(offsetof(FRigSpace, ParentName) == 0x00001C, "Member 'FRigSpace::ParentName' has a wrong offset!");
static_assert(offsetof(FRigSpace, ParentIndex) == 0x000024, "Member 'FRigSpace::ParentIndex' has a wrong offset!");
static_assert(offsetof(FRigSpace, InitialTransform) == 0x000030, "Member 'FRigSpace::InitialTransform' has a wrong offset!");
static_assert(offsetof(FRigSpace, LocalTransform) == 0x000090, "Member 'FRigSpace::LocalTransform' has a wrong offset!");

// ScriptStruct ControlRig.RigSpaceHierarchy
// 0x0010 (0x0010 - 0x0000)
struct FRigSpaceHierarchy final
{
public:
	TArray<struct FRigSpace>                      Spaces;                                            // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FRigSpaceHierarchy) == 0x000008, "Wrong alignment on FRigSpaceHierarchy");
static_assert(sizeof(FRigSpaceHierarchy) == 0x000010, "Wrong size on FRigSpaceHierarchy");
static_assert(offsetof(FRigSpaceHierarchy, Spaces) == 0x000000, "Member 'FRigSpaceHierarchy::Spaces' has a wrong offset!");

// ScriptStruct ControlRig.RigHierarchyContainer
// 0x0040 (0x0040 - 0x0000)
struct FRigHierarchyContainer final
{
public:
	struct FRigBoneHierarchy                      BoneHierarchy;                                     // 0x0000(0x0010)(NativeAccessSpecifierPublic)
	struct FRigSpaceHierarchy                     SpaceHierarchy;                                    // 0x0010(0x0010)(NativeAccessSpecifierPublic)
	struct FRigControlHierarchy                   ControlHierarchy;                                  // 0x0020(0x0010)(NativeAccessSpecifierPublic)
	struct FRigCurveContainer                     CurveContainer;                                    // 0x0030(0x0010)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigHierarchyContainer) == 0x000008, "Wrong alignment on FRigHierarchyContainer");
static_assert(sizeof(FRigHierarchyContainer) == 0x000040, "Wrong size on FRigHierarchyContainer");
static_assert(offsetof(FRigHierarchyContainer, BoneHierarchy) == 0x000000, "Member 'FRigHierarchyContainer::BoneHierarchy' has a wrong offset!");
static_assert(offsetof(FRigHierarchyContainer, SpaceHierarchy) == 0x000010, "Member 'FRigHierarchyContainer::SpaceHierarchy' has a wrong offset!");
static_assert(offsetof(FRigHierarchyContainer, ControlHierarchy) == 0x000020, "Member 'FRigHierarchyContainer::ControlHierarchy' has a wrong offset!");
static_assert(offsetof(FRigHierarchyContainer, CurveContainer) == 0x000030, "Member 'FRigHierarchyContainer::CurveContainer' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_CollectionChain
// 0x0030 (0x0038 - 0x0008)
struct FRigUnit_CollectionChain final : public FRigUnit_CollectionBase
{
public:
	struct FRigElementKey                         FirstItem;                                         // 0x0008(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         LastItem;                                          // 0x0014(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Reverse;                                           // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A33[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKeyCollection               Collection;                                        // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_CollectionChain) == 0x000008, "Wrong alignment on FRigUnit_CollectionChain");
static_assert(sizeof(FRigUnit_CollectionChain) == 0x000038, "Wrong size on FRigUnit_CollectionChain");
static_assert(offsetof(FRigUnit_CollectionChain, FirstItem) == 0x000008, "Member 'FRigUnit_CollectionChain::FirstItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionChain, LastItem) == 0x000014, "Member 'FRigUnit_CollectionChain::LastItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionChain, Reverse) == 0x000020, "Member 'FRigUnit_CollectionChain::Reverse' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionChain, Collection) == 0x000028, "Member 'FRigUnit_CollectionChain::Collection' has a wrong offset!");

// ScriptStruct ControlRig.RigHierarchyRef
// 0x0001 (0x0001 - 0x0000)
struct FRigHierarchyRef final
{
public:
	uint8                                         Pad_2A34[0x1];                                     // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigHierarchyRef) == 0x000001, "Wrong alignment on FRigHierarchyRef");
static_assert(sizeof(FRigHierarchyRef) == 0x000001, "Wrong size on FRigHierarchyRef");

// ScriptStruct ControlRig.RigUnit_DrawContainerSetColor
// 0x0020 (0x0180 - 0x0160)
struct FRigUnit_DrawContainerSetColor final : public FRigUnitMutable
{
public:
	class FName                                   InstructionName;                                   // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0168(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A35[0x8];                                     // 0x0178(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_DrawContainerSetColor) == 0x000010, "Wrong alignment on FRigUnit_DrawContainerSetColor");
static_assert(sizeof(FRigUnit_DrawContainerSetColor) == 0x000180, "Wrong size on FRigUnit_DrawContainerSetColor");
static_assert(offsetof(FRigUnit_DrawContainerSetColor, InstructionName) == 0x000160, "Member 'FRigUnit_DrawContainerSetColor::InstructionName' has a wrong offset!");
static_assert(offsetof(FRigUnit_DrawContainerSetColor, Color) == 0x000168, "Member 'FRigUnit_DrawContainerSetColor::Color' has a wrong offset!");

// ScriptStruct ControlRig.RigControlModifiedContext
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x04) FRigControlModifiedContext final
{
public:
	uint8                                         Pad_2A36[0x18];                                    // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigControlModifiedContext) == 0x000004, "Wrong alignment on FRigControlModifiedContext");
static_assert(sizeof(FRigControlModifiedContext) == 0x000018, "Wrong size on FRigControlModifiedContext");

// ScriptStruct ControlRig.RigUnit_ApplyFK
// 0x00F0 (0x0250 - 0x0160)
struct FRigUnit_ApplyFK final : public FRigUnitMutable
{
public:
	class FName                                   Joint;                                             // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A37[0x8];                                     // 0x0168(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0170(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransformFilter                       Filter;                                            // 0x01D0(0x0009)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EApplyTransformMode                           ApplyTransformMode;                                // 0x01D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETransformSpaceMode                           ApplyTransformSpace;                               // 0x01DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A38[0x5];                                     // 0x01DB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             BaseTransform;                                     // 0x01E0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BaseJoint;                                         // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A39[0x8];                                     // 0x0248(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_ApplyFK) == 0x000010, "Wrong alignment on FRigUnit_ApplyFK");
static_assert(sizeof(FRigUnit_ApplyFK) == 0x000250, "Wrong size on FRigUnit_ApplyFK");
static_assert(offsetof(FRigUnit_ApplyFK, Joint) == 0x000160, "Member 'FRigUnit_ApplyFK::Joint' has a wrong offset!");
static_assert(offsetof(FRigUnit_ApplyFK, Transform) == 0x000170, "Member 'FRigUnit_ApplyFK::Transform' has a wrong offset!");
static_assert(offsetof(FRigUnit_ApplyFK, Filter) == 0x0001D0, "Member 'FRigUnit_ApplyFK::Filter' has a wrong offset!");
static_assert(offsetof(FRigUnit_ApplyFK, ApplyTransformMode) == 0x0001D9, "Member 'FRigUnit_ApplyFK::ApplyTransformMode' has a wrong offset!");
static_assert(offsetof(FRigUnit_ApplyFK, ApplyTransformSpace) == 0x0001DA, "Member 'FRigUnit_ApplyFK::ApplyTransformSpace' has a wrong offset!");
static_assert(offsetof(FRigUnit_ApplyFK, BaseTransform) == 0x0001E0, "Member 'FRigUnit_ApplyFK::BaseTransform' has a wrong offset!");
static_assert(offsetof(FRigUnit_ApplyFK, BaseJoint) == 0x000240, "Member 'FRigUnit_ApplyFK::BaseJoint' has a wrong offset!");

// ScriptStruct ControlRig.RigEventContext
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FRigEventContext final
{
public:
	uint8                                         Pad_2A3A[0x28];                                    // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigEventContext) == 0x000008, "Wrong alignment on FRigEventContext");
static_assert(sizeof(FRigEventContext) == 0x000028, "Wrong size on FRigEventContext");

// ScriptStruct ControlRig.RigBaseMetadata
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FRigBaseMetadata
{
public:
	uint8                                         Pad_2A3B[0x10];                                    // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Name;                                              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ERigMetadataType                              Type;                                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2A3C[0xF];                                     // 0x0019(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigBaseMetadata) == 0x000008, "Wrong alignment on FRigBaseMetadata");
static_assert(sizeof(FRigBaseMetadata) == 0x000028, "Wrong size on FRigBaseMetadata");
static_assert(offsetof(FRigBaseMetadata, Name) == 0x000010, "Member 'FRigBaseMetadata::Name' has a wrong offset!");
static_assert(offsetof(FRigBaseMetadata, Type) == 0x000018, "Member 'FRigBaseMetadata::Type' has a wrong offset!");

// ScriptStruct ControlRig.RigBoolMetadata
// 0x0008 (0x0030 - 0x0028)
struct FRigBoolMetadata final : public FRigBaseMetadata
{
public:
	bool                                          Value;                                             // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2A3D[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigBoolMetadata) == 0x000008, "Wrong alignment on FRigBoolMetadata");
static_assert(sizeof(FRigBoolMetadata) == 0x000030, "Wrong size on FRigBoolMetadata");
static_assert(offsetof(FRigBoolMetadata, Value) == 0x000028, "Member 'FRigBoolMetadata::Value' has a wrong offset!");

// ScriptStruct ControlRig.RigBoolArrayMetadata
// 0x0010 (0x0038 - 0x0028)
struct FRigBoolArrayMetadata final : public FRigBaseMetadata
{
public:
	TArray<bool>                                  Value;                                             // 0x0028(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FRigBoolArrayMetadata) == 0x000008, "Wrong alignment on FRigBoolArrayMetadata");
static_assert(sizeof(FRigBoolArrayMetadata) == 0x000038, "Wrong size on FRigBoolArrayMetadata");
static_assert(offsetof(FRigBoolArrayMetadata, Value) == 0x000028, "Member 'FRigBoolArrayMetadata::Value' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_CollectionReplaceItemsArray
// 0x0038 (0x0040 - 0x0008)
struct FRigUnit_CollectionReplaceItemsArray final : public FRigUnit_CollectionBase
{
public:
	TArray<struct FRigElementKey>                 Items;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   Old;                                               // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   New;                                               // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RemoveInvalidItems;                                // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowDuplicates;                                  // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A3E[0x6];                                     // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigElementKey>                 Result;                                            // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_CollectionReplaceItemsArray) == 0x000008, "Wrong alignment on FRigUnit_CollectionReplaceItemsArray");
static_assert(sizeof(FRigUnit_CollectionReplaceItemsArray) == 0x000040, "Wrong size on FRigUnit_CollectionReplaceItemsArray");
static_assert(offsetof(FRigUnit_CollectionReplaceItemsArray, Items) == 0x000008, "Member 'FRigUnit_CollectionReplaceItemsArray::Items' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionReplaceItemsArray, Old) == 0x000018, "Member 'FRigUnit_CollectionReplaceItemsArray::Old' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionReplaceItemsArray, New) == 0x000020, "Member 'FRigUnit_CollectionReplaceItemsArray::New' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionReplaceItemsArray, RemoveInvalidItems) == 0x000028, "Member 'FRigUnit_CollectionReplaceItemsArray::RemoveInvalidItems' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionReplaceItemsArray, bAllowDuplicates) == 0x000029, "Member 'FRigUnit_CollectionReplaceItemsArray::bAllowDuplicates' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionReplaceItemsArray, Result) == 0x000030, "Member 'FRigUnit_CollectionReplaceItemsArray::Result' has a wrong offset!");

// ScriptStruct ControlRig.RigFloatMetadata
// 0x0008 (0x0030 - 0x0028)
struct FRigFloatMetadata final : public FRigBaseMetadata
{
public:
	float                                         Value;                                             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2A3F[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigFloatMetadata) == 0x000008, "Wrong alignment on FRigFloatMetadata");
static_assert(sizeof(FRigFloatMetadata) == 0x000030, "Wrong size on FRigFloatMetadata");
static_assert(offsetof(FRigFloatMetadata, Value) == 0x000028, "Member 'FRigFloatMetadata::Value' has a wrong offset!");

// ScriptStruct ControlRig.RigFloatArrayMetadata
// 0x0010 (0x0038 - 0x0028)
struct FRigFloatArrayMetadata final : public FRigBaseMetadata
{
public:
	TArray<float>                                 Value;                                             // 0x0028(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FRigFloatArrayMetadata) == 0x000008, "Wrong alignment on FRigFloatArrayMetadata");
static_assert(sizeof(FRigFloatArrayMetadata) == 0x000038, "Wrong size on FRigFloatArrayMetadata");
static_assert(offsetof(FRigFloatArrayMetadata, Value) == 0x000028, "Member 'FRigFloatArrayMetadata::Value' has a wrong offset!");

// ScriptStruct ControlRig.RigInt32Metadata
// 0x0008 (0x0030 - 0x0028)
struct FRigInt32Metadata final : public FRigBaseMetadata
{
public:
	int32                                         Value;                                             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2A40[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigInt32Metadata) == 0x000008, "Wrong alignment on FRigInt32Metadata");
static_assert(sizeof(FRigInt32Metadata) == 0x000030, "Wrong size on FRigInt32Metadata");
static_assert(offsetof(FRigInt32Metadata, Value) == 0x000028, "Member 'FRigInt32Metadata::Value' has a wrong offset!");

// ScriptStruct ControlRig.RigInt32ArrayMetadata
// 0x0010 (0x0038 - 0x0028)
struct FRigInt32ArrayMetadata final : public FRigBaseMetadata
{
public:
	TArray<int32>                                 Value;                                             // 0x0028(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FRigInt32ArrayMetadata) == 0x000008, "Wrong alignment on FRigInt32ArrayMetadata");
static_assert(sizeof(FRigInt32ArrayMetadata) == 0x000038, "Wrong size on FRigInt32ArrayMetadata");
static_assert(offsetof(FRigInt32ArrayMetadata, Value) == 0x000028, "Member 'FRigInt32ArrayMetadata::Value' has a wrong offset!");

// ScriptStruct ControlRig.RigNameMetadata
// 0x0008 (0x0030 - 0x0028)
struct FRigNameMetadata final : public FRigBaseMetadata
{
public:
	class FName                                   Value;                                             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FRigNameMetadata) == 0x000008, "Wrong alignment on FRigNameMetadata");
static_assert(sizeof(FRigNameMetadata) == 0x000030, "Wrong size on FRigNameMetadata");
static_assert(offsetof(FRigNameMetadata, Value) == 0x000028, "Member 'FRigNameMetadata::Value' has a wrong offset!");

// ScriptStruct ControlRig.RigNameArrayMetadata
// 0x0010 (0x0038 - 0x0028)
struct FRigNameArrayMetadata final : public FRigBaseMetadata
{
public:
	TArray<class FName>                           Value;                                             // 0x0028(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FRigNameArrayMetadata) == 0x000008, "Wrong alignment on FRigNameArrayMetadata");
static_assert(sizeof(FRigNameArrayMetadata) == 0x000038, "Wrong size on FRigNameArrayMetadata");
static_assert(offsetof(FRigNameArrayMetadata, Value) == 0x000028, "Member 'FRigNameArrayMetadata::Value' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_CollectionGetAll
// 0x0018 (0x0020 - 0x0008)
struct FRigUnit_CollectionGetAll final : public FRigUnit_CollectionBase
{
public:
	ERigElementType                               TypeToSearch;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A41[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigElementKey>                 Items;                                             // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_CollectionGetAll) == 0x000008, "Wrong alignment on FRigUnit_CollectionGetAll");
static_assert(sizeof(FRigUnit_CollectionGetAll) == 0x000020, "Wrong size on FRigUnit_CollectionGetAll");
static_assert(offsetof(FRigUnit_CollectionGetAll, TypeToSearch) == 0x000008, "Member 'FRigUnit_CollectionGetAll::TypeToSearch' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionGetAll, Items) == 0x000010, "Member 'FRigUnit_CollectionGetAll::Items' has a wrong offset!");

// ScriptStruct ControlRig.RigVectorMetadata
// 0x0018 (0x0040 - 0x0028)
struct FRigVectorMetadata final : public FRigBaseMetadata
{
public:
	struct FVector                                Value;                                             // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FRigVectorMetadata) == 0x000008, "Wrong alignment on FRigVectorMetadata");
static_assert(sizeof(FRigVectorMetadata) == 0x000040, "Wrong size on FRigVectorMetadata");
static_assert(offsetof(FRigVectorMetadata, Value) == 0x000028, "Member 'FRigVectorMetadata::Value' has a wrong offset!");

// ScriptStruct ControlRig.RigVectorArrayMetadata
// 0x0010 (0x0038 - 0x0028)
struct FRigVectorArrayMetadata final : public FRigBaseMetadata
{
public:
	TArray<struct FVector>                        Value;                                             // 0x0028(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FRigVectorArrayMetadata) == 0x000008, "Wrong alignment on FRigVectorArrayMetadata");
static_assert(sizeof(FRigVectorArrayMetadata) == 0x000038, "Wrong size on FRigVectorArrayMetadata");
static_assert(offsetof(FRigVectorArrayMetadata, Value) == 0x000028, "Member 'FRigVectorArrayMetadata::Value' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_CollectionReverse
// 0x0020 (0x0028 - 0x0008)
struct FRigUnit_CollectionReverse final : public FRigUnit_CollectionBase
{
public:
	struct FRigElementKeyCollection               Collection;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKeyCollection               Reversed;                                          // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_CollectionReverse) == 0x000008, "Wrong alignment on FRigUnit_CollectionReverse");
static_assert(sizeof(FRigUnit_CollectionReverse) == 0x000028, "Wrong size on FRigUnit_CollectionReverse");
static_assert(offsetof(FRigUnit_CollectionReverse, Collection) == 0x000008, "Member 'FRigUnit_CollectionReverse::Collection' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionReverse, Reversed) == 0x000018, "Member 'FRigUnit_CollectionReverse::Reversed' has a wrong offset!");

// ScriptStruct ControlRig.RigRotatorMetadata
// 0x0018 (0x0040 - 0x0028)
struct FRigRotatorMetadata final : public FRigBaseMetadata
{
public:
	struct FRotator                               Value;                                             // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FRigRotatorMetadata) == 0x000008, "Wrong alignment on FRigRotatorMetadata");
static_assert(sizeof(FRigRotatorMetadata) == 0x000040, "Wrong size on FRigRotatorMetadata");
static_assert(offsetof(FRigRotatorMetadata, Value) == 0x000028, "Member 'FRigRotatorMetadata::Value' has a wrong offset!");

// ScriptStruct ControlRig.RigRotatorArrayMetadata
// 0x0010 (0x0038 - 0x0028)
struct FRigRotatorArrayMetadata final : public FRigBaseMetadata
{
public:
	TArray<struct FRotator>                       Value;                                             // 0x0028(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FRigRotatorArrayMetadata) == 0x000008, "Wrong alignment on FRigRotatorArrayMetadata");
static_assert(sizeof(FRigRotatorArrayMetadata) == 0x000038, "Wrong size on FRigRotatorArrayMetadata");
static_assert(offsetof(FRigRotatorArrayMetadata, Value) == 0x000028, "Member 'FRigRotatorArrayMetadata::Value' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_CollectionGetItems
// 0x0020 (0x0028 - 0x0008)
struct FRigUnit_CollectionGetItems final : public FRigUnit_CollectionBase
{
public:
	struct FRigElementKeyCollection               Collection;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRigElementKey>                 Items;                                             // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_CollectionGetItems) == 0x000008, "Wrong alignment on FRigUnit_CollectionGetItems");
static_assert(sizeof(FRigUnit_CollectionGetItems) == 0x000028, "Wrong size on FRigUnit_CollectionGetItems");
static_assert(offsetof(FRigUnit_CollectionGetItems, Collection) == 0x000008, "Member 'FRigUnit_CollectionGetItems::Collection' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionGetItems, Items) == 0x000018, "Member 'FRigUnit_CollectionGetItems::Items' has a wrong offset!");

// ScriptStruct ControlRig.RigQuatMetadata
// 0x0028 (0x0050 - 0x0028)
struct FRigQuatMetadata final : public FRigBaseMetadata
{
public:
	uint8                                         Pad_2A42[0x8];                                     // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Value;                                             // 0x0030(0x0020)(IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FRigQuatMetadata) == 0x000010, "Wrong alignment on FRigQuatMetadata");
static_assert(sizeof(FRigQuatMetadata) == 0x000050, "Wrong size on FRigQuatMetadata");
static_assert(offsetof(FRigQuatMetadata, Value) == 0x000030, "Member 'FRigQuatMetadata::Value' has a wrong offset!");

// ScriptStruct ControlRig.RigQuatArrayMetadata
// 0x0010 (0x0038 - 0x0028)
struct FRigQuatArrayMetadata final : public FRigBaseMetadata
{
public:
	TArray<struct FQuat>                          Value;                                             // 0x0028(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FRigQuatArrayMetadata) == 0x000008, "Wrong alignment on FRigQuatArrayMetadata");
static_assert(sizeof(FRigQuatArrayMetadata) == 0x000038, "Wrong size on FRigQuatArrayMetadata");
static_assert(offsetof(FRigQuatArrayMetadata, Value) == 0x000028, "Member 'FRigQuatArrayMetadata::Value' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_CollectionChildren
// 0x0020 (0x0028 - 0x0008)
struct FRigUnit_CollectionChildren final : public FRigUnit_CollectionBase
{
public:
	struct FRigElementKey                         Parent;                                            // 0x0008(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeParent;                                    // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecursive;                                        // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigElementType                               TypeToSearch;                                      // 0x0016(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A43[0x1];                                     // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKeyCollection               Collection;                                        // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_CollectionChildren) == 0x000008, "Wrong alignment on FRigUnit_CollectionChildren");
static_assert(sizeof(FRigUnit_CollectionChildren) == 0x000028, "Wrong size on FRigUnit_CollectionChildren");
static_assert(offsetof(FRigUnit_CollectionChildren, Parent) == 0x000008, "Member 'FRigUnit_CollectionChildren::Parent' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionChildren, bIncludeParent) == 0x000014, "Member 'FRigUnit_CollectionChildren::bIncludeParent' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionChildren, bRecursive) == 0x000015, "Member 'FRigUnit_CollectionChildren::bRecursive' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionChildren, TypeToSearch) == 0x000016, "Member 'FRigUnit_CollectionChildren::TypeToSearch' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionChildren, Collection) == 0x000018, "Member 'FRigUnit_CollectionChildren::Collection' has a wrong offset!");

// ScriptStruct ControlRig.RigTransformMetadata
// 0x0068 (0x0090 - 0x0028)
struct FRigTransformMetadata final : public FRigBaseMetadata
{
public:
	uint8                                         Pad_2A44[0x8];                                     // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Value;                                             // 0x0030(0x0060)(IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FRigTransformMetadata) == 0x000010, "Wrong alignment on FRigTransformMetadata");
static_assert(sizeof(FRigTransformMetadata) == 0x000090, "Wrong size on FRigTransformMetadata");
static_assert(offsetof(FRigTransformMetadata, Value) == 0x000030, "Member 'FRigTransformMetadata::Value' has a wrong offset!");

// ScriptStruct ControlRig.RigTransformArrayMetadata
// 0x0010 (0x0038 - 0x0028)
struct FRigTransformArrayMetadata final : public FRigBaseMetadata
{
public:
	TArray<struct FTransform>                     Value;                                             // 0x0028(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FRigTransformArrayMetadata) == 0x000008, "Wrong alignment on FRigTransformArrayMetadata");
static_assert(sizeof(FRigTransformArrayMetadata) == 0x000038, "Wrong size on FRigTransformArrayMetadata");
static_assert(offsetof(FRigTransformArrayMetadata, Value) == 0x000028, "Member 'FRigTransformArrayMetadata::Value' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_CollectionIntersection
// 0x0030 (0x0038 - 0x0008)
struct FRigUnit_CollectionIntersection final : public FRigUnit_CollectionBase
{
public:
	struct FRigElementKeyCollection               A;                                                 // 0x0008(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKeyCollection               B;                                                 // 0x0018(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKeyCollection               Collection;                                        // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_CollectionIntersection) == 0x000008, "Wrong alignment on FRigUnit_CollectionIntersection");
static_assert(sizeof(FRigUnit_CollectionIntersection) == 0x000038, "Wrong size on FRigUnit_CollectionIntersection");
static_assert(offsetof(FRigUnit_CollectionIntersection, A) == 0x000008, "Member 'FRigUnit_CollectionIntersection::A' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionIntersection, B) == 0x000018, "Member 'FRigUnit_CollectionIntersection::B' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionIntersection, Collection) == 0x000028, "Member 'FRigUnit_CollectionIntersection::Collection' has a wrong offset!");

// ScriptStruct ControlRig.RigLinearColorMetadata
// 0x0010 (0x0038 - 0x0028)
struct FRigLinearColorMetadata final : public FRigBaseMetadata
{
public:
	struct FLinearColor                           Value;                                             // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FRigLinearColorMetadata) == 0x000008, "Wrong alignment on FRigLinearColorMetadata");
static_assert(sizeof(FRigLinearColorMetadata) == 0x000038, "Wrong size on FRigLinearColorMetadata");
static_assert(offsetof(FRigLinearColorMetadata, Value) == 0x000028, "Member 'FRigLinearColorMetadata::Value' has a wrong offset!");

// ScriptStruct ControlRig.RigLinearColorArrayMetadata
// 0x0010 (0x0038 - 0x0028)
struct FRigLinearColorArrayMetadata final : public FRigBaseMetadata
{
public:
	TArray<struct FLinearColor>                   Value;                                             // 0x0028(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FRigLinearColorArrayMetadata) == 0x000008, "Wrong alignment on FRigLinearColorArrayMetadata");
static_assert(sizeof(FRigLinearColorArrayMetadata) == 0x000038, "Wrong size on FRigLinearColorArrayMetadata");
static_assert(offsetof(FRigLinearColorArrayMetadata, Value) == 0x000028, "Member 'FRigLinearColorArrayMetadata::Value' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SetDefaultParent
// 0x0020 (0x0180 - 0x0160)
struct FRigUnit_SetDefaultParent final : public FRigUnit_DynamicHierarchyBaseMutable
{
public:
	struct FRigElementKey                         Child;                                             // 0x0160(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         Parent;                                            // 0x016C(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A45[0x8];                                     // 0x0178(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_SetDefaultParent) == 0x000010, "Wrong alignment on FRigUnit_SetDefaultParent");
static_assert(sizeof(FRigUnit_SetDefaultParent) == 0x000180, "Wrong size on FRigUnit_SetDefaultParent");
static_assert(offsetof(FRigUnit_SetDefaultParent, Child) == 0x000160, "Member 'FRigUnit_SetDefaultParent::Child' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetDefaultParent, Parent) == 0x00016C, "Member 'FRigUnit_SetDefaultParent::Parent' has a wrong offset!");

// ScriptStruct ControlRig.RigElementKeyMetadata
// 0x0010 (0x0038 - 0x0028)
struct FRigElementKeyMetadata final : public FRigBaseMetadata
{
public:
	struct FRigElementKey                         Value;                                             // 0x0028(0x000C)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2A46[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigElementKeyMetadata) == 0x000008, "Wrong alignment on FRigElementKeyMetadata");
static_assert(sizeof(FRigElementKeyMetadata) == 0x000038, "Wrong size on FRigElementKeyMetadata");
static_assert(offsetof(FRigElementKeyMetadata, Value) == 0x000028, "Member 'FRigElementKeyMetadata::Value' has a wrong offset!");

// ScriptStruct ControlRig.RigElementKeyArrayMetadata
// 0x0010 (0x0038 - 0x0028)
struct FRigElementKeyArrayMetadata final : public FRigBaseMetadata
{
public:
	TArray<struct FRigElementKey>                 Value;                                             // 0x0028(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FRigElementKeyArrayMetadata) == 0x000008, "Wrong alignment on FRigElementKeyArrayMetadata");
static_assert(sizeof(FRigElementKeyArrayMetadata) == 0x000038, "Wrong size on FRigElementKeyArrayMetadata");
static_assert(offsetof(FRigElementKeyArrayMetadata, Value) == 0x000028, "Member 'FRigElementKeyArrayMetadata::Value' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_CollectionItemAtIndex
// 0x0020 (0x0028 - 0x0008)
struct FRigUnit_CollectionItemAtIndex final : public FRigUnit_CollectionBase
{
public:
	struct FRigElementKeyCollection               Collection;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         Item;                                              // 0x001C(0x000C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_CollectionItemAtIndex) == 0x000008, "Wrong alignment on FRigUnit_CollectionItemAtIndex");
static_assert(sizeof(FRigUnit_CollectionItemAtIndex) == 0x000028, "Wrong size on FRigUnit_CollectionItemAtIndex");
static_assert(offsetof(FRigUnit_CollectionItemAtIndex, Collection) == 0x000008, "Member 'FRigUnit_CollectionItemAtIndex::Collection' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionItemAtIndex, Index) == 0x000018, "Member 'FRigUnit_CollectionItemAtIndex::Index' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionItemAtIndex, Item) == 0x00001C, "Member 'FRigUnit_CollectionItemAtIndex::Item' has a wrong offset!");

// ScriptStruct ControlRig.RigInfluenceEntryModifier
// 0x0010 (0x0010 - 0x0000)
struct FRigInfluenceEntryModifier final
{
public:
	TArray<struct FRigElementKey>                 AffectedList;                                      // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigInfluenceEntryModifier) == 0x000008, "Wrong alignment on FRigInfluenceEntryModifier");
static_assert(sizeof(FRigInfluenceEntryModifier) == 0x000010, "Wrong size on FRigInfluenceEntryModifier");
static_assert(offsetof(FRigInfluenceEntryModifier, AffectedList) == 0x000000, "Member 'FRigInfluenceEntryModifier::AffectedList' has a wrong offset!");

// ScriptStruct ControlRig.AnimNode_ControlRigInputPose
// 0x0020 (0x0030 - 0x0010)
struct FAnimNode_ControlRigInputPose final : public FAnimNode_Base
{
public:
	struct FPoseLink                              InputPose;                                         // 0x0010(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A47[0x10];                                    // 0x0020(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_ControlRigInputPose) == 0x000008, "Wrong alignment on FAnimNode_ControlRigInputPose");
static_assert(sizeof(FAnimNode_ControlRigInputPose) == 0x000030, "Wrong size on FAnimNode_ControlRigInputPose");
static_assert(offsetof(FAnimNode_ControlRigInputPose, InputPose) == 0x000010, "Member 'FAnimNode_ControlRigInputPose::InputPose' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_CollectionGetParentIndicesItemArray
// 0x0020 (0x0028 - 0x0008)
struct FRigUnit_CollectionGetParentIndicesItemArray final : public FRigUnit_CollectionBase
{
public:
	TArray<struct FRigElementKey>                 Items;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ParentIndices;                                     // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_CollectionGetParentIndicesItemArray) == 0x000008, "Wrong alignment on FRigUnit_CollectionGetParentIndicesItemArray");
static_assert(sizeof(FRigUnit_CollectionGetParentIndicesItemArray) == 0x000028, "Wrong size on FRigUnit_CollectionGetParentIndicesItemArray");
static_assert(offsetof(FRigUnit_CollectionGetParentIndicesItemArray, Items) == 0x000008, "Member 'FRigUnit_CollectionGetParentIndicesItemArray::Items' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionGetParentIndicesItemArray, ParentIndices) == 0x000018, "Member 'FRigUnit_CollectionGetParentIndicesItemArray::ParentIndices' has a wrong offset!");

// ScriptStruct ControlRig.ControlRigLayerInstanceProxy
// 0x00A0 (0x07A0 - 0x0700)
struct FControlRigLayerInstanceProxy final : public FAnimInstanceProxy
{
public:
	uint8                                         Pad_2A48[0xA0];                                    // 0x0700(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FControlRigLayerInstanceProxy) == 0x000010, "Wrong alignment on FControlRigLayerInstanceProxy");
static_assert(sizeof(FControlRigLayerInstanceProxy) == 0x0007A0, "Wrong size on FControlRigLayerInstanceProxy");

// ScriptStruct ControlRig.ControlRigSequenceObjectReference
// 0x0008 (0x0008 - 0x0000)
struct FControlRigSequenceObjectReference final
{
public:
	TSubclassOf<class UControlRig>                ControlRigClass;                                   // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FControlRigSequenceObjectReference) == 0x000008, "Wrong alignment on FControlRigSequenceObjectReference");
static_assert(sizeof(FControlRigSequenceObjectReference) == 0x000008, "Wrong size on FControlRigSequenceObjectReference");
static_assert(offsetof(FControlRigSequenceObjectReference, ControlRigClass) == 0x000000, "Member 'FControlRigSequenceObjectReference::ControlRigClass' has a wrong offset!");

// ScriptStruct ControlRig.ControlRigSequenceObjectReferences
// 0x0010 (0x0010 - 0x0000)
struct FControlRigSequenceObjectReferences final
{
public:
	TArray<struct FControlRigSequenceObjectReference> Array;                                             // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FControlRigSequenceObjectReferences) == 0x000008, "Wrong alignment on FControlRigSequenceObjectReferences");
static_assert(sizeof(FControlRigSequenceObjectReferences) == 0x000010, "Wrong size on FControlRigSequenceObjectReferences");
static_assert(offsetof(FControlRigSequenceObjectReferences, Array) == 0x000000, "Member 'FControlRigSequenceObjectReferences::Array' has a wrong offset!");

// ScriptStruct ControlRig.ControlRigSequenceObjectReferenceMap
// 0x0020 (0x0020 - 0x0000)
struct FControlRigSequenceObjectReferenceMap final
{
public:
	TArray<struct FGuid>                          BindingIds;                                        // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FControlRigSequenceObjectReferences> References;                                        // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FControlRigSequenceObjectReferenceMap) == 0x000008, "Wrong alignment on FControlRigSequenceObjectReferenceMap");
static_assert(sizeof(FControlRigSequenceObjectReferenceMap) == 0x000020, "Wrong size on FControlRigSequenceObjectReferenceMap");
static_assert(offsetof(FControlRigSequenceObjectReferenceMap, BindingIds) == 0x000000, "Member 'FControlRigSequenceObjectReferenceMap::BindingIds' has a wrong offset!");
static_assert(offsetof(FControlRigSequenceObjectReferenceMap, References) == 0x000010, "Member 'FControlRigSequenceObjectReferenceMap::References' has a wrong offset!");

// ScriptStruct ControlRig.EnumParameterNameAndCurve
// 0x0110 (0x0110 - 0x0000)
struct FEnumParameterNameAndCurve final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneByteChannel                 ParameterCurve;                                    // 0x0008(0x0108)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FEnumParameterNameAndCurve) == 0x000008, "Wrong alignment on FEnumParameterNameAndCurve");
static_assert(sizeof(FEnumParameterNameAndCurve) == 0x000110, "Wrong size on FEnumParameterNameAndCurve");
static_assert(offsetof(FEnumParameterNameAndCurve, ParameterName) == 0x000000, "Member 'FEnumParameterNameAndCurve::ParameterName' has a wrong offset!");
static_assert(offsetof(FEnumParameterNameAndCurve, ParameterCurve) == 0x000008, "Member 'FEnumParameterNameAndCurve::ParameterCurve' has a wrong offset!");

// ScriptStruct ControlRig.IntegerParameterNameAndCurve
// 0x0108 (0x0108 - 0x0000)
struct FIntegerParameterNameAndCurve final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneIntegerChannel              ParameterCurve;                                    // 0x0008(0x0100)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FIntegerParameterNameAndCurve) == 0x000008, "Wrong alignment on FIntegerParameterNameAndCurve");
static_assert(sizeof(FIntegerParameterNameAndCurve) == 0x000108, "Wrong size on FIntegerParameterNameAndCurve");
static_assert(offsetof(FIntegerParameterNameAndCurve, ParameterName) == 0x000000, "Member 'FIntegerParameterNameAndCurve::ParameterName' has a wrong offset!");
static_assert(offsetof(FIntegerParameterNameAndCurve, ParameterCurve) == 0x000008, "Member 'FIntegerParameterNameAndCurve::ParameterCurve' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_DynamicHierarchyBase
// 0x0000 (0x0008 - 0x0008)
struct FRigUnit_DynamicHierarchyBase : public FRigUnit
{
};
static_assert(alignof(FRigUnit_DynamicHierarchyBase) == 0x000008, "Wrong alignment on FRigUnit_DynamicHierarchyBase");
static_assert(sizeof(FRigUnit_DynamicHierarchyBase) == 0x000008, "Wrong size on FRigUnit_DynamicHierarchyBase");

// ScriptStruct ControlRig.RigUnit_HierarchyGetParentWeights
// 0x0030 (0x0038 - 0x0008)
struct FRigUnit_HierarchyGetParentWeights final : public FRigUnit_DynamicHierarchyBase
{
public:
	struct FRigElementKey                         Child;                                             // 0x0008(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A49[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigElementWeight>              Weights;                                           // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FRigElementKeyCollection               Parents;                                           // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_HierarchyGetParentWeights) == 0x000008, "Wrong alignment on FRigUnit_HierarchyGetParentWeights");
static_assert(sizeof(FRigUnit_HierarchyGetParentWeights) == 0x000038, "Wrong size on FRigUnit_HierarchyGetParentWeights");
static_assert(offsetof(FRigUnit_HierarchyGetParentWeights, Child) == 0x000008, "Member 'FRigUnit_HierarchyGetParentWeights::Child' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyGetParentWeights, Weights) == 0x000018, "Member 'FRigUnit_HierarchyGetParentWeights::Weights' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyGetParentWeights, Parents) == 0x000028, "Member 'FRigUnit_HierarchyGetParentWeights::Parents' has a wrong offset!");

// ScriptStruct ControlRig.MovieSceneControlRigSpaceBaseKey
// 0x0010 (0x0010 - 0x0000)
struct FMovieSceneControlRigSpaceBaseKey final
{
public:
	EMovieSceneControlRigSpaceType                SpaceType;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A4A[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKey                         ControlRigElement;                                 // 0x0004(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneControlRigSpaceBaseKey) == 0x000004, "Wrong alignment on FMovieSceneControlRigSpaceBaseKey");
static_assert(sizeof(FMovieSceneControlRigSpaceBaseKey) == 0x000010, "Wrong size on FMovieSceneControlRigSpaceBaseKey");
static_assert(offsetof(FMovieSceneControlRigSpaceBaseKey, SpaceType) == 0x000000, "Member 'FMovieSceneControlRigSpaceBaseKey::SpaceType' has a wrong offset!");
static_assert(offsetof(FMovieSceneControlRigSpaceBaseKey, ControlRigElement) == 0x000004, "Member 'FMovieSceneControlRigSpaceBaseKey::ControlRigElement' has a wrong offset!");

// ScriptStruct ControlRig.MovieSceneControlRigSpaceChannel
// 0x00C0 (0x0110 - 0x0050)
struct FMovieSceneControlRigSpaceChannel final : public FMovieSceneChannel
{
public:
	TArray<struct FFrameNumber>                   KeyTimes;                                          // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FMovieSceneControlRigSpaceBaseKey> KeyValues;                                         // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	struct FMovieSceneKeyHandleMap                KeyHandles;                                        // 0x0070(0x0088)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A4B[0x18];                                    // 0x00F8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneControlRigSpaceChannel) == 0x000008, "Wrong alignment on FMovieSceneControlRigSpaceChannel");
static_assert(sizeof(FMovieSceneControlRigSpaceChannel) == 0x000110, "Wrong size on FMovieSceneControlRigSpaceChannel");
static_assert(offsetof(FMovieSceneControlRigSpaceChannel, KeyTimes) == 0x000050, "Member 'FMovieSceneControlRigSpaceChannel::KeyTimes' has a wrong offset!");
static_assert(offsetof(FMovieSceneControlRigSpaceChannel, KeyValues) == 0x000060, "Member 'FMovieSceneControlRigSpaceChannel::KeyValues' has a wrong offset!");
static_assert(offsetof(FMovieSceneControlRigSpaceChannel, KeyHandles) == 0x000070, "Member 'FMovieSceneControlRigSpaceChannel::KeyHandles' has a wrong offset!");

// ScriptStruct ControlRig.SpaceControlNameAndChannel
// 0x0118 (0x0118 - 0x0000)
struct FSpaceControlNameAndChannel final
{
public:
	class FName                                   ControlName;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneControlRigSpaceChannel      SpaceCurve;                                        // 0x0008(0x0110)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpaceControlNameAndChannel) == 0x000008, "Wrong alignment on FSpaceControlNameAndChannel");
static_assert(sizeof(FSpaceControlNameAndChannel) == 0x000118, "Wrong size on FSpaceControlNameAndChannel");
static_assert(offsetof(FSpaceControlNameAndChannel, ControlName) == 0x000000, "Member 'FSpaceControlNameAndChannel::ControlName' has a wrong offset!");
static_assert(offsetof(FSpaceControlNameAndChannel, SpaceCurve) == 0x000008, "Member 'FSpaceControlNameAndChannel::SpaceCurve' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_CollectionAddItem
// 0x0030 (0x0038 - 0x0008)
struct FRigUnit_CollectionAddItem final : public FRigUnit_CollectionBase
{
public:
	struct FRigElementKeyCollection               Collection;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         Item;                                              // 0x0018(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A4C[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKeyCollection               Result;                                            // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_CollectionAddItem) == 0x000008, "Wrong alignment on FRigUnit_CollectionAddItem");
static_assert(sizeof(FRigUnit_CollectionAddItem) == 0x000038, "Wrong size on FRigUnit_CollectionAddItem");
static_assert(offsetof(FRigUnit_CollectionAddItem, Collection) == 0x000008, "Member 'FRigUnit_CollectionAddItem::Collection' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionAddItem, Item) == 0x000018, "Member 'FRigUnit_CollectionAddItem::Item' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionAddItem, Result) == 0x000028, "Member 'FRigUnit_CollectionAddItem::Result' has a wrong offset!");

// ScriptStruct ControlRig.SphericalPoseReaderDebugSettings
// 0x0010 (0x0010 - 0x0000)
struct FSphericalPoseReaderDebugSettings final
{
public:
	bool                                          bDrawDebug;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDraw2D;                                           // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawLocalAxes;                                    // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A4D[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DebugScale;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DebugSegments;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DebugThickness;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSphericalPoseReaderDebugSettings) == 0x000004, "Wrong alignment on FSphericalPoseReaderDebugSettings");
static_assert(sizeof(FSphericalPoseReaderDebugSettings) == 0x000010, "Wrong size on FSphericalPoseReaderDebugSettings");
static_assert(offsetof(FSphericalPoseReaderDebugSettings, bDrawDebug) == 0x000000, "Member 'FSphericalPoseReaderDebugSettings::bDrawDebug' has a wrong offset!");
static_assert(offsetof(FSphericalPoseReaderDebugSettings, bDraw2D) == 0x000001, "Member 'FSphericalPoseReaderDebugSettings::bDraw2D' has a wrong offset!");
static_assert(offsetof(FSphericalPoseReaderDebugSettings, bDrawLocalAxes) == 0x000002, "Member 'FSphericalPoseReaderDebugSettings::bDrawLocalAxes' has a wrong offset!");
static_assert(offsetof(FSphericalPoseReaderDebugSettings, DebugScale) == 0x000004, "Member 'FSphericalPoseReaderDebugSettings::DebugScale' has a wrong offset!");
static_assert(offsetof(FSphericalPoseReaderDebugSettings, DebugSegments) == 0x000008, "Member 'FSphericalPoseReaderDebugSettings::DebugSegments' has a wrong offset!");
static_assert(offsetof(FSphericalPoseReaderDebugSettings, DebugThickness) == 0x00000C, "Member 'FSphericalPoseReaderDebugSettings::DebugThickness' has a wrong offset!");

// ScriptStruct ControlRig.ChannelMapInfo
// 0x0040 (0x0040 - 0x0000)
struct FChannelMapInfo final
{
public:
	int32                                         ControlIndex;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalChannelIndex;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChannelIndex;                                      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParentControlIndex;                                // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChannelTypeName;                                   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoesHaveSpace;                                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A4E[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SpaceChannelIndex;                                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaskIndex;                                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CategoryIndex;                                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A4F[0x8];                                     // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint32>                                ConstraintsIndex;                                  // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChannelMapInfo) == 0x000008, "Wrong alignment on FChannelMapInfo");
static_assert(sizeof(FChannelMapInfo) == 0x000040, "Wrong size on FChannelMapInfo");
static_assert(offsetof(FChannelMapInfo, ControlIndex) == 0x000000, "Member 'FChannelMapInfo::ControlIndex' has a wrong offset!");
static_assert(offsetof(FChannelMapInfo, TotalChannelIndex) == 0x000004, "Member 'FChannelMapInfo::TotalChannelIndex' has a wrong offset!");
static_assert(offsetof(FChannelMapInfo, ChannelIndex) == 0x000008, "Member 'FChannelMapInfo::ChannelIndex' has a wrong offset!");
static_assert(offsetof(FChannelMapInfo, ParentControlIndex) == 0x00000C, "Member 'FChannelMapInfo::ParentControlIndex' has a wrong offset!");
static_assert(offsetof(FChannelMapInfo, ChannelTypeName) == 0x000010, "Member 'FChannelMapInfo::ChannelTypeName' has a wrong offset!");
static_assert(offsetof(FChannelMapInfo, bDoesHaveSpace) == 0x000018, "Member 'FChannelMapInfo::bDoesHaveSpace' has a wrong offset!");
static_assert(offsetof(FChannelMapInfo, SpaceChannelIndex) == 0x00001C, "Member 'FChannelMapInfo::SpaceChannelIndex' has a wrong offset!");
static_assert(offsetof(FChannelMapInfo, MaskIndex) == 0x000020, "Member 'FChannelMapInfo::MaskIndex' has a wrong offset!");
static_assert(offsetof(FChannelMapInfo, CategoryIndex) == 0x000024, "Member 'FChannelMapInfo::CategoryIndex' has a wrong offset!");
static_assert(offsetof(FChannelMapInfo, ConstraintsIndex) == 0x000030, "Member 'FChannelMapInfo::ConstraintsIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_ItemBase
// 0x0000 (0x0008 - 0x0008)
struct FRigUnit_ItemBase : public FRigUnit
{
};
static_assert(alignof(FRigUnit_ItemBase) == 0x000008, "Wrong alignment on FRigUnit_ItemBase");
static_assert(sizeof(FRigUnit_ItemBase) == 0x000008, "Wrong size on FRigUnit_ItemBase");

// ScriptStruct ControlRig.RigUnit_ItemTypeNotEquals
// 0x0020 (0x0028 - 0x0008)
struct FRigUnit_ItemTypeNotEquals final : public FRigUnit_ItemBase
{
public:
	struct FRigElementKey                         A;                                                 // 0x0008(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         B;                                                 // 0x0014(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A50[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_ItemTypeNotEquals) == 0x000008, "Wrong alignment on FRigUnit_ItemTypeNotEquals");
static_assert(sizeof(FRigUnit_ItemTypeNotEquals) == 0x000028, "Wrong size on FRigUnit_ItemTypeNotEquals");
static_assert(offsetof(FRigUnit_ItemTypeNotEquals, A) == 0x000008, "Member 'FRigUnit_ItemTypeNotEquals::A' has a wrong offset!");
static_assert(offsetof(FRigUnit_ItemTypeNotEquals, B) == 0x000014, "Member 'FRigUnit_ItemTypeNotEquals::B' has a wrong offset!");
static_assert(offsetof(FRigUnit_ItemTypeNotEquals, Result) == 0x000020, "Member 'FRigUnit_ItemTypeNotEquals::Result' has a wrong offset!");

// ScriptStruct ControlRig.MovieSceneControlRigParameterTemplate
// 0x0040 (0x00C0 - 0x0080)
struct FMovieSceneControlRigParameterTemplate final : public FMovieSceneParameterSectionTemplate
{
public:
	TArray<struct FEnumParameterNameAndCurve>     Enums;                                             // 0x0080(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FIntegerParameterNameAndCurve>  Integers;                                          // 0x0090(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FSpaceControlNameAndChannel>    Spaces;                                            // 0x00A0(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FConstraintAndActiveChannel>    Constraints;                                       // 0x00B0(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FMovieSceneControlRigParameterTemplate) == 0x000008, "Wrong alignment on FMovieSceneControlRigParameterTemplate");
static_assert(sizeof(FMovieSceneControlRigParameterTemplate) == 0x0000C0, "Wrong size on FMovieSceneControlRigParameterTemplate");
static_assert(offsetof(FMovieSceneControlRigParameterTemplate, Enums) == 0x000080, "Member 'FMovieSceneControlRigParameterTemplate::Enums' has a wrong offset!");
static_assert(offsetof(FMovieSceneControlRigParameterTemplate, Integers) == 0x000090, "Member 'FMovieSceneControlRigParameterTemplate::Integers' has a wrong offset!");
static_assert(offsetof(FMovieSceneControlRigParameterTemplate, Spaces) == 0x0000A0, "Member 'FMovieSceneControlRigParameterTemplate::Spaces' has a wrong offset!");
static_assert(offsetof(FMovieSceneControlRigParameterTemplate, Constraints) == 0x0000B0, "Member 'FMovieSceneControlRigParameterTemplate::Constraints' has a wrong offset!");

// ScriptStruct ControlRig.ControlRotationOrder
// 0x0002 (0x0002 - 0x0000)
struct FControlRotationOrder final
{
public:
	EEulerRotationOrder                           RotationOrder;                                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideSetting;                                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FControlRotationOrder) == 0x000001, "Wrong alignment on FControlRotationOrder");
static_assert(sizeof(FControlRotationOrder) == 0x000002, "Wrong size on FControlRotationOrder");
static_assert(offsetof(FControlRotationOrder, RotationOrder) == 0x000000, "Member 'FControlRotationOrder::RotationOrder' has a wrong offset!");
static_assert(offsetof(FControlRotationOrder, bOverrideSetting) == 0x000001, "Member 'FControlRotationOrder::bOverrideSetting' has a wrong offset!");

// ScriptStruct ControlRig.ControlRigSettingsPerPinBool
// 0x0050 (0x0050 - 0x0000)
struct FControlRigSettingsPerPinBool final
{
public:
	TMap<class FString, bool>                     Values;                                            // 0x0000(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FControlRigSettingsPerPinBool) == 0x000008, "Wrong alignment on FControlRigSettingsPerPinBool");
static_assert(sizeof(FControlRigSettingsPerPinBool) == 0x000050, "Wrong size on FControlRigSettingsPerPinBool");
static_assert(offsetof(FControlRigSettingsPerPinBool, Values) == 0x000000, "Member 'FControlRigSettingsPerPinBool::Values' has a wrong offset!");

// ScriptStruct ControlRig.RigControlCopy
// 0x0230 (0x0230 - 0x0000)
struct FRigControlCopy final
{
public:
	uint8                                         Pad_2A51[0x10];                                    // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Name;                                              // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigControlType                               ControlType;                                       // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A52[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigControlValue                       Value;                                             // 0x001C(0x0084)(NoDestructor, NativeAccessSpecifierPublic)
	struct FRigElementKey                         ParentKey;                                         // 0x00A0(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A53[0x4];                                     // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OffsetTransform;                                   // 0x00B0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             ParentTransform;                                   // 0x0110(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             LocalTransform;                                    // 0x0170(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             GlobalTransform;                                   // 0x01D0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigControlCopy) == 0x000010, "Wrong alignment on FRigControlCopy");
static_assert(sizeof(FRigControlCopy) == 0x000230, "Wrong size on FRigControlCopy");
static_assert(offsetof(FRigControlCopy, Name) == 0x000010, "Member 'FRigControlCopy::Name' has a wrong offset!");
static_assert(offsetof(FRigControlCopy, ControlType) == 0x000018, "Member 'FRigControlCopy::ControlType' has a wrong offset!");
static_assert(offsetof(FRigControlCopy, Value) == 0x00001C, "Member 'FRigControlCopy::Value' has a wrong offset!");
static_assert(offsetof(FRigControlCopy, ParentKey) == 0x0000A0, "Member 'FRigControlCopy::ParentKey' has a wrong offset!");
static_assert(offsetof(FRigControlCopy, OffsetTransform) == 0x0000B0, "Member 'FRigControlCopy::OffsetTransform' has a wrong offset!");
static_assert(offsetof(FRigControlCopy, ParentTransform) == 0x000110, "Member 'FRigControlCopy::ParentTransform' has a wrong offset!");
static_assert(offsetof(FRigControlCopy, LocalTransform) == 0x000170, "Member 'FRigControlCopy::LocalTransform' has a wrong offset!");
static_assert(offsetof(FRigControlCopy, GlobalTransform) == 0x0001D0, "Member 'FRigControlCopy::GlobalTransform' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_AddBoneTransform
// 0x00A0 (0x0200 - 0x0160)
struct FRigUnit_AddBoneTransform final : public FRigUnitMutable
{
public:
	class FName                                   bone;                                              // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A54[0x8];                                     // 0x0168(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0170(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPostMultiply;                                     // 0x01D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x01D5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A55[0x2];                                     // 0x01D6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCachedRigElement                      CachedBone;                                        // 0x01D8(0x0020)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A56[0x8];                                     // 0x01F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_AddBoneTransform) == 0x000010, "Wrong alignment on FRigUnit_AddBoneTransform");
static_assert(sizeof(FRigUnit_AddBoneTransform) == 0x000200, "Wrong size on FRigUnit_AddBoneTransform");
static_assert(offsetof(FRigUnit_AddBoneTransform, bone) == 0x000160, "Member 'FRigUnit_AddBoneTransform::bone' has a wrong offset!");
static_assert(offsetof(FRigUnit_AddBoneTransform, Transform) == 0x000170, "Member 'FRigUnit_AddBoneTransform::Transform' has a wrong offset!");
static_assert(offsetof(FRigUnit_AddBoneTransform, Weight) == 0x0001D0, "Member 'FRigUnit_AddBoneTransform::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_AddBoneTransform, bPostMultiply) == 0x0001D4, "Member 'FRigUnit_AddBoneTransform::bPostMultiply' has a wrong offset!");
static_assert(offsetof(FRigUnit_AddBoneTransform, bPropagateToChildren) == 0x0001D5, "Member 'FRigUnit_AddBoneTransform::bPropagateToChildren' has a wrong offset!");
static_assert(offsetof(FRigUnit_AddBoneTransform, CachedBone) == 0x0001D8, "Member 'FRigUnit_AddBoneTransform::CachedBone' has a wrong offset!");

// ScriptStruct ControlRig.ControlRigControlPose
// 0x0060 (0x0060 - 0x0000)
struct FControlRigControlPose final
{
public:
	TArray<struct FRigControlCopy>                CopyOfControls;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A57[0x50];                                    // 0x0010(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FControlRigControlPose) == 0x000008, "Wrong alignment on FControlRigControlPose");
static_assert(sizeof(FControlRigControlPose) == 0x000060, "Wrong size on FControlRigControlPose");
static_assert(offsetof(FControlRigControlPose, CopyOfControls) == 0x000000, "Member 'FControlRigControlPose::CopyOfControls' has a wrong offset!");

// ScriptStruct ControlRig.RigDispatchFactory
// 0x0000 (0x0070 - 0x0070)
struct FRigDispatchFactory : public FRigVMDispatchFactory
{
};
static_assert(alignof(FRigDispatchFactory) == 0x000008, "Wrong alignment on FRigDispatchFactory");
static_assert(sizeof(FRigDispatchFactory) == 0x000070, "Wrong size on FRigDispatchFactory");

// ScriptStruct ControlRig.SphericalRegion
// 0x0014 (0x0014 - 0x0000)
struct alignas(0x04) FSphericalRegion final
{
public:
	uint8                                         Pad_2A58[0x14];                                    // 0x0000(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSphericalRegion) == 0x000004, "Wrong alignment on FSphericalRegion");
static_assert(sizeof(FSphericalRegion) == 0x000014, "Wrong size on FSphericalRegion");

// ScriptStruct ControlRig.RigUnit_ItemNotEquals
// 0x0020 (0x0028 - 0x0008)
struct FRigUnit_ItemNotEquals final : public FRigUnit_ItemBase
{
public:
	struct FRigElementKey                         A;                                                 // 0x0008(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         B;                                                 // 0x0014(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A59[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_ItemNotEquals) == 0x000008, "Wrong alignment on FRigUnit_ItemNotEquals");
static_assert(sizeof(FRigUnit_ItemNotEquals) == 0x000028, "Wrong size on FRigUnit_ItemNotEquals");
static_assert(offsetof(FRigUnit_ItemNotEquals, A) == 0x000008, "Member 'FRigUnit_ItemNotEquals::A' has a wrong offset!");
static_assert(offsetof(FRigUnit_ItemNotEquals, B) == 0x000014, "Member 'FRigUnit_ItemNotEquals::B' has a wrong offset!");
static_assert(offsetof(FRigUnit_ItemNotEquals, Result) == 0x000020, "Member 'FRigUnit_ItemNotEquals::Result' has a wrong offset!");

// ScriptStruct ControlRig.RigDispatch_AnimAttributeBase
// 0x0030 (0x00A0 - 0x0070)
struct FRigDispatch_AnimAttributeBase : public FRigDispatchFactory
{
public:
	uint8                                         Pad_2A5A[0x30];                                    // 0x0070(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigDispatch_AnimAttributeBase) == 0x000008, "Wrong alignment on FRigDispatch_AnimAttributeBase");
static_assert(sizeof(FRigDispatch_AnimAttributeBase) == 0x0000A0, "Wrong size on FRigDispatch_AnimAttributeBase");

// ScriptStruct ControlRig.ConstraintTarget
// 0x0070 (0x0070 - 0x0000)
struct FConstraintTarget final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMaintainOffset;                                   // 0x0064(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransformFilter                       Filter;                                            // 0x0065(0x0009)(Edit, BlueprintVisible, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A5B[0x2];                                     // 0x006E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConstraintTarget) == 0x000010, "Wrong alignment on FConstraintTarget");
static_assert(sizeof(FConstraintTarget) == 0x000070, "Wrong size on FConstraintTarget");
static_assert(offsetof(FConstraintTarget, Transform) == 0x000000, "Member 'FConstraintTarget::Transform' has a wrong offset!");
static_assert(offsetof(FConstraintTarget, Weight) == 0x000060, "Member 'FConstraintTarget::Weight' has a wrong offset!");
static_assert(offsetof(FConstraintTarget, bMaintainOffset) == 0x000064, "Member 'FConstraintTarget::bMaintainOffset' has a wrong offset!");
static_assert(offsetof(FConstraintTarget, Filter) == 0x000065, "Member 'FConstraintTarget::Filter' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_TransformConstraint_WorkData
// 0x0060 (0x0060 - 0x0000)
struct FRigUnit_TransformConstraint_WorkData final
{
public:
	TArray<struct FConstraintData>                ConstraintData;                                    // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<int32, int32>                            ConstraintDataToTargets;                           // 0x0010(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_TransformConstraint_WorkData) == 0x000008, "Wrong alignment on FRigUnit_TransformConstraint_WorkData");
static_assert(sizeof(FRigUnit_TransformConstraint_WorkData) == 0x000060, "Wrong size on FRigUnit_TransformConstraint_WorkData");
static_assert(offsetof(FRigUnit_TransformConstraint_WorkData, ConstraintData) == 0x000000, "Member 'FRigUnit_TransformConstraint_WorkData::ConstraintData' has a wrong offset!");
static_assert(offsetof(FRigUnit_TransformConstraint_WorkData, ConstraintDataToTargets) == 0x000010, "Member 'FRigUnit_TransformConstraint_WorkData::ConstraintDataToTargets' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_TransformConstraintPerItem
// 0x0100 (0x0260 - 0x0160)
struct FRigUnit_TransformConstraintPerItem final : public FRigUnit_HighlevelBaseMutable
{
public:
	struct FRigElementKey                         Item;                                              // 0x0160(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETransformSpaceMode                           BaseTransformSpace;                                // 0x016C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A5C[0x3];                                     // 0x016D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             BaseTransform;                                     // 0x0170(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         BaseItem;                                          // 0x01D0(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A5D[0x4];                                     // 0x01DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FConstraintTarget>              Targets;                                           // 0x01E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bUseInitialTransforms;                             // 0x01F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A5E[0x7];                                     // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_TransformConstraint_WorkData  WorkData;                                          // 0x01F8(0x0060)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A5F[0x8];                                     // 0x0258(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_TransformConstraintPerItem) == 0x000010, "Wrong alignment on FRigUnit_TransformConstraintPerItem");
static_assert(sizeof(FRigUnit_TransformConstraintPerItem) == 0x000260, "Wrong size on FRigUnit_TransformConstraintPerItem");
static_assert(offsetof(FRigUnit_TransformConstraintPerItem, Item) == 0x000160, "Member 'FRigUnit_TransformConstraintPerItem::Item' has a wrong offset!");
static_assert(offsetof(FRigUnit_TransformConstraintPerItem, BaseTransformSpace) == 0x00016C, "Member 'FRigUnit_TransformConstraintPerItem::BaseTransformSpace' has a wrong offset!");
static_assert(offsetof(FRigUnit_TransformConstraintPerItem, BaseTransform) == 0x000170, "Member 'FRigUnit_TransformConstraintPerItem::BaseTransform' has a wrong offset!");
static_assert(offsetof(FRigUnit_TransformConstraintPerItem, BaseItem) == 0x0001D0, "Member 'FRigUnit_TransformConstraintPerItem::BaseItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_TransformConstraintPerItem, Targets) == 0x0001E0, "Member 'FRigUnit_TransformConstraintPerItem::Targets' has a wrong offset!");
static_assert(offsetof(FRigUnit_TransformConstraintPerItem, bUseInitialTransforms) == 0x0001F0, "Member 'FRigUnit_TransformConstraintPerItem::bUseInitialTransforms' has a wrong offset!");
static_assert(offsetof(FRigUnit_TransformConstraintPerItem, WorkData) == 0x0001F8, "Member 'FRigUnit_TransformConstraintPerItem::WorkData' has a wrong offset!");

// ScriptStruct ControlRig.RigDispatch_GetAnimAttribute
// 0x0000 (0x00A0 - 0x00A0)
struct FRigDispatch_GetAnimAttribute final : public FRigDispatch_AnimAttributeBase
{
};
static_assert(alignof(FRigDispatch_GetAnimAttribute) == 0x000008, "Wrong alignment on FRigDispatch_GetAnimAttribute");
static_assert(sizeof(FRigDispatch_GetAnimAttribute) == 0x0000A0, "Wrong size on FRigDispatch_GetAnimAttribute");

// ScriptStruct ControlRig.RigUnit_HierarchyAddControlFloat_LimitSettings
// 0x0010 (0x0010 - 0x0000)
struct FRigUnit_HierarchyAddControlFloat_LimitSettings final
{
public:
	struct FRigControlLimitEnabled                Limit;                                             // 0x0000(0x0002)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A60[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinValue;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxValue;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawLimits;                                       // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A61[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_HierarchyAddControlFloat_LimitSettings) == 0x000004, "Wrong alignment on FRigUnit_HierarchyAddControlFloat_LimitSettings");
static_assert(sizeof(FRigUnit_HierarchyAddControlFloat_LimitSettings) == 0x000010, "Wrong size on FRigUnit_HierarchyAddControlFloat_LimitSettings");
static_assert(offsetof(FRigUnit_HierarchyAddControlFloat_LimitSettings, Limit) == 0x000000, "Member 'FRigUnit_HierarchyAddControlFloat_LimitSettings::Limit' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControlFloat_LimitSettings, MinValue) == 0x000004, "Member 'FRigUnit_HierarchyAddControlFloat_LimitSettings::MinValue' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControlFloat_LimitSettings, MaxValue) == 0x000008, "Member 'FRigUnit_HierarchyAddControlFloat_LimitSettings::MaxValue' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControlFloat_LimitSettings, bDrawLimits) == 0x00000C, "Member 'FRigUnit_HierarchyAddControlFloat_LimitSettings::bDrawLimits' has a wrong offset!");

// ScriptStruct ControlRig.RigDispatch_SetAnimAttribute
// 0x0000 (0x00A0 - 0x00A0)
struct FRigDispatch_SetAnimAttribute final : public FRigDispatch_AnimAttributeBase
{
};
static_assert(alignof(FRigDispatch_SetAnimAttribute) == 0x000008, "Wrong alignment on FRigDispatch_SetAnimAttribute");
static_assert(sizeof(FRigDispatch_SetAnimAttribute) == 0x0000A0, "Wrong size on FRigDispatch_SetAnimAttribute");

// ScriptStruct ControlRig.RigUnit_SphereTraceByTraceChannel
// 0x0070 (0x0078 - 0x0008)
struct FRigUnit_SphereTraceByTraceChannel final : public FRigUnit
{
public:
	struct FVector                                Start;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETraceTypeQuery                               TraceChannel;                                      // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A62[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Radius;                                            // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHit;                                              // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A63[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitLocation;                                       // 0x0048(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitNormal;                                         // 0x0060(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_SphereTraceByTraceChannel) == 0x000008, "Wrong alignment on FRigUnit_SphereTraceByTraceChannel");
static_assert(sizeof(FRigUnit_SphereTraceByTraceChannel) == 0x000078, "Wrong size on FRigUnit_SphereTraceByTraceChannel");
static_assert(offsetof(FRigUnit_SphereTraceByTraceChannel, Start) == 0x000008, "Member 'FRigUnit_SphereTraceByTraceChannel::Start' has a wrong offset!");
static_assert(offsetof(FRigUnit_SphereTraceByTraceChannel, End) == 0x000020, "Member 'FRigUnit_SphereTraceByTraceChannel::End' has a wrong offset!");
static_assert(offsetof(FRigUnit_SphereTraceByTraceChannel, TraceChannel) == 0x000038, "Member 'FRigUnit_SphereTraceByTraceChannel::TraceChannel' has a wrong offset!");
static_assert(offsetof(FRigUnit_SphereTraceByTraceChannel, Radius) == 0x00003C, "Member 'FRigUnit_SphereTraceByTraceChannel::Radius' has a wrong offset!");
static_assert(offsetof(FRigUnit_SphereTraceByTraceChannel, bHit) == 0x000040, "Member 'FRigUnit_SphereTraceByTraceChannel::bHit' has a wrong offset!");
static_assert(offsetof(FRigUnit_SphereTraceByTraceChannel, HitLocation) == 0x000048, "Member 'FRigUnit_SphereTraceByTraceChannel::HitLocation' has a wrong offset!");
static_assert(offsetof(FRigUnit_SphereTraceByTraceChannel, HitNormal) == 0x000060, "Member 'FRigUnit_SphereTraceByTraceChannel::HitNormal' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SphereTraceByObjectTypes
// 0x0078 (0x0080 - 0x0008)
struct FRigUnit_SphereTraceByObjectTypes final : public FRigUnit
{
public:
	struct FVector                                Start;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHit;                                              // 0x004C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A64[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitLocation;                                       // 0x0050(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitNormal;                                         // 0x0068(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_SphereTraceByObjectTypes) == 0x000008, "Wrong alignment on FRigUnit_SphereTraceByObjectTypes");
static_assert(sizeof(FRigUnit_SphereTraceByObjectTypes) == 0x000080, "Wrong size on FRigUnit_SphereTraceByObjectTypes");
static_assert(offsetof(FRigUnit_SphereTraceByObjectTypes, Start) == 0x000008, "Member 'FRigUnit_SphereTraceByObjectTypes::Start' has a wrong offset!");
static_assert(offsetof(FRigUnit_SphereTraceByObjectTypes, End) == 0x000020, "Member 'FRigUnit_SphereTraceByObjectTypes::End' has a wrong offset!");
static_assert(offsetof(FRigUnit_SphereTraceByObjectTypes, ObjectTypes) == 0x000038, "Member 'FRigUnit_SphereTraceByObjectTypes::ObjectTypes' has a wrong offset!");
static_assert(offsetof(FRigUnit_SphereTraceByObjectTypes, Radius) == 0x000048, "Member 'FRigUnit_SphereTraceByObjectTypes::Radius' has a wrong offset!");
static_assert(offsetof(FRigUnit_SphereTraceByObjectTypes, bHit) == 0x00004C, "Member 'FRigUnit_SphereTraceByObjectTypes::bHit' has a wrong offset!");
static_assert(offsetof(FRigUnit_SphereTraceByObjectTypes, HitLocation) == 0x000050, "Member 'FRigUnit_SphereTraceByObjectTypes::HitLocation' has a wrong offset!");
static_assert(offsetof(FRigUnit_SphereTraceByObjectTypes, HitNormal) == 0x000068, "Member 'FRigUnit_SphereTraceByObjectTypes::HitNormal' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_HierarchyAddControlInteger_LimitSettings
// 0x0010 (0x0010 - 0x0000)
struct FRigUnit_HierarchyAddControlInteger_LimitSettings final
{
public:
	struct FRigControlLimitEnabled                Limit;                                             // 0x0000(0x0002)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A65[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinValue;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxValue;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawLimits;                                       // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A66[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_HierarchyAddControlInteger_LimitSettings) == 0x000004, "Wrong alignment on FRigUnit_HierarchyAddControlInteger_LimitSettings");
static_assert(sizeof(FRigUnit_HierarchyAddControlInteger_LimitSettings) == 0x000010, "Wrong size on FRigUnit_HierarchyAddControlInteger_LimitSettings");
static_assert(offsetof(FRigUnit_HierarchyAddControlInteger_LimitSettings, Limit) == 0x000000, "Member 'FRigUnit_HierarchyAddControlInteger_LimitSettings::Limit' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControlInteger_LimitSettings, MinValue) == 0x000004, "Member 'FRigUnit_HierarchyAddControlInteger_LimitSettings::MinValue' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControlInteger_LimitSettings, MaxValue) == 0x000008, "Member 'FRigUnit_HierarchyAddControlInteger_LimitSettings::MaxValue' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControlInteger_LimitSettings, bDrawLimits) == 0x00000C, "Member 'FRigUnit_HierarchyAddControlInteger_LimitSettings::bDrawLimits' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_Control
// 0x0178 (0x0180 - 0x0008)
struct FRigUnit_Control : public FRigUnit
{
public:
	struct FEulerTransform                        Transform;                                         // 0x0008(0x0048)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             base;                                              // 0x0050(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             InitTransform;                                     // 0x00B0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Result;                                            // 0x0110(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransformFilter                       Filter;                                            // 0x0170(0x0009)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsInitialized;                                    // 0x0179(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A67[0x6];                                     // 0x017A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_Control) == 0x000010, "Wrong alignment on FRigUnit_Control");
static_assert(sizeof(FRigUnit_Control) == 0x000180, "Wrong size on FRigUnit_Control");
static_assert(offsetof(FRigUnit_Control, Transform) == 0x000008, "Member 'FRigUnit_Control::Transform' has a wrong offset!");
static_assert(offsetof(FRigUnit_Control, base) == 0x000050, "Member 'FRigUnit_Control::base' has a wrong offset!");
static_assert(offsetof(FRigUnit_Control, InitTransform) == 0x0000B0, "Member 'FRigUnit_Control::InitTransform' has a wrong offset!");
static_assert(offsetof(FRigUnit_Control, Result) == 0x000110, "Member 'FRigUnit_Control::Result' has a wrong offset!");
static_assert(offsetof(FRigUnit_Control, Filter) == 0x000170, "Member 'FRigUnit_Control::Filter' has a wrong offset!");
static_assert(offsetof(FRigUnit_Control, bIsInitialized) == 0x000179, "Member 'FRigUnit_Control::bIsInitialized' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_Control_StaticMesh
// 0x0060 (0x01E0 - 0x0180)
struct FRigUnit_Control_StaticMesh final : public FRigUnit_Control
{
public:
	struct FTransform                             MeshTransform;                                     // 0x0180(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_Control_StaticMesh) == 0x000010, "Wrong alignment on FRigUnit_Control_StaticMesh");
static_assert(sizeof(FRigUnit_Control_StaticMesh) == 0x0001E0, "Wrong size on FRigUnit_Control_StaticMesh");
static_assert(offsetof(FRigUnit_Control_StaticMesh, MeshTransform) == 0x000180, "Member 'FRigUnit_Control_StaticMesh::MeshTransform' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_TransformConstraint
// 0x00F0 (0x0250 - 0x0160)
struct FRigUnit_TransformConstraint final : public FRigUnit_HighlevelBaseMutable
{
public:
	class FName                                   bone;                                              // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETransformSpaceMode                           BaseTransformSpace;                                // 0x0168(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A68[0x7];                                     // 0x0169(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             BaseTransform;                                     // 0x0170(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BaseBone;                                          // 0x01D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FConstraintTarget>              Targets;                                           // 0x01D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bUseInitialTransforms;                             // 0x01E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A69[0x7];                                     // 0x01E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_TransformConstraint_WorkData  WorkData;                                          // 0x01F0(0x0060)(Transient, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FRigUnit_TransformConstraint) == 0x000010, "Wrong alignment on FRigUnit_TransformConstraint");
static_assert(sizeof(FRigUnit_TransformConstraint) == 0x000250, "Wrong size on FRigUnit_TransformConstraint");
static_assert(offsetof(FRigUnit_TransformConstraint, bone) == 0x000160, "Member 'FRigUnit_TransformConstraint::bone' has a wrong offset!");
static_assert(offsetof(FRigUnit_TransformConstraint, BaseTransformSpace) == 0x000168, "Member 'FRigUnit_TransformConstraint::BaseTransformSpace' has a wrong offset!");
static_assert(offsetof(FRigUnit_TransformConstraint, BaseTransform) == 0x000170, "Member 'FRigUnit_TransformConstraint::BaseTransform' has a wrong offset!");
static_assert(offsetof(FRigUnit_TransformConstraint, BaseBone) == 0x0001D0, "Member 'FRigUnit_TransformConstraint::BaseBone' has a wrong offset!");
static_assert(offsetof(FRigUnit_TransformConstraint, Targets) == 0x0001D8, "Member 'FRigUnit_TransformConstraint::Targets' has a wrong offset!");
static_assert(offsetof(FRigUnit_TransformConstraint, bUseInitialTransforms) == 0x0001E8, "Member 'FRigUnit_TransformConstraint::bUseInitialTransforms' has a wrong offset!");
static_assert(offsetof(FRigUnit_TransformConstraint, WorkData) == 0x0001F0, "Member 'FRigUnit_TransformConstraint::WorkData' has a wrong offset!");

// ScriptStruct ControlRig.RigDispatch_GetUserData
// 0x0000 (0x0070 - 0x0070)
struct FRigDispatch_GetUserData final : public FRigDispatchFactory
{
};
static_assert(alignof(FRigDispatch_GetUserData) == 0x000008, "Wrong alignment on FRigDispatch_GetUserData");
static_assert(sizeof(FRigDispatch_GetUserData) == 0x000070, "Wrong size on FRigDispatch_GetUserData");

// ScriptStruct ControlRig.RigUnit_ScaleConstraint
// 0x0030 (0x0190 - 0x0160)
struct FRigUnit_ScaleConstraint final : public FRigUnit_HighlevelBaseMutable
{
public:
	struct FRigElementKey                         Child;                                             // 0x0160(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMaintainOffset;                                   // 0x016C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFilterOptionPerAxis                   Filter;                                            // 0x016D(0x0003)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FConstraintParent>              Parents;                                           // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A6A[0xC];                                     // 0x0184(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_ScaleConstraint) == 0x000010, "Wrong alignment on FRigUnit_ScaleConstraint");
static_assert(sizeof(FRigUnit_ScaleConstraint) == 0x000190, "Wrong size on FRigUnit_ScaleConstraint");
static_assert(offsetof(FRigUnit_ScaleConstraint, Child) == 0x000160, "Member 'FRigUnit_ScaleConstraint::Child' has a wrong offset!");
static_assert(offsetof(FRigUnit_ScaleConstraint, bMaintainOffset) == 0x00016C, "Member 'FRigUnit_ScaleConstraint::bMaintainOffset' has a wrong offset!");
static_assert(offsetof(FRigUnit_ScaleConstraint, Filter) == 0x00016D, "Member 'FRigUnit_ScaleConstraint::Filter' has a wrong offset!");
static_assert(offsetof(FRigUnit_ScaleConstraint, Parents) == 0x000170, "Member 'FRigUnit_ScaleConstraint::Parents' has a wrong offset!");
static_assert(offsetof(FRigUnit_ScaleConstraint, Weight) == 0x000180, "Member 'FRigUnit_ScaleConstraint::Weight' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SetupShapeLibraryFromUserData
// 0x0040 (0x01A0 - 0x0160)
struct FRigUnit_SetupShapeLibraryFromUserData final : public FRigUnitMutable
{
public:
	class FString                                 Namespace;                                         // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Path;                                              // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LibraryName;                                       // 0x0180(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReplaceExisting;                                   // 0x0190(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LogShapeLibraries;                                 // 0x0191(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A6B[0xE];                                     // 0x0192(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_SetupShapeLibraryFromUserData) == 0x000010, "Wrong alignment on FRigUnit_SetupShapeLibraryFromUserData");
static_assert(sizeof(FRigUnit_SetupShapeLibraryFromUserData) == 0x0001A0, "Wrong size on FRigUnit_SetupShapeLibraryFromUserData");
static_assert(offsetof(FRigUnit_SetupShapeLibraryFromUserData, Namespace) == 0x000160, "Member 'FRigUnit_SetupShapeLibraryFromUserData::Namespace' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetupShapeLibraryFromUserData, Path) == 0x000170, "Member 'FRigUnit_SetupShapeLibraryFromUserData::Path' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetupShapeLibraryFromUserData, LibraryName) == 0x000180, "Member 'FRigUnit_SetupShapeLibraryFromUserData::LibraryName' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetupShapeLibraryFromUserData, ReplaceExisting) == 0x000190, "Member 'FRigUnit_SetupShapeLibraryFromUserData::ReplaceExisting' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetupShapeLibraryFromUserData, LogShapeLibraries) == 0x000191, "Member 'FRigUnit_SetupShapeLibraryFromUserData::LogShapeLibraries' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_HierarchyAddControlVector2D_LimitSettings
// 0x0030 (0x0030 - 0x0000)
struct FRigUnit_HierarchyAddControlVector2D_LimitSettings final
{
public:
	struct FRigControlLimitEnabled                LimitX;                                            // 0x0000(0x0002)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRigControlLimitEnabled                LimitY;                                            // 0x0002(0x0002)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A6C[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              MinValue;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MaxValue;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawLimits;                                       // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A6D[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_HierarchyAddControlVector2D_LimitSettings) == 0x000008, "Wrong alignment on FRigUnit_HierarchyAddControlVector2D_LimitSettings");
static_assert(sizeof(FRigUnit_HierarchyAddControlVector2D_LimitSettings) == 0x000030, "Wrong size on FRigUnit_HierarchyAddControlVector2D_LimitSettings");
static_assert(offsetof(FRigUnit_HierarchyAddControlVector2D_LimitSettings, LimitX) == 0x000000, "Member 'FRigUnit_HierarchyAddControlVector2D_LimitSettings::LimitX' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControlVector2D_LimitSettings, LimitY) == 0x000002, "Member 'FRigUnit_HierarchyAddControlVector2D_LimitSettings::LimitY' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControlVector2D_LimitSettings, MinValue) == 0x000008, "Member 'FRigUnit_HierarchyAddControlVector2D_LimitSettings::MinValue' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControlVector2D_LimitSettings, MaxValue) == 0x000018, "Member 'FRigUnit_HierarchyAddControlVector2D_LimitSettings::MaxValue' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControlVector2D_LimitSettings, bDrawLimits) == 0x000028, "Member 'FRigUnit_HierarchyAddControlVector2D_LimitSettings::bDrawLimits' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_HierarchyAddControlVector2D_Settings
// 0x00F0 (0x0100 - 0x0010)
struct FRigUnit_HierarchyAddControlVector2D_Settings final : public FRigUnit_HierarchyAddControl_Settings
{
public:
	ERigControlAxis                               PrimaryAxis;                                       // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A6E[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_HierarchyAddControlVector2D_LimitSettings Limits;                                            // 0x0018(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A6F[0x8];                                     // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_HierarchyAddControl_ShapeSettings Shape;                                             // 0x0050(0x0080)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRigUnit_HierarchyAddControl_ProxySettings Proxy;                                             // 0x00D0(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<ERigControlTransformChannel>           FilteredChannels;                                  // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_HierarchyAddControlVector2D_Settings) == 0x000010, "Wrong alignment on FRigUnit_HierarchyAddControlVector2D_Settings");
static_assert(sizeof(FRigUnit_HierarchyAddControlVector2D_Settings) == 0x000100, "Wrong size on FRigUnit_HierarchyAddControlVector2D_Settings");
static_assert(offsetof(FRigUnit_HierarchyAddControlVector2D_Settings, PrimaryAxis) == 0x000010, "Member 'FRigUnit_HierarchyAddControlVector2D_Settings::PrimaryAxis' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControlVector2D_Settings, Limits) == 0x000018, "Member 'FRigUnit_HierarchyAddControlVector2D_Settings::Limits' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControlVector2D_Settings, Shape) == 0x000050, "Member 'FRigUnit_HierarchyAddControlVector2D_Settings::Shape' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControlVector2D_Settings, Proxy) == 0x0000D0, "Member 'FRigUnit_HierarchyAddControlVector2D_Settings::Proxy' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControlVector2D_Settings, FilteredChannels) == 0x0000F0, "Member 'FRigUnit_HierarchyAddControlVector2D_Settings::FilteredChannels' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_ShapeExists
// 0x0010 (0x0018 - 0x0008)
struct FRigUnit_ShapeExists final : public FRigUnit
{
public:
	class FName                                   ShapeName;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A70[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_ShapeExists) == 0x000008, "Wrong alignment on FRigUnit_ShapeExists");
static_assert(sizeof(FRigUnit_ShapeExists) == 0x000018, "Wrong size on FRigUnit_ShapeExists");
static_assert(offsetof(FRigUnit_ShapeExists, ShapeName) == 0x000008, "Member 'FRigUnit_ShapeExists::ShapeName' has a wrong offset!");
static_assert(offsetof(FRigUnit_ShapeExists, Result) == 0x000010, "Member 'FRigUnit_ShapeExists::Result' has a wrong offset!");

// ScriptStruct ControlRig.RegionScaleFactors
// 0x0010 (0x0010 - 0x0000)
struct FRegionScaleFactors final
{
public:
	float                                         PositiveWidth;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NegativeWidth;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositiveHeight;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NegativeHeight;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRegionScaleFactors) == 0x000004, "Wrong alignment on FRegionScaleFactors");
static_assert(sizeof(FRegionScaleFactors) == 0x000010, "Wrong size on FRegionScaleFactors");
static_assert(offsetof(FRegionScaleFactors, PositiveWidth) == 0x000000, "Member 'FRegionScaleFactors::PositiveWidth' has a wrong offset!");
static_assert(offsetof(FRegionScaleFactors, NegativeWidth) == 0x000004, "Member 'FRegionScaleFactors::NegativeWidth' has a wrong offset!");
static_assert(offsetof(FRegionScaleFactors, PositiveHeight) == 0x000008, "Member 'FRegionScaleFactors::PositiveHeight' has a wrong offset!");
static_assert(offsetof(FRegionScaleFactors, NegativeHeight) == 0x00000C, "Member 'FRegionScaleFactors::NegativeHeight' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_DebugBezier
// 0x0100 (0x0200 - 0x0100)
struct FRigUnit_DebugBezier final : public FRigVMFunction_DebugBaseMutable
{
public:
	struct FRigVMFourPointBezier                  Bezier;                                            // 0x0100(0x0060)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MinimumU;                                          // 0x0160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaximumU;                                          // 0x0164(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0168(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Detail;                                            // 0x017C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Space;                                             // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A71[0x8];                                     // 0x0188(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             WorldOffset;                                       // 0x0190(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x01F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A72[0xF];                                     // 0x01F1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_DebugBezier) == 0x000010, "Wrong alignment on FRigUnit_DebugBezier");
static_assert(sizeof(FRigUnit_DebugBezier) == 0x000200, "Wrong size on FRigUnit_DebugBezier");
static_assert(offsetof(FRigUnit_DebugBezier, Bezier) == 0x000100, "Member 'FRigUnit_DebugBezier::Bezier' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugBezier, MinimumU) == 0x000160, "Member 'FRigUnit_DebugBezier::MinimumU' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugBezier, MaximumU) == 0x000164, "Member 'FRigUnit_DebugBezier::MaximumU' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugBezier, Color) == 0x000168, "Member 'FRigUnit_DebugBezier::Color' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugBezier, Thickness) == 0x000178, "Member 'FRigUnit_DebugBezier::Thickness' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugBezier, Detail) == 0x00017C, "Member 'FRigUnit_DebugBezier::Detail' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugBezier, Space) == 0x000180, "Member 'FRigUnit_DebugBezier::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugBezier, WorldOffset) == 0x000190, "Member 'FRigUnit_DebugBezier::WorldOffset' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugBezier, bEnabled) == 0x0001F0, "Member 'FRigUnit_DebugBezier::bEnabled' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_HierarchyAddAnimationChannelBool
// 0x0010 (0x0190 - 0x0180)
struct FRigUnit_HierarchyAddAnimationChannelBool final : public FRigUnit_HierarchyAddElement
{
public:
	bool                                          InitialValue;                                      // 0x0180(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MinimumValue;                                      // 0x0181(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MaximumValue;                                      // 0x0182(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A73[0xD];                                     // 0x0183(0x000D)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_HierarchyAddAnimationChannelBool) == 0x000010, "Wrong alignment on FRigUnit_HierarchyAddAnimationChannelBool");
static_assert(sizeof(FRigUnit_HierarchyAddAnimationChannelBool) == 0x000190, "Wrong size on FRigUnit_HierarchyAddAnimationChannelBool");
static_assert(offsetof(FRigUnit_HierarchyAddAnimationChannelBool, InitialValue) == 0x000180, "Member 'FRigUnit_HierarchyAddAnimationChannelBool::InitialValue' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddAnimationChannelBool, MinimumValue) == 0x000181, "Member 'FRigUnit_HierarchyAddAnimationChannelBool::MinimumValue' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddAnimationChannelBool, MaximumValue) == 0x000182, "Member 'FRigUnit_HierarchyAddAnimationChannelBool::MaximumValue' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_DebugBezierItemSpace
// 0x0100 (0x0200 - 0x0100)
struct FRigUnit_DebugBezierItemSpace final : public FRigVMFunction_DebugBaseMutable
{
public:
	struct FRigVMFourPointBezier                  Bezier;                                            // 0x0100(0x0060)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MinimumU;                                          // 0x0160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaximumU;                                          // 0x0164(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0168(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Detail;                                            // 0x017C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         Space;                                             // 0x0180(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A74[0x4];                                     // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             WorldOffset;                                       // 0x0190(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x01F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A75[0xF];                                     // 0x01F1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_DebugBezierItemSpace) == 0x000010, "Wrong alignment on FRigUnit_DebugBezierItemSpace");
static_assert(sizeof(FRigUnit_DebugBezierItemSpace) == 0x000200, "Wrong size on FRigUnit_DebugBezierItemSpace");
static_assert(offsetof(FRigUnit_DebugBezierItemSpace, Bezier) == 0x000100, "Member 'FRigUnit_DebugBezierItemSpace::Bezier' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugBezierItemSpace, MinimumU) == 0x000160, "Member 'FRigUnit_DebugBezierItemSpace::MinimumU' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugBezierItemSpace, MaximumU) == 0x000164, "Member 'FRigUnit_DebugBezierItemSpace::MaximumU' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugBezierItemSpace, Color) == 0x000168, "Member 'FRigUnit_DebugBezierItemSpace::Color' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugBezierItemSpace, Thickness) == 0x000178, "Member 'FRigUnit_DebugBezierItemSpace::Thickness' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugBezierItemSpace, Detail) == 0x00017C, "Member 'FRigUnit_DebugBezierItemSpace::Detail' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugBezierItemSpace, Space) == 0x000180, "Member 'FRigUnit_DebugBezierItemSpace::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugBezierItemSpace, WorldOffset) == 0x000190, "Member 'FRigUnit_DebugBezierItemSpace::WorldOffset' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugBezierItemSpace, bEnabled) == 0x0001F0, "Member 'FRigUnit_DebugBezierItemSpace::bEnabled' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_DebugHierarchy
// 0x01E8 (0x01F0 - 0x0008)
struct FRigUnit_DebugHierarchy final : public FRigVMFunction_DebugBase
{
public:
	uint8                                         Pad_2A76[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FControlRigExecuteContext              ExecuteContext;                                    // 0x0010(0x0150)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0164(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A77[0x8];                                     // 0x0178(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             WorldOffset;                                       // 0x0180(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x01E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A78[0xF];                                     // 0x01E1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_DebugHierarchy) == 0x000010, "Wrong alignment on FRigUnit_DebugHierarchy");
static_assert(sizeof(FRigUnit_DebugHierarchy) == 0x0001F0, "Wrong size on FRigUnit_DebugHierarchy");
static_assert(offsetof(FRigUnit_DebugHierarchy, ExecuteContext) == 0x000010, "Member 'FRigUnit_DebugHierarchy::ExecuteContext' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugHierarchy, Scale) == 0x000160, "Member 'FRigUnit_DebugHierarchy::Scale' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugHierarchy, Color) == 0x000164, "Member 'FRigUnit_DebugHierarchy::Color' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugHierarchy, Thickness) == 0x000174, "Member 'FRigUnit_DebugHierarchy::Thickness' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugHierarchy, WorldOffset) == 0x000180, "Member 'FRigUnit_DebugHierarchy::WorldOffset' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugHierarchy, bEnabled) == 0x0001E0, "Member 'FRigUnit_DebugHierarchy::bEnabled' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_DebugLine
// 0x00C0 (0x0220 - 0x0160)
struct FRigUnit_DebugLine final : public FRigUnit_DebugBaseMutable
{
public:
	struct FVector                                A;                                                 // 0x0160(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                B;                                                 // 0x0178(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0190(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x01A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Space;                                             // 0x01A4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A79[0x4];                                     // 0x01AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             WorldOffset;                                       // 0x01B0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0210(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A7A[0xF];                                     // 0x0211(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_DebugLine) == 0x000010, "Wrong alignment on FRigUnit_DebugLine");
static_assert(sizeof(FRigUnit_DebugLine) == 0x000220, "Wrong size on FRigUnit_DebugLine");
static_assert(offsetof(FRigUnit_DebugLine, A) == 0x000160, "Member 'FRigUnit_DebugLine::A' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugLine, B) == 0x000178, "Member 'FRigUnit_DebugLine::B' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugLine, Color) == 0x000190, "Member 'FRigUnit_DebugLine::Color' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugLine, Thickness) == 0x0001A0, "Member 'FRigUnit_DebugLine::Thickness' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugLine, Space) == 0x0001A4, "Member 'FRigUnit_DebugLine::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugLine, WorldOffset) == 0x0001B0, "Member 'FRigUnit_DebugLine::WorldOffset' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugLine, bEnabled) == 0x000210, "Member 'FRigUnit_DebugLine::bEnabled' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_RotationConstraint_AdvancedSettings
// 0x0002 (0x0002 - 0x0000)
struct FRigUnit_RotationConstraint_AdvancedSettings final
{
public:
	EConstraintInterpType                         InterpolationType;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEulerRotationOrder                           RotationOrderForFilter;                            // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_RotationConstraint_AdvancedSettings) == 0x000001, "Wrong alignment on FRigUnit_RotationConstraint_AdvancedSettings");
static_assert(sizeof(FRigUnit_RotationConstraint_AdvancedSettings) == 0x000002, "Wrong size on FRigUnit_RotationConstraint_AdvancedSettings");
static_assert(offsetof(FRigUnit_RotationConstraint_AdvancedSettings, InterpolationType) == 0x000000, "Member 'FRigUnit_RotationConstraint_AdvancedSettings::InterpolationType' has a wrong offset!");
static_assert(offsetof(FRigUnit_RotationConstraint_AdvancedSettings, RotationOrderForFilter) == 0x000001, "Member 'FRigUnit_RotationConstraint_AdvancedSettings::RotationOrderForFilter' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_RotationConstraintLocalSpaceOffset
// 0x0060 (0x01C0 - 0x0160)
struct FRigUnit_RotationConstraintLocalSpaceOffset final : public FRigUnit_HighlevelBaseMutable
{
public:
	struct FRigElementKey                         Child;                                             // 0x0160(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMaintainOffset;                                   // 0x016C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFilterOptionPerAxis                   Filter;                                            // 0x016D(0x0003)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FConstraintParent>              Parents;                                           // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FRigUnit_RotationConstraint_AdvancedSettings AdvancedSettings;                                  // 0x0180(0x0002)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A7B[0x2];                                     // 0x0182(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Weight;                                            // 0x0184(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      ChildCache;                                        // 0x0188(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCachedRigElement>              ParentCaches;                                      // 0x01A8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A7C[0x8];                                     // 0x01B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_RotationConstraintLocalSpaceOffset) == 0x000010, "Wrong alignment on FRigUnit_RotationConstraintLocalSpaceOffset");
static_assert(sizeof(FRigUnit_RotationConstraintLocalSpaceOffset) == 0x0001C0, "Wrong size on FRigUnit_RotationConstraintLocalSpaceOffset");
static_assert(offsetof(FRigUnit_RotationConstraintLocalSpaceOffset, Child) == 0x000160, "Member 'FRigUnit_RotationConstraintLocalSpaceOffset::Child' has a wrong offset!");
static_assert(offsetof(FRigUnit_RotationConstraintLocalSpaceOffset, bMaintainOffset) == 0x00016C, "Member 'FRigUnit_RotationConstraintLocalSpaceOffset::bMaintainOffset' has a wrong offset!");
static_assert(offsetof(FRigUnit_RotationConstraintLocalSpaceOffset, Filter) == 0x00016D, "Member 'FRigUnit_RotationConstraintLocalSpaceOffset::Filter' has a wrong offset!");
static_assert(offsetof(FRigUnit_RotationConstraintLocalSpaceOffset, Parents) == 0x000170, "Member 'FRigUnit_RotationConstraintLocalSpaceOffset::Parents' has a wrong offset!");
static_assert(offsetof(FRigUnit_RotationConstraintLocalSpaceOffset, AdvancedSettings) == 0x000180, "Member 'FRigUnit_RotationConstraintLocalSpaceOffset::AdvancedSettings' has a wrong offset!");
static_assert(offsetof(FRigUnit_RotationConstraintLocalSpaceOffset, Weight) == 0x000184, "Member 'FRigUnit_RotationConstraintLocalSpaceOffset::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_RotationConstraintLocalSpaceOffset, ChildCache) == 0x000188, "Member 'FRigUnit_RotationConstraintLocalSpaceOffset::ChildCache' has a wrong offset!");
static_assert(offsetof(FRigUnit_RotationConstraintLocalSpaceOffset, ParentCaches) == 0x0001A8, "Member 'FRigUnit_RotationConstraintLocalSpaceOffset::ParentCaches' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_HierarchyAddControlInteger_Settings
// 0x00C0 (0x00D0 - 0x0010)
struct FRigUnit_HierarchyAddControlInteger_Settings final : public FRigUnit_HierarchyAddControl_Settings
{
public:
	ERigControlAxis                               PrimaryAxis;                                       // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A7D[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_HierarchyAddControlInteger_LimitSettings Limits;                                            // 0x0014(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A7E[0xC];                                     // 0x0024(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_HierarchyAddControl_ShapeSettings Shape;                                             // 0x0030(0x0080)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRigUnit_HierarchyAddControl_ProxySettings Proxy;                                             // 0x00B0(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_HierarchyAddControlInteger_Settings) == 0x000010, "Wrong alignment on FRigUnit_HierarchyAddControlInteger_Settings");
static_assert(sizeof(FRigUnit_HierarchyAddControlInteger_Settings) == 0x0000D0, "Wrong size on FRigUnit_HierarchyAddControlInteger_Settings");
static_assert(offsetof(FRigUnit_HierarchyAddControlInteger_Settings, PrimaryAxis) == 0x000010, "Member 'FRigUnit_HierarchyAddControlInteger_Settings::PrimaryAxis' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControlInteger_Settings, Limits) == 0x000014, "Member 'FRigUnit_HierarchyAddControlInteger_Settings::Limits' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControlInteger_Settings, Shape) == 0x000030, "Member 'FRigUnit_HierarchyAddControlInteger_Settings::Shape' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControlInteger_Settings, Proxy) == 0x0000B0, "Member 'FRigUnit_HierarchyAddControlInteger_Settings::Proxy' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_HierarchyAddControlInteger
// 0x00D0 (0x02C0 - 0x01F0)
struct FRigUnit_HierarchyAddControlInteger final : public FRigUnit_HierarchyAddControlElement
{
public:
	int32                                         InitialValue;                                      // 0x01E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A7F[0x4];                                     // 0x01EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_HierarchyAddControlInteger_Settings Settings;                                          // 0x01F0(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_HierarchyAddControlInteger) == 0x000010, "Wrong alignment on FRigUnit_HierarchyAddControlInteger");
static_assert(sizeof(FRigUnit_HierarchyAddControlInteger) == 0x0002C0, "Wrong size on FRigUnit_HierarchyAddControlInteger");
static_assert(offsetof(FRigUnit_HierarchyAddControlInteger, InitialValue) == 0x0001E8, "Member 'FRigUnit_HierarchyAddControlInteger::InitialValue' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControlInteger, Settings) == 0x0001F0, "Member 'FRigUnit_HierarchyAddControlInteger::Settings' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_DebugLineItemSpace
// 0x00C0 (0x0220 - 0x0160)
struct FRigUnit_DebugLineItemSpace final : public FRigUnit_DebugBaseMutable
{
public:
	struct FVector                                A;                                                 // 0x0160(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                B;                                                 // 0x0178(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0190(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x01A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         Space;                                             // 0x01A4(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             WorldOffset;                                       // 0x01B0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0210(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A80[0xF];                                     // 0x0211(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_DebugLineItemSpace) == 0x000010, "Wrong alignment on FRigUnit_DebugLineItemSpace");
static_assert(sizeof(FRigUnit_DebugLineItemSpace) == 0x000220, "Wrong size on FRigUnit_DebugLineItemSpace");
static_assert(offsetof(FRigUnit_DebugLineItemSpace, A) == 0x000160, "Member 'FRigUnit_DebugLineItemSpace::A' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugLineItemSpace, B) == 0x000178, "Member 'FRigUnit_DebugLineItemSpace::B' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugLineItemSpace, Color) == 0x000190, "Member 'FRigUnit_DebugLineItemSpace::Color' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugLineItemSpace, Thickness) == 0x0001A0, "Member 'FRigUnit_DebugLineItemSpace::Thickness' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugLineItemSpace, Space) == 0x0001A4, "Member 'FRigUnit_DebugLineItemSpace::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugLineItemSpace, WorldOffset) == 0x0001B0, "Member 'FRigUnit_DebugLineItemSpace::WorldOffset' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugLineItemSpace, bEnabled) == 0x000210, "Member 'FRigUnit_DebugLineItemSpace::bEnabled' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_TwoBoneIKSimpleVectors
// 0x0078 (0x0080 - 0x0008)
struct FRigUnit_TwoBoneIKSimpleVectors final : public FRigUnit_HighlevelBase
{
public:
	struct FVector                                Root;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PoleVector;                                        // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Effector;                                          // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableStretch;                                    // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A81[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StretchStartRatio;                                 // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StretchMaximumRatio;                               // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoneALength;                                       // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoneBLength;                                       // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A82[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Elbow;                                             // 0x0068(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_TwoBoneIKSimpleVectors) == 0x000008, "Wrong alignment on FRigUnit_TwoBoneIKSimpleVectors");
static_assert(sizeof(FRigUnit_TwoBoneIKSimpleVectors) == 0x000080, "Wrong size on FRigUnit_TwoBoneIKSimpleVectors");
static_assert(offsetof(FRigUnit_TwoBoneIKSimpleVectors, Root) == 0x000008, "Member 'FRigUnit_TwoBoneIKSimpleVectors::Root' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimpleVectors, PoleVector) == 0x000020, "Member 'FRigUnit_TwoBoneIKSimpleVectors::PoleVector' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimpleVectors, Effector) == 0x000038, "Member 'FRigUnit_TwoBoneIKSimpleVectors::Effector' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimpleVectors, bEnableStretch) == 0x000050, "Member 'FRigUnit_TwoBoneIKSimpleVectors::bEnableStretch' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimpleVectors, StretchStartRatio) == 0x000054, "Member 'FRigUnit_TwoBoneIKSimpleVectors::StretchStartRatio' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimpleVectors, StretchMaximumRatio) == 0x000058, "Member 'FRigUnit_TwoBoneIKSimpleVectors::StretchMaximumRatio' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimpleVectors, BoneALength) == 0x00005C, "Member 'FRigUnit_TwoBoneIKSimpleVectors::BoneALength' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimpleVectors, BoneBLength) == 0x000060, "Member 'FRigUnit_TwoBoneIKSimpleVectors::BoneBLength' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimpleVectors, Elbow) == 0x000068, "Member 'FRigUnit_TwoBoneIKSimpleVectors::Elbow' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_DebugLineStrip
// 0x00A0 (0x0200 - 0x0160)
struct FRigUnit_DebugLineStrip final : public FRigUnit_DebugBaseMutable
{
public:
	TArray<struct FVector>                        Points;                                            // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Space;                                             // 0x0184(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A83[0x4];                                     // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             WorldOffset;                                       // 0x0190(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x01F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A84[0xF];                                     // 0x01F1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_DebugLineStrip) == 0x000010, "Wrong alignment on FRigUnit_DebugLineStrip");
static_assert(sizeof(FRigUnit_DebugLineStrip) == 0x000200, "Wrong size on FRigUnit_DebugLineStrip");
static_assert(offsetof(FRigUnit_DebugLineStrip, Points) == 0x000160, "Member 'FRigUnit_DebugLineStrip::Points' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugLineStrip, Color) == 0x000170, "Member 'FRigUnit_DebugLineStrip::Color' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugLineStrip, Thickness) == 0x000180, "Member 'FRigUnit_DebugLineStrip::Thickness' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugLineStrip, Space) == 0x000184, "Member 'FRigUnit_DebugLineStrip::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugLineStrip, WorldOffset) == 0x000190, "Member 'FRigUnit_DebugLineStrip::WorldOffset' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugLineStrip, bEnabled) == 0x0001F0, "Member 'FRigUnit_DebugLineStrip::bEnabled' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SlideChain_WorkData
// 0x0048 (0x0048 - 0x0000)
struct FRigUnit_SlideChain_WorkData final
{
public:
	float                                         ChainLength;                                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A85[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 ItemSegments;                                      // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCachedRigElement>              CachedItems;                                       // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     Transforms;                                        // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     BlendedTransforms;                                 // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_SlideChain_WorkData) == 0x000008, "Wrong alignment on FRigUnit_SlideChain_WorkData");
static_assert(sizeof(FRigUnit_SlideChain_WorkData) == 0x000048, "Wrong size on FRigUnit_SlideChain_WorkData");
static_assert(offsetof(FRigUnit_SlideChain_WorkData, ChainLength) == 0x000000, "Member 'FRigUnit_SlideChain_WorkData::ChainLength' has a wrong offset!");
static_assert(offsetof(FRigUnit_SlideChain_WorkData, ItemSegments) == 0x000008, "Member 'FRigUnit_SlideChain_WorkData::ItemSegments' has a wrong offset!");
static_assert(offsetof(FRigUnit_SlideChain_WorkData, CachedItems) == 0x000018, "Member 'FRigUnit_SlideChain_WorkData::CachedItems' has a wrong offset!");
static_assert(offsetof(FRigUnit_SlideChain_WorkData, Transforms) == 0x000028, "Member 'FRigUnit_SlideChain_WorkData::Transforms' has a wrong offset!");
static_assert(offsetof(FRigUnit_SlideChain_WorkData, BlendedTransforms) == 0x000038, "Member 'FRigUnit_SlideChain_WorkData::BlendedTransforms' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SlideChainItemArray
// 0x0060 (0x01C0 - 0x0160)
struct FRigUnit_SlideChainItemArray final : public FRigUnit_HighlevelBaseMutable
{
public:
	TArray<struct FRigElementKey>                 Items;                                             // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         SlideAmount;                                       // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x0174(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A86[0x3];                                     // 0x0175(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_SlideChain_WorkData           WorkData;                                          // 0x0178(0x0048)(Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_SlideChainItemArray) == 0x000010, "Wrong alignment on FRigUnit_SlideChainItemArray");
static_assert(sizeof(FRigUnit_SlideChainItemArray) == 0x0001C0, "Wrong size on FRigUnit_SlideChainItemArray");
static_assert(offsetof(FRigUnit_SlideChainItemArray, Items) == 0x000160, "Member 'FRigUnit_SlideChainItemArray::Items' has a wrong offset!");
static_assert(offsetof(FRigUnit_SlideChainItemArray, SlideAmount) == 0x000170, "Member 'FRigUnit_SlideChainItemArray::SlideAmount' has a wrong offset!");
static_assert(offsetof(FRigUnit_SlideChainItemArray, bPropagateToChildren) == 0x000174, "Member 'FRigUnit_SlideChainItemArray::bPropagateToChildren' has a wrong offset!");
static_assert(offsetof(FRigUnit_SlideChainItemArray, WorkData) == 0x000178, "Member 'FRigUnit_SlideChainItemArray::WorkData' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_HierarchyAddControlTransform_Settings
// 0x00C0 (0x00D0 - 0x0010)
struct FRigUnit_HierarchyAddControlTransform_Settings final : public FRigUnit_HierarchyAddControl_Settings
{
public:
	ERigVMTransformSpace                          InitialSpace;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A87[0xF];                                     // 0x0011(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_HierarchyAddControl_ShapeSettings Shape;                                             // 0x0020(0x0080)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRigUnit_HierarchyAddControl_ProxySettings Proxy;                                             // 0x00A0(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<ERigControlTransformChannel>           FilteredChannels;                                  // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_HierarchyAddControlTransform_Settings) == 0x000010, "Wrong alignment on FRigUnit_HierarchyAddControlTransform_Settings");
static_assert(sizeof(FRigUnit_HierarchyAddControlTransform_Settings) == 0x0000D0, "Wrong size on FRigUnit_HierarchyAddControlTransform_Settings");
static_assert(offsetof(FRigUnit_HierarchyAddControlTransform_Settings, InitialSpace) == 0x000010, "Member 'FRigUnit_HierarchyAddControlTransform_Settings::InitialSpace' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControlTransform_Settings, Shape) == 0x000020, "Member 'FRigUnit_HierarchyAddControlTransform_Settings::Shape' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControlTransform_Settings, Proxy) == 0x0000A0, "Member 'FRigUnit_HierarchyAddControlTransform_Settings::Proxy' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControlTransform_Settings, FilteredChannels) == 0x0000C0, "Member 'FRigUnit_HierarchyAddControlTransform_Settings::FilteredChannels' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_DebugLineStripItemSpace
// 0x00A0 (0x0200 - 0x0160)
struct FRigUnit_DebugLineStripItemSpace final : public FRigUnit_DebugBaseMutable
{
public:
	TArray<struct FVector>                        Points;                                            // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         Space;                                             // 0x0184(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             WorldOffset;                                       // 0x0190(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x01F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A88[0xF];                                     // 0x01F1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_DebugLineStripItemSpace) == 0x000010, "Wrong alignment on FRigUnit_DebugLineStripItemSpace");
static_assert(sizeof(FRigUnit_DebugLineStripItemSpace) == 0x000200, "Wrong size on FRigUnit_DebugLineStripItemSpace");
static_assert(offsetof(FRigUnit_DebugLineStripItemSpace, Points) == 0x000160, "Member 'FRigUnit_DebugLineStripItemSpace::Points' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugLineStripItemSpace, Color) == 0x000170, "Member 'FRigUnit_DebugLineStripItemSpace::Color' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugLineStripItemSpace, Thickness) == 0x000180, "Member 'FRigUnit_DebugLineStripItemSpace::Thickness' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugLineStripItemSpace, Space) == 0x000184, "Member 'FRigUnit_DebugLineStripItemSpace::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugLineStripItemSpace, WorldOffset) == 0x000190, "Member 'FRigUnit_DebugLineStripItemSpace::WorldOffset' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugLineStripItemSpace, bEnabled) == 0x0001F0, "Member 'FRigUnit_DebugLineStripItemSpace::bEnabled' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_DebugRectangle
// 0x00F0 (0x0250 - 0x0160)
struct FRigUnit_DebugRectangle final : public FRigUnit_DebugBaseMutable
{
public:
	struct FTransform                             Transform;                                         // 0x0160(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x01C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x01D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Space;                                             // 0x01D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             WorldOffset;                                       // 0x01E0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0240(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A89[0xF];                                     // 0x0241(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_DebugRectangle) == 0x000010, "Wrong alignment on FRigUnit_DebugRectangle");
static_assert(sizeof(FRigUnit_DebugRectangle) == 0x000250, "Wrong size on FRigUnit_DebugRectangle");
static_assert(offsetof(FRigUnit_DebugRectangle, Transform) == 0x000160, "Member 'FRigUnit_DebugRectangle::Transform' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugRectangle, Color) == 0x0001C0, "Member 'FRigUnit_DebugRectangle::Color' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugRectangle, Scale) == 0x0001D0, "Member 'FRigUnit_DebugRectangle::Scale' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugRectangle, Thickness) == 0x0001D4, "Member 'FRigUnit_DebugRectangle::Thickness' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugRectangle, Space) == 0x0001D8, "Member 'FRigUnit_DebugRectangle::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugRectangle, WorldOffset) == 0x0001E0, "Member 'FRigUnit_DebugRectangle::WorldOffset' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugRectangle, bEnabled) == 0x000240, "Member 'FRigUnit_DebugRectangle::bEnabled' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_DebugRectangleItemSpace
// 0x0100 (0x0260 - 0x0160)
struct FRigUnit_DebugRectangleItemSpace final : public FRigUnit_DebugBaseMutable
{
public:
	struct FTransform                             Transform;                                         // 0x0160(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x01C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x01D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         Space;                                             // 0x01D8(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A8A[0xC];                                     // 0x01E4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             WorldOffset;                                       // 0x01F0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0250(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A8B[0xF];                                     // 0x0251(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_DebugRectangleItemSpace) == 0x000010, "Wrong alignment on FRigUnit_DebugRectangleItemSpace");
static_assert(sizeof(FRigUnit_DebugRectangleItemSpace) == 0x000260, "Wrong size on FRigUnit_DebugRectangleItemSpace");
static_assert(offsetof(FRigUnit_DebugRectangleItemSpace, Transform) == 0x000160, "Member 'FRigUnit_DebugRectangleItemSpace::Transform' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugRectangleItemSpace, Color) == 0x0001C0, "Member 'FRigUnit_DebugRectangleItemSpace::Color' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugRectangleItemSpace, Scale) == 0x0001D0, "Member 'FRigUnit_DebugRectangleItemSpace::Scale' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugRectangleItemSpace, Thickness) == 0x0001D4, "Member 'FRigUnit_DebugRectangleItemSpace::Thickness' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugRectangleItemSpace, Space) == 0x0001D8, "Member 'FRigUnit_DebugRectangleItemSpace::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugRectangleItemSpace, WorldOffset) == 0x0001F0, "Member 'FRigUnit_DebugRectangleItemSpace::WorldOffset' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugRectangleItemSpace, bEnabled) == 0x000250, "Member 'FRigUnit_DebugRectangleItemSpace::bEnabled' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_DebugArc
// 0x0100 (0x0260 - 0x0160)
struct FRigUnit_DebugArc final : public FRigUnit_DebugBaseMutable
{
public:
	struct FTransform                             Transform;                                         // 0x0160(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x01C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumDegrees;                                    // 0x01D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaximumDegrees;                                    // 0x01D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x01DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Detail;                                            // 0x01E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Space;                                             // 0x01E4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A8C[0x4];                                     // 0x01EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             WorldOffset;                                       // 0x01F0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0250(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A8D[0xF];                                     // 0x0251(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_DebugArc) == 0x000010, "Wrong alignment on FRigUnit_DebugArc");
static_assert(sizeof(FRigUnit_DebugArc) == 0x000260, "Wrong size on FRigUnit_DebugArc");
static_assert(offsetof(FRigUnit_DebugArc, Transform) == 0x000160, "Member 'FRigUnit_DebugArc::Transform' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugArc, Color) == 0x0001C0, "Member 'FRigUnit_DebugArc::Color' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugArc, Radius) == 0x0001D0, "Member 'FRigUnit_DebugArc::Radius' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugArc, MinimumDegrees) == 0x0001D4, "Member 'FRigUnit_DebugArc::MinimumDegrees' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugArc, MaximumDegrees) == 0x0001D8, "Member 'FRigUnit_DebugArc::MaximumDegrees' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugArc, Thickness) == 0x0001DC, "Member 'FRigUnit_DebugArc::Thickness' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugArc, Detail) == 0x0001E0, "Member 'FRigUnit_DebugArc::Detail' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugArc, Space) == 0x0001E4, "Member 'FRigUnit_DebugArc::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugArc, WorldOffset) == 0x0001F0, "Member 'FRigUnit_DebugArc::WorldOffset' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugArc, bEnabled) == 0x000250, "Member 'FRigUnit_DebugArc::bEnabled' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_HierarchyAddAnimationChannelInteger
// 0x0010 (0x0190 - 0x0180)
struct FRigUnit_HierarchyAddAnimationChannelInteger final : public FRigUnit_HierarchyAddElement
{
public:
	int32                                         InitialValue;                                      // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinimumValue;                                      // 0x0184(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaximumValue;                                      // 0x0188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A8E[0x4];                                     // 0x018C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_HierarchyAddAnimationChannelInteger) == 0x000010, "Wrong alignment on FRigUnit_HierarchyAddAnimationChannelInteger");
static_assert(sizeof(FRigUnit_HierarchyAddAnimationChannelInteger) == 0x000190, "Wrong size on FRigUnit_HierarchyAddAnimationChannelInteger");
static_assert(offsetof(FRigUnit_HierarchyAddAnimationChannelInteger, InitialValue) == 0x000180, "Member 'FRigUnit_HierarchyAddAnimationChannelInteger::InitialValue' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddAnimationChannelInteger, MinimumValue) == 0x000184, "Member 'FRigUnit_HierarchyAddAnimationChannelInteger::MinimumValue' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddAnimationChannelInteger, MaximumValue) == 0x000188, "Member 'FRigUnit_HierarchyAddAnimationChannelInteger::MaximumValue' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_DebugArcItemSpace
// 0x0100 (0x0260 - 0x0160)
struct FRigUnit_DebugArcItemSpace final : public FRigUnit_DebugBaseMutable
{
public:
	struct FTransform                             Transform;                                         // 0x0160(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x01C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumDegrees;                                    // 0x01D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaximumDegrees;                                    // 0x01D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x01DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Detail;                                            // 0x01E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         Space;                                             // 0x01E4(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             WorldOffset;                                       // 0x01F0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0250(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A8F[0xF];                                     // 0x0251(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_DebugArcItemSpace) == 0x000010, "Wrong alignment on FRigUnit_DebugArcItemSpace");
static_assert(sizeof(FRigUnit_DebugArcItemSpace) == 0x000260, "Wrong size on FRigUnit_DebugArcItemSpace");
static_assert(offsetof(FRigUnit_DebugArcItemSpace, Transform) == 0x000160, "Member 'FRigUnit_DebugArcItemSpace::Transform' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugArcItemSpace, Color) == 0x0001C0, "Member 'FRigUnit_DebugArcItemSpace::Color' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugArcItemSpace, Radius) == 0x0001D0, "Member 'FRigUnit_DebugArcItemSpace::Radius' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugArcItemSpace, MinimumDegrees) == 0x0001D4, "Member 'FRigUnit_DebugArcItemSpace::MinimumDegrees' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugArcItemSpace, MaximumDegrees) == 0x0001D8, "Member 'FRigUnit_DebugArcItemSpace::MaximumDegrees' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugArcItemSpace, Thickness) == 0x0001DC, "Member 'FRigUnit_DebugArcItemSpace::Thickness' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugArcItemSpace, Detail) == 0x0001E0, "Member 'FRigUnit_DebugArcItemSpace::Detail' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugArcItemSpace, Space) == 0x0001E4, "Member 'FRigUnit_DebugArcItemSpace::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugArcItemSpace, WorldOffset) == 0x0001F0, "Member 'FRigUnit_DebugArcItemSpace::WorldOffset' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugArcItemSpace, bEnabled) == 0x000250, "Member 'FRigUnit_DebugArcItemSpace::bEnabled' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_DebugTransform
// 0x0108 (0x0110 - 0x0008)
struct FRigUnit_DebugTransform final : public FRigUnit_DebugBase
{
public:
	uint8                                         Pad_2A90[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigUnitDebugTransformMode                    Mode;                                              // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A91[0x3];                                     // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x0074(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Space;                                             // 0x008C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A92[0xC];                                     // 0x0094(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             WorldOffset;                                       // 0x00A0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A93[0xF];                                     // 0x0101(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_DebugTransform) == 0x000010, "Wrong alignment on FRigUnit_DebugTransform");
static_assert(sizeof(FRigUnit_DebugTransform) == 0x000110, "Wrong size on FRigUnit_DebugTransform");
static_assert(offsetof(FRigUnit_DebugTransform, Transform) == 0x000010, "Member 'FRigUnit_DebugTransform::Transform' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugTransform, Mode) == 0x000070, "Member 'FRigUnit_DebugTransform::Mode' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugTransform, Color) == 0x000074, "Member 'FRigUnit_DebugTransform::Color' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugTransform, Thickness) == 0x000084, "Member 'FRigUnit_DebugTransform::Thickness' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugTransform, Scale) == 0x000088, "Member 'FRigUnit_DebugTransform::Scale' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugTransform, Space) == 0x00008C, "Member 'FRigUnit_DebugTransform::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugTransform, WorldOffset) == 0x0000A0, "Member 'FRigUnit_DebugTransform::WorldOffset' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugTransform, bEnabled) == 0x000100, "Member 'FRigUnit_DebugTransform::bEnabled' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_TwoBoneIKSimple_DebugSettings
// 0x0070 (0x0070 - 0x0000)
struct FRigUnit_TwoBoneIKSimple_DebugSettings final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A94[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Scale;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A95[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             WorldOffset;                                       // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_TwoBoneIKSimple_DebugSettings) == 0x000010, "Wrong alignment on FRigUnit_TwoBoneIKSimple_DebugSettings");
static_assert(sizeof(FRigUnit_TwoBoneIKSimple_DebugSettings) == 0x000070, "Wrong size on FRigUnit_TwoBoneIKSimple_DebugSettings");
static_assert(offsetof(FRigUnit_TwoBoneIKSimple_DebugSettings, bEnabled) == 0x000000, "Member 'FRigUnit_TwoBoneIKSimple_DebugSettings::bEnabled' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimple_DebugSettings, Scale) == 0x000004, "Member 'FRigUnit_TwoBoneIKSimple_DebugSettings::Scale' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimple_DebugSettings, WorldOffset) == 0x000010, "Member 'FRigUnit_TwoBoneIKSimple_DebugSettings::WorldOffset' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_TwoBoneIKSimplePerItem
// 0x0200 (0x0360 - 0x0160)
struct FRigUnit_TwoBoneIKSimplePerItem final : public FRigUnit_HighlevelBaseMutable
{
public:
	struct FRigElementKey                         ItemA;                                             // 0x0160(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         ItemB;                                             // 0x016C(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         EffectorItem;                                      // 0x0178(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A96[0xC];                                     // 0x0184(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Effector;                                          // 0x0190(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PrimaryAxis;                                       // 0x01F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SecondaryAxis;                                     // 0x0208(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondaryAxisWeight;                               // 0x0220(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A97[0x4];                                     // 0x0224(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PoleVector;                                        // 0x0228(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EControlRigVectorKind                         PoleVectorKind;                                    // 0x0240(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A98[0x3];                                     // 0x0241(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKey                         PoleVectorSpace;                                   // 0x0244(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableStretch;                                    // 0x0250(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A99[0x3];                                     // 0x0251(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StretchStartRatio;                                 // 0x0254(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StretchMaximumRatio;                               // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ItemALength;                                       // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ItemBLength;                                       // 0x0264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x0268(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A9A[0x7];                                     // 0x0269(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_TwoBoneIKSimple_DebugSettings DebugSettings;                                     // 0x0270(0x0070)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedItemAIndex;                                  // 0x02E0(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedItemBIndex;                                  // 0x0300(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedEffectorItemIndex;                           // 0x0320(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedPoleVectorSpaceIndex;                        // 0x0340(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_TwoBoneIKSimplePerItem) == 0x000010, "Wrong alignment on FRigUnit_TwoBoneIKSimplePerItem");
static_assert(sizeof(FRigUnit_TwoBoneIKSimplePerItem) == 0x000360, "Wrong size on FRigUnit_TwoBoneIKSimplePerItem");
static_assert(offsetof(FRigUnit_TwoBoneIKSimplePerItem, ItemA) == 0x000160, "Member 'FRigUnit_TwoBoneIKSimplePerItem::ItemA' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimplePerItem, ItemB) == 0x00016C, "Member 'FRigUnit_TwoBoneIKSimplePerItem::ItemB' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimplePerItem, EffectorItem) == 0x000178, "Member 'FRigUnit_TwoBoneIKSimplePerItem::EffectorItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimplePerItem, Effector) == 0x000190, "Member 'FRigUnit_TwoBoneIKSimplePerItem::Effector' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimplePerItem, PrimaryAxis) == 0x0001F0, "Member 'FRigUnit_TwoBoneIKSimplePerItem::PrimaryAxis' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimplePerItem, SecondaryAxis) == 0x000208, "Member 'FRigUnit_TwoBoneIKSimplePerItem::SecondaryAxis' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimplePerItem, SecondaryAxisWeight) == 0x000220, "Member 'FRigUnit_TwoBoneIKSimplePerItem::SecondaryAxisWeight' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimplePerItem, PoleVector) == 0x000228, "Member 'FRigUnit_TwoBoneIKSimplePerItem::PoleVector' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimplePerItem, PoleVectorKind) == 0x000240, "Member 'FRigUnit_TwoBoneIKSimplePerItem::PoleVectorKind' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimplePerItem, PoleVectorSpace) == 0x000244, "Member 'FRigUnit_TwoBoneIKSimplePerItem::PoleVectorSpace' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimplePerItem, bEnableStretch) == 0x000250, "Member 'FRigUnit_TwoBoneIKSimplePerItem::bEnableStretch' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimplePerItem, StretchStartRatio) == 0x000254, "Member 'FRigUnit_TwoBoneIKSimplePerItem::StretchStartRatio' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimplePerItem, StretchMaximumRatio) == 0x000258, "Member 'FRigUnit_TwoBoneIKSimplePerItem::StretchMaximumRatio' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimplePerItem, Weight) == 0x00025C, "Member 'FRigUnit_TwoBoneIKSimplePerItem::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimplePerItem, ItemALength) == 0x000260, "Member 'FRigUnit_TwoBoneIKSimplePerItem::ItemALength' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimplePerItem, ItemBLength) == 0x000264, "Member 'FRigUnit_TwoBoneIKSimplePerItem::ItemBLength' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimplePerItem, bPropagateToChildren) == 0x000268, "Member 'FRigUnit_TwoBoneIKSimplePerItem::bPropagateToChildren' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimplePerItem, DebugSettings) == 0x000270, "Member 'FRigUnit_TwoBoneIKSimplePerItem::DebugSettings' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimplePerItem, CachedItemAIndex) == 0x0002E0, "Member 'FRigUnit_TwoBoneIKSimplePerItem::CachedItemAIndex' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimplePerItem, CachedItemBIndex) == 0x000300, "Member 'FRigUnit_TwoBoneIKSimplePerItem::CachedItemBIndex' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimplePerItem, CachedEffectorItemIndex) == 0x000320, "Member 'FRigUnit_TwoBoneIKSimplePerItem::CachedEffectorItemIndex' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimplePerItem, CachedPoleVectorSpaceIndex) == 0x000340, "Member 'FRigUnit_TwoBoneIKSimplePerItem::CachedPoleVectorSpaceIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_HierarchyAddControlRotator_LimitSettings
// 0x0040 (0x0040 - 0x0000)
struct FRigUnit_HierarchyAddControlRotator_LimitSettings final
{
public:
	struct FRigControlLimitEnabled                LimitPitch;                                        // 0x0000(0x0002)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRigControlLimitEnabled                LimitYaw;                                          // 0x0002(0x0002)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRigControlLimitEnabled                LimitRoll;                                         // 0x0004(0x0002)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A9B[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               MinValue;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               MaxValue;                                          // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bDrawLimits;                                       // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A9C[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_HierarchyAddControlRotator_LimitSettings) == 0x000008, "Wrong alignment on FRigUnit_HierarchyAddControlRotator_LimitSettings");
static_assert(sizeof(FRigUnit_HierarchyAddControlRotator_LimitSettings) == 0x000040, "Wrong size on FRigUnit_HierarchyAddControlRotator_LimitSettings");
static_assert(offsetof(FRigUnit_HierarchyAddControlRotator_LimitSettings, LimitPitch) == 0x000000, "Member 'FRigUnit_HierarchyAddControlRotator_LimitSettings::LimitPitch' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControlRotator_LimitSettings, LimitYaw) == 0x000002, "Member 'FRigUnit_HierarchyAddControlRotator_LimitSettings::LimitYaw' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControlRotator_LimitSettings, LimitRoll) == 0x000004, "Member 'FRigUnit_HierarchyAddControlRotator_LimitSettings::LimitRoll' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControlRotator_LimitSettings, MinValue) == 0x000008, "Member 'FRigUnit_HierarchyAddControlRotator_LimitSettings::MinValue' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControlRotator_LimitSettings, MaxValue) == 0x000020, "Member 'FRigUnit_HierarchyAddControlRotator_LimitSettings::MaxValue' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControlRotator_LimitSettings, bDrawLimits) == 0x000038, "Member 'FRigUnit_HierarchyAddControlRotator_LimitSettings::bDrawLimits' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_HierarchyAddControlRotator_Settings
// 0x0100 (0x0110 - 0x0010)
struct FRigUnit_HierarchyAddControlRotator_Settings final : public FRigUnit_HierarchyAddControl_Settings
{
public:
	ERigVMTransformSpace                          InitialSpace;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A9D[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_HierarchyAddControlRotator_LimitSettings Limits;                                            // 0x0018(0x0040)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A9E[0x8];                                     // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_HierarchyAddControl_ShapeSettings Shape;                                             // 0x0060(0x0080)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRigUnit_HierarchyAddControl_ProxySettings Proxy;                                             // 0x00E0(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<ERigControlTransformChannel>           FilteredChannels;                                  // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_HierarchyAddControlRotator_Settings) == 0x000010, "Wrong alignment on FRigUnit_HierarchyAddControlRotator_Settings");
static_assert(sizeof(FRigUnit_HierarchyAddControlRotator_Settings) == 0x000110, "Wrong size on FRigUnit_HierarchyAddControlRotator_Settings");
static_assert(offsetof(FRigUnit_HierarchyAddControlRotator_Settings, InitialSpace) == 0x000010, "Member 'FRigUnit_HierarchyAddControlRotator_Settings::InitialSpace' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControlRotator_Settings, Limits) == 0x000018, "Member 'FRigUnit_HierarchyAddControlRotator_Settings::Limits' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControlRotator_Settings, Shape) == 0x000060, "Member 'FRigUnit_HierarchyAddControlRotator_Settings::Shape' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControlRotator_Settings, Proxy) == 0x0000E0, "Member 'FRigUnit_HierarchyAddControlRotator_Settings::Proxy' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControlRotator_Settings, FilteredChannels) == 0x000100, "Member 'FRigUnit_HierarchyAddControlRotator_Settings::FilteredChannels' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_DebugTransformMutable
// 0x0100 (0x0260 - 0x0160)
struct FRigUnit_DebugTransformMutable final : public FRigUnit_DebugBaseMutable
{
public:
	struct FTransform                             Transform;                                         // 0x0160(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigUnitDebugTransformMode                    Mode;                                              // 0x01C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A9F[0x3];                                     // 0x01C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x01C4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x01D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x01D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Space;                                             // 0x01DC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AA0[0xC];                                     // 0x01E4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             WorldOffset;                                       // 0x01F0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0250(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AA1[0xF];                                     // 0x0251(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_DebugTransformMutable) == 0x000010, "Wrong alignment on FRigUnit_DebugTransformMutable");
static_assert(sizeof(FRigUnit_DebugTransformMutable) == 0x000260, "Wrong size on FRigUnit_DebugTransformMutable");
static_assert(offsetof(FRigUnit_DebugTransformMutable, Transform) == 0x000160, "Member 'FRigUnit_DebugTransformMutable::Transform' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugTransformMutable, Mode) == 0x0001C0, "Member 'FRigUnit_DebugTransformMutable::Mode' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugTransformMutable, Color) == 0x0001C4, "Member 'FRigUnit_DebugTransformMutable::Color' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugTransformMutable, Thickness) == 0x0001D4, "Member 'FRigUnit_DebugTransformMutable::Thickness' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugTransformMutable, Scale) == 0x0001D8, "Member 'FRigUnit_DebugTransformMutable::Scale' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugTransformMutable, Space) == 0x0001DC, "Member 'FRigUnit_DebugTransformMutable::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugTransformMutable, WorldOffset) == 0x0001F0, "Member 'FRigUnit_DebugTransformMutable::WorldOffset' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugTransformMutable, bEnabled) == 0x000250, "Member 'FRigUnit_DebugTransformMutable::bEnabled' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_DebugTransformMutableItemSpace
// 0x0100 (0x0260 - 0x0160)
struct FRigUnit_DebugTransformMutableItemSpace final : public FRigUnit_DebugBaseMutable
{
public:
	struct FTransform                             Transform;                                         // 0x0160(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigUnitDebugTransformMode                    Mode;                                              // 0x01C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AA2[0x3];                                     // 0x01C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x01C4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x01D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x01D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         Space;                                             // 0x01DC(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AA3[0x8];                                     // 0x01E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             WorldOffset;                                       // 0x01F0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0250(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AA4[0xF];                                     // 0x0251(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_DebugTransformMutableItemSpace) == 0x000010, "Wrong alignment on FRigUnit_DebugTransformMutableItemSpace");
static_assert(sizeof(FRigUnit_DebugTransformMutableItemSpace) == 0x000260, "Wrong size on FRigUnit_DebugTransformMutableItemSpace");
static_assert(offsetof(FRigUnit_DebugTransformMutableItemSpace, Transform) == 0x000160, "Member 'FRigUnit_DebugTransformMutableItemSpace::Transform' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugTransformMutableItemSpace, Mode) == 0x0001C0, "Member 'FRigUnit_DebugTransformMutableItemSpace::Mode' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugTransformMutableItemSpace, Color) == 0x0001C4, "Member 'FRigUnit_DebugTransformMutableItemSpace::Color' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugTransformMutableItemSpace, Thickness) == 0x0001D4, "Member 'FRigUnit_DebugTransformMutableItemSpace::Thickness' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugTransformMutableItemSpace, Scale) == 0x0001D8, "Member 'FRigUnit_DebugTransformMutableItemSpace::Scale' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugTransformMutableItemSpace, Space) == 0x0001DC, "Member 'FRigUnit_DebugTransformMutableItemSpace::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugTransformMutableItemSpace, WorldOffset) == 0x0001F0, "Member 'FRigUnit_DebugTransformMutableItemSpace::WorldOffset' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugTransformMutableItemSpace, bEnabled) == 0x000250, "Member 'FRigUnit_DebugTransformMutableItemSpace::bEnabled' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_DebugTransformArrayMutable_WorkData
// 0x0010 (0x0010 - 0x0000)
struct FRigUnit_DebugTransformArrayMutable_WorkData final
{
public:
	TArray<struct FTransform>                     DrawTransforms;                                    // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_DebugTransformArrayMutable_WorkData) == 0x000008, "Wrong alignment on FRigUnit_DebugTransformArrayMutable_WorkData");
static_assert(sizeof(FRigUnit_DebugTransformArrayMutable_WorkData) == 0x000010, "Wrong size on FRigUnit_DebugTransformArrayMutable_WorkData");
static_assert(offsetof(FRigUnit_DebugTransformArrayMutable_WorkData, DrawTransforms) == 0x000000, "Member 'FRigUnit_DebugTransformArrayMutable_WorkData::DrawTransforms' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_DebugTransformArrayMutable
// 0x00C0 (0x0220 - 0x0160)
struct FRigUnit_DebugTransformArrayMutable final : public FRigUnit_DebugBaseMutable
{
public:
	TArray<struct FTransform>                     Transforms;                                        // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	ERigUnitDebugTransformMode                    Mode;                                              // 0x0170(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AA5[0x3];                                     // 0x0171(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x0174(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0184(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Space;                                             // 0x018C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AA6[0xC];                                     // 0x0194(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             WorldOffset;                                       // 0x01A0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0200(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AA7[0x7];                                     // 0x0201(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_DebugTransformArrayMutable_WorkData WorkData;                                          // 0x0208(0x0010)(Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AA8[0x8];                                     // 0x0218(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_DebugTransformArrayMutable) == 0x000010, "Wrong alignment on FRigUnit_DebugTransformArrayMutable");
static_assert(sizeof(FRigUnit_DebugTransformArrayMutable) == 0x000220, "Wrong size on FRigUnit_DebugTransformArrayMutable");
static_assert(offsetof(FRigUnit_DebugTransformArrayMutable, Transforms) == 0x000160, "Member 'FRigUnit_DebugTransformArrayMutable::Transforms' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugTransformArrayMutable, Mode) == 0x000170, "Member 'FRigUnit_DebugTransformArrayMutable::Mode' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugTransformArrayMutable, Color) == 0x000174, "Member 'FRigUnit_DebugTransformArrayMutable::Color' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugTransformArrayMutable, Thickness) == 0x000184, "Member 'FRigUnit_DebugTransformArrayMutable::Thickness' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugTransformArrayMutable, Scale) == 0x000188, "Member 'FRigUnit_DebugTransformArrayMutable::Scale' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugTransformArrayMutable, Space) == 0x00018C, "Member 'FRigUnit_DebugTransformArrayMutable::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugTransformArrayMutable, WorldOffset) == 0x0001A0, "Member 'FRigUnit_DebugTransformArrayMutable::WorldOffset' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugTransformArrayMutable, bEnabled) == 0x000200, "Member 'FRigUnit_DebugTransformArrayMutable::bEnabled' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugTransformArrayMutable, WorkData) == 0x000208, "Member 'FRigUnit_DebugTransformArrayMutable::WorkData' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_HierarchyGetPose
// 0x0088 (0x0090 - 0x0008)
struct FRigUnit_HierarchyGetPose final : public FRigUnit_HierarchyBase
{
public:
	bool                                          Initial;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigElementType                               ElementType;                                       // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AA9[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKeyCollection               ItemsToGet;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigPose                               Pose;                                              // 0x0020(0x0070)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_HierarchyGetPose) == 0x000008, "Wrong alignment on FRigUnit_HierarchyGetPose");
static_assert(sizeof(FRigUnit_HierarchyGetPose) == 0x000090, "Wrong size on FRigUnit_HierarchyGetPose");
static_assert(offsetof(FRigUnit_HierarchyGetPose, Initial) == 0x000008, "Member 'FRigUnit_HierarchyGetPose::Initial' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyGetPose, ElementType) == 0x000009, "Member 'FRigUnit_HierarchyGetPose::ElementType' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyGetPose, ItemsToGet) == 0x000010, "Member 'FRigUnit_HierarchyGetPose::ItemsToGet' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyGetPose, Pose) == 0x000020, "Member 'FRigUnit_HierarchyGetPose::Pose' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_DebugTransformArrayMutableItemSpace
// 0x00C0 (0x0220 - 0x0160)
struct FRigUnit_DebugTransformArrayMutableItemSpace final : public FRigUnit_DebugBaseMutable
{
public:
	TArray<struct FTransform>                     Transforms;                                        // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ParentIndices;                                     // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	ERigUnitDebugTransformMode                    Mode;                                              // 0x0180(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AAA[0x3];                                     // 0x0181(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x0184(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0194(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0198(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         Space;                                             // 0x019C(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AAB[0x8];                                     // 0x01A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             WorldOffset;                                       // 0x01B0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0210(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AAC[0xF];                                     // 0x0211(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_DebugTransformArrayMutableItemSpace) == 0x000010, "Wrong alignment on FRigUnit_DebugTransformArrayMutableItemSpace");
static_assert(sizeof(FRigUnit_DebugTransformArrayMutableItemSpace) == 0x000220, "Wrong size on FRigUnit_DebugTransformArrayMutableItemSpace");
static_assert(offsetof(FRigUnit_DebugTransformArrayMutableItemSpace, Transforms) == 0x000160, "Member 'FRigUnit_DebugTransformArrayMutableItemSpace::Transforms' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugTransformArrayMutableItemSpace, ParentIndices) == 0x000170, "Member 'FRigUnit_DebugTransformArrayMutableItemSpace::ParentIndices' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugTransformArrayMutableItemSpace, Mode) == 0x000180, "Member 'FRigUnit_DebugTransformArrayMutableItemSpace::Mode' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugTransformArrayMutableItemSpace, Color) == 0x000184, "Member 'FRigUnit_DebugTransformArrayMutableItemSpace::Color' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugTransformArrayMutableItemSpace, Thickness) == 0x000194, "Member 'FRigUnit_DebugTransformArrayMutableItemSpace::Thickness' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugTransformArrayMutableItemSpace, Scale) == 0x000198, "Member 'FRigUnit_DebugTransformArrayMutableItemSpace::Scale' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugTransformArrayMutableItemSpace, Space) == 0x00019C, "Member 'FRigUnit_DebugTransformArrayMutableItemSpace::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugTransformArrayMutableItemSpace, WorldOffset) == 0x0001B0, "Member 'FRigUnit_DebugTransformArrayMutableItemSpace::WorldOffset' has a wrong offset!");
static_assert(offsetof(FRigUnit_DebugTransformArrayMutableItemSpace, bEnabled) == 0x000210, "Member 'FRigUnit_DebugTransformArrayMutableItemSpace::bEnabled' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_StartProfilingTimer
// 0x0000 (0x0100 - 0x0100)
struct FRigUnit_StartProfilingTimer final : public FRigVMFunction_DebugBaseMutable
{
};
static_assert(alignof(FRigUnit_StartProfilingTimer) == 0x000010, "Wrong alignment on FRigUnit_StartProfilingTimer");
static_assert(sizeof(FRigUnit_StartProfilingTimer) == 0x000100, "Wrong size on FRigUnit_StartProfilingTimer");

// ScriptStruct ControlRig.RigUnit_CollectionNameSearch
// 0x0020 (0x0028 - 0x0008)
struct FRigUnit_CollectionNameSearch final : public FRigUnit_CollectionBase
{
public:
	class FName                                   PartialName;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigElementType                               TypeToSearch;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AAD[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKeyCollection               Collection;                                        // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_CollectionNameSearch) == 0x000008, "Wrong alignment on FRigUnit_CollectionNameSearch");
static_assert(sizeof(FRigUnit_CollectionNameSearch) == 0x000028, "Wrong size on FRigUnit_CollectionNameSearch");
static_assert(offsetof(FRigUnit_CollectionNameSearch, PartialName) == 0x000008, "Member 'FRigUnit_CollectionNameSearch::PartialName' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionNameSearch, TypeToSearch) == 0x000010, "Member 'FRigUnit_CollectionNameSearch::TypeToSearch' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionNameSearch, Collection) == 0x000018, "Member 'FRigUnit_CollectionNameSearch::Collection' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_EndProfilingTimer
// 0x0030 (0x0130 - 0x0100)
struct FRigUnit_EndProfilingTimer final : public FRigVMFunction_DebugBaseMutable
{
public:
	int32                                         NumberOfMeasurements;                              // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AAE[0x4];                                     // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Prefix;                                            // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccumulatedTime;                                   // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MeasurementsLeft;                                  // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInitialized;                                    // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AAF[0xF];                                     // 0x0121(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_EndProfilingTimer) == 0x000010, "Wrong alignment on FRigUnit_EndProfilingTimer");
static_assert(sizeof(FRigUnit_EndProfilingTimer) == 0x000130, "Wrong size on FRigUnit_EndProfilingTimer");
static_assert(offsetof(FRigUnit_EndProfilingTimer, NumberOfMeasurements) == 0x000100, "Member 'FRigUnit_EndProfilingTimer::NumberOfMeasurements' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndProfilingTimer, Prefix) == 0x000108, "Member 'FRigUnit_EndProfilingTimer::Prefix' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndProfilingTimer, AccumulatedTime) == 0x000118, "Member 'FRigUnit_EndProfilingTimer::AccumulatedTime' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndProfilingTimer, MeasurementsLeft) == 0x00011C, "Member 'FRigUnit_EndProfilingTimer::MeasurementsLeft' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndProfilingTimer, bIsInitialized) == 0x000120, "Member 'FRigUnit_EndProfilingTimer::bIsInitialized' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_VisualDebugVector
// 0x0040 (0x0048 - 0x0008)
struct FRigUnit_VisualDebugVector final : public FRigUnit_DebugBase
{
public:
	struct FVector                                Value;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigUnitVisualDebugPointMode                  Mode;                                              // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AB0[0x2];                                     // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x0024(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneSpace;                                         // 0x003C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AB1[0x4];                                     // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_VisualDebugVector) == 0x000008, "Wrong alignment on FRigUnit_VisualDebugVector");
static_assert(sizeof(FRigUnit_VisualDebugVector) == 0x000048, "Wrong size on FRigUnit_VisualDebugVector");
static_assert(offsetof(FRigUnit_VisualDebugVector, Value) == 0x000008, "Member 'FRigUnit_VisualDebugVector::Value' has a wrong offset!");
static_assert(offsetof(FRigUnit_VisualDebugVector, bEnabled) == 0x000020, "Member 'FRigUnit_VisualDebugVector::bEnabled' has a wrong offset!");
static_assert(offsetof(FRigUnit_VisualDebugVector, Mode) == 0x000021, "Member 'FRigUnit_VisualDebugVector::Mode' has a wrong offset!");
static_assert(offsetof(FRigUnit_VisualDebugVector, Color) == 0x000024, "Member 'FRigUnit_VisualDebugVector::Color' has a wrong offset!");
static_assert(offsetof(FRigUnit_VisualDebugVector, Thickness) == 0x000034, "Member 'FRigUnit_VisualDebugVector::Thickness' has a wrong offset!");
static_assert(offsetof(FRigUnit_VisualDebugVector, Scale) == 0x000038, "Member 'FRigUnit_VisualDebugVector::Scale' has a wrong offset!");
static_assert(offsetof(FRigUnit_VisualDebugVector, BoneSpace) == 0x00003C, "Member 'FRigUnit_VisualDebugVector::BoneSpace' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_DrawContainerSetTransform
// 0x0070 (0x01D0 - 0x0160)
struct FRigUnit_DrawContainerSetTransform final : public FRigUnitMutable
{
public:
	class FName                                   InstructionName;                                   // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AB2[0x8];                                     // 0x0168(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0170(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_DrawContainerSetTransform) == 0x000010, "Wrong alignment on FRigUnit_DrawContainerSetTransform");
static_assert(sizeof(FRigUnit_DrawContainerSetTransform) == 0x0001D0, "Wrong size on FRigUnit_DrawContainerSetTransform");
static_assert(offsetof(FRigUnit_DrawContainerSetTransform, InstructionName) == 0x000160, "Member 'FRigUnit_DrawContainerSetTransform::InstructionName' has a wrong offset!");
static_assert(offsetof(FRigUnit_DrawContainerSetTransform, Transform) == 0x000170, "Member 'FRigUnit_DrawContainerSetTransform::Transform' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_VisualDebugVectorItemSpace
// 0x0040 (0x0048 - 0x0008)
struct FRigUnit_VisualDebugVectorItemSpace final : public FRigUnit_DebugBase
{
public:
	struct FVector                                Value;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigUnitVisualDebugPointMode                  Mode;                                              // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AB3[0x2];                                     // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x0024(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         Space;                                             // 0x003C(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_VisualDebugVectorItemSpace) == 0x000008, "Wrong alignment on FRigUnit_VisualDebugVectorItemSpace");
static_assert(sizeof(FRigUnit_VisualDebugVectorItemSpace) == 0x000048, "Wrong size on FRigUnit_VisualDebugVectorItemSpace");
static_assert(offsetof(FRigUnit_VisualDebugVectorItemSpace, Value) == 0x000008, "Member 'FRigUnit_VisualDebugVectorItemSpace::Value' has a wrong offset!");
static_assert(offsetof(FRigUnit_VisualDebugVectorItemSpace, bEnabled) == 0x000020, "Member 'FRigUnit_VisualDebugVectorItemSpace::bEnabled' has a wrong offset!");
static_assert(offsetof(FRigUnit_VisualDebugVectorItemSpace, Mode) == 0x000021, "Member 'FRigUnit_VisualDebugVectorItemSpace::Mode' has a wrong offset!");
static_assert(offsetof(FRigUnit_VisualDebugVectorItemSpace, Color) == 0x000024, "Member 'FRigUnit_VisualDebugVectorItemSpace::Color' has a wrong offset!");
static_assert(offsetof(FRigUnit_VisualDebugVectorItemSpace, Thickness) == 0x000034, "Member 'FRigUnit_VisualDebugVectorItemSpace::Thickness' has a wrong offset!");
static_assert(offsetof(FRigUnit_VisualDebugVectorItemSpace, Scale) == 0x000038, "Member 'FRigUnit_VisualDebugVectorItemSpace::Scale' has a wrong offset!");
static_assert(offsetof(FRigUnit_VisualDebugVectorItemSpace, Space) == 0x00003C, "Member 'FRigUnit_VisualDebugVectorItemSpace::Space' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_VisualDebugQuat
// 0x0048 (0x0050 - 0x0008)
struct FRigUnit_VisualDebugQuat final : public FRigUnit_DebugBase
{
public:
	uint8                                         Pad_2AB4[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Value;                                             // 0x0010(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AB5[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Thickness;                                         // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneSpace;                                         // 0x003C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AB6[0xC];                                     // 0x0044(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_VisualDebugQuat) == 0x000010, "Wrong alignment on FRigUnit_VisualDebugQuat");
static_assert(sizeof(FRigUnit_VisualDebugQuat) == 0x000050, "Wrong size on FRigUnit_VisualDebugQuat");
static_assert(offsetof(FRigUnit_VisualDebugQuat, Value) == 0x000010, "Member 'FRigUnit_VisualDebugQuat::Value' has a wrong offset!");
static_assert(offsetof(FRigUnit_VisualDebugQuat, bEnabled) == 0x000030, "Member 'FRigUnit_VisualDebugQuat::bEnabled' has a wrong offset!");
static_assert(offsetof(FRigUnit_VisualDebugQuat, Thickness) == 0x000034, "Member 'FRigUnit_VisualDebugQuat::Thickness' has a wrong offset!");
static_assert(offsetof(FRigUnit_VisualDebugQuat, Scale) == 0x000038, "Member 'FRigUnit_VisualDebugQuat::Scale' has a wrong offset!");
static_assert(offsetof(FRigUnit_VisualDebugQuat, BoneSpace) == 0x00003C, "Member 'FRigUnit_VisualDebugQuat::BoneSpace' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_HierarchyGetSiblings
// 0x0050 (0x0058 - 0x0008)
struct FRigUnit_HierarchyGetSiblings final : public FRigUnit_HierarchyBase
{
public:
	struct FRigElementKey                         Item;                                              // 0x0008(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeItem;                                      // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AB7[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKeyCollection               Siblings;                                          // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedItem;                                        // 0x0028(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKeyCollection               CachedSiblings;                                    // 0x0048(0x0010)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_HierarchyGetSiblings) == 0x000008, "Wrong alignment on FRigUnit_HierarchyGetSiblings");
static_assert(sizeof(FRigUnit_HierarchyGetSiblings) == 0x000058, "Wrong size on FRigUnit_HierarchyGetSiblings");
static_assert(offsetof(FRigUnit_HierarchyGetSiblings, Item) == 0x000008, "Member 'FRigUnit_HierarchyGetSiblings::Item' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyGetSiblings, bIncludeItem) == 0x000014, "Member 'FRigUnit_HierarchyGetSiblings::bIncludeItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyGetSiblings, Siblings) == 0x000018, "Member 'FRigUnit_HierarchyGetSiblings::Siblings' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyGetSiblings, CachedItem) == 0x000028, "Member 'FRigUnit_HierarchyGetSiblings::CachedItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyGetSiblings, CachedSiblings) == 0x000048, "Member 'FRigUnit_HierarchyGetSiblings::CachedSiblings' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_VisualDebugQuatItemSpace
// 0x0048 (0x0050 - 0x0008)
struct FRigUnit_VisualDebugQuatItemSpace final : public FRigUnit_DebugBase
{
public:
	uint8                                         Pad_2AB8[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Value;                                             // 0x0010(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AB9[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Thickness;                                         // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         Space;                                             // 0x003C(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2ABA[0x8];                                     // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_VisualDebugQuatItemSpace) == 0x000010, "Wrong alignment on FRigUnit_VisualDebugQuatItemSpace");
static_assert(sizeof(FRigUnit_VisualDebugQuatItemSpace) == 0x000050, "Wrong size on FRigUnit_VisualDebugQuatItemSpace");
static_assert(offsetof(FRigUnit_VisualDebugQuatItemSpace, Value) == 0x000010, "Member 'FRigUnit_VisualDebugQuatItemSpace::Value' has a wrong offset!");
static_assert(offsetof(FRigUnit_VisualDebugQuatItemSpace, bEnabled) == 0x000030, "Member 'FRigUnit_VisualDebugQuatItemSpace::bEnabled' has a wrong offset!");
static_assert(offsetof(FRigUnit_VisualDebugQuatItemSpace, Thickness) == 0x000034, "Member 'FRigUnit_VisualDebugQuatItemSpace::Thickness' has a wrong offset!");
static_assert(offsetof(FRigUnit_VisualDebugQuatItemSpace, Scale) == 0x000038, "Member 'FRigUnit_VisualDebugQuatItemSpace::Scale' has a wrong offset!");
static_assert(offsetof(FRigUnit_VisualDebugQuatItemSpace, Space) == 0x00003C, "Member 'FRigUnit_VisualDebugQuatItemSpace::Space' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_VisualDebugTransform
// 0x0088 (0x0090 - 0x0008)
struct FRigUnit_VisualDebugTransform final : public FRigUnit_DebugBase
{
public:
	uint8                                         Pad_2ABB[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Value;                                             // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2ABC[0x3];                                     // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Thickness;                                         // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneSpace;                                         // 0x007C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2ABD[0xC];                                     // 0x0084(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_VisualDebugTransform) == 0x000010, "Wrong alignment on FRigUnit_VisualDebugTransform");
static_assert(sizeof(FRigUnit_VisualDebugTransform) == 0x000090, "Wrong size on FRigUnit_VisualDebugTransform");
static_assert(offsetof(FRigUnit_VisualDebugTransform, Value) == 0x000010, "Member 'FRigUnit_VisualDebugTransform::Value' has a wrong offset!");
static_assert(offsetof(FRigUnit_VisualDebugTransform, bEnabled) == 0x000070, "Member 'FRigUnit_VisualDebugTransform::bEnabled' has a wrong offset!");
static_assert(offsetof(FRigUnit_VisualDebugTransform, Thickness) == 0x000074, "Member 'FRigUnit_VisualDebugTransform::Thickness' has a wrong offset!");
static_assert(offsetof(FRigUnit_VisualDebugTransform, Scale) == 0x000078, "Member 'FRigUnit_VisualDebugTransform::Scale' has a wrong offset!");
static_assert(offsetof(FRigUnit_VisualDebugTransform, BoneSpace) == 0x00007C, "Member 'FRigUnit_VisualDebugTransform::BoneSpace' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_PoseGetTransform
// 0x00F8 (0x0100 - 0x0008)
struct FRigUnit_PoseGetTransform final : public FRigUnit_HierarchyBase
{
public:
	struct FRigPose                               Pose;                                              // 0x0008(0x0070)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRigElementKey                         Item;                                              // 0x0078(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigVMTransformSpace                          Space;                                             // 0x0084(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Valid;                                             // 0x0085(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2ABE[0xA];                                     // 0x0086(0x000A)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0090(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurveValue;                                        // 0x00F0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CachedPoseElementIndex;                            // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CachedPoseHash;                                    // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2ABF[0x4];                                     // 0x00FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_PoseGetTransform) == 0x000010, "Wrong alignment on FRigUnit_PoseGetTransform");
static_assert(sizeof(FRigUnit_PoseGetTransform) == 0x000100, "Wrong size on FRigUnit_PoseGetTransform");
static_assert(offsetof(FRigUnit_PoseGetTransform, Pose) == 0x000008, "Member 'FRigUnit_PoseGetTransform::Pose' has a wrong offset!");
static_assert(offsetof(FRigUnit_PoseGetTransform, Item) == 0x000078, "Member 'FRigUnit_PoseGetTransform::Item' has a wrong offset!");
static_assert(offsetof(FRigUnit_PoseGetTransform, Space) == 0x000084, "Member 'FRigUnit_PoseGetTransform::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_PoseGetTransform, Valid) == 0x000085, "Member 'FRigUnit_PoseGetTransform::Valid' has a wrong offset!");
static_assert(offsetof(FRigUnit_PoseGetTransform, Transform) == 0x000090, "Member 'FRigUnit_PoseGetTransform::Transform' has a wrong offset!");
static_assert(offsetof(FRigUnit_PoseGetTransform, CurveValue) == 0x0000F0, "Member 'FRigUnit_PoseGetTransform::CurveValue' has a wrong offset!");
static_assert(offsetof(FRigUnit_PoseGetTransform, CachedPoseElementIndex) == 0x0000F4, "Member 'FRigUnit_PoseGetTransform::CachedPoseElementIndex' has a wrong offset!");
static_assert(offsetof(FRigUnit_PoseGetTransform, CachedPoseHash) == 0x0000F8, "Member 'FRigUnit_PoseGetTransform::CachedPoseHash' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_VisualDebugTransformItemSpace
// 0x0088 (0x0090 - 0x0008)
struct FRigUnit_VisualDebugTransformItemSpace final : public FRigUnit_DebugBase
{
public:
	uint8                                         Pad_2AC0[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Value;                                             // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AC1[0x3];                                     // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Thickness;                                         // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         Space;                                             // 0x007C(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AC2[0x8];                                     // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_VisualDebugTransformItemSpace) == 0x000010, "Wrong alignment on FRigUnit_VisualDebugTransformItemSpace");
static_assert(sizeof(FRigUnit_VisualDebugTransformItemSpace) == 0x000090, "Wrong size on FRigUnit_VisualDebugTransformItemSpace");
static_assert(offsetof(FRigUnit_VisualDebugTransformItemSpace, Value) == 0x000010, "Member 'FRigUnit_VisualDebugTransformItemSpace::Value' has a wrong offset!");
static_assert(offsetof(FRigUnit_VisualDebugTransformItemSpace, bEnabled) == 0x000070, "Member 'FRigUnit_VisualDebugTransformItemSpace::bEnabled' has a wrong offset!");
static_assert(offsetof(FRigUnit_VisualDebugTransformItemSpace, Thickness) == 0x000074, "Member 'FRigUnit_VisualDebugTransformItemSpace::Thickness' has a wrong offset!");
static_assert(offsetof(FRigUnit_VisualDebugTransformItemSpace, Scale) == 0x000078, "Member 'FRigUnit_VisualDebugTransformItemSpace::Scale' has a wrong offset!");
static_assert(offsetof(FRigUnit_VisualDebugTransformItemSpace, Space) == 0x00007C, "Member 'FRigUnit_VisualDebugTransformItemSpace::Space' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_ConvertTransform
// 0x00B8 (0x00C0 - 0x0008)
struct FRigUnit_ConvertTransform final : public FRigUnit
{
public:
	uint8                                         Pad_2AC3[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Input;                                             // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEulerTransform                        Result;                                            // 0x0070(0x0048)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AC4[0x8];                                     // 0x00B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_ConvertTransform) == 0x000010, "Wrong alignment on FRigUnit_ConvertTransform");
static_assert(sizeof(FRigUnit_ConvertTransform) == 0x0000C0, "Wrong size on FRigUnit_ConvertTransform");
static_assert(offsetof(FRigUnit_ConvertTransform, Input) == 0x000010, "Member 'FRigUnit_ConvertTransform::Input' has a wrong offset!");
static_assert(offsetof(FRigUnit_ConvertTransform, Result) == 0x000070, "Member 'FRigUnit_ConvertTransform::Result' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_HierarchyBaseMutable
// 0x0000 (0x0160 - 0x0160)
struct FRigUnit_HierarchyBaseMutable : public FRigUnitMutable
{
};
static_assert(alignof(FRigUnit_HierarchyBaseMutable) == 0x000010, "Wrong alignment on FRigUnit_HierarchyBaseMutable");
static_assert(sizeof(FRigUnit_HierarchyBaseMutable) == 0x000160, "Wrong size on FRigUnit_HierarchyBaseMutable");

// ScriptStruct ControlRig.RigUnit_HierarchySetPose
// 0x0090 (0x01F0 - 0x0160)
struct FRigUnit_HierarchySetPose final : public FRigUnit_HierarchyBaseMutable
{
public:
	struct FRigPose                               Pose;                                              // 0x0160(0x0070)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	ERigElementType                               ElementType;                                       // 0x01D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigVMTransformSpace                          Space;                                             // 0x01D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AC5[0x6];                                     // 0x01D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKeyCollection               ItemsToSet;                                        // 0x01D8(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x01E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AC6[0x4];                                     // 0x01EC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_HierarchySetPose) == 0x000010, "Wrong alignment on FRigUnit_HierarchySetPose");
static_assert(sizeof(FRigUnit_HierarchySetPose) == 0x0001F0, "Wrong size on FRigUnit_HierarchySetPose");
static_assert(offsetof(FRigUnit_HierarchySetPose, Pose) == 0x000160, "Member 'FRigUnit_HierarchySetPose::Pose' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchySetPose, ElementType) == 0x0001D0, "Member 'FRigUnit_HierarchySetPose::ElementType' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchySetPose, Space) == 0x0001D1, "Member 'FRigUnit_HierarchySetPose::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchySetPose, ItemsToSet) == 0x0001D8, "Member 'FRigUnit_HierarchySetPose::ItemsToSet' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchySetPose, Weight) == 0x0001E8, "Member 'FRigUnit_HierarchySetPose::Weight' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_ConvertEulerTransform
// 0x00A8 (0x00B0 - 0x0008)
struct FRigUnit_ConvertEulerTransform final : public FRigUnit
{
public:
	struct FEulerTransform                        Input;                                             // 0x0008(0x0048)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             Result;                                            // 0x0050(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_ConvertEulerTransform) == 0x000010, "Wrong alignment on FRigUnit_ConvertEulerTransform");
static_assert(sizeof(FRigUnit_ConvertEulerTransform) == 0x0000B0, "Wrong size on FRigUnit_ConvertEulerTransform");
static_assert(offsetof(FRigUnit_ConvertEulerTransform, Input) == 0x000008, "Member 'FRigUnit_ConvertEulerTransform::Input' has a wrong offset!");
static_assert(offsetof(FRigUnit_ConvertEulerTransform, Result) == 0x000050, "Member 'FRigUnit_ConvertEulerTransform::Result' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_ConvertRotation
// 0x0038 (0x0040 - 0x0008)
struct FRigUnit_ConvertRotation : public FRigUnit
{
public:
	struct FRotator                               Input;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FQuat                                  Result;                                            // 0x0020(0x0020)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_ConvertRotation) == 0x000010, "Wrong alignment on FRigUnit_ConvertRotation");
static_assert(sizeof(FRigUnit_ConvertRotation) == 0x000040, "Wrong size on FRigUnit_ConvertRotation");
static_assert(offsetof(FRigUnit_ConvertRotation, Input) == 0x000008, "Member 'FRigUnit_ConvertRotation::Input' has a wrong offset!");
static_assert(offsetof(FRigUnit_ConvertRotation, Result) == 0x000020, "Member 'FRigUnit_ConvertRotation::Result' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_HierarchyGetParentsItemArray
// 0x0050 (0x0058 - 0x0008)
struct FRigUnit_HierarchyGetParentsItemArray final : public FRigUnit_HierarchyBase
{
public:
	struct FRigElementKey                         Child;                                             // 0x0008(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeChild;                                     // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReverse;                                          // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AC7[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigElementKey>                 Parents;                                           // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedChild;                                       // 0x0028(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKeyCollection               CachedParents;                                     // 0x0048(0x0010)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_HierarchyGetParentsItemArray) == 0x000008, "Wrong alignment on FRigUnit_HierarchyGetParentsItemArray");
static_assert(sizeof(FRigUnit_HierarchyGetParentsItemArray) == 0x000058, "Wrong size on FRigUnit_HierarchyGetParentsItemArray");
static_assert(offsetof(FRigUnit_HierarchyGetParentsItemArray, Child) == 0x000008, "Member 'FRigUnit_HierarchyGetParentsItemArray::Child' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyGetParentsItemArray, bIncludeChild) == 0x000014, "Member 'FRigUnit_HierarchyGetParentsItemArray::bIncludeChild' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyGetParentsItemArray, bReverse) == 0x000015, "Member 'FRigUnit_HierarchyGetParentsItemArray::bReverse' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyGetParentsItemArray, Parents) == 0x000018, "Member 'FRigUnit_HierarchyGetParentsItemArray::Parents' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyGetParentsItemArray, CachedChild) == 0x000028, "Member 'FRigUnit_HierarchyGetParentsItemArray::CachedChild' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyGetParentsItemArray, CachedParents) == 0x000048, "Member 'FRigUnit_HierarchyGetParentsItemArray::CachedParents' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_ConvertVectorRotation
// 0x0000 (0x0040 - 0x0040)
struct FRigUnit_ConvertVectorRotation final : public FRigUnit_ConvertRotation
{
};
static_assert(alignof(FRigUnit_ConvertVectorRotation) == 0x000010, "Wrong alignment on FRigUnit_ConvertVectorRotation");
static_assert(sizeof(FRigUnit_ConvertVectorRotation) == 0x000040, "Wrong size on FRigUnit_ConvertVectorRotation");

// ScriptStruct ControlRig.RigUnit_ConvertQuaternion
// 0x0048 (0x0050 - 0x0008)
struct FRigUnit_ConvertQuaternion final : public FRigUnit
{
public:
	uint8                                         Pad_2AC8[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Input;                                             // 0x0010(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Result;                                            // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AC9[0x8];                                     // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_ConvertQuaternion) == 0x000010, "Wrong alignment on FRigUnit_ConvertQuaternion");
static_assert(sizeof(FRigUnit_ConvertQuaternion) == 0x000050, "Wrong size on FRigUnit_ConvertQuaternion");
static_assert(offsetof(FRigUnit_ConvertQuaternion, Input) == 0x000010, "Member 'FRigUnit_ConvertQuaternion::Input' has a wrong offset!");
static_assert(offsetof(FRigUnit_ConvertQuaternion, Result) == 0x000030, "Member 'FRigUnit_ConvertQuaternion::Result' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_PoseGetItemsItemArray
// 0x0088 (0x0090 - 0x0008)
struct FRigUnit_PoseGetItemsItemArray final : public FRigUnit_HierarchyBase
{
public:
	struct FRigPose                               Pose;                                              // 0x0008(0x0070)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	ERigElementType                               ElementType;                                       // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2ACA[0x7];                                     // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigElementKey>                 Items;                                             // 0x0080(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_PoseGetItemsItemArray) == 0x000008, "Wrong alignment on FRigUnit_PoseGetItemsItemArray");
static_assert(sizeof(FRigUnit_PoseGetItemsItemArray) == 0x000090, "Wrong size on FRigUnit_PoseGetItemsItemArray");
static_assert(offsetof(FRigUnit_PoseGetItemsItemArray, Pose) == 0x000008, "Member 'FRigUnit_PoseGetItemsItemArray::Pose' has a wrong offset!");
static_assert(offsetof(FRigUnit_PoseGetItemsItemArray, ElementType) == 0x000078, "Member 'FRigUnit_PoseGetItemsItemArray::ElementType' has a wrong offset!");
static_assert(offsetof(FRigUnit_PoseGetItemsItemArray, Items) == 0x000080, "Member 'FRigUnit_PoseGetItemsItemArray::Items' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_ConvertVectorToRotation
// 0x0030 (0x0038 - 0x0008)
struct FRigUnit_ConvertVectorToRotation final : public FRigUnit
{
public:
	struct FVector                                Input;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Result;                                            // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_ConvertVectorToRotation) == 0x000008, "Wrong alignment on FRigUnit_ConvertVectorToRotation");
static_assert(sizeof(FRigUnit_ConvertVectorToRotation) == 0x000038, "Wrong size on FRigUnit_ConvertVectorToRotation");
static_assert(offsetof(FRigUnit_ConvertVectorToRotation, Input) == 0x000008, "Member 'FRigUnit_ConvertVectorToRotation::Input' has a wrong offset!");
static_assert(offsetof(FRigUnit_ConvertVectorToRotation, Result) == 0x000020, "Member 'FRigUnit_ConvertVectorToRotation::Result' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_ConvertVectorToQuaternion
// 0x0038 (0x0040 - 0x0008)
struct FRigUnit_ConvertVectorToQuaternion final : public FRigUnit
{
public:
	struct FVector                                Input;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  Result;                                            // 0x0020(0x0020)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_ConvertVectorToQuaternion) == 0x000010, "Wrong alignment on FRigUnit_ConvertVectorToQuaternion");
static_assert(sizeof(FRigUnit_ConvertVectorToQuaternion) == 0x000040, "Wrong size on FRigUnit_ConvertVectorToQuaternion");
static_assert(offsetof(FRigUnit_ConvertVectorToQuaternion, Input) == 0x000008, "Member 'FRigUnit_ConvertVectorToQuaternion::Input' has a wrong offset!");
static_assert(offsetof(FRigUnit_ConvertVectorToQuaternion, Result) == 0x000020, "Member 'FRigUnit_ConvertVectorToQuaternion::Result' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_ItemBaseMutable
// 0x0000 (0x0160 - 0x0160)
struct FRigUnit_ItemBaseMutable final : public FRigUnitMutable
{
};
static_assert(alignof(FRigUnit_ItemBaseMutable) == 0x000010, "Wrong alignment on FRigUnit_ItemBaseMutable");
static_assert(sizeof(FRigUnit_ItemBaseMutable) == 0x000160, "Wrong size on FRigUnit_ItemBaseMutable");

// ScriptStruct ControlRig.RigUnit_ConvertRotationToVector
// 0x0030 (0x0038 - 0x0008)
struct FRigUnit_ConvertRotationToVector final : public FRigUnit
{
public:
	struct FRotator                               Input;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Result;                                            // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_ConvertRotationToVector) == 0x000008, "Wrong alignment on FRigUnit_ConvertRotationToVector");
static_assert(sizeof(FRigUnit_ConvertRotationToVector) == 0x000038, "Wrong size on FRigUnit_ConvertRotationToVector");
static_assert(offsetof(FRigUnit_ConvertRotationToVector, Input) == 0x000008, "Member 'FRigUnit_ConvertRotationToVector::Input' has a wrong offset!");
static_assert(offsetof(FRigUnit_ConvertRotationToVector, Result) == 0x000020, "Member 'FRigUnit_ConvertRotationToVector::Result' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_ConvertQuaternionToVector
// 0x0048 (0x0050 - 0x0008)
struct FRigUnit_ConvertQuaternionToVector final : public FRigUnit
{
public:
	uint8                                         Pad_2ACB[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Input;                                             // 0x0010(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Result;                                            // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2ACC[0x8];                                     // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_ConvertQuaternionToVector) == 0x000010, "Wrong alignment on FRigUnit_ConvertQuaternionToVector");
static_assert(sizeof(FRigUnit_ConvertQuaternionToVector) == 0x000050, "Wrong size on FRigUnit_ConvertQuaternionToVector");
static_assert(offsetof(FRigUnit_ConvertQuaternionToVector, Input) == 0x000010, "Member 'FRigUnit_ConvertQuaternionToVector::Input' has a wrong offset!");
static_assert(offsetof(FRigUnit_ConvertQuaternionToVector, Result) == 0x000030, "Member 'FRigUnit_ConvertQuaternionToVector::Result' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_PoseGetCurve
// 0x0088 (0x0090 - 0x0008)
struct FRigUnit_PoseGetCurve final : public FRigUnit_HierarchyBase
{
public:
	struct FRigPose                               Pose;                                              // 0x0008(0x0070)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FName                                   Curve;                                             // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Valid;                                             // 0x0080(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2ACD[0x3];                                     // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurveValue;                                        // 0x0084(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CachedPoseElementIndex;                            // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CachedPoseHash;                                    // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_PoseGetCurve) == 0x000008, "Wrong alignment on FRigUnit_PoseGetCurve");
static_assert(sizeof(FRigUnit_PoseGetCurve) == 0x000090, "Wrong size on FRigUnit_PoseGetCurve");
static_assert(offsetof(FRigUnit_PoseGetCurve, Pose) == 0x000008, "Member 'FRigUnit_PoseGetCurve::Pose' has a wrong offset!");
static_assert(offsetof(FRigUnit_PoseGetCurve, Curve) == 0x000078, "Member 'FRigUnit_PoseGetCurve::Curve' has a wrong offset!");
static_assert(offsetof(FRigUnit_PoseGetCurve, Valid) == 0x000080, "Member 'FRigUnit_PoseGetCurve::Valid' has a wrong offset!");
static_assert(offsetof(FRigUnit_PoseGetCurve, CurveValue) == 0x000084, "Member 'FRigUnit_PoseGetCurve::CurveValue' has a wrong offset!");
static_assert(offsetof(FRigUnit_PoseGetCurve, CachedPoseElementIndex) == 0x000088, "Member 'FRigUnit_PoseGetCurve::CachedPoseElementIndex' has a wrong offset!");
static_assert(offsetof(FRigUnit_PoseGetCurve, CachedPoseHash) == 0x00008C, "Member 'FRigUnit_PoseGetCurve::CachedPoseHash' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_ToSwingAndTwist
// 0x0088 (0x0090 - 0x0008)
struct FRigUnit_ToSwingAndTwist final : public FRigUnit
{
public:
	uint8                                         Pad_2ACE[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Input;                                             // 0x0010(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TwistAxis;                                         // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2ACF[0x8];                                     // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Swing;                                             // 0x0050(0x0020)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  Twist;                                             // 0x0070(0x0020)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_ToSwingAndTwist) == 0x000010, "Wrong alignment on FRigUnit_ToSwingAndTwist");
static_assert(sizeof(FRigUnit_ToSwingAndTwist) == 0x000090, "Wrong size on FRigUnit_ToSwingAndTwist");
static_assert(offsetof(FRigUnit_ToSwingAndTwist, Input) == 0x000010, "Member 'FRigUnit_ToSwingAndTwist::Input' has a wrong offset!");
static_assert(offsetof(FRigUnit_ToSwingAndTwist, TwistAxis) == 0x000030, "Member 'FRigUnit_ToSwingAndTwist::TwistAxis' has a wrong offset!");
static_assert(offsetof(FRigUnit_ToSwingAndTwist, Swing) == 0x000050, "Member 'FRigUnit_ToSwingAndTwist::Swing' has a wrong offset!");
static_assert(offsetof(FRigUnit_ToSwingAndTwist, Twist) == 0x000070, "Member 'FRigUnit_ToSwingAndTwist::Twist' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_BinaryFloatOp
// 0x0010 (0x0018 - 0x0008)
struct FRigUnit_BinaryFloatOp : public FRigUnit
{
public:
	float                                         Argument0;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Argument1;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Result;                                            // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AD0[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_BinaryFloatOp) == 0x000008, "Wrong alignment on FRigUnit_BinaryFloatOp");
static_assert(sizeof(FRigUnit_BinaryFloatOp) == 0x000018, "Wrong size on FRigUnit_BinaryFloatOp");
static_assert(offsetof(FRigUnit_BinaryFloatOp, Argument0) == 0x000008, "Member 'FRigUnit_BinaryFloatOp::Argument0' has a wrong offset!");
static_assert(offsetof(FRigUnit_BinaryFloatOp, Argument1) == 0x00000C, "Member 'FRigUnit_BinaryFloatOp::Argument1' has a wrong offset!");
static_assert(offsetof(FRigUnit_BinaryFloatOp, Result) == 0x000010, "Member 'FRigUnit_BinaryFloatOp::Result' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_PoseIsEmpty
// 0x0078 (0x0080 - 0x0008)
struct FRigUnit_PoseIsEmpty final : public FRigUnit_HierarchyBase
{
public:
	struct FRigPose                               Pose;                                              // 0x0008(0x0070)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          IsEmpty;                                           // 0x0078(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AD1[0x7];                                     // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_PoseIsEmpty) == 0x000008, "Wrong alignment on FRigUnit_PoseIsEmpty");
static_assert(sizeof(FRigUnit_PoseIsEmpty) == 0x000080, "Wrong size on FRigUnit_PoseIsEmpty");
static_assert(offsetof(FRigUnit_PoseIsEmpty, Pose) == 0x000008, "Member 'FRigUnit_PoseIsEmpty::Pose' has a wrong offset!");
static_assert(offsetof(FRigUnit_PoseIsEmpty, IsEmpty) == 0x000078, "Member 'FRigUnit_PoseIsEmpty::IsEmpty' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_Multiply_FloatFloat
// 0x0000 (0x0018 - 0x0018)
struct FRigUnit_Multiply_FloatFloat final : public FRigUnit_BinaryFloatOp
{
};
static_assert(alignof(FRigUnit_Multiply_FloatFloat) == 0x000008, "Wrong alignment on FRigUnit_Multiply_FloatFloat");
static_assert(sizeof(FRigUnit_Multiply_FloatFloat) == 0x000018, "Wrong size on FRigUnit_Multiply_FloatFloat");

// ScriptStruct ControlRig.RigUnit_Add_FloatFloat
// 0x0000 (0x0018 - 0x0018)
struct FRigUnit_Add_FloatFloat final : public FRigUnit_BinaryFloatOp
{
};
static_assert(alignof(FRigUnit_Add_FloatFloat) == 0x000008, "Wrong alignment on FRigUnit_Add_FloatFloat");
static_assert(sizeof(FRigUnit_Add_FloatFloat) == 0x000018, "Wrong size on FRigUnit_Add_FloatFloat");

// ScriptStruct ControlRig.RigUnit_IsInteracting
// 0x0018 (0x0020 - 0x0008)
struct FRigUnit_IsInteracting final : public FRigUnit
{
public:
	bool                                          bIsInteracting;                                    // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTranslating;                                    // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRotating;                                       // 0x000A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsScaling;                                        // 0x000B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AD2[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigElementKey>                 Items;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_IsInteracting) == 0x000008, "Wrong alignment on FRigUnit_IsInteracting");
static_assert(sizeof(FRigUnit_IsInteracting) == 0x000020, "Wrong size on FRigUnit_IsInteracting");
static_assert(offsetof(FRigUnit_IsInteracting, bIsInteracting) == 0x000008, "Member 'FRigUnit_IsInteracting::bIsInteracting' has a wrong offset!");
static_assert(offsetof(FRigUnit_IsInteracting, bIsTranslating) == 0x000009, "Member 'FRigUnit_IsInteracting::bIsTranslating' has a wrong offset!");
static_assert(offsetof(FRigUnit_IsInteracting, bIsRotating) == 0x00000A, "Member 'FRigUnit_IsInteracting::bIsRotating' has a wrong offset!");
static_assert(offsetof(FRigUnit_IsInteracting, bIsScaling) == 0x00000B, "Member 'FRigUnit_IsInteracting::bIsScaling' has a wrong offset!");
static_assert(offsetof(FRigUnit_IsInteracting, Items) == 0x000010, "Member 'FRigUnit_IsInteracting::Items' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_Subtract_FloatFloat
// 0x0000 (0x0018 - 0x0018)
struct FRigUnit_Subtract_FloatFloat final : public FRigUnit_BinaryFloatOp
{
};
static_assert(alignof(FRigUnit_Subtract_FloatFloat) == 0x000008, "Wrong alignment on FRigUnit_Subtract_FloatFloat");
static_assert(sizeof(FRigUnit_Subtract_FloatFloat) == 0x000018, "Wrong size on FRigUnit_Subtract_FloatFloat");

// ScriptStruct ControlRig.RigUnit_Divide_FloatFloat
// 0x0000 (0x0018 - 0x0018)
struct FRigUnit_Divide_FloatFloat final : public FRigUnit_BinaryFloatOp
{
};
static_assert(alignof(FRigUnit_Divide_FloatFloat) == 0x000008, "Wrong alignment on FRigUnit_Divide_FloatFloat");
static_assert(sizeof(FRigUnit_Divide_FloatFloat) == 0x000018, "Wrong size on FRigUnit_Divide_FloatFloat");

// ScriptStruct ControlRig.RigUnit_PrepareForExecution
// 0x0158 (0x0160 - 0x0008)
struct FRigUnit_PrepareForExecution final : public FRigUnit
{
public:
	uint8                                         Pad_2AD3[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FControlRigExecuteContext              ExecuteContext;                                    // 0x0010(0x0150)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_PrepareForExecution) == 0x000010, "Wrong alignment on FRigUnit_PrepareForExecution");
static_assert(sizeof(FRigUnit_PrepareForExecution) == 0x000160, "Wrong size on FRigUnit_PrepareForExecution");
static_assert(offsetof(FRigUnit_PrepareForExecution, ExecuteContext) == 0x000010, "Member 'FRigUnit_PrepareForExecution::ExecuteContext' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_Clamp_Float
// 0x0010 (0x0018 - 0x0008)
struct FRigUnit_Clamp_Float final : public FRigUnit
{
public:
	float                                         Value;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Min;                                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max;                                               // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Result;                                            // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_Clamp_Float) == 0x000008, "Wrong alignment on FRigUnit_Clamp_Float");
static_assert(sizeof(FRigUnit_Clamp_Float) == 0x000018, "Wrong size on FRigUnit_Clamp_Float");
static_assert(offsetof(FRigUnit_Clamp_Float, Value) == 0x000008, "Member 'FRigUnit_Clamp_Float::Value' has a wrong offset!");
static_assert(offsetof(FRigUnit_Clamp_Float, Min) == 0x00000C, "Member 'FRigUnit_Clamp_Float::Min' has a wrong offset!");
static_assert(offsetof(FRigUnit_Clamp_Float, Max) == 0x000010, "Member 'FRigUnit_Clamp_Float::Max' has a wrong offset!");
static_assert(offsetof(FRigUnit_Clamp_Float, Result) == 0x000014, "Member 'FRigUnit_Clamp_Float::Result' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_MapRange_Float
// 0x0018 (0x0020 - 0x0008)
struct FRigUnit_MapRange_Float final : public FRigUnit
{
public:
	float                                         Value;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinIn;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxIn;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinOut;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxOut;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Result;                                            // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_MapRange_Float) == 0x000008, "Wrong alignment on FRigUnit_MapRange_Float");
static_assert(sizeof(FRigUnit_MapRange_Float) == 0x000020, "Wrong size on FRigUnit_MapRange_Float");
static_assert(offsetof(FRigUnit_MapRange_Float, Value) == 0x000008, "Member 'FRigUnit_MapRange_Float::Value' has a wrong offset!");
static_assert(offsetof(FRigUnit_MapRange_Float, MinIn) == 0x00000C, "Member 'FRigUnit_MapRange_Float::MinIn' has a wrong offset!");
static_assert(offsetof(FRigUnit_MapRange_Float, MaxIn) == 0x000010, "Member 'FRigUnit_MapRange_Float::MaxIn' has a wrong offset!");
static_assert(offsetof(FRigUnit_MapRange_Float, MinOut) == 0x000014, "Member 'FRigUnit_MapRange_Float::MinOut' has a wrong offset!");
static_assert(offsetof(FRigUnit_MapRange_Float, MaxOut) == 0x000018, "Member 'FRigUnit_MapRange_Float::MaxOut' has a wrong offset!");
static_assert(offsetof(FRigUnit_MapRange_Float, Result) == 0x00001C, "Member 'FRigUnit_MapRange_Float::Result' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_ItemReplace
// 0x0028 (0x0030 - 0x0008)
struct FRigUnit_ItemReplace final : public FRigUnit_ItemBase
{
public:
	struct FRigElementKey                         Item;                                              // 0x0008(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Old;                                               // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   New;                                               // 0x001C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         Result;                                            // 0x0024(0x000C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_ItemReplace) == 0x000008, "Wrong alignment on FRigUnit_ItemReplace");
static_assert(sizeof(FRigUnit_ItemReplace) == 0x000030, "Wrong size on FRigUnit_ItemReplace");
static_assert(offsetof(FRigUnit_ItemReplace, Item) == 0x000008, "Member 'FRigUnit_ItemReplace::Item' has a wrong offset!");
static_assert(offsetof(FRigUnit_ItemReplace, Old) == 0x000014, "Member 'FRigUnit_ItemReplace::Old' has a wrong offset!");
static_assert(offsetof(FRigUnit_ItemReplace, New) == 0x00001C, "Member 'FRigUnit_ItemReplace::New' has a wrong offset!");
static_assert(offsetof(FRigUnit_ItemReplace, Result) == 0x000024, "Member 'FRigUnit_ItemReplace::Result' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_BinaryQuaternionOp
// 0x0068 (0x0070 - 0x0008)
struct FRigUnit_BinaryQuaternionOp : public FRigUnit
{
public:
	uint8                                         Pad_2AD4[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Argument0;                                         // 0x0010(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  Argument1;                                         // 0x0030(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  Result;                                            // 0x0050(0x0020)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_BinaryQuaternionOp) == 0x000010, "Wrong alignment on FRigUnit_BinaryQuaternionOp");
static_assert(sizeof(FRigUnit_BinaryQuaternionOp) == 0x000070, "Wrong size on FRigUnit_BinaryQuaternionOp");
static_assert(offsetof(FRigUnit_BinaryQuaternionOp, Argument0) == 0x000010, "Member 'FRigUnit_BinaryQuaternionOp::Argument0' has a wrong offset!");
static_assert(offsetof(FRigUnit_BinaryQuaternionOp, Argument1) == 0x000030, "Member 'FRigUnit_BinaryQuaternionOp::Argument1' has a wrong offset!");
static_assert(offsetof(FRigUnit_BinaryQuaternionOp, Result) == 0x000050, "Member 'FRigUnit_BinaryQuaternionOp::Result' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_MultiplyQuaternion
// 0x0000 (0x0070 - 0x0070)
struct FRigUnit_MultiplyQuaternion final : public FRigUnit_BinaryQuaternionOp
{
};
static_assert(alignof(FRigUnit_MultiplyQuaternion) == 0x000010, "Wrong alignment on FRigUnit_MultiplyQuaternion");
static_assert(sizeof(FRigUnit_MultiplyQuaternion) == 0x000070, "Wrong size on FRigUnit_MultiplyQuaternion");

// ScriptStruct ControlRig.RigUnit_InteractionExecution
// 0x0158 (0x0160 - 0x0008)
struct FRigUnit_InteractionExecution final : public FRigUnit
{
public:
	uint8                                         Pad_2AD5[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FControlRigExecuteContext              ExecuteContext;                                    // 0x0010(0x0150)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_InteractionExecution) == 0x000010, "Wrong alignment on FRigUnit_InteractionExecution");
static_assert(sizeof(FRigUnit_InteractionExecution) == 0x000160, "Wrong size on FRigUnit_InteractionExecution");
static_assert(offsetof(FRigUnit_InteractionExecution, ExecuteContext) == 0x000010, "Member 'FRigUnit_InteractionExecution::ExecuteContext' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_QuaternionToAxisAndAngle
// 0x0048 (0x0050 - 0x0008)
struct FRigUnit_QuaternionToAxisAndAngle final : public FRigUnit
{
public:
	uint8                                         Pad_2AD6[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Argument;                                          // 0x0010(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Axis;                                              // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AD7[0x4];                                     // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_QuaternionToAxisAndAngle) == 0x000010, "Wrong alignment on FRigUnit_QuaternionToAxisAndAngle");
static_assert(sizeof(FRigUnit_QuaternionToAxisAndAngle) == 0x000050, "Wrong size on FRigUnit_QuaternionToAxisAndAngle");
static_assert(offsetof(FRigUnit_QuaternionToAxisAndAngle, Argument) == 0x000010, "Member 'FRigUnit_QuaternionToAxisAndAngle::Argument' has a wrong offset!");
static_assert(offsetof(FRigUnit_QuaternionToAxisAndAngle, Axis) == 0x000030, "Member 'FRigUnit_QuaternionToAxisAndAngle::Axis' has a wrong offset!");
static_assert(offsetof(FRigUnit_QuaternionToAxisAndAngle, Angle) == 0x000048, "Member 'FRigUnit_QuaternionToAxisAndAngle::Angle' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_QuaternionToAngle
// 0x0048 (0x0050 - 0x0008)
struct FRigUnit_QuaternionToAngle final : public FRigUnit
{
public:
	struct FVector                                Axis;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  Argument;                                          // 0x0020(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AD8[0xC];                                     // 0x0044(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_QuaternionToAngle) == 0x000010, "Wrong alignment on FRigUnit_QuaternionToAngle");
static_assert(sizeof(FRigUnit_QuaternionToAngle) == 0x000050, "Wrong size on FRigUnit_QuaternionToAngle");
static_assert(offsetof(FRigUnit_QuaternionToAngle, Axis) == 0x000008, "Member 'FRigUnit_QuaternionToAngle::Axis' has a wrong offset!");
static_assert(offsetof(FRigUnit_QuaternionToAngle, Argument) == 0x000020, "Member 'FRigUnit_QuaternionToAngle::Argument' has a wrong offset!");
static_assert(offsetof(FRigUnit_QuaternionToAngle, Angle) == 0x000040, "Member 'FRigUnit_QuaternionToAngle::Angle' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_MultiplyTransform
// 0x0000 (0x0130 - 0x0130)
struct FRigUnit_MultiplyTransform final : public FRigUnit_BinaryTransformOp
{
};
static_assert(alignof(FRigUnit_MultiplyTransform) == 0x000010, "Wrong alignment on FRigUnit_MultiplyTransform");
static_assert(sizeof(FRigUnit_MultiplyTransform) == 0x000130, "Wrong size on FRigUnit_MultiplyTransform");

// ScriptStruct ControlRig.RigUnit_Add_VectorVector
// 0x0000 (0x0050 - 0x0050)
struct FRigUnit_Add_VectorVector final : public FRigUnit_BinaryVectorOp
{
};
static_assert(alignof(FRigUnit_Add_VectorVector) == 0x000008, "Wrong alignment on FRigUnit_Add_VectorVector");
static_assert(sizeof(FRigUnit_Add_VectorVector) == 0x000050, "Wrong size on FRigUnit_Add_VectorVector");

// ScriptStruct ControlRig.RigUnit_Divide_VectorVector
// 0x0000 (0x0050 - 0x0050)
struct FRigUnit_Divide_VectorVector final : public FRigUnit_BinaryVectorOp
{
};
static_assert(alignof(FRigUnit_Divide_VectorVector) == 0x000008, "Wrong alignment on FRigUnit_Divide_VectorVector");
static_assert(sizeof(FRigUnit_Divide_VectorVector) == 0x000050, "Wrong size on FRigUnit_Divide_VectorVector");

// ScriptStruct ControlRig.AimTarget
// 0x0090 (0x0090 - 0x0000)
struct FAimTarget final
{
public:
	float                                         Weight;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AD9[0xC];                                     // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AlignVector;                                       // 0x0070(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2ADA[0x8];                                     // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAimTarget) == 0x000010, "Wrong alignment on FAimTarget");
static_assert(sizeof(FAimTarget) == 0x000090, "Wrong size on FAimTarget");
static_assert(offsetof(FAimTarget, Weight) == 0x000000, "Member 'FAimTarget::Weight' has a wrong offset!");
static_assert(offsetof(FAimTarget, Transform) == 0x000010, "Member 'FAimTarget::Transform' has a wrong offset!");
static_assert(offsetof(FAimTarget, AlignVector) == 0x000070, "Member 'FAimTarget::AlignVector' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_AimConstraint
// 0x0070 (0x01D0 - 0x0160)
struct FRigUnit_AimConstraint final : public FRigUnitMutable
{
public:
	class FName                                   Joint;                                             // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAimMode                                      AimMode;                                           // 0x0168(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAimMode                                      UpMode;                                            // 0x0169(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2ADB[0x6];                                     // 0x016A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AimVector;                                         // 0x0170(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                UpVector;                                          // 0x0188(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAimTarget>                     AimTargets;                                        // 0x01A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAimTarget>                     UpTargets;                                         // 0x01B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FRigUnit_AimConstraint_WorkData        WorkData;                                          // 0x01C0(0x0010)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_AimConstraint) == 0x000010, "Wrong alignment on FRigUnit_AimConstraint");
static_assert(sizeof(FRigUnit_AimConstraint) == 0x0001D0, "Wrong size on FRigUnit_AimConstraint");
static_assert(offsetof(FRigUnit_AimConstraint, Joint) == 0x000160, "Member 'FRigUnit_AimConstraint::Joint' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimConstraint, AimMode) == 0x000168, "Member 'FRigUnit_AimConstraint::AimMode' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimConstraint, UpMode) == 0x000169, "Member 'FRigUnit_AimConstraint::UpMode' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimConstraint, AimVector) == 0x000170, "Member 'FRigUnit_AimConstraint::AimVector' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimConstraint, UpVector) == 0x000188, "Member 'FRigUnit_AimConstraint::UpVector' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimConstraint, AimTargets) == 0x0001A0, "Member 'FRigUnit_AimConstraint::AimTargets' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimConstraint, UpTargets) == 0x0001B0, "Member 'FRigUnit_AimConstraint::UpTargets' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimConstraint, WorkData) == 0x0001C0, "Member 'FRigUnit_AimConstraint::WorkData' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_GetJointTransform
// 0x00E0 (0x0240 - 0x0160)
struct FRigUnit_GetJointTransform final : public FRigUnitMutable
{
public:
	class FName                                   Joint;                                             // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETransformGetterType                          Type;                                              // 0x0168(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETransformSpaceMode                           TransformSpace;                                    // 0x0169(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2ADC[0x6];                                     // 0x016A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             BaseTransform;                                     // 0x0170(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BaseJoint;                                         // 0x01D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2ADD[0x8];                                     // 0x01D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Output;                                            // 0x01E0(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_GetJointTransform) == 0x000010, "Wrong alignment on FRigUnit_GetJointTransform");
static_assert(sizeof(FRigUnit_GetJointTransform) == 0x000240, "Wrong size on FRigUnit_GetJointTransform");
static_assert(offsetof(FRigUnit_GetJointTransform, Joint) == 0x000160, "Member 'FRigUnit_GetJointTransform::Joint' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetJointTransform, Type) == 0x000168, "Member 'FRigUnit_GetJointTransform::Type' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetJointTransform, TransformSpace) == 0x000169, "Member 'FRigUnit_GetJointTransform::TransformSpace' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetJointTransform, BaseTransform) == 0x000170, "Member 'FRigUnit_GetJointTransform::BaseTransform' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetJointTransform, BaseJoint) == 0x0001D0, "Member 'FRigUnit_GetJointTransform::BaseJoint' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetJointTransform, Output) == 0x0001E0, "Member 'FRigUnit_GetJointTransform::Output' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_DrawContainerGetInstruction
// 0x0078 (0x0080 - 0x0008)
struct FRigUnit_DrawContainerGetInstruction final : public FRigUnit
{
public:
	class FName                                   InstructionName;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Transform;                                         // 0x0020(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_DrawContainerGetInstruction) == 0x000010, "Wrong alignment on FRigUnit_DrawContainerGetInstruction");
static_assert(sizeof(FRigUnit_DrawContainerGetInstruction) == 0x000080, "Wrong size on FRigUnit_DrawContainerGetInstruction");
static_assert(offsetof(FRigUnit_DrawContainerGetInstruction, InstructionName) == 0x000008, "Member 'FRigUnit_DrawContainerGetInstruction::InstructionName' has a wrong offset!");
static_assert(offsetof(FRigUnit_DrawContainerGetInstruction, Color) == 0x000010, "Member 'FRigUnit_DrawContainerGetInstruction::Color' has a wrong offset!");
static_assert(offsetof(FRigUnit_DrawContainerGetInstruction, Transform) == 0x000020, "Member 'FRigUnit_DrawContainerGetInstruction::Transform' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_CollectionBaseMutable
// 0x0000 (0x0160 - 0x0160)
struct FRigUnit_CollectionBaseMutable : public FRigUnitMutable
{
};
static_assert(alignof(FRigUnit_CollectionBaseMutable) == 0x000010, "Wrong alignment on FRigUnit_CollectionBaseMutable");
static_assert(sizeof(FRigUnit_CollectionBaseMutable) == 0x000160, "Wrong size on FRigUnit_CollectionBaseMutable");

// ScriptStruct ControlRig.RigUnit_CollectionChainArray
// 0x0030 (0x0038 - 0x0008)
struct FRigUnit_CollectionChainArray final : public FRigUnit_CollectionBase
{
public:
	struct FRigElementKey                         FirstItem;                                         // 0x0008(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         LastItem;                                          // 0x0014(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Reverse;                                           // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2ADE[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigElementKey>                 Items;                                             // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_CollectionChainArray) == 0x000008, "Wrong alignment on FRigUnit_CollectionChainArray");
static_assert(sizeof(FRigUnit_CollectionChainArray) == 0x000038, "Wrong size on FRigUnit_CollectionChainArray");
static_assert(offsetof(FRigUnit_CollectionChainArray, FirstItem) == 0x000008, "Member 'FRigUnit_CollectionChainArray::FirstItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionChainArray, LastItem) == 0x000014, "Member 'FRigUnit_CollectionChainArray::LastItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionChainArray, Reverse) == 0x000020, "Member 'FRigUnit_CollectionChainArray::Reverse' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionChainArray, Items) == 0x000028, "Member 'FRigUnit_CollectionChainArray::Items' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_CollectionNameSearchArray
// 0x0020 (0x0028 - 0x0008)
struct FRigUnit_CollectionNameSearchArray final : public FRigUnit_CollectionBase
{
public:
	class FName                                   PartialName;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigElementType                               TypeToSearch;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2ADF[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigElementKey>                 Items;                                             // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_CollectionNameSearchArray) == 0x000008, "Wrong alignment on FRigUnit_CollectionNameSearchArray");
static_assert(sizeof(FRigUnit_CollectionNameSearchArray) == 0x000028, "Wrong size on FRigUnit_CollectionNameSearchArray");
static_assert(offsetof(FRigUnit_CollectionNameSearchArray, PartialName) == 0x000008, "Member 'FRigUnit_CollectionNameSearchArray::PartialName' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionNameSearchArray, TypeToSearch) == 0x000010, "Member 'FRigUnit_CollectionNameSearchArray::TypeToSearch' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionNameSearchArray, Items) == 0x000018, "Member 'FRigUnit_CollectionNameSearchArray::Items' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_CollectionChildrenArray
// 0x0020 (0x0028 - 0x0008)
struct FRigUnit_CollectionChildrenArray final : public FRigUnit_CollectionBase
{
public:
	struct FRigElementKey                         Parent;                                            // 0x0008(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeParent;                                    // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecursive;                                        // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigElementType                               TypeToSearch;                                      // 0x0016(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AE0[0x1];                                     // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigElementKey>                 Items;                                             // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_CollectionChildrenArray) == 0x000008, "Wrong alignment on FRigUnit_CollectionChildrenArray");
static_assert(sizeof(FRigUnit_CollectionChildrenArray) == 0x000028, "Wrong size on FRigUnit_CollectionChildrenArray");
static_assert(offsetof(FRigUnit_CollectionChildrenArray, Parent) == 0x000008, "Member 'FRigUnit_CollectionChildrenArray::Parent' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionChildrenArray, bIncludeParent) == 0x000014, "Member 'FRigUnit_CollectionChildrenArray::bIncludeParent' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionChildrenArray, bRecursive) == 0x000015, "Member 'FRigUnit_CollectionChildrenArray::bRecursive' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionChildrenArray, TypeToSearch) == 0x000016, "Member 'FRigUnit_CollectionChildrenArray::TypeToSearch' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionChildrenArray, Items) == 0x000018, "Member 'FRigUnit_CollectionChildrenArray::Items' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_CollectionReplaceItems
// 0x0038 (0x0040 - 0x0008)
struct FRigUnit_CollectionReplaceItems final : public FRigUnit_CollectionBase
{
public:
	struct FRigElementKeyCollection               Items;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Old;                                               // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   New;                                               // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RemoveInvalidItems;                                // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowDuplicates;                                  // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AE1[0x6];                                     // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKeyCollection               Collection;                                        // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_CollectionReplaceItems) == 0x000008, "Wrong alignment on FRigUnit_CollectionReplaceItems");
static_assert(sizeof(FRigUnit_CollectionReplaceItems) == 0x000040, "Wrong size on FRigUnit_CollectionReplaceItems");
static_assert(offsetof(FRigUnit_CollectionReplaceItems, Items) == 0x000008, "Member 'FRigUnit_CollectionReplaceItems::Items' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionReplaceItems, Old) == 0x000018, "Member 'FRigUnit_CollectionReplaceItems::Old' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionReplaceItems, New) == 0x000020, "Member 'FRigUnit_CollectionReplaceItems::New' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionReplaceItems, RemoveInvalidItems) == 0x000028, "Member 'FRigUnit_CollectionReplaceItems::RemoveInvalidItems' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionReplaceItems, bAllowDuplicates) == 0x000029, "Member 'FRigUnit_CollectionReplaceItems::bAllowDuplicates' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionReplaceItems, Collection) == 0x000030, "Member 'FRigUnit_CollectionReplaceItems::Collection' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_CollectionItems
// 0x0028 (0x0030 - 0x0008)
struct FRigUnit_CollectionItems final : public FRigUnit_CollectionBase
{
public:
	TArray<struct FRigElementKey>                 Items;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bAllowDuplicates;                                  // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AE2[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKeyCollection               Collection;                                        // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_CollectionItems) == 0x000008, "Wrong alignment on FRigUnit_CollectionItems");
static_assert(sizeof(FRigUnit_CollectionItems) == 0x000030, "Wrong size on FRigUnit_CollectionItems");
static_assert(offsetof(FRigUnit_CollectionItems, Items) == 0x000008, "Member 'FRigUnit_CollectionItems::Items' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionItems, bAllowDuplicates) == 0x000018, "Member 'FRigUnit_CollectionItems::bAllowDuplicates' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionItems, Collection) == 0x000020, "Member 'FRigUnit_CollectionItems::Collection' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_CollectionGetParentIndices
// 0x0020 (0x0028 - 0x0008)
struct FRigUnit_CollectionGetParentIndices final : public FRigUnit_CollectionBase
{
public:
	struct FRigElementKeyCollection               Collection;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ParentIndices;                                     // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_CollectionGetParentIndices) == 0x000008, "Wrong alignment on FRigUnit_CollectionGetParentIndices");
static_assert(sizeof(FRigUnit_CollectionGetParentIndices) == 0x000028, "Wrong size on FRigUnit_CollectionGetParentIndices");
static_assert(offsetof(FRigUnit_CollectionGetParentIndices, Collection) == 0x000008, "Member 'FRigUnit_CollectionGetParentIndices::Collection' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionGetParentIndices, ParentIndices) == 0x000018, "Member 'FRigUnit_CollectionGetParentIndices::ParentIndices' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_CollectionUnion
// 0x0038 (0x0040 - 0x0008)
struct FRigUnit_CollectionUnion final : public FRigUnit_CollectionBase
{
public:
	struct FRigElementKeyCollection               A;                                                 // 0x0008(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKeyCollection               B;                                                 // 0x0018(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowDuplicates;                                  // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AE3[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKeyCollection               Collection;                                        // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_CollectionUnion) == 0x000008, "Wrong alignment on FRigUnit_CollectionUnion");
static_assert(sizeof(FRigUnit_CollectionUnion) == 0x000040, "Wrong size on FRigUnit_CollectionUnion");
static_assert(offsetof(FRigUnit_CollectionUnion, A) == 0x000008, "Member 'FRigUnit_CollectionUnion::A' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionUnion, B) == 0x000018, "Member 'FRigUnit_CollectionUnion::B' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionUnion, bAllowDuplicates) == 0x000028, "Member 'FRigUnit_CollectionUnion::bAllowDuplicates' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionUnion, Collection) == 0x000030, "Member 'FRigUnit_CollectionUnion::Collection' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_PointSimulation_DebugSettings
// 0x0080 (0x0080 - 0x0000)
struct FRigUnit_PointSimulation_DebugSettings final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AE4[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Scale;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollisionScale;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawPointsAsSpheres;                              // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AE5[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             WorldOffset;                                       // 0x0020(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_PointSimulation_DebugSettings) == 0x000010, "Wrong alignment on FRigUnit_PointSimulation_DebugSettings");
static_assert(sizeof(FRigUnit_PointSimulation_DebugSettings) == 0x000080, "Wrong size on FRigUnit_PointSimulation_DebugSettings");
static_assert(offsetof(FRigUnit_PointSimulation_DebugSettings, bEnabled) == 0x000000, "Member 'FRigUnit_PointSimulation_DebugSettings::bEnabled' has a wrong offset!");
static_assert(offsetof(FRigUnit_PointSimulation_DebugSettings, Scale) == 0x000004, "Member 'FRigUnit_PointSimulation_DebugSettings::Scale' has a wrong offset!");
static_assert(offsetof(FRigUnit_PointSimulation_DebugSettings, CollisionScale) == 0x000008, "Member 'FRigUnit_PointSimulation_DebugSettings::CollisionScale' has a wrong offset!");
static_assert(offsetof(FRigUnit_PointSimulation_DebugSettings, bDrawPointsAsSpheres) == 0x00000C, "Member 'FRigUnit_PointSimulation_DebugSettings::bDrawPointsAsSpheres' has a wrong offset!");
static_assert(offsetof(FRigUnit_PointSimulation_DebugSettings, Color) == 0x000010, "Member 'FRigUnit_PointSimulation_DebugSettings::Color' has a wrong offset!");
static_assert(offsetof(FRigUnit_PointSimulation_DebugSettings, WorldOffset) == 0x000020, "Member 'FRigUnit_PointSimulation_DebugSettings::WorldOffset' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_CollectionCount
// 0x0018 (0x0020 - 0x0008)
struct FRigUnit_CollectionCount final : public FRigUnit_CollectionBase
{
public:
	struct FRigElementKeyCollection               Collection;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AE6[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_CollectionCount) == 0x000008, "Wrong alignment on FRigUnit_CollectionCount");
static_assert(sizeof(FRigUnit_CollectionCount) == 0x000020, "Wrong size on FRigUnit_CollectionCount");
static_assert(offsetof(FRigUnit_CollectionCount, Collection) == 0x000008, "Member 'FRigUnit_CollectionCount::Collection' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionCount, Count) == 0x000018, "Member 'FRigUnit_CollectionCount::Count' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_CollectionLoop
// 0x0180 (0x02E0 - 0x0160)
struct FRigUnit_CollectionLoop final : public FRigUnit_CollectionBaseMutable
{
public:
	class FName                                   BlockToRun;                                        // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKeyCollection               Collection;                                        // 0x0168(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         Item;                                              // 0x0178(0x000C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index;                                             // 0x0184(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0188(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ratio;                                             // 0x018C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FControlRigExecuteContext              Completed;                                         // 0x0190(0x0150)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_CollectionLoop) == 0x000010, "Wrong alignment on FRigUnit_CollectionLoop");
static_assert(sizeof(FRigUnit_CollectionLoop) == 0x0002E0, "Wrong size on FRigUnit_CollectionLoop");
static_assert(offsetof(FRigUnit_CollectionLoop, BlockToRun) == 0x000160, "Member 'FRigUnit_CollectionLoop::BlockToRun' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionLoop, Collection) == 0x000168, "Member 'FRigUnit_CollectionLoop::Collection' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionLoop, Item) == 0x000178, "Member 'FRigUnit_CollectionLoop::Item' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionLoop, Index) == 0x000184, "Member 'FRigUnit_CollectionLoop::Index' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionLoop, Count) == 0x000188, "Member 'FRigUnit_CollectionLoop::Count' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionLoop, Ratio) == 0x00018C, "Member 'FRigUnit_CollectionLoop::Ratio' has a wrong offset!");
static_assert(offsetof(FRigUnit_CollectionLoop, Completed) == 0x000190, "Member 'FRigUnit_CollectionLoop::Completed' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_AddParent
// 0x0020 (0x0180 - 0x0160)
struct FRigUnit_AddParent final : public FRigUnit_DynamicHierarchyBaseMutable
{
public:
	struct FRigElementKey                         Child;                                             // 0x0160(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         Parent;                                            // 0x016C(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AE7[0x8];                                     // 0x0178(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_AddParent) == 0x000010, "Wrong alignment on FRigUnit_AddParent");
static_assert(sizeof(FRigUnit_AddParent) == 0x000180, "Wrong size on FRigUnit_AddParent");
static_assert(offsetof(FRigUnit_AddParent, Child) == 0x000160, "Member 'FRigUnit_AddParent::Child' has a wrong offset!");
static_assert(offsetof(FRigUnit_AddParent, Parent) == 0x00016C, "Member 'FRigUnit_AddParent::Parent' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SpringInterpQuaternionV2
// 0x0128 (0x0130 - 0x0008)
struct FRigUnit_SpringInterpQuaternionV2 final : public FRigVMFunction_SimBase
{
public:
	uint8                                         Pad_2AE8[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Target;                                            // 0x0010(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Strength;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CriticalDamping;                                   // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Torque;                                            // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCurrentInput;                                  // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AE9[0xF];                                     // 0x0051(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Current;                                           // 0x0060(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetVelocityAmount;                              // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitializeFromTarget;                             // 0x0084(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AEA[0xB];                                     // 0x0085(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Result;                                            // 0x0090(0x0020)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AngularVelocity;                                   // 0x00B0(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AEB[0x8];                                     // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  SimulatedResult;                                   // 0x00D0(0x0020)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuaternionSpringState                 SpringState;                                       // 0x00F0(0x0040)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_SpringInterpQuaternionV2) == 0x000010, "Wrong alignment on FRigUnit_SpringInterpQuaternionV2");
static_assert(sizeof(FRigUnit_SpringInterpQuaternionV2) == 0x000130, "Wrong size on FRigUnit_SpringInterpQuaternionV2");
static_assert(offsetof(FRigUnit_SpringInterpQuaternionV2, Target) == 0x000010, "Member 'FRigUnit_SpringInterpQuaternionV2::Target' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringInterpQuaternionV2, Strength) == 0x000030, "Member 'FRigUnit_SpringInterpQuaternionV2::Strength' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringInterpQuaternionV2, CriticalDamping) == 0x000034, "Member 'FRigUnit_SpringInterpQuaternionV2::CriticalDamping' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringInterpQuaternionV2, Torque) == 0x000038, "Member 'FRigUnit_SpringInterpQuaternionV2::Torque' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringInterpQuaternionV2, bUseCurrentInput) == 0x000050, "Member 'FRigUnit_SpringInterpQuaternionV2::bUseCurrentInput' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringInterpQuaternionV2, Current) == 0x000060, "Member 'FRigUnit_SpringInterpQuaternionV2::Current' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringInterpQuaternionV2, TargetVelocityAmount) == 0x000080, "Member 'FRigUnit_SpringInterpQuaternionV2::TargetVelocityAmount' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringInterpQuaternionV2, bInitializeFromTarget) == 0x000084, "Member 'FRigUnit_SpringInterpQuaternionV2::bInitializeFromTarget' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringInterpQuaternionV2, Result) == 0x000090, "Member 'FRigUnit_SpringInterpQuaternionV2::Result' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringInterpQuaternionV2, AngularVelocity) == 0x0000B0, "Member 'FRigUnit_SpringInterpQuaternionV2::AngularVelocity' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringInterpQuaternionV2, SimulatedResult) == 0x0000D0, "Member 'FRigUnit_SpringInterpQuaternionV2::SimulatedResult' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringInterpQuaternionV2, SpringState) == 0x0000F0, "Member 'FRigUnit_SpringInterpQuaternionV2::SpringState' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SwitchParent
// 0x0020 (0x0180 - 0x0160)
struct FRigUnit_SwitchParent final : public FRigUnit_DynamicHierarchyBaseMutable
{
public:
	ERigSwitchParentMode                          Mode;                                              // 0x0160(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AEC[0x3];                                     // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKey                         Child;                                             // 0x0164(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         Parent;                                            // 0x0170(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMaintainGlobal;                                   // 0x017C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AED[0x3];                                     // 0x017D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_SwitchParent) == 0x000010, "Wrong alignment on FRigUnit_SwitchParent");
static_assert(sizeof(FRigUnit_SwitchParent) == 0x000180, "Wrong size on FRigUnit_SwitchParent");
static_assert(offsetof(FRigUnit_SwitchParent, Mode) == 0x000160, "Member 'FRigUnit_SwitchParent::Mode' has a wrong offset!");
static_assert(offsetof(FRigUnit_SwitchParent, Child) == 0x000164, "Member 'FRigUnit_SwitchParent::Child' has a wrong offset!");
static_assert(offsetof(FRigUnit_SwitchParent, Parent) == 0x000170, "Member 'FRigUnit_SwitchParent::Parent' has a wrong offset!");
static_assert(offsetof(FRigUnit_SwitchParent, bMaintainGlobal) == 0x00017C, "Member 'FRigUnit_SwitchParent::bMaintainGlobal' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_HierarchyGetParentWeightsArray
// 0x0030 (0x0038 - 0x0008)
struct FRigUnit_HierarchyGetParentWeightsArray final : public FRigUnit_DynamicHierarchyBase
{
public:
	struct FRigElementKey                         Child;                                             // 0x0008(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AEE[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigElementWeight>              Weights;                                           // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRigElementKey>                 Parents;                                           // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_HierarchyGetParentWeightsArray) == 0x000008, "Wrong alignment on FRigUnit_HierarchyGetParentWeightsArray");
static_assert(sizeof(FRigUnit_HierarchyGetParentWeightsArray) == 0x000038, "Wrong size on FRigUnit_HierarchyGetParentWeightsArray");
static_assert(offsetof(FRigUnit_HierarchyGetParentWeightsArray, Child) == 0x000008, "Member 'FRigUnit_HierarchyGetParentWeightsArray::Child' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyGetParentWeightsArray, Weights) == 0x000018, "Member 'FRigUnit_HierarchyGetParentWeightsArray::Weights' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyGetParentWeightsArray, Parents) == 0x000028, "Member 'FRigUnit_HierarchyGetParentWeightsArray::Parents' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_HierarchyReset
// 0x0000 (0x0160 - 0x0160)
struct FRigUnit_HierarchyReset final : public FRigUnit_DynamicHierarchyBaseMutable
{
};
static_assert(alignof(FRigUnit_HierarchyReset) == 0x000010, "Wrong alignment on FRigUnit_HierarchyReset");
static_assert(sizeof(FRigUnit_HierarchyReset) == 0x000160, "Wrong size on FRigUnit_HierarchyReset");

// ScriptStruct ControlRig.RigUnit_HierarchyRemoveElement
// 0x0010 (0x0170 - 0x0160)
struct FRigUnit_HierarchyRemoveElement final : public FRigUnit_DynamicHierarchyBaseMutable
{
public:
	struct FRigElementKey                         Item;                                              // 0x0160(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x016C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AEF[0x3];                                     // 0x016D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_HierarchyRemoveElement) == 0x000010, "Wrong alignment on FRigUnit_HierarchyRemoveElement");
static_assert(sizeof(FRigUnit_HierarchyRemoveElement) == 0x000170, "Wrong size on FRigUnit_HierarchyRemoveElement");
static_assert(offsetof(FRigUnit_HierarchyRemoveElement, Item) == 0x000160, "Member 'FRigUnit_HierarchyRemoveElement::Item' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyRemoveElement, bSuccess) == 0x00016C, "Member 'FRigUnit_HierarchyRemoveElement::bSuccess' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_HierarchyAddControlFloat_Settings
// 0x00C0 (0x00D0 - 0x0010)
struct FRigUnit_HierarchyAddControlFloat_Settings final : public FRigUnit_HierarchyAddControl_Settings
{
public:
	ERigControlAxis                               PrimaryAxis;                                       // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AF0[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_HierarchyAddControlFloat_LimitSettings Limits;                                            // 0x0014(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AF1[0xC];                                     // 0x0024(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_HierarchyAddControl_ShapeSettings Shape;                                             // 0x0030(0x0080)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRigUnit_HierarchyAddControl_ProxySettings Proxy;                                             // 0x00B0(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_HierarchyAddControlFloat_Settings) == 0x000010, "Wrong alignment on FRigUnit_HierarchyAddControlFloat_Settings");
static_assert(sizeof(FRigUnit_HierarchyAddControlFloat_Settings) == 0x0000D0, "Wrong size on FRigUnit_HierarchyAddControlFloat_Settings");
static_assert(offsetof(FRigUnit_HierarchyAddControlFloat_Settings, PrimaryAxis) == 0x000010, "Member 'FRigUnit_HierarchyAddControlFloat_Settings::PrimaryAxis' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControlFloat_Settings, Limits) == 0x000014, "Member 'FRigUnit_HierarchyAddControlFloat_Settings::Limits' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControlFloat_Settings, Shape) == 0x000030, "Member 'FRigUnit_HierarchyAddControlFloat_Settings::Shape' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControlFloat_Settings, Proxy) == 0x0000B0, "Member 'FRigUnit_HierarchyAddControlFloat_Settings::Proxy' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_HierarchyAddControlFloat
// 0x00D0 (0x02C0 - 0x01F0)
struct FRigUnit_HierarchyAddControlFloat final : public FRigUnit_HierarchyAddControlElement
{
public:
	float                                         InitialValue;                                      // 0x01E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AF2[0x4];                                     // 0x01EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_HierarchyAddControlFloat_Settings Settings;                                          // 0x01F0(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_HierarchyAddControlFloat) == 0x000010, "Wrong alignment on FRigUnit_HierarchyAddControlFloat");
static_assert(sizeof(FRigUnit_HierarchyAddControlFloat) == 0x0002C0, "Wrong size on FRigUnit_HierarchyAddControlFloat");
static_assert(offsetof(FRigUnit_HierarchyAddControlFloat, InitialValue) == 0x0001E8, "Member 'FRigUnit_HierarchyAddControlFloat::InitialValue' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControlFloat, Settings) == 0x0001F0, "Member 'FRigUnit_HierarchyAddControlFloat::Settings' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_HierarchyAddControlVector2D
// 0x0110 (0x0300 - 0x01F0)
struct FRigUnit_HierarchyAddControlVector2D final : public FRigUnit_HierarchyAddControlElement
{
public:
	struct FVector2D                              InitialValue;                                      // 0x01E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AF3[0x8];                                     // 0x01F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_HierarchyAddControlVector2D_Settings Settings;                                          // 0x0200(0x0100)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_HierarchyAddControlVector2D) == 0x000010, "Wrong alignment on FRigUnit_HierarchyAddControlVector2D");
static_assert(sizeof(FRigUnit_HierarchyAddControlVector2D) == 0x000300, "Wrong size on FRigUnit_HierarchyAddControlVector2D");
static_assert(offsetof(FRigUnit_HierarchyAddControlVector2D, InitialValue) == 0x0001E8, "Member 'FRigUnit_HierarchyAddControlVector2D::InitialValue' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControlVector2D, Settings) == 0x000200, "Member 'FRigUnit_HierarchyAddControlVector2D::Settings' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_HierarchyAddControlRotator
// 0x0120 (0x0310 - 0x01F0)
struct FRigUnit_HierarchyAddControlRotator final : public FRigUnit_HierarchyAddControlElement
{
public:
	struct FRotator                               InitialValue;                                      // 0x01E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRigUnit_HierarchyAddControlRotator_Settings Settings;                                          // 0x0200(0x0110)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_HierarchyAddControlRotator) == 0x000010, "Wrong alignment on FRigUnit_HierarchyAddControlRotator");
static_assert(sizeof(FRigUnit_HierarchyAddControlRotator) == 0x000310, "Wrong size on FRigUnit_HierarchyAddControlRotator");
static_assert(offsetof(FRigUnit_HierarchyAddControlRotator, InitialValue) == 0x0001E8, "Member 'FRigUnit_HierarchyAddControlRotator::InitialValue' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControlRotator, Settings) == 0x000200, "Member 'FRigUnit_HierarchyAddControlRotator::Settings' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_HierarchyAddControlTransform
// 0x0130 (0x0320 - 0x01F0)
struct FRigUnit_HierarchyAddControlTransform final : public FRigUnit_HierarchyAddControlElement
{
public:
	uint8                                         Pad_2AF4[0x8];                                     // 0x01E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InitialValue;                                      // 0x01F0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigUnit_HierarchyAddControlTransform_Settings Settings;                                          // 0x0250(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_HierarchyAddControlTransform) == 0x000010, "Wrong alignment on FRigUnit_HierarchyAddControlTransform");
static_assert(sizeof(FRigUnit_HierarchyAddControlTransform) == 0x000320, "Wrong size on FRigUnit_HierarchyAddControlTransform");
static_assert(offsetof(FRigUnit_HierarchyAddControlTransform, InitialValue) == 0x0001F0, "Member 'FRigUnit_HierarchyAddControlTransform::InitialValue' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddControlTransform, Settings) == 0x000250, "Member 'FRigUnit_HierarchyAddControlTransform::Settings' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_HierarchyAddAnimationChannelFloat
// 0x0010 (0x0190 - 0x0180)
struct FRigUnit_HierarchyAddAnimationChannelFloat final : public FRigUnit_HierarchyAddElement
{
public:
	float                                         InitialValue;                                      // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumValue;                                      // 0x0184(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaximumValue;                                      // 0x0188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AF5[0x4];                                     // 0x018C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_HierarchyAddAnimationChannelFloat) == 0x000010, "Wrong alignment on FRigUnit_HierarchyAddAnimationChannelFloat");
static_assert(sizeof(FRigUnit_HierarchyAddAnimationChannelFloat) == 0x000190, "Wrong size on FRigUnit_HierarchyAddAnimationChannelFloat");
static_assert(offsetof(FRigUnit_HierarchyAddAnimationChannelFloat, InitialValue) == 0x000180, "Member 'FRigUnit_HierarchyAddAnimationChannelFloat::InitialValue' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddAnimationChannelFloat, MinimumValue) == 0x000184, "Member 'FRigUnit_HierarchyAddAnimationChannelFloat::MinimumValue' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddAnimationChannelFloat, MaximumValue) == 0x000188, "Member 'FRigUnit_HierarchyAddAnimationChannelFloat::MaximumValue' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_HierarchyAddAnimationChannelVector2D
// 0x0030 (0x01B0 - 0x0180)
struct FRigUnit_HierarchyAddAnimationChannelVector2D final : public FRigUnit_HierarchyAddElement
{
public:
	struct FVector2D                              InitialValue;                                      // 0x0180(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MinimumValue;                                      // 0x0190(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MaximumValue;                                      // 0x01A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_HierarchyAddAnimationChannelVector2D) == 0x000010, "Wrong alignment on FRigUnit_HierarchyAddAnimationChannelVector2D");
static_assert(sizeof(FRigUnit_HierarchyAddAnimationChannelVector2D) == 0x0001B0, "Wrong size on FRigUnit_HierarchyAddAnimationChannelVector2D");
static_assert(offsetof(FRigUnit_HierarchyAddAnimationChannelVector2D, InitialValue) == 0x000180, "Member 'FRigUnit_HierarchyAddAnimationChannelVector2D::InitialValue' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddAnimationChannelVector2D, MinimumValue) == 0x000190, "Member 'FRigUnit_HierarchyAddAnimationChannelVector2D::MinimumValue' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddAnimationChannelVector2D, MaximumValue) == 0x0001A0, "Member 'FRigUnit_HierarchyAddAnimationChannelVector2D::MaximumValue' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_CCDIK_RotationLimit
// 0x000C (0x000C - 0x0000)
struct FRigUnit_CCDIK_RotationLimit final
{
public:
	class FName                                   bone;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Limit;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_CCDIK_RotationLimit) == 0x000004, "Wrong alignment on FRigUnit_CCDIK_RotationLimit");
static_assert(sizeof(FRigUnit_CCDIK_RotationLimit) == 0x00000C, "Wrong size on FRigUnit_CCDIK_RotationLimit");
static_assert(offsetof(FRigUnit_CCDIK_RotationLimit, bone) == 0x000000, "Member 'FRigUnit_CCDIK_RotationLimit::bone' has a wrong offset!");
static_assert(offsetof(FRigUnit_CCDIK_RotationLimit, Limit) == 0x000008, "Member 'FRigUnit_CCDIK_RotationLimit::Limit' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_CCDIK_WorkData
// 0x0060 (0x0060 - 0x0000)
struct FRigUnit_CCDIK_WorkData final
{
public:
	TArray<struct FCCDIKChainLink>                Chain;                                             // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCachedRigElement>              CachedItems;                                       // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 RotationLimitIndex;                                // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 RotationLimitsPerItem;                             // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedEffector;                                    // 0x0040(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_CCDIK_WorkData) == 0x000008, "Wrong alignment on FRigUnit_CCDIK_WorkData");
static_assert(sizeof(FRigUnit_CCDIK_WorkData) == 0x000060, "Wrong size on FRigUnit_CCDIK_WorkData");
static_assert(offsetof(FRigUnit_CCDIK_WorkData, Chain) == 0x000000, "Member 'FRigUnit_CCDIK_WorkData::Chain' has a wrong offset!");
static_assert(offsetof(FRigUnit_CCDIK_WorkData, CachedItems) == 0x000010, "Member 'FRigUnit_CCDIK_WorkData::CachedItems' has a wrong offset!");
static_assert(offsetof(FRigUnit_CCDIK_WorkData, RotationLimitIndex) == 0x000020, "Member 'FRigUnit_CCDIK_WorkData::RotationLimitIndex' has a wrong offset!");
static_assert(offsetof(FRigUnit_CCDIK_WorkData, RotationLimitsPerItem) == 0x000030, "Member 'FRigUnit_CCDIK_WorkData::RotationLimitsPerItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_CCDIK_WorkData, CachedEffector) == 0x000040, "Member 'FRigUnit_CCDIK_WorkData::CachedEffector' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_CCDIK
// 0x0100 (0x0260 - 0x0160)
struct FRigUnit_CCDIK final : public FRigUnit_HighlevelBaseMutable
{
public:
	class FName                                   StartBone;                                         // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EffectorBone;                                      // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             EffectorTransform;                                 // 0x0170(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Precision;                                         // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x01D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxIterations;                                     // 0x01D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStartFromTail;                                    // 0x01DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AF6[0x3];                                     // 0x01DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BaseRotationLimit;                                 // 0x01E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AF7[0x4];                                     // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigUnit_CCDIK_RotationLimit>   RotationLimits;                                    // 0x01E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x01F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AF8[0x7];                                     // 0x01F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_CCDIK_WorkData                WorkData;                                          // 0x0200(0x0060)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_CCDIK) == 0x000010, "Wrong alignment on FRigUnit_CCDIK");
static_assert(sizeof(FRigUnit_CCDIK) == 0x000260, "Wrong size on FRigUnit_CCDIK");
static_assert(offsetof(FRigUnit_CCDIK, StartBone) == 0x000160, "Member 'FRigUnit_CCDIK::StartBone' has a wrong offset!");
static_assert(offsetof(FRigUnit_CCDIK, EffectorBone) == 0x000168, "Member 'FRigUnit_CCDIK::EffectorBone' has a wrong offset!");
static_assert(offsetof(FRigUnit_CCDIK, EffectorTransform) == 0x000170, "Member 'FRigUnit_CCDIK::EffectorTransform' has a wrong offset!");
static_assert(offsetof(FRigUnit_CCDIK, Precision) == 0x0001D0, "Member 'FRigUnit_CCDIK::Precision' has a wrong offset!");
static_assert(offsetof(FRigUnit_CCDIK, Weight) == 0x0001D4, "Member 'FRigUnit_CCDIK::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_CCDIK, MaxIterations) == 0x0001D8, "Member 'FRigUnit_CCDIK::MaxIterations' has a wrong offset!");
static_assert(offsetof(FRigUnit_CCDIK, bStartFromTail) == 0x0001DC, "Member 'FRigUnit_CCDIK::bStartFromTail' has a wrong offset!");
static_assert(offsetof(FRigUnit_CCDIK, BaseRotationLimit) == 0x0001E0, "Member 'FRigUnit_CCDIK::BaseRotationLimit' has a wrong offset!");
static_assert(offsetof(FRigUnit_CCDIK, RotationLimits) == 0x0001E8, "Member 'FRigUnit_CCDIK::RotationLimits' has a wrong offset!");
static_assert(offsetof(FRigUnit_CCDIK, bPropagateToChildren) == 0x0001F8, "Member 'FRigUnit_CCDIK::bPropagateToChildren' has a wrong offset!");
static_assert(offsetof(FRigUnit_CCDIK, WorkData) == 0x000200, "Member 'FRigUnit_CCDIK::WorkData' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_HierarchyAddAnimationChannelVector
// 0x0050 (0x01D0 - 0x0180)
struct FRigUnit_HierarchyAddAnimationChannelVector final : public FRigUnit_HierarchyAddElement
{
public:
	struct FVector                                InitialValue;                                      // 0x0180(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MinimumValue;                                      // 0x0198(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MaximumValue;                                      // 0x01B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AF9[0x8];                                     // 0x01C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_HierarchyAddAnimationChannelVector) == 0x000010, "Wrong alignment on FRigUnit_HierarchyAddAnimationChannelVector");
static_assert(sizeof(FRigUnit_HierarchyAddAnimationChannelVector) == 0x0001D0, "Wrong size on FRigUnit_HierarchyAddAnimationChannelVector");
static_assert(offsetof(FRigUnit_HierarchyAddAnimationChannelVector, InitialValue) == 0x000180, "Member 'FRigUnit_HierarchyAddAnimationChannelVector::InitialValue' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddAnimationChannelVector, MinimumValue) == 0x000198, "Member 'FRigUnit_HierarchyAddAnimationChannelVector::MinimumValue' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddAnimationChannelVector, MaximumValue) == 0x0001B0, "Member 'FRigUnit_HierarchyAddAnimationChannelVector::MaximumValue' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_HierarchyAddAnimationChannelRotator
// 0x0050 (0x01D0 - 0x0180)
struct FRigUnit_HierarchyAddAnimationChannelRotator final : public FRigUnit_HierarchyAddElement
{
public:
	struct FRotator                               InitialValue;                                      // 0x0180(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               MinimumValue;                                      // 0x0198(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               MaximumValue;                                      // 0x01B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AFA[0x8];                                     // 0x01C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_HierarchyAddAnimationChannelRotator) == 0x000010, "Wrong alignment on FRigUnit_HierarchyAddAnimationChannelRotator");
static_assert(sizeof(FRigUnit_HierarchyAddAnimationChannelRotator) == 0x0001D0, "Wrong size on FRigUnit_HierarchyAddAnimationChannelRotator");
static_assert(offsetof(FRigUnit_HierarchyAddAnimationChannelRotator, InitialValue) == 0x000180, "Member 'FRigUnit_HierarchyAddAnimationChannelRotator::InitialValue' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddAnimationChannelRotator, MinimumValue) == 0x000198, "Member 'FRigUnit_HierarchyAddAnimationChannelRotator::MinimumValue' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyAddAnimationChannelRotator, MaximumValue) == 0x0001B0, "Member 'FRigUnit_HierarchyAddAnimationChannelRotator::MaximumValue' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_HierarchyGetShapeSettings
// 0x0098 (0x00A0 - 0x0008)
struct FRigUnit_HierarchyGetShapeSettings final : public FRigUnit_DynamicHierarchyBase
{
public:
	struct FRigElementKey                         Item;                                              // 0x0008(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AFB[0xC];                                     // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_HierarchyAddControl_ShapeSettings Settings;                                          // 0x0020(0x0080)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_HierarchyGetShapeSettings) == 0x000010, "Wrong alignment on FRigUnit_HierarchyGetShapeSettings");
static_assert(sizeof(FRigUnit_HierarchyGetShapeSettings) == 0x0000A0, "Wrong size on FRigUnit_HierarchyGetShapeSettings");
static_assert(offsetof(FRigUnit_HierarchyGetShapeSettings, Item) == 0x000008, "Member 'FRigUnit_HierarchyGetShapeSettings::Item' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyGetShapeSettings, Settings) == 0x000020, "Member 'FRigUnit_HierarchyGetShapeSettings::Settings' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_HierarchySetShapeSettings
// 0x0090 (0x01F0 - 0x0160)
struct FRigUnit_HierarchySetShapeSettings final : public FRigUnit_DynamicHierarchyBaseMutable
{
public:
	struct FRigElementKey                         Item;                                              // 0x0160(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AFC[0x4];                                     // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_HierarchyAddControl_ShapeSettings Settings;                                          // 0x0170(0x0080)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_HierarchySetShapeSettings) == 0x000010, "Wrong alignment on FRigUnit_HierarchySetShapeSettings");
static_assert(sizeof(FRigUnit_HierarchySetShapeSettings) == 0x0001F0, "Wrong size on FRigUnit_HierarchySetShapeSettings");
static_assert(offsetof(FRigUnit_HierarchySetShapeSettings, Item) == 0x000160, "Member 'FRigUnit_HierarchySetShapeSettings::Item' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchySetShapeSettings, Settings) == 0x000170, "Member 'FRigUnit_HierarchySetShapeSettings::Settings' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_HierarchyGetParent
// 0x0058 (0x0060 - 0x0008)
struct FRigUnit_HierarchyGetParent final : public FRigUnit_HierarchyBase
{
public:
	struct FRigElementKey                         Child;                                             // 0x0008(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         Parent;                                            // 0x0014(0x000C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedChild;                                       // 0x0020(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedParent;                                      // 0x0040(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_HierarchyGetParent) == 0x000008, "Wrong alignment on FRigUnit_HierarchyGetParent");
static_assert(sizeof(FRigUnit_HierarchyGetParent) == 0x000060, "Wrong size on FRigUnit_HierarchyGetParent");
static_assert(offsetof(FRigUnit_HierarchyGetParent, Child) == 0x000008, "Member 'FRigUnit_HierarchyGetParent::Child' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyGetParent, Parent) == 0x000014, "Member 'FRigUnit_HierarchyGetParent::Parent' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyGetParent, CachedChild) == 0x000020, "Member 'FRigUnit_HierarchyGetParent::CachedChild' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyGetParent, CachedParent) == 0x000040, "Member 'FRigUnit_HierarchyGetParent::CachedParent' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_HierarchyGetParents
// 0x0050 (0x0058 - 0x0008)
struct FRigUnit_HierarchyGetParents final : public FRigUnit_HierarchyBase
{
public:
	struct FRigElementKey                         Child;                                             // 0x0008(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeChild;                                     // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReverse;                                          // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AFD[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKeyCollection               Parents;                                           // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedChild;                                       // 0x0028(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKeyCollection               CachedParents;                                     // 0x0048(0x0010)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_HierarchyGetParents) == 0x000008, "Wrong alignment on FRigUnit_HierarchyGetParents");
static_assert(sizeof(FRigUnit_HierarchyGetParents) == 0x000058, "Wrong size on FRigUnit_HierarchyGetParents");
static_assert(offsetof(FRigUnit_HierarchyGetParents, Child) == 0x000008, "Member 'FRigUnit_HierarchyGetParents::Child' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyGetParents, bIncludeChild) == 0x000014, "Member 'FRigUnit_HierarchyGetParents::bIncludeChild' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyGetParents, bReverse) == 0x000015, "Member 'FRigUnit_HierarchyGetParents::bReverse' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyGetParents, Parents) == 0x000018, "Member 'FRigUnit_HierarchyGetParents::Parents' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyGetParents, CachedChild) == 0x000028, "Member 'FRigUnit_HierarchyGetParents::CachedChild' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyGetParents, CachedParents) == 0x000048, "Member 'FRigUnit_HierarchyGetParents::CachedParents' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_HierarchyGetChildren
// 0x0050 (0x0058 - 0x0008)
struct FRigUnit_HierarchyGetChildren final : public FRigUnit_HierarchyBase
{
public:
	struct FRigElementKey                         Parent;                                            // 0x0008(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeParent;                                    // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecursive;                                        // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AFE[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKeyCollection               Children;                                          // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedParent;                                      // 0x0028(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKeyCollection               CachedChildren;                                    // 0x0048(0x0010)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_HierarchyGetChildren) == 0x000008, "Wrong alignment on FRigUnit_HierarchyGetChildren");
static_assert(sizeof(FRigUnit_HierarchyGetChildren) == 0x000058, "Wrong size on FRigUnit_HierarchyGetChildren");
static_assert(offsetof(FRigUnit_HierarchyGetChildren, Parent) == 0x000008, "Member 'FRigUnit_HierarchyGetChildren::Parent' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyGetChildren, bIncludeParent) == 0x000014, "Member 'FRigUnit_HierarchyGetChildren::bIncludeParent' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyGetChildren, bRecursive) == 0x000015, "Member 'FRigUnit_HierarchyGetChildren::bRecursive' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyGetChildren, Children) == 0x000018, "Member 'FRigUnit_HierarchyGetChildren::Children' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyGetChildren, CachedParent) == 0x000028, "Member 'FRigUnit_HierarchyGetChildren::CachedParent' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyGetChildren, CachedChildren) == 0x000048, "Member 'FRigUnit_HierarchyGetChildren::CachedChildren' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_HierarchyGetSiblingsItemArray
// 0x0050 (0x0058 - 0x0008)
struct FRigUnit_HierarchyGetSiblingsItemArray final : public FRigUnit_HierarchyBase
{
public:
	struct FRigElementKey                         Item;                                              // 0x0008(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeItem;                                      // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AFF[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigElementKey>                 Siblings;                                          // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedItem;                                        // 0x0028(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKeyCollection               CachedSiblings;                                    // 0x0048(0x0010)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_HierarchyGetSiblingsItemArray) == 0x000008, "Wrong alignment on FRigUnit_HierarchyGetSiblingsItemArray");
static_assert(sizeof(FRigUnit_HierarchyGetSiblingsItemArray) == 0x000058, "Wrong size on FRigUnit_HierarchyGetSiblingsItemArray");
static_assert(offsetof(FRigUnit_HierarchyGetSiblingsItemArray, Item) == 0x000008, "Member 'FRigUnit_HierarchyGetSiblingsItemArray::Item' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyGetSiblingsItemArray, bIncludeItem) == 0x000014, "Member 'FRigUnit_HierarchyGetSiblingsItemArray::bIncludeItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyGetSiblingsItemArray, Siblings) == 0x000018, "Member 'FRigUnit_HierarchyGetSiblingsItemArray::Siblings' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyGetSiblingsItemArray, CachedItem) == 0x000028, "Member 'FRigUnit_HierarchyGetSiblingsItemArray::CachedItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchyGetSiblingsItemArray, CachedSiblings) == 0x000048, "Member 'FRigUnit_HierarchyGetSiblingsItemArray::CachedSiblings' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_HierarchySetPoseItemArray
// 0x0090 (0x01F0 - 0x0160)
struct FRigUnit_HierarchySetPoseItemArray final : public FRigUnit_HierarchyBaseMutable
{
public:
	struct FRigPose                               Pose;                                              // 0x0160(0x0070)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	ERigElementType                               ElementType;                                       // 0x01D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigVMTransformSpace                          Space;                                             // 0x01D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B00[0x6];                                     // 0x01D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigElementKey>                 ItemsToSet;                                        // 0x01D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x01E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B01[0x4];                                     // 0x01EC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_HierarchySetPoseItemArray) == 0x000010, "Wrong alignment on FRigUnit_HierarchySetPoseItemArray");
static_assert(sizeof(FRigUnit_HierarchySetPoseItemArray) == 0x0001F0, "Wrong size on FRigUnit_HierarchySetPoseItemArray");
static_assert(offsetof(FRigUnit_HierarchySetPoseItemArray, Pose) == 0x000160, "Member 'FRigUnit_HierarchySetPoseItemArray::Pose' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchySetPoseItemArray, ElementType) == 0x0001D0, "Member 'FRigUnit_HierarchySetPoseItemArray::ElementType' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchySetPoseItemArray, Space) == 0x0001D1, "Member 'FRigUnit_HierarchySetPoseItemArray::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchySetPoseItemArray, ItemsToSet) == 0x0001D8, "Member 'FRigUnit_HierarchySetPoseItemArray::ItemsToSet' has a wrong offset!");
static_assert(offsetof(FRigUnit_HierarchySetPoseItemArray, Weight) == 0x0001E8, "Member 'FRigUnit_HierarchySetPoseItemArray::Weight' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_PoseGetItems
// 0x0088 (0x0090 - 0x0008)
struct FRigUnit_PoseGetItems final : public FRigUnit_HierarchyBase
{
public:
	struct FRigPose                               Pose;                                              // 0x0008(0x0070)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	ERigElementType                               ElementType;                                       // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B02[0x7];                                     // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKeyCollection               Items;                                             // 0x0080(0x0010)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_PoseGetItems) == 0x000008, "Wrong alignment on FRigUnit_PoseGetItems");
static_assert(sizeof(FRigUnit_PoseGetItems) == 0x000090, "Wrong size on FRigUnit_PoseGetItems");
static_assert(offsetof(FRigUnit_PoseGetItems, Pose) == 0x000008, "Member 'FRigUnit_PoseGetItems::Pose' has a wrong offset!");
static_assert(offsetof(FRigUnit_PoseGetItems, ElementType) == 0x000078, "Member 'FRigUnit_PoseGetItems::ElementType' has a wrong offset!");
static_assert(offsetof(FRigUnit_PoseGetItems, Items) == 0x000080, "Member 'FRigUnit_PoseGetItems::Items' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_PoseGetDelta
// 0x0120 (0x0128 - 0x0008)
struct FRigUnit_PoseGetDelta final : public FRigUnit_HierarchyBase
{
public:
	struct FRigPose                               PoseA;                                             // 0x0008(0x0070)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRigPose                               PoseB;                                             // 0x0078(0x0070)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         PositionThreshold;                                 // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationThreshold;                                 // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleThreshold;                                    // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurveThreshold;                                    // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigElementType                               ElementType;                                       // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigVMTransformSpace                          Space;                                             // 0x00F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B03[0x6];                                     // 0x00FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKeyCollection               ItemsToCompare;                                    // 0x0100(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PosesAreEqual;                                     // 0x0110(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B04[0x7];                                     // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKeyCollection               ItemsWithDelta;                                    // 0x0118(0x0010)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_PoseGetDelta) == 0x000008, "Wrong alignment on FRigUnit_PoseGetDelta");
static_assert(sizeof(FRigUnit_PoseGetDelta) == 0x000128, "Wrong size on FRigUnit_PoseGetDelta");
static_assert(offsetof(FRigUnit_PoseGetDelta, PoseA) == 0x000008, "Member 'FRigUnit_PoseGetDelta::PoseA' has a wrong offset!");
static_assert(offsetof(FRigUnit_PoseGetDelta, PoseB) == 0x000078, "Member 'FRigUnit_PoseGetDelta::PoseB' has a wrong offset!");
static_assert(offsetof(FRigUnit_PoseGetDelta, PositionThreshold) == 0x0000E8, "Member 'FRigUnit_PoseGetDelta::PositionThreshold' has a wrong offset!");
static_assert(offsetof(FRigUnit_PoseGetDelta, RotationThreshold) == 0x0000EC, "Member 'FRigUnit_PoseGetDelta::RotationThreshold' has a wrong offset!");
static_assert(offsetof(FRigUnit_PoseGetDelta, ScaleThreshold) == 0x0000F0, "Member 'FRigUnit_PoseGetDelta::ScaleThreshold' has a wrong offset!");
static_assert(offsetof(FRigUnit_PoseGetDelta, CurveThreshold) == 0x0000F4, "Member 'FRigUnit_PoseGetDelta::CurveThreshold' has a wrong offset!");
static_assert(offsetof(FRigUnit_PoseGetDelta, ElementType) == 0x0000F8, "Member 'FRigUnit_PoseGetDelta::ElementType' has a wrong offset!");
static_assert(offsetof(FRigUnit_PoseGetDelta, Space) == 0x0000F9, "Member 'FRigUnit_PoseGetDelta::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_PoseGetDelta, ItemsToCompare) == 0x000100, "Member 'FRigUnit_PoseGetDelta::ItemsToCompare' has a wrong offset!");
static_assert(offsetof(FRigUnit_PoseGetDelta, PosesAreEqual) == 0x000110, "Member 'FRigUnit_PoseGetDelta::PosesAreEqual' has a wrong offset!");
static_assert(offsetof(FRigUnit_PoseGetDelta, ItemsWithDelta) == 0x000118, "Member 'FRigUnit_PoseGetDelta::ItemsWithDelta' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_PoseGetTransformArray
// 0x0088 (0x0090 - 0x0008)
struct FRigUnit_PoseGetTransformArray final : public FRigUnit_HierarchyBase
{
public:
	struct FRigPose                               Pose;                                              // 0x0008(0x0070)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	ERigVMTransformSpace                          Space;                                             // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Valid;                                             // 0x0079(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B05[0x6];                                     // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     Transforms;                                        // 0x0080(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_PoseGetTransformArray) == 0x000008, "Wrong alignment on FRigUnit_PoseGetTransformArray");
static_assert(sizeof(FRigUnit_PoseGetTransformArray) == 0x000090, "Wrong size on FRigUnit_PoseGetTransformArray");
static_assert(offsetof(FRigUnit_PoseGetTransformArray, Pose) == 0x000008, "Member 'FRigUnit_PoseGetTransformArray::Pose' has a wrong offset!");
static_assert(offsetof(FRigUnit_PoseGetTransformArray, Space) == 0x000078, "Member 'FRigUnit_PoseGetTransformArray::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_PoseGetTransformArray, Valid) == 0x000079, "Member 'FRigUnit_PoseGetTransformArray::Valid' has a wrong offset!");
static_assert(offsetof(FRigUnit_PoseGetTransformArray, Transforms) == 0x000080, "Member 'FRigUnit_PoseGetTransformArray::Transforms' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_PoseLoop
// 0x02B0 (0x0410 - 0x0160)
struct FRigUnit_PoseLoop final : public FRigUnit_HierarchyBaseMutable
{
public:
	class FName                                   BlockToRun;                                        // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigPose                               Pose;                                              // 0x0168(0x0070)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRigElementKey                         Item;                                              // 0x01D8(0x000C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B06[0xC];                                     // 0x01E4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             GlobalTransform;                                   // 0x01F0(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             LocalTransform;                                    // 0x0250(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurveValue;                                        // 0x02B0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index;                                             // 0x02B4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x02B8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ratio;                                             // 0x02BC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FControlRigExecuteContext              Completed;                                         // 0x02C0(0x0150)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_PoseLoop) == 0x000010, "Wrong alignment on FRigUnit_PoseLoop");
static_assert(sizeof(FRigUnit_PoseLoop) == 0x000410, "Wrong size on FRigUnit_PoseLoop");
static_assert(offsetof(FRigUnit_PoseLoop, BlockToRun) == 0x000160, "Member 'FRigUnit_PoseLoop::BlockToRun' has a wrong offset!");
static_assert(offsetof(FRigUnit_PoseLoop, Pose) == 0x000168, "Member 'FRigUnit_PoseLoop::Pose' has a wrong offset!");
static_assert(offsetof(FRigUnit_PoseLoop, Item) == 0x0001D8, "Member 'FRigUnit_PoseLoop::Item' has a wrong offset!");
static_assert(offsetof(FRigUnit_PoseLoop, GlobalTransform) == 0x0001F0, "Member 'FRigUnit_PoseLoop::GlobalTransform' has a wrong offset!");
static_assert(offsetof(FRigUnit_PoseLoop, LocalTransform) == 0x000250, "Member 'FRigUnit_PoseLoop::LocalTransform' has a wrong offset!");
static_assert(offsetof(FRigUnit_PoseLoop, CurveValue) == 0x0002B0, "Member 'FRigUnit_PoseLoop::CurveValue' has a wrong offset!");
static_assert(offsetof(FRigUnit_PoseLoop, Index) == 0x0002B4, "Member 'FRigUnit_PoseLoop::Index' has a wrong offset!");
static_assert(offsetof(FRigUnit_PoseLoop, Count) == 0x0002B8, "Member 'FRigUnit_PoseLoop::Count' has a wrong offset!");
static_assert(offsetof(FRigUnit_PoseLoop, Ratio) == 0x0002BC, "Member 'FRigUnit_PoseLoop::Ratio' has a wrong offset!");
static_assert(offsetof(FRigUnit_PoseLoop, Completed) == 0x0002C0, "Member 'FRigUnit_PoseLoop::Completed' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_InverseExecution
// 0x0158 (0x0160 - 0x0008)
struct FRigUnit_InverseExecution final : public FRigUnit
{
public:
	uint8                                         Pad_2B07[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FControlRigExecuteContext              ExecuteContext;                                    // 0x0010(0x0150)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_InverseExecution) == 0x000010, "Wrong alignment on FRigUnit_InverseExecution");
static_assert(sizeof(FRigUnit_InverseExecution) == 0x000160, "Wrong size on FRigUnit_InverseExecution");
static_assert(offsetof(FRigUnit_InverseExecution, ExecuteContext) == 0x000010, "Member 'FRigUnit_InverseExecution::ExecuteContext' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_ItemExists
// 0x0030 (0x0038 - 0x0008)
struct FRigUnit_ItemExists final : public FRigUnit_ItemBase
{
public:
	struct FRigElementKey                         Item;                                              // 0x0008(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Exists;                                            // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B08[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCachedRigElement                      CachedIndex;                                       // 0x0018(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_ItemExists) == 0x000008, "Wrong alignment on FRigUnit_ItemExists");
static_assert(sizeof(FRigUnit_ItemExists) == 0x000038, "Wrong size on FRigUnit_ItemExists");
static_assert(offsetof(FRigUnit_ItemExists, Item) == 0x000008, "Member 'FRigUnit_ItemExists::Item' has a wrong offset!");
static_assert(offsetof(FRigUnit_ItemExists, Exists) == 0x000014, "Member 'FRigUnit_ItemExists::Exists' has a wrong offset!");
static_assert(offsetof(FRigUnit_ItemExists, CachedIndex) == 0x000018, "Member 'FRigUnit_ItemExists::CachedIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_ItemEquals
// 0x0020 (0x0028 - 0x0008)
struct FRigUnit_ItemEquals final : public FRigUnit_ItemBase
{
public:
	struct FRigElementKey                         A;                                                 // 0x0008(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         B;                                                 // 0x0014(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B09[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_ItemEquals) == 0x000008, "Wrong alignment on FRigUnit_ItemEquals");
static_assert(sizeof(FRigUnit_ItemEquals) == 0x000028, "Wrong size on FRigUnit_ItemEquals");
static_assert(offsetof(FRigUnit_ItemEquals, A) == 0x000008, "Member 'FRigUnit_ItemEquals::A' has a wrong offset!");
static_assert(offsetof(FRigUnit_ItemEquals, B) == 0x000014, "Member 'FRigUnit_ItemEquals::B' has a wrong offset!");
static_assert(offsetof(FRigUnit_ItemEquals, Result) == 0x000020, "Member 'FRigUnit_ItemEquals::Result' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_ItemTypeEquals
// 0x0020 (0x0028 - 0x0008)
struct FRigUnit_ItemTypeEquals final : public FRigUnit_ItemBase
{
public:
	struct FRigElementKey                         A;                                                 // 0x0008(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         B;                                                 // 0x0014(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B0A[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_ItemTypeEquals) == 0x000008, "Wrong alignment on FRigUnit_ItemTypeEquals");
static_assert(sizeof(FRigUnit_ItemTypeEquals) == 0x000028, "Wrong size on FRigUnit_ItemTypeEquals");
static_assert(offsetof(FRigUnit_ItemTypeEquals, A) == 0x000008, "Member 'FRigUnit_ItemTypeEquals::A' has a wrong offset!");
static_assert(offsetof(FRigUnit_ItemTypeEquals, B) == 0x000014, "Member 'FRigUnit_ItemTypeEquals::B' has a wrong offset!");
static_assert(offsetof(FRigUnit_ItemTypeEquals, Result) == 0x000020, "Member 'FRigUnit_ItemTypeEquals::Result' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_ItemToName
// 0x0018 (0x0020 - 0x0008)
struct FRigUnit_ItemToName final : public FRigUnit_ItemBase
{
public:
	struct FRigElementKey                         Value;                                             // 0x0008(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Result;                                            // 0x0014(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B0B[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_ItemToName) == 0x000008, "Wrong alignment on FRigUnit_ItemToName");
static_assert(sizeof(FRigUnit_ItemToName) == 0x000020, "Wrong size on FRigUnit_ItemToName");
static_assert(offsetof(FRigUnit_ItemToName, Value) == 0x000008, "Member 'FRigUnit_ItemToName::Value' has a wrong offset!");
static_assert(offsetof(FRigUnit_ItemToName, Result) == 0x000014, "Member 'FRigUnit_ItemToName::Result' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SequenceExecution
// 0x0698 (0x06A0 - 0x0008)
struct FRigUnit_SequenceExecution final : public FRigUnit
{
public:
	uint8                                         Pad_2B0C[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FControlRigExecuteContext              ExecuteContext;                                    // 0x0010(0x0150)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	struct FControlRigExecuteContext              A;                                                 // 0x0160(0x0150)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	struct FControlRigExecuteContext              B;                                                 // 0x02B0(0x0150)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	struct FControlRigExecuteContext              C;                                                 // 0x0400(0x0150)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	struct FControlRigExecuteContext              D;                                                 // 0x0550(0x0150)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_SequenceExecution) == 0x000010, "Wrong alignment on FRigUnit_SequenceExecution");
static_assert(sizeof(FRigUnit_SequenceExecution) == 0x0006A0, "Wrong size on FRigUnit_SequenceExecution");
static_assert(offsetof(FRigUnit_SequenceExecution, ExecuteContext) == 0x000010, "Member 'FRigUnit_SequenceExecution::ExecuteContext' has a wrong offset!");
static_assert(offsetof(FRigUnit_SequenceExecution, A) == 0x000160, "Member 'FRigUnit_SequenceExecution::A' has a wrong offset!");
static_assert(offsetof(FRigUnit_SequenceExecution, B) == 0x0002B0, "Member 'FRigUnit_SequenceExecution::B' has a wrong offset!");
static_assert(offsetof(FRigUnit_SequenceExecution, C) == 0x000400, "Member 'FRigUnit_SequenceExecution::C' has a wrong offset!");
static_assert(offsetof(FRigUnit_SequenceExecution, D) == 0x000550, "Member 'FRigUnit_SequenceExecution::D' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_Item
// 0x0010 (0x0018 - 0x0008)
struct FRigUnit_Item final : public FRigUnit
{
public:
	struct FRigElementKey                         Item;                                              // 0x0008(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B0D[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_Item) == 0x000008, "Wrong alignment on FRigUnit_Item");
static_assert(sizeof(FRigUnit_Item) == 0x000018, "Wrong size on FRigUnit_Item");
static_assert(offsetof(FRigUnit_Item, Item) == 0x000008, "Member 'FRigUnit_Item::Item' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_ItemArray
// 0x0010 (0x0018 - 0x0008)
struct FRigUnit_ItemArray final : public FRigUnit
{
public:
	TArray<struct FRigElementKey>                 Items;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_ItemArray) == 0x000008, "Wrong alignment on FRigUnit_ItemArray");
static_assert(sizeof(FRigUnit_ItemArray) == 0x000018, "Wrong size on FRigUnit_ItemArray");
static_assert(offsetof(FRigUnit_ItemArray, Items) == 0x000008, "Member 'FRigUnit_ItemArray::Items' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_BoneName
// 0x0008 (0x0010 - 0x0008)
struct FRigUnit_BoneName final : public FRigUnit
{
public:
	class FName                                   bone;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_BoneName) == 0x000008, "Wrong alignment on FRigUnit_BoneName");
static_assert(sizeof(FRigUnit_BoneName) == 0x000010, "Wrong size on FRigUnit_BoneName");
static_assert(offsetof(FRigUnit_BoneName, bone) == 0x000008, "Member 'FRigUnit_BoneName::bone' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_FitChainToCurve_WorkData
// 0x0098 (0x0098 - 0x0000)
struct FRigUnit_FitChainToCurve_WorkData final
{
public:
	float                                         ChainLength;                                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B0E[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        ItemPositions;                                     // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 ItemSegments;                                      // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        CurvePositions;                                    // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 CurveSegments;                                     // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCachedRigElement>              CachedItems;                                       // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ItemRotationA;                                     // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ItemRotationB;                                     // 0x0068(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 ItemRotationT;                                     // 0x0078(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     ItemLocalTransforms;                               // 0x0088(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_FitChainToCurve_WorkData) == 0x000008, "Wrong alignment on FRigUnit_FitChainToCurve_WorkData");
static_assert(sizeof(FRigUnit_FitChainToCurve_WorkData) == 0x000098, "Wrong size on FRigUnit_FitChainToCurve_WorkData");
static_assert(offsetof(FRigUnit_FitChainToCurve_WorkData, ChainLength) == 0x000000, "Member 'FRigUnit_FitChainToCurve_WorkData::ChainLength' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurve_WorkData, ItemPositions) == 0x000008, "Member 'FRigUnit_FitChainToCurve_WorkData::ItemPositions' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurve_WorkData, ItemSegments) == 0x000018, "Member 'FRigUnit_FitChainToCurve_WorkData::ItemSegments' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurve_WorkData, CurvePositions) == 0x000028, "Member 'FRigUnit_FitChainToCurve_WorkData::CurvePositions' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurve_WorkData, CurveSegments) == 0x000038, "Member 'FRigUnit_FitChainToCurve_WorkData::CurveSegments' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurve_WorkData, CachedItems) == 0x000048, "Member 'FRigUnit_FitChainToCurve_WorkData::CachedItems' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurve_WorkData, ItemRotationA) == 0x000058, "Member 'FRigUnit_FitChainToCurve_WorkData::ItemRotationA' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurve_WorkData, ItemRotationB) == 0x000068, "Member 'FRigUnit_FitChainToCurve_WorkData::ItemRotationB' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurve_WorkData, ItemRotationT) == 0x000078, "Member 'FRigUnit_FitChainToCurve_WorkData::ItemRotationT' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurve_WorkData, ItemLocalTransforms) == 0x000088, "Member 'FRigUnit_FitChainToCurve_WorkData::ItemLocalTransforms' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SpaceName
// 0x0008 (0x0010 - 0x0008)
struct FRigUnit_SpaceName final : public FRigUnit
{
public:
	class FName                                   Space;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_SpaceName) == 0x000008, "Wrong alignment on FRigUnit_SpaceName");
static_assert(sizeof(FRigUnit_SpaceName) == 0x000010, "Wrong size on FRigUnit_SpaceName");
static_assert(offsetof(FRigUnit_SpaceName, Space) == 0x000008, "Member 'FRigUnit_SpaceName::Space' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_ControlName
// 0x0008 (0x0010 - 0x0008)
struct FRigUnit_ControlName final : public FRigUnit
{
public:
	class FName                                   Control;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_ControlName) == 0x000008, "Wrong alignment on FRigUnit_ControlName");
static_assert(sizeof(FRigUnit_ControlName) == 0x000010, "Wrong size on FRigUnit_ControlName");
static_assert(offsetof(FRigUnit_ControlName, Control) == 0x000008, "Member 'FRigUnit_ControlName::Control' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_TwistBones_WorkData
// 0x0030 (0x0030 - 0x0000)
struct FRigUnit_TwistBones_WorkData final
{
public:
	TArray<struct FCachedRigElement>              CachedItems;                                       // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 ItemRatios;                                        // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     ItemTransforms;                                    // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_TwistBones_WorkData) == 0x000008, "Wrong alignment on FRigUnit_TwistBones_WorkData");
static_assert(sizeof(FRigUnit_TwistBones_WorkData) == 0x000030, "Wrong size on FRigUnit_TwistBones_WorkData");
static_assert(offsetof(FRigUnit_TwistBones_WorkData, CachedItems) == 0x000000, "Member 'FRigUnit_TwistBones_WorkData::CachedItems' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwistBones_WorkData, ItemRatios) == 0x000010, "Member 'FRigUnit_TwistBones_WorkData::ItemRatios' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwistBones_WorkData, ItemTransforms) == 0x000020, "Member 'FRigUnit_TwistBones_WorkData::ItemTransforms' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_TwistBones
// 0x0080 (0x01E0 - 0x0160)
struct FRigUnit_TwistBones final : public FRigUnit_HighlevelBaseMutable
{
public:
	class FName                                   StartBone;                                         // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndBone;                                           // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TwistAxis;                                         // 0x0170(0x0018)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PoleAxis;                                          // 0x0188(0x0018)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigVMAnimEasingType                          TwistEaseType;                                     // 0x01A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B0F[0x3];                                     // 0x01A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Weight;                                            // 0x01A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x01A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B10[0x7];                                     // 0x01A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_TwistBones_WorkData           WorkData;                                          // 0x01B0(0x0030)(Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_TwistBones) == 0x000010, "Wrong alignment on FRigUnit_TwistBones");
static_assert(sizeof(FRigUnit_TwistBones) == 0x0001E0, "Wrong size on FRigUnit_TwistBones");
static_assert(offsetof(FRigUnit_TwistBones, StartBone) == 0x000160, "Member 'FRigUnit_TwistBones::StartBone' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwistBones, EndBone) == 0x000168, "Member 'FRigUnit_TwistBones::EndBone' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwistBones, TwistAxis) == 0x000170, "Member 'FRigUnit_TwistBones::TwistAxis' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwistBones, PoleAxis) == 0x000188, "Member 'FRigUnit_TwistBones::PoleAxis' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwistBones, TwistEaseType) == 0x0001A0, "Member 'FRigUnit_TwistBones::TwistEaseType' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwistBones, Weight) == 0x0001A4, "Member 'FRigUnit_TwistBones::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwistBones, bPropagateToChildren) == 0x0001A8, "Member 'FRigUnit_TwistBones::bPropagateToChildren' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwistBones, WorkData) == 0x0001B0, "Member 'FRigUnit_TwistBones::WorkData' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_GetAnimationChannelBase
// 0x0028 (0x0030 - 0x0008)
struct FRigUnit_GetAnimationChannelBase : public FRigUnit
{
public:
	class FName                                   Control;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Channel;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitial;                                          // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B11[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKey                         CachedChannelKey;                                  // 0x001C(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CachedChannelHash;                                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B12[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_GetAnimationChannelBase) == 0x000008, "Wrong alignment on FRigUnit_GetAnimationChannelBase");
static_assert(sizeof(FRigUnit_GetAnimationChannelBase) == 0x000030, "Wrong size on FRigUnit_GetAnimationChannelBase");
static_assert(offsetof(FRigUnit_GetAnimationChannelBase, Control) == 0x000008, "Member 'FRigUnit_GetAnimationChannelBase::Control' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetAnimationChannelBase, Channel) == 0x000010, "Member 'FRigUnit_GetAnimationChannelBase::Channel' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetAnimationChannelBase, bInitial) == 0x000018, "Member 'FRigUnit_GetAnimationChannelBase::bInitial' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetAnimationChannelBase, CachedChannelKey) == 0x00001C, "Member 'FRigUnit_GetAnimationChannelBase::CachedChannelKey' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetAnimationChannelBase, CachedChannelHash) == 0x000028, "Member 'FRigUnit_GetAnimationChannelBase::CachedChannelHash' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_GetBoolAnimationChannel
// 0x0008 (0x0038 - 0x0030)
struct FRigUnit_GetBoolAnimationChannel final : public FRigUnit_GetAnimationChannelBase
{
public:
	bool                                          Value;                                             // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B13[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_GetBoolAnimationChannel) == 0x000008, "Wrong alignment on FRigUnit_GetBoolAnimationChannel");
static_assert(sizeof(FRigUnit_GetBoolAnimationChannel) == 0x000038, "Wrong size on FRigUnit_GetBoolAnimationChannel");
static_assert(offsetof(FRigUnit_GetBoolAnimationChannel, Value) == 0x000030, "Member 'FRigUnit_GetBoolAnimationChannel::Value' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_ParentConstraint_AdvancedSettings
// 0x0002 (0x0002 - 0x0000)
struct FRigUnit_ParentConstraint_AdvancedSettings final
{
public:
	EConstraintInterpType                         InterpolationType;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEulerRotationOrder                           RotationOrderForFilter;                            // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_ParentConstraint_AdvancedSettings) == 0x000001, "Wrong alignment on FRigUnit_ParentConstraint_AdvancedSettings");
static_assert(sizeof(FRigUnit_ParentConstraint_AdvancedSettings) == 0x000002, "Wrong size on FRigUnit_ParentConstraint_AdvancedSettings");
static_assert(offsetof(FRigUnit_ParentConstraint_AdvancedSettings, InterpolationType) == 0x000000, "Member 'FRigUnit_ParentConstraint_AdvancedSettings::InterpolationType' has a wrong offset!");
static_assert(offsetof(FRigUnit_ParentConstraint_AdvancedSettings, RotationOrderForFilter) == 0x000001, "Member 'FRigUnit_ParentConstraint_AdvancedSettings::RotationOrderForFilter' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_GetFloatAnimationChannel
// 0x0008 (0x0038 - 0x0030)
struct FRigUnit_GetFloatAnimationChannel final : public FRigUnit_GetAnimationChannelBase
{
public:
	float                                         Value;                                             // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B14[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_GetFloatAnimationChannel) == 0x000008, "Wrong alignment on FRigUnit_GetFloatAnimationChannel");
static_assert(sizeof(FRigUnit_GetFloatAnimationChannel) == 0x000038, "Wrong size on FRigUnit_GetFloatAnimationChannel");
static_assert(offsetof(FRigUnit_GetFloatAnimationChannel, Value) == 0x000030, "Member 'FRigUnit_GetFloatAnimationChannel::Value' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_GetIntAnimationChannel
// 0x0008 (0x0038 - 0x0030)
struct FRigUnit_GetIntAnimationChannel final : public FRigUnit_GetAnimationChannelBase
{
public:
	int32                                         Value;                                             // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B15[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_GetIntAnimationChannel) == 0x000008, "Wrong alignment on FRigUnit_GetIntAnimationChannel");
static_assert(sizeof(FRigUnit_GetIntAnimationChannel) == 0x000038, "Wrong size on FRigUnit_GetIntAnimationChannel");
static_assert(offsetof(FRigUnit_GetIntAnimationChannel, Value) == 0x000030, "Member 'FRigUnit_GetIntAnimationChannel::Value' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_GetVector2DAnimationChannel
// 0x0010 (0x0040 - 0x0030)
struct FRigUnit_GetVector2DAnimationChannel final : public FRigUnit_GetAnimationChannelBase
{
public:
	struct FVector2D                              Value;                                             // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_GetVector2DAnimationChannel) == 0x000008, "Wrong alignment on FRigUnit_GetVector2DAnimationChannel");
static_assert(sizeof(FRigUnit_GetVector2DAnimationChannel) == 0x000040, "Wrong size on FRigUnit_GetVector2DAnimationChannel");
static_assert(offsetof(FRigUnit_GetVector2DAnimationChannel, Value) == 0x000030, "Member 'FRigUnit_GetVector2DAnimationChannel::Value' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_GetVectorAnimationChannel
// 0x0018 (0x0048 - 0x0030)
struct FRigUnit_GetVectorAnimationChannel final : public FRigUnit_GetAnimationChannelBase
{
public:
	struct FVector                                Value;                                             // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_GetVectorAnimationChannel) == 0x000008, "Wrong alignment on FRigUnit_GetVectorAnimationChannel");
static_assert(sizeof(FRigUnit_GetVectorAnimationChannel) == 0x000048, "Wrong size on FRigUnit_GetVectorAnimationChannel");
static_assert(offsetof(FRigUnit_GetVectorAnimationChannel, Value) == 0x000030, "Member 'FRigUnit_GetVectorAnimationChannel::Value' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_ModifyTransforms_PerItem
// 0x0070 (0x0070 - 0x0000)
struct FRigUnit_ModifyTransforms_PerItem final
{
public:
	struct FRigElementKey                         Item;                                              // 0x0000(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B16[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_ModifyTransforms_PerItem) == 0x000010, "Wrong alignment on FRigUnit_ModifyTransforms_PerItem");
static_assert(sizeof(FRigUnit_ModifyTransforms_PerItem) == 0x000070, "Wrong size on FRigUnit_ModifyTransforms_PerItem");
static_assert(offsetof(FRigUnit_ModifyTransforms_PerItem, Item) == 0x000000, "Member 'FRigUnit_ModifyTransforms_PerItem::Item' has a wrong offset!");
static_assert(offsetof(FRigUnit_ModifyTransforms_PerItem, Transform) == 0x000010, "Member 'FRigUnit_ModifyTransforms_PerItem::Transform' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_GetRotatorAnimationChannel
// 0x0018 (0x0048 - 0x0030)
struct FRigUnit_GetRotatorAnimationChannel final : public FRigUnit_GetAnimationChannelBase
{
public:
	struct FRotator                               Value;                                             // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_GetRotatorAnimationChannel) == 0x000008, "Wrong alignment on FRigUnit_GetRotatorAnimationChannel");
static_assert(sizeof(FRigUnit_GetRotatorAnimationChannel) == 0x000048, "Wrong size on FRigUnit_GetRotatorAnimationChannel");
static_assert(offsetof(FRigUnit_GetRotatorAnimationChannel, Value) == 0x000030, "Member 'FRigUnit_GetRotatorAnimationChannel::Value' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_GetTransformAnimationChannel
// 0x0060 (0x0090 - 0x0030)
struct FRigUnit_GetTransformAnimationChannel final : public FRigUnit_GetAnimationChannelBase
{
public:
	struct FTransform                             Value;                                             // 0x0030(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_GetTransformAnimationChannel) == 0x000010, "Wrong alignment on FRigUnit_GetTransformAnimationChannel");
static_assert(sizeof(FRigUnit_GetTransformAnimationChannel) == 0x000090, "Wrong size on FRigUnit_GetTransformAnimationChannel");
static_assert(offsetof(FRigUnit_GetTransformAnimationChannel, Value) == 0x000030, "Member 'FRigUnit_GetTransformAnimationChannel::Value' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SetAnimationChannelBase
// 0x0150 (0x0180 - 0x0030)
struct FRigUnit_SetAnimationChannelBase : public FRigUnit_GetAnimationChannelBase
{
public:
	struct FControlRigExecuteContext              ExecuteContext;                                    // 0x0030(0x0150)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_SetAnimationChannelBase) == 0x000010, "Wrong alignment on FRigUnit_SetAnimationChannelBase");
static_assert(sizeof(FRigUnit_SetAnimationChannelBase) == 0x000180, "Wrong size on FRigUnit_SetAnimationChannelBase");
static_assert(offsetof(FRigUnit_SetAnimationChannelBase, ExecuteContext) == 0x000030, "Member 'FRigUnit_SetAnimationChannelBase::ExecuteContext' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SetBoolAnimationChannel
// 0x0010 (0x0190 - 0x0180)
struct FRigUnit_SetBoolAnimationChannel final : public FRigUnit_SetAnimationChannelBase
{
public:
	bool                                          Value;                                             // 0x0180(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B17[0xF];                                     // 0x0181(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_SetBoolAnimationChannel) == 0x000010, "Wrong alignment on FRigUnit_SetBoolAnimationChannel");
static_assert(sizeof(FRigUnit_SetBoolAnimationChannel) == 0x000190, "Wrong size on FRigUnit_SetBoolAnimationChannel");
static_assert(offsetof(FRigUnit_SetBoolAnimationChannel, Value) == 0x000180, "Member 'FRigUnit_SetBoolAnimationChannel::Value' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_ScaleConstraintLocalSpaceOffset
// 0x0060 (0x01C0 - 0x0160)
struct FRigUnit_ScaleConstraintLocalSpaceOffset final : public FRigUnit_HighlevelBaseMutable
{
public:
	struct FRigElementKey                         Child;                                             // 0x0160(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMaintainOffset;                                   // 0x016C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFilterOptionPerAxis                   Filter;                                            // 0x016D(0x0003)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FConstraintParent>              Parents;                                           // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B18[0x4];                                     // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCachedRigElement                      ChildCache;                                        // 0x0188(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCachedRigElement>              ParentCaches;                                      // 0x01A8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B19[0x8];                                     // 0x01B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_ScaleConstraintLocalSpaceOffset) == 0x000010, "Wrong alignment on FRigUnit_ScaleConstraintLocalSpaceOffset");
static_assert(sizeof(FRigUnit_ScaleConstraintLocalSpaceOffset) == 0x0001C0, "Wrong size on FRigUnit_ScaleConstraintLocalSpaceOffset");
static_assert(offsetof(FRigUnit_ScaleConstraintLocalSpaceOffset, Child) == 0x000160, "Member 'FRigUnit_ScaleConstraintLocalSpaceOffset::Child' has a wrong offset!");
static_assert(offsetof(FRigUnit_ScaleConstraintLocalSpaceOffset, bMaintainOffset) == 0x00016C, "Member 'FRigUnit_ScaleConstraintLocalSpaceOffset::bMaintainOffset' has a wrong offset!");
static_assert(offsetof(FRigUnit_ScaleConstraintLocalSpaceOffset, Filter) == 0x00016D, "Member 'FRigUnit_ScaleConstraintLocalSpaceOffset::Filter' has a wrong offset!");
static_assert(offsetof(FRigUnit_ScaleConstraintLocalSpaceOffset, Parents) == 0x000170, "Member 'FRigUnit_ScaleConstraintLocalSpaceOffset::Parents' has a wrong offset!");
static_assert(offsetof(FRigUnit_ScaleConstraintLocalSpaceOffset, Weight) == 0x000180, "Member 'FRigUnit_ScaleConstraintLocalSpaceOffset::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_ScaleConstraintLocalSpaceOffset, ChildCache) == 0x000188, "Member 'FRigUnit_ScaleConstraintLocalSpaceOffset::ChildCache' has a wrong offset!");
static_assert(offsetof(FRigUnit_ScaleConstraintLocalSpaceOffset, ParentCaches) == 0x0001A8, "Member 'FRigUnit_ScaleConstraintLocalSpaceOffset::ParentCaches' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SetFloatAnimationChannel
// 0x0010 (0x0190 - 0x0180)
struct FRigUnit_SetFloatAnimationChannel final : public FRigUnit_SetAnimationChannelBase
{
public:
	float                                         Value;                                             // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B1A[0xC];                                     // 0x0184(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_SetFloatAnimationChannel) == 0x000010, "Wrong alignment on FRigUnit_SetFloatAnimationChannel");
static_assert(sizeof(FRigUnit_SetFloatAnimationChannel) == 0x000190, "Wrong size on FRigUnit_SetFloatAnimationChannel");
static_assert(offsetof(FRigUnit_SetFloatAnimationChannel, Value) == 0x000180, "Member 'FRigUnit_SetFloatAnimationChannel::Value' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SetIntAnimationChannel
// 0x0010 (0x0190 - 0x0180)
struct FRigUnit_SetIntAnimationChannel final : public FRigUnit_SetAnimationChannelBase
{
public:
	int32                                         Value;                                             // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B1B[0xC];                                     // 0x0184(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_SetIntAnimationChannel) == 0x000010, "Wrong alignment on FRigUnit_SetIntAnimationChannel");
static_assert(sizeof(FRigUnit_SetIntAnimationChannel) == 0x000190, "Wrong size on FRigUnit_SetIntAnimationChannel");
static_assert(offsetof(FRigUnit_SetIntAnimationChannel, Value) == 0x000180, "Member 'FRigUnit_SetIntAnimationChannel::Value' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SetVector2DAnimationChannel
// 0x0010 (0x0190 - 0x0180)
struct FRigUnit_SetVector2DAnimationChannel final : public FRigUnit_SetAnimationChannelBase
{
public:
	struct FVector2D                              Value;                                             // 0x0180(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_SetVector2DAnimationChannel) == 0x000010, "Wrong alignment on FRigUnit_SetVector2DAnimationChannel");
static_assert(sizeof(FRigUnit_SetVector2DAnimationChannel) == 0x000190, "Wrong size on FRigUnit_SetVector2DAnimationChannel");
static_assert(offsetof(FRigUnit_SetVector2DAnimationChannel, Value) == 0x000180, "Member 'FRigUnit_SetVector2DAnimationChannel::Value' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SetVectorAnimationChannel
// 0x0020 (0x01A0 - 0x0180)
struct FRigUnit_SetVectorAnimationChannel final : public FRigUnit_SetAnimationChannelBase
{
public:
	struct FVector                                Value;                                             // 0x0180(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B1C[0x8];                                     // 0x0198(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_SetVectorAnimationChannel) == 0x000010, "Wrong alignment on FRigUnit_SetVectorAnimationChannel");
static_assert(sizeof(FRigUnit_SetVectorAnimationChannel) == 0x0001A0, "Wrong size on FRigUnit_SetVectorAnimationChannel");
static_assert(offsetof(FRigUnit_SetVectorAnimationChannel, Value) == 0x000180, "Member 'FRigUnit_SetVectorAnimationChannel::Value' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SetRotatorAnimationChannel
// 0x0020 (0x01A0 - 0x0180)
struct FRigUnit_SetRotatorAnimationChannel final : public FRigUnit_SetAnimationChannelBase
{
public:
	struct FRotator                               Value;                                             // 0x0180(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B1D[0x8];                                     // 0x0198(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_SetRotatorAnimationChannel) == 0x000010, "Wrong alignment on FRigUnit_SetRotatorAnimationChannel");
static_assert(sizeof(FRigUnit_SetRotatorAnimationChannel) == 0x0001A0, "Wrong size on FRigUnit_SetRotatorAnimationChannel");
static_assert(offsetof(FRigUnit_SetRotatorAnimationChannel, Value) == 0x000180, "Member 'FRigUnit_SetRotatorAnimationChannel::Value' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SetTransformAnimationChannel
// 0x0060 (0x01E0 - 0x0180)
struct FRigUnit_SetTransformAnimationChannel final : public FRigUnit_SetAnimationChannelBase
{
public:
	struct FTransform                             Value;                                             // 0x0180(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_SetTransformAnimationChannel) == 0x000010, "Wrong alignment on FRigUnit_SetTransformAnimationChannel");
static_assert(sizeof(FRigUnit_SetTransformAnimationChannel) == 0x0001E0, "Wrong size on FRigUnit_SetTransformAnimationChannel");
static_assert(offsetof(FRigUnit_SetTransformAnimationChannel, Value) == 0x000180, "Member 'FRigUnit_SetTransformAnimationChannel::Value' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_DistributeRotation_WorkData
// 0x0050 (0x0050 - 0x0000)
struct FRigUnit_DistributeRotation_WorkData final
{
public:
	TArray<struct FCachedRigElement>              CachedItems;                                       // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ItemRotationA;                                     // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ItemRotationB;                                     // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 ItemRotationT;                                     // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     ItemLocalTransforms;                               // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_DistributeRotation_WorkData) == 0x000008, "Wrong alignment on FRigUnit_DistributeRotation_WorkData");
static_assert(sizeof(FRigUnit_DistributeRotation_WorkData) == 0x000050, "Wrong size on FRigUnit_DistributeRotation_WorkData");
static_assert(offsetof(FRigUnit_DistributeRotation_WorkData, CachedItems) == 0x000000, "Member 'FRigUnit_DistributeRotation_WorkData::CachedItems' has a wrong offset!");
static_assert(offsetof(FRigUnit_DistributeRotation_WorkData, ItemRotationA) == 0x000010, "Member 'FRigUnit_DistributeRotation_WorkData::ItemRotationA' has a wrong offset!");
static_assert(offsetof(FRigUnit_DistributeRotation_WorkData, ItemRotationB) == 0x000020, "Member 'FRigUnit_DistributeRotation_WorkData::ItemRotationB' has a wrong offset!");
static_assert(offsetof(FRigUnit_DistributeRotation_WorkData, ItemRotationT) == 0x000030, "Member 'FRigUnit_DistributeRotation_WorkData::ItemRotationT' has a wrong offset!");
static_assert(offsetof(FRigUnit_DistributeRotation_WorkData, ItemLocalTransforms) == 0x000040, "Member 'FRigUnit_DistributeRotation_WorkData::ItemLocalTransforms' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_GetBoneTransform
// 0x00A8 (0x00B0 - 0x0008)
struct FRigUnit_GetBoneTransform final : public FRigUnit
{
public:
	class FName                                   bone;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigVMTransformSpace                          Space;                                             // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B1E[0xF];                                     // 0x0011(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0020(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedBone;                                        // 0x0080(0x0020)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFirstUpdate;                                      // 0x00A0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B1F[0xF];                                     // 0x00A1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_GetBoneTransform) == 0x000010, "Wrong alignment on FRigUnit_GetBoneTransform");
static_assert(sizeof(FRigUnit_GetBoneTransform) == 0x0000B0, "Wrong size on FRigUnit_GetBoneTransform");
static_assert(offsetof(FRigUnit_GetBoneTransform, bone) == 0x000008, "Member 'FRigUnit_GetBoneTransform::bone' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetBoneTransform, Space) == 0x000010, "Member 'FRigUnit_GetBoneTransform::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetBoneTransform, Transform) == 0x000020, "Member 'FRigUnit_GetBoneTransform::Transform' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetBoneTransform, CachedBone) == 0x000080, "Member 'FRigUnit_GetBoneTransform::CachedBone' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetBoneTransform, bFirstUpdate) == 0x0000A0, "Member 'FRigUnit_GetBoneTransform::bFirstUpdate' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_GetControlInitialTransform
// 0x0098 (0x00A0 - 0x0008)
struct FRigUnit_GetControlInitialTransform final : public FRigUnit
{
public:
	class FName                                   Control;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigVMTransformSpace                          Space;                                             // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B20[0xF];                                     // 0x0011(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0020(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedControlIndex;                                // 0x0080(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_GetControlInitialTransform) == 0x000010, "Wrong alignment on FRigUnit_GetControlInitialTransform");
static_assert(sizeof(FRigUnit_GetControlInitialTransform) == 0x0000A0, "Wrong size on FRigUnit_GetControlInitialTransform");
static_assert(offsetof(FRigUnit_GetControlInitialTransform, Control) == 0x000008, "Member 'FRigUnit_GetControlInitialTransform::Control' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetControlInitialTransform, Space) == 0x000010, "Member 'FRigUnit_GetControlInitialTransform::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetControlInitialTransform, Transform) == 0x000020, "Member 'FRigUnit_GetControlInitialTransform::Transform' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetControlInitialTransform, CachedControlIndex) == 0x000080, "Member 'FRigUnit_GetControlInitialTransform::CachedControlIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_TwoBoneIKSimpleTransforms
// 0x0198 (0x01A0 - 0x0008)
struct FRigUnit_TwoBoneIKSimpleTransforms final : public FRigUnit_HighlevelBase
{
public:
	uint8                                         Pad_2B21[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Root;                                              // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PoleVector;                                        // 0x0070(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B22[0x8];                                     // 0x0088(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Effector;                                          // 0x0090(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PrimaryAxis;                                       // 0x00F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SecondaryAxis;                                     // 0x0108(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondaryAxisWeight;                               // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableStretch;                                    // 0x0124(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B23[0x3];                                     // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StretchStartRatio;                                 // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StretchMaximumRatio;                               // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoneALength;                                       // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoneBLength;                                       // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B24[0x8];                                     // 0x0138(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Elbow;                                             // 0x0140(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_TwoBoneIKSimpleTransforms) == 0x000010, "Wrong alignment on FRigUnit_TwoBoneIKSimpleTransforms");
static_assert(sizeof(FRigUnit_TwoBoneIKSimpleTransforms) == 0x0001A0, "Wrong size on FRigUnit_TwoBoneIKSimpleTransforms");
static_assert(offsetof(FRigUnit_TwoBoneIKSimpleTransforms, Root) == 0x000010, "Member 'FRigUnit_TwoBoneIKSimpleTransforms::Root' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimpleTransforms, PoleVector) == 0x000070, "Member 'FRigUnit_TwoBoneIKSimpleTransforms::PoleVector' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimpleTransforms, Effector) == 0x000090, "Member 'FRigUnit_TwoBoneIKSimpleTransforms::Effector' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimpleTransforms, PrimaryAxis) == 0x0000F0, "Member 'FRigUnit_TwoBoneIKSimpleTransforms::PrimaryAxis' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimpleTransforms, SecondaryAxis) == 0x000108, "Member 'FRigUnit_TwoBoneIKSimpleTransforms::SecondaryAxis' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimpleTransforms, SecondaryAxisWeight) == 0x000120, "Member 'FRigUnit_TwoBoneIKSimpleTransforms::SecondaryAxisWeight' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimpleTransforms, bEnableStretch) == 0x000124, "Member 'FRigUnit_TwoBoneIKSimpleTransforms::bEnableStretch' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimpleTransforms, StretchStartRatio) == 0x000128, "Member 'FRigUnit_TwoBoneIKSimpleTransforms::StretchStartRatio' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimpleTransforms, StretchMaximumRatio) == 0x00012C, "Member 'FRigUnit_TwoBoneIKSimpleTransforms::StretchMaximumRatio' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimpleTransforms, BoneALength) == 0x000130, "Member 'FRigUnit_TwoBoneIKSimpleTransforms::BoneALength' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimpleTransforms, BoneBLength) == 0x000134, "Member 'FRigUnit_TwoBoneIKSimpleTransforms::BoneBLength' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimpleTransforms, Elbow) == 0x000140, "Member 'FRigUnit_TwoBoneIKSimpleTransforms::Elbow' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_GetControlBool
// 0x0030 (0x0038 - 0x0008)
struct FRigUnit_GetControlBool final : public FRigUnit
{
public:
	class FName                                   Control;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BoolValue;                                         // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B25[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCachedRigElement                      CachedControlIndex;                                // 0x0018(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_GetControlBool) == 0x000008, "Wrong alignment on FRigUnit_GetControlBool");
static_assert(sizeof(FRigUnit_GetControlBool) == 0x000038, "Wrong size on FRigUnit_GetControlBool");
static_assert(offsetof(FRigUnit_GetControlBool, Control) == 0x000008, "Member 'FRigUnit_GetControlBool::Control' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetControlBool, BoolValue) == 0x000010, "Member 'FRigUnit_GetControlBool::BoolValue' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetControlBool, CachedControlIndex) == 0x000018, "Member 'FRigUnit_GetControlBool::CachedControlIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_GetControlFloat
// 0x0038 (0x0040 - 0x0008)
struct FRigUnit_GetControlFloat final : public FRigUnit
{
public:
	class FName                                   Control;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatValue;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Minimum;                                           // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Maximum;                                           // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B26[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCachedRigElement                      CachedControlIndex;                                // 0x0020(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_GetControlFloat) == 0x000008, "Wrong alignment on FRigUnit_GetControlFloat");
static_assert(sizeof(FRigUnit_GetControlFloat) == 0x000040, "Wrong size on FRigUnit_GetControlFloat");
static_assert(offsetof(FRigUnit_GetControlFloat, Control) == 0x000008, "Member 'FRigUnit_GetControlFloat::Control' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetControlFloat, FloatValue) == 0x000010, "Member 'FRigUnit_GetControlFloat::FloatValue' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetControlFloat, Minimum) == 0x000014, "Member 'FRigUnit_GetControlFloat::Minimum' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetControlFloat, Maximum) == 0x000018, "Member 'FRigUnit_GetControlFloat::Maximum' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetControlFloat, CachedControlIndex) == 0x000020, "Member 'FRigUnit_GetControlFloat::CachedControlIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SpringInterpVector
// 0x0090 (0x0098 - 0x0008)
struct FRigUnit_SpringInterpVector final : public FRigVMFunction_SimBase
{
public:
	struct FVector                                Current;                                           // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Target;                                            // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Stiffness;                                         // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CriticalDamping;                                   // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mass;                                              // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B27[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Result;                                            // 0x0048(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVectorSpringState                     SpringState;                                       // 0x0060(0x0038)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_SpringInterpVector) == 0x000008, "Wrong alignment on FRigUnit_SpringInterpVector");
static_assert(sizeof(FRigUnit_SpringInterpVector) == 0x000098, "Wrong size on FRigUnit_SpringInterpVector");
static_assert(offsetof(FRigUnit_SpringInterpVector, Current) == 0x000008, "Member 'FRigUnit_SpringInterpVector::Current' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringInterpVector, Target) == 0x000020, "Member 'FRigUnit_SpringInterpVector::Target' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringInterpVector, Stiffness) == 0x000038, "Member 'FRigUnit_SpringInterpVector::Stiffness' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringInterpVector, CriticalDamping) == 0x00003C, "Member 'FRigUnit_SpringInterpVector::CriticalDamping' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringInterpVector, Mass) == 0x000040, "Member 'FRigUnit_SpringInterpVector::Mass' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringInterpVector, Result) == 0x000048, "Member 'FRigUnit_SpringInterpVector::Result' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringInterpVector, SpringState) == 0x000060, "Member 'FRigUnit_SpringInterpVector::SpringState' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_GetControlInteger
// 0x0038 (0x0040 - 0x0008)
struct FRigUnit_GetControlInteger final : public FRigUnit
{
public:
	class FName                                   Control;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntegerValue;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minimum;                                           // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Maximum;                                           // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B28[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCachedRigElement                      CachedControlIndex;                                // 0x0020(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_GetControlInteger) == 0x000008, "Wrong alignment on FRigUnit_GetControlInteger");
static_assert(sizeof(FRigUnit_GetControlInteger) == 0x000040, "Wrong size on FRigUnit_GetControlInteger");
static_assert(offsetof(FRigUnit_GetControlInteger, Control) == 0x000008, "Member 'FRigUnit_GetControlInteger::Control' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetControlInteger, IntegerValue) == 0x000010, "Member 'FRigUnit_GetControlInteger::IntegerValue' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetControlInteger, Minimum) == 0x000014, "Member 'FRigUnit_GetControlInteger::Minimum' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetControlInteger, Maximum) == 0x000018, "Member 'FRigUnit_GetControlInteger::Maximum' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetControlInteger, CachedControlIndex) == 0x000020, "Member 'FRigUnit_GetControlInteger::CachedControlIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_GetControlVector2D
// 0x0058 (0x0060 - 0x0008)
struct FRigUnit_GetControlVector2D final : public FRigUnit
{
public:
	class FName                                   Control;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Vector;                                            // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Minimum;                                           // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Maximum;                                           // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedControlIndex;                                // 0x0040(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_GetControlVector2D) == 0x000008, "Wrong alignment on FRigUnit_GetControlVector2D");
static_assert(sizeof(FRigUnit_GetControlVector2D) == 0x000060, "Wrong size on FRigUnit_GetControlVector2D");
static_assert(offsetof(FRigUnit_GetControlVector2D, Control) == 0x000008, "Member 'FRigUnit_GetControlVector2D::Control' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetControlVector2D, Vector) == 0x000010, "Member 'FRigUnit_GetControlVector2D::Vector' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetControlVector2D, Minimum) == 0x000020, "Member 'FRigUnit_GetControlVector2D::Minimum' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetControlVector2D, Maximum) == 0x000030, "Member 'FRigUnit_GetControlVector2D::Maximum' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetControlVector2D, CachedControlIndex) == 0x000040, "Member 'FRigUnit_GetControlVector2D::CachedControlIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_GetControlVector
// 0x0078 (0x0080 - 0x0008)
struct FRigUnit_GetControlVector final : public FRigUnit
{
public:
	class FName                                   Control;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigVMTransformSpace                          Space;                                             // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B29[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Vector;                                            // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Minimum;                                           // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Maximum;                                           // 0x0048(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedControlIndex;                                // 0x0060(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_GetControlVector) == 0x000008, "Wrong alignment on FRigUnit_GetControlVector");
static_assert(sizeof(FRigUnit_GetControlVector) == 0x000080, "Wrong size on FRigUnit_GetControlVector");
static_assert(offsetof(FRigUnit_GetControlVector, Control) == 0x000008, "Member 'FRigUnit_GetControlVector::Control' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetControlVector, Space) == 0x000010, "Member 'FRigUnit_GetControlVector::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetControlVector, Vector) == 0x000018, "Member 'FRigUnit_GetControlVector::Vector' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetControlVector, Minimum) == 0x000030, "Member 'FRigUnit_GetControlVector::Minimum' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetControlVector, Maximum) == 0x000048, "Member 'FRigUnit_GetControlVector::Maximum' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetControlVector, CachedControlIndex) == 0x000060, "Member 'FRigUnit_GetControlVector::CachedControlIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_GetControlRotator
// 0x0078 (0x0080 - 0x0008)
struct FRigUnit_GetControlRotator final : public FRigUnit
{
public:
	class FName                                   Control;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigVMTransformSpace                          Space;                                             // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B2A[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Rotator;                                           // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               Minimum;                                           // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               Maximum;                                           // 0x0048(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedControlIndex;                                // 0x0060(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_GetControlRotator) == 0x000008, "Wrong alignment on FRigUnit_GetControlRotator");
static_assert(sizeof(FRigUnit_GetControlRotator) == 0x000080, "Wrong size on FRigUnit_GetControlRotator");
static_assert(offsetof(FRigUnit_GetControlRotator, Control) == 0x000008, "Member 'FRigUnit_GetControlRotator::Control' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetControlRotator, Space) == 0x000010, "Member 'FRigUnit_GetControlRotator::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetControlRotator, Rotator) == 0x000018, "Member 'FRigUnit_GetControlRotator::Rotator' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetControlRotator, Minimum) == 0x000030, "Member 'FRigUnit_GetControlRotator::Minimum' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetControlRotator, Maximum) == 0x000048, "Member 'FRigUnit_GetControlRotator::Maximum' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetControlRotator, CachedControlIndex) == 0x000060, "Member 'FRigUnit_GetControlRotator::CachedControlIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_FitChainToCurve_Rotation
// 0x0030 (0x0030 - 0x0000)
struct FRigUnit_FitChainToCurve_Rotation final
{
public:
	struct FQuat                                  Rotation;                                          // 0x0000(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ratio;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B2B[0xC];                                     // 0x0024(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_FitChainToCurve_Rotation) == 0x000010, "Wrong alignment on FRigUnit_FitChainToCurve_Rotation");
static_assert(sizeof(FRigUnit_FitChainToCurve_Rotation) == 0x000030, "Wrong size on FRigUnit_FitChainToCurve_Rotation");
static_assert(offsetof(FRigUnit_FitChainToCurve_Rotation, Rotation) == 0x000000, "Member 'FRigUnit_FitChainToCurve_Rotation::Rotation' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurve_Rotation, Ratio) == 0x000020, "Member 'FRigUnit_FitChainToCurve_Rotation::Ratio' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_GetControlTransform
// 0x0158 (0x0160 - 0x0008)
struct FRigUnit_GetControlTransform final : public FRigUnit
{
public:
	class FName                                   Control;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigVMTransformSpace                          Space;                                             // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B2C[0xF];                                     // 0x0011(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0020(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Minimum;                                           // 0x0080(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Maximum;                                           // 0x00E0(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedControlIndex;                                // 0x0140(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_GetControlTransform) == 0x000010, "Wrong alignment on FRigUnit_GetControlTransform");
static_assert(sizeof(FRigUnit_GetControlTransform) == 0x000160, "Wrong size on FRigUnit_GetControlTransform");
static_assert(offsetof(FRigUnit_GetControlTransform, Control) == 0x000008, "Member 'FRigUnit_GetControlTransform::Control' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetControlTransform, Space) == 0x000010, "Member 'FRigUnit_GetControlTransform::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetControlTransform, Transform) == 0x000020, "Member 'FRigUnit_GetControlTransform::Transform' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetControlTransform, Minimum) == 0x000080, "Member 'FRigUnit_GetControlTransform::Minimum' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetControlTransform, Maximum) == 0x0000E0, "Member 'FRigUnit_GetControlTransform::Maximum' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetControlTransform, CachedControlIndex) == 0x000140, "Member 'FRigUnit_GetControlTransform::CachedControlIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_GetCurveValue
// 0x0030 (0x0038 - 0x0008)
struct FRigUnit_GetCurveValue final : public FRigUnit
{
public:
	class FName                                   Curve;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Valid;                                             // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B2D[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedCurveIndex;                                  // 0x0018(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FRigUnit_GetCurveValue) == 0x000008, "Wrong alignment on FRigUnit_GetCurveValue");
static_assert(sizeof(FRigUnit_GetCurveValue) == 0x000038, "Wrong size on FRigUnit_GetCurveValue");
static_assert(offsetof(FRigUnit_GetCurveValue, Curve) == 0x000008, "Member 'FRigUnit_GetCurveValue::Curve' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetCurveValue, Valid) == 0x000010, "Member 'FRigUnit_GetCurveValue::Valid' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetCurveValue, Value) == 0x000014, "Member 'FRigUnit_GetCurveValue::Value' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetCurveValue, CachedCurveIndex) == 0x000018, "Member 'FRigUnit_GetCurveValue::CachedCurveIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_CCDIK_RotationLimitPerItem
// 0x0010 (0x0010 - 0x0000)
struct FRigUnit_CCDIK_RotationLimitPerItem final
{
public:
	struct FRigElementKey                         Item;                                              // 0x0000(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Limit;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_CCDIK_RotationLimitPerItem) == 0x000004, "Wrong alignment on FRigUnit_CCDIK_RotationLimitPerItem");
static_assert(sizeof(FRigUnit_CCDIK_RotationLimitPerItem) == 0x000010, "Wrong size on FRigUnit_CCDIK_RotationLimitPerItem");
static_assert(offsetof(FRigUnit_CCDIK_RotationLimitPerItem, Item) == 0x000000, "Member 'FRigUnit_CCDIK_RotationLimitPerItem::Item' has a wrong offset!");
static_assert(offsetof(FRigUnit_CCDIK_RotationLimitPerItem, Limit) == 0x00000C, "Member 'FRigUnit_CCDIK_RotationLimitPerItem::Limit' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_CCDIKItemArray
// 0x0100 (0x0260 - 0x0160)
struct FRigUnit_CCDIKItemArray final : public FRigUnit_HighlevelBaseMutable
{
public:
	TArray<struct FRigElementKey>                 Items;                                             // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FTransform                             EffectorTransform;                                 // 0x0170(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Precision;                                         // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x01D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxIterations;                                     // 0x01D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStartFromTail;                                    // 0x01DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B2E[0x3];                                     // 0x01DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BaseRotationLimit;                                 // 0x01E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B2F[0x4];                                     // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigUnit_CCDIK_RotationLimitPerItem> RotationLimits;                                    // 0x01E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x01F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B30[0x7];                                     // 0x01F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_CCDIK_WorkData                WorkData;                                          // 0x0200(0x0060)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_CCDIKItemArray) == 0x000010, "Wrong alignment on FRigUnit_CCDIKItemArray");
static_assert(sizeof(FRigUnit_CCDIKItemArray) == 0x000260, "Wrong size on FRigUnit_CCDIKItemArray");
static_assert(offsetof(FRigUnit_CCDIKItemArray, Items) == 0x000160, "Member 'FRigUnit_CCDIKItemArray::Items' has a wrong offset!");
static_assert(offsetof(FRigUnit_CCDIKItemArray, EffectorTransform) == 0x000170, "Member 'FRigUnit_CCDIKItemArray::EffectorTransform' has a wrong offset!");
static_assert(offsetof(FRigUnit_CCDIKItemArray, Precision) == 0x0001D0, "Member 'FRigUnit_CCDIKItemArray::Precision' has a wrong offset!");
static_assert(offsetof(FRigUnit_CCDIKItemArray, Weight) == 0x0001D4, "Member 'FRigUnit_CCDIKItemArray::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_CCDIKItemArray, MaxIterations) == 0x0001D8, "Member 'FRigUnit_CCDIKItemArray::MaxIterations' has a wrong offset!");
static_assert(offsetof(FRigUnit_CCDIKItemArray, bStartFromTail) == 0x0001DC, "Member 'FRigUnit_CCDIKItemArray::bStartFromTail' has a wrong offset!");
static_assert(offsetof(FRigUnit_CCDIKItemArray, BaseRotationLimit) == 0x0001E0, "Member 'FRigUnit_CCDIKItemArray::BaseRotationLimit' has a wrong offset!");
static_assert(offsetof(FRigUnit_CCDIKItemArray, RotationLimits) == 0x0001E8, "Member 'FRigUnit_CCDIKItemArray::RotationLimits' has a wrong offset!");
static_assert(offsetof(FRigUnit_CCDIKItemArray, bPropagateToChildren) == 0x0001F8, "Member 'FRigUnit_CCDIKItemArray::bPropagateToChildren' has a wrong offset!");
static_assert(offsetof(FRigUnit_CCDIKItemArray, WorkData) == 0x000200, "Member 'FRigUnit_CCDIKItemArray::WorkData' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_GetInitialBoneTransform
// 0x0098 (0x00A0 - 0x0008)
struct FRigUnit_GetInitialBoneTransform final : public FRigUnit
{
public:
	class FName                                   bone;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigVMTransformSpace                          Space;                                             // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B31[0xF];                                     // 0x0011(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0020(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedBone;                                        // 0x0080(0x0020)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_GetInitialBoneTransform) == 0x000010, "Wrong alignment on FRigUnit_GetInitialBoneTransform");
static_assert(sizeof(FRigUnit_GetInitialBoneTransform) == 0x0000A0, "Wrong size on FRigUnit_GetInitialBoneTransform");
static_assert(offsetof(FRigUnit_GetInitialBoneTransform, bone) == 0x000008, "Member 'FRigUnit_GetInitialBoneTransform::bone' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetInitialBoneTransform, Space) == 0x000010, "Member 'FRigUnit_GetInitialBoneTransform::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetInitialBoneTransform, Transform) == 0x000020, "Member 'FRigUnit_GetInitialBoneTransform::Transform' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetInitialBoneTransform, CachedBone) == 0x000080, "Member 'FRigUnit_GetInitialBoneTransform::CachedBone' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_GetRelativeBoneTransform
// 0x00B8 (0x00C0 - 0x0008)
struct FRigUnit_GetRelativeBoneTransform final : public FRigUnit
{
public:
	class FName                                   bone;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Space;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B32[0x8];                                     // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0020(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedBone;                                        // 0x0080(0x0020)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedSpace;                                       // 0x00A0(0x0020)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_GetRelativeBoneTransform) == 0x000010, "Wrong alignment on FRigUnit_GetRelativeBoneTransform");
static_assert(sizeof(FRigUnit_GetRelativeBoneTransform) == 0x0000C0, "Wrong size on FRigUnit_GetRelativeBoneTransform");
static_assert(offsetof(FRigUnit_GetRelativeBoneTransform, bone) == 0x000008, "Member 'FRigUnit_GetRelativeBoneTransform::bone' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetRelativeBoneTransform, Space) == 0x000010, "Member 'FRigUnit_GetRelativeBoneTransform::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetRelativeBoneTransform, Transform) == 0x000020, "Member 'FRigUnit_GetRelativeBoneTransform::Transform' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetRelativeBoneTransform, CachedBone) == 0x000080, "Member 'FRigUnit_GetRelativeBoneTransform::CachedBone' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetRelativeBoneTransform, CachedSpace) == 0x0000A0, "Member 'FRigUnit_GetRelativeBoneTransform::CachedSpace' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_FABRIK_WorkData
// 0x0040 (0x0040 - 0x0000)
struct FRigUnit_FABRIK_WorkData final
{
public:
	TArray<struct FFABRIKChainLink>               Chain;                                             // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCachedRigElement>              CachedItems;                                       // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedEffector;                                    // 0x0020(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_FABRIK_WorkData) == 0x000008, "Wrong alignment on FRigUnit_FABRIK_WorkData");
static_assert(sizeof(FRigUnit_FABRIK_WorkData) == 0x000040, "Wrong size on FRigUnit_FABRIK_WorkData");
static_assert(offsetof(FRigUnit_FABRIK_WorkData, Chain) == 0x000000, "Member 'FRigUnit_FABRIK_WorkData::Chain' has a wrong offset!");
static_assert(offsetof(FRigUnit_FABRIK_WorkData, CachedItems) == 0x000010, "Member 'FRigUnit_FABRIK_WorkData::CachedItems' has a wrong offset!");
static_assert(offsetof(FRigUnit_FABRIK_WorkData, CachedEffector) == 0x000020, "Member 'FRigUnit_FABRIK_WorkData::CachedEffector' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_GetRelativeTransformForItem
// 0x00C8 (0x00D0 - 0x0008)
struct FRigUnit_GetRelativeTransformForItem final : public FRigUnit
{
public:
	struct FRigElementKey                         Child;                                             // 0x0008(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bChildInitial;                                     // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B33[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKey                         Parent;                                            // 0x0018(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bParentInitial;                                    // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B34[0xB];                                     // 0x0025(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RelativeTransform;                                 // 0x0030(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedChild;                                       // 0x0090(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedParent;                                      // 0x00B0(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_GetRelativeTransformForItem) == 0x000010, "Wrong alignment on FRigUnit_GetRelativeTransformForItem");
static_assert(sizeof(FRigUnit_GetRelativeTransformForItem) == 0x0000D0, "Wrong size on FRigUnit_GetRelativeTransformForItem");
static_assert(offsetof(FRigUnit_GetRelativeTransformForItem, Child) == 0x000008, "Member 'FRigUnit_GetRelativeTransformForItem::Child' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetRelativeTransformForItem, bChildInitial) == 0x000014, "Member 'FRigUnit_GetRelativeTransformForItem::bChildInitial' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetRelativeTransformForItem, Parent) == 0x000018, "Member 'FRigUnit_GetRelativeTransformForItem::Parent' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetRelativeTransformForItem, bParentInitial) == 0x000024, "Member 'FRigUnit_GetRelativeTransformForItem::bParentInitial' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetRelativeTransformForItem, RelativeTransform) == 0x000030, "Member 'FRigUnit_GetRelativeTransformForItem::RelativeTransform' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetRelativeTransformForItem, CachedChild) == 0x000090, "Member 'FRigUnit_GetRelativeTransformForItem::CachedChild' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetRelativeTransformForItem, CachedParent) == 0x0000B0, "Member 'FRigUnit_GetRelativeTransformForItem::CachedParent' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_GetSpaceTransform
// 0x0098 (0x00A0 - 0x0008)
struct FRigUnit_GetSpaceTransform final : public FRigUnit
{
public:
	class FName                                   Space;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigVMTransformSpace                          SpaceType;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B35[0xF];                                     // 0x0011(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0020(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedSpaceIndex;                                  // 0x0080(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_GetSpaceTransform) == 0x000010, "Wrong alignment on FRigUnit_GetSpaceTransform");
static_assert(sizeof(FRigUnit_GetSpaceTransform) == 0x0000A0, "Wrong size on FRigUnit_GetSpaceTransform");
static_assert(offsetof(FRigUnit_GetSpaceTransform, Space) == 0x000008, "Member 'FRigUnit_GetSpaceTransform::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetSpaceTransform, SpaceType) == 0x000010, "Member 'FRigUnit_GetSpaceTransform::SpaceType' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetSpaceTransform, Transform) == 0x000020, "Member 'FRigUnit_GetSpaceTransform::Transform' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetSpaceTransform, CachedSpaceIndex) == 0x000080, "Member 'FRigUnit_GetSpaceTransform::CachedSpaceIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_GetTransform
// 0x0098 (0x00A0 - 0x0008)
struct FRigUnit_GetTransform final : public FRigUnit
{
public:
	struct FRigElementKey                         Item;                                              // 0x0008(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigVMTransformSpace                          Space;                                             // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitial;                                          // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B36[0xA];                                     // 0x0016(0x000A)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0020(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedIndex;                                       // 0x0080(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_GetTransform) == 0x000010, "Wrong alignment on FRigUnit_GetTransform");
static_assert(sizeof(FRigUnit_GetTransform) == 0x0000A0, "Wrong size on FRigUnit_GetTransform");
static_assert(offsetof(FRigUnit_GetTransform, Item) == 0x000008, "Member 'FRigUnit_GetTransform::Item' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetTransform, Space) == 0x000014, "Member 'FRigUnit_GetTransform::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetTransform, bInitial) == 0x000015, "Member 'FRigUnit_GetTransform::bInitial' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetTransform, Transform) == 0x000020, "Member 'FRigUnit_GetTransform::Transform' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetTransform, CachedIndex) == 0x000080, "Member 'FRigUnit_GetTransform::CachedIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_GetTransformArray
// 0x0038 (0x0040 - 0x0008)
struct FRigUnit_GetTransformArray final : public FRigUnit
{
public:
	struct FRigElementKeyCollection               Items;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigVMTransformSpace                          Space;                                             // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitial;                                          // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B37[0x6];                                     // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     Transforms;                                        // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCachedRigElement>              CachedIndex;                                       // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_GetTransformArray) == 0x000008, "Wrong alignment on FRigUnit_GetTransformArray");
static_assert(sizeof(FRigUnit_GetTransformArray) == 0x000040, "Wrong size on FRigUnit_GetTransformArray");
static_assert(offsetof(FRigUnit_GetTransformArray, Items) == 0x000008, "Member 'FRigUnit_GetTransformArray::Items' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetTransformArray, Space) == 0x000018, "Member 'FRigUnit_GetTransformArray::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetTransformArray, bInitial) == 0x000019, "Member 'FRigUnit_GetTransformArray::bInitial' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetTransformArray, Transforms) == 0x000020, "Member 'FRigUnit_GetTransformArray::Transforms' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetTransformArray, CachedIndex) == 0x000030, "Member 'FRigUnit_GetTransformArray::CachedIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_GetTransformItemArray
// 0x0038 (0x0040 - 0x0008)
struct FRigUnit_GetTransformItemArray final : public FRigUnit
{
public:
	TArray<struct FRigElementKey>                 Items;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	ERigVMTransformSpace                          Space;                                             // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitial;                                          // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B38[0x6];                                     // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     Transforms;                                        // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCachedRigElement>              CachedIndex;                                       // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_GetTransformItemArray) == 0x000008, "Wrong alignment on FRigUnit_GetTransformItemArray");
static_assert(sizeof(FRigUnit_GetTransformItemArray) == 0x000040, "Wrong size on FRigUnit_GetTransformItemArray");
static_assert(offsetof(FRigUnit_GetTransformItemArray, Items) == 0x000008, "Member 'FRigUnit_GetTransformItemArray::Items' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetTransformItemArray, Space) == 0x000018, "Member 'FRigUnit_GetTransformItemArray::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetTransformItemArray, bInitial) == 0x000019, "Member 'FRigUnit_GetTransformItemArray::bInitial' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetTransformItemArray, Transforms) == 0x000020, "Member 'FRigUnit_GetTransformItemArray::Transforms' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetTransformItemArray, CachedIndex) == 0x000030, "Member 'FRigUnit_GetTransformItemArray::CachedIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigDispatch_MetadataBase
// 0x0030 (0x00A0 - 0x0070)
struct FRigDispatch_MetadataBase : public FRigDispatchFactory
{
public:
	uint8                                         Pad_2B39[0x30];                                    // 0x0070(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigDispatch_MetadataBase) == 0x000008, "Wrong alignment on FRigDispatch_MetadataBase");
static_assert(sizeof(FRigDispatch_MetadataBase) == 0x0000A0, "Wrong size on FRigDispatch_MetadataBase");

// ScriptStruct ControlRig.RigDispatch_GetMetadata
// 0x0000 (0x00A0 - 0x00A0)
struct FRigDispatch_GetMetadata final : public FRigDispatch_MetadataBase
{
};
static_assert(alignof(FRigDispatch_GetMetadata) == 0x000008, "Wrong alignment on FRigDispatch_GetMetadata");
static_assert(sizeof(FRigDispatch_GetMetadata) == 0x0000A0, "Wrong size on FRigDispatch_GetMetadata");

// ScriptStruct ControlRig.RigDispatch_SetMetadata
// 0x0000 (0x00A0 - 0x00A0)
struct FRigDispatch_SetMetadata final : public FRigDispatch_MetadataBase
{
};
static_assert(alignof(FRigDispatch_SetMetadata) == 0x000008, "Wrong alignment on FRigDispatch_SetMetadata");
static_assert(sizeof(FRigDispatch_SetMetadata) == 0x0000A0, "Wrong size on FRigDispatch_SetMetadata");

// ScriptStruct ControlRig.RigUnit_FitChainToCurve_DebugSettings
// 0x0090 (0x0090 - 0x0000)
struct FRigUnit_FitChainToCurve_DebugSettings final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B3A[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Scale;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CurveColor;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SegmentsColor;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B3B[0x8];                                     // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             WorldOffset;                                       // 0x0030(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_FitChainToCurve_DebugSettings) == 0x000010, "Wrong alignment on FRigUnit_FitChainToCurve_DebugSettings");
static_assert(sizeof(FRigUnit_FitChainToCurve_DebugSettings) == 0x000090, "Wrong size on FRigUnit_FitChainToCurve_DebugSettings");
static_assert(offsetof(FRigUnit_FitChainToCurve_DebugSettings, bEnabled) == 0x000000, "Member 'FRigUnit_FitChainToCurve_DebugSettings::bEnabled' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurve_DebugSettings, Scale) == 0x000004, "Member 'FRigUnit_FitChainToCurve_DebugSettings::Scale' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurve_DebugSettings, CurveColor) == 0x000008, "Member 'FRigUnit_FitChainToCurve_DebugSettings::CurveColor' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurve_DebugSettings, SegmentsColor) == 0x000018, "Member 'FRigUnit_FitChainToCurve_DebugSettings::SegmentsColor' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurve_DebugSettings, WorldOffset) == 0x000030, "Member 'FRigUnit_FitChainToCurve_DebugSettings::WorldOffset' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_FitChainToCurvePerItem
// 0x0220 (0x0380 - 0x0160)
struct FRigUnit_FitChainToCurvePerItem final : public FRigUnit_HighlevelBaseMutable
{
public:
	struct FRigElementKeyCollection               Items;                                             // 0x0160(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigVMFourPointBezier                  Bezier;                                            // 0x0170(0x0060)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EControlRigCurveAlignment                     Alignment;                                         // 0x01D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B3C[0x3];                                     // 0x01D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Minimum;                                           // 0x01D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Maximum;                                           // 0x01D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SamplingPrecision;                                 // 0x01DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PrimaryAxis;                                       // 0x01E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SecondaryAxis;                                     // 0x01F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PoleVectorPosition;                                // 0x0210(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRigUnit_FitChainToCurve_Rotation> Rotations;                                         // 0x0228(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	ERigVMAnimEasingType                          RotationEaseType;                                  // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B3D[0x3];                                     // 0x0239(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Weight;                                            // 0x023C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x0240(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B3E[0xF];                                     // 0x0241(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_FitChainToCurve_DebugSettings DebugSettings;                                     // 0x0250(0x0090)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRigUnit_FitChainToCurve_WorkData      WorkData;                                          // 0x02E0(0x0098)(Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B3F[0x8];                                     // 0x0378(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_FitChainToCurvePerItem) == 0x000010, "Wrong alignment on FRigUnit_FitChainToCurvePerItem");
static_assert(sizeof(FRigUnit_FitChainToCurvePerItem) == 0x000380, "Wrong size on FRigUnit_FitChainToCurvePerItem");
static_assert(offsetof(FRigUnit_FitChainToCurvePerItem, Items) == 0x000160, "Member 'FRigUnit_FitChainToCurvePerItem::Items' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurvePerItem, Bezier) == 0x000170, "Member 'FRigUnit_FitChainToCurvePerItem::Bezier' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurvePerItem, Alignment) == 0x0001D0, "Member 'FRigUnit_FitChainToCurvePerItem::Alignment' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurvePerItem, Minimum) == 0x0001D4, "Member 'FRigUnit_FitChainToCurvePerItem::Minimum' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurvePerItem, Maximum) == 0x0001D8, "Member 'FRigUnit_FitChainToCurvePerItem::Maximum' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurvePerItem, SamplingPrecision) == 0x0001DC, "Member 'FRigUnit_FitChainToCurvePerItem::SamplingPrecision' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurvePerItem, PrimaryAxis) == 0x0001E0, "Member 'FRigUnit_FitChainToCurvePerItem::PrimaryAxis' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurvePerItem, SecondaryAxis) == 0x0001F8, "Member 'FRigUnit_FitChainToCurvePerItem::SecondaryAxis' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurvePerItem, PoleVectorPosition) == 0x000210, "Member 'FRigUnit_FitChainToCurvePerItem::PoleVectorPosition' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurvePerItem, Rotations) == 0x000228, "Member 'FRigUnit_FitChainToCurvePerItem::Rotations' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurvePerItem, RotationEaseType) == 0x000238, "Member 'FRigUnit_FitChainToCurvePerItem::RotationEaseType' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurvePerItem, Weight) == 0x00023C, "Member 'FRigUnit_FitChainToCurvePerItem::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurvePerItem, bPropagateToChildren) == 0x000240, "Member 'FRigUnit_FitChainToCurvePerItem::bPropagateToChildren' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurvePerItem, DebugSettings) == 0x000250, "Member 'FRigUnit_FitChainToCurvePerItem::DebugSettings' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurvePerItem, WorkData) == 0x0002E0, "Member 'FRigUnit_FitChainToCurvePerItem::WorkData' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_RemoveMetadata
// 0x0040 (0x01A0 - 0x0160)
struct FRigUnit_RemoveMetadata final : public FRigUnitMutable
{
public:
	struct FRigElementKey                         Item;                                              // 0x0160(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name;                                              // 0x016C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Removed;                                           // 0x0174(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B40[0x3];                                     // 0x0175(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCachedRigElement                      CachedIndex;                                       // 0x0178(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B41[0x8];                                     // 0x0198(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_RemoveMetadata) == 0x000010, "Wrong alignment on FRigUnit_RemoveMetadata");
static_assert(sizeof(FRigUnit_RemoveMetadata) == 0x0001A0, "Wrong size on FRigUnit_RemoveMetadata");
static_assert(offsetof(FRigUnit_RemoveMetadata, Item) == 0x000160, "Member 'FRigUnit_RemoveMetadata::Item' has a wrong offset!");
static_assert(offsetof(FRigUnit_RemoveMetadata, Name) == 0x00016C, "Member 'FRigUnit_RemoveMetadata::Name' has a wrong offset!");
static_assert(offsetof(FRigUnit_RemoveMetadata, Removed) == 0x000174, "Member 'FRigUnit_RemoveMetadata::Removed' has a wrong offset!");
static_assert(offsetof(FRigUnit_RemoveMetadata, CachedIndex) == 0x000178, "Member 'FRigUnit_RemoveMetadata::CachedIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_RemoveAllMetadata
// 0x0030 (0x0190 - 0x0160)
struct FRigUnit_RemoveAllMetadata final : public FRigUnitMutable
{
public:
	struct FRigElementKey                         Item;                                              // 0x0160(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Removed;                                           // 0x016C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B42[0x3];                                     // 0x016D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCachedRigElement                      CachedIndex;                                       // 0x0170(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_RemoveAllMetadata) == 0x000010, "Wrong alignment on FRigUnit_RemoveAllMetadata");
static_assert(sizeof(FRigUnit_RemoveAllMetadata) == 0x000190, "Wrong size on FRigUnit_RemoveAllMetadata");
static_assert(offsetof(FRigUnit_RemoveAllMetadata, Item) == 0x000160, "Member 'FRigUnit_RemoveAllMetadata::Item' has a wrong offset!");
static_assert(offsetof(FRigUnit_RemoveAllMetadata, Removed) == 0x00016C, "Member 'FRigUnit_RemoveAllMetadata::Removed' has a wrong offset!");
static_assert(offsetof(FRigUnit_RemoveAllMetadata, CachedIndex) == 0x000170, "Member 'FRigUnit_RemoveAllMetadata::CachedIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_HasMetadata
// 0x0038 (0x0040 - 0x0008)
struct FRigUnit_HasMetadata final : public FRigUnit
{
public:
	struct FRigElementKey                         Item;                                              // 0x0008(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name;                                              // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigMetadataType                              Type;                                              // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Found;                                             // 0x001D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B43[0x2];                                     // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCachedRigElement                      CachedIndex;                                       // 0x0020(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_HasMetadata) == 0x000008, "Wrong alignment on FRigUnit_HasMetadata");
static_assert(sizeof(FRigUnit_HasMetadata) == 0x000040, "Wrong size on FRigUnit_HasMetadata");
static_assert(offsetof(FRigUnit_HasMetadata, Item) == 0x000008, "Member 'FRigUnit_HasMetadata::Item' has a wrong offset!");
static_assert(offsetof(FRigUnit_HasMetadata, Name) == 0x000014, "Member 'FRigUnit_HasMetadata::Name' has a wrong offset!");
static_assert(offsetof(FRigUnit_HasMetadata, Type) == 0x00001C, "Member 'FRigUnit_HasMetadata::Type' has a wrong offset!");
static_assert(offsetof(FRigUnit_HasMetadata, Found) == 0x00001D, "Member 'FRigUnit_HasMetadata::Found' has a wrong offset!");
static_assert(offsetof(FRigUnit_HasMetadata, CachedIndex) == 0x000020, "Member 'FRigUnit_HasMetadata::CachedIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_FindItemsWithMetadata
// 0x0020 (0x0028 - 0x0008)
struct FRigUnit_FindItemsWithMetadata final : public FRigUnit
{
public:
	class FName                                   Name;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigMetadataType                              Type;                                              // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B44[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigElementKey>                 Items;                                             // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_FindItemsWithMetadata) == 0x000008, "Wrong alignment on FRigUnit_FindItemsWithMetadata");
static_assert(sizeof(FRigUnit_FindItemsWithMetadata) == 0x000028, "Wrong size on FRigUnit_FindItemsWithMetadata");
static_assert(offsetof(FRigUnit_FindItemsWithMetadata, Name) == 0x000008, "Member 'FRigUnit_FindItemsWithMetadata::Name' has a wrong offset!");
static_assert(offsetof(FRigUnit_FindItemsWithMetadata, Type) == 0x000010, "Member 'FRigUnit_FindItemsWithMetadata::Type' has a wrong offset!");
static_assert(offsetof(FRigUnit_FindItemsWithMetadata, Items) == 0x000018, "Member 'FRigUnit_FindItemsWithMetadata::Items' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SlideChain
// 0x0060 (0x01C0 - 0x0160)
struct FRigUnit_SlideChain final : public FRigUnit_HighlevelBaseMutable
{
public:
	class FName                                   StartBone;                                         // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndBone;                                           // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlideAmount;                                       // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x0174(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B45[0x3];                                     // 0x0175(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_SlideChain_WorkData           WorkData;                                          // 0x0178(0x0048)(Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_SlideChain) == 0x000010, "Wrong alignment on FRigUnit_SlideChain");
static_assert(sizeof(FRigUnit_SlideChain) == 0x0001C0, "Wrong size on FRigUnit_SlideChain");
static_assert(offsetof(FRigUnit_SlideChain, StartBone) == 0x000160, "Member 'FRigUnit_SlideChain::StartBone' has a wrong offset!");
static_assert(offsetof(FRigUnit_SlideChain, EndBone) == 0x000168, "Member 'FRigUnit_SlideChain::EndBone' has a wrong offset!");
static_assert(offsetof(FRigUnit_SlideChain, SlideAmount) == 0x000170, "Member 'FRigUnit_SlideChain::SlideAmount' has a wrong offset!");
static_assert(offsetof(FRigUnit_SlideChain, bPropagateToChildren) == 0x000174, "Member 'FRigUnit_SlideChain::bPropagateToChildren' has a wrong offset!");
static_assert(offsetof(FRigUnit_SlideChain, WorkData) == 0x000178, "Member 'FRigUnit_SlideChain::WorkData' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_GetMetadataTags
// 0x0040 (0x0048 - 0x0008)
struct FRigUnit_GetMetadataTags final : public FRigUnit
{
public:
	struct FRigElementKey                         Item;                                              // 0x0008(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B46[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Tags;                                              // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedIndex;                                       // 0x0028(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_GetMetadataTags) == 0x000008, "Wrong alignment on FRigUnit_GetMetadataTags");
static_assert(sizeof(FRigUnit_GetMetadataTags) == 0x000048, "Wrong size on FRigUnit_GetMetadataTags");
static_assert(offsetof(FRigUnit_GetMetadataTags, Item) == 0x000008, "Member 'FRigUnit_GetMetadataTags::Item' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetMetadataTags, Tags) == 0x000018, "Member 'FRigUnit_GetMetadataTags::Tags' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetMetadataTags, CachedIndex) == 0x000028, "Member 'FRigUnit_GetMetadataTags::CachedIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SetMetadataTag
// 0x0040 (0x01A0 - 0x0160)
struct FRigUnit_SetMetadataTag final : public FRigUnitMutable
{
public:
	struct FRigElementKey                         Item;                                              // 0x0160(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x016C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B47[0x4];                                     // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCachedRigElement                      CachedIndex;                                       // 0x0178(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B48[0x8];                                     // 0x0198(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_SetMetadataTag) == 0x000010, "Wrong alignment on FRigUnit_SetMetadataTag");
static_assert(sizeof(FRigUnit_SetMetadataTag) == 0x0001A0, "Wrong size on FRigUnit_SetMetadataTag");
static_assert(offsetof(FRigUnit_SetMetadataTag, Item) == 0x000160, "Member 'FRigUnit_SetMetadataTag::Item' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetMetadataTag, Tag) == 0x00016C, "Member 'FRigUnit_SetMetadataTag::Tag' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetMetadataTag, CachedIndex) == 0x000178, "Member 'FRigUnit_SetMetadataTag::CachedIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SetMetadataTagArray
// 0x0040 (0x01A0 - 0x0160)
struct FRigUnit_SetMetadataTagArray final : public FRigUnitMutable
{
public:
	struct FRigElementKey                         Item;                                              // 0x0160(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B49[0x4];                                     // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Tags;                                              // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedIndex;                                       // 0x0180(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_SetMetadataTagArray) == 0x000010, "Wrong alignment on FRigUnit_SetMetadataTagArray");
static_assert(sizeof(FRigUnit_SetMetadataTagArray) == 0x0001A0, "Wrong size on FRigUnit_SetMetadataTagArray");
static_assert(offsetof(FRigUnit_SetMetadataTagArray, Item) == 0x000160, "Member 'FRigUnit_SetMetadataTagArray::Item' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetMetadataTagArray, Tags) == 0x000170, "Member 'FRigUnit_SetMetadataTagArray::Tags' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetMetadataTagArray, CachedIndex) == 0x000180, "Member 'FRigUnit_SetMetadataTagArray::CachedIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_RemoveMetadataTag
// 0x0040 (0x01A0 - 0x0160)
struct FRigUnit_RemoveMetadataTag final : public FRigUnitMutable
{
public:
	struct FRigElementKey                         Item;                                              // 0x0160(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x016C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Removed;                                           // 0x0174(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B4A[0x3];                                     // 0x0175(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCachedRigElement                      CachedIndex;                                       // 0x0178(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B4B[0x8];                                     // 0x0198(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_RemoveMetadataTag) == 0x000010, "Wrong alignment on FRigUnit_RemoveMetadataTag");
static_assert(sizeof(FRigUnit_RemoveMetadataTag) == 0x0001A0, "Wrong size on FRigUnit_RemoveMetadataTag");
static_assert(offsetof(FRigUnit_RemoveMetadataTag, Item) == 0x000160, "Member 'FRigUnit_RemoveMetadataTag::Item' has a wrong offset!");
static_assert(offsetof(FRigUnit_RemoveMetadataTag, Tag) == 0x00016C, "Member 'FRigUnit_RemoveMetadataTag::Tag' has a wrong offset!");
static_assert(offsetof(FRigUnit_RemoveMetadataTag, Removed) == 0x000174, "Member 'FRigUnit_RemoveMetadataTag::Removed' has a wrong offset!");
static_assert(offsetof(FRigUnit_RemoveMetadataTag, CachedIndex) == 0x000178, "Member 'FRigUnit_RemoveMetadataTag::CachedIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_MultiFABRIK_WorkData
// 0x0068 (0x0068 - 0x0000)
struct alignas(0x08) FRigUnit_MultiFABRIK_WorkData final
{
public:
	uint8                                         Pad_2B4C[0x68];                                    // 0x0000(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_MultiFABRIK_WorkData) == 0x000008, "Wrong alignment on FRigUnit_MultiFABRIK_WorkData");
static_assert(sizeof(FRigUnit_MultiFABRIK_WorkData) == 0x000068, "Wrong size on FRigUnit_MultiFABRIK_WorkData");

// ScriptStruct ControlRig.RigUnit_HasMetadataTag
// 0x0038 (0x0040 - 0x0008)
struct FRigUnit_HasMetadataTag final : public FRigUnit
{
public:
	struct FRigElementKey                         Item;                                              // 0x0008(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Found;                                             // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B4D[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCachedRigElement                      CachedIndex;                                       // 0x0020(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_HasMetadataTag) == 0x000008, "Wrong alignment on FRigUnit_HasMetadataTag");
static_assert(sizeof(FRigUnit_HasMetadataTag) == 0x000040, "Wrong size on FRigUnit_HasMetadataTag");
static_assert(offsetof(FRigUnit_HasMetadataTag, Item) == 0x000008, "Member 'FRigUnit_HasMetadataTag::Item' has a wrong offset!");
static_assert(offsetof(FRigUnit_HasMetadataTag, Tag) == 0x000014, "Member 'FRigUnit_HasMetadataTag::Tag' has a wrong offset!");
static_assert(offsetof(FRigUnit_HasMetadataTag, Found) == 0x00001C, "Member 'FRigUnit_HasMetadataTag::Found' has a wrong offset!");
static_assert(offsetof(FRigUnit_HasMetadataTag, CachedIndex) == 0x000020, "Member 'FRigUnit_HasMetadataTag::CachedIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_HasMetadataTagArray
// 0x0048 (0x0050 - 0x0008)
struct FRigUnit_HasMetadataTagArray final : public FRigUnit
{
public:
	struct FRigElementKey                         Item;                                              // 0x0008(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B4E[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Tags;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Found;                                             // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B4F[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCachedRigElement                      CachedIndex;                                       // 0x0030(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_HasMetadataTagArray) == 0x000008, "Wrong alignment on FRigUnit_HasMetadataTagArray");
static_assert(sizeof(FRigUnit_HasMetadataTagArray) == 0x000050, "Wrong size on FRigUnit_HasMetadataTagArray");
static_assert(offsetof(FRigUnit_HasMetadataTagArray, Item) == 0x000008, "Member 'FRigUnit_HasMetadataTagArray::Item' has a wrong offset!");
static_assert(offsetof(FRigUnit_HasMetadataTagArray, Tags) == 0x000018, "Member 'FRigUnit_HasMetadataTagArray::Tags' has a wrong offset!");
static_assert(offsetof(FRigUnit_HasMetadataTagArray, Found) == 0x000028, "Member 'FRigUnit_HasMetadataTagArray::Found' has a wrong offset!");
static_assert(offsetof(FRigUnit_HasMetadataTagArray, CachedIndex) == 0x000030, "Member 'FRigUnit_HasMetadataTagArray::CachedIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_FindItemsWithMetadataTag
// 0x0018 (0x0020 - 0x0008)
struct FRigUnit_FindItemsWithMetadataTag final : public FRigUnit
{
public:
	class FName                                   Tag;                                               // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRigElementKey>                 Items;                                             // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_FindItemsWithMetadataTag) == 0x000008, "Wrong alignment on FRigUnit_FindItemsWithMetadataTag");
static_assert(sizeof(FRigUnit_FindItemsWithMetadataTag) == 0x000020, "Wrong size on FRigUnit_FindItemsWithMetadataTag");
static_assert(offsetof(FRigUnit_FindItemsWithMetadataTag, Tag) == 0x000008, "Member 'FRigUnit_FindItemsWithMetadataTag::Tag' has a wrong offset!");
static_assert(offsetof(FRigUnit_FindItemsWithMetadataTag, Items) == 0x000010, "Member 'FRigUnit_FindItemsWithMetadataTag::Items' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_FindItemsWithMetadataTagArray
// 0x0020 (0x0028 - 0x0008)
struct FRigUnit_FindItemsWithMetadataTagArray final : public FRigUnit
{
public:
	TArray<class FName>                           Tags;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRigElementKey>                 Items;                                             // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_FindItemsWithMetadataTagArray) == 0x000008, "Wrong alignment on FRigUnit_FindItemsWithMetadataTagArray");
static_assert(sizeof(FRigUnit_FindItemsWithMetadataTagArray) == 0x000028, "Wrong size on FRigUnit_FindItemsWithMetadataTagArray");
static_assert(offsetof(FRigUnit_FindItemsWithMetadataTagArray, Tags) == 0x000008, "Member 'FRigUnit_FindItemsWithMetadataTagArray::Tags' has a wrong offset!");
static_assert(offsetof(FRigUnit_FindItemsWithMetadataTagArray, Items) == 0x000018, "Member 'FRigUnit_FindItemsWithMetadataTagArray::Items' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SpringIK_WorkData
// 0x00B8 (0x00B8 - 0x0000)
struct FRigUnit_SpringIK_WorkData final
{
public:
	TArray<struct FCachedRigElement>              CachedBones;                                       // 0x0000(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedPoleVector;                                  // 0x0010(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     Transforms;                                        // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FCRSimPointContainer                   Simulation;                                        // 0x0040(0x0078)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_SpringIK_WorkData) == 0x000008, "Wrong alignment on FRigUnit_SpringIK_WorkData");
static_assert(sizeof(FRigUnit_SpringIK_WorkData) == 0x0000B8, "Wrong size on FRigUnit_SpringIK_WorkData");
static_assert(offsetof(FRigUnit_SpringIK_WorkData, CachedBones) == 0x000000, "Member 'FRigUnit_SpringIK_WorkData::CachedBones' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringIK_WorkData, CachedPoleVector) == 0x000010, "Member 'FRigUnit_SpringIK_WorkData::CachedPoleVector' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringIK_WorkData, Transforms) == 0x000030, "Member 'FRigUnit_SpringIK_WorkData::Transforms' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringIK_WorkData, Simulation) == 0x000040, "Member 'FRigUnit_SpringIK_WorkData::Simulation' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_FilterItemsByMetadataTags
// 0x0048 (0x0050 - 0x0008)
struct FRigUnit_FilterItemsByMetadataTags final : public FRigUnit
{
public:
	TArray<struct FRigElementKey>                 Items;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           Tags;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Inclusive;                                         // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B50[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigElementKey>                 Result;                                            // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCachedRigElement>              CachedIndices;                                     // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_FilterItemsByMetadataTags) == 0x000008, "Wrong alignment on FRigUnit_FilterItemsByMetadataTags");
static_assert(sizeof(FRigUnit_FilterItemsByMetadataTags) == 0x000050, "Wrong size on FRigUnit_FilterItemsByMetadataTags");
static_assert(offsetof(FRigUnit_FilterItemsByMetadataTags, Items) == 0x000008, "Member 'FRigUnit_FilterItemsByMetadataTags::Items' has a wrong offset!");
static_assert(offsetof(FRigUnit_FilterItemsByMetadataTags, Tags) == 0x000018, "Member 'FRigUnit_FilterItemsByMetadataTags::Tags' has a wrong offset!");
static_assert(offsetof(FRigUnit_FilterItemsByMetadataTags, Inclusive) == 0x000028, "Member 'FRigUnit_FilterItemsByMetadataTags::Inclusive' has a wrong offset!");
static_assert(offsetof(FRigUnit_FilterItemsByMetadataTags, Result) == 0x000030, "Member 'FRigUnit_FilterItemsByMetadataTags::Result' has a wrong offset!");
static_assert(offsetof(FRigUnit_FilterItemsByMetadataTags, CachedIndices) == 0x000040, "Member 'FRigUnit_FilterItemsByMetadataTags::CachedIndices' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_OffsetTransformForItem
// 0x00A0 (0x0200 - 0x0160)
struct FRigUnit_OffsetTransformForItem final : public FRigUnitMutable
{
public:
	struct FRigElementKey                         Item;                                              // 0x0160(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B51[0x4];                                     // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OffsetTransform;                                   // 0x0170(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x01D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B52[0x3];                                     // 0x01D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCachedRigElement                      CachedIndex;                                       // 0x01D8(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B53[0x8];                                     // 0x01F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_OffsetTransformForItem) == 0x000010, "Wrong alignment on FRigUnit_OffsetTransformForItem");
static_assert(sizeof(FRigUnit_OffsetTransformForItem) == 0x000200, "Wrong size on FRigUnit_OffsetTransformForItem");
static_assert(offsetof(FRigUnit_OffsetTransformForItem, Item) == 0x000160, "Member 'FRigUnit_OffsetTransformForItem::Item' has a wrong offset!");
static_assert(offsetof(FRigUnit_OffsetTransformForItem, OffsetTransform) == 0x000170, "Member 'FRigUnit_OffsetTransformForItem::OffsetTransform' has a wrong offset!");
static_assert(offsetof(FRigUnit_OffsetTransformForItem, Weight) == 0x0001D0, "Member 'FRigUnit_OffsetTransformForItem::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_OffsetTransformForItem, bPropagateToChildren) == 0x0001D4, "Member 'FRigUnit_OffsetTransformForItem::bPropagateToChildren' has a wrong offset!");
static_assert(offsetof(FRigUnit_OffsetTransformForItem, CachedIndex) == 0x0001D8, "Member 'FRigUnit_OffsetTransformForItem::CachedIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_ParentSwitchConstraint
// 0x01A0 (0x0300 - 0x0160)
struct FRigUnit_ParentSwitchConstraint final : public FRigUnitMutable
{
public:
	struct FRigElementKey                         Subject;                                           // 0x0160(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParentIndex;                                       // 0x016C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKeyCollection               Parents;                                           // 0x0170(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             InitialGlobalTransform;                            // 0x0180(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x01E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B54[0xC];                                     // 0x01E4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x01F0(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Switched;                                          // 0x0250(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B55[0x7];                                     // 0x0251(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCachedRigElement                      CachedSubject;                                     // 0x0258(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedParent;                                      // 0x0278(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B56[0x8];                                     // 0x0298(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RelativeOffset;                                    // 0x02A0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_ParentSwitchConstraint) == 0x000010, "Wrong alignment on FRigUnit_ParentSwitchConstraint");
static_assert(sizeof(FRigUnit_ParentSwitchConstraint) == 0x000300, "Wrong size on FRigUnit_ParentSwitchConstraint");
static_assert(offsetof(FRigUnit_ParentSwitchConstraint, Subject) == 0x000160, "Member 'FRigUnit_ParentSwitchConstraint::Subject' has a wrong offset!");
static_assert(offsetof(FRigUnit_ParentSwitchConstraint, ParentIndex) == 0x00016C, "Member 'FRigUnit_ParentSwitchConstraint::ParentIndex' has a wrong offset!");
static_assert(offsetof(FRigUnit_ParentSwitchConstraint, Parents) == 0x000170, "Member 'FRigUnit_ParentSwitchConstraint::Parents' has a wrong offset!");
static_assert(offsetof(FRigUnit_ParentSwitchConstraint, InitialGlobalTransform) == 0x000180, "Member 'FRigUnit_ParentSwitchConstraint::InitialGlobalTransform' has a wrong offset!");
static_assert(offsetof(FRigUnit_ParentSwitchConstraint, Weight) == 0x0001E0, "Member 'FRigUnit_ParentSwitchConstraint::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_ParentSwitchConstraint, Transform) == 0x0001F0, "Member 'FRigUnit_ParentSwitchConstraint::Transform' has a wrong offset!");
static_assert(offsetof(FRigUnit_ParentSwitchConstraint, Switched) == 0x000250, "Member 'FRigUnit_ParentSwitchConstraint::Switched' has a wrong offset!");
static_assert(offsetof(FRigUnit_ParentSwitchConstraint, CachedSubject) == 0x000258, "Member 'FRigUnit_ParentSwitchConstraint::CachedSubject' has a wrong offset!");
static_assert(offsetof(FRigUnit_ParentSwitchConstraint, CachedParent) == 0x000278, "Member 'FRigUnit_ParentSwitchConstraint::CachedParent' has a wrong offset!");
static_assert(offsetof(FRigUnit_ParentSwitchConstraint, RelativeOffset) == 0x0002A0, "Member 'FRigUnit_ParentSwitchConstraint::RelativeOffset' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_ParentSwitchConstraintArray
// 0x01A0 (0x0300 - 0x0160)
struct FRigUnit_ParentSwitchConstraintArray final : public FRigUnitMutable
{
public:
	struct FRigElementKey                         Subject;                                           // 0x0160(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParentIndex;                                       // 0x016C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRigElementKey>                 Parents;                                           // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FTransform                             InitialGlobalTransform;                            // 0x0180(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x01E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B57[0xC];                                     // 0x01E4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x01F0(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Switched;                                          // 0x0250(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B58[0x7];                                     // 0x0251(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCachedRigElement                      CachedSubject;                                     // 0x0258(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedParent;                                      // 0x0278(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B59[0x8];                                     // 0x0298(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RelativeOffset;                                    // 0x02A0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_ParentSwitchConstraintArray) == 0x000010, "Wrong alignment on FRigUnit_ParentSwitchConstraintArray");
static_assert(sizeof(FRigUnit_ParentSwitchConstraintArray) == 0x000300, "Wrong size on FRigUnit_ParentSwitchConstraintArray");
static_assert(offsetof(FRigUnit_ParentSwitchConstraintArray, Subject) == 0x000160, "Member 'FRigUnit_ParentSwitchConstraintArray::Subject' has a wrong offset!");
static_assert(offsetof(FRigUnit_ParentSwitchConstraintArray, ParentIndex) == 0x00016C, "Member 'FRigUnit_ParentSwitchConstraintArray::ParentIndex' has a wrong offset!");
static_assert(offsetof(FRigUnit_ParentSwitchConstraintArray, Parents) == 0x000170, "Member 'FRigUnit_ParentSwitchConstraintArray::Parents' has a wrong offset!");
static_assert(offsetof(FRigUnit_ParentSwitchConstraintArray, InitialGlobalTransform) == 0x000180, "Member 'FRigUnit_ParentSwitchConstraintArray::InitialGlobalTransform' has a wrong offset!");
static_assert(offsetof(FRigUnit_ParentSwitchConstraintArray, Weight) == 0x0001E0, "Member 'FRigUnit_ParentSwitchConstraintArray::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_ParentSwitchConstraintArray, Transform) == 0x0001F0, "Member 'FRigUnit_ParentSwitchConstraintArray::Transform' has a wrong offset!");
static_assert(offsetof(FRigUnit_ParentSwitchConstraintArray, Switched) == 0x000250, "Member 'FRigUnit_ParentSwitchConstraintArray::Switched' has a wrong offset!");
static_assert(offsetof(FRigUnit_ParentSwitchConstraintArray, CachedSubject) == 0x000258, "Member 'FRigUnit_ParentSwitchConstraintArray::CachedSubject' has a wrong offset!");
static_assert(offsetof(FRigUnit_ParentSwitchConstraintArray, CachedParent) == 0x000278, "Member 'FRigUnit_ParentSwitchConstraintArray::CachedParent' has a wrong offset!");
static_assert(offsetof(FRigUnit_ParentSwitchConstraintArray, RelativeOffset) == 0x0002A0, "Member 'FRigUnit_ParentSwitchConstraintArray::RelativeOffset' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_ProjectTransformToNewParent
// 0x00F8 (0x0100 - 0x0008)
struct FRigUnit_ProjectTransformToNewParent final : public FRigUnit
{
public:
	struct FRigElementKey                         Child;                                             // 0x0008(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bChildInitial;                                     // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B5A[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKey                         OldParent;                                         // 0x0018(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOldParentInitial;                                 // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B5B[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKey                         NewParent;                                         // 0x0028(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewParentInitial;                                 // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B5C[0xB];                                     // 0x0035(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0040(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedChild;                                       // 0x00A0(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedOldParent;                                   // 0x00C0(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedNewParent;                                   // 0x00E0(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_ProjectTransformToNewParent) == 0x000010, "Wrong alignment on FRigUnit_ProjectTransformToNewParent");
static_assert(sizeof(FRigUnit_ProjectTransformToNewParent) == 0x000100, "Wrong size on FRigUnit_ProjectTransformToNewParent");
static_assert(offsetof(FRigUnit_ProjectTransformToNewParent, Child) == 0x000008, "Member 'FRigUnit_ProjectTransformToNewParent::Child' has a wrong offset!");
static_assert(offsetof(FRigUnit_ProjectTransformToNewParent, bChildInitial) == 0x000014, "Member 'FRigUnit_ProjectTransformToNewParent::bChildInitial' has a wrong offset!");
static_assert(offsetof(FRigUnit_ProjectTransformToNewParent, OldParent) == 0x000018, "Member 'FRigUnit_ProjectTransformToNewParent::OldParent' has a wrong offset!");
static_assert(offsetof(FRigUnit_ProjectTransformToNewParent, bOldParentInitial) == 0x000024, "Member 'FRigUnit_ProjectTransformToNewParent::bOldParentInitial' has a wrong offset!");
static_assert(offsetof(FRigUnit_ProjectTransformToNewParent, NewParent) == 0x000028, "Member 'FRigUnit_ProjectTransformToNewParent::NewParent' has a wrong offset!");
static_assert(offsetof(FRigUnit_ProjectTransformToNewParent, bNewParentInitial) == 0x000034, "Member 'FRigUnit_ProjectTransformToNewParent::bNewParentInitial' has a wrong offset!");
static_assert(offsetof(FRigUnit_ProjectTransformToNewParent, Transform) == 0x000040, "Member 'FRigUnit_ProjectTransformToNewParent::Transform' has a wrong offset!");
static_assert(offsetof(FRigUnit_ProjectTransformToNewParent, CachedChild) == 0x0000A0, "Member 'FRigUnit_ProjectTransformToNewParent::CachedChild' has a wrong offset!");
static_assert(offsetof(FRigUnit_ProjectTransformToNewParent, CachedOldParent) == 0x0000C0, "Member 'FRigUnit_ProjectTransformToNewParent::CachedOldParent' has a wrong offset!");
static_assert(offsetof(FRigUnit_ProjectTransformToNewParent, CachedNewParent) == 0x0000E0, "Member 'FRigUnit_ProjectTransformToNewParent::CachedNewParent' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_PropagateTransform
// 0x0030 (0x0190 - 0x0160)
struct FRigUnit_PropagateTransform final : public FRigUnitMutable
{
public:
	struct FRigElementKey                         Item;                                              // 0x0160(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecomputeGlobal;                                  // 0x016C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyToChildren;                                  // 0x016D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecursive;                                        // 0x016E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B5D[0x1];                                     // 0x016F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCachedRigElement                      CachedIndex;                                       // 0x0170(0x0020)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_PropagateTransform) == 0x000010, "Wrong alignment on FRigUnit_PropagateTransform");
static_assert(sizeof(FRigUnit_PropagateTransform) == 0x000190, "Wrong size on FRigUnit_PropagateTransform");
static_assert(offsetof(FRigUnit_PropagateTransform, Item) == 0x000160, "Member 'FRigUnit_PropagateTransform::Item' has a wrong offset!");
static_assert(offsetof(FRigUnit_PropagateTransform, bRecomputeGlobal) == 0x00016C, "Member 'FRigUnit_PropagateTransform::bRecomputeGlobal' has a wrong offset!");
static_assert(offsetof(FRigUnit_PropagateTransform, bApplyToChildren) == 0x00016D, "Member 'FRigUnit_PropagateTransform::bApplyToChildren' has a wrong offset!");
static_assert(offsetof(FRigUnit_PropagateTransform, bRecursive) == 0x00016E, "Member 'FRigUnit_PropagateTransform::bRecursive' has a wrong offset!");
static_assert(offsetof(FRigUnit_PropagateTransform, CachedIndex) == 0x000170, "Member 'FRigUnit_PropagateTransform::CachedIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_DistributeRotation_Rotation
// 0x0030 (0x0030 - 0x0000)
struct FRigUnit_DistributeRotation_Rotation final
{
public:
	struct FQuat                                  Rotation;                                          // 0x0000(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ratio;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B5E[0xC];                                     // 0x0024(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_DistributeRotation_Rotation) == 0x000010, "Wrong alignment on FRigUnit_DistributeRotation_Rotation");
static_assert(sizeof(FRigUnit_DistributeRotation_Rotation) == 0x000030, "Wrong size on FRigUnit_DistributeRotation_Rotation");
static_assert(offsetof(FRigUnit_DistributeRotation_Rotation, Rotation) == 0x000000, "Member 'FRigUnit_DistributeRotation_Rotation::Rotation' has a wrong offset!");
static_assert(offsetof(FRigUnit_DistributeRotation_Rotation, Ratio) == 0x000020, "Member 'FRigUnit_DistributeRotation_Rotation::Ratio' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_DistributeRotationForCollection
// 0x0080 (0x01E0 - 0x0160)
struct FRigUnit_DistributeRotationForCollection final : public FRigUnit_HighlevelBaseMutable
{
public:
	struct FRigElementKeyCollection               Items;                                             // 0x0160(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRigUnit_DistributeRotation_Rotation> Rotations;                                         // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	ERigVMAnimEasingType                          RotationEaseType;                                  // 0x0180(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B5F[0x3];                                     // 0x0181(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Weight;                                            // 0x0184(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigUnit_DistributeRotation_WorkData   WorkData;                                          // 0x0188(0x0050)(Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B60[0x8];                                     // 0x01D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_DistributeRotationForCollection) == 0x000010, "Wrong alignment on FRigUnit_DistributeRotationForCollection");
static_assert(sizeof(FRigUnit_DistributeRotationForCollection) == 0x0001E0, "Wrong size on FRigUnit_DistributeRotationForCollection");
static_assert(offsetof(FRigUnit_DistributeRotationForCollection, Items) == 0x000160, "Member 'FRigUnit_DistributeRotationForCollection::Items' has a wrong offset!");
static_assert(offsetof(FRigUnit_DistributeRotationForCollection, Rotations) == 0x000170, "Member 'FRigUnit_DistributeRotationForCollection::Rotations' has a wrong offset!");
static_assert(offsetof(FRigUnit_DistributeRotationForCollection, RotationEaseType) == 0x000180, "Member 'FRigUnit_DistributeRotationForCollection::RotationEaseType' has a wrong offset!");
static_assert(offsetof(FRigUnit_DistributeRotationForCollection, Weight) == 0x000184, "Member 'FRigUnit_DistributeRotationForCollection::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_DistributeRotationForCollection, WorkData) == 0x000188, "Member 'FRigUnit_DistributeRotationForCollection::WorkData' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SendEvent
// 0x0020 (0x0180 - 0x0160)
struct FRigUnit_SendEvent final : public FRigUnitMutable
{
public:
	ERigEvent                                     Event;                                             // 0x0160(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B61[0x3];                                     // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKey                         Item;                                              // 0x0164(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetInSeconds;                                   // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0174(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyDuringInteraction;                            // 0x0175(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B62[0xA];                                     // 0x0176(0x000A)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_SendEvent) == 0x000010, "Wrong alignment on FRigUnit_SendEvent");
static_assert(sizeof(FRigUnit_SendEvent) == 0x000180, "Wrong size on FRigUnit_SendEvent");
static_assert(offsetof(FRigUnit_SendEvent, Event) == 0x000160, "Member 'FRigUnit_SendEvent::Event' has a wrong offset!");
static_assert(offsetof(FRigUnit_SendEvent, Item) == 0x000164, "Member 'FRigUnit_SendEvent::Item' has a wrong offset!");
static_assert(offsetof(FRigUnit_SendEvent, OffsetInSeconds) == 0x000170, "Member 'FRigUnit_SendEvent::OffsetInSeconds' has a wrong offset!");
static_assert(offsetof(FRigUnit_SendEvent, bEnable) == 0x000174, "Member 'FRigUnit_SendEvent::bEnable' has a wrong offset!");
static_assert(offsetof(FRigUnit_SendEvent, bOnlyDuringInteraction) == 0x000175, "Member 'FRigUnit_SendEvent::bOnlyDuringInteraction' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SetBoneInitialTransform
// 0x0100 (0x0260 - 0x0160)
struct FRigUnit_SetBoneInitialTransform final : public FRigUnitMutable
{
public:
	class FName                                   bone;                                              // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B63[0x8];                                     // 0x0168(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0170(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Result;                                            // 0x01D0(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigVMTransformSpace                          Space;                                             // 0x0230(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x0231(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B64[0x6];                                     // 0x0232(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCachedRigElement                      CachedBone;                                        // 0x0238(0x0020)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B65[0x8];                                     // 0x0258(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_SetBoneInitialTransform) == 0x000010, "Wrong alignment on FRigUnit_SetBoneInitialTransform");
static_assert(sizeof(FRigUnit_SetBoneInitialTransform) == 0x000260, "Wrong size on FRigUnit_SetBoneInitialTransform");
static_assert(offsetof(FRigUnit_SetBoneInitialTransform, bone) == 0x000160, "Member 'FRigUnit_SetBoneInitialTransform::bone' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetBoneInitialTransform, Transform) == 0x000170, "Member 'FRigUnit_SetBoneInitialTransform::Transform' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetBoneInitialTransform, Result) == 0x0001D0, "Member 'FRigUnit_SetBoneInitialTransform::Result' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetBoneInitialTransform, Space) == 0x000230, "Member 'FRigUnit_SetBoneInitialTransform::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetBoneInitialTransform, bPropagateToChildren) == 0x000231, "Member 'FRigUnit_SetBoneInitialTransform::bPropagateToChildren' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetBoneInitialTransform, CachedBone) == 0x000238, "Member 'FRigUnit_SetBoneInitialTransform::CachedBone' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_PositionConstraint
// 0x0030 (0x0190 - 0x0160)
struct FRigUnit_PositionConstraint final : public FRigUnit_HighlevelBaseMutable
{
public:
	struct FRigElementKey                         Child;                                             // 0x0160(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMaintainOffset;                                   // 0x016C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFilterOptionPerAxis                   Filter;                                            // 0x016D(0x0003)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FConstraintParent>              Parents;                                           // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B66[0xC];                                     // 0x0184(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_PositionConstraint) == 0x000010, "Wrong alignment on FRigUnit_PositionConstraint");
static_assert(sizeof(FRigUnit_PositionConstraint) == 0x000190, "Wrong size on FRigUnit_PositionConstraint");
static_assert(offsetof(FRigUnit_PositionConstraint, Child) == 0x000160, "Member 'FRigUnit_PositionConstraint::Child' has a wrong offset!");
static_assert(offsetof(FRigUnit_PositionConstraint, bMaintainOffset) == 0x00016C, "Member 'FRigUnit_PositionConstraint::bMaintainOffset' has a wrong offset!");
static_assert(offsetof(FRigUnit_PositionConstraint, Filter) == 0x00016D, "Member 'FRigUnit_PositionConstraint::Filter' has a wrong offset!");
static_assert(offsetof(FRigUnit_PositionConstraint, Parents) == 0x000170, "Member 'FRigUnit_PositionConstraint::Parents' has a wrong offset!");
static_assert(offsetof(FRigUnit_PositionConstraint, Weight) == 0x000180, "Member 'FRigUnit_PositionConstraint::Weight' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SetBoneRotation
// 0x0060 (0x01C0 - 0x0160)
struct FRigUnit_SetBoneRotation final : public FRigUnitMutable
{
public:
	class FName                                   bone;                                              // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B67[0x8];                                     // 0x0168(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Rotation;                                          // 0x0170(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigVMTransformSpace                          Space;                                             // 0x0190(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B68[0x3];                                     // 0x0191(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Weight;                                            // 0x0194(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x0198(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B69[0x7];                                     // 0x0199(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCachedRigElement                      CachedBone;                                        // 0x01A0(0x0020)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_SetBoneRotation) == 0x000010, "Wrong alignment on FRigUnit_SetBoneRotation");
static_assert(sizeof(FRigUnit_SetBoneRotation) == 0x0001C0, "Wrong size on FRigUnit_SetBoneRotation");
static_assert(offsetof(FRigUnit_SetBoneRotation, bone) == 0x000160, "Member 'FRigUnit_SetBoneRotation::bone' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetBoneRotation, Rotation) == 0x000170, "Member 'FRigUnit_SetBoneRotation::Rotation' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetBoneRotation, Space) == 0x000190, "Member 'FRigUnit_SetBoneRotation::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetBoneRotation, Weight) == 0x000194, "Member 'FRigUnit_SetBoneRotation::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetBoneRotation, bPropagateToChildren) == 0x000198, "Member 'FRigUnit_SetBoneRotation::bPropagateToChildren' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetBoneRotation, CachedBone) == 0x0001A0, "Member 'FRigUnit_SetBoneRotation::CachedBone' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SetBoneTransform
// 0x0100 (0x0260 - 0x0160)
struct FRigUnit_SetBoneTransform final : public FRigUnitMutable
{
public:
	class FName                                   bone;                                              // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B6A[0x8];                                     // 0x0168(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0170(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Result;                                            // 0x01D0(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigVMTransformSpace                          Space;                                             // 0x0230(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B6B[0x3];                                     // 0x0231(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Weight;                                            // 0x0234(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B6C[0x7];                                     // 0x0239(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCachedRigElement                      CachedBone;                                        // 0x0240(0x0020)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_SetBoneTransform) == 0x000010, "Wrong alignment on FRigUnit_SetBoneTransform");
static_assert(sizeof(FRigUnit_SetBoneTransform) == 0x000260, "Wrong size on FRigUnit_SetBoneTransform");
static_assert(offsetof(FRigUnit_SetBoneTransform, bone) == 0x000160, "Member 'FRigUnit_SetBoneTransform::bone' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetBoneTransform, Transform) == 0x000170, "Member 'FRigUnit_SetBoneTransform::Transform' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetBoneTransform, Result) == 0x0001D0, "Member 'FRigUnit_SetBoneTransform::Result' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetBoneTransform, Space) == 0x000230, "Member 'FRigUnit_SetBoneTransform::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetBoneTransform, Weight) == 0x000234, "Member 'FRigUnit_SetBoneTransform::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetBoneTransform, bPropagateToChildren) == 0x000238, "Member 'FRigUnit_SetBoneTransform::bPropagateToChildren' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetBoneTransform, CachedBone) == 0x000240, "Member 'FRigUnit_SetBoneTransform::CachedBone' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SphericalPoseReader
// 0x01A0 (0x0300 - 0x0160)
struct FRigUnit_SphericalPoseReader final : public FRigUnit_HighlevelBaseMutable
{
public:
	float                                         OutputParam;                                       // 0x0160(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         DriverItem;                                        // 0x0164(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DriverAxis;                                        // 0x0170(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RotationOffset;                                    // 0x0188(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActiveRegionSize;                                  // 0x01A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRegionScaleFactors                    ActiveRegionScaleFactors;                          // 0x01A4(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         FalloffSize;                                       // 0x01B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRegionScaleFactors                    FalloffRegionScaleFactors;                         // 0x01B8(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          FlipWidthScaling;                                  // 0x01C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FlipHeightScaling;                                 // 0x01C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B6D[0x2];                                     // 0x01CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKey                         OptionalParentItem;                                // 0x01CC(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSphericalPoseReaderDebugSettings      Debug;                                             // 0x01D8(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSphericalRegion                       InnerRegion;                                       // 0x01E8(0x0014)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	struct FSphericalRegion                       OuterRegion;                                       // 0x01FC(0x0014)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                DriverNormal;                                      // 0x0210(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Driver2D;                                          // 0x0228(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      DriverCache;                                       // 0x0240(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      OptionalParentCache;                               // 0x0260(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             LocalDriverTransformInit;                          // 0x0280(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CachedRotationOffset;                              // 0x02E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCachedInitTransforms;                             // 0x02F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B6E[0x7];                                     // 0x02F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_SphericalPoseReader) == 0x000010, "Wrong alignment on FRigUnit_SphericalPoseReader");
static_assert(sizeof(FRigUnit_SphericalPoseReader) == 0x000300, "Wrong size on FRigUnit_SphericalPoseReader");
static_assert(offsetof(FRigUnit_SphericalPoseReader, OutputParam) == 0x000160, "Member 'FRigUnit_SphericalPoseReader::OutputParam' has a wrong offset!");
static_assert(offsetof(FRigUnit_SphericalPoseReader, DriverItem) == 0x000164, "Member 'FRigUnit_SphericalPoseReader::DriverItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_SphericalPoseReader, DriverAxis) == 0x000170, "Member 'FRigUnit_SphericalPoseReader::DriverAxis' has a wrong offset!");
static_assert(offsetof(FRigUnit_SphericalPoseReader, RotationOffset) == 0x000188, "Member 'FRigUnit_SphericalPoseReader::RotationOffset' has a wrong offset!");
static_assert(offsetof(FRigUnit_SphericalPoseReader, ActiveRegionSize) == 0x0001A0, "Member 'FRigUnit_SphericalPoseReader::ActiveRegionSize' has a wrong offset!");
static_assert(offsetof(FRigUnit_SphericalPoseReader, ActiveRegionScaleFactors) == 0x0001A4, "Member 'FRigUnit_SphericalPoseReader::ActiveRegionScaleFactors' has a wrong offset!");
static_assert(offsetof(FRigUnit_SphericalPoseReader, FalloffSize) == 0x0001B4, "Member 'FRigUnit_SphericalPoseReader::FalloffSize' has a wrong offset!");
static_assert(offsetof(FRigUnit_SphericalPoseReader, FalloffRegionScaleFactors) == 0x0001B8, "Member 'FRigUnit_SphericalPoseReader::FalloffRegionScaleFactors' has a wrong offset!");
static_assert(offsetof(FRigUnit_SphericalPoseReader, FlipWidthScaling) == 0x0001C8, "Member 'FRigUnit_SphericalPoseReader::FlipWidthScaling' has a wrong offset!");
static_assert(offsetof(FRigUnit_SphericalPoseReader, FlipHeightScaling) == 0x0001C9, "Member 'FRigUnit_SphericalPoseReader::FlipHeightScaling' has a wrong offset!");
static_assert(offsetof(FRigUnit_SphericalPoseReader, OptionalParentItem) == 0x0001CC, "Member 'FRigUnit_SphericalPoseReader::OptionalParentItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_SphericalPoseReader, Debug) == 0x0001D8, "Member 'FRigUnit_SphericalPoseReader::Debug' has a wrong offset!");
static_assert(offsetof(FRigUnit_SphericalPoseReader, InnerRegion) == 0x0001E8, "Member 'FRigUnit_SphericalPoseReader::InnerRegion' has a wrong offset!");
static_assert(offsetof(FRigUnit_SphericalPoseReader, OuterRegion) == 0x0001FC, "Member 'FRigUnit_SphericalPoseReader::OuterRegion' has a wrong offset!");
static_assert(offsetof(FRigUnit_SphericalPoseReader, DriverNormal) == 0x000210, "Member 'FRigUnit_SphericalPoseReader::DriverNormal' has a wrong offset!");
static_assert(offsetof(FRigUnit_SphericalPoseReader, Driver2D) == 0x000228, "Member 'FRigUnit_SphericalPoseReader::Driver2D' has a wrong offset!");
static_assert(offsetof(FRigUnit_SphericalPoseReader, DriverCache) == 0x000240, "Member 'FRigUnit_SphericalPoseReader::DriverCache' has a wrong offset!");
static_assert(offsetof(FRigUnit_SphericalPoseReader, OptionalParentCache) == 0x000260, "Member 'FRigUnit_SphericalPoseReader::OptionalParentCache' has a wrong offset!");
static_assert(offsetof(FRigUnit_SphericalPoseReader, LocalDriverTransformInit) == 0x000280, "Member 'FRigUnit_SphericalPoseReader::LocalDriverTransformInit' has a wrong offset!");
static_assert(offsetof(FRigUnit_SphericalPoseReader, CachedRotationOffset) == 0x0002E0, "Member 'FRigUnit_SphericalPoseReader::CachedRotationOffset' has a wrong offset!");
static_assert(offsetof(FRigUnit_SphericalPoseReader, bCachedInitTransforms) == 0x0002F8, "Member 'FRigUnit_SphericalPoseReader::bCachedInitTransforms' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SetBoneTranslation
// 0x0050 (0x01B0 - 0x0160)
struct FRigUnit_SetBoneTranslation final : public FRigUnitMutable
{
public:
	class FName                                   bone;                                              // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Translation;                                       // 0x0168(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigVMTransformSpace                          Space;                                             // 0x0180(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B6F[0x3];                                     // 0x0181(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Weight;                                            // 0x0184(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x0188(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B70[0x7];                                     // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCachedRigElement                      CachedBone;                                        // 0x0190(0x0020)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_SetBoneTranslation) == 0x000010, "Wrong alignment on FRigUnit_SetBoneTranslation");
static_assert(sizeof(FRigUnit_SetBoneTranslation) == 0x0001B0, "Wrong size on FRigUnit_SetBoneTranslation");
static_assert(offsetof(FRigUnit_SetBoneTranslation, bone) == 0x000160, "Member 'FRigUnit_SetBoneTranslation::bone' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetBoneTranslation, Translation) == 0x000168, "Member 'FRigUnit_SetBoneTranslation::Translation' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetBoneTranslation, Space) == 0x000180, "Member 'FRigUnit_SetBoneTranslation::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetBoneTranslation, Weight) == 0x000184, "Member 'FRigUnit_SetBoneTranslation::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetBoneTranslation, bPropagateToChildren) == 0x000188, "Member 'FRigUnit_SetBoneTranslation::bPropagateToChildren' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetBoneTranslation, CachedBone) == 0x000190, "Member 'FRigUnit_SetBoneTranslation::CachedBone' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_GetControlColor
// 0x0038 (0x0040 - 0x0008)
struct FRigUnit_GetControlColor final : public FRigUnit
{
public:
	class FName                                   Control;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedControlIndex;                                // 0x0020(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_GetControlColor) == 0x000008, "Wrong alignment on FRigUnit_GetControlColor");
static_assert(sizeof(FRigUnit_GetControlColor) == 0x000040, "Wrong size on FRigUnit_GetControlColor");
static_assert(offsetof(FRigUnit_GetControlColor, Control) == 0x000008, "Member 'FRigUnit_GetControlColor::Control' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetControlColor, Color) == 0x000010, "Member 'FRigUnit_GetControlColor::Color' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetControlColor, CachedControlIndex) == 0x000020, "Member 'FRigUnit_GetControlColor::CachedControlIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SetControlColor
// 0x0040 (0x01A0 - 0x0160)
struct FRigUnit_SetControlColor final : public FRigUnitMutable
{
public:
	class FName                                   Control;                                           // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0168(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedControlIndex;                                // 0x0178(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B71[0x8];                                     // 0x0198(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_SetControlColor) == 0x000010, "Wrong alignment on FRigUnit_SetControlColor");
static_assert(sizeof(FRigUnit_SetControlColor) == 0x0001A0, "Wrong size on FRigUnit_SetControlColor");
static_assert(offsetof(FRigUnit_SetControlColor, Control) == 0x000160, "Member 'FRigUnit_SetControlColor::Control' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetControlColor, Color) == 0x000168, "Member 'FRigUnit_SetControlColor::Color' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetControlColor, CachedControlIndex) == 0x000178, "Member 'FRigUnit_SetControlColor::CachedControlIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SetControlDrivenList
// 0x0040 (0x01A0 - 0x0160)
struct FRigUnit_SetControlDrivenList final : public FRigUnitMutable
{
public:
	class FName                                   Control;                                           // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRigElementKey>                 Driven;                                            // 0x0168(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedControlIndex;                                // 0x0178(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B72[0x8];                                     // 0x0198(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_SetControlDrivenList) == 0x000010, "Wrong alignment on FRigUnit_SetControlDrivenList");
static_assert(sizeof(FRigUnit_SetControlDrivenList) == 0x0001A0, "Wrong size on FRigUnit_SetControlDrivenList");
static_assert(offsetof(FRigUnit_SetControlDrivenList, Control) == 0x000160, "Member 'FRigUnit_SetControlDrivenList::Control' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetControlDrivenList, Driven) == 0x000168, "Member 'FRigUnit_SetControlDrivenList::Driven' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetControlDrivenList, CachedControlIndex) == 0x000178, "Member 'FRigUnit_SetControlDrivenList::CachedControlIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SetControlOffset
// 0x00A0 (0x0200 - 0x0160)
struct FRigUnit_SetControlOffset final : public FRigUnitMutable
{
public:
	class FName                                   Control;                                           // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B73[0x8];                                     // 0x0168(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Offset;                                            // 0x0170(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigVMTransformSpace                          Space;                                             // 0x01D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B74[0x7];                                     // 0x01D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCachedRigElement                      CachedControlIndex;                                // 0x01D8(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B75[0x8];                                     // 0x01F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_SetControlOffset) == 0x000010, "Wrong alignment on FRigUnit_SetControlOffset");
static_assert(sizeof(FRigUnit_SetControlOffset) == 0x000200, "Wrong size on FRigUnit_SetControlOffset");
static_assert(offsetof(FRigUnit_SetControlOffset, Control) == 0x000160, "Member 'FRigUnit_SetControlOffset::Control' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetControlOffset, Offset) == 0x000170, "Member 'FRigUnit_SetControlOffset::Offset' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetControlOffset, Space) == 0x0001D0, "Member 'FRigUnit_SetControlOffset::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetControlOffset, CachedControlIndex) == 0x0001D8, "Member 'FRigUnit_SetControlOffset::CachedControlIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_GetShapeTransform
// 0x0088 (0x0090 - 0x0008)
struct FRigUnit_GetShapeTransform final : public FRigUnit
{
public:
	class FName                                   Control;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedControlIndex;                                // 0x0070(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_GetShapeTransform) == 0x000010, "Wrong alignment on FRigUnit_GetShapeTransform");
static_assert(sizeof(FRigUnit_GetShapeTransform) == 0x000090, "Wrong size on FRigUnit_GetShapeTransform");
static_assert(offsetof(FRigUnit_GetShapeTransform, Control) == 0x000008, "Member 'FRigUnit_GetShapeTransform::Control' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetShapeTransform, Transform) == 0x000010, "Member 'FRigUnit_GetShapeTransform::Transform' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetShapeTransform, CachedControlIndex) == 0x000070, "Member 'FRigUnit_GetShapeTransform::CachedControlIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SetControlBool
// 0x0030 (0x0190 - 0x0160)
struct FRigUnit_SetControlBool final : public FRigUnitMutable
{
public:
	class FName                                   Control;                                           // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BoolValue;                                         // 0x0168(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B76[0x7];                                     // 0x0169(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCachedRigElement                      CachedControlIndex;                                // 0x0170(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_SetControlBool) == 0x000010, "Wrong alignment on FRigUnit_SetControlBool");
static_assert(sizeof(FRigUnit_SetControlBool) == 0x000190, "Wrong size on FRigUnit_SetControlBool");
static_assert(offsetof(FRigUnit_SetControlBool, Control) == 0x000160, "Member 'FRigUnit_SetControlBool::Control' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetControlBool, BoolValue) == 0x000168, "Member 'FRigUnit_SetControlBool::BoolValue' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetControlBool, CachedControlIndex) == 0x000170, "Member 'FRigUnit_SetControlBool::CachedControlIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SetMultiControlBool
// 0x0020 (0x0180 - 0x0160)
struct FRigUnit_SetMultiControlBool final : public FRigUnitMutable
{
public:
	TArray<struct FRigUnit_SetMultiControlBool_Entry> Entries;                                           // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCachedRigElement>              CachedControlIndices;                              // 0x0170(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_SetMultiControlBool) == 0x000010, "Wrong alignment on FRigUnit_SetMultiControlBool");
static_assert(sizeof(FRigUnit_SetMultiControlBool) == 0x000180, "Wrong size on FRigUnit_SetMultiControlBool");
static_assert(offsetof(FRigUnit_SetMultiControlBool, Entries) == 0x000160, "Member 'FRigUnit_SetMultiControlBool::Entries' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetMultiControlBool, CachedControlIndices) == 0x000170, "Member 'FRigUnit_SetMultiControlBool::CachedControlIndices' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SetControlFloat
// 0x0030 (0x0190 - 0x0160)
struct FRigUnit_SetControlFloat final : public FRigUnitMutable
{
public:
	class FName                                   Control;                                           // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatValue;                                        // 0x016C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedControlIndex;                                // 0x0170(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_SetControlFloat) == 0x000010, "Wrong alignment on FRigUnit_SetControlFloat");
static_assert(sizeof(FRigUnit_SetControlFloat) == 0x000190, "Wrong size on FRigUnit_SetControlFloat");
static_assert(offsetof(FRigUnit_SetControlFloat, Control) == 0x000160, "Member 'FRigUnit_SetControlFloat::Control' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetControlFloat, Weight) == 0x000168, "Member 'FRigUnit_SetControlFloat::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetControlFloat, FloatValue) == 0x00016C, "Member 'FRigUnit_SetControlFloat::FloatValue' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetControlFloat, CachedControlIndex) == 0x000170, "Member 'FRigUnit_SetControlFloat::CachedControlIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SetMultiControlFloat_Entry
// 0x000C (0x000C - 0x0000)
struct FRigUnit_SetMultiControlFloat_Entry final
{
public:
	class FName                                   Control;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatValue;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_SetMultiControlFloat_Entry) == 0x000004, "Wrong alignment on FRigUnit_SetMultiControlFloat_Entry");
static_assert(sizeof(FRigUnit_SetMultiControlFloat_Entry) == 0x00000C, "Wrong size on FRigUnit_SetMultiControlFloat_Entry");
static_assert(offsetof(FRigUnit_SetMultiControlFloat_Entry, Control) == 0x000000, "Member 'FRigUnit_SetMultiControlFloat_Entry::Control' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetMultiControlFloat_Entry, FloatValue) == 0x000008, "Member 'FRigUnit_SetMultiControlFloat_Entry::FloatValue' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SetMultiControlFloat
// 0x0030 (0x0190 - 0x0160)
struct FRigUnit_SetMultiControlFloat final : public FRigUnitMutable
{
public:
	TArray<struct FRigUnit_SetMultiControlFloat_Entry> Entries;                                           // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B77[0x4];                                     // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              CachedControlIndices;                              // 0x0178(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B78[0x8];                                     // 0x0188(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_SetMultiControlFloat) == 0x000010, "Wrong alignment on FRigUnit_SetMultiControlFloat");
static_assert(sizeof(FRigUnit_SetMultiControlFloat) == 0x000190, "Wrong size on FRigUnit_SetMultiControlFloat");
static_assert(offsetof(FRigUnit_SetMultiControlFloat, Entries) == 0x000160, "Member 'FRigUnit_SetMultiControlFloat::Entries' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetMultiControlFloat, Weight) == 0x000170, "Member 'FRigUnit_SetMultiControlFloat::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetMultiControlFloat, CachedControlIndices) == 0x000178, "Member 'FRigUnit_SetMultiControlFloat::CachedControlIndices' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_PointSimulation_BoneTarget
// 0x0014 (0x0014 - 0x0000)
struct FRigUnit_PointSimulation_BoneTarget final
{
public:
	class FName                                   bone;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TranslationPoint;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PrimaryAimPoint;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SecondaryAimPoint;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_PointSimulation_BoneTarget) == 0x000004, "Wrong alignment on FRigUnit_PointSimulation_BoneTarget");
static_assert(sizeof(FRigUnit_PointSimulation_BoneTarget) == 0x000014, "Wrong size on FRigUnit_PointSimulation_BoneTarget");
static_assert(offsetof(FRigUnit_PointSimulation_BoneTarget, bone) == 0x000000, "Member 'FRigUnit_PointSimulation_BoneTarget::bone' has a wrong offset!");
static_assert(offsetof(FRigUnit_PointSimulation_BoneTarget, TranslationPoint) == 0x000008, "Member 'FRigUnit_PointSimulation_BoneTarget::TranslationPoint' has a wrong offset!");
static_assert(offsetof(FRigUnit_PointSimulation_BoneTarget, PrimaryAimPoint) == 0x00000C, "Member 'FRigUnit_PointSimulation_BoneTarget::PrimaryAimPoint' has a wrong offset!");
static_assert(offsetof(FRigUnit_PointSimulation_BoneTarget, SecondaryAimPoint) == 0x000010, "Member 'FRigUnit_PointSimulation_BoneTarget::SecondaryAimPoint' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SetControlInteger
// 0x0030 (0x0190 - 0x0160)
struct FRigUnit_SetControlInteger final : public FRigUnitMutable
{
public:
	class FName                                   Control;                                           // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Weight;                                            // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntegerValue;                                      // 0x016C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedControlIndex;                                // 0x0170(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_SetControlInteger) == 0x000010, "Wrong alignment on FRigUnit_SetControlInteger");
static_assert(sizeof(FRigUnit_SetControlInteger) == 0x000190, "Wrong size on FRigUnit_SetControlInteger");
static_assert(offsetof(FRigUnit_SetControlInteger, Control) == 0x000160, "Member 'FRigUnit_SetControlInteger::Control' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetControlInteger, Weight) == 0x000168, "Member 'FRigUnit_SetControlInteger::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetControlInteger, IntegerValue) == 0x00016C, "Member 'FRigUnit_SetControlInteger::IntegerValue' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetControlInteger, CachedControlIndex) == 0x000170, "Member 'FRigUnit_SetControlInteger::CachedControlIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SetMultiControlInteger_Entry
// 0x000C (0x000C - 0x0000)
struct FRigUnit_SetMultiControlInteger_Entry final
{
public:
	class FName                                   Control;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntegerValue;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_SetMultiControlInteger_Entry) == 0x000004, "Wrong alignment on FRigUnit_SetMultiControlInteger_Entry");
static_assert(sizeof(FRigUnit_SetMultiControlInteger_Entry) == 0x00000C, "Wrong size on FRigUnit_SetMultiControlInteger_Entry");
static_assert(offsetof(FRigUnit_SetMultiControlInteger_Entry, Control) == 0x000000, "Member 'FRigUnit_SetMultiControlInteger_Entry::Control' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetMultiControlInteger_Entry, IntegerValue) == 0x000008, "Member 'FRigUnit_SetMultiControlInteger_Entry::IntegerValue' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SetMultiControlInteger
// 0x0030 (0x0190 - 0x0160)
struct FRigUnit_SetMultiControlInteger final : public FRigUnitMutable
{
public:
	TArray<struct FRigUnit_SetMultiControlInteger_Entry> Entries;                                           // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B79[0x4];                                     // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              CachedControlIndices;                              // 0x0178(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B7A[0x8];                                     // 0x0188(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_SetMultiControlInteger) == 0x000010, "Wrong alignment on FRigUnit_SetMultiControlInteger");
static_assert(sizeof(FRigUnit_SetMultiControlInteger) == 0x000190, "Wrong size on FRigUnit_SetMultiControlInteger");
static_assert(offsetof(FRigUnit_SetMultiControlInteger, Entries) == 0x000160, "Member 'FRigUnit_SetMultiControlInteger::Entries' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetMultiControlInteger, Weight) == 0x000170, "Member 'FRigUnit_SetMultiControlInteger::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetMultiControlInteger, CachedControlIndices) == 0x000178, "Member 'FRigUnit_SetMultiControlInteger::CachedControlIndices' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SetControlVector2D
// 0x0040 (0x01A0 - 0x0160)
struct FRigUnit_SetControlVector2D final : public FRigUnitMutable
{
public:
	class FName                                   Control;                                           // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B7B[0x4];                                     // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Vector;                                            // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedControlIndex;                                // 0x0180(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_SetControlVector2D) == 0x000010, "Wrong alignment on FRigUnit_SetControlVector2D");
static_assert(sizeof(FRigUnit_SetControlVector2D) == 0x0001A0, "Wrong size on FRigUnit_SetControlVector2D");
static_assert(offsetof(FRigUnit_SetControlVector2D, Control) == 0x000160, "Member 'FRigUnit_SetControlVector2D::Control' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetControlVector2D, Weight) == 0x000168, "Member 'FRigUnit_SetControlVector2D::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetControlVector2D, Vector) == 0x000170, "Member 'FRigUnit_SetControlVector2D::Vector' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetControlVector2D, CachedControlIndex) == 0x000180, "Member 'FRigUnit_SetControlVector2D::CachedControlIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SetMultiControlVector2D_Entry
// 0x0018 (0x0018 - 0x0000)
struct FRigUnit_SetMultiControlVector2D_Entry final
{
public:
	class FName                                   Control;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Vector;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_SetMultiControlVector2D_Entry) == 0x000008, "Wrong alignment on FRigUnit_SetMultiControlVector2D_Entry");
static_assert(sizeof(FRigUnit_SetMultiControlVector2D_Entry) == 0x000018, "Wrong size on FRigUnit_SetMultiControlVector2D_Entry");
static_assert(offsetof(FRigUnit_SetMultiControlVector2D_Entry, Control) == 0x000000, "Member 'FRigUnit_SetMultiControlVector2D_Entry::Control' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetMultiControlVector2D_Entry, Vector) == 0x000008, "Member 'FRigUnit_SetMultiControlVector2D_Entry::Vector' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SetMultiControlVector2D
// 0x0030 (0x0190 - 0x0160)
struct FRigUnit_SetMultiControlVector2D final : public FRigUnitMutable
{
public:
	TArray<struct FRigUnit_SetMultiControlVector2D_Entry> Entries;                                           // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B7C[0x4];                                     // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              CachedControlIndices;                              // 0x0178(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B7D[0x8];                                     // 0x0188(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_SetMultiControlVector2D) == 0x000010, "Wrong alignment on FRigUnit_SetMultiControlVector2D");
static_assert(sizeof(FRigUnit_SetMultiControlVector2D) == 0x000190, "Wrong size on FRigUnit_SetMultiControlVector2D");
static_assert(offsetof(FRigUnit_SetMultiControlVector2D, Entries) == 0x000160, "Member 'FRigUnit_SetMultiControlVector2D::Entries' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetMultiControlVector2D, Weight) == 0x000170, "Member 'FRigUnit_SetMultiControlVector2D::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetMultiControlVector2D, CachedControlIndices) == 0x000178, "Member 'FRigUnit_SetMultiControlVector2D::CachedControlIndices' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SetControlVector
// 0x0050 (0x01B0 - 0x0160)
struct FRigUnit_SetControlVector final : public FRigUnitMutable
{
public:
	class FName                                   Control;                                           // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B7E[0x4];                                     // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Vector;                                            // 0x0170(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigVMTransformSpace                          Space;                                             // 0x0188(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B7F[0x7];                                     // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCachedRigElement                      CachedControlIndex;                                // 0x0190(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_SetControlVector) == 0x000010, "Wrong alignment on FRigUnit_SetControlVector");
static_assert(sizeof(FRigUnit_SetControlVector) == 0x0001B0, "Wrong size on FRigUnit_SetControlVector");
static_assert(offsetof(FRigUnit_SetControlVector, Control) == 0x000160, "Member 'FRigUnit_SetControlVector::Control' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetControlVector, Weight) == 0x000168, "Member 'FRigUnit_SetControlVector::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetControlVector, Vector) == 0x000170, "Member 'FRigUnit_SetControlVector::Vector' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetControlVector, Space) == 0x000188, "Member 'FRigUnit_SetControlVector::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetControlVector, CachedControlIndex) == 0x000190, "Member 'FRigUnit_SetControlVector::CachedControlIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SetControlRotator
// 0x0050 (0x01B0 - 0x0160)
struct FRigUnit_SetControlRotator final : public FRigUnitMutable
{
public:
	class FName                                   Control;                                           // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B80[0x4];                                     // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Rotator;                                           // 0x0170(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ERigVMTransformSpace                          Space;                                             // 0x0188(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B81[0x7];                                     // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCachedRigElement                      CachedControlIndex;                                // 0x0190(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_SetControlRotator) == 0x000010, "Wrong alignment on FRigUnit_SetControlRotator");
static_assert(sizeof(FRigUnit_SetControlRotator) == 0x0001B0, "Wrong size on FRigUnit_SetControlRotator");
static_assert(offsetof(FRigUnit_SetControlRotator, Control) == 0x000160, "Member 'FRigUnit_SetControlRotator::Control' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetControlRotator, Weight) == 0x000168, "Member 'FRigUnit_SetControlRotator::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetControlRotator, Rotator) == 0x000170, "Member 'FRigUnit_SetControlRotator::Rotator' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetControlRotator, Space) == 0x000188, "Member 'FRigUnit_SetControlRotator::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetControlRotator, CachedControlIndex) == 0x000190, "Member 'FRigUnit_SetControlRotator::CachedControlIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SetMultiControlRotator_Entry
// 0x0028 (0x0028 - 0x0000)
struct FRigUnit_SetMultiControlRotator_Entry final
{
public:
	class FName                                   Control;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotator;                                           // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ERigVMTransformSpace                          Space;                                             // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B82[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_SetMultiControlRotator_Entry) == 0x000008, "Wrong alignment on FRigUnit_SetMultiControlRotator_Entry");
static_assert(sizeof(FRigUnit_SetMultiControlRotator_Entry) == 0x000028, "Wrong size on FRigUnit_SetMultiControlRotator_Entry");
static_assert(offsetof(FRigUnit_SetMultiControlRotator_Entry, Control) == 0x000000, "Member 'FRigUnit_SetMultiControlRotator_Entry::Control' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetMultiControlRotator_Entry, Rotator) == 0x000008, "Member 'FRigUnit_SetMultiControlRotator_Entry::Rotator' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetMultiControlRotator_Entry, Space) == 0x000020, "Member 'FRigUnit_SetMultiControlRotator_Entry::Space' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SetMultiControlRotator
// 0x0030 (0x0190 - 0x0160)
struct FRigUnit_SetMultiControlRotator final : public FRigUnitMutable
{
public:
	TArray<struct FRigUnit_SetMultiControlRotator_Entry> Entries;                                           // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B83[0x4];                                     // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              CachedControlIndices;                              // 0x0178(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B84[0x8];                                     // 0x0188(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_SetMultiControlRotator) == 0x000010, "Wrong alignment on FRigUnit_SetMultiControlRotator");
static_assert(sizeof(FRigUnit_SetMultiControlRotator) == 0x000190, "Wrong size on FRigUnit_SetMultiControlRotator");
static_assert(offsetof(FRigUnit_SetMultiControlRotator, Entries) == 0x000160, "Member 'FRigUnit_SetMultiControlRotator::Entries' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetMultiControlRotator, Weight) == 0x000170, "Member 'FRigUnit_SetMultiControlRotator::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetMultiControlRotator, CachedControlIndices) == 0x000178, "Member 'FRigUnit_SetMultiControlRotator::CachedControlIndices' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SetControlTransform
// 0x00A0 (0x0200 - 0x0160)
struct FRigUnit_SetControlTransform final : public FRigUnitMutable
{
public:
	class FName                                   Control;                                           // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B85[0x4];                                     // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0170(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigVMTransformSpace                          Space;                                             // 0x01D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B86[0x7];                                     // 0x01D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCachedRigElement                      CachedControlIndex;                                // 0x01D8(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B87[0x8];                                     // 0x01F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_SetControlTransform) == 0x000010, "Wrong alignment on FRigUnit_SetControlTransform");
static_assert(sizeof(FRigUnit_SetControlTransform) == 0x000200, "Wrong size on FRigUnit_SetControlTransform");
static_assert(offsetof(FRigUnit_SetControlTransform, Control) == 0x000160, "Member 'FRigUnit_SetControlTransform::Control' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetControlTransform, Weight) == 0x000168, "Member 'FRigUnit_SetControlTransform::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetControlTransform, Transform) == 0x000170, "Member 'FRigUnit_SetControlTransform::Transform' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetControlTransform, Space) == 0x0001D0, "Member 'FRigUnit_SetControlTransform::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetControlTransform, CachedControlIndex) == 0x0001D8, "Member 'FRigUnit_SetControlTransform::CachedControlIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_GetControlVisibility
// 0x0030 (0x0038 - 0x0008)
struct FRigUnit_GetControlVisibility final : public FRigUnit
{
public:
	struct FRigElementKey                         Item;                                              // 0x0008(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B88[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCachedRigElement                      CachedControlIndex;                                // 0x0018(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_GetControlVisibility) == 0x000008, "Wrong alignment on FRigUnit_GetControlVisibility");
static_assert(sizeof(FRigUnit_GetControlVisibility) == 0x000038, "Wrong size on FRigUnit_GetControlVisibility");
static_assert(offsetof(FRigUnit_GetControlVisibility, Item) == 0x000008, "Member 'FRigUnit_GetControlVisibility::Item' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetControlVisibility, bVisible) == 0x000014, "Member 'FRigUnit_GetControlVisibility::bVisible' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetControlVisibility, CachedControlIndex) == 0x000018, "Member 'FRigUnit_GetControlVisibility::CachedControlIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SetControlVisibility
// 0x0040 (0x01A0 - 0x0160)
struct FRigUnit_SetControlVisibility final : public FRigUnitMutable
{
public:
	struct FRigElementKey                         Item;                                              // 0x0160(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B89[0x4];                                     // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Pattern;                                           // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0180(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B8A[0x7];                                     // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              CachedControlIndices;                              // 0x0188(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B8B[0x8];                                     // 0x0198(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_SetControlVisibility) == 0x000010, "Wrong alignment on FRigUnit_SetControlVisibility");
static_assert(sizeof(FRigUnit_SetControlVisibility) == 0x0001A0, "Wrong size on FRigUnit_SetControlVisibility");
static_assert(offsetof(FRigUnit_SetControlVisibility, Item) == 0x000160, "Member 'FRigUnit_SetControlVisibility::Item' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetControlVisibility, Pattern) == 0x000170, "Member 'FRigUnit_SetControlVisibility::Pattern' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetControlVisibility, bVisible) == 0x000180, "Member 'FRigUnit_SetControlVisibility::bVisible' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetControlVisibility, CachedControlIndices) == 0x000188, "Member 'FRigUnit_SetControlVisibility::CachedControlIndices' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SetCurveValue
// 0x0030 (0x0190 - 0x0160)
struct FRigUnit_SetCurveValue final : public FRigUnitMutable
{
public:
	class FName                                   Curve;                                             // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B8C[0x4];                                     // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCachedRigElement                      CachedCurveIndex;                                  // 0x0170(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FRigUnit_SetCurveValue) == 0x000010, "Wrong alignment on FRigUnit_SetCurveValue");
static_assert(sizeof(FRigUnit_SetCurveValue) == 0x000190, "Wrong size on FRigUnit_SetCurveValue");
static_assert(offsetof(FRigUnit_SetCurveValue, Curve) == 0x000160, "Member 'FRigUnit_SetCurveValue::Curve' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetCurveValue, Value) == 0x000168, "Member 'FRigUnit_SetCurveValue::Value' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetCurveValue, CachedCurveIndex) == 0x000170, "Member 'FRigUnit_SetCurveValue::CachedCurveIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SetRelativeBoneTransform
// 0x00C0 (0x0220 - 0x0160)
struct FRigUnit_SetRelativeBoneTransform final : public FRigUnitMutable
{
public:
	class FName                                   bone;                                              // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Space;                                             // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Transform;                                         // 0x0170(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x01D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B8D[0x3];                                     // 0x01D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCachedRigElement                      CachedBone;                                        // 0x01D8(0x0020)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedSpaceIndex;                                  // 0x01F8(0x0020)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B8E[0x8];                                     // 0x0218(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_SetRelativeBoneTransform) == 0x000010, "Wrong alignment on FRigUnit_SetRelativeBoneTransform");
static_assert(sizeof(FRigUnit_SetRelativeBoneTransform) == 0x000220, "Wrong size on FRigUnit_SetRelativeBoneTransform");
static_assert(offsetof(FRigUnit_SetRelativeBoneTransform, bone) == 0x000160, "Member 'FRigUnit_SetRelativeBoneTransform::bone' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetRelativeBoneTransform, Space) == 0x000168, "Member 'FRigUnit_SetRelativeBoneTransform::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetRelativeBoneTransform, Transform) == 0x000170, "Member 'FRigUnit_SetRelativeBoneTransform::Transform' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetRelativeBoneTransform, Weight) == 0x0001D0, "Member 'FRigUnit_SetRelativeBoneTransform::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetRelativeBoneTransform, bPropagateToChildren) == 0x0001D4, "Member 'FRigUnit_SetRelativeBoneTransform::bPropagateToChildren' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetRelativeBoneTransform, CachedBone) == 0x0001D8, "Member 'FRigUnit_SetRelativeBoneTransform::CachedBone' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetRelativeBoneTransform, CachedSpaceIndex) == 0x0001F8, "Member 'FRigUnit_SetRelativeBoneTransform::CachedSpaceIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SetRelativeTransformForItem
// 0x00D0 (0x0230 - 0x0160)
struct FRigUnit_SetRelativeTransformForItem final : public FRigUnitMutable
{
public:
	struct FRigElementKey                         Child;                                             // 0x0160(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         Parent;                                            // 0x016C(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bParentInitial;                                    // 0x0178(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B8F[0x7];                                     // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Value;                                             // 0x0180(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x01E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x01E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B90[0x3];                                     // 0x01E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCachedRigElement                      CachedChild;                                       // 0x01E8(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedParent;                                      // 0x0208(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B91[0x8];                                     // 0x0228(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_SetRelativeTransformForItem) == 0x000010, "Wrong alignment on FRigUnit_SetRelativeTransformForItem");
static_assert(sizeof(FRigUnit_SetRelativeTransformForItem) == 0x000230, "Wrong size on FRigUnit_SetRelativeTransformForItem");
static_assert(offsetof(FRigUnit_SetRelativeTransformForItem, Child) == 0x000160, "Member 'FRigUnit_SetRelativeTransformForItem::Child' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetRelativeTransformForItem, Parent) == 0x00016C, "Member 'FRigUnit_SetRelativeTransformForItem::Parent' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetRelativeTransformForItem, bParentInitial) == 0x000178, "Member 'FRigUnit_SetRelativeTransformForItem::bParentInitial' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetRelativeTransformForItem, Value) == 0x000180, "Member 'FRigUnit_SetRelativeTransformForItem::Value' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetRelativeTransformForItem, Weight) == 0x0001E0, "Member 'FRigUnit_SetRelativeTransformForItem::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetRelativeTransformForItem, bPropagateToChildren) == 0x0001E4, "Member 'FRigUnit_SetRelativeTransformForItem::bPropagateToChildren' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetRelativeTransformForItem, CachedChild) == 0x0001E8, "Member 'FRigUnit_SetRelativeTransformForItem::CachedChild' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetRelativeTransformForItem, CachedParent) == 0x000208, "Member 'FRigUnit_SetRelativeTransformForItem::CachedParent' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SetRelativeTranslationForItem
// 0x0080 (0x01E0 - 0x0160)
struct FRigUnit_SetRelativeTranslationForItem final : public FRigUnitMutable
{
public:
	struct FRigElementKey                         Child;                                             // 0x0160(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         Parent;                                            // 0x016C(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bParentInitial;                                    // 0x0178(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B92[0x7];                                     // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Value;                                             // 0x0180(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0198(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x019C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B93[0x3];                                     // 0x019D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCachedRigElement                      CachedChild;                                       // 0x01A0(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedParent;                                      // 0x01C0(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_SetRelativeTranslationForItem) == 0x000010, "Wrong alignment on FRigUnit_SetRelativeTranslationForItem");
static_assert(sizeof(FRigUnit_SetRelativeTranslationForItem) == 0x0001E0, "Wrong size on FRigUnit_SetRelativeTranslationForItem");
static_assert(offsetof(FRigUnit_SetRelativeTranslationForItem, Child) == 0x000160, "Member 'FRigUnit_SetRelativeTranslationForItem::Child' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetRelativeTranslationForItem, Parent) == 0x00016C, "Member 'FRigUnit_SetRelativeTranslationForItem::Parent' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetRelativeTranslationForItem, bParentInitial) == 0x000178, "Member 'FRigUnit_SetRelativeTranslationForItem::bParentInitial' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetRelativeTranslationForItem, Value) == 0x000180, "Member 'FRigUnit_SetRelativeTranslationForItem::Value' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetRelativeTranslationForItem, Weight) == 0x000198, "Member 'FRigUnit_SetRelativeTranslationForItem::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetRelativeTranslationForItem, bPropagateToChildren) == 0x00019C, "Member 'FRigUnit_SetRelativeTranslationForItem::bPropagateToChildren' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetRelativeTranslationForItem, CachedChild) == 0x0001A0, "Member 'FRigUnit_SetRelativeTranslationForItem::CachedChild' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetRelativeTranslationForItem, CachedParent) == 0x0001C0, "Member 'FRigUnit_SetRelativeTranslationForItem::CachedParent' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SetRelativeRotationForItem
// 0x0090 (0x01F0 - 0x0160)
struct FRigUnit_SetRelativeRotationForItem final : public FRigUnitMutable
{
public:
	struct FRigElementKey                         Child;                                             // 0x0160(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         Parent;                                            // 0x016C(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bParentInitial;                                    // 0x0178(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B94[0x7];                                     // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Value;                                             // 0x0180(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x01A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x01A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B95[0x3];                                     // 0x01A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCachedRigElement                      CachedChild;                                       // 0x01A8(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedParent;                                      // 0x01C8(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B96[0x8];                                     // 0x01E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_SetRelativeRotationForItem) == 0x000010, "Wrong alignment on FRigUnit_SetRelativeRotationForItem");
static_assert(sizeof(FRigUnit_SetRelativeRotationForItem) == 0x0001F0, "Wrong size on FRigUnit_SetRelativeRotationForItem");
static_assert(offsetof(FRigUnit_SetRelativeRotationForItem, Child) == 0x000160, "Member 'FRigUnit_SetRelativeRotationForItem::Child' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetRelativeRotationForItem, Parent) == 0x00016C, "Member 'FRigUnit_SetRelativeRotationForItem::Parent' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetRelativeRotationForItem, bParentInitial) == 0x000178, "Member 'FRigUnit_SetRelativeRotationForItem::bParentInitial' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetRelativeRotationForItem, Value) == 0x000180, "Member 'FRigUnit_SetRelativeRotationForItem::Value' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetRelativeRotationForItem, Weight) == 0x0001A0, "Member 'FRigUnit_SetRelativeRotationForItem::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetRelativeRotationForItem, bPropagateToChildren) == 0x0001A4, "Member 'FRigUnit_SetRelativeRotationForItem::bPropagateToChildren' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetRelativeRotationForItem, CachedChild) == 0x0001A8, "Member 'FRigUnit_SetRelativeRotationForItem::CachedChild' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetRelativeRotationForItem, CachedParent) == 0x0001C8, "Member 'FRigUnit_SetRelativeRotationForItem::CachedParent' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SpringInterpVectorV2
// 0x00E0 (0x00E8 - 0x0008)
struct FRigUnit_SpringInterpVectorV2 final : public FRigVMFunction_SimBase
{
public:
	struct FVector                                Target;                                            // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Strength;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CriticalDamping;                                   // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Force;                                             // 0x0028(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCurrentInput;                                  // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B97[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Current;                                           // 0x0048(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetVelocityAmount;                              // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitializeFromTarget;                             // 0x0064(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B98[0x3];                                     // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Result;                                            // 0x0068(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Velocity;                                          // 0x0080(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SimulatedResult;                                   // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVectorSpringState                     SpringState;                                       // 0x00B0(0x0038)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_SpringInterpVectorV2) == 0x000008, "Wrong alignment on FRigUnit_SpringInterpVectorV2");
static_assert(sizeof(FRigUnit_SpringInterpVectorV2) == 0x0000E8, "Wrong size on FRigUnit_SpringInterpVectorV2");
static_assert(offsetof(FRigUnit_SpringInterpVectorV2, Target) == 0x000008, "Member 'FRigUnit_SpringInterpVectorV2::Target' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringInterpVectorV2, Strength) == 0x000020, "Member 'FRigUnit_SpringInterpVectorV2::Strength' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringInterpVectorV2, CriticalDamping) == 0x000024, "Member 'FRigUnit_SpringInterpVectorV2::CriticalDamping' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringInterpVectorV2, Force) == 0x000028, "Member 'FRigUnit_SpringInterpVectorV2::Force' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringInterpVectorV2, bUseCurrentInput) == 0x000040, "Member 'FRigUnit_SpringInterpVectorV2::bUseCurrentInput' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringInterpVectorV2, Current) == 0x000048, "Member 'FRigUnit_SpringInterpVectorV2::Current' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringInterpVectorV2, TargetVelocityAmount) == 0x000060, "Member 'FRigUnit_SpringInterpVectorV2::TargetVelocityAmount' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringInterpVectorV2, bInitializeFromTarget) == 0x000064, "Member 'FRigUnit_SpringInterpVectorV2::bInitializeFromTarget' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringInterpVectorV2, Result) == 0x000068, "Member 'FRigUnit_SpringInterpVectorV2::Result' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringInterpVectorV2, Velocity) == 0x000080, "Member 'FRigUnit_SpringInterpVectorV2::Velocity' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringInterpVectorV2, SimulatedResult) == 0x000098, "Member 'FRigUnit_SpringInterpVectorV2::SimulatedResult' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringInterpVectorV2, SpringState) == 0x0000B0, "Member 'FRigUnit_SpringInterpVectorV2::SpringState' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SetSpaceInitialTransform
// 0x0100 (0x0260 - 0x0160)
struct FRigUnit_SetSpaceInitialTransform final : public FRigUnitMutable
{
public:
	class FName                                   SpaceName;                                         // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B99[0x8];                                     // 0x0168(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0170(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Result;                                            // 0x01D0(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigVMTransformSpace                          Space;                                             // 0x0230(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B9A[0x7];                                     // 0x0231(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCachedRigElement                      CachedSpaceIndex;                                  // 0x0238(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B9B[0x8];                                     // 0x0258(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_SetSpaceInitialTransform) == 0x000010, "Wrong alignment on FRigUnit_SetSpaceInitialTransform");
static_assert(sizeof(FRigUnit_SetSpaceInitialTransform) == 0x000260, "Wrong size on FRigUnit_SetSpaceInitialTransform");
static_assert(offsetof(FRigUnit_SetSpaceInitialTransform, SpaceName) == 0x000160, "Member 'FRigUnit_SetSpaceInitialTransform::SpaceName' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetSpaceInitialTransform, Transform) == 0x000170, "Member 'FRigUnit_SetSpaceInitialTransform::Transform' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetSpaceInitialTransform, Result) == 0x0001D0, "Member 'FRigUnit_SetSpaceInitialTransform::Result' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetSpaceInitialTransform, Space) == 0x000230, "Member 'FRigUnit_SetSpaceInitialTransform::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetSpaceInitialTransform, CachedSpaceIndex) == 0x000238, "Member 'FRigUnit_SetSpaceInitialTransform::CachedSpaceIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SetSpaceTransform
// 0x00A0 (0x0200 - 0x0160)
struct FRigUnit_SetSpaceTransform final : public FRigUnitMutable
{
public:
	class FName                                   Space;                                             // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B9C[0x4];                                     // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0170(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigVMTransformSpace                          SpaceType;                                         // 0x01D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B9D[0x7];                                     // 0x01D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCachedRigElement                      CachedSpaceIndex;                                  // 0x01D8(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B9E[0x8];                                     // 0x01F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_SetSpaceTransform) == 0x000010, "Wrong alignment on FRigUnit_SetSpaceTransform");
static_assert(sizeof(FRigUnit_SetSpaceTransform) == 0x000200, "Wrong size on FRigUnit_SetSpaceTransform");
static_assert(offsetof(FRigUnit_SetSpaceTransform, Space) == 0x000160, "Member 'FRigUnit_SetSpaceTransform::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetSpaceTransform, Weight) == 0x000168, "Member 'FRigUnit_SetSpaceTransform::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetSpaceTransform, Transform) == 0x000170, "Member 'FRigUnit_SetSpaceTransform::Transform' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetSpaceTransform, SpaceType) == 0x0001D0, "Member 'FRigUnit_SetSpaceTransform::SpaceType' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetSpaceTransform, CachedSpaceIndex) == 0x0001D8, "Member 'FRigUnit_SetSpaceTransform::CachedSpaceIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SetTranslation
// 0x0050 (0x01B0 - 0x0160)
struct FRigUnit_SetTranslation final : public FRigUnitMutable
{
public:
	struct FRigElementKey                         Item;                                              // 0x0160(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigVMTransformSpace                          Space;                                             // 0x016C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitial;                                          // 0x016D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B9F[0x2];                                     // 0x016E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Value;                                             // 0x0170(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x018C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BA0[0x3];                                     // 0x018D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCachedRigElement                      CachedIndex;                                       // 0x0190(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_SetTranslation) == 0x000010, "Wrong alignment on FRigUnit_SetTranslation");
static_assert(sizeof(FRigUnit_SetTranslation) == 0x0001B0, "Wrong size on FRigUnit_SetTranslation");
static_assert(offsetof(FRigUnit_SetTranslation, Item) == 0x000160, "Member 'FRigUnit_SetTranslation::Item' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetTranslation, Space) == 0x00016C, "Member 'FRigUnit_SetTranslation::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetTranslation, bInitial) == 0x00016D, "Member 'FRigUnit_SetTranslation::bInitial' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetTranslation, Value) == 0x000170, "Member 'FRigUnit_SetTranslation::Value' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetTranslation, Weight) == 0x000188, "Member 'FRigUnit_SetTranslation::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetTranslation, bPropagateToChildren) == 0x00018C, "Member 'FRigUnit_SetTranslation::bPropagateToChildren' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetTranslation, CachedIndex) == 0x000190, "Member 'FRigUnit_SetTranslation::CachedIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SetRotation
// 0x0060 (0x01C0 - 0x0160)
struct FRigUnit_SetRotation final : public FRigUnitMutable
{
public:
	struct FRigElementKey                         Item;                                              // 0x0160(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigVMTransformSpace                          Space;                                             // 0x016C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitial;                                          // 0x016D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BA1[0x2];                                     // 0x016E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Value;                                             // 0x0170(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0190(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x0194(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BA2[0x3];                                     // 0x0195(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCachedRigElement                      CachedIndex;                                       // 0x0198(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BA3[0x8];                                     // 0x01B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_SetRotation) == 0x000010, "Wrong alignment on FRigUnit_SetRotation");
static_assert(sizeof(FRigUnit_SetRotation) == 0x0001C0, "Wrong size on FRigUnit_SetRotation");
static_assert(offsetof(FRigUnit_SetRotation, Item) == 0x000160, "Member 'FRigUnit_SetRotation::Item' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetRotation, Space) == 0x00016C, "Member 'FRigUnit_SetRotation::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetRotation, bInitial) == 0x00016D, "Member 'FRigUnit_SetRotation::bInitial' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetRotation, Value) == 0x000170, "Member 'FRigUnit_SetRotation::Value' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetRotation, Weight) == 0x000190, "Member 'FRigUnit_SetRotation::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetRotation, bPropagateToChildren) == 0x000194, "Member 'FRigUnit_SetRotation::bPropagateToChildren' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetRotation, CachedIndex) == 0x000198, "Member 'FRigUnit_SetRotation::CachedIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_ModifyTransforms_WorkData
// 0x0010 (0x0010 - 0x0000)
struct FRigUnit_ModifyTransforms_WorkData
{
public:
	TArray<struct FCachedRigElement>              CachedItems;                                       // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_ModifyTransforms_WorkData) == 0x000008, "Wrong alignment on FRigUnit_ModifyTransforms_WorkData");
static_assert(sizeof(FRigUnit_ModifyTransforms_WorkData) == 0x000010, "Wrong size on FRigUnit_ModifyTransforms_WorkData");
static_assert(offsetof(FRigUnit_ModifyTransforms_WorkData, CachedItems) == 0x000000, "Member 'FRigUnit_ModifyTransforms_WorkData::CachedItems' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_ModifyBoneTransforms_WorkData
// 0x0000 (0x0010 - 0x0010)
struct FRigUnit_ModifyBoneTransforms_WorkData final : public FRigUnit_ModifyTransforms_WorkData
{
};
static_assert(alignof(FRigUnit_ModifyBoneTransforms_WorkData) == 0x000008, "Wrong alignment on FRigUnit_ModifyBoneTransforms_WorkData");
static_assert(sizeof(FRigUnit_ModifyBoneTransforms_WorkData) == 0x000010, "Wrong size on FRigUnit_ModifyBoneTransforms_WorkData");

// ScriptStruct ControlRig.RigUnit_SetTransformArray
// 0x0040 (0x01A0 - 0x0160)
struct FRigUnit_SetTransformArray final : public FRigUnitMutable
{
public:
	struct FRigElementKeyCollection               Items;                                             // 0x0160(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigVMTransformSpace                          Space;                                             // 0x0170(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitial;                                          // 0x0171(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BA4[0x6];                                     // 0x0172(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     Transforms;                                        // 0x0178(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x018C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BA5[0x3];                                     // 0x018D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              CachedIndex;                                       // 0x0190(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_SetTransformArray) == 0x000010, "Wrong alignment on FRigUnit_SetTransformArray");
static_assert(sizeof(FRigUnit_SetTransformArray) == 0x0001A0, "Wrong size on FRigUnit_SetTransformArray");
static_assert(offsetof(FRigUnit_SetTransformArray, Items) == 0x000160, "Member 'FRigUnit_SetTransformArray::Items' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetTransformArray, Space) == 0x000170, "Member 'FRigUnit_SetTransformArray::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetTransformArray, bInitial) == 0x000171, "Member 'FRigUnit_SetTransformArray::bInitial' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetTransformArray, Transforms) == 0x000178, "Member 'FRigUnit_SetTransformArray::Transforms' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetTransformArray, Weight) == 0x000188, "Member 'FRigUnit_SetTransformArray::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetTransformArray, bPropagateToChildren) == 0x00018C, "Member 'FRigUnit_SetTransformArray::bPropagateToChildren' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetTransformArray, CachedIndex) == 0x000190, "Member 'FRigUnit_SetTransformArray::CachedIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SetTransformItemArray
// 0x0040 (0x01A0 - 0x0160)
struct FRigUnit_SetTransformItemArray final : public FRigUnitMutable
{
public:
	TArray<struct FRigElementKey>                 Items;                                             // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	ERigVMTransformSpace                          Space;                                             // 0x0170(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitial;                                          // 0x0171(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BA6[0x6];                                     // 0x0172(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     Transforms;                                        // 0x0178(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x018C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BA7[0x3];                                     // 0x018D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              CachedIndex;                                       // 0x0190(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_SetTransformItemArray) == 0x000010, "Wrong alignment on FRigUnit_SetTransformItemArray");
static_assert(sizeof(FRigUnit_SetTransformItemArray) == 0x0001A0, "Wrong size on FRigUnit_SetTransformItemArray");
static_assert(offsetof(FRigUnit_SetTransformItemArray, Items) == 0x000160, "Member 'FRigUnit_SetTransformItemArray::Items' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetTransformItemArray, Space) == 0x000170, "Member 'FRigUnit_SetTransformItemArray::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetTransformItemArray, bInitial) == 0x000171, "Member 'FRigUnit_SetTransformItemArray::bInitial' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetTransformItemArray, Transforms) == 0x000178, "Member 'FRigUnit_SetTransformItemArray::Transforms' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetTransformItemArray, Weight) == 0x000188, "Member 'FRigUnit_SetTransformItemArray::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetTransformItemArray, bPropagateToChildren) == 0x00018C, "Member 'FRigUnit_SetTransformItemArray::bPropagateToChildren' has a wrong offset!");
static_assert(offsetof(FRigUnit_SetTransformItemArray, CachedIndex) == 0x000190, "Member 'FRigUnit_SetTransformItemArray::CachedIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_FABRIKPerItem
// 0x00D0 (0x0230 - 0x0160)
struct FRigUnit_FABRIKPerItem final : public FRigUnit_HighlevelBaseMutable
{
public:
	struct FRigElementKeyCollection               Items;                                             // 0x0160(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             EffectorTransform;                                 // 0x0170(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Precision;                                         // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x01D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x01D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BA8[0x3];                                     // 0x01D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxIterations;                                     // 0x01DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigUnit_FABRIK_WorkData               WorkData;                                          // 0x01E0(0x0040)(Transient, NativeAccessSpecifierPublic)
	bool                                          bSetEffectorTransform;                             // 0x0220(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BA9[0xF];                                     // 0x0221(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_FABRIKPerItem) == 0x000010, "Wrong alignment on FRigUnit_FABRIKPerItem");
static_assert(sizeof(FRigUnit_FABRIKPerItem) == 0x000230, "Wrong size on FRigUnit_FABRIKPerItem");
static_assert(offsetof(FRigUnit_FABRIKPerItem, Items) == 0x000160, "Member 'FRigUnit_FABRIKPerItem::Items' has a wrong offset!");
static_assert(offsetof(FRigUnit_FABRIKPerItem, EffectorTransform) == 0x000170, "Member 'FRigUnit_FABRIKPerItem::EffectorTransform' has a wrong offset!");
static_assert(offsetof(FRigUnit_FABRIKPerItem, Precision) == 0x0001D0, "Member 'FRigUnit_FABRIKPerItem::Precision' has a wrong offset!");
static_assert(offsetof(FRigUnit_FABRIKPerItem, Weight) == 0x0001D4, "Member 'FRigUnit_FABRIKPerItem::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_FABRIKPerItem, bPropagateToChildren) == 0x0001D8, "Member 'FRigUnit_FABRIKPerItem::bPropagateToChildren' has a wrong offset!");
static_assert(offsetof(FRigUnit_FABRIKPerItem, MaxIterations) == 0x0001DC, "Member 'FRigUnit_FABRIKPerItem::MaxIterations' has a wrong offset!");
static_assert(offsetof(FRigUnit_FABRIKPerItem, WorkData) == 0x0001E0, "Member 'FRigUnit_FABRIKPerItem::WorkData' has a wrong offset!");
static_assert(offsetof(FRigUnit_FABRIKPerItem, bSetEffectorTransform) == 0x000220, "Member 'FRigUnit_FABRIKPerItem::bSetEffectorTransform' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_UnsetCurveValue
// 0x0030 (0x0190 - 0x0160)
struct FRigUnit_UnsetCurveValue final : public FRigUnitMutable
{
public:
	class FName                                   Curve;                                             // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedCurveIndex;                                  // 0x0168(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2BAA[0x8];                                     // 0x0188(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_UnsetCurveValue) == 0x000010, "Wrong alignment on FRigUnit_UnsetCurveValue");
static_assert(sizeof(FRigUnit_UnsetCurveValue) == 0x000190, "Wrong size on FRigUnit_UnsetCurveValue");
static_assert(offsetof(FRigUnit_UnsetCurveValue, Curve) == 0x000160, "Member 'FRigUnit_UnsetCurveValue::Curve' has a wrong offset!");
static_assert(offsetof(FRigUnit_UnsetCurveValue, CachedCurveIndex) == 0x000168, "Member 'FRigUnit_UnsetCurveValue::CachedCurveIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_ToWorldSpace_Transform
// 0x00C8 (0x00D0 - 0x0008)
struct FRigUnit_ToWorldSpace_Transform final : public FRigUnit
{
public:
	uint8                                         Pad_2BAB[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Value;                                             // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             World;                                             // 0x0070(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_ToWorldSpace_Transform) == 0x000010, "Wrong alignment on FRigUnit_ToWorldSpace_Transform");
static_assert(sizeof(FRigUnit_ToWorldSpace_Transform) == 0x0000D0, "Wrong size on FRigUnit_ToWorldSpace_Transform");
static_assert(offsetof(FRigUnit_ToWorldSpace_Transform, Value) == 0x000010, "Member 'FRigUnit_ToWorldSpace_Transform::Value' has a wrong offset!");
static_assert(offsetof(FRigUnit_ToWorldSpace_Transform, World) == 0x000070, "Member 'FRigUnit_ToWorldSpace_Transform::World' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_ToRigSpace_Transform
// 0x00C8 (0x00D0 - 0x0008)
struct FRigUnit_ToRigSpace_Transform final : public FRigUnit
{
public:
	uint8                                         Pad_2BAC[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Value;                                             // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Global;                                            // 0x0070(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_ToRigSpace_Transform) == 0x000010, "Wrong alignment on FRigUnit_ToRigSpace_Transform");
static_assert(sizeof(FRigUnit_ToRigSpace_Transform) == 0x0000D0, "Wrong size on FRigUnit_ToRigSpace_Transform");
static_assert(offsetof(FRigUnit_ToRigSpace_Transform, Value) == 0x000010, "Member 'FRigUnit_ToRigSpace_Transform::Value' has a wrong offset!");
static_assert(offsetof(FRigUnit_ToRigSpace_Transform, Global) == 0x000070, "Member 'FRigUnit_ToRigSpace_Transform::Global' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_ToWorldSpace_Location
// 0x0030 (0x0038 - 0x0008)
struct FRigUnit_ToWorldSpace_Location final : public FRigUnit
{
public:
	struct FVector                                Value;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                World;                                             // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_ToWorldSpace_Location) == 0x000008, "Wrong alignment on FRigUnit_ToWorldSpace_Location");
static_assert(sizeof(FRigUnit_ToWorldSpace_Location) == 0x000038, "Wrong size on FRigUnit_ToWorldSpace_Location");
static_assert(offsetof(FRigUnit_ToWorldSpace_Location, Value) == 0x000008, "Member 'FRigUnit_ToWorldSpace_Location::Value' has a wrong offset!");
static_assert(offsetof(FRigUnit_ToWorldSpace_Location, World) == 0x000020, "Member 'FRigUnit_ToWorldSpace_Location::World' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_ToRigSpace_Location
// 0x0030 (0x0038 - 0x0008)
struct FRigUnit_ToRigSpace_Location final : public FRigUnit
{
public:
	struct FVector                                Value;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Global;                                            // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_ToRigSpace_Location) == 0x000008, "Wrong alignment on FRigUnit_ToRigSpace_Location");
static_assert(sizeof(FRigUnit_ToRigSpace_Location) == 0x000038, "Wrong size on FRigUnit_ToRigSpace_Location");
static_assert(offsetof(FRigUnit_ToRigSpace_Location, Value) == 0x000008, "Member 'FRigUnit_ToRigSpace_Location::Value' has a wrong offset!");
static_assert(offsetof(FRigUnit_ToRigSpace_Location, Global) == 0x000020, "Member 'FRigUnit_ToRigSpace_Location::Global' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_ToRigSpace_Rotation
// 0x0048 (0x0050 - 0x0008)
struct FRigUnit_ToRigSpace_Rotation final : public FRigUnit
{
public:
	uint8                                         Pad_2BAD[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Value;                                             // 0x0010(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  Global;                                            // 0x0030(0x0020)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_ToRigSpace_Rotation) == 0x000010, "Wrong alignment on FRigUnit_ToRigSpace_Rotation");
static_assert(sizeof(FRigUnit_ToRigSpace_Rotation) == 0x000050, "Wrong size on FRigUnit_ToRigSpace_Rotation");
static_assert(offsetof(FRigUnit_ToRigSpace_Rotation, Value) == 0x000010, "Member 'FRigUnit_ToRigSpace_Rotation::Value' has a wrong offset!");
static_assert(offsetof(FRigUnit_ToRigSpace_Rotation, Global) == 0x000030, "Member 'FRigUnit_ToRigSpace_Rotation::Global' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_ModifyBoneTransforms_PerBone
// 0x0070 (0x0070 - 0x0000)
struct FRigUnit_ModifyBoneTransforms_PerBone final
{
public:
	class FName                                   bone;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BAE[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_ModifyBoneTransforms_PerBone) == 0x000010, "Wrong alignment on FRigUnit_ModifyBoneTransforms_PerBone");
static_assert(sizeof(FRigUnit_ModifyBoneTransforms_PerBone) == 0x000070, "Wrong size on FRigUnit_ModifyBoneTransforms_PerBone");
static_assert(offsetof(FRigUnit_ModifyBoneTransforms_PerBone, bone) == 0x000000, "Member 'FRigUnit_ModifyBoneTransforms_PerBone::bone' has a wrong offset!");
static_assert(offsetof(FRigUnit_ModifyBoneTransforms_PerBone, Transform) == 0x000010, "Member 'FRigUnit_ModifyBoneTransforms_PerBone::Transform' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_BoneHarmonics
// 0x00C0 (0x0220 - 0x0160)
struct FRigUnit_BoneHarmonics final : public FRigUnit_HighlevelBaseMutable
{
public:
	TArray<struct FRigUnit_BoneHarmonics_BoneTarget> Bones;                                             // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	struct FVector                                WaveSpeed;                                         // 0x0170(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WaveFrequency;                                     // 0x0188(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WaveAmplitude;                                     // 0x01A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WaveOffset;                                        // 0x01B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WaveNoise;                                         // 0x01D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigVMAnimEasingType                          WaveEase;                                          // 0x01E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BAF[0x3];                                     // 0x01E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WaveMinimum;                                       // 0x01EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaveMaximum;                                       // 0x01F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEulerRotationOrder                           RotationOrder;                                     // 0x01F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x01F5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BB0[0x2];                                     // 0x01F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_BoneHarmonics_WorkData        WorkData;                                          // 0x01F8(0x0028)(Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_BoneHarmonics) == 0x000010, "Wrong alignment on FRigUnit_BoneHarmonics");
static_assert(sizeof(FRigUnit_BoneHarmonics) == 0x000220, "Wrong size on FRigUnit_BoneHarmonics");
static_assert(offsetof(FRigUnit_BoneHarmonics, Bones) == 0x000160, "Member 'FRigUnit_BoneHarmonics::Bones' has a wrong offset!");
static_assert(offsetof(FRigUnit_BoneHarmonics, WaveSpeed) == 0x000170, "Member 'FRigUnit_BoneHarmonics::WaveSpeed' has a wrong offset!");
static_assert(offsetof(FRigUnit_BoneHarmonics, WaveFrequency) == 0x000188, "Member 'FRigUnit_BoneHarmonics::WaveFrequency' has a wrong offset!");
static_assert(offsetof(FRigUnit_BoneHarmonics, WaveAmplitude) == 0x0001A0, "Member 'FRigUnit_BoneHarmonics::WaveAmplitude' has a wrong offset!");
static_assert(offsetof(FRigUnit_BoneHarmonics, WaveOffset) == 0x0001B8, "Member 'FRigUnit_BoneHarmonics::WaveOffset' has a wrong offset!");
static_assert(offsetof(FRigUnit_BoneHarmonics, WaveNoise) == 0x0001D0, "Member 'FRigUnit_BoneHarmonics::WaveNoise' has a wrong offset!");
static_assert(offsetof(FRigUnit_BoneHarmonics, WaveEase) == 0x0001E8, "Member 'FRigUnit_BoneHarmonics::WaveEase' has a wrong offset!");
static_assert(offsetof(FRigUnit_BoneHarmonics, WaveMinimum) == 0x0001EC, "Member 'FRigUnit_BoneHarmonics::WaveMinimum' has a wrong offset!");
static_assert(offsetof(FRigUnit_BoneHarmonics, WaveMaximum) == 0x0001F0, "Member 'FRigUnit_BoneHarmonics::WaveMaximum' has a wrong offset!");
static_assert(offsetof(FRigUnit_BoneHarmonics, RotationOrder) == 0x0001F4, "Member 'FRigUnit_BoneHarmonics::RotationOrder' has a wrong offset!");
static_assert(offsetof(FRigUnit_BoneHarmonics, bPropagateToChildren) == 0x0001F5, "Member 'FRigUnit_BoneHarmonics::bPropagateToChildren' has a wrong offset!");
static_assert(offsetof(FRigUnit_BoneHarmonics, WorkData) == 0x0001F8, "Member 'FRigUnit_BoneHarmonics::WorkData' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_PointSimulation_WorkData
// 0x0088 (0x0088 - 0x0000)
struct FRigUnit_PointSimulation_WorkData final
{
public:
	struct FCRSimPointContainer                   Simulation;                                        // 0x0000(0x0078)(NativeAccessSpecifierPublic)
	TArray<struct FCachedRigElement>              BoneIndices;                                       // 0x0078(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_PointSimulation_WorkData) == 0x000008, "Wrong alignment on FRigUnit_PointSimulation_WorkData");
static_assert(sizeof(FRigUnit_PointSimulation_WorkData) == 0x000088, "Wrong size on FRigUnit_PointSimulation_WorkData");
static_assert(offsetof(FRigUnit_PointSimulation_WorkData, Simulation) == 0x000000, "Member 'FRigUnit_PointSimulation_WorkData::Simulation' has a wrong offset!");
static_assert(offsetof(FRigUnit_PointSimulation_WorkData, BoneIndices) == 0x000078, "Member 'FRigUnit_PointSimulation_WorkData::BoneIndices' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_PointSimulation
// 0x0210 (0x0310 - 0x0100)
struct FRigUnit_PointSimulation final : public FRigVMFunction_SimBaseMutable
{
public:
	TArray<struct FRigVMSimPoint>                 Points;                                            // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCRSimLinearSpring>             Links;                                             // 0x0110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCRSimPointForce>               Forces;                                            // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCRSimSoftCollision>            CollisionVolumes;                                  // 0x0130(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         SimulatedStepsPerSecond;                           // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigVMSimPointIntegrateType                   IntegratorType;                                    // 0x0144(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BB1[0x3];                                     // 0x0145(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VerletBlend;                                       // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BB2[0x4];                                     // 0x014C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigUnit_PointSimulation_BoneTarget> BoneTargets;                                       // 0x0150(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	bool                                          bLimitLocalPosition;                               // 0x0160(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x0161(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BB3[0x6];                                     // 0x0162(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PrimaryAimAxis;                                    // 0x0168(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SecondaryAimAxis;                                  // 0x0180(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BB4[0x8];                                     // 0x0198(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_PointSimulation_DebugSettings DebugSettings;                                     // 0x01A0(0x0080)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRigVMFourPointBezier                  Bezier;                                            // 0x0220(0x0060)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FRigUnit_PointSimulation_WorkData      WorkData;                                          // 0x0280(0x0088)(Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BB5[0x8];                                     // 0x0308(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_PointSimulation) == 0x000010, "Wrong alignment on FRigUnit_PointSimulation");
static_assert(sizeof(FRigUnit_PointSimulation) == 0x000310, "Wrong size on FRigUnit_PointSimulation");
static_assert(offsetof(FRigUnit_PointSimulation, Points) == 0x000100, "Member 'FRigUnit_PointSimulation::Points' has a wrong offset!");
static_assert(offsetof(FRigUnit_PointSimulation, Links) == 0x000110, "Member 'FRigUnit_PointSimulation::Links' has a wrong offset!");
static_assert(offsetof(FRigUnit_PointSimulation, Forces) == 0x000120, "Member 'FRigUnit_PointSimulation::Forces' has a wrong offset!");
static_assert(offsetof(FRigUnit_PointSimulation, CollisionVolumes) == 0x000130, "Member 'FRigUnit_PointSimulation::CollisionVolumes' has a wrong offset!");
static_assert(offsetof(FRigUnit_PointSimulation, SimulatedStepsPerSecond) == 0x000140, "Member 'FRigUnit_PointSimulation::SimulatedStepsPerSecond' has a wrong offset!");
static_assert(offsetof(FRigUnit_PointSimulation, IntegratorType) == 0x000144, "Member 'FRigUnit_PointSimulation::IntegratorType' has a wrong offset!");
static_assert(offsetof(FRigUnit_PointSimulation, VerletBlend) == 0x000148, "Member 'FRigUnit_PointSimulation::VerletBlend' has a wrong offset!");
static_assert(offsetof(FRigUnit_PointSimulation, BoneTargets) == 0x000150, "Member 'FRigUnit_PointSimulation::BoneTargets' has a wrong offset!");
static_assert(offsetof(FRigUnit_PointSimulation, bLimitLocalPosition) == 0x000160, "Member 'FRigUnit_PointSimulation::bLimitLocalPosition' has a wrong offset!");
static_assert(offsetof(FRigUnit_PointSimulation, bPropagateToChildren) == 0x000161, "Member 'FRigUnit_PointSimulation::bPropagateToChildren' has a wrong offset!");
static_assert(offsetof(FRigUnit_PointSimulation, PrimaryAimAxis) == 0x000168, "Member 'FRigUnit_PointSimulation::PrimaryAimAxis' has a wrong offset!");
static_assert(offsetof(FRigUnit_PointSimulation, SecondaryAimAxis) == 0x000180, "Member 'FRigUnit_PointSimulation::SecondaryAimAxis' has a wrong offset!");
static_assert(offsetof(FRigUnit_PointSimulation, DebugSettings) == 0x0001A0, "Member 'FRigUnit_PointSimulation::DebugSettings' has a wrong offset!");
static_assert(offsetof(FRigUnit_PointSimulation, Bezier) == 0x000220, "Member 'FRigUnit_PointSimulation::Bezier' has a wrong offset!");
static_assert(offsetof(FRigUnit_PointSimulation, WorkData) == 0x000280, "Member 'FRigUnit_PointSimulation::WorkData' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_MultiFABRIK_EndEffector
// 0x0020 (0x0020 - 0x0000)
struct FRigUnit_MultiFABRIK_EndEffector final
{
public:
	class FName                                   bone;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_MultiFABRIK_EndEffector) == 0x000008, "Wrong alignment on FRigUnit_MultiFABRIK_EndEffector");
static_assert(sizeof(FRigUnit_MultiFABRIK_EndEffector) == 0x000020, "Wrong size on FRigUnit_MultiFABRIK_EndEffector");
static_assert(offsetof(FRigUnit_MultiFABRIK_EndEffector, bone) == 0x000000, "Member 'FRigUnit_MultiFABRIK_EndEffector::bone' has a wrong offset!");
static_assert(offsetof(FRigUnit_MultiFABRIK_EndEffector, Location) == 0x000008, "Member 'FRigUnit_MultiFABRIK_EndEffector::Location' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_MultiFABRIK
// 0x00A0 (0x0200 - 0x0160)
struct FRigUnit_MultiFABRIK final : public FRigUnit_HighlevelBaseMutable
{
public:
	class FName                                   RootBone;                                          // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRigUnit_MultiFABRIK_EndEffector> Effectors;                                         // 0x0168(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Precision;                                         // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x017C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BB6[0x3];                                     // 0x017D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxIterations;                                     // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BB7[0x4];                                     // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_MultiFABRIK_WorkData          WorkData;                                          // 0x0188(0x0068)(Transient, NativeAccessSpecifierPublic)
	bool                                          bIsInitialized;                                    // 0x01F0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BB8[0xF];                                     // 0x01F1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_MultiFABRIK) == 0x000010, "Wrong alignment on FRigUnit_MultiFABRIK");
static_assert(sizeof(FRigUnit_MultiFABRIK) == 0x000200, "Wrong size on FRigUnit_MultiFABRIK");
static_assert(offsetof(FRigUnit_MultiFABRIK, RootBone) == 0x000160, "Member 'FRigUnit_MultiFABRIK::RootBone' has a wrong offset!");
static_assert(offsetof(FRigUnit_MultiFABRIK, Effectors) == 0x000168, "Member 'FRigUnit_MultiFABRIK::Effectors' has a wrong offset!");
static_assert(offsetof(FRigUnit_MultiFABRIK, Precision) == 0x000178, "Member 'FRigUnit_MultiFABRIK::Precision' has a wrong offset!");
static_assert(offsetof(FRigUnit_MultiFABRIK, bPropagateToChildren) == 0x00017C, "Member 'FRigUnit_MultiFABRIK::bPropagateToChildren' has a wrong offset!");
static_assert(offsetof(FRigUnit_MultiFABRIK, MaxIterations) == 0x000180, "Member 'FRigUnit_MultiFABRIK::MaxIterations' has a wrong offset!");
static_assert(offsetof(FRigUnit_MultiFABRIK, WorkData) == 0x000188, "Member 'FRigUnit_MultiFABRIK::WorkData' has a wrong offset!");
static_assert(offsetof(FRigUnit_MultiFABRIK, bIsInitialized) == 0x0001F0, "Member 'FRigUnit_MultiFABRIK::bIsInitialized' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_ChainHarmonics
// 0x02D0 (0x0430 - 0x0160)
struct FRigUnit_ChainHarmonics final : public FRigUnit_HighlevelBaseMutable
{
public:
	class FName                                   ChainRoot;                                         // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Speed;                                             // 0x0168(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigUnit_ChainHarmonics_Reach          Reach;                                             // 0x0180(0x0048)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRigUnit_ChainHarmonics_Wave           Wave;                                              // 0x01C8(0x0078)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     WaveCurve;                                         // 0x0240(0x0088)(Edit, BlueprintVisible, EditConst, NativeAccessSpecifierPublic)
	struct FRigUnit_ChainHarmonics_Pendulum       Pendulum;                                          // 0x02C8(0x0058)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bDrawDebug;                                        // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BB9[0xF];                                     // 0x0321(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             DrawWorldOffset;                                   // 0x0330(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigUnit_ChainHarmonics_WorkData       WorkData;                                          // 0x0390(0x0098)(Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BBA[0x8];                                     // 0x0428(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_ChainHarmonics) == 0x000010, "Wrong alignment on FRigUnit_ChainHarmonics");
static_assert(sizeof(FRigUnit_ChainHarmonics) == 0x000430, "Wrong size on FRigUnit_ChainHarmonics");
static_assert(offsetof(FRigUnit_ChainHarmonics, ChainRoot) == 0x000160, "Member 'FRigUnit_ChainHarmonics::ChainRoot' has a wrong offset!");
static_assert(offsetof(FRigUnit_ChainHarmonics, Speed) == 0x000168, "Member 'FRigUnit_ChainHarmonics::Speed' has a wrong offset!");
static_assert(offsetof(FRigUnit_ChainHarmonics, Reach) == 0x000180, "Member 'FRigUnit_ChainHarmonics::Reach' has a wrong offset!");
static_assert(offsetof(FRigUnit_ChainHarmonics, Wave) == 0x0001C8, "Member 'FRigUnit_ChainHarmonics::Wave' has a wrong offset!");
static_assert(offsetof(FRigUnit_ChainHarmonics, WaveCurve) == 0x000240, "Member 'FRigUnit_ChainHarmonics::WaveCurve' has a wrong offset!");
static_assert(offsetof(FRigUnit_ChainHarmonics, Pendulum) == 0x0002C8, "Member 'FRigUnit_ChainHarmonics::Pendulum' has a wrong offset!");
static_assert(offsetof(FRigUnit_ChainHarmonics, bDrawDebug) == 0x000320, "Member 'FRigUnit_ChainHarmonics::bDrawDebug' has a wrong offset!");
static_assert(offsetof(FRigUnit_ChainHarmonics, DrawWorldOffset) == 0x000330, "Member 'FRigUnit_ChainHarmonics::DrawWorldOffset' has a wrong offset!");
static_assert(offsetof(FRigUnit_ChainHarmonics, WorkData) == 0x000390, "Member 'FRigUnit_ChainHarmonics::WorkData' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_AimBone_Target
// 0x0048 (0x0048 - 0x0000)
struct FRigUnit_AimBone_Target final
{
public:
	float                                         Weight;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BBB[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Axis;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Target;                                            // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EControlRigVectorKind                         Kind;                                              // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BBC[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Space;                                             // 0x003C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BBD[0x4];                                     // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_AimBone_Target) == 0x000008, "Wrong alignment on FRigUnit_AimBone_Target");
static_assert(sizeof(FRigUnit_AimBone_Target) == 0x000048, "Wrong size on FRigUnit_AimBone_Target");
static_assert(offsetof(FRigUnit_AimBone_Target, Weight) == 0x000000, "Member 'FRigUnit_AimBone_Target::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimBone_Target, Axis) == 0x000008, "Member 'FRigUnit_AimBone_Target::Axis' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimBone_Target, Target) == 0x000020, "Member 'FRigUnit_AimBone_Target::Target' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimBone_Target, Kind) == 0x000038, "Member 'FRigUnit_AimBone_Target::Kind' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimBone_Target, Space) == 0x00003C, "Member 'FRigUnit_AimBone_Target::Space' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_AimBone
// 0x0180 (0x02E0 - 0x0160)
struct FRigUnit_AimBone final : public FRigUnit_HighlevelBaseMutable
{
public:
	class FName                                   bone;                                              // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigUnit_AimBone_Target                Primary;                                           // 0x0168(0x0048)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRigUnit_AimBone_Target                Secondary;                                         // 0x01B0(0x0048)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x01F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x01FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BBE[0x3];                                     // 0x01FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_AimBone_DebugSettings         DebugSettings;                                     // 0x0200(0x0070)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedBoneIndex;                                   // 0x0270(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      PrimaryCachedSpace;                                // 0x0290(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      SecondaryCachedSpace;                              // 0x02B0(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInitialized;                                    // 0x02D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BBF[0xF];                                     // 0x02D1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_AimBone) == 0x000010, "Wrong alignment on FRigUnit_AimBone");
static_assert(sizeof(FRigUnit_AimBone) == 0x0002E0, "Wrong size on FRigUnit_AimBone");
static_assert(offsetof(FRigUnit_AimBone, bone) == 0x000160, "Member 'FRigUnit_AimBone::bone' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimBone, Primary) == 0x000168, "Member 'FRigUnit_AimBone::Primary' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimBone, Secondary) == 0x0001B0, "Member 'FRigUnit_AimBone::Secondary' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimBone, Weight) == 0x0001F8, "Member 'FRigUnit_AimBone::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimBone, bPropagateToChildren) == 0x0001FC, "Member 'FRigUnit_AimBone::bPropagateToChildren' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimBone, DebugSettings) == 0x000200, "Member 'FRigUnit_AimBone::DebugSettings' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimBone, CachedBoneIndex) == 0x000270, "Member 'FRigUnit_AimBone::CachedBoneIndex' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimBone, PrimaryCachedSpace) == 0x000290, "Member 'FRigUnit_AimBone::PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimBone, SecondaryCachedSpace) == 0x0002B0, "Member 'FRigUnit_AimBone::SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimBone, bIsInitialized) == 0x0002D0, "Member 'FRigUnit_AimBone::bIsInitialized' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_AimConstraint_WorldUp
// 0x0028 (0x0028 - 0x0000)
struct FRigUnit_AimConstraint_WorldUp final
{
public:
	struct FVector                                Target;                                            // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EControlRigVectorKind                         Kind;                                              // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BC0[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKey                         Space;                                             // 0x001C(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_AimConstraint_WorldUp) == 0x000008, "Wrong alignment on FRigUnit_AimConstraint_WorldUp");
static_assert(sizeof(FRigUnit_AimConstraint_WorldUp) == 0x000028, "Wrong size on FRigUnit_AimConstraint_WorldUp");
static_assert(offsetof(FRigUnit_AimConstraint_WorldUp, Target) == 0x000000, "Member 'FRigUnit_AimConstraint_WorldUp::Target' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimConstraint_WorldUp, Kind) == 0x000018, "Member 'FRigUnit_AimConstraint_WorldUp::Kind' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimConstraint_WorldUp, Space) == 0x00001C, "Member 'FRigUnit_AimConstraint_WorldUp::Space' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_AimConstraintLocalSpaceOffset
// 0x0160 (0x02C0 - 0x0160)
struct FRigUnit_AimConstraintLocalSpaceOffset final : public FRigUnit_HighlevelBaseMutable
{
public:
	struct FRigElementKey                         Child;                                             // 0x0160(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMaintainOffset;                                   // 0x016C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFilterOptionPerAxis                   Filter;                                            // 0x016D(0x0003)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                AimAxis;                                           // 0x0170(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                UpAxis;                                            // 0x0188(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigUnit_AimConstraint_WorldUp         WorldUp;                                           // 0x01A0(0x0028)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FConstraintParent>              Parents;                                           // 0x01C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BC1[0x8];                                     // 0x01D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_AimConstraint_AdvancedSettings AdvancedSettings;                                  // 0x01E0(0x0080)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BC2[0x4];                                     // 0x0264(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCachedRigElement                      WorldUpSpaceCache;                                 // 0x0268(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      ChildCache;                                        // 0x0288(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCachedRigElement>              ParentCaches;                                      // 0x02A8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIsInitialized;                                    // 0x02B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BC3[0x7];                                     // 0x02B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_AimConstraintLocalSpaceOffset) == 0x000010, "Wrong alignment on FRigUnit_AimConstraintLocalSpaceOffset");
static_assert(sizeof(FRigUnit_AimConstraintLocalSpaceOffset) == 0x0002C0, "Wrong size on FRigUnit_AimConstraintLocalSpaceOffset");
static_assert(offsetof(FRigUnit_AimConstraintLocalSpaceOffset, Child) == 0x000160, "Member 'FRigUnit_AimConstraintLocalSpaceOffset::Child' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimConstraintLocalSpaceOffset, bMaintainOffset) == 0x00016C, "Member 'FRigUnit_AimConstraintLocalSpaceOffset::bMaintainOffset' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimConstraintLocalSpaceOffset, Filter) == 0x00016D, "Member 'FRigUnit_AimConstraintLocalSpaceOffset::Filter' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimConstraintLocalSpaceOffset, AimAxis) == 0x000170, "Member 'FRigUnit_AimConstraintLocalSpaceOffset::AimAxis' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimConstraintLocalSpaceOffset, UpAxis) == 0x000188, "Member 'FRigUnit_AimConstraintLocalSpaceOffset::UpAxis' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimConstraintLocalSpaceOffset, WorldUp) == 0x0001A0, "Member 'FRigUnit_AimConstraintLocalSpaceOffset::WorldUp' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimConstraintLocalSpaceOffset, Parents) == 0x0001C8, "Member 'FRigUnit_AimConstraintLocalSpaceOffset::Parents' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimConstraintLocalSpaceOffset, AdvancedSettings) == 0x0001E0, "Member 'FRigUnit_AimConstraintLocalSpaceOffset::AdvancedSettings' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimConstraintLocalSpaceOffset, Weight) == 0x000260, "Member 'FRigUnit_AimConstraintLocalSpaceOffset::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimConstraintLocalSpaceOffset, WorldUpSpaceCache) == 0x000268, "Member 'FRigUnit_AimConstraintLocalSpaceOffset::WorldUpSpaceCache' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimConstraintLocalSpaceOffset, ChildCache) == 0x000288, "Member 'FRigUnit_AimConstraintLocalSpaceOffset::ChildCache' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimConstraintLocalSpaceOffset, ParentCaches) == 0x0002A8, "Member 'FRigUnit_AimConstraintLocalSpaceOffset::ParentCaches' has a wrong offset!");
static_assert(offsetof(FRigUnit_AimConstraintLocalSpaceOffset, bIsInitialized) == 0x0002B8, "Member 'FRigUnit_AimConstraintLocalSpaceOffset::bIsInitialized' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_CCDIKPerItem
// 0x0100 (0x0260 - 0x0160)
struct FRigUnit_CCDIKPerItem final : public FRigUnit_HighlevelBaseMutable
{
public:
	struct FRigElementKeyCollection               Items;                                             // 0x0160(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             EffectorTransform;                                 // 0x0170(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Precision;                                         // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x01D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxIterations;                                     // 0x01D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStartFromTail;                                    // 0x01DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BC4[0x3];                                     // 0x01DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BaseRotationLimit;                                 // 0x01E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BC5[0x4];                                     // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigUnit_CCDIK_RotationLimitPerItem> RotationLimits;                                    // 0x01E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x01F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BC6[0x7];                                     // 0x01F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_CCDIK_WorkData                WorkData;                                          // 0x0200(0x0060)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_CCDIKPerItem) == 0x000010, "Wrong alignment on FRigUnit_CCDIKPerItem");
static_assert(sizeof(FRigUnit_CCDIKPerItem) == 0x000260, "Wrong size on FRigUnit_CCDIKPerItem");
static_assert(offsetof(FRigUnit_CCDIKPerItem, Items) == 0x000160, "Member 'FRigUnit_CCDIKPerItem::Items' has a wrong offset!");
static_assert(offsetof(FRigUnit_CCDIKPerItem, EffectorTransform) == 0x000170, "Member 'FRigUnit_CCDIKPerItem::EffectorTransform' has a wrong offset!");
static_assert(offsetof(FRigUnit_CCDIKPerItem, Precision) == 0x0001D0, "Member 'FRigUnit_CCDIKPerItem::Precision' has a wrong offset!");
static_assert(offsetof(FRigUnit_CCDIKPerItem, Weight) == 0x0001D4, "Member 'FRigUnit_CCDIKPerItem::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_CCDIKPerItem, MaxIterations) == 0x0001D8, "Member 'FRigUnit_CCDIKPerItem::MaxIterations' has a wrong offset!");
static_assert(offsetof(FRigUnit_CCDIKPerItem, bStartFromTail) == 0x0001DC, "Member 'FRigUnit_CCDIKPerItem::bStartFromTail' has a wrong offset!");
static_assert(offsetof(FRigUnit_CCDIKPerItem, BaseRotationLimit) == 0x0001E0, "Member 'FRigUnit_CCDIKPerItem::BaseRotationLimit' has a wrong offset!");
static_assert(offsetof(FRigUnit_CCDIKPerItem, RotationLimits) == 0x0001E8, "Member 'FRigUnit_CCDIKPerItem::RotationLimits' has a wrong offset!");
static_assert(offsetof(FRigUnit_CCDIKPerItem, bPropagateToChildren) == 0x0001F8, "Member 'FRigUnit_CCDIKPerItem::bPropagateToChildren' has a wrong offset!");
static_assert(offsetof(FRigUnit_CCDIKPerItem, WorkData) == 0x000200, "Member 'FRigUnit_CCDIKPerItem::WorkData' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_DistributeRotation
// 0x0080 (0x01E0 - 0x0160)
struct FRigUnit_DistributeRotation final : public FRigUnit_HighlevelBaseMutable
{
public:
	class FName                                   StartBone;                                         // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndBone;                                           // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRigUnit_DistributeRotation_Rotation> Rotations;                                         // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	ERigVMAnimEasingType                          RotationEaseType;                                  // 0x0180(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BC7[0x3];                                     // 0x0181(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Weight;                                            // 0x0184(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x0188(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BC8[0x7];                                     // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_DistributeRotation_WorkData   WorkData;                                          // 0x0190(0x0050)(Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_DistributeRotation) == 0x000010, "Wrong alignment on FRigUnit_DistributeRotation");
static_assert(sizeof(FRigUnit_DistributeRotation) == 0x0001E0, "Wrong size on FRigUnit_DistributeRotation");
static_assert(offsetof(FRigUnit_DistributeRotation, StartBone) == 0x000160, "Member 'FRigUnit_DistributeRotation::StartBone' has a wrong offset!");
static_assert(offsetof(FRigUnit_DistributeRotation, EndBone) == 0x000168, "Member 'FRigUnit_DistributeRotation::EndBone' has a wrong offset!");
static_assert(offsetof(FRigUnit_DistributeRotation, Rotations) == 0x000170, "Member 'FRigUnit_DistributeRotation::Rotations' has a wrong offset!");
static_assert(offsetof(FRigUnit_DistributeRotation, RotationEaseType) == 0x000180, "Member 'FRigUnit_DistributeRotation::RotationEaseType' has a wrong offset!");
static_assert(offsetof(FRigUnit_DistributeRotation, Weight) == 0x000184, "Member 'FRigUnit_DistributeRotation::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_DistributeRotation, bPropagateToChildren) == 0x000188, "Member 'FRigUnit_DistributeRotation::bPropagateToChildren' has a wrong offset!");
static_assert(offsetof(FRigUnit_DistributeRotation, WorkData) == 0x000190, "Member 'FRigUnit_DistributeRotation::WorkData' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_DistributeRotationForItemArray
// 0x0080 (0x01E0 - 0x0160)
struct FRigUnit_DistributeRotationForItemArray final : public FRigUnit_HighlevelBaseMutable
{
public:
	TArray<struct FRigElementKey>                 Items;                                             // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRigUnit_DistributeRotation_Rotation> Rotations;                                         // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	ERigVMAnimEasingType                          RotationEaseType;                                  // 0x0180(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BC9[0x3];                                     // 0x0181(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Weight;                                            // 0x0184(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigUnit_DistributeRotation_WorkData   WorkData;                                          // 0x0188(0x0050)(Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BCA[0x8];                                     // 0x01D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_DistributeRotationForItemArray) == 0x000010, "Wrong alignment on FRigUnit_DistributeRotationForItemArray");
static_assert(sizeof(FRigUnit_DistributeRotationForItemArray) == 0x0001E0, "Wrong size on FRigUnit_DistributeRotationForItemArray");
static_assert(offsetof(FRigUnit_DistributeRotationForItemArray, Items) == 0x000160, "Member 'FRigUnit_DistributeRotationForItemArray::Items' has a wrong offset!");
static_assert(offsetof(FRigUnit_DistributeRotationForItemArray, Rotations) == 0x000170, "Member 'FRigUnit_DistributeRotationForItemArray::Rotations' has a wrong offset!");
static_assert(offsetof(FRigUnit_DistributeRotationForItemArray, RotationEaseType) == 0x000180, "Member 'FRigUnit_DistributeRotationForItemArray::RotationEaseType' has a wrong offset!");
static_assert(offsetof(FRigUnit_DistributeRotationForItemArray, Weight) == 0x000184, "Member 'FRigUnit_DistributeRotationForItemArray::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_DistributeRotationForItemArray, WorkData) == 0x000188, "Member 'FRigUnit_DistributeRotationForItemArray::WorkData' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_FABRIK
// 0x00D0 (0x0230 - 0x0160)
struct FRigUnit_FABRIK final : public FRigUnit_HighlevelBaseMutable
{
public:
	class FName                                   StartBone;                                         // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EffectorBone;                                      // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             EffectorTransform;                                 // 0x0170(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Precision;                                         // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x01D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x01D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BCB[0x3];                                     // 0x01D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxIterations;                                     // 0x01DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigUnit_FABRIK_WorkData               WorkData;                                          // 0x01E0(0x0040)(Transient, NativeAccessSpecifierPublic)
	bool                                          bSetEffectorTransform;                             // 0x0220(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BCC[0xF];                                     // 0x0221(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_FABRIK) == 0x000010, "Wrong alignment on FRigUnit_FABRIK");
static_assert(sizeof(FRigUnit_FABRIK) == 0x000230, "Wrong size on FRigUnit_FABRIK");
static_assert(offsetof(FRigUnit_FABRIK, StartBone) == 0x000160, "Member 'FRigUnit_FABRIK::StartBone' has a wrong offset!");
static_assert(offsetof(FRigUnit_FABRIK, EffectorBone) == 0x000168, "Member 'FRigUnit_FABRIK::EffectorBone' has a wrong offset!");
static_assert(offsetof(FRigUnit_FABRIK, EffectorTransform) == 0x000170, "Member 'FRigUnit_FABRIK::EffectorTransform' has a wrong offset!");
static_assert(offsetof(FRigUnit_FABRIK, Precision) == 0x0001D0, "Member 'FRigUnit_FABRIK::Precision' has a wrong offset!");
static_assert(offsetof(FRigUnit_FABRIK, Weight) == 0x0001D4, "Member 'FRigUnit_FABRIK::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_FABRIK, bPropagateToChildren) == 0x0001D8, "Member 'FRigUnit_FABRIK::bPropagateToChildren' has a wrong offset!");
static_assert(offsetof(FRigUnit_FABRIK, MaxIterations) == 0x0001DC, "Member 'FRigUnit_FABRIK::MaxIterations' has a wrong offset!");
static_assert(offsetof(FRigUnit_FABRIK, WorkData) == 0x0001E0, "Member 'FRigUnit_FABRIK::WorkData' has a wrong offset!");
static_assert(offsetof(FRigUnit_FABRIK, bSetEffectorTransform) == 0x000220, "Member 'FRigUnit_FABRIK::bSetEffectorTransform' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_FABRIKItemArray
// 0x00D0 (0x0230 - 0x0160)
struct FRigUnit_FABRIKItemArray final : public FRigUnit_HighlevelBaseMutable
{
public:
	TArray<struct FRigElementKey>                 Items;                                             // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FTransform                             EffectorTransform;                                 // 0x0170(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Precision;                                         // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x01D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x01D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BCD[0x3];                                     // 0x01D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxIterations;                                     // 0x01DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigUnit_FABRIK_WorkData               WorkData;                                          // 0x01E0(0x0040)(Transient, NativeAccessSpecifierPublic)
	bool                                          bSetEffectorTransform;                             // 0x0220(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BCE[0xF];                                     // 0x0221(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_FABRIKItemArray) == 0x000010, "Wrong alignment on FRigUnit_FABRIKItemArray");
static_assert(sizeof(FRigUnit_FABRIKItemArray) == 0x000230, "Wrong size on FRigUnit_FABRIKItemArray");
static_assert(offsetof(FRigUnit_FABRIKItemArray, Items) == 0x000160, "Member 'FRigUnit_FABRIKItemArray::Items' has a wrong offset!");
static_assert(offsetof(FRigUnit_FABRIKItemArray, EffectorTransform) == 0x000170, "Member 'FRigUnit_FABRIKItemArray::EffectorTransform' has a wrong offset!");
static_assert(offsetof(FRigUnit_FABRIKItemArray, Precision) == 0x0001D0, "Member 'FRigUnit_FABRIKItemArray::Precision' has a wrong offset!");
static_assert(offsetof(FRigUnit_FABRIKItemArray, Weight) == 0x0001D4, "Member 'FRigUnit_FABRIKItemArray::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_FABRIKItemArray, bPropagateToChildren) == 0x0001D8, "Member 'FRigUnit_FABRIKItemArray::bPropagateToChildren' has a wrong offset!");
static_assert(offsetof(FRigUnit_FABRIKItemArray, MaxIterations) == 0x0001DC, "Member 'FRigUnit_FABRIKItemArray::MaxIterations' has a wrong offset!");
static_assert(offsetof(FRigUnit_FABRIKItemArray, WorkData) == 0x0001E0, "Member 'FRigUnit_FABRIKItemArray::WorkData' has a wrong offset!");
static_assert(offsetof(FRigUnit_FABRIKItemArray, bSetEffectorTransform) == 0x000220, "Member 'FRigUnit_FABRIKItemArray::bSetEffectorTransform' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_FitChainToCurve
// 0x0220 (0x0380 - 0x0160)
struct FRigUnit_FitChainToCurve final : public FRigUnit_HighlevelBaseMutable
{
public:
	class FName                                   StartBone;                                         // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndBone;                                           // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigVMFourPointBezier                  Bezier;                                            // 0x0170(0x0060)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EControlRigCurveAlignment                     Alignment;                                         // 0x01D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BCF[0x3];                                     // 0x01D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Minimum;                                           // 0x01D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Maximum;                                           // 0x01D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SamplingPrecision;                                 // 0x01DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PrimaryAxis;                                       // 0x01E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SecondaryAxis;                                     // 0x01F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PoleVectorPosition;                                // 0x0210(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRigUnit_FitChainToCurve_Rotation> Rotations;                                         // 0x0228(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	ERigVMAnimEasingType                          RotationEaseType;                                  // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BD0[0x3];                                     // 0x0239(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Weight;                                            // 0x023C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x0240(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BD1[0xF];                                     // 0x0241(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_FitChainToCurve_DebugSettings DebugSettings;                                     // 0x0250(0x0090)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRigUnit_FitChainToCurve_WorkData      WorkData;                                          // 0x02E0(0x0098)(Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BD2[0x8];                                     // 0x0378(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_FitChainToCurve) == 0x000010, "Wrong alignment on FRigUnit_FitChainToCurve");
static_assert(sizeof(FRigUnit_FitChainToCurve) == 0x000380, "Wrong size on FRigUnit_FitChainToCurve");
static_assert(offsetof(FRigUnit_FitChainToCurve, StartBone) == 0x000160, "Member 'FRigUnit_FitChainToCurve::StartBone' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurve, EndBone) == 0x000168, "Member 'FRigUnit_FitChainToCurve::EndBone' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurve, Bezier) == 0x000170, "Member 'FRigUnit_FitChainToCurve::Bezier' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurve, Alignment) == 0x0001D0, "Member 'FRigUnit_FitChainToCurve::Alignment' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurve, Minimum) == 0x0001D4, "Member 'FRigUnit_FitChainToCurve::Minimum' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurve, Maximum) == 0x0001D8, "Member 'FRigUnit_FitChainToCurve::Maximum' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurve, SamplingPrecision) == 0x0001DC, "Member 'FRigUnit_FitChainToCurve::SamplingPrecision' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurve, PrimaryAxis) == 0x0001E0, "Member 'FRigUnit_FitChainToCurve::PrimaryAxis' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurve, SecondaryAxis) == 0x0001F8, "Member 'FRigUnit_FitChainToCurve::SecondaryAxis' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurve, PoleVectorPosition) == 0x000210, "Member 'FRigUnit_FitChainToCurve::PoleVectorPosition' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurve, Rotations) == 0x000228, "Member 'FRigUnit_FitChainToCurve::Rotations' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurve, RotationEaseType) == 0x000238, "Member 'FRigUnit_FitChainToCurve::RotationEaseType' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurve, Weight) == 0x00023C, "Member 'FRigUnit_FitChainToCurve::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurve, bPropagateToChildren) == 0x000240, "Member 'FRigUnit_FitChainToCurve::bPropagateToChildren' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurve, DebugSettings) == 0x000250, "Member 'FRigUnit_FitChainToCurve::DebugSettings' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurve, WorkData) == 0x0002E0, "Member 'FRigUnit_FitChainToCurve::WorkData' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_FitChainToCurveItemArray
// 0x0220 (0x0380 - 0x0160)
struct FRigUnit_FitChainToCurveItemArray final : public FRigUnit_HighlevelBaseMutable
{
public:
	TArray<struct FRigElementKey>                 Items;                                             // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FRigVMFourPointBezier                  Bezier;                                            // 0x0170(0x0060)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EControlRigCurveAlignment                     Alignment;                                         // 0x01D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BD3[0x3];                                     // 0x01D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Minimum;                                           // 0x01D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Maximum;                                           // 0x01D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SamplingPrecision;                                 // 0x01DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PrimaryAxis;                                       // 0x01E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SecondaryAxis;                                     // 0x01F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PoleVectorPosition;                                // 0x0210(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRigUnit_FitChainToCurve_Rotation> Rotations;                                         // 0x0228(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	ERigVMAnimEasingType                          RotationEaseType;                                  // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BD4[0x3];                                     // 0x0239(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Weight;                                            // 0x023C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x0240(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BD5[0xF];                                     // 0x0241(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_FitChainToCurve_DebugSettings DebugSettings;                                     // 0x0250(0x0090)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRigUnit_FitChainToCurve_WorkData      WorkData;                                          // 0x02E0(0x0098)(Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BD6[0x8];                                     // 0x0378(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_FitChainToCurveItemArray) == 0x000010, "Wrong alignment on FRigUnit_FitChainToCurveItemArray");
static_assert(sizeof(FRigUnit_FitChainToCurveItemArray) == 0x000380, "Wrong size on FRigUnit_FitChainToCurveItemArray");
static_assert(offsetof(FRigUnit_FitChainToCurveItemArray, Items) == 0x000160, "Member 'FRigUnit_FitChainToCurveItemArray::Items' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurveItemArray, Bezier) == 0x000170, "Member 'FRigUnit_FitChainToCurveItemArray::Bezier' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurveItemArray, Alignment) == 0x0001D0, "Member 'FRigUnit_FitChainToCurveItemArray::Alignment' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurveItemArray, Minimum) == 0x0001D4, "Member 'FRigUnit_FitChainToCurveItemArray::Minimum' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurveItemArray, Maximum) == 0x0001D8, "Member 'FRigUnit_FitChainToCurveItemArray::Maximum' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurveItemArray, SamplingPrecision) == 0x0001DC, "Member 'FRigUnit_FitChainToCurveItemArray::SamplingPrecision' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurveItemArray, PrimaryAxis) == 0x0001E0, "Member 'FRigUnit_FitChainToCurveItemArray::PrimaryAxis' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurveItemArray, SecondaryAxis) == 0x0001F8, "Member 'FRigUnit_FitChainToCurveItemArray::SecondaryAxis' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurveItemArray, PoleVectorPosition) == 0x000210, "Member 'FRigUnit_FitChainToCurveItemArray::PoleVectorPosition' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurveItemArray, Rotations) == 0x000228, "Member 'FRigUnit_FitChainToCurveItemArray::Rotations' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurveItemArray, RotationEaseType) == 0x000238, "Member 'FRigUnit_FitChainToCurveItemArray::RotationEaseType' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurveItemArray, Weight) == 0x00023C, "Member 'FRigUnit_FitChainToCurveItemArray::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurveItemArray, bPropagateToChildren) == 0x000240, "Member 'FRigUnit_FitChainToCurveItemArray::bPropagateToChildren' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurveItemArray, DebugSettings) == 0x000250, "Member 'FRigUnit_FitChainToCurveItemArray::DebugSettings' has a wrong offset!");
static_assert(offsetof(FRigUnit_FitChainToCurveItemArray, WorkData) == 0x0002E0, "Member 'FRigUnit_FitChainToCurveItemArray::WorkData' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_ModifyBoneTransforms
// 0x0030 (0x0190 - 0x0160)
struct FRigUnit_ModifyBoneTransforms final : public FRigUnit_HighlevelBaseMutable
{
public:
	TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> BoneToModify;                                      // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeightMinimum;                                     // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeightMaximum;                                     // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EControlRigModifyBoneMode                     Mode;                                              // 0x017C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BD7[0x3];                                     // 0x017D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_ModifyBoneTransforms_WorkData WorkData;                                          // 0x0180(0x0010)(Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_ModifyBoneTransforms) == 0x000010, "Wrong alignment on FRigUnit_ModifyBoneTransforms");
static_assert(sizeof(FRigUnit_ModifyBoneTransforms) == 0x000190, "Wrong size on FRigUnit_ModifyBoneTransforms");
static_assert(offsetof(FRigUnit_ModifyBoneTransforms, BoneToModify) == 0x000160, "Member 'FRigUnit_ModifyBoneTransforms::BoneToModify' has a wrong offset!");
static_assert(offsetof(FRigUnit_ModifyBoneTransforms, Weight) == 0x000170, "Member 'FRigUnit_ModifyBoneTransforms::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_ModifyBoneTransforms, WeightMinimum) == 0x000174, "Member 'FRigUnit_ModifyBoneTransforms::WeightMinimum' has a wrong offset!");
static_assert(offsetof(FRigUnit_ModifyBoneTransforms, WeightMaximum) == 0x000178, "Member 'FRigUnit_ModifyBoneTransforms::WeightMaximum' has a wrong offset!");
static_assert(offsetof(FRigUnit_ModifyBoneTransforms, Mode) == 0x00017C, "Member 'FRigUnit_ModifyBoneTransforms::Mode' has a wrong offset!");
static_assert(offsetof(FRigUnit_ModifyBoneTransforms, WorkData) == 0x000180, "Member 'FRigUnit_ModifyBoneTransforms::WorkData' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_ModifyTransforms
// 0x0030 (0x0190 - 0x0160)
struct FRigUnit_ModifyTransforms final : public FRigUnit_HighlevelBaseMutable
{
public:
	TArray<struct FRigUnit_ModifyTransforms_PerItem> ItemToModify;                                      // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeightMinimum;                                     // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeightMaximum;                                     // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EControlRigModifyBoneMode                     Mode;                                              // 0x017C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BD8[0x3];                                     // 0x017D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_ModifyTransforms_WorkData     WorkData;                                          // 0x0180(0x0010)(Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_ModifyTransforms) == 0x000010, "Wrong alignment on FRigUnit_ModifyTransforms");
static_assert(sizeof(FRigUnit_ModifyTransforms) == 0x000190, "Wrong size on FRigUnit_ModifyTransforms");
static_assert(offsetof(FRigUnit_ModifyTransforms, ItemToModify) == 0x000160, "Member 'FRigUnit_ModifyTransforms::ItemToModify' has a wrong offset!");
static_assert(offsetof(FRigUnit_ModifyTransforms, Weight) == 0x000170, "Member 'FRigUnit_ModifyTransforms::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_ModifyTransforms, WeightMinimum) == 0x000174, "Member 'FRigUnit_ModifyTransforms::WeightMinimum' has a wrong offset!");
static_assert(offsetof(FRigUnit_ModifyTransforms, WeightMaximum) == 0x000178, "Member 'FRigUnit_ModifyTransforms::WeightMaximum' has a wrong offset!");
static_assert(offsetof(FRigUnit_ModifyTransforms, Mode) == 0x00017C, "Member 'FRigUnit_ModifyTransforms::Mode' has a wrong offset!");
static_assert(offsetof(FRigUnit_ModifyTransforms, WorkData) == 0x000180, "Member 'FRigUnit_ModifyTransforms::WorkData' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SlideChainPerItem
// 0x0060 (0x01C0 - 0x0160)
struct FRigUnit_SlideChainPerItem final : public FRigUnit_HighlevelBaseMutable
{
public:
	struct FRigElementKeyCollection               Items;                                             // 0x0160(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlideAmount;                                       // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x0174(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BD9[0x3];                                     // 0x0175(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_SlideChain_WorkData           WorkData;                                          // 0x0178(0x0048)(Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_SlideChainPerItem) == 0x000010, "Wrong alignment on FRigUnit_SlideChainPerItem");
static_assert(sizeof(FRigUnit_SlideChainPerItem) == 0x0001C0, "Wrong size on FRigUnit_SlideChainPerItem");
static_assert(offsetof(FRigUnit_SlideChainPerItem, Items) == 0x000160, "Member 'FRigUnit_SlideChainPerItem::Items' has a wrong offset!");
static_assert(offsetof(FRigUnit_SlideChainPerItem, SlideAmount) == 0x000170, "Member 'FRigUnit_SlideChainPerItem::SlideAmount' has a wrong offset!");
static_assert(offsetof(FRigUnit_SlideChainPerItem, bPropagateToChildren) == 0x000174, "Member 'FRigUnit_SlideChainPerItem::bPropagateToChildren' has a wrong offset!");
static_assert(offsetof(FRigUnit_SlideChainPerItem, WorkData) == 0x000178, "Member 'FRigUnit_SlideChainPerItem::WorkData' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SpringIK_DebugSettings
// 0x0080 (0x0080 - 0x0000)
struct FRigUnit_SpringIK_DebugSettings final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BDA[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Scale;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BDB[0x8];                                     // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             WorldOffset;                                       // 0x0020(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_SpringIK_DebugSettings) == 0x000010, "Wrong alignment on FRigUnit_SpringIK_DebugSettings");
static_assert(sizeof(FRigUnit_SpringIK_DebugSettings) == 0x000080, "Wrong size on FRigUnit_SpringIK_DebugSettings");
static_assert(offsetof(FRigUnit_SpringIK_DebugSettings, bEnabled) == 0x000000, "Member 'FRigUnit_SpringIK_DebugSettings::bEnabled' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringIK_DebugSettings, Scale) == 0x000004, "Member 'FRigUnit_SpringIK_DebugSettings::Scale' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringIK_DebugSettings, Color) == 0x000008, "Member 'FRigUnit_SpringIK_DebugSettings::Color' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringIK_DebugSettings, WorldOffset) == 0x000020, "Member 'FRigUnit_SpringIK_DebugSettings::WorldOffset' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SpringIK
// 0x01D0 (0x0330 - 0x0160)
struct FRigUnit_SpringIK final : public FRigUnit_HighlevelBaseMutable
{
public:
	class FName                                   StartBone;                                         // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndBone;                                           // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HierarchyStrength;                                 // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectorStrength;                                  // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectorRatio;                                     // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RootStrength;                                      // 0x017C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RootRatio;                                         // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damping;                                           // 0x0184(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PoleVector;                                        // 0x0188(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlipPolePlane;                                    // 0x01A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EControlRigVectorKind                         PoleVectorKind;                                    // 0x01A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BDC[0x2];                                     // 0x01A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PoleVectorSpace;                                   // 0x01A4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BDD[0x4];                                     // 0x01AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PrimaryAxis;                                       // 0x01B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SecondaryAxis;                                     // 0x01C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLiveSimulation;                                   // 0x01E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BDE[0x3];                                     // 0x01E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Iterations;                                        // 0x01E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLimitLocalPosition;                               // 0x01E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x01E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BDF[0x6];                                     // 0x01EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_SpringIK_DebugSettings        DebugSettings;                                     // 0x01F0(0x0080)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRigUnit_SpringIK_WorkData             WorkData;                                          // 0x0270(0x00B8)(Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BE0[0x8];                                     // 0x0328(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_SpringIK) == 0x000010, "Wrong alignment on FRigUnit_SpringIK");
static_assert(sizeof(FRigUnit_SpringIK) == 0x000330, "Wrong size on FRigUnit_SpringIK");
static_assert(offsetof(FRigUnit_SpringIK, StartBone) == 0x000160, "Member 'FRigUnit_SpringIK::StartBone' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringIK, EndBone) == 0x000168, "Member 'FRigUnit_SpringIK::EndBone' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringIK, HierarchyStrength) == 0x000170, "Member 'FRigUnit_SpringIK::HierarchyStrength' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringIK, EffectorStrength) == 0x000174, "Member 'FRigUnit_SpringIK::EffectorStrength' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringIK, EffectorRatio) == 0x000178, "Member 'FRigUnit_SpringIK::EffectorRatio' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringIK, RootStrength) == 0x00017C, "Member 'FRigUnit_SpringIK::RootStrength' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringIK, RootRatio) == 0x000180, "Member 'FRigUnit_SpringIK::RootRatio' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringIK, Damping) == 0x000184, "Member 'FRigUnit_SpringIK::Damping' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringIK, PoleVector) == 0x000188, "Member 'FRigUnit_SpringIK::PoleVector' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringIK, bFlipPolePlane) == 0x0001A0, "Member 'FRigUnit_SpringIK::bFlipPolePlane' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringIK, PoleVectorKind) == 0x0001A1, "Member 'FRigUnit_SpringIK::PoleVectorKind' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringIK, PoleVectorSpace) == 0x0001A4, "Member 'FRigUnit_SpringIK::PoleVectorSpace' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringIK, PrimaryAxis) == 0x0001B0, "Member 'FRigUnit_SpringIK::PrimaryAxis' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringIK, SecondaryAxis) == 0x0001C8, "Member 'FRigUnit_SpringIK::SecondaryAxis' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringIK, bLiveSimulation) == 0x0001E0, "Member 'FRigUnit_SpringIK::bLiveSimulation' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringIK, Iterations) == 0x0001E4, "Member 'FRigUnit_SpringIK::Iterations' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringIK, bLimitLocalPosition) == 0x0001E8, "Member 'FRigUnit_SpringIK::bLimitLocalPosition' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringIK, bPropagateToChildren) == 0x0001E9, "Member 'FRigUnit_SpringIK::bPropagateToChildren' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringIK, DebugSettings) == 0x0001F0, "Member 'FRigUnit_SpringIK::DebugSettings' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringIK, WorkData) == 0x000270, "Member 'FRigUnit_SpringIK::WorkData' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_ParentConstraint
// 0x0060 (0x01C0 - 0x0160)
struct FRigUnit_ParentConstraint final : public FRigUnit_HighlevelBaseMutable
{
public:
	struct FRigElementKey                         Child;                                             // 0x0160(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMaintainOffset;                                   // 0x016C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransformFilter                       Filter;                                            // 0x016D(0x0009)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BE1[0x2];                                     // 0x0176(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FConstraintParent>              Parents;                                           // 0x0178(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FRigUnit_ParentConstraint_AdvancedSettings AdvancedSettings;                                  // 0x0188(0x0002)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BE2[0x2];                                     // 0x018A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Weight;                                            // 0x018C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      ChildCache;                                        // 0x0190(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCachedRigElement>              ParentCaches;                                      // 0x01B0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_ParentConstraint) == 0x000010, "Wrong alignment on FRigUnit_ParentConstraint");
static_assert(sizeof(FRigUnit_ParentConstraint) == 0x0001C0, "Wrong size on FRigUnit_ParentConstraint");
static_assert(offsetof(FRigUnit_ParentConstraint, Child) == 0x000160, "Member 'FRigUnit_ParentConstraint::Child' has a wrong offset!");
static_assert(offsetof(FRigUnit_ParentConstraint, bMaintainOffset) == 0x00016C, "Member 'FRigUnit_ParentConstraint::bMaintainOffset' has a wrong offset!");
static_assert(offsetof(FRigUnit_ParentConstraint, Filter) == 0x00016D, "Member 'FRigUnit_ParentConstraint::Filter' has a wrong offset!");
static_assert(offsetof(FRigUnit_ParentConstraint, Parents) == 0x000178, "Member 'FRigUnit_ParentConstraint::Parents' has a wrong offset!");
static_assert(offsetof(FRigUnit_ParentConstraint, AdvancedSettings) == 0x000188, "Member 'FRigUnit_ParentConstraint::AdvancedSettings' has a wrong offset!");
static_assert(offsetof(FRigUnit_ParentConstraint, Weight) == 0x00018C, "Member 'FRigUnit_ParentConstraint::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_ParentConstraint, ChildCache) == 0x000190, "Member 'FRigUnit_ParentConstraint::ChildCache' has a wrong offset!");
static_assert(offsetof(FRigUnit_ParentConstraint, ParentCaches) == 0x0001B0, "Member 'FRigUnit_ParentConstraint::ParentCaches' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_RotationConstraint
// 0x0030 (0x0190 - 0x0160)
struct FRigUnit_RotationConstraint final : public FRigUnit_HighlevelBaseMutable
{
public:
	struct FRigElementKey                         Child;                                             // 0x0160(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMaintainOffset;                                   // 0x016C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFilterOptionPerAxis                   Filter;                                            // 0x016D(0x0003)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FConstraintParent>              Parents;                                           // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FRigUnit_RotationConstraint_AdvancedSettings AdvancedSettings;                                  // 0x0180(0x0002)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BE3[0x2];                                     // 0x0182(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Weight;                                            // 0x0184(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BE4[0x8];                                     // 0x0188(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_RotationConstraint) == 0x000010, "Wrong alignment on FRigUnit_RotationConstraint");
static_assert(sizeof(FRigUnit_RotationConstraint) == 0x000190, "Wrong size on FRigUnit_RotationConstraint");
static_assert(offsetof(FRigUnit_RotationConstraint, Child) == 0x000160, "Member 'FRigUnit_RotationConstraint::Child' has a wrong offset!");
static_assert(offsetof(FRigUnit_RotationConstraint, bMaintainOffset) == 0x00016C, "Member 'FRigUnit_RotationConstraint::bMaintainOffset' has a wrong offset!");
static_assert(offsetof(FRigUnit_RotationConstraint, Filter) == 0x00016D, "Member 'FRigUnit_RotationConstraint::Filter' has a wrong offset!");
static_assert(offsetof(FRigUnit_RotationConstraint, Parents) == 0x000170, "Member 'FRigUnit_RotationConstraint::Parents' has a wrong offset!");
static_assert(offsetof(FRigUnit_RotationConstraint, AdvancedSettings) == 0x000180, "Member 'FRigUnit_RotationConstraint::AdvancedSettings' has a wrong offset!");
static_assert(offsetof(FRigUnit_RotationConstraint, Weight) == 0x000184, "Member 'FRigUnit_RotationConstraint::Weight' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_TwistBonesPerItem
// 0x0080 (0x01E0 - 0x0160)
struct FRigUnit_TwistBonesPerItem final : public FRigUnit_HighlevelBaseMutable
{
public:
	struct FRigElementKeyCollection               Items;                                             // 0x0160(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TwistAxis;                                         // 0x0170(0x0018)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PoleAxis;                                          // 0x0188(0x0018)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigVMAnimEasingType                          TwistEaseType;                                     // 0x01A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BE5[0x3];                                     // 0x01A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Weight;                                            // 0x01A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x01A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BE6[0x7];                                     // 0x01A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_TwistBones_WorkData           WorkData;                                          // 0x01B0(0x0030)(Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_TwistBonesPerItem) == 0x000010, "Wrong alignment on FRigUnit_TwistBonesPerItem");
static_assert(sizeof(FRigUnit_TwistBonesPerItem) == 0x0001E0, "Wrong size on FRigUnit_TwistBonesPerItem");
static_assert(offsetof(FRigUnit_TwistBonesPerItem, Items) == 0x000160, "Member 'FRigUnit_TwistBonesPerItem::Items' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwistBonesPerItem, TwistAxis) == 0x000170, "Member 'FRigUnit_TwistBonesPerItem::TwistAxis' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwistBonesPerItem, PoleAxis) == 0x000188, "Member 'FRigUnit_TwistBonesPerItem::PoleAxis' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwistBonesPerItem, TwistEaseType) == 0x0001A0, "Member 'FRigUnit_TwistBonesPerItem::TwistEaseType' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwistBonesPerItem, Weight) == 0x0001A4, "Member 'FRigUnit_TwistBonesPerItem::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwistBonesPerItem, bPropagateToChildren) == 0x0001A8, "Member 'FRigUnit_TwistBonesPerItem::bPropagateToChildren' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwistBonesPerItem, WorkData) == 0x0001B0, "Member 'FRigUnit_TwistBonesPerItem::WorkData' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_TwoBoneIKSimple
// 0x01F0 (0x0350 - 0x0160)
struct FRigUnit_TwoBoneIKSimple final : public FRigUnit_HighlevelBaseMutable
{
public:
	class FName                                   BoneA;                                             // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneB;                                             // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EffectorBone;                                      // 0x0170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BE7[0x8];                                     // 0x0178(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Effector;                                          // 0x0180(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PrimaryAxis;                                       // 0x01E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SecondaryAxis;                                     // 0x01F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondaryAxisWeight;                               // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BE8[0x4];                                     // 0x0214(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PoleVector;                                        // 0x0218(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EControlRigVectorKind                         PoleVectorKind;                                    // 0x0230(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BE9[0x3];                                     // 0x0231(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PoleVectorSpace;                                   // 0x0234(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableStretch;                                    // 0x023C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BEA[0x3];                                     // 0x023D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StretchStartRatio;                                 // 0x0240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StretchMaximumRatio;                               // 0x0244(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoneALength;                                       // 0x024C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoneBLength;                                       // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x0254(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BEB[0xB];                                     // 0x0255(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_TwoBoneIKSimple_DebugSettings DebugSettings;                                     // 0x0260(0x0070)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedBoneAIndex;                                  // 0x02D0(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedBoneBIndex;                                  // 0x02F0(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedEffectorBoneIndex;                           // 0x0310(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedPoleVectorSpaceIndex;                        // 0x0330(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_TwoBoneIKSimple) == 0x000010, "Wrong alignment on FRigUnit_TwoBoneIKSimple");
static_assert(sizeof(FRigUnit_TwoBoneIKSimple) == 0x000350, "Wrong size on FRigUnit_TwoBoneIKSimple");
static_assert(offsetof(FRigUnit_TwoBoneIKSimple, BoneA) == 0x000160, "Member 'FRigUnit_TwoBoneIKSimple::BoneA' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimple, BoneB) == 0x000168, "Member 'FRigUnit_TwoBoneIKSimple::BoneB' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimple, EffectorBone) == 0x000170, "Member 'FRigUnit_TwoBoneIKSimple::EffectorBone' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimple, Effector) == 0x000180, "Member 'FRigUnit_TwoBoneIKSimple::Effector' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimple, PrimaryAxis) == 0x0001E0, "Member 'FRigUnit_TwoBoneIKSimple::PrimaryAxis' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimple, SecondaryAxis) == 0x0001F8, "Member 'FRigUnit_TwoBoneIKSimple::SecondaryAxis' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimple, SecondaryAxisWeight) == 0x000210, "Member 'FRigUnit_TwoBoneIKSimple::SecondaryAxisWeight' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimple, PoleVector) == 0x000218, "Member 'FRigUnit_TwoBoneIKSimple::PoleVector' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimple, PoleVectorKind) == 0x000230, "Member 'FRigUnit_TwoBoneIKSimple::PoleVectorKind' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimple, PoleVectorSpace) == 0x000234, "Member 'FRigUnit_TwoBoneIKSimple::PoleVectorSpace' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimple, bEnableStretch) == 0x00023C, "Member 'FRigUnit_TwoBoneIKSimple::bEnableStretch' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimple, StretchStartRatio) == 0x000240, "Member 'FRigUnit_TwoBoneIKSimple::StretchStartRatio' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimple, StretchMaximumRatio) == 0x000244, "Member 'FRigUnit_TwoBoneIKSimple::StretchMaximumRatio' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimple, Weight) == 0x000248, "Member 'FRigUnit_TwoBoneIKSimple::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimple, BoneALength) == 0x00024C, "Member 'FRigUnit_TwoBoneIKSimple::BoneALength' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimple, BoneBLength) == 0x000250, "Member 'FRigUnit_TwoBoneIKSimple::BoneBLength' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimple, bPropagateToChildren) == 0x000254, "Member 'FRigUnit_TwoBoneIKSimple::bPropagateToChildren' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimple, DebugSettings) == 0x000260, "Member 'FRigUnit_TwoBoneIKSimple::DebugSettings' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimple, CachedBoneAIndex) == 0x0002D0, "Member 'FRigUnit_TwoBoneIKSimple::CachedBoneAIndex' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimple, CachedBoneBIndex) == 0x0002F0, "Member 'FRigUnit_TwoBoneIKSimple::CachedBoneBIndex' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimple, CachedEffectorBoneIndex) == 0x000310, "Member 'FRigUnit_TwoBoneIKSimple::CachedEffectorBoneIndex' has a wrong offset!");
static_assert(offsetof(FRigUnit_TwoBoneIKSimple, CachedPoleVectorSpaceIndex) == 0x000330, "Member 'FRigUnit_TwoBoneIKSimple::CachedPoleVectorSpaceIndex' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SpringInterp
// 0x0028 (0x0030 - 0x0008)
struct FRigUnit_SpringInterp final : public FRigVMFunction_SimBase
{
public:
	float                                         Current;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Target;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Stiffness;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CriticalDamping;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mass;                                              // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Result;                                            // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatSpringState                      SpringState;                                       // 0x0020(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BEC[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_SpringInterp) == 0x000008, "Wrong alignment on FRigUnit_SpringInterp");
static_assert(sizeof(FRigUnit_SpringInterp) == 0x000030, "Wrong size on FRigUnit_SpringInterp");
static_assert(offsetof(FRigUnit_SpringInterp, Current) == 0x000008, "Member 'FRigUnit_SpringInterp::Current' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringInterp, Target) == 0x00000C, "Member 'FRigUnit_SpringInterp::Target' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringInterp, Stiffness) == 0x000010, "Member 'FRigUnit_SpringInterp::Stiffness' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringInterp, CriticalDamping) == 0x000014, "Member 'FRigUnit_SpringInterp::CriticalDamping' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringInterp, Mass) == 0x000018, "Member 'FRigUnit_SpringInterp::Mass' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringInterp, Result) == 0x00001C, "Member 'FRigUnit_SpringInterp::Result' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringInterp, SpringState) == 0x000020, "Member 'FRigUnit_SpringInterp::SpringState' has a wrong offset!");

// ScriptStruct ControlRig.RigUnit_SpringInterpV2
// 0x0038 (0x0040 - 0x0008)
struct FRigUnit_SpringInterpV2 final : public FRigVMFunction_SimBase
{
public:
	float                                         Target;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Strength;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CriticalDamping;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Force;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCurrentInput;                                  // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BED[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Current;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetVelocityAmount;                              // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitializeFromTarget;                             // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BEE[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Result;                                            // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Velocity;                                          // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SimulatedResult;                                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatSpringState                      SpringState;                                       // 0x0034(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_SpringInterpV2) == 0x000008, "Wrong alignment on FRigUnit_SpringInterpV2");
static_assert(sizeof(FRigUnit_SpringInterpV2) == 0x000040, "Wrong size on FRigUnit_SpringInterpV2");
static_assert(offsetof(FRigUnit_SpringInterpV2, Target) == 0x000008, "Member 'FRigUnit_SpringInterpV2::Target' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringInterpV2, Strength) == 0x00000C, "Member 'FRigUnit_SpringInterpV2::Strength' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringInterpV2, CriticalDamping) == 0x000010, "Member 'FRigUnit_SpringInterpV2::CriticalDamping' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringInterpV2, Force) == 0x000014, "Member 'FRigUnit_SpringInterpV2::Force' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringInterpV2, bUseCurrentInput) == 0x000018, "Member 'FRigUnit_SpringInterpV2::bUseCurrentInput' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringInterpV2, Current) == 0x00001C, "Member 'FRigUnit_SpringInterpV2::Current' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringInterpV2, TargetVelocityAmount) == 0x000020, "Member 'FRigUnit_SpringInterpV2::TargetVelocityAmount' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringInterpV2, bInitializeFromTarget) == 0x000024, "Member 'FRigUnit_SpringInterpV2::bInitializeFromTarget' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringInterpV2, Result) == 0x000028, "Member 'FRigUnit_SpringInterpV2::Result' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringInterpV2, Velocity) == 0x00002C, "Member 'FRigUnit_SpringInterpV2::Velocity' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringInterpV2, SimulatedResult) == 0x000030, "Member 'FRigUnit_SpringInterpV2::SimulatedResult' has a wrong offset!");
static_assert(offsetof(FRigUnit_SpringInterpV2, SpringState) == 0x000034, "Member 'FRigUnit_SpringInterpV2::SpringState' has a wrong offset!");

}

