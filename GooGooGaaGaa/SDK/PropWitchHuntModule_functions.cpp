#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PropWitchHuntModule

#include "Basic.hpp"

#include "PropWitchHuntModule_classes.hpp"
#include "PropWitchHuntModule_parameters.hpp"


namespace SDK
{

// Function PropWitchHuntModule.BaseManager.Initialize
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UGameInstance*                    InGameInstance                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBaseManager::Initialize(class UGameInstance* InGameInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseManager", "Initialize");

	Params::BaseManager_Initialize Parms{};

	Parms.InGameInstance = InGameInstance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.BaseSkill.ActivateMulti
// (Net, NetReliable, Native, Event, NetMulticast, Public)

void UBaseSkill::ActivateMulti()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseSkill", "ActivateMulti");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.BaseSkill.ActivateServer
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void UBaseSkill::ActivateServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseSkill", "ActivateServer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.BaseSkill.CanActivate
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBaseSkill::CanActivate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseSkill", "CanActivate");

	Params::BaseSkill_CanActivate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.BaseSkill.HandleSkillActivated
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UBaseSkill::HandleSkillActivated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseSkill", "HandleSkillActivated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.BaseSkill.OnActivateSkillClient
// (Event, Public, BlueprintEvent)

void UBaseSkill::OnActivateSkillClient()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseSkill", "OnActivateSkillClient");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PropWitchHuntModule.BaseSkill.OnActivateSkillMulti
// (Event, Public, BlueprintEvent)

void UBaseSkill::OnActivateSkillMulti()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseSkill", "OnActivateSkillMulti");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PropWitchHuntModule.BaseSkill.OnActivateSkillServer
// (Event, Public, BlueprintEvent)

void UBaseSkill::OnActivateSkillServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseSkill", "OnActivateSkillServer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PropWitchHuntModule.BaseSkill.OnCasterDie
// (Event, Public, BlueprintEvent)

void UBaseSkill::OnCasterDie()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseSkill", "OnCasterDie");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PropWitchHuntModule.BaseSkill.OnSkillDownMulti
// (Event, Public, BlueprintEvent)

void UBaseSkill::OnSkillDownMulti()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseSkill", "OnSkillDownMulti");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PropWitchHuntModule.BaseSkill.OnSkillPressClient
// (Event, Public, BlueprintEvent)

void UBaseSkill::OnSkillPressClient()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseSkill", "OnSkillPressClient");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PropWitchHuntModule.BaseSkill.OnSkillPressServer
// (Event, Public, BlueprintEvent)

void UBaseSkill::OnSkillPressServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseSkill", "OnSkillPressServer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PropWitchHuntModule.BaseSkill.OnSkillReleaseClient
// (Event, Public, BlueprintEvent)

void UBaseSkill::OnSkillReleaseClient()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseSkill", "OnSkillReleaseClient");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PropWitchHuntModule.BaseSkill.OnSkillReleaseServer
// (Event, Public, BlueprintEvent)

void UBaseSkill::OnSkillReleaseServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseSkill", "OnSkillReleaseServer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PropWitchHuntModule.BaseSkill.OnSkillUpMulti
// (Event, Public, BlueprintEvent)

void UBaseSkill::OnSkillUpMulti()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseSkill", "OnSkillUpMulti");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PropWitchHuntModule.BaseSkill.Press
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UBaseSkill::Press()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseSkill", "Press");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.BaseSkill.PressMulti
// (Net, NetReliable, Native, Event, NetMulticast, Public)

void UBaseSkill::PressMulti()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseSkill", "PressMulti");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.BaseSkill.PressServer
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void UBaseSkill::PressServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseSkill", "PressServer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.BaseSkill.Release
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UBaseSkill::Release()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseSkill", "Release");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.BaseSkill.ReleaseMulti
// (Net, NetReliable, Native, Event, NetMulticast, Public)

void UBaseSkill::ReleaseMulti()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseSkill", "ReleaseMulti");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.BaseSkill.ReleaseServer
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void UBaseSkill::ReleaseServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseSkill", "ReleaseServer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.BaseSkill.SetCurrentCooldown
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewCooldown                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBaseSkill::SetCurrentCooldown(float NewCooldown)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseSkill", "SetCurrentCooldown");

	Params::BaseSkill_SetCurrentCooldown Parms{};

	Parms.NewCooldown = NewCooldown;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.BaseSkill.SetCurrentCooldownClient
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// float                                   NewCooldown                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBaseSkill::SetCurrentCooldownClient(float NewCooldown)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseSkill", "SetCurrentCooldownClient");

	Params::BaseSkill_SetCurrentCooldownClient Parms{};

	Parms.NewCooldown = NewCooldown;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.BaseSkill.SetCurrentCooldownServer
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// float                                   NewCooldown                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBaseSkill::SetCurrentCooldownServer(float NewCooldown)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseSkill", "SetCurrentCooldownServer");

	Params::BaseSkill_SetCurrentCooldownServer Parms{};

	Parms.NewCooldown = NewCooldown;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.BaseSkill.TryActivateClient
// (Final, Native, Public)

void UBaseSkill::TryActivateClient()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseSkill", "TryActivateClient");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.BaseSkill.TryActivateServer
// (Final, Native, Public)

void UBaseSkill::TryActivateServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseSkill", "TryActivateServer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.BeaconHostManagerActor.GetBeaconHost
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AWitchItBeaconHostObject*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AWitchItBeaconHostObject* ABeaconHostManagerActor::GetBeaconHost()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BeaconHostManagerActor", "GetBeaconHost");

	Params::BeaconHostManagerActor_GetBeaconHost Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.BeaconHostManagerActor.InitializeBeaconHost
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABeaconHostManagerActor::InitializeBeaconHost()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BeaconHostManagerActor", "InitializeBeaconHost");

	Params::BeaconHostManagerActor_InitializeBeaconHost Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.BeaconSubsystem.ConnectToHost
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           HostAddress                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AWitchItBeaconClient*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AWitchItBeaconClient* UBeaconSubsystem::ConnectToHost(const class FString& HostAddress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BeaconSubsystem", "ConnectToHost");

	Params::BeaconSubsystem_ConnectToHost Parms{};

	Parms.HostAddress = std::move(HostAddress);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.BeaconSubsystem.DestroyHostingBeacon
// (Final, Native, Public, BlueprintCallable)

void UBeaconSubsystem::DestroyHostingBeacon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BeaconSubsystem", "DestroyHostingBeacon");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.BeaconSubsystem.DisconnectAllClients
// (Final, Native, Public, BlueprintCallable)

void UBeaconSubsystem::DisconnectAllClients()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BeaconSubsystem", "DisconnectAllClients");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.BeaconSubsystem.StartHostingBeacon
// (Final, Native, Public, BlueprintCallable)

void UBeaconSubsystem::StartHostingBeacon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BeaconSubsystem", "StartHostingBeacon");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.BitmaskLibrary.ClearBit
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Pos                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBitmaskLibrary::ClearBit(int32 Value, int32 Pos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BitmaskLibrary", "ClearBit");

	Params::BitmaskLibrary_ClearBit Parms{};

	Parms.Value = Value;
	Parms.Pos = Pos;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.BitmaskLibrary.IsBitSet
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Pos                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBitmaskLibrary::IsBitSet(int32 Value, int32 Pos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BitmaskLibrary", "IsBitSet");

	Params::BitmaskLibrary_IsBitSet Parms{};

	Parms.Value = Value;
	Parms.Pos = Pos;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.BitmaskLibrary.LeftShift
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   BaseValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Shift                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBitmaskLibrary::LeftShift(int32 BaseValue, int32 Shift)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BitmaskLibrary", "LeftShift");

	Params::BitmaskLibrary_LeftShift Parms{};

	Parms.BaseValue = BaseValue;
	Parms.Shift = Shift;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.BitmaskLibrary.RightShift
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   BaseValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Shift                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBitmaskLibrary::RightShift(int32 BaseValue, int32 Shift)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BitmaskLibrary", "RightShift");

	Params::BitmaskLibrary_RightShift Parms{};

	Parms.BaseValue = BaseValue;
	Parms.Shift = Shift;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.BitmaskLibrary.SetBit
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Pos                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBitmaskLibrary::SetBit(int32 Value, int32 Pos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BitmaskLibrary", "SetBit");

	Params::BitmaskLibrary_SetBit Parms{};

	Parms.Value = Value;
	Parms.Pos = Pos;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.BitmaskLibrary.ToggleBit
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Pos                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBitmaskLibrary::ToggleBit(int32 Value, int32 Pos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BitmaskLibrary", "ToggleBit");

	Params::BitmaskLibrary_ToggleBit Parms{};

	Parms.Value = Value;
	Parms.Pos = Pos;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.BpAudioSettingsLibrary.LoadSoundVolumes
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   Master                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Sound                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Music                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Ambient                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   UserInterface                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VoiceChat                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBpAudioSettingsLibrary::LoadSoundVolumes(float* Master, float* Sound, float* Music, float* Ambient, float* UserInterface, float* VoiceChat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpAudioSettingsLibrary", "LoadSoundVolumes");

	Params::BpAudioSettingsLibrary_LoadSoundVolumes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Master != nullptr)
		*Master = Parms.Master;

	if (Sound != nullptr)
		*Sound = Parms.Sound;

	if (Music != nullptr)
		*Music = Parms.Music;

	if (Ambient != nullptr)
		*Ambient = Parms.Ambient;

	if (UserInterface != nullptr)
		*UserInterface = Parms.UserInterface;

	if (VoiceChat != nullptr)
		*VoiceChat = Parms.VoiceChat;
}


// Function PropWitchHuntModule.BpAudioSettingsLibrary.SaveSoundVolumes
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   Master                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Sound                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Music                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Ambient                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   UserInterface                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VoiceChat                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBpAudioSettingsLibrary::SaveSoundVolumes(const float& Master, const float& Sound, const float& Music, const float& Ambient, const float& UserInterface, const float& VoiceChat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpAudioSettingsLibrary", "SaveSoundVolumes");

	Params::BpAudioSettingsLibrary_SaveSoundVolumes Parms{};

	Parms.Master = Master;
	Parms.Sound = Sound;
	Parms.Music = Music;
	Parms.Ambient = Ambient;
	Parms.UserInterface = UserInterface;
	Parms.VoiceChat = VoiceChat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.BpInputSettingsLibrary.AddActionKeyBinding
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FInputActionKeyMapping           ActionToAdd                                            (Parm, NativeAccessSpecifierPublic)

void UBpInputSettingsLibrary::AddActionKeyBinding(const struct FInputActionKeyMapping& ActionToAdd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpInputSettingsLibrary", "AddActionKeyBinding");

	Params::BpInputSettingsLibrary_AddActionKeyBinding Parms{};

	Parms.ActionToAdd = std::move(ActionToAdd);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.BpInputSettingsLibrary.AddAxisKeyBinding
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FInputAxisKeyMapping             AxisToAdd                                              (Parm, NativeAccessSpecifierPublic)

void UBpInputSettingsLibrary::AddAxisKeyBinding(const struct FInputAxisKeyMapping& AxisToAdd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpInputSettingsLibrary", "AddAxisKeyBinding");

	Params::BpInputSettingsLibrary_AddAxisKeyBinding Parms{};

	Parms.AxisToAdd = std::move(AxisToAdd);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.BpInputSettingsLibrary.ChangeActionKeyBinding
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FInputActionKeyMapping           ActionToChange                                         (Parm, NativeAccessSpecifierPublic)
// struct FKey                             NewKey                                                 (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBpInputSettingsLibrary::ChangeActionKeyBinding(const struct FInputActionKeyMapping& ActionToChange, const struct FKey& NewKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpInputSettingsLibrary", "ChangeActionKeyBinding");

	Params::BpInputSettingsLibrary_ChangeActionKeyBinding Parms{};

	Parms.ActionToChange = std::move(ActionToChange);
	Parms.NewKey = std::move(NewKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.BpInputSettingsLibrary.ChangeAxisKeyBinding
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FInputAxisKeyMapping             AxisToChange                                           (Parm, NativeAccessSpecifierPublic)
// struct FKey                             NewKey                                                 (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBpInputSettingsLibrary::ChangeAxisKeyBinding(const struct FInputAxisKeyMapping& AxisToChange, const struct FKey& NewKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpInputSettingsLibrary", "ChangeAxisKeyBinding");

	Params::BpInputSettingsLibrary_ChangeAxisKeyBinding Parms{};

	Parms.AxisToChange = std::move(AxisToChange);
	Parms.NewKey = std::move(NewKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.BpInputSettingsLibrary.GetControllerSensivity
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBpInputSettingsLibrary::GetControllerSensivity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpInputSettingsLibrary", "GetControllerSensivity");

	Params::BpInputSettingsLibrary_GetControllerSensivity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.BpInputSettingsLibrary.GetGamepadAcceptKey
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FKey                             ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FKey UBpInputSettingsLibrary::GetGamepadAcceptKey()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpInputSettingsLibrary", "GetGamepadAcceptKey");

	Params::BpInputSettingsLibrary_GetGamepadAcceptKey Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.BpInputSettingsLibrary.GetGamepadBackKey
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FKey                             ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FKey UBpInputSettingsLibrary::GetGamepadBackKey()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpInputSettingsLibrary", "GetGamepadBackKey");

	Params::BpInputSettingsLibrary_GetGamepadBackKey Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.BpInputSettingsLibrary.GetInputMode
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class APlayerController*                PlayerController                                       (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EInputMode                              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EInputMode UBpInputSettingsLibrary::GetInputMode(const class APlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpInputSettingsLibrary", "GetInputMode");

	Params::BpInputSettingsLibrary_GetInputMode Parms{};

	Parms.PlayerController = PlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.BpInputSettingsLibrary.GetKeyBindingsForAction
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ActionName                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FInputActionKeyMapping>   Bindings                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UBpInputSettingsLibrary::GetKeyBindingsForAction(const class FName& ActionName, TArray<struct FInputActionKeyMapping>* Bindings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpInputSettingsLibrary", "GetKeyBindingsForAction");

	Params::BpInputSettingsLibrary_GetKeyBindingsForAction Parms{};

	Parms.ActionName = ActionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Bindings != nullptr)
		*Bindings = std::move(Parms.Bindings);
}


// Function PropWitchHuntModule.BpInputSettingsLibrary.GetKeyBindingsForAxis
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             AxisName                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FInputAxisKeyMapping>     Bindings                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UBpInputSettingsLibrary::GetKeyBindingsForAxis(const class FName& AxisName, float Scale, TArray<struct FInputAxisKeyMapping>* Bindings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpInputSettingsLibrary", "GetKeyBindingsForAxis");

	Params::BpInputSettingsLibrary_GetKeyBindingsForAxis Parms{};

	Parms.AxisName = AxisName;
	Parms.Scale = Scale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Bindings != nullptr)
		*Bindings = std::move(Parms.Bindings);
}


// Function PropWitchHuntModule.BpInputSettingsLibrary.GetMouseSensivity
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBpInputSettingsLibrary::GetMouseSensivity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpInputSettingsLibrary", "GetMouseSensivity");

	Params::BpInputSettingsLibrary_GetMouseSensivity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.BpInputSettingsLibrary.InvertControllerToggle
// (Final, Native, Static, Public, BlueprintCallable)

void UBpInputSettingsLibrary::InvertControllerToggle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpInputSettingsLibrary", "InvertControllerToggle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.BpInputSettingsLibrary.InvertMouseToggle
// (Final, Native, Static, Public, BlueprintCallable)

void UBpInputSettingsLibrary::InvertMouseToggle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpInputSettingsLibrary", "InvertMouseToggle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.BpInputSettingsLibrary.IsControllerYInverted
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBpInputSettingsLibrary::IsControllerYInverted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpInputSettingsLibrary", "IsControllerYInverted");

	Params::BpInputSettingsLibrary_IsControllerYInverted Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.BpInputSettingsLibrary.IsMouseYInverted
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBpInputSettingsLibrary::IsMouseYInverted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpInputSettingsLibrary", "IsMouseYInverted");

	Params::BpInputSettingsLibrary_IsMouseYInverted Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.BpInputSettingsLibrary.LoadInputSettings
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     IgnoreAxisConfigs                                      (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class FName>                     IgnoreActionMappings                                   (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class FName>                     IgnoreAxisMappings                                     (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UBpInputSettingsLibrary::LoadInputSettings(class APlayerController* PlayerController, const TArray<class FName>& IgnoreAxisConfigs, const TArray<class FName>& IgnoreActionMappings, const TArray<class FName>& IgnoreAxisMappings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpInputSettingsLibrary", "LoadInputSettings");

	Params::BpInputSettingsLibrary_LoadInputSettings Parms{};

	Parms.PlayerController = PlayerController;
	Parms.IgnoreAxisConfigs = std::move(IgnoreAxisConfigs);
	Parms.IgnoreActionMappings = std::move(IgnoreActionMappings);
	Parms.IgnoreAxisMappings = std::move(IgnoreAxisMappings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.BpInputSettingsLibrary.RemoveActionKeyBinding
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FInputActionKeyMapping           ActionToRemove                                         (Parm, NativeAccessSpecifierPublic)

void UBpInputSettingsLibrary::RemoveActionKeyBinding(const struct FInputActionKeyMapping& ActionToRemove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpInputSettingsLibrary", "RemoveActionKeyBinding");

	Params::BpInputSettingsLibrary_RemoveActionKeyBinding Parms{};

	Parms.ActionToRemove = std::move(ActionToRemove);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.BpInputSettingsLibrary.RemoveAxisKeyBinding
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FInputAxisKeyMapping             AxisToRemove                                           (Parm, NativeAccessSpecifierPublic)

void UBpInputSettingsLibrary::RemoveAxisKeyBinding(const struct FInputAxisKeyMapping& AxisToRemove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpInputSettingsLibrary", "RemoveAxisKeyBinding");

	Params::BpInputSettingsLibrary_RemoveAxisKeyBinding Parms{};

	Parms.AxisToRemove = std::move(AxisToRemove);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.BpInputSettingsLibrary.RestoreDefaultKeyBindings
// (Final, Native, Static, Public, BlueprintCallable)

void UBpInputSettingsLibrary::RestoreDefaultKeyBindings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpInputSettingsLibrary", "RestoreDefaultKeyBindings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.BpInputSettingsLibrary.SaveInputSettings
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBpInputSettingsLibrary::SaveInputSettings(class APlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpInputSettingsLibrary", "SaveInputSettings");

	Params::BpInputSettingsLibrary_SaveInputSettings Parms{};

	Parms.PlayerController = PlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.BpInputSettingsLibrary.SetControllerSensivity
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   ControllerSensivity                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBpInputSettingsLibrary::SetControllerSensivity(float ControllerSensivity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpInputSettingsLibrary", "SetControllerSensivity");

	Params::BpInputSettingsLibrary_SetControllerSensivity Parms{};

	Parms.ControllerSensivity = ControllerSensivity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.BpInputSettingsLibrary.SetMouseSensivity
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   MouseSensivity                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBpInputSettingsLibrary::SetMouseSensivity(float MouseSensivity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpInputSettingsLibrary", "SetMouseSensivity");

	Params::BpInputSettingsLibrary_SetMouseSensivity Parms{};

	Parms.MouseSensivity = MouseSensivity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.BpVideoSettingsLibrary.ChangeScreenResolution
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FSupportedResolution             Resolution                                             (Parm, NativeAccessSpecifierPublic)
// EWindowMode                             WindowMode                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBpVideoSettingsLibrary::ChangeScreenResolution(const struct FSupportedResolution& Resolution, EWindowMode WindowMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpVideoSettingsLibrary", "ChangeScreenResolution");

	Params::BpVideoSettingsLibrary_ChangeScreenResolution Parms{};

	Parms.Resolution = std::move(Resolution);
	Parms.WindowMode = WindowMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.BpVideoSettingsLibrary.GetAutoExposureMethod
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBpVideoSettingsLibrary::GetAutoExposureMethod()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpVideoSettingsLibrary", "GetAutoExposureMethod");

	Params::BpVideoSettingsLibrary_GetAutoExposureMethod Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.BpVideoSettingsLibrary.GetGamma
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBpVideoSettingsLibrary::GetGamma()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpVideoSettingsLibrary", "GetGamma");

	Params::BpVideoSettingsLibrary_GetGamma Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.BpVideoSettingsLibrary.GetMotionBlur
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBpVideoSettingsLibrary::GetMotionBlur()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpVideoSettingsLibrary", "GetMotionBlur");

	Params::BpVideoSettingsLibrary_GetMotionBlur Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.BpVideoSettingsLibrary.GetOverallQualitySettings
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// EOverallQualityLevel                    OverallQualityLevel                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBpVideoSettingsLibrary::GetOverallQualitySettings(EOverallQualityLevel* OverallQualityLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpVideoSettingsLibrary", "GetOverallQualitySettings");

	Params::BpVideoSettingsLibrary_GetOverallQualitySettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OverallQualityLevel != nullptr)
		*OverallQualityLevel = Parms.OverallQualityLevel;
}


// Function PropWitchHuntModule.BpVideoSettingsLibrary.GetScreenResolution
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSupportedResolution             Resolution                                             (Parm, OutParm, NativeAccessSpecifierPublic)
// EWindowMode                             WindowMode                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBpVideoSettingsLibrary::GetScreenResolution(struct FSupportedResolution* Resolution, EWindowMode* WindowMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpVideoSettingsLibrary", "GetScreenResolution");

	Params::BpVideoSettingsLibrary_GetScreenResolution Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Resolution != nullptr)
		*Resolution = std::move(Parms.Resolution);

	if (WindowMode != nullptr)
		*WindowMode = Parms.WindowMode;
}


// Function PropWitchHuntModule.BpVideoSettingsLibrary.GetSmoothFramerate
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBpVideoSettingsLibrary::GetSmoothFramerate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpVideoSettingsLibrary", "GetSmoothFramerate");

	Params::BpVideoSettingsLibrary_GetSmoothFramerate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.BpVideoSettingsLibrary.GetSupportedScreenResolutions
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FSupportedResolution>     Resolutions                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UBpVideoSettingsLibrary::GetSupportedScreenResolutions(TArray<struct FSupportedResolution>* Resolutions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpVideoSettingsLibrary", "GetSupportedScreenResolutions");

	Params::BpVideoSettingsLibrary_GetSupportedScreenResolutions Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Resolutions != nullptr)
		*Resolutions = std::move(Parms.Resolutions);
}


// Function PropWitchHuntModule.BpVideoSettingsLibrary.GetVideoQualitySettings
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   AntiAliasing                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Effects                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PostProcess                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Resolution                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Shadow                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Texture                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ViewDistance                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBpVideoSettingsLibrary::GetVideoQualitySettings(int32* AntiAliasing, int32* Effects, int32* PostProcess, int32* Resolution, int32* Shadow, int32* Texture, int32* ViewDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpVideoSettingsLibrary", "GetVideoQualitySettings");

	Params::BpVideoSettingsLibrary_GetVideoQualitySettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AntiAliasing != nullptr)
		*AntiAliasing = Parms.AntiAliasing;

	if (Effects != nullptr)
		*Effects = Parms.Effects;

	if (PostProcess != nullptr)
		*PostProcess = Parms.PostProcess;

	if (Resolution != nullptr)
		*Resolution = Parms.Resolution;

	if (Shadow != nullptr)
		*Shadow = Parms.Shadow;

	if (Texture != nullptr)
		*Texture = Parms.Texture;

	if (ViewDistance != nullptr)
		*ViewDistance = Parms.ViewDistance;
}


// Function PropWitchHuntModule.BpVideoSettingsLibrary.IsVSyncEnabled
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBpVideoSettingsLibrary::IsVSyncEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpVideoSettingsLibrary", "IsVSyncEnabled");

	Params::BpVideoSettingsLibrary_IsVSyncEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.BpVideoSettingsLibrary.SaveEngineConfig
// (Final, Native, Static, Public, BlueprintCallable)

void UBpVideoSettingsLibrary::SaveEngineConfig()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpVideoSettingsLibrary", "SaveEngineConfig");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.BpVideoSettingsLibrary.SaveVideoModeAndQuality
// (Final, Native, Static, Public, BlueprintCallable)

void UBpVideoSettingsLibrary::SaveVideoModeAndQuality()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpVideoSettingsLibrary", "SaveVideoModeAndQuality");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.BpVideoSettingsLibrary.SetAutoExposureMethod
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   AutoExposureMethod                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBpVideoSettingsLibrary::SetAutoExposureMethod(int32 AutoExposureMethod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpVideoSettingsLibrary", "SetAutoExposureMethod");

	Params::BpVideoSettingsLibrary_SetAutoExposureMethod Parms{};

	Parms.AutoExposureMethod = AutoExposureMethod;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.BpVideoSettingsLibrary.SetGamma
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   Gamma                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBpVideoSettingsLibrary::SetGamma(float Gamma)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpVideoSettingsLibrary", "SetGamma");

	Params::BpVideoSettingsLibrary_SetGamma Parms{};

	Parms.Gamma = Gamma;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.BpVideoSettingsLibrary.SetMotionBlur
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    MotionBlur                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBpVideoSettingsLibrary::SetMotionBlur(bool MotionBlur)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpVideoSettingsLibrary", "SetMotionBlur");

	Params::BpVideoSettingsLibrary_SetMotionBlur Parms{};

	Parms.MotionBlur = MotionBlur;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.BpVideoSettingsLibrary.SetOverallQualitySettings
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EOverallQualityLevel                    OverallQualityLevel                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBpVideoSettingsLibrary::SetOverallQualitySettings(EOverallQualityLevel OverallQualityLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpVideoSettingsLibrary", "SetOverallQualitySettings");

	Params::BpVideoSettingsLibrary_SetOverallQualitySettings Parms{};

	Parms.OverallQualityLevel = OverallQualityLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.BpVideoSettingsLibrary.SetScreenResolution
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FSupportedResolution             Resolution                                             (Parm, NativeAccessSpecifierPublic)
// EWindowMode                             WindowMode                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBpVideoSettingsLibrary::SetScreenResolution(const struct FSupportedResolution& Resolution, EWindowMode WindowMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpVideoSettingsLibrary", "SetScreenResolution");

	Params::BpVideoSettingsLibrary_SetScreenResolution Parms{};

	Parms.Resolution = std::move(Resolution);
	Parms.WindowMode = WindowMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.BpVideoSettingsLibrary.SetSmoothFramerate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    SmoothFramerate                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBpVideoSettingsLibrary::SetSmoothFramerate(bool SmoothFramerate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpVideoSettingsLibrary", "SetSmoothFramerate");

	Params::BpVideoSettingsLibrary_SetSmoothFramerate Parms{};

	Parms.SmoothFramerate = SmoothFramerate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.BpVideoSettingsLibrary.SetVideoQualitySettings
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   AntiAliasing                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Effects                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PostProcess                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Resolution                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Shadow                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Texture                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ViewDistance                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBpVideoSettingsLibrary::SetVideoQualitySettings(const int32 AntiAliasing, const int32 Effects, const int32 PostProcess, const int32 Resolution, const int32 Shadow, const int32 Texture, const int32 ViewDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpVideoSettingsLibrary", "SetVideoQualitySettings");

	Params::BpVideoSettingsLibrary_SetVideoQualitySettings Parms{};

	Parms.AntiAliasing = AntiAliasing;
	Parms.Effects = Effects;
	Parms.PostProcess = PostProcess;
	Parms.Resolution = Resolution;
	Parms.Shadow = Shadow;
	Parms.Texture = Texture;
	Parms.ViewDistance = ViewDistance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.BpVideoSettingsLibrary.SetVSyncEnabled
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBpVideoSettingsLibrary::SetVSyncEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpVideoSettingsLibrary", "SetVSyncEnabled");

	Params::BpVideoSettingsLibrary_SetVSyncEnabled Parms{};

	Parms.Enabled = Enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.CommandLineFunctionLibrary.GetValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFound                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UCommandLineFunctionLibrary::GetValue(const class FString& Key, bool* bFound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CommandLineFunctionLibrary", "GetValue");

	Params::CommandLineFunctionLibrary_GetValue Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bFound != nullptr)
		*bFound = Parms.bFound;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.CommandLineFunctionLibrary.HasToken
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Token                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCommandLineFunctionLibrary::HasToken(const class FString& Token)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CommandLineFunctionLibrary", "HasToken");

	Params::CommandLineFunctionLibrary_HasToken Parms{};

	Parms.Token = std::move(Token);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.CustomLogSubsystem.AddLogTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Host                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Port                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Tag                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomLogSubsystem::AddLogTarget(const class FString& Host, int32 Port, const class FString& Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomLogSubsystem", "AddLogTarget");

	Params::CustomLogSubsystem_AddLogTarget Parms{};

	Parms.Host = std::move(Host);
	Parms.Port = Port;
	Parms.Tag = std::move(Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.CustomLogSubsystem.Log
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FText                             TextToLog                                              (Parm, NativeAccessSpecifierPublic)
// class FName                             Category                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomLogSubsystem::Log(const class FText& TextToLog, class FName Category)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomLogSubsystem", "Log");

	Params::CustomLogSubsystem_Log Parms{};

	Parms.TextToLog = std::move(TextToLog);
	Parms.Category = Category;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.CustomLogSubsystem.LogString
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           StringToLog                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Category                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomLogSubsystem::LogString(const class FString& StringToLog, class FName Category)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomLogSubsystem", "LogString");

	Params::CustomLogSubsystem_LogString Parms{};

	Parms.StringToLog = std::move(StringToLog);
	Parms.Category = Category;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.DeveloperModeSubsystem.CouldEnableDeveloperMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDeveloperModeSubsystem::CouldEnableDeveloperMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeveloperModeSubsystem", "CouldEnableDeveloperMode");

	Params::DeveloperModeSubsystem_CouldEnableDeveloperMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.DeveloperModeSubsystem.DisableDeveloperMode
// (Final, Native, Public, BlueprintCallable)

void UDeveloperModeSubsystem::DisableDeveloperMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeveloperModeSubsystem", "DisableDeveloperMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.DeveloperModeSubsystem.EnableDeveloperMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDeveloperModeSubsystem::EnableDeveloperMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeveloperModeSubsystem", "EnableDeveloperMode");

	Params::DeveloperModeSubsystem_EnableDeveloperMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.DeveloperModeSubsystem.GetBoolSetting
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             SettingName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bHasValue                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDeveloperModeSubsystem::GetBoolSetting(class FName SettingName, bool* bHasValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeveloperModeSubsystem", "GetBoolSetting");

	Params::DeveloperModeSubsystem_GetBoolSetting Parms{};

	Parms.SettingName = SettingName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bHasValue != nullptr)
		*bHasValue = Parms.bHasValue;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.DeveloperModeSubsystem.GetFloatSetting
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             SettingName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bHasValue                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDeveloperModeSubsystem::GetFloatSetting(class FName SettingName, bool* bHasValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeveloperModeSubsystem", "GetFloatSetting");

	Params::DeveloperModeSubsystem_GetFloatSetting Parms{};

	Parms.SettingName = SettingName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bHasValue != nullptr)
		*bHasValue = Parms.bHasValue;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.DeveloperModeSubsystem.GetInt32Setting
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             SettingName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bHasValue                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDeveloperModeSubsystem::GetInt32Setting(class FName SettingName, bool* bHasValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeveloperModeSubsystem", "GetInt32Setting");

	Params::DeveloperModeSubsystem_GetInt32Setting Parms{};

	Parms.SettingName = SettingName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bHasValue != nullptr)
		*bHasValue = Parms.bHasValue;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.DeveloperModeSubsystem.GetStringSetting
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             SettingName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bHasValue                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UDeveloperModeSubsystem::GetStringSetting(class FName SettingName, bool* bHasValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeveloperModeSubsystem", "GetStringSetting");

	Params::DeveloperModeSubsystem_GetStringSetting Parms{};

	Parms.SettingName = SettingName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bHasValue != nullptr)
		*bHasValue = Parms.bHasValue;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.DeveloperModeSubsystem.HasAnySetting
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             SettingName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDeveloperModeSubsystem::HasAnySetting(class FName SettingName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeveloperModeSubsystem", "HasAnySetting");

	Params::DeveloperModeSubsystem_HasAnySetting Parms{};

	Parms.SettingName = SettingName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.DeveloperModeSubsystem.SetBoolSetting
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             SettingName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDeveloperModeSubsystem::SetBoolSetting(class FName SettingName, bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeveloperModeSubsystem", "SetBoolSetting");

	Params::DeveloperModeSubsystem_SetBoolSetting Parms{};

	Parms.SettingName = SettingName;
	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.DeveloperModeSubsystem.SetFloatSetting
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             SettingName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDeveloperModeSubsystem::SetFloatSetting(class FName SettingName, float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeveloperModeSubsystem", "SetFloatSetting");

	Params::DeveloperModeSubsystem_SetFloatSetting Parms{};

	Parms.SettingName = SettingName;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.DeveloperModeSubsystem.SetInt32Setting
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             SettingName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDeveloperModeSubsystem::SetInt32Setting(class FName SettingName, int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeveloperModeSubsystem", "SetInt32Setting");

	Params::DeveloperModeSubsystem_SetInt32Setting Parms{};

	Parms.SettingName = SettingName;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.DeveloperModeSubsystem.SetStringSetting
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             SettingName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDeveloperModeSubsystem::SetStringSetting(class FName SettingName, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeveloperModeSubsystem", "SetStringSetting");

	Params::DeveloperModeSubsystem_SetStringSetting Parms{};

	Parms.SettingName = SettingName;
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.DownloadStringCallbackProxy.DownloadString
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDownloadStringCallbackProxy*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDownloadStringCallbackProxy* UDownloadStringCallbackProxy::DownloadString(class UObject* WorldContextObject, const class FString& URL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DownloadStringCallbackProxy", "DownloadString");

	Params::DownloadStringCallbackProxy_DownloadString Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.URL = std::move(URL);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.DownloadStringCallbackProxy.UploadString
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           StringToPost                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDownloadStringCallbackProxy*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDownloadStringCallbackProxy* UDownloadStringCallbackProxy::UploadString(class UObject* WorldContextObject, const class FString& URL, const class FString& StringToPost)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DownloadStringCallbackProxy", "UploadString");

	Params::DownloadStringCallbackProxy_UploadString Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.URL = std::move(URL);
	Parms.StringToPost = std::move(StringToPost);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.DownloadStringCallbackProxy.UploadStringQuery
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           StringToPost                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   QueryID                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDownloadStringCallbackProxy*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDownloadStringCallbackProxy* UDownloadStringCallbackProxy::UploadStringQuery(class UObject* WorldContextObject, const class FString& URL, const class FString& StringToPost, const int32 QueryID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DownloadStringCallbackProxy", "UploadStringQuery");

	Params::DownloadStringCallbackProxy_UploadStringQuery Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.URL = std::move(URL);
	Parms.StringToPost = std::move(StringToPost);
	Parms.QueryID = QueryID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.FileHelperBlueprint.GetUnrealPath
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EUnrealPath                             UnrealPath                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UFileHelperBlueprint::GetUnrealPath(EUnrealPath UnrealPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FileHelperBlueprint", "GetUnrealPath");

	Params::FileHelperBlueprint_GetUnrealPath Parms{};

	Parms.UnrealPath = UnrealPath;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.GetAllItemsCallbackProxy.ConsumeItem
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBlueprintOnlineItem             ItemToConsume                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Quantity                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGetAllItemsCallbackProxy*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGetAllItemsCallbackProxy* UGetAllItemsCallbackProxy::ConsumeItem(class UObject* WorldContextObject, class APlayerController* PlayerController, const struct FBlueprintOnlineItem& ItemToConsume, int32 Quantity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GetAllItemsCallbackProxy", "ConsumeItem");

	Params::GetAllItemsCallbackProxy_ConsumeItem Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.PlayerController = PlayerController;
	Parms.ItemToConsume = std::move(ItemToConsume);
	Parms.Quantity = Quantity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.GetAllItemsCallbackProxy.ExchangeItems
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>                           OutDefinitionIds                                       (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FBlueprintOnlineItem>     InItems                                                (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class UGetAllItemsCallbackProxy*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGetAllItemsCallbackProxy* UGetAllItemsCallbackProxy::ExchangeItems(class UObject* WorldContextObject, class APlayerController* PlayerController, const TArray<int32>& OutDefinitionIds, const TArray<struct FBlueprintOnlineItem>& InItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GetAllItemsCallbackProxy", "ExchangeItems");

	Params::GetAllItemsCallbackProxy_ExchangeItems Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.PlayerController = PlayerController;
	Parms.OutDefinitionIds = std::move(OutDefinitionIds);
	Parms.InItems = std::move(InItems);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.GetAllItemsCallbackProxy.GenerateItems
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>                           ItemDefinitionIds                                      (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class UGetAllItemsCallbackProxy*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGetAllItemsCallbackProxy* UGetAllItemsCallbackProxy::GenerateItems(class UObject* WorldContextObject, class APlayerController* PlayerController, const TArray<int32>& ItemDefinitionIds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GetAllItemsCallbackProxy", "GenerateItems");

	Params::GetAllItemsCallbackProxy_GenerateItems Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.PlayerController = PlayerController;
	Parms.ItemDefinitionIds = std::move(ItemDefinitionIds);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.GetAllItemsCallbackProxy.GetAllItems
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGetAllItemsCallbackProxy*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGetAllItemsCallbackProxy* UGetAllItemsCallbackProxy::GetAllItems(class UObject* WorldContextObject, class APlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GetAllItemsCallbackProxy", "GetAllItems");

	Params::GetAllItemsCallbackProxy_GetAllItems Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.PlayerController = PlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.GetAllItemsCallbackProxy.GetItemDefinitionId
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FBlueprintOnlineItem             Item                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGetAllItemsCallbackProxy::GetItemDefinitionId(const struct FBlueprintOnlineItem& Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GetAllItemsCallbackProxy", "GetItemDefinitionId");

	Params::GetAllItemsCallbackProxy_GetItemDefinitionId Parms{};

	Parms.Item = std::move(Item);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.GetAllItemsCallbackProxy.GetItemFlags
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FBlueprintOnlineItem             Item                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGetAllItemsCallbackProxy::GetItemFlags(const struct FBlueprintOnlineItem& Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GetAllItemsCallbackProxy", "GetItemFlags");

	Params::GetAllItemsCallbackProxy_GetItemFlags Parms{};

	Parms.Item = std::move(Item);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.GetAllItemsCallbackProxy.GetItemId
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FBlueprintOnlineItem             Item                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGetAllItemsCallbackProxy::GetItemId(const struct FBlueprintOnlineItem& Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GetAllItemsCallbackProxy", "GetItemId");

	Params::GetAllItemsCallbackProxy_GetItemId Parms{};

	Parms.Item = std::move(Item);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.GetAllItemsCallbackProxy.GetItemQuantity
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FBlueprintOnlineItem             Item                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGetAllItemsCallbackProxy::GetItemQuantity(const struct FBlueprintOnlineItem& Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GetAllItemsCallbackProxy", "GetItemQuantity");

	Params::GetAllItemsCallbackProxy_GetItemQuantity Parms{};

	Parms.Item = std::move(Item);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.GetAllItemsCallbackProxy.GrantPromoItems
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGetAllItemsCallbackProxy*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGetAllItemsCallbackProxy* UGetAllItemsCallbackProxy::GrantPromoItems(class UObject* WorldContextObject, class APlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GetAllItemsCallbackProxy", "GrantPromoItems");

	Params::GetAllItemsCallbackProxy_GrantPromoItems Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.PlayerController = PlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.GetAllItemsCallbackProxy.SetItemDefinitionId
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FBlueprintOnlineItem             Item                                                   (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   DefinitionId                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGetAllItemsCallbackProxy::SetItemDefinitionId(struct FBlueprintOnlineItem& Item, int32 DefinitionId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GetAllItemsCallbackProxy", "SetItemDefinitionId");

	Params::GetAllItemsCallbackProxy_SetItemDefinitionId Parms{};

	Parms.Item = std::move(Item);
	Parms.DefinitionId = DefinitionId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Item = std::move(Parms.Item);
}


// Function PropWitchHuntModule.GetAllItemsCallbackProxy.SetItemFlags
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FBlueprintOnlineItem             Item                                                   (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Flags_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGetAllItemsCallbackProxy::SetItemFlags(struct FBlueprintOnlineItem& Item, int32 Flags_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GetAllItemsCallbackProxy", "SetItemFlags");

	Params::GetAllItemsCallbackProxy_SetItemFlags Parms{};

	Parms.Item = std::move(Item);
	Parms.Flags_0 = Flags_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Item = std::move(Parms.Item);
}


// Function PropWitchHuntModule.GetAllItemsCallbackProxy.SetItemQuantity
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FBlueprintOnlineItem             Item                                                   (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Quantity                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGetAllItemsCallbackProxy::SetItemQuantity(struct FBlueprintOnlineItem& Item, int32 Quantity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GetAllItemsCallbackProxy", "SetItemQuantity");

	Params::GetAllItemsCallbackProxy_SetItemQuantity Parms{};

	Parms.Item = std::move(Item);
	Parms.Quantity = Quantity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Item = std::move(Parms.Item);
}


// Function PropWitchHuntModule.GetAllItemsCallbackProxy.TriggerItemDrop
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ItemDefinitionId                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGetAllItemsCallbackProxy*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGetAllItemsCallbackProxy* UGetAllItemsCallbackProxy::TriggerItemDrop(class UObject* WorldContextObject, class APlayerController* PlayerController, int32 ItemDefinitionId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GetAllItemsCallbackProxy", "TriggerItemDrop");

	Params::GetAllItemsCallbackProxy_TriggerItemDrop Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.PlayerController = PlayerController;
	Parms.ItemDefinitionId = ItemDefinitionId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.GetAllItemsCallbackProxy.RequestInventoryResponse
// (Final, Native, Private)
// Parameters:
// class UVaRestRequestJSON*               Request                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGetAllItemsCallbackProxy::RequestInventoryResponse(class UVaRestRequestJSON* Request)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GetAllItemsCallbackProxy", "RequestInventoryResponse");

	Params::GetAllItemsCallbackProxy_RequestInventoryResponse Parms{};

	Parms.Request = Request;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.GetAllItemsCallbackProxy.RequestItemExchangeResponse
// (Final, Native, Private)
// Parameters:
// class UVaRestRequestJSON*               Request                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGetAllItemsCallbackProxy::RequestItemExchangeResponse(class UVaRestRequestJSON* Request)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GetAllItemsCallbackProxy", "RequestItemExchangeResponse");

	Params::GetAllItemsCallbackProxy_RequestItemExchangeResponse Parms{};

	Parms.Request = Request;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.ImageLoader.LoadImageFromDisk
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Outer_0                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ImagePath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* UImageLoader::LoadImageFromDisk(class UObject* Outer_0, const class FString& ImagePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ImageLoader", "LoadImageFromDisk");

	Params::ImageLoader_LoadImageFromDisk Parms{};

	Parms.Outer_0 = Outer_0;
	Parms.ImagePath = std::move(ImagePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.Integer64Library.ToString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int64                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UInteger64Library::ToString(int64 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("Integer64Library", "ToString");

	Params::Integer64Library_ToString Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.Logger.LogError
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Text                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULogger::LogError(const class FString& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("Logger", "LogError");

	Params::Logger_LogError Parms{};

	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.Logger.LogInfo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Text                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULogger::LogInfo(const class FString& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("Logger", "LogInfo");

	Params::Logger_LogInfo Parms{};

	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.Logger.LogWarning
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Text                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULogger::LogWarning(const class FString& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("Logger", "LogWarning");

	Params::Logger_LogWarning Parms{};

	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.MatchParametersSubsystem.InitializeSubsystem
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UMatchParametersSubsystem::InitializeSubsystem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MatchParametersSubsystem", "InitializeSubsystem");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PropWitchHuntModule.ModParametersSubsystem.InitializeSubsystem
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UModParametersSubsystem::InitializeSubsystem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModParametersSubsystem", "InitializeSubsystem");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PropWitchHuntModule.BeaconPingCallbackProxy.BeaconPingString
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           TargetAddress                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SessionId                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBeaconPingCallbackProxy*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBeaconPingCallbackProxy* UBeaconPingCallbackProxy::BeaconPingString(class UObject* WorldContextObject, const class FString& TargetAddress, const class FString& SessionId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BeaconPingCallbackProxy", "BeaconPingString");

	Params::BeaconPingCallbackProxy_BeaconPingString Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.TargetAddress = std::move(TargetAddress);
	Parms.SessionId = std::move(SessionId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.OnlineSubsystemLibrary.GetBRGPassword
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UOnlineSubsystemLibrary::GetBRGPassword(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OnlineSubsystemLibrary", "GetBRGPassword");

	Params::OnlineSubsystemLibrary_GetBRGPassword Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.OnlineSubsystemLibrary.GetBRGUsername
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UOnlineSubsystemLibrary::GetBRGUsername(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OnlineSubsystemLibrary", "GetBRGUsername");

	Params::OnlineSubsystemLibrary_GetBRGUsername Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.OnlineSubsystemLibrary.HasAnyRealOnlineSubsystem
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UOnlineSubsystemLibrary::HasAnyRealOnlineSubsystem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OnlineSubsystemLibrary", "HasAnyRealOnlineSubsystem");

	Params::OnlineSubsystemLibrary_HasAnyRealOnlineSubsystem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.OnlineSubsystemLibrary.IsPlayerBlocked
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FBPUniqueNetId                   LocalPlayerNetId                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FBPUniqueNetId                   PlayerNetId                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UOnlineSubsystemLibrary::IsPlayerBlocked(const struct FBPUniqueNetId& LocalPlayerNetId, const struct FBPUniqueNetId& PlayerNetId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OnlineSubsystemLibrary", "IsPlayerBlocked");

	Params::OnlineSubsystemLibrary_IsPlayerBlocked Parms{};

	Parms.LocalPlayerNetId = std::move(LocalPlayerNetId);
	Parms.PlayerNetId = std::move(PlayerNetId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.OnlineSubsystemLibrary.UseBRGOnlineSubsystem
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UOnlineSubsystemLibrary::UseBRGOnlineSubsystem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OnlineSubsystemLibrary", "UseBRGOnlineSubsystem");

	Params::OnlineSubsystemLibrary_UseBRGOnlineSubsystem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.ParametersSubsystem.InitializeSubsystem
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UParametersSubsystem::InitializeSubsystem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ParametersSubsystem", "InitializeSubsystem");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PropWitchHuntModule.PhysicalSoundComponent.ClearCooldown
// (Final, Native, Private)

void UPhysicalSoundComponent::ClearCooldown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicalSoundComponent", "ClearCooldown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.PhysicalSoundComponent.GetLatestVelocity
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   TicksToGoBack                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UPhysicalSoundComponent::GetLatestVelocity(int32 TicksToGoBack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicalSoundComponent", "GetLatestVelocity");

	Params::PhysicalSoundComponent_GetLatestVelocity Parms{};

	Parms.TicksToGoBack = TicksToGoBack;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.PhysicalSoundComponent.OnMeshHit
// (Final, Native, Private, HasOutParams, HasDefaults)
// Parameters:
// class AActor*                           SelfActor                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UPhysicalSoundComponent::OnMeshHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicalSoundComponent", "OnMeshHit");

	Params::PhysicalSoundComponent_OnMeshHit Parms{};

	Parms.SelfActor = SelfActor;
	Parms.OtherActor = OtherActor;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.PhysicalSoundComponent.PlayCollisionSound
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// double                                  VolumeMultiplier                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysicalSoundComponent::PlayCollisionSound(double VolumeMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicalSoundComponent", "PlayCollisionSound");

	Params::PhysicalSoundComponent_PlayCollisionSound Parms{};

	Parms.VolumeMultiplier = VolumeMultiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.PhysicalSoundComponent.PlaySound
// (Final, Native, Private, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          HitImpactNormal                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double UPhysicalSoundComponent::PlaySound(const struct FVector& HitImpactNormal, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicalSoundComponent", "PlaySound");

	Params::PhysicalSoundComponent_PlaySound Parms{};

	Parms.HitImpactNormal = std::move(HitImpactNormal);
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.PhysicalSoundComponent.ShouldCollisionSoundPlay
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// double                                  DotProduct                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  ClampedVelocity                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPhysicalSoundComponent::ShouldCollisionSoundPlay(double DotProduct, double ClampedVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicalSoundComponent", "ShouldCollisionSoundPlay");

	Params::PhysicalSoundComponent_ShouldCollisionSoundPlay Parms{};

	Parms.DotProduct = DotProduct;
	Parms.ClampedVelocity = ClampedVelocity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.PhysicalSoundComponent.ShouldSlideSoundPlay
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// double                                  DotProduct                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  ClampedVelocity                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPhysicalSoundComponent::ShouldSlideSoundPlay(double DotProduct, double ClampedVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicalSoundComponent", "ShouldSlideSoundPlay");

	Params::PhysicalSoundComponent_ShouldSlideSoundPlay Parms{};

	Parms.DotProduct = DotProduct;
	Parms.ClampedVelocity = ClampedVelocity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.PhysicalSoundComponent.StartSlideSound
// (Final, Native, Private, BlueprintCallable)

void UPhysicalSoundComponent::StartSlideSound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicalSoundComponent", "StartSlideSound");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.PhysicalSoundComponent.StopSlideSound
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// bool                                    bImmediately                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysicalSoundComponent::StopSlideSound(bool bImmediately)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicalSoundComponent", "StopSlideSound");

	Params::PhysicalSoundComponent_StopSlideSound Parms{};

	Parms.bImmediately = bImmediately;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.PhysicalSoundComponent.StoreVelocity
// (Final, Native, Public, BlueprintCallable)

void UPhysicalSoundComponent::StoreVelocity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicalSoundComponent", "StoreVelocity");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.PhysicalSoundComponent.UpdateSlideSound
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// double                                  DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysicalSoundComponent::UpdateSlideSound(double DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicalSoundComponent", "UpdateSlideSound");

	Params::PhysicalSoundComponent_UpdateSlideSound Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.CallBackProxyPingServer.PingServer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ServerAddress                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCallBackProxyPingServer*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCallBackProxyPingServer* UCallBackProxyPingServer::PingServer(const class FString& ServerAddress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CallBackProxyPingServer", "PingServer");

	Params::CallBackProxyPingServer_PingServer Parms{};

	Parms.ServerAddress = std::move(ServerAddress);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.PingSubsystem.ResetPings
// (Final, Native, Public, BlueprintCallable)

void UPingSubsystem::ResetPings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PingSubsystem", "ResetPings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.PowerupParametersSubsystem.InitializeSubsystem
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UPowerupParametersSubsystem::InitializeSubsystem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PowerupParametersSubsystem", "InitializeSubsystem");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PropWitchHuntModule.ProjectVersionBlueprint.AddActorComponent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           OwnerActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           ActorComponentClass                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UActorComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UActorComponent* UProjectVersionBlueprint::AddActorComponent(class AActor* OwnerActor, class UClass* ActorComponentClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProjectVersionBlueprint", "AddActorComponent");

	Params::ProjectVersionBlueprint_AddActorComponent Parms{};

	Parms.OwnerActor = OwnerActor;
	Parms.ActorComponentClass = ActorComponentClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.ProjectVersionBlueprint.BanPlayer
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AGameModeBase*                    GameMode                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*                BannedPlayer                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             BanReason                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UProjectVersionBlueprint::BanPlayer(class AGameModeBase* GameMode, class APlayerController* BannedPlayer, const class FText& BanReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProjectVersionBlueprint", "BanPlayer");

	Params::ProjectVersionBlueprint_BanPlayer Parms{};

	Parms.GameMode = GameMode;
	Parms.BannedPlayer = BannedPlayer;
	Parms.BanReason = std::move(BanReason);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.ProjectVersionBlueprint.ComponentEncroachesGeometry
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              PrimitiveComponent                                     (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   IgnoreActors                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UProjectVersionBlueprint::ComponentEncroachesGeometry(class AActor* Actor, class UPrimitiveComponent* PrimitiveComponent, const struct FTransform& Transform, const TArray<class AActor*>& IgnoreActors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProjectVersionBlueprint", "ComponentEncroachesGeometry");

	Params::ProjectVersionBlueprint_ComponentEncroachesGeometry Parms{};

	Parms.Actor = Actor;
	Parms.PrimitiveComponent = PrimitiveComponent;
	Parms.Transform = std::move(Transform);
	Parms.IgnoreActors = std::move(IgnoreActors);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.ProjectVersionBlueprint.GetAllChildBlueprintClasses
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TSubclassOf<class UObject>              BaseClass                                              (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<TSubclassOf<class UObject>>      Subclasses                                             (Parm, OutParm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

void UProjectVersionBlueprint::GetAllChildBlueprintClasses(TSubclassOf<class UObject> BaseClass, TArray<TSubclassOf<class UObject>>* Subclasses)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProjectVersionBlueprint", "GetAllChildBlueprintClasses");

	Params::ProjectVersionBlueprint_GetAllChildBlueprintClasses Parms{};

	Parms.BaseClass = BaseClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Subclasses != nullptr)
		*Subclasses = std::move(Parms.Subclasses);
}


// Function PropWitchHuntModule.ProjectVersionBlueprint.GetClassFName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UClass*                           blueprintClass                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UProjectVersionBlueprint::GetClassFName(class UClass* blueprintClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProjectVersionBlueprint", "GetClassFName");

	Params::ProjectVersionBlueprint_GetClassFName Parms{};

	Parms.blueprintClass = blueprintClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.ProjectVersionBlueprint.GetClassObjectPath
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UClass*                           blueprintClass                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UProjectVersionBlueprint::GetClassObjectPath(class UClass* blueprintClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProjectVersionBlueprint", "GetClassObjectPath");

	Params::ProjectVersionBlueprint_GetClassObjectPath Parms{};

	Parms.blueprintClass = blueprintClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.ProjectVersionBlueprint.GetDefaultObject
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TSubclassOf<class UObject>              ObjectClass                                            (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UProjectVersionBlueprint::GetDefaultObject(TSubclassOf<class UObject> ObjectClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProjectVersionBlueprint", "GetDefaultObject");

	Params::ProjectVersionBlueprint_GetDefaultObject Parms{};

	Parms.ObjectClass = ObjectClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.ProjectVersionBlueprint.GetEarliestPurchaseUnixTime
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGameInstance*                    GameInstance                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UProjectVersionBlueprint::GetEarliestPurchaseUnixTime(class UGameInstance* GameInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProjectVersionBlueprint", "GetEarliestPurchaseUnixTime");

	Params::ProjectVersionBlueprint_GetEarliestPurchaseUnixTime Parms{};

	Parms.GameInstance = GameInstance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.ProjectVersionBlueprint.GetEngineChangelist
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UProjectVersionBlueprint::GetEngineChangelist()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProjectVersionBlueprint", "GetEngineChangelist");

	Params::ProjectVersionBlueprint_GetEngineChangelist Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.ProjectVersionBlueprint.GetEngineCompatibleChangelist
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UProjectVersionBlueprint::GetEngineCompatibleChangelist()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProjectVersionBlueprint", "GetEngineCompatibleChangelist");

	Params::ProjectVersionBlueprint_GetEngineCompatibleChangelist Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.ProjectVersionBlueprint.GetFiles
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class FString>                   Files                                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FString                           RootFolderFullPath                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Ext                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UProjectVersionBlueprint::GetFiles(TArray<class FString>* Files, const class FString& RootFolderFullPath, const class FString& Ext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProjectVersionBlueprint", "GetFiles");

	Params::ProjectVersionBlueprint_GetFiles Parms{};

	Parms.RootFolderFullPath = std::move(RootFolderFullPath);
	Parms.Ext = std::move(Ext);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Files != nullptr)
		*Files = std::move(Parms.Files);

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.ProjectVersionBlueprint.GetFirstLocalPlayerController
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameInstance*                    GameInstance                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APlayerController* UProjectVersionBlueprint::GetFirstLocalPlayerController(class UGameInstance* GameInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProjectVersionBlueprint", "GetFirstLocalPlayerController");

	Params::ProjectVersionBlueprint_GetFirstLocalPlayerController Parms{};

	Parms.GameInstance = GameInstance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.ProjectVersionBlueprint.GetItemProperty
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameInstance*                    GameInstance                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBlueprintOnlineItem             Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class FName                             PropertyName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UProjectVersionBlueprint::GetItemProperty(class UGameInstance* GameInstance, const struct FBlueprintOnlineItem& Item, class FName PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProjectVersionBlueprint", "GetItemProperty");

	Params::ProjectVersionBlueprint_GetItemProperty Parms{};

	Parms.GameInstance = GameInstance;
	Parms.Item = std::move(Item);
	Parms.PropertyName = PropertyName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.ProjectVersionBlueprint.GetLaunchPath
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UProjectVersionBlueprint::GetLaunchPath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProjectVersionBlueprint", "GetLaunchPath");

	Params::ProjectVersionBlueprint_GetLaunchPath Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.ProjectVersionBlueprint.GetMemoryStats
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   UsedPhysical                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PeakUsedPhysical                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   UsedVirtual                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PeakUsedVirtual                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AvailablePhysical                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AvailableVirtual                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TotalPhysical                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TotalVirtual                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UProjectVersionBlueprint::GetMemoryStats(float* UsedPhysical, float* PeakUsedPhysical, float* UsedVirtual, float* PeakUsedVirtual, float* AvailablePhysical, float* AvailableVirtual, float* TotalPhysical, float* TotalVirtual)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProjectVersionBlueprint", "GetMemoryStats");

	Params::ProjectVersionBlueprint_GetMemoryStats Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (UsedPhysical != nullptr)
		*UsedPhysical = Parms.UsedPhysical;

	if (PeakUsedPhysical != nullptr)
		*PeakUsedPhysical = Parms.PeakUsedPhysical;

	if (UsedVirtual != nullptr)
		*UsedVirtual = Parms.UsedVirtual;

	if (PeakUsedVirtual != nullptr)
		*PeakUsedVirtual = Parms.PeakUsedVirtual;

	if (AvailablePhysical != nullptr)
		*AvailablePhysical = Parms.AvailablePhysical;

	if (AvailableVirtual != nullptr)
		*AvailableVirtual = Parms.AvailableVirtual;

	if (TotalPhysical != nullptr)
		*TotalPhysical = Parms.TotalPhysical;

	if (TotalVirtual != nullptr)
		*TotalVirtual = Parms.TotalVirtual;
}


// Function PropWitchHuntModule.ProjectVersionBlueprint.GetProjectVersion
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UProjectVersionBlueprint::GetProjectVersion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProjectVersionBlueprint", "GetProjectVersion");

	Params::ProjectVersionBlueprint_GetProjectVersion Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.ProjectVersionBlueprint.GetSessionOwnersId
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FBlueprintSessionResult          Result                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UProjectVersionBlueprint::GetSessionOwnersId(const struct FBlueprintSessionResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProjectVersionBlueprint", "GetSessionOwnersId");

	Params::ProjectVersionBlueprint_GetSessionOwnersId Parms{};

	Parms.Result = std::move(Result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.ProjectVersionBlueprint.GetUint64SteamIdAsString
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameInstance*                    GameInstance                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UProjectVersionBlueprint::GetUint64SteamIdAsString(class UGameInstance* GameInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProjectVersionBlueprint", "GetUint64SteamIdAsString");

	Params::ProjectVersionBlueprint_GetUint64SteamIdAsString Parms{};

	Parms.GameInstance = GameInstance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.ProjectVersionBlueprint.HasSaveGameAnyBytes
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           SlotName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   UserIndex                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UProjectVersionBlueprint::HasSaveGameAnyBytes(const class FString& SlotName, const int32 UserIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProjectVersionBlueprint", "HasSaveGameAnyBytes");

	Params::ProjectVersionBlueprint_HasSaveGameAnyBytes Parms{};

	Parms.SlotName = std::move(SlotName);
	Parms.UserIndex = UserIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.ProjectVersionBlueprint.IsConsoleBuild
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UProjectVersionBlueprint::IsConsoleBuild()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProjectVersionBlueprint", "IsConsoleBuild");

	Params::ProjectVersionBlueprint_IsConsoleBuild Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.ProjectVersionBlueprint.IsEncroachingBlockingGeometry
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           TestActor                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TestLocation                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         TestRotation                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UProjectVersionBlueprint::IsEncroachingBlockingGeometry(const class AActor* TestActor, const struct FVector& TestLocation, const struct FRotator& TestRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProjectVersionBlueprint", "IsEncroachingBlockingGeometry");

	Params::ProjectVersionBlueprint_IsEncroachingBlockingGeometry Parms{};

	Parms.TestActor = TestActor;
	Parms.TestLocation = std::move(TestLocation);
	Parms.TestRotation = std::move(TestRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.ProjectVersionBlueprint.IsEncroachingBlockingGeometryWithAdjustment
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           TestActor                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TestLocation                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         TestRotation                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          Adjust                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UProjectVersionBlueprint::IsEncroachingBlockingGeometryWithAdjustment(const class AActor* TestActor, const struct FVector& TestLocation, const struct FRotator& TestRotation, struct FVector* Adjust)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProjectVersionBlueprint", "IsEncroachingBlockingGeometryWithAdjustment");

	Params::ProjectVersionBlueprint_IsEncroachingBlockingGeometryWithAdjustment Parms{};

	Parms.TestActor = TestActor;
	Parms.TestLocation = std::move(TestLocation);
	Parms.TestRotation = std::move(TestRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Adjust != nullptr)
		*Adjust = std::move(Parms.Adjust);

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.ProjectVersionBlueprint.IsLevelInitializedForActor
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           InActor                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerState*                     PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UProjectVersionBlueprint::IsLevelInitializedForActor(class AActor* InActor, class APlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProjectVersionBlueprint", "IsLevelInitializedForActor");

	Params::ProjectVersionBlueprint_IsLevelInitializedForActor Parms{};

	Parms.InActor = InActor;
	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.ProjectVersionBlueprint.IsLinuxBuild
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UProjectVersionBlueprint::IsLinuxBuild()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProjectVersionBlueprint", "IsLinuxBuild");

	Params::ProjectVersionBlueprint_IsLinuxBuild Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.ProjectVersionBlueprint.IsPendingKill
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UProjectVersionBlueprint::IsPendingKill(class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProjectVersionBlueprint", "IsPendingKill");

	Params::ProjectVersionBlueprint_IsPendingKill Parms{};

	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.ProjectVersionBlueprint.IsPS4Build
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UProjectVersionBlueprint::IsPS4Build()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProjectVersionBlueprint", "IsPS4Build");

	Params::ProjectVersionBlueprint_IsPS4Build Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.ProjectVersionBlueprint.IsSessionDedicatedServer
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FBlueprintSessionResult          Result                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UProjectVersionBlueprint::IsSessionDedicatedServer(const struct FBlueprintSessionResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProjectVersionBlueprint", "IsSessionDedicatedServer");

	Params::ProjectVersionBlueprint_IsSessionDedicatedServer Parms{};

	Parms.Result = std::move(Result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.ProjectVersionBlueprint.IsSwitchBuild
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UProjectVersionBlueprint::IsSwitchBuild()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProjectVersionBlueprint", "IsSwitchBuild");

	Params::ProjectVersionBlueprint_IsSwitchBuild Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.ProjectVersionBlueprint.IsWindowsBuild
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UProjectVersionBlueprint::IsWindowsBuild()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProjectVersionBlueprint", "IsWindowsBuild");

	Params::ProjectVersionBlueprint_IsWindowsBuild Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.ProjectVersionBlueprint.IsXboxBuild
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UProjectVersionBlueprint::IsXboxBuild()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProjectVersionBlueprint", "IsXboxBuild");

	Params::ProjectVersionBlueprint_IsXboxBuild Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.ProjectVersionBlueprint.KickPlayer
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AGameModeBase*                    GameMode                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*                KickedPlayer                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             KickReason                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UProjectVersionBlueprint::KickPlayer(class AGameModeBase* GameMode, class APlayerController* KickedPlayer, const class FText& KickReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProjectVersionBlueprint", "KickPlayer");

	Params::ProjectVersionBlueprint_KickPlayer Parms{};

	Parms.GameMode = GameMode;
	Parms.KickedPlayer = KickedPlayer;
	Parms.KickReason = std::move(KickReason);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.ProjectVersionBlueprint.LoadGameFromFile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           AbsoluteFileName                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   UserIndex                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USaveGame*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USaveGame* UProjectVersionBlueprint::LoadGameFromFile(const class FString& AbsoluteFileName, const int32 UserIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProjectVersionBlueprint", "LoadGameFromFile");

	Params::ProjectVersionBlueprint_LoadGameFromFile Parms{};

	Parms.AbsoluteFileName = std::move(AbsoluteFileName);
	Parms.UserIndex = UserIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.ProjectVersionBlueprint.LoadItemDefinitions
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameInstance*                    GameInstance                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UProjectVersionBlueprint::LoadItemDefinitions(class UGameInstance* GameInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProjectVersionBlueprint", "LoadItemDefinitions");

	Params::ProjectVersionBlueprint_LoadItemDefinitions Parms{};

	Parms.GameInstance = GameInstance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.ProjectVersionBlueprint.LoadPropLayoutFromFile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AbsoluteFileName                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FPropToSave>              PropsToLoad                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FString                           WorkshopID                                             (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FPlaceableStaticToSave>   PlaceableStaticsToLoad                                 (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FPlaceableLightToSave>    PlaceableLightsToLoad                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FSwitchToSave>            SwitchesToLoad                                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FPrefabToSave>            PrefabsToLoad                                          (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UProjectVersionBlueprint::LoadPropLayoutFromFile(const class FString& AbsoluteFileName, TArray<struct FPropToSave>* PropsToLoad, class FString* WorkshopID, TArray<struct FPlaceableStaticToSave>* PlaceableStaticsToLoad, TArray<struct FPlaceableLightToSave>* PlaceableLightsToLoad, TArray<struct FSwitchToSave>* SwitchesToLoad, TArray<struct FPrefabToSave>* PrefabsToLoad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProjectVersionBlueprint", "LoadPropLayoutFromFile");

	Params::ProjectVersionBlueprint_LoadPropLayoutFromFile Parms{};

	Parms.AbsoluteFileName = std::move(AbsoluteFileName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (PropsToLoad != nullptr)
		*PropsToLoad = std::move(Parms.PropsToLoad);

	if (WorkshopID != nullptr)
		*WorkshopID = std::move(Parms.WorkshopID);

	if (PlaceableStaticsToLoad != nullptr)
		*PlaceableStaticsToLoad = std::move(Parms.PlaceableStaticsToLoad);

	if (PlaceableLightsToLoad != nullptr)
		*PlaceableLightsToLoad = std::move(Parms.PlaceableLightsToLoad);

	if (SwitchesToLoad != nullptr)
		*SwitchesToLoad = std::move(Parms.SwitchesToLoad);

	if (PrefabsToLoad != nullptr)
		*PrefabsToLoad = std::move(Parms.PrefabsToLoad);

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.ProjectVersionBlueprint.LoadPropLayoutFromFileCompressed
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AbsoluteFileName                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FPropToSave>              PropsToLoad                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FString                           WorkshopID                                             (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FPlaceableStaticToSave>   PlaceableStaticsToLoad                                 (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FPlaceableLightToSave>    PlaceableLightsToLoad                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FSwitchToSave>            SwitchesToLoad                                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FPrefabToSave>            PrefabsToLoad                                          (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UProjectVersionBlueprint::LoadPropLayoutFromFileCompressed(const class FString& AbsoluteFileName, TArray<struct FPropToSave>* PropsToLoad, class FString* WorkshopID, TArray<struct FPlaceableStaticToSave>* PlaceableStaticsToLoad, TArray<struct FPlaceableLightToSave>* PlaceableLightsToLoad, TArray<struct FSwitchToSave>* SwitchesToLoad, TArray<struct FPrefabToSave>* PrefabsToLoad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProjectVersionBlueprint", "LoadPropLayoutFromFileCompressed");

	Params::ProjectVersionBlueprint_LoadPropLayoutFromFileCompressed Parms{};

	Parms.AbsoluteFileName = std::move(AbsoluteFileName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (PropsToLoad != nullptr)
		*PropsToLoad = std::move(Parms.PropsToLoad);

	if (WorkshopID != nullptr)
		*WorkshopID = std::move(Parms.WorkshopID);

	if (PlaceableStaticsToLoad != nullptr)
		*PlaceableStaticsToLoad = std::move(Parms.PlaceableStaticsToLoad);

	if (PlaceableLightsToLoad != nullptr)
		*PlaceableLightsToLoad = std::move(Parms.PlaceableLightsToLoad);

	if (SwitchesToLoad != nullptr)
		*SwitchesToLoad = std::move(Parms.SwitchesToLoad);

	if (PrefabsToLoad != nullptr)
		*PrefabsToLoad = std::move(Parms.PrefabsToLoad);

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.ProjectVersionBlueprint.PlayReplay
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameInstance*                    GameInstance                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UProjectVersionBlueprint::PlayReplay(class UGameInstance* GameInstance, const class FString& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProjectVersionBlueprint", "PlayReplay");

	Params::ProjectVersionBlueprint_PlayReplay Parms{};

	Parms.GameInstance = GameInstance;
	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.ProjectVersionBlueprint.ReadStringFromFile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           Result                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FullFilePath                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UProjectVersionBlueprint::ReadStringFromFile(class FString* Result, const class FString& FullFilePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProjectVersionBlueprint", "ReadStringFromFile");

	Params::ProjectVersionBlueprint_ReadStringFromFile Parms{};

	Parms.FullFilePath = std::move(FullFilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Result != nullptr)
		*Result = std::move(Parms.Result);

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.ProjectVersionBlueprint.RecordReplay
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameInstance*                    GameInstance                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FriendlyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UProjectVersionBlueprint::RecordReplay(class UGameInstance* GameInstance, const class FString& Name_0, const class FString& FriendlyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProjectVersionBlueprint", "RecordReplay");

	Params::ProjectVersionBlueprint_RecordReplay Parms{};

	Parms.GameInstance = GameInstance;
	Parms.Name_0 = std::move(Name_0);
	Parms.FriendlyName = std::move(FriendlyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.ProjectVersionBlueprint.ResetNetDriverSettings
// (Final, Native, Static, Public, BlueprintCallable)

void UProjectVersionBlueprint::ResetNetDriverSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProjectVersionBlueprint", "ResetNetDriverSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.ProjectVersionBlueprint.SaveGameToFile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USaveGame*                        SaveGameObject                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           AbsoluteFileName                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   UserIndex                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UProjectVersionBlueprint::SaveGameToFile(class USaveGame* SaveGameObject, const class FString& AbsoluteFileName, const int32 UserIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProjectVersionBlueprint", "SaveGameToFile");

	Params::ProjectVersionBlueprint_SaveGameToFile Parms{};

	Parms.SaveGameObject = SaveGameObject;
	Parms.AbsoluteFileName = std::move(AbsoluteFileName);
	Parms.UserIndex = UserIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.ProjectVersionBlueprint.SavePropLayoutToFile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           AbsoluteFileName                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FPropToSave>              PropsToSave                                            (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FString                           WorkshopID                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FPlaceableStaticToSave>   PlaceableStaticsToSave                                 (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FPlaceableLightToSave>    PlaceableLightsToSave                                  (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FSwitchToSave>            SwitchesToSave                                         (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FPrefabToSave>            PrefabsToSave                                          (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UProjectVersionBlueprint::SavePropLayoutToFile(const class FString& AbsoluteFileName, const TArray<struct FPropToSave>& PropsToSave, const class FString& WorkshopID, const TArray<struct FPlaceableStaticToSave>& PlaceableStaticsToSave, const TArray<struct FPlaceableLightToSave>& PlaceableLightsToSave, const TArray<struct FSwitchToSave>& SwitchesToSave, const TArray<struct FPrefabToSave>& PrefabsToSave)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProjectVersionBlueprint", "SavePropLayoutToFile");

	Params::ProjectVersionBlueprint_SavePropLayoutToFile Parms{};

	Parms.AbsoluteFileName = std::move(AbsoluteFileName);
	Parms.PropsToSave = std::move(PropsToSave);
	Parms.WorkshopID = std::move(WorkshopID);
	Parms.PlaceableStaticsToSave = std::move(PlaceableStaticsToSave);
	Parms.PlaceableLightsToSave = std::move(PlaceableLightsToSave);
	Parms.SwitchesToSave = std::move(SwitchesToSave);
	Parms.PrefabsToSave = std::move(PrefabsToSave);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.ProjectVersionBlueprint.SavePropLayoutToFileCompressed
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           AbsoluteFileName                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FPropToSave>              PropsToSave                                            (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FString                           WorkshopID                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FPlaceableStaticToSave>   PlaceableStaticsToSave                                 (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FPlaceableLightToSave>    PlaceableLightsToSave                                  (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FSwitchToSave>            SwitchesToSave                                         (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FPrefabToSave>            PrefabsToSave                                          (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UProjectVersionBlueprint::SavePropLayoutToFileCompressed(const class FString& AbsoluteFileName, const TArray<struct FPropToSave>& PropsToSave, const class FString& WorkshopID, const TArray<struct FPlaceableStaticToSave>& PlaceableStaticsToSave, const TArray<struct FPlaceableLightToSave>& PlaceableLightsToSave, const TArray<struct FSwitchToSave>& SwitchesToSave, const TArray<struct FPrefabToSave>& PrefabsToSave)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProjectVersionBlueprint", "SavePropLayoutToFileCompressed");

	Params::ProjectVersionBlueprint_SavePropLayoutToFileCompressed Parms{};

	Parms.AbsoluteFileName = std::move(AbsoluteFileName);
	Parms.PropsToSave = std::move(PropsToSave);
	Parms.WorkshopID = std::move(WorkshopID);
	Parms.PlaceableStaticsToSave = std::move(PlaceableStaticsToSave);
	Parms.PlaceableLightsToSave = std::move(PlaceableLightsToSave);
	Parms.SwitchesToSave = std::move(SwitchesToSave);
	Parms.PrefabsToSave = std::move(PrefabsToSave);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.ProjectVersionBlueprint.SetCCDEnabled
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              PrimitiveComponent                                     (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UProjectVersionBlueprint::SetCCDEnabled(class UPrimitiveComponent* PrimitiveComponent, bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProjectVersionBlueprint", "SetCCDEnabled");

	Params::ProjectVersionBlueprint_SetCCDEnabled Parms{};

	Parms.PrimitiveComponent = PrimitiveComponent;
	Parms.Enabled = Enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.ProjectVersionBlueprint.SetHiddenShadow
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              PrimitiveComponent                                     (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UProjectVersionBlueprint::SetHiddenShadow(class UPrimitiveComponent* PrimitiveComponent, bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProjectVersionBlueprint", "SetHiddenShadow");

	Params::ProjectVersionBlueprint_SetHiddenShadow Parms{};

	Parms.PrimitiveComponent = PrimitiveComponent;
	Parms.Enabled = Enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.ProjectVersionBlueprint.SetSelfShadowOnly
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              PrimitiveComponent                                     (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UProjectVersionBlueprint::SetSelfShadowOnly(class UPrimitiveComponent* PrimitiveComponent, bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProjectVersionBlueprint", "SetSelfShadowOnly");

	Params::ProjectVersionBlueprint_SetSelfShadowOnly Parms{};

	Parms.PrimitiveComponent = PrimitiveComponent;
	Parms.Enabled = Enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.ProjectVersionBlueprint.SetWorldGravity
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameInstance*                    GameInstance                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Gravity                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UProjectVersionBlueprint::SetWorldGravity(class UGameInstance* GameInstance, float Gravity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProjectVersionBlueprint", "SetWorldGravity");

	Params::ProjectVersionBlueprint_SetWorldGravity Parms{};

	Parms.GameInstance = GameInstance;
	Parms.Gravity = Gravity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.ProjectVersionBlueprint.Shutdown
// (Final, Native, Static, Public, BlueprintCallable)

void UProjectVersionBlueprint::Shutdown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProjectVersionBlueprint", "Shutdown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.ProjectVersionBlueprint.SpawnActorByWorldContextObject
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           Class_0                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       Transform                                              (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESpawnActorCollisionHandlingMethod      CollisionHandling                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UProjectVersionBlueprint::SpawnActorByWorldContextObject(class UObject* WorldContextObject, class UClass* Class_0, const struct FTransform& Transform, ESpawnActorCollisionHandlingMethod CollisionHandling)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProjectVersionBlueprint", "SpawnActorByWorldContextObject");

	Params::ProjectVersionBlueprint_SpawnActorByWorldContextObject Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Class_0 = Class_0;
	Parms.Transform = std::move(Transform);
	Parms.CollisionHandling = CollisionHandling;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.RealTimeClock.GetCurrentDateAndTime
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDateTime                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FDateTime URealTimeClock::GetCurrentDateAndTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeClock", "GetCurrentDateAndTime");

	Params::RealTimeClock_GetCurrentDateAndTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.RealTimeClock.GetCurrentTime
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTimespan                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTimespan URealTimeClock::GetCurrentTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeClock", "GetCurrentTime");

	Params::RealTimeClock_GetCurrentTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.RealTimeClock.GetCurrentTimeInHours
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float URealTimeClock::GetCurrentTimeInHours()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeClock", "GetCurrentTimeInHours");

	Params::RealTimeClock_GetCurrentTimeInHours Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.RealTimeClock.GetCurrentTimeInMilliseconds
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float URealTimeClock::GetCurrentTimeInMilliseconds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeClock", "GetCurrentTimeInMilliseconds");

	Params::RealTimeClock_GetCurrentTimeInMilliseconds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.RealTimeClock.GetCurrentTimeInMinutes
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float URealTimeClock::GetCurrentTimeInMinutes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeClock", "GetCurrentTimeInMinutes");

	Params::RealTimeClock_GetCurrentTimeInMinutes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.RealTimeClock.GetCurrentTimeInSeconds
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float URealTimeClock::GetCurrentTimeInSeconds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeClock", "GetCurrentTimeInSeconds");

	Params::RealTimeClock_GetCurrentTimeInSeconds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.RealTimeClock.GetCurrentTimeInTicks
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float URealTimeClock::GetCurrentTimeInTicks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeClock", "GetCurrentTimeInTicks");

	Params::RealTimeClock_GetCurrentTimeInTicks Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.RealTimeClock.GetCurrentUtcDateAndTime
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   MyTimezone                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDateTime                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FDateTime URealTimeClock::GetCurrentUtcDateAndTime(int32 MyTimezone)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeClock", "GetCurrentUtcDateAndTime");

	Params::RealTimeClock_GetCurrentUtcDateAndTime Parms{};

	Parms.MyTimezone = MyTimezone;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.RealTimeClock.GetCurrentUtcTime
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   MyTimezone                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimespan                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTimespan URealTimeClock::GetCurrentUtcTime(int32 MyTimezone)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeClock", "GetCurrentUtcTime");

	Params::RealTimeClock_GetCurrentUtcTime Parms{};

	Parms.MyTimezone = MyTimezone;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.RealTimeClock.GetCurrentUtcTimeInSeconds
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   MyTimezone                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float URealTimeClock::GetCurrentUtcTimeInSeconds(int32 MyTimezone)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeClock", "GetCurrentUtcTimeInSeconds");

	Params::RealTimeClock_GetCurrentUtcTimeInSeconds Parms{};

	Parms.MyTimezone = MyTimezone;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.SessionSubsystem.GetActiveGameSession
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBlueprintSessionResult          ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FBlueprintSessionResult USessionSubsystem::GetActiveGameSession(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SessionSubsystem", "GetActiveGameSession");

	Params::SessionSubsystem_GetActiveGameSession Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.SkillParameters.GetFormattedTooltip
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText USkillParameters::GetFormattedTooltip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SkillParameters", "GetFormattedTooltip");

	Params::SkillParameters_GetFormattedTooltip Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.StartupSubsystem.BeginStartupPhase
// (Final, Native, Public, BlueprintCallable)

void UStartupSubsystem::BeginStartupPhase()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StartupSubsystem", "BeginStartupPhase");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.StartupSubsystem.CompleteStartupPhase
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Phase                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStartupSubsystem::CompleteStartupPhase(class FName Phase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StartupSubsystem", "CompleteStartupPhase");

	Params::StartupSubsystem_CompleteStartupPhase Parms{};

	Parms.Phase = Phase;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.StartupSubsystem.RegisterStartupPhase
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Phase                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStartupSubsystem::RegisterStartupPhase(class FName Phase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StartupSubsystem", "RegisterStartupPhase");

	Params::StartupSubsystem_RegisterStartupPhase Parms{};

	Parms.Phase = Phase;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.StaticMeshProp.CallHandleWake
// (Event, Public, BlueprintEvent)

void AStaticMeshProp::CallHandleWake()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StaticMeshProp", "CallHandleWake");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PropWitchHuntModule.StaticMeshProp.CallHit
// (Event, Public, BlueprintEvent)

void AStaticMeshProp::CallHit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StaticMeshProp", "CallHit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PropWitchHuntModule.StaticMeshProp.CheckClientSleep
// (Final, Native, Public, BlueprintCallable)

void AStaticMeshProp::CheckClientSleep()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StaticMeshProp", "CheckClientSleep");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.StaticMeshProp.HandleCanJump
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          HitNormal                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  Slope                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AStaticMeshProp::HandleCanJump(const struct FVector& HitNormal, double Slope)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StaticMeshProp", "HandleCanJump");

	Params::StaticMeshProp_HandleCanJump Parms{};

	Parms.HitNormal = std::move(HitNormal);
	Parms.Slope = Slope;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.StaticMeshProp.SetActorSubComponentsTickState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bTickEnabled                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AStaticMeshProp::SetActorSubComponentsTickState(bool bTickEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StaticMeshProp", "SetActorSubComponentsTickState");

	Params::StaticMeshProp_SetActorSubComponentsTickState Parms{};

	Parms.bTickEnabled = bTickEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.StructDataLibrary.ApplyParameterRules
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Parameter                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FUIParam>                 UIParam                                                (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UStructDataLibrary::ApplyParameterRules(class UObject* Parameter, const TArray<struct FUIParam>& UIParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StructDataLibrary", "ApplyParameterRules");

	Params::StructDataLibrary_ApplyParameterRules Parms{};

	Parms.Parameter = Parameter;
	Parms.UIParam = std::move(UIParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.StructDataLibrary.AreParametersEqual
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          FirstParameter                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          SecondParameter                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStructDataLibrary::AreParametersEqual(class UObject* FirstParameter, class UObject* SecondParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StructDataLibrary", "AreParametersEqual");

	Params::StructDataLibrary_AreParametersEqual Parms{};

	Parms.FirstParameter = FirstParameter;
	Parms.SecondParameter = SecondParameter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.StructDataLibrary.GetParameterValue
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          Parameter                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParameterName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FUIParam                         ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FUIParam UStructDataLibrary::GetParameterValue(class UObject* Parameter, class FName ParameterName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StructDataLibrary", "GetParameterValue");

	Params::StructDataLibrary_GetParameterValue Parms{};

	Parms.Parameter = Parameter;
	Parms.ParameterName = ParameterName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.StructDataLibrary.GetUIParameters
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          Parameter                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDataTable*                       UIData                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FUIParameterData>         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FUIParameterData> UStructDataLibrary::GetUIParameters(class UObject* Parameter, class UDataTable* UIData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StructDataLibrary", "GetUIParameters");

	Params::StructDataLibrary_GetUIParameters Parms{};

	Parms.Parameter = Parameter;
	Parms.UIData = UIData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.TickableBaseManager.BPTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTickableBaseManager::BPTick(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TickableBaseManager", "BPTick");

	Params::TickableBaseManager_BPTick Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction PropWitchHuntModule.TljhUserControllerSystem.ActiveUserInfoUpdatedSignature__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParams)
// Parameters:
// struct FSlateBrush                      IconBrush                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           DisplayString                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTljhUserControllerSystem::ActiveUserInfoUpdatedSignature__DelegateSignature(const struct FSlateBrush& IconBrush, const class FString& DisplayString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TljhUserControllerSystem", "ActiveUserInfoUpdatedSignature__DelegateSignature");

	Params::TljhUserControllerSystem_ActiveUserInfoUpdatedSignature__DelegateSignature Parms{};

	Parms.IconBrush = std::move(IconBrush);
	Parms.DisplayString = std::move(DisplayString);

	UObject::ProcessEvent(Func, &Parms);
}


// Function PropWitchHuntModule.TljhUserControllerSystem.EstablishInitialUser
// (Final, Native, Public, BlueprintCallable)

void UTljhUserControllerSystem::EstablishInitialUser()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TljhUserControllerSystem", "EstablishInitialUser");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction PropWitchHuntModule.TljhUserControllerSystem.HideUserReestablishMessageSignature__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UTljhUserControllerSystem::HideUserReestablishMessageSignature__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TljhUserControllerSystem", "HideUserReestablishMessageSignature__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PropWitchHuntModule.TljhUserControllerSystem.Initialize
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UGameInstance*                    GameInstance_0                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTljhUserControllerSystem::Initialize(class UGameInstance* GameInstance_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TljhUserControllerSystem", "Initialize");

	Params::TljhUserControllerSystem_Initialize Parms{};

	Parms.GameInstance_0 = GameInstance_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction PropWitchHuntModule.TljhUserControllerSystem.NewUserEstablishedSignature__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UTljhUserControllerSystem::NewUserEstablishedSignature__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TljhUserControllerSystem", "NewUserEstablishedSignature__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction PropWitchHuntModule.TljhUserControllerSystem.OnInputChangedSignature__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    bIsGamepad                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTljhUserControllerSystem::OnInputChangedSignature__DelegateSignature(bool bIsGamepad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TljhUserControllerSystem", "OnInputChangedSignature__DelegateSignature");

	Params::TljhUserControllerSystem_OnInputChangedSignature__DelegateSignature Parms{};

	Parms.bIsGamepad = bIsGamepad;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction PropWitchHuntModule.TljhUserControllerSystem.OnPushToTalkChangedSignature__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    bIsTalking                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTljhUserControllerSystem::OnPushToTalkChangedSignature__DelegateSignature(bool bIsTalking)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TljhUserControllerSystem", "OnPushToTalkChangedSignature__DelegateSignature");

	Params::TljhUserControllerSystem_OnPushToTalkChangedSignature__DelegateSignature Parms{};

	Parms.bIsTalking = bIsTalking;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PropWitchHuntModule.TljhUserControllerSystem.OpenAccountPicker_BP
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTljhUserControllerSystem::OpenAccountPicker_BP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TljhUserControllerSystem", "OpenAccountPicker_BP");

	Params::TljhUserControllerSystem_OpenAccountPicker_BP Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction PropWitchHuntModule.TljhUserControllerSystem.RefreshUserSignature__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UTljhUserControllerSystem::RefreshUserSignature__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TljhUserControllerSystem", "RefreshUserSignature__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction PropWitchHuntModule.TljhUserControllerSystem.ShowUserReestablishMessageSignature__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParams)
// Parameters:
// EEstablishUserReason                    EstablishUserReason                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTljhUserControllerSystem::ShowUserReestablishMessageSignature__DelegateSignature(const EEstablishUserReason& EstablishUserReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TljhUserControllerSystem", "ShowUserReestablishMessageSignature__DelegateSignature");

	Params::TljhUserControllerSystem_ShowUserReestablishMessageSignature__DelegateSignature Parms{};

	Parms.EstablishUserReason = EstablishUserReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PropWitchHuntModule.TljhUserControllerSystem.GetActiveUserDisplayInfo
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    Supported                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSlateBrush                      Icon                                                   (Parm, OutParm, NativeAccessSpecifierPublic)
// class FString                           DisplayName                                            (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTljhUserControllerSystem::GetActiveUserDisplayInfo(bool* Supported, struct FSlateBrush* Icon, class FString* DisplayName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TljhUserControllerSystem", "GetActiveUserDisplayInfo");

	Params::TljhUserControllerSystem_GetActiveUserDisplayInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Supported != nullptr)
		*Supported = Parms.Supported;

	if (Icon != nullptr)
		*Icon = std::move(Parms.Icon);

	if (DisplayName != nullptr)
		*DisplayName = std::move(Parms.DisplayName);
}


// Function PropWitchHuntModule.TljhUserControllerSystem.HasEstablishedInitialUser
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTljhUserControllerSystem::HasEstablishedInitialUser() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TljhUserControllerSystem", "HasEstablishedInitialUser");

	Params::TljhUserControllerSystem_HasEstablishedInitialUser Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.TljhUserControllerSystem.IsAccountPickerSupported
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTljhUserControllerSystem::IsAccountPickerSupported() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TljhUserControllerSystem", "IsAccountPickerSupported");

	Params::TljhUserControllerSystem_IsAccountPickerSupported Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.CreateUGCItemCallbackProxy.CreateWorkshopItem
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCreateUGCItemCallbackProxy*      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCreateUGCItemCallbackProxy* UCreateUGCItemCallbackProxy::CreateWorkshopItem(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CreateUGCItemCallbackProxy", "CreateWorkshopItem");

	Params::CreateUGCItemCallbackProxy_CreateWorkshopItem Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.UpdateUGCItemCallbackProxy.UpdateWorkshopItem
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   ItemIdToUpdate                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ChangeNote                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Title                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Description                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Language                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           MetaData                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUGCItemVisibility                      Visibility                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   Tags                                                   (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TMap<class FString, class FString>      KeyValueTags                                           (Parm, NativeAccessSpecifierPublic)
// class FString                           ContentFolder                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PreviewFile                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUpdateUGCItemCallbackProxy*      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUpdateUGCItemCallbackProxy* UUpdateUGCItemCallbackProxy::UpdateWorkshopItem(class UObject* WorldContextObject, int64 ItemIdToUpdate, const class FString& ChangeNote, const class FString& Title, const class FString& Description, const class FString& Language, const class FString& MetaData, EUGCItemVisibility Visibility, const TArray<class FString>& Tags, const TMap<class FString, class FString>& KeyValueTags, const class FString& ContentFolder, const class FString& PreviewFile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UpdateUGCItemCallbackProxy", "UpdateWorkshopItem");

	Params::UpdateUGCItemCallbackProxy_UpdateWorkshopItem Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ItemIdToUpdate = ItemIdToUpdate;
	Parms.ChangeNote = std::move(ChangeNote);
	Parms.Title = std::move(Title);
	Parms.Description = std::move(Description);
	Parms.Language = std::move(Language);
	Parms.MetaData = std::move(MetaData);
	Parms.Visibility = Visibility;
	Parms.Tags = std::move(Tags);
	Parms.KeyValueTags = std::move(KeyValueTags);
	Parms.ContentFolder = std::move(ContentFolder);
	Parms.PreviewFile = std::move(PreviewFile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.WindForceComponent.SetMesh
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMeshComponent*                   MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWindForceComponent::SetMesh(class UMeshComponent* MeshComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WindForceComponent", "SetMesh");

	Params::WindForceComponent_SetMesh Parms{};

	Parms.MeshComponent = MeshComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.WitchItBeaconClient.ClientPing
// (Net, NetReliable, Native, Event, Public, NetClient)

void AWitchItBeaconClient::ClientPing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WitchItBeaconClient", "ClientPing");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.WitchItBeaconClient.ServerPing
// (Net, NetReliable, Native, Event, Public, NetServer)

void AWitchItBeaconClient::ServerPing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WitchItBeaconClient", "ServerPing");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.WitchItGameInstance.AddPlayerLookupEntry
// (Final, Native, Public, HasOutParams)
// Parameters:
// struct FUniqueNetIdRepl                 UniqueNetId                                            (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           NativePlatformId                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           NativePlatform                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWitchItGameInstance::AddPlayerLookupEntry(const struct FUniqueNetIdRepl& UniqueNetId, const class FString& NativePlatformId, const class FString& NativePlatform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WitchItGameInstance", "AddPlayerLookupEntry");

	Params::WitchItGameInstance_AddPlayerLookupEntry Parms{};

	Parms.UniqueNetId = std::move(UniqueNetId);
	Parms.NativePlatformId = std::move(NativePlatformId);
	Parms.NativePlatform = std::move(NativePlatform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.WitchItGameInstance.BeginLoadingScreen
// (Final, Native, Private)
// Parameters:
// class FString                           String                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWitchItGameInstance::BeginLoadingScreen(const class FString& String)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WitchItGameInstance", "BeginLoadingScreen");

	Params::WitchItGameInstance_BeginLoadingScreen Parms{};

	Parms.String = std::move(String);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.WitchItGameInstance.EndLoadingScreen
// (Final, Native, Private)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWitchItGameInstance::EndLoadingScreen(class UWorld* World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WitchItGameInstance", "EndLoadingScreen");

	Params::WitchItGameInstance_EndLoadingScreen Parms{};

	Parms.World = World;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.WitchItGameInstance.OnNetworkFailure
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// ENetworkFailure                         FailureType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorText                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsServer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWitchItGameInstance::OnNetworkFailure(ENetworkFailure FailureType, const class FString& ErrorText, bool IsServer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WitchItGameInstance", "OnNetworkFailure");

	Params::WitchItGameInstance_OnNetworkFailure Parms{};

	Parms.FailureType = FailureType;
	Parms.ErrorText = std::move(ErrorText);
	Parms.IsServer = IsServer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.WitchItGameInstance.RemovePlayerLookupEntry
// (Final, Native, Public, HasOutParams)
// Parameters:
// struct FUniqueNetIdRepl                 UniqueNetId                                            (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWitchItGameInstance::RemovePlayerLookupEntry(const struct FUniqueNetIdRepl& UniqueNetId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WitchItGameInstance", "RemovePlayerLookupEntry");

	Params::WitchItGameInstance_RemovePlayerLookupEntry Parms{};

	Parms.UniqueNetId = std::move(UniqueNetId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.WitchItGameInstance.SetSuspendInBackground
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ShouldSuspend                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWitchItGameInstance::SetSuspendInBackground(bool ShouldSuspend)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WitchItGameInstance", "SetSuspendInBackground");

	Params::WitchItGameInstance_SetSuspendInBackground Parms{};

	Parms.ShouldSuspend = ShouldSuspend;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.WitchItGameInstance.GetNativePlatformInfo
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FUniqueNetIdRepl                 UniqueNetId                                            (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           NativePlatformId                                       (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           NativePlatform                                         (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWitchItGameInstance::GetNativePlatformInfo(const struct FUniqueNetIdRepl& UniqueNetId, class FString* NativePlatformId, class FString* NativePlatform) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WitchItGameInstance", "GetNativePlatformInfo");

	Params::WitchItGameInstance_GetNativePlatformInfo Parms{};

	Parms.UniqueNetId = std::move(UniqueNetId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (NativePlatformId != nullptr)
		*NativePlatformId = std::move(Parms.NativePlatformId);

	if (NativePlatform != nullptr)
		*NativePlatform = std::move(Parms.NativePlatform);

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.WitchItPlayerState.PostOnRepPlayerName
// (Event, Public, BlueprintEvent)
// Parameters:
// class FString                           NewPlayerName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AWitchItPlayerState::PostOnRepPlayerName(const class FString& NewPlayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WitchItPlayerState", "PostOnRepPlayerName");

	Params::WitchItPlayerState_PostOnRepPlayerName Parms{};

	Parms.NewPlayerName = std::move(NewPlayerName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function PropWitchHuntModule.WitchItPlayerState.SetSafePlayerName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           SafePlayerName                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AWitchItPlayerState::SetSafePlayerName(const class FString& SafePlayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WitchItPlayerState", "SetSafePlayerName");

	Params::WitchItPlayerState_SetSafePlayerName Parms{};

	Parms.SafePlayerName = std::move(SafePlayerName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PropWitchHuntModule.CallbackProxyCreateWorkshopItemBRG.Workshop_CreateItem
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FWorkshopUpdateDetails           ItemDetails                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UCallbackProxyCreateWorkshopItemBRG*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCallbackProxyCreateWorkshopItemBRG* UCallbackProxyCreateWorkshopItemBRG::Workshop_CreateItem(const struct FWorkshopUpdateDetails& ItemDetails)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CallbackProxyCreateWorkshopItemBRG", "Workshop_CreateItem");

	Params::CallbackProxyCreateWorkshopItemBRG_Workshop_CreateItem Parms{};

	Parms.ItemDetails = std::move(ItemDetails);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.CallbackProxyUpdateWorkshopItemBRG.Workshop_UpdateItem
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FUGCItemId                       ItemId                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FWorkshopUpdateDetails           UpdateDetails                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FUGCUpdateHandle& UpdateHandle)>OnUpdateStarted                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCallbackProxyUpdateWorkshopItemBRG*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCallbackProxyUpdateWorkshopItemBRG* UCallbackProxyUpdateWorkshopItemBRG::Workshop_UpdateItem(const struct FUGCItemId& ItemId, const struct FWorkshopUpdateDetails& UpdateDetails, const TDelegate<void(const struct FUGCUpdateHandle& UpdateHandle)>& OnUpdateStarted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CallbackProxyUpdateWorkshopItemBRG", "Workshop_UpdateItem");

	Params::CallbackProxyUpdateWorkshopItemBRG_Workshop_UpdateItem Parms{};

	Parms.ItemId = std::move(ItemId);
	Parms.UpdateDetails = std::move(UpdateDetails);
	Parms.OnUpdateStarted = OnUpdateStarted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.CallbackProxyQueryWorkshopForItemDetailsBRG.Workshop_QueryForItemDetails
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FUGCQueryParameterDetails        Parameter                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UCallbackProxyQueryWorkshopForItemDetailsBRG*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCallbackProxyQueryWorkshopForItemDetailsBRG* UCallbackProxyQueryWorkshopForItemDetailsBRG::Workshop_QueryForItemDetails(const struct FUGCQueryParameterDetails& Parameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CallbackProxyQueryWorkshopForItemDetailsBRG", "Workshop_QueryForItemDetails");

	Params::CallbackProxyQueryWorkshopForItemDetailsBRG_Workshop_QueryForItemDetails Parms{};

	Parms.Parameter = std::move(Parameter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.WorkshopGeneralLibrary.BreakUInt64BRG
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FUInt64BRG                       InVal                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   OutVal                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWorkshopGeneralLibrary::BreakUInt64BRG(const struct FUInt64BRG& InVal, int32* OutVal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("WorkshopGeneralLibrary", "BreakUInt64BRG");

	Params::WorkshopGeneralLibrary_BreakUInt64BRG Parms{};

	Parms.InVal = std::move(InVal);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutVal != nullptr)
		*OutVal = Parms.OutVal;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.WorkshopGeneralLibrary.FromString_UInt64BRG
// (Final, Native, Static, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FUInt64BRG                       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FUInt64BRG UWorkshopGeneralLibrary::FromString_UInt64BRG(const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("WorkshopGeneralLibrary", "FromString_UInt64BRG");

	Params::WorkshopGeneralLibrary_FromString_UInt64BRG Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.WorkshopGeneralLibrary.ToString_UInt64BRG
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FUInt64BRG                       Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UWorkshopGeneralLibrary::ToString_UInt64BRG(const struct FUInt64BRG& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("WorkshopGeneralLibrary", "ToString_UInt64BRG");

	Params::WorkshopGeneralLibrary_ToString_UInt64BRG Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.WorkshopLibrary.MakeWorkshopUpdateDetails
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Title                                                  (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Description                                            (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           UpdateNotice                                           (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           MetaData                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   Tags                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FKeyValuePairBRG>         KeyValueTags                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ContentDirectory                                       (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PreviewImage                                           (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   AdditionalImages                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class FString>                   YoutubeVideoIDs                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class FString>                   KeysOfKeyValueTagsToRemove                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<int32>                           IndexOfPreviewToRemove                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// ESupportedLanguages                     UpdateLanguage                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EItemVisibility                         Visibility                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FWorkshopUpdateDetails           ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FWorkshopUpdateDetails UWorkshopLibrary::MakeWorkshopUpdateDetails(const class FString& Title, const class FString& Description, const class FString& UpdateNotice, const class FString& MetaData, const TArray<class FString>& Tags, const TArray<struct FKeyValuePairBRG>& KeyValueTags, const class FString& ContentDirectory, const class FString& PreviewImage, const TArray<class FString>& AdditionalImages, const TArray<class FString>& YoutubeVideoIDs, const TArray<class FString>& KeysOfKeyValueTagsToRemove, const TArray<int32>& IndexOfPreviewToRemove, const ESupportedLanguages UpdateLanguage, const EItemVisibility Visibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("WorkshopLibrary", "MakeWorkshopUpdateDetails");

	Params::WorkshopLibrary_MakeWorkshopUpdateDetails Parms{};

	Parms.Title = std::move(Title);
	Parms.Description = std::move(Description);
	Parms.UpdateNotice = std::move(UpdateNotice);
	Parms.MetaData = std::move(MetaData);
	Parms.Tags = std::move(Tags);
	Parms.KeyValueTags = std::move(KeyValueTags);
	Parms.ContentDirectory = std::move(ContentDirectory);
	Parms.PreviewImage = std::move(PreviewImage);
	Parms.AdditionalImages = std::move(AdditionalImages);
	Parms.YoutubeVideoIDs = std::move(YoutubeVideoIDs);
	Parms.KeysOfKeyValueTagsToRemove = std::move(KeysOfKeyValueTagsToRemove);
	Parms.IndexOfPreviewToRemove = std::move(IndexOfPreviewToRemove);
	Parms.UpdateLanguage = UpdateLanguage;
	Parms.Visibility = Visibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.WorkshopLibrary.Workshop_GetItemInstallInfo
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FUGCItemId                       ItemId                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FWorkshopItemInstallInfo         Info                                                   (Parm, OutParm, NativeAccessSpecifierPublic)
// EResultBRGBP                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EResultBRGBP UWorkshopLibrary::Workshop_GetItemInstallInfo(const struct FUGCItemId& ItemId, struct FWorkshopItemInstallInfo* Info)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("WorkshopLibrary", "Workshop_GetItemInstallInfo");

	Params::WorkshopLibrary_Workshop_GetItemInstallInfo Parms{};

	Parms.ItemId = std::move(ItemId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Info != nullptr)
		*Info = std::move(Parms.Info);

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.WorkshopLibrary.Workshop_GetNumSubscribedItems
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UWorkshopLibrary::Workshop_GetNumSubscribedItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("WorkshopLibrary", "Workshop_GetNumSubscribedItems");

	Params::WorkshopLibrary_Workshop_GetNumSubscribedItems Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PropWitchHuntModule.WorkshopLibrary.Workshop_GetSubscribedItems
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   MaxNumItemsToReturn                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FUGCItemId>               OutItems                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UWorkshopLibrary::Workshop_GetSubscribedItems(const int32 MaxNumItemsToReturn, TArray<struct FUGCItemId>* OutItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("WorkshopLibrary", "Workshop_GetSubscribedItems");

	Params::WorkshopLibrary_Workshop_GetSubscribedItems Parms{};

	Parms.MaxNumItemsToReturn = MaxNumItemsToReturn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutItems != nullptr)
		*OutItems = std::move(Parms.OutItems);
}

}

