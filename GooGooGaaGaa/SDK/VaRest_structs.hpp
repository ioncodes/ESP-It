#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VaRest

#include "Basic.hpp"


namespace SDK
{

// Enum VaRest.EVaJson
// NumValues: 0x0008
enum class EVaJson : uint8
{
	None                                     = 0,
	Null                                     = 1,
	String                                   = 2,
	Number                                   = 3,
	Boolean                                  = 4,
	Array                                    = 5,
	Object                                   = 6,
	EVaJson_MAX                              = 7,
};

// Enum VaRest.EVaRestRequestVerb
// NumValues: 0x0006
enum class EVaRestRequestVerb : uint8
{
	GET                                      = 0,
	POST                                     = 1,
	PUT                                      = 2,
	DEL                                      = 3,
	CUSTOM                                   = 4,
	EVaRestRequestVerb_MAX                   = 5,
};

// Enum VaRest.EVaRestRequestContentType
// NumValues: 0x0005
enum class EVaRestRequestContentType : uint8
{
	X_www_form_urlencoded_url                = 0,
	X_www_form_urlencoded_body               = 1,
	Json                                     = 2,
	binary                                   = 3,
	EVaRestRequestContentType_MAX            = 4,
};

// Enum VaRest.EVaRestRequestStatus
// NumValues: 0x0006
enum class EVaRestRequestStatus : uint8
{
	NotStarted                               = 0,
	Processing                               = 1,
	Failed                                   = 2,
	Failed_ConnectionError                   = 3,
	Succeeded                                = 4,
	EVaRestRequestStatus_MAX                 = 5,
};

// Enum VaRest.EVaRestHttpStatusCode
// NumValues: 0x002A
enum class EVaRestHttpStatusCode : uint8
{
	Unknown                                  = 0,
	Continue                                 = 100,
	SwitchProtocol                           = 101,
	Ok                                       = 200,
	Created                                  = 201,
	Accepted                                 = 202,
	Partial                                  = 203,
	NoContent                                = 204,
	ResetContent                             = 205,
	PartialContent                           = 206,
	Ambiguous                                = 300,
	Moved                                    = 301,
	Redirect                                 = 302,
	RedirectMethod                           = 303,
	NotModified                              = 304,
	UseProxy                                 = 305,
	RedirectKeepVerb                         = 307,
	BadRequest                               = 400,
	Denied                                   = 401,
	PaymentReq                               = 402,
	Forbidden                                = 403,
	NotFound                                 = 404,
	BadMethod                                = 405,
	NoneAcceptable                           = 406,
	ProxyAuthReq                             = 407,
	RequestTimeout                           = 408,
	Conflict                                 = 409,
	Gone                                     = 410,
	LengthRequired                           = 411,
	PrecondFailed                            = 412,
	RequestTooLarge                          = 413,
	UriTooLong                               = 414,
	UnsupportedMedia                         = 415,
	TooManyRequests                          = 429,
	RetryWith                                = 449,
	ServerError                              = 500,
	NotSupported                             = 501,
	BadGateway                               = 502,
	ServiceUnavail                           = 503,
	GatewayTimeout                           = 504,
	VersionNotSup                            = 505,
	EVaRestHttpStatusCode_MAX                = 506,
};

// ScriptStruct VaRest.VaRestCallResponse
// 0x0028 (0x0028 - 0x0000)
struct FVaRestCallResponse final
{
public:
	class UVaRestRequestJSON*                     Request;                                           // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class UVaRestRequestJSON* Request)> Callback;                                          // 0x0008(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C78[0x10];                                    // 0x0018(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVaRestCallResponse) == 0x000008, "Wrong alignment on FVaRestCallResponse");
static_assert(sizeof(FVaRestCallResponse) == 0x000028, "Wrong size on FVaRestCallResponse");
static_assert(offsetof(FVaRestCallResponse, Request) == 0x000000, "Member 'FVaRestCallResponse::Request' has a wrong offset!");
static_assert(offsetof(FVaRestCallResponse, Callback) == 0x000008, "Member 'FVaRestCallResponse::Callback' has a wrong offset!");

// ScriptStruct VaRest.VaRestURL
// 0x0068 (0x0068 - 0x0000)
struct FVaRestURL final
{
public:
	class FString                                 Protocol;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Host;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Valid;                                             // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Map;                                               // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RedirectURL;                                       // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Op;                                                // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class FString                                 Portal;                                            // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVaRestURL) == 0x000008, "Wrong alignment on FVaRestURL");
static_assert(sizeof(FVaRestURL) == 0x000068, "Wrong size on FVaRestURL");
static_assert(offsetof(FVaRestURL, Protocol) == 0x000000, "Member 'FVaRestURL::Protocol' has a wrong offset!");
static_assert(offsetof(FVaRestURL, Host) == 0x000010, "Member 'FVaRestURL::Host' has a wrong offset!");
static_assert(offsetof(FVaRestURL, Port) == 0x000020, "Member 'FVaRestURL::Port' has a wrong offset!");
static_assert(offsetof(FVaRestURL, Valid) == 0x000024, "Member 'FVaRestURL::Valid' has a wrong offset!");
static_assert(offsetof(FVaRestURL, Map) == 0x000028, "Member 'FVaRestURL::Map' has a wrong offset!");
static_assert(offsetof(FVaRestURL, RedirectURL) == 0x000038, "Member 'FVaRestURL::RedirectURL' has a wrong offset!");
static_assert(offsetof(FVaRestURL, Op) == 0x000048, "Member 'FVaRestURL::Op' has a wrong offset!");
static_assert(offsetof(FVaRestURL, Portal) == 0x000058, "Member 'FVaRestURL::Portal' has a wrong offset!");

}

