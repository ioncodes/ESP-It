#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RigVM

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "StructUtils_structs.hpp"
#include "Engine_structs.hpp"
#include "AnimationCore_structs.hpp"


namespace SDK
{

// Enum RigVM.ERigVMPinDirection
// NumValues: 0x0007
enum class ERigVMPinDirection : uint8
{
	Input                                    = 0,
	Output                                   = 1,
	IO                                       = 2,
	Visible                                  = 3,
	Hidden                                   = 4,
	Invalid                                  = 5,
	ERigVMPinDirection_MAX                   = 6,
};

// Enum RigVM.ERigVMFunctionArgumentDirection
// NumValues: 0x0004
enum class ERigVMFunctionArgumentDirection : uint8
{
	Input                                    = 0,
	Output                                   = 1,
	Invalid                                  = 2,
	ERigVMFunctionArgumentDirection_MAX      = 3,
};

// Enum RigVM.ERigVMTransformSpace
// NumValues: 0x0003
enum class ERigVMTransformSpace : uint8
{
	LocalSpace                               = 0,
	GlobalSpace                              = 1,
	Max                                      = 2,
};

// Enum RigVM.ERigVMClampSpatialMode
// NumValues: 0x0005
enum class ERigVMClampSpatialMode : uint8
{
	Plane                                    = 0,
	Cylinder                                 = 1,
	Sphere                                   = 2,
	Capsule                                  = 3,
	ERigVMClampSpatialMode_MAX               = 4,
};

// Enum RigVM.ERigVMParameterType
// NumValues: 0x0004
enum class ERigVMParameterType : uint8
{
	Input                                    = 0,
	Output                                   = 1,
	Invalid                                  = 2,
	ERigVMParameterType_MAX                  = 3,
};

// Enum RigVM.ERigVMOpCode
// NumValues: 0x006B
enum class ERigVMOpCode : uint8
{
	Execute_0_Operands                       = 0,
	Execute_1_Operands                       = 1,
	Execute_2_Operands                       = 2,
	Execute_3_Operands                       = 3,
	Execute_4_Operands                       = 4,
	Execute_5_Operands                       = 5,
	Execute_6_Operands                       = 6,
	Execute_7_Operands                       = 7,
	Execute_8_Operands                       = 8,
	Execute_9_Operands                       = 9,
	Execute_10_Operands                      = 10,
	Execute_11_Operands                      = 11,
	Execute_12_Operands                      = 12,
	Execute_13_Operands                      = 13,
	Execute_14_Operands                      = 14,
	Execute_15_Operands                      = 15,
	Execute_16_Operands                      = 16,
	Execute_17_Operands                      = 17,
	Execute_18_Operands                      = 18,
	Execute_19_Operands                      = 19,
	Execute_20_Operands                      = 20,
	Execute_21_Operands                      = 21,
	Execute_22_Operands                      = 22,
	Execute_23_Operands                      = 23,
	Execute_24_Operands                      = 24,
	Execute_25_Operands                      = 25,
	Execute_26_Operands                      = 26,
	Execute_27_Operands                      = 27,
	Execute_28_Operands                      = 28,
	Execute_29_Operands                      = 29,
	Execute_30_Operands                      = 30,
	Execute_31_Operands                      = 31,
	Execute_32_Operands                      = 32,
	Execute_33_Operands                      = 33,
	Execute_34_Operands                      = 34,
	Execute_35_Operands                      = 35,
	Execute_36_Operands                      = 36,
	Execute_37_Operands                      = 37,
	Execute_38_Operands                      = 38,
	Execute_39_Operands                      = 39,
	Execute_40_Operands                      = 40,
	Execute_41_Operands                      = 41,
	Execute_42_Operands                      = 42,
	Execute_43_Operands                      = 43,
	Execute_44_Operands                      = 44,
	Execute_45_Operands                      = 45,
	Execute_46_Operands                      = 46,
	Execute_47_Operands                      = 47,
	Execute_48_Operands                      = 48,
	Execute_49_Operands                      = 49,
	Execute_50_Operands                      = 50,
	Execute_51_Operands                      = 51,
	Execute_52_Operands                      = 52,
	Execute_53_Operands                      = 53,
	Execute_54_Operands                      = 54,
	Execute_55_Operands                      = 55,
	Execute_56_Operands                      = 56,
	Execute_57_Operands                      = 57,
	Execute_58_Operands                      = 58,
	Execute_59_Operands                      = 59,
	Execute_60_Operands                      = 60,
	Execute_61_Operands                      = 61,
	Execute_62_Operands                      = 62,
	Execute_63_Operands                      = 63,
	Execute_64_Operands                      = 64,
	Zero                                     = 65,
	BoolFalse                                = 66,
	BoolTrue                                 = 67,
	Copy                                     = 68,
	Increment                                = 69,
	Decrement                                = 70,
	Equals                                   = 71,
	NotEquals                                = 72,
	JumpAbsolute                             = 73,
	JumpForward                              = 74,
	JumpBackward                             = 75,
	JumpAbsoluteIf                           = 76,
	JumpForwardIf                            = 77,
	JumpBackwardIf                           = 78,
	ChangeType                               = 79,
	Exit                                     = 80,
	BeginBlock                               = 81,
	EndBlock                                 = 82,
	ArrayReset                               = 83,
	ArrayGetNum                              = 84,
	ArraySetNum                              = 85,
	ArrayGetAtIndex                          = 86,
	ArraySetAtIndex                          = 87,
	ArrayAdd                                 = 88,
	ArrayInsert                              = 89,
	ArrayRemove                              = 90,
	ArrayFind                                = 91,
	ArrayAppend                              = 92,
	ArrayClone                               = 93,
	ArrayIterator                            = 94,
	ArrayUnion                               = 95,
	ArrayDifference                          = 96,
	ArrayIntersection                        = 97,
	ArrayReverse                             = 98,
	InvokeEntry                              = 99,
	JumpToBranch                             = 100,
	Execute                                  = 101,
	RunInstructions                          = 102,
	Invalid                                  = 103,
	FirstArrayOpCode                         = 83,
	LastArrayOpCode                          = 98,
	ERigVMOpCode_MAX                         = 104,
};

// Enum RigVM.ERigVMCopyType
// NumValues: 0x0004
enum class ERigVMCopyType : uint8
{
	Default                                  = 0,
	FloatToDouble                            = 1,
	DoubleToFloat                            = 2,
	ERigVMCopyType_MAX                       = 3,
};

// Enum RigVM.ERigVMBreakpointAction
// NumValues: 0x0006
enum class ERigVMBreakpointAction : uint8
{
	None                                     = 0,
	Resume                                   = 1,
	StepOver                                 = 2,
	StepInto                                 = 3,
	StepOut                                  = 4,
	Max                                      = 5,
};

// Enum RigVM.ERigVMDrawSettings
// NumValues: 0x0005
enum class ERigVMDrawSettings : uint8
{
	Points                                   = 0,
	Lines                                    = 1,
	LineStrip                                = 2,
	DynamicMesh                              = 3,
	ERigVMDrawSettings_MAX                   = 4,
};

// Enum RigVM.ERigVMMemoryType
// NumValues: 0x0006
enum class ERigVMMemoryType : uint8
{
	Work                                     = 0,
	Literal                                  = 1,
	External                                 = 2,
	Debug                                    = 3,
	Invalid                                  = 4,
	ERigVMMemoryType_MAX                     = 5,
};

// Enum RigVM.ERigVMRegisterType
// NumValues: 0x0006
enum class ERigVMRegisterType : uint8
{
	Plain                                    = 0,
	String                                   = 1,
	Name                                     = 2,
	Struct                                   = 3,
	Invalid                                  = 4,
	ERigVMRegisterType_MAX                   = 5,
};

// Enum RigVM.ERigVMUserWorkflowType
// NumValues: 0x0006
enum class ERigVMUserWorkflowType : uint8
{
	Invalid                                  = 0,
	NodeContext                              = 1,
	PinContext                               = 2,
	OnPinDefaultChanged                      = 4,
	All                                      = 7,
	ERigVMUserWorkflowType_MAX               = 8,
};

// Enum RigVM.ERigUnitDebugPointMode
// NumValues: 0x0003
enum class ERigUnitDebugPointMode : uint8
{
	Point                                    = 0,
	Vector                                   = 1,
	Max                                      = 2,
};

// Enum RigVM.ERigUnitDebugTransformMode
// NumValues: 0x0004
enum class ERigUnitDebugTransformMode : uint8
{
	Point                                    = 0,
	Axes                                     = 1,
	Box                                      = 2,
	Max                                      = 3,
};

// Enum RigVM.ERigUnitVisualDebugPointMode
// NumValues: 0x0003
enum class ERigUnitVisualDebugPointMode : uint8
{
	Point                                    = 0,
	Vector                                   = 1,
	Max                                      = 2,
};

// Enum RigVM.ERBFKernelType
// NumValues: 0x0006
enum class ERBFKernelType : uint8
{
	Gaussian                                 = 0,
	Exponential                              = 1,
	Linear                                   = 2,
	Cubic                                    = 3,
	Quintic                                  = 4,
	ERBFKernelType_MAX                       = 5,
};

// Enum RigVM.ERBFQuatDistanceType
// NumValues: 0x0005
enum class ERBFQuatDistanceType : uint8
{
	Euclidean                                = 0,
	ArcLength                                = 1,
	SwingAngle                               = 2,
	TwistAngle                               = 3,
	ERBFQuatDistanceType_MAX                 = 4,
};

// Enum RigVM.ERBFVectorDistanceType
// NumValues: 0x0004
enum class ERBFVectorDistanceType : uint8
{
	Euclidean                                = 0,
	Manhattan                                = 1,
	ArcLength                                = 2,
	ERBFVectorDistanceType_MAX               = 3,
};

// Enum RigVM.ERigVMAnimEasingType
// NumValues: 0x0020
enum class ERigVMAnimEasingType : uint8
{
	Linear                                   = 0,
	QuadraticEaseIn                          = 1,
	QuadraticEaseOut                         = 2,
	QuadraticEaseInOut                       = 3,
	CubicEaseIn                              = 4,
	CubicEaseOut                             = 5,
	CubicEaseInOut                           = 6,
	QuarticEaseIn                            = 7,
	QuarticEaseOut                           = 8,
	QuarticEaseInOut                         = 9,
	QuinticEaseIn                            = 10,
	QuinticEaseOut                           = 11,
	QuinticEaseInOut                         = 12,
	SineEaseIn                               = 13,
	SineEaseOut                              = 14,
	SineEaseInOut                            = 15,
	CircularEaseIn                           = 16,
	CircularEaseOut                          = 17,
	CircularEaseInOut                        = 18,
	ExponentialEaseIn                        = 19,
	ExponentialEaseOut                       = 20,
	ExponentialEaseInOut                     = 21,
	ElasticEaseIn                            = 22,
	ElasticEaseOut                           = 23,
	ElasticEaseInOut                         = 24,
	BackEaseIn                               = 25,
	BackEaseOut                              = 26,
	BackEaseInOut                            = 27,
	BounceEaseIn                             = 28,
	BounceEaseOut                            = 29,
	BounceEaseInOut                          = 30,
	ERigVMAnimEasingType_MAX                 = 31,
};

// Enum RigVM.ERigVMSimPointIntegrateType
// NumValues: 0x0003
enum class ERigVMSimPointIntegrateType : uint8
{
	Verlet                                   = 0,
	SemiExplicitEuler                        = 1,
	ERigVMSimPointIntegrateType_MAX          = 2,
};

// ScriptStruct RigVM.MathRBFInterpolateQuatQuat_Target
// 0x0040 (0x0040 - 0x0000)
struct FMathRBFInterpolateQuatQuat_Target final
{
public:
	struct FQuat                                  Target;                                            // 0x0000(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  Value;                                             // 0x0020(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMathRBFInterpolateQuatQuat_Target) == 0x000010, "Wrong alignment on FMathRBFInterpolateQuatQuat_Target");
static_assert(sizeof(FMathRBFInterpolateQuatQuat_Target) == 0x000040, "Wrong size on FMathRBFInterpolateQuatQuat_Target");
static_assert(offsetof(FMathRBFInterpolateQuatQuat_Target, Target) == 0x000000, "Member 'FMathRBFInterpolateQuatQuat_Target::Target' has a wrong offset!");
static_assert(offsetof(FMathRBFInterpolateQuatQuat_Target, Value) == 0x000020, "Member 'FMathRBFInterpolateQuatQuat_Target::Value' has a wrong offset!");

// ScriptStruct RigVM.RigVMStruct
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FRigVMStruct
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMStruct) == 0x000008, "Wrong alignment on FRigVMStruct");
static_assert(sizeof(FRigVMStruct) == 0x000008, "Wrong size on FRigVMStruct");

// ScriptStruct RigVM.RigVMFunction_MathBase
// 0x0000 (0x0008 - 0x0008)
struct FRigVMFunction_MathBase : public FRigVMStruct
{
};
static_assert(alignof(FRigVMFunction_MathBase) == 0x000008, "Wrong alignment on FRigVMFunction_MathBase");
static_assert(sizeof(FRigVMFunction_MathBase) == 0x000008, "Wrong size on FRigVMFunction_MathBase");

// ScriptStruct RigVM.RigVMFunction_MathFloatBase
// 0x0000 (0x0008 - 0x0008)
struct FRigVMFunction_MathFloatBase : public FRigVMFunction_MathBase
{
};
static_assert(alignof(FRigVMFunction_MathFloatBase) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatBase");
static_assert(sizeof(FRigVMFunction_MathFloatBase) == 0x000008, "Wrong size on FRigVMFunction_MathFloatBase");

// ScriptStruct RigVM.RigVMFunction_MathFloatBinaryOp
// 0x0010 (0x0018 - 0x0008)
struct FRigVMFunction_MathFloatBinaryOp : public FRigVMFunction_MathFloatBase
{
public:
	float                                         A;                                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         B;                                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Result;                                            // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathFloatBinaryOp) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatBinaryOp");
static_assert(sizeof(FRigVMFunction_MathFloatBinaryOp) == 0x000018, "Wrong size on FRigVMFunction_MathFloatBinaryOp");
static_assert(offsetof(FRigVMFunction_MathFloatBinaryOp, A) == 0x000008, "Member 'FRigVMFunction_MathFloatBinaryOp::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatBinaryOp, B) == 0x00000C, "Member 'FRigVMFunction_MathFloatBinaryOp::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatBinaryOp, Result) == 0x000010, "Member 'FRigVMFunction_MathFloatBinaryOp::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathFloatPow
// 0x0000 (0x0018 - 0x0018)
struct FRigVMFunction_MathFloatPow final : public FRigVMFunction_MathFloatBinaryOp
{
};
static_assert(alignof(FRigVMFunction_MathFloatPow) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatPow");
static_assert(sizeof(FRigVMFunction_MathFloatPow) == 0x000018, "Wrong size on FRigVMFunction_MathFloatPow");

// ScriptStruct RigVM.RigVMDrawInstruction
// 0x00D0 (0x00D0 - 0x0000)
struct FRigVMDrawInstruction final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigVMDrawSettings                            PrimitiveType;                                     // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        Positions;                                         // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0020(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0xC];                                       // 0x0034(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0040(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A0[0x30];                                      // 0x00A0(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMDrawInstruction) == 0x000010, "Wrong alignment on FRigVMDrawInstruction");
static_assert(sizeof(FRigVMDrawInstruction) == 0x0000D0, "Wrong size on FRigVMDrawInstruction");
static_assert(offsetof(FRigVMDrawInstruction, Name) == 0x000000, "Member 'FRigVMDrawInstruction::Name' has a wrong offset!");
static_assert(offsetof(FRigVMDrawInstruction, PrimitiveType) == 0x000008, "Member 'FRigVMDrawInstruction::PrimitiveType' has a wrong offset!");
static_assert(offsetof(FRigVMDrawInstruction, Positions) == 0x000010, "Member 'FRigVMDrawInstruction::Positions' has a wrong offset!");
static_assert(offsetof(FRigVMDrawInstruction, Color) == 0x000020, "Member 'FRigVMDrawInstruction::Color' has a wrong offset!");
static_assert(offsetof(FRigVMDrawInstruction, Thickness) == 0x000030, "Member 'FRigVMDrawInstruction::Thickness' has a wrong offset!");
static_assert(offsetof(FRigVMDrawInstruction, Transform) == 0x000040, "Member 'FRigVMDrawInstruction::Transform' has a wrong offset!");

// ScriptStruct RigVM.RigVMDrawContainer
// 0x0018 (0x0018 - 0x0000)
struct FRigVMDrawContainer
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigVMDrawInstruction>          Instructions;                                      // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMDrawContainer) == 0x000008, "Wrong alignment on FRigVMDrawContainer");
static_assert(sizeof(FRigVMDrawContainer) == 0x000018, "Wrong size on FRigVMDrawContainer");
static_assert(offsetof(FRigVMDrawContainer, Instructions) == 0x000008, "Member 'FRigVMDrawContainer::Instructions' has a wrong offset!");

// ScriptStruct RigVM.RigVMBaseOp
// 0x0001 (0x0001 - 0x0000)
struct FRigVMBaseOp
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMBaseOp) == 0x000001, "Wrong alignment on FRigVMBaseOp");
static_assert(sizeof(FRigVMBaseOp) == 0x000001, "Wrong size on FRigVMBaseOp");

// ScriptStruct RigVM.RigVMJumpOp
// 0x0007 (0x0008 - 0x0001)
struct alignas(0x04) FRigVMJumpOp final : public FRigVMBaseOp
{
public:
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMJumpOp) == 0x000004, "Wrong alignment on FRigVMJumpOp");
static_assert(sizeof(FRigVMJumpOp) == 0x000008, "Wrong size on FRigVMJumpOp");

// ScriptStruct RigVM.RigVMFunction_MathVectorBase
// 0x0000 (0x0008 - 0x0008)
struct FRigVMFunction_MathVectorBase : public FRigVMFunction_MathBase
{
};
static_assert(alignof(FRigVMFunction_MathVectorBase) == 0x000008, "Wrong alignment on FRigVMFunction_MathVectorBase");
static_assert(sizeof(FRigVMFunction_MathVectorBase) == 0x000008, "Wrong size on FRigVMFunction_MathVectorBase");

// ScriptStruct RigVM.RigVMFunction_MathVectorBinaryOp
// 0x0048 (0x0050 - 0x0008)
struct FRigVMFunction_MathVectorBinaryOp : public FRigVMFunction_MathVectorBase
{
public:
	struct FVector                                A;                                                 // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                B;                                                 // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Result;                                            // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathVectorBinaryOp) == 0x000008, "Wrong alignment on FRigVMFunction_MathVectorBinaryOp");
static_assert(sizeof(FRigVMFunction_MathVectorBinaryOp) == 0x000050, "Wrong size on FRigVMFunction_MathVectorBinaryOp");
static_assert(offsetof(FRigVMFunction_MathVectorBinaryOp, A) == 0x000008, "Member 'FRigVMFunction_MathVectorBinaryOp::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorBinaryOp, B) == 0x000020, "Member 'FRigVMFunction_MathVectorBinaryOp::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorBinaryOp, Result) == 0x000038, "Member 'FRigVMFunction_MathVectorBinaryOp::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathVectorDiv
// 0x0000 (0x0050 - 0x0050)
struct FRigVMFunction_MathVectorDiv final : public FRigVMFunction_MathVectorBinaryOp
{
};
static_assert(alignof(FRigVMFunction_MathVectorDiv) == 0x000008, "Wrong alignment on FRigVMFunction_MathVectorDiv");
static_assert(sizeof(FRigVMFunction_MathVectorDiv) == 0x000050, "Wrong size on FRigVMFunction_MathVectorDiv");

// ScriptStruct RigVM.RigVMFunction_MathIntBase
// 0x0000 (0x0008 - 0x0008)
struct FRigVMFunction_MathIntBase : public FRigVMFunction_MathBase
{
};
static_assert(alignof(FRigVMFunction_MathIntBase) == 0x000008, "Wrong alignment on FRigVMFunction_MathIntBase");
static_assert(sizeof(FRigVMFunction_MathIntBase) == 0x000008, "Wrong size on FRigVMFunction_MathIntBase");

// ScriptStruct RigVM.RigVMFunction_MathIntUnaryOp
// 0x0008 (0x0010 - 0x0008)
struct FRigVMFunction_MathIntUnaryOp : public FRigVMFunction_MathIntBase
{
public:
	int32                                         Value;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Result;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathIntUnaryOp) == 0x000008, "Wrong alignment on FRigVMFunction_MathIntUnaryOp");
static_assert(sizeof(FRigVMFunction_MathIntUnaryOp) == 0x000010, "Wrong size on FRigVMFunction_MathIntUnaryOp");
static_assert(offsetof(FRigVMFunction_MathIntUnaryOp, Value) == 0x000008, "Member 'FRigVMFunction_MathIntUnaryOp::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathIntUnaryOp, Result) == 0x00000C, "Member 'FRigVMFunction_MathIntUnaryOp::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathIntAbs
// 0x0000 (0x0010 - 0x0010)
struct FRigVMFunction_MathIntAbs final : public FRigVMFunction_MathIntUnaryOp
{
};
static_assert(alignof(FRigVMFunction_MathIntAbs) == 0x000008, "Wrong alignment on FRigVMFunction_MathIntAbs");
static_assert(sizeof(FRigVMFunction_MathIntAbs) == 0x000010, "Wrong size on FRigVMFunction_MathIntAbs");

// ScriptStruct RigVM.RigVMExtendedExecuteContext
// 0x0228 (0x0228 - 0x0000)
struct alignas(0x08) FRigVMExtendedExecuteContext final
{
public:
	uint8                                         Pad_0[0x228];                                      // 0x0000(0x0228)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMExtendedExecuteContext) == 0x000008, "Wrong alignment on FRigVMExtendedExecuteContext");
static_assert(sizeof(FRigVMExtendedExecuteContext) == 0x000228, "Wrong size on FRigVMExtendedExecuteContext");

// ScriptStruct RigVM.RigVMFunction_MathVectorOrthogonal
// 0x0038 (0x0040 - 0x0008)
struct FRigVMFunction_MathVectorOrthogonal final : public FRigVMFunction_MathVectorBase
{
public:
	struct FVector                                A;                                                 // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                B;                                                 // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathVectorOrthogonal) == 0x000008, "Wrong alignment on FRigVMFunction_MathVectorOrthogonal");
static_assert(sizeof(FRigVMFunction_MathVectorOrthogonal) == 0x000040, "Wrong size on FRigVMFunction_MathVectorOrthogonal");
static_assert(offsetof(FRigVMFunction_MathVectorOrthogonal, A) == 0x000008, "Member 'FRigVMFunction_MathVectorOrthogonal::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorOrthogonal, B) == 0x000020, "Member 'FRigVMFunction_MathVectorOrthogonal::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorOrthogonal, Result) == 0x000038, "Member 'FRigVMFunction_MathVectorOrthogonal::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMDecorator
// 0x0010 (0x0018 - 0x0008)
struct FRigVMDecorator final : public FRigVMStruct
{
public:
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMDecorator) == 0x000008, "Wrong alignment on FRigVMDecorator");
static_assert(sizeof(FRigVMDecorator) == 0x000018, "Wrong size on FRigVMDecorator");

// ScriptStruct RigVM.RigVMFunction_MathVectorIsNearlyZero
// 0x0020 (0x0028 - 0x0008)
struct FRigVMFunction_MathVectorIsNearlyZero final : public FRigVMFunction_MathVectorBase
{
public:
	struct FVector                                Value;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tolerance;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathVectorIsNearlyZero) == 0x000008, "Wrong alignment on FRigVMFunction_MathVectorIsNearlyZero");
static_assert(sizeof(FRigVMFunction_MathVectorIsNearlyZero) == 0x000028, "Wrong size on FRigVMFunction_MathVectorIsNearlyZero");
static_assert(offsetof(FRigVMFunction_MathVectorIsNearlyZero, Value) == 0x000008, "Member 'FRigVMFunction_MathVectorIsNearlyZero::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorIsNearlyZero, Tolerance) == 0x000020, "Member 'FRigVMFunction_MathVectorIsNearlyZero::Tolerance' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorIsNearlyZero, Result) == 0x000024, "Member 'FRigVMFunction_MathVectorIsNearlyZero::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMUnaryOp
// 0x0007 (0x0008 - 0x0001)
struct alignas(0x02) FRigVMUnaryOp : public FRigVMBaseOp
{
public:
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMUnaryOp) == 0x000002, "Wrong alignment on FRigVMUnaryOp");
static_assert(sizeof(FRigVMUnaryOp) == 0x000008, "Wrong size on FRigVMUnaryOp");

// ScriptStruct RigVM.RigVMJumpIfOp
// 0x0008 (0x0010 - 0x0008)
struct alignas(0x04) FRigVMJumpIfOp final : public FRigVMUnaryOp
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMJumpIfOp) == 0x000004, "Wrong alignment on FRigVMJumpIfOp");
static_assert(sizeof(FRigVMJumpIfOp) == 0x000010, "Wrong size on FRigVMJumpIfOp");

// ScriptStruct RigVM.RigVMFunction_MathFloatUnaryOp
// 0x0008 (0x0010 - 0x0008)
struct FRigVMFunction_MathFloatUnaryOp : public FRigVMFunction_MathFloatBase
{
public:
	float                                         Value;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Result;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathFloatUnaryOp) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatUnaryOp");
static_assert(sizeof(FRigVMFunction_MathFloatUnaryOp) == 0x000010, "Wrong size on FRigVMFunction_MathFloatUnaryOp");
static_assert(offsetof(FRigVMFunction_MathFloatUnaryOp, Value) == 0x000008, "Member 'FRigVMFunction_MathFloatUnaryOp::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatUnaryOp, Result) == 0x00000C, "Member 'FRigVMFunction_MathFloatUnaryOp::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMDispatchFactory
// 0x0070 (0x0070 - 0x0000)
struct alignas(0x08) FRigVMDispatchFactory
{
public:
	uint8                                         Pad_0[0x70];                                       // 0x0000(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMDispatchFactory) == 0x000008, "Wrong alignment on FRigVMDispatchFactory");
static_assert(sizeof(FRigVMDispatchFactory) == 0x000070, "Wrong size on FRigVMDispatchFactory");

// ScriptStruct RigVM.RigVMTernaryOp
// 0x0013 (0x0014 - 0x0001)
struct alignas(0x02) FRigVMTernaryOp final : public FRigVMBaseOp
{
public:
	uint8                                         Pad_1[0x13];                                       // 0x0001(0x0013)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMTernaryOp) == 0x000002, "Wrong alignment on FRigVMTernaryOp");
static_assert(sizeof(FRigVMTernaryOp) == 0x000014, "Wrong size on FRigVMTernaryOp");

// ScriptStruct RigVM.RigVMDispatch_CoreBase
// 0x0000 (0x0070 - 0x0070)
struct FRigVMDispatch_CoreBase : public FRigVMDispatchFactory
{
};
static_assert(alignof(FRigVMDispatch_CoreBase) == 0x000008, "Wrong alignment on FRigVMDispatch_CoreBase");
static_assert(sizeof(FRigVMDispatch_CoreBase) == 0x000070, "Wrong size on FRigVMDispatch_CoreBase");

// ScriptStruct RigVM.RigVMDispatch_ArrayBase
// 0x0000 (0x0070 - 0x0070)
struct FRigVMDispatch_ArrayBase : public FRigVMDispatch_CoreBase
{
};
static_assert(alignof(FRigVMDispatch_ArrayBase) == 0x000008, "Wrong alignment on FRigVMDispatch_ArrayBase");
static_assert(sizeof(FRigVMDispatch_ArrayBase) == 0x000070, "Wrong size on FRigVMDispatch_ArrayBase");

// ScriptStruct RigVM.RigVMDispatch_ArrayClone
// 0x0000 (0x0070 - 0x0070)
struct FRigVMDispatch_ArrayClone final : public FRigVMDispatch_ArrayBase
{
};
static_assert(alignof(FRigVMDispatch_ArrayClone) == 0x000008, "Wrong alignment on FRigVMDispatch_ArrayClone");
static_assert(sizeof(FRigVMDispatch_ArrayClone) == 0x000070, "Wrong size on FRigVMDispatch_ArrayClone");

// ScriptStruct RigVM.RigVMRuntimeSettings
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FRigVMRuntimeSettings final
{
public:
	int32                                         MaximumArraySize;                                  // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x14];                                       // 0x0004(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMRuntimeSettings) == 0x000008, "Wrong alignment on FRigVMRuntimeSettings");
static_assert(sizeof(FRigVMRuntimeSettings) == 0x000018, "Wrong size on FRigVMRuntimeSettings");
static_assert(offsetof(FRigVMRuntimeSettings, MaximumArraySize) == 0x000000, "Member 'FRigVMRuntimeSettings::MaximumArraySize' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathVectorUnaryOp
// 0x0030 (0x0038 - 0x0008)
struct FRigVMFunction_MathVectorUnaryOp : public FRigVMFunction_MathVectorBase
{
public:
	struct FVector                                Value;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Result;                                            // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathVectorUnaryOp) == 0x000008, "Wrong alignment on FRigVMFunction_MathVectorUnaryOp");
static_assert(sizeof(FRigVMFunction_MathVectorUnaryOp) == 0x000038, "Wrong size on FRigVMFunction_MathVectorUnaryOp");
static_assert(offsetof(FRigVMFunction_MathVectorUnaryOp, Value) == 0x000008, "Member 'FRigVMFunction_MathVectorUnaryOp::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorUnaryOp, Result) == 0x000020, "Member 'FRigVMFunction_MathVectorUnaryOp::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathVectorUnit
// 0x0000 (0x0038 - 0x0038)
struct FRigVMFunction_MathVectorUnit final : public FRigVMFunction_MathVectorUnaryOp
{
};
static_assert(alignof(FRigVMFunction_MathVectorUnit) == 0x000008, "Wrong alignment on FRigVMFunction_MathVectorUnit");
static_assert(sizeof(FRigVMFunction_MathVectorUnit) == 0x000038, "Wrong size on FRigVMFunction_MathVectorUnit");

// ScriptStruct RigVM.RigVMDispatch_CastEnumToInt
// 0x0000 (0x0070 - 0x0070)
struct FRigVMDispatch_CastEnumToInt final : public FRigVMDispatchFactory
{
};
static_assert(alignof(FRigVMDispatch_CastEnumToInt) == 0x000008, "Wrong alignment on FRigVMDispatch_CastEnumToInt");
static_assert(sizeof(FRigVMDispatch_CastEnumToInt) == 0x000070, "Wrong size on FRigVMDispatch_CastEnumToInt");

// ScriptStruct RigVM.RigVMDispatch_CastIntToEnum
// 0x0000 (0x0070 - 0x0070)
struct FRigVMDispatch_CastIntToEnum final : public FRigVMDispatchFactory
{
};
static_assert(alignof(FRigVMDispatch_CastIntToEnum) == 0x000008, "Wrong alignment on FRigVMDispatch_CastIntToEnum");
static_assert(sizeof(FRigVMDispatch_CastIntToEnum) == 0x000070, "Wrong size on FRigVMDispatch_CastIntToEnum");

// ScriptStruct RigVM.RigVMFunction_MathVectorClampSpatially
// 0x00B8 (0x00C0 - 0x0008)
struct FRigVMFunction_MathVectorClampSpatially final : public FRigVMFunction_MathVectorBase
{
public:
	struct FVector                                Value;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         Axis;                                              // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigVMClampSpatialMode                        Type;                                              // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Minimum;                                           // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Maximum;                                           // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Space;                                             // 0x0030(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawDebug;                                        // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           DebugColor;                                        // 0x0094(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DebugThickness;                                    // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Result;                                            // 0x00A8(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathVectorClampSpatially) == 0x000010, "Wrong alignment on FRigVMFunction_MathVectorClampSpatially");
static_assert(sizeof(FRigVMFunction_MathVectorClampSpatially) == 0x0000C0, "Wrong size on FRigVMFunction_MathVectorClampSpatially");
static_assert(offsetof(FRigVMFunction_MathVectorClampSpatially, Value) == 0x000008, "Member 'FRigVMFunction_MathVectorClampSpatially::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorClampSpatially, Axis) == 0x000020, "Member 'FRigVMFunction_MathVectorClampSpatially::Axis' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorClampSpatially, Type) == 0x000021, "Member 'FRigVMFunction_MathVectorClampSpatially::Type' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorClampSpatially, Minimum) == 0x000024, "Member 'FRigVMFunction_MathVectorClampSpatially::Minimum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorClampSpatially, Maximum) == 0x000028, "Member 'FRigVMFunction_MathVectorClampSpatially::Maximum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorClampSpatially, Space) == 0x000030, "Member 'FRigVMFunction_MathVectorClampSpatially::Space' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorClampSpatially, bDrawDebug) == 0x000090, "Member 'FRigVMFunction_MathVectorClampSpatially::bDrawDebug' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorClampSpatially, DebugColor) == 0x000094, "Member 'FRigVMFunction_MathVectorClampSpatially::DebugColor' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorClampSpatially, DebugThickness) == 0x0000A4, "Member 'FRigVMFunction_MathVectorClampSpatially::DebugThickness' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorClampSpatially, Result) == 0x0000A8, "Member 'FRigVMFunction_MathVectorClampSpatially::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMDispatch_CastObject
// 0x0000 (0x0070 - 0x0070)
struct FRigVMDispatch_CastObject final : public FRigVMDispatchFactory
{
};
static_assert(alignof(FRigVMDispatch_CastObject) == 0x000008, "Wrong alignment on FRigVMDispatch_CastObject");
static_assert(sizeof(FRigVMDispatch_CastObject) == 0x000070, "Wrong size on FRigVMDispatch_CastObject");

// ScriptStruct RigVM.RigVMExternalVariableDef
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FRigVMExternalVariableDef
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMExternalVariableDef) == 0x000008, "Wrong alignment on FRigVMExternalVariableDef");
static_assert(sizeof(FRigVMExternalVariableDef) == 0x000028, "Wrong size on FRigVMExternalVariableDef");

// ScriptStruct RigVM.RigVMFunction_NoiseVector
// 0x0080 (0x0088 - 0x0008)
struct FRigVMFunction_NoiseVector final : public FRigVMFunction_MathBase
{
public:
	struct FVector                                Position;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Speed;                                             // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Frequency;                                         // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Minimum;                                           // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Maximum;                                           // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Result;                                            // 0x0058(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Time;                                              // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_NoiseVector) == 0x000008, "Wrong alignment on FRigVMFunction_NoiseVector");
static_assert(sizeof(FRigVMFunction_NoiseVector) == 0x000088, "Wrong size on FRigVMFunction_NoiseVector");
static_assert(offsetof(FRigVMFunction_NoiseVector, Position) == 0x000008, "Member 'FRigVMFunction_NoiseVector::Position' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_NoiseVector, Speed) == 0x000020, "Member 'FRigVMFunction_NoiseVector::Speed' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_NoiseVector, Frequency) == 0x000038, "Member 'FRigVMFunction_NoiseVector::Frequency' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_NoiseVector, Minimum) == 0x000050, "Member 'FRigVMFunction_NoiseVector::Minimum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_NoiseVector, Maximum) == 0x000054, "Member 'FRigVMFunction_NoiseVector::Maximum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_NoiseVector, Result) == 0x000058, "Member 'FRigVMFunction_NoiseVector::Result' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_NoiseVector, Time) == 0x000070, "Member 'FRigVMFunction_NoiseVector::Time' has a wrong offset!");

// ScriptStruct RigVM.RigVMExternalVariable
// 0x0008 (0x0030 - 0x0028)
struct FRigVMExternalVariable final : public FRigVMExternalVariableDef
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMExternalVariable) == 0x000008, "Wrong alignment on FRigVMExternalVariable");
static_assert(sizeof(FRigVMExternalVariable) == 0x000030, "Wrong size on FRigVMExternalVariable");

// ScriptStruct RigVM.RigVMFunction_AnimBase
// 0x0000 (0x0008 - 0x0008)
struct FRigVMFunction_AnimBase : public FRigVMStruct
{
};
static_assert(alignof(FRigVMFunction_AnimBase) == 0x000008, "Wrong alignment on FRigVMFunction_AnimBase");
static_assert(sizeof(FRigVMFunction_AnimBase) == 0x000008, "Wrong size on FRigVMFunction_AnimBase");

// ScriptStruct RigVM.RigVMFunction_MathVectorMakeAbsolute
// 0x0048 (0x0050 - 0x0008)
struct FRigVMFunction_MathVectorMakeAbsolute final : public FRigVMFunction_MathVectorBase
{
public:
	struct FVector                                Local;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Parent;                                            // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Global;                                            // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathVectorMakeAbsolute) == 0x000008, "Wrong alignment on FRigVMFunction_MathVectorMakeAbsolute");
static_assert(sizeof(FRigVMFunction_MathVectorMakeAbsolute) == 0x000050, "Wrong size on FRigVMFunction_MathVectorMakeAbsolute");
static_assert(offsetof(FRigVMFunction_MathVectorMakeAbsolute, Local) == 0x000008, "Member 'FRigVMFunction_MathVectorMakeAbsolute::Local' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorMakeAbsolute, Parent) == 0x000020, "Member 'FRigVMFunction_MathVectorMakeAbsolute::Parent' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorMakeAbsolute, Global) == 0x000038, "Member 'FRigVMFunction_MathVectorMakeAbsolute::Global' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_DebugBase
// 0x0000 (0x0008 - 0x0008)
struct FRigVMFunction_DebugBase : public FRigVMStruct
{
};
static_assert(alignof(FRigVMFunction_DebugBase) == 0x000008, "Wrong alignment on FRigVMFunction_DebugBase");
static_assert(sizeof(FRigVMFunction_DebugBase) == 0x000008, "Wrong size on FRigVMFunction_DebugBase");

// ScriptStruct RigVM.RigVMExecuteContext
// 0x00F0 (0x00F0 - 0x0000)
struct alignas(0x10) FRigVMExecuteContext
{
public:
	uint8                                         Pad_0[0xF0];                                       // 0x0000(0x00F0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMExecuteContext) == 0x000010, "Wrong alignment on FRigVMExecuteContext");
static_assert(sizeof(FRigVMExecuteContext) == 0x0000F0, "Wrong size on FRigVMExecuteContext");

// ScriptStruct RigVM.RigVMStructMutable
// 0x00F8 (0x0100 - 0x0008)
struct FRigVMStructMutable : public FRigVMStruct
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigVMExecuteContext                   ExecuteContext;                                    // 0x0010(0x00F0)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMStructMutable) == 0x000010, "Wrong alignment on FRigVMStructMutable");
static_assert(sizeof(FRigVMStructMutable) == 0x000100, "Wrong size on FRigVMStructMutable");
static_assert(offsetof(FRigVMStructMutable, ExecuteContext) == 0x000010, "Member 'FRigVMStructMutable::ExecuteContext' has a wrong offset!");

// ScriptStruct RigVM.RigVMFourPointBezier
// 0x0060 (0x0060 - 0x0000)
struct FRigVMFourPointBezier final
{
public:
	struct FVector                                A;                                                 // 0x0000(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                B;                                                 // 0x0018(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                C;                                                 // 0x0030(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                D;                                                 // 0x0048(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFourPointBezier) == 0x000008, "Wrong alignment on FRigVMFourPointBezier");
static_assert(sizeof(FRigVMFourPointBezier) == 0x000060, "Wrong size on FRigVMFourPointBezier");
static_assert(offsetof(FRigVMFourPointBezier, A) == 0x000000, "Member 'FRigVMFourPointBezier::A' has a wrong offset!");
static_assert(offsetof(FRigVMFourPointBezier, B) == 0x000018, "Member 'FRigVMFourPointBezier::B' has a wrong offset!");
static_assert(offsetof(FRigVMFourPointBezier, C) == 0x000030, "Member 'FRigVMFourPointBezier::C' has a wrong offset!");
static_assert(offsetof(FRigVMFourPointBezier, D) == 0x000048, "Member 'FRigVMFourPointBezier::D' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_DebugBaseMutable
// 0x0000 (0x0100 - 0x0100)
struct FRigVMFunction_DebugBaseMutable : public FRigVMStructMutable
{
};
static_assert(alignof(FRigVMFunction_DebugBaseMutable) == 0x000010, "Wrong alignment on FRigVMFunction_DebugBaseMutable");
static_assert(sizeof(FRigVMFunction_DebugBaseMutable) == 0x000100, "Wrong size on FRigVMFunction_DebugBaseMutable");

// ScriptStruct RigVM.RigVMFunction_NoiseFloat
// 0x0020 (0x0028 - 0x0008)
struct FRigVMFunction_NoiseFloat final : public FRigVMFunction_MathBase
{
public:
	float                                         Value;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Frequency;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Minimum;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Maximum;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Result;                                            // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_NoiseFloat) == 0x000008, "Wrong alignment on FRigVMFunction_NoiseFloat");
static_assert(sizeof(FRigVMFunction_NoiseFloat) == 0x000028, "Wrong size on FRigVMFunction_NoiseFloat");
static_assert(offsetof(FRigVMFunction_NoiseFloat, Value) == 0x000008, "Member 'FRigVMFunction_NoiseFloat::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_NoiseFloat, Speed) == 0x00000C, "Member 'FRigVMFunction_NoiseFloat::Speed' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_NoiseFloat, Frequency) == 0x000010, "Member 'FRigVMFunction_NoiseFloat::Frequency' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_NoiseFloat, Minimum) == 0x000014, "Member 'FRigVMFunction_NoiseFloat::Minimum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_NoiseFloat, Maximum) == 0x000018, "Member 'FRigVMFunction_NoiseFloat::Maximum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_NoiseFloat, Result) == 0x00001C, "Member 'FRigVMFunction_NoiseFloat::Result' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_NoiseFloat, Time) == 0x000020, "Member 'FRigVMFunction_NoiseFloat::Time' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathMutableBase
// 0x0000 (0x0100 - 0x0100)
struct FRigVMFunction_MathMutableBase : public FRigVMStructMutable
{
};
static_assert(alignof(FRigVMFunction_MathMutableBase) == 0x000010, "Wrong alignment on FRigVMFunction_MathMutableBase");
static_assert(sizeof(FRigVMFunction_MathMutableBase) == 0x000100, "Wrong size on FRigVMFunction_MathMutableBase");

// ScriptStruct RigVM.RigVMFunction_SimBase
// 0x0000 (0x0008 - 0x0008)
struct FRigVMFunction_SimBase : public FRigVMStruct
{
};
static_assert(alignof(FRigVMFunction_SimBase) == 0x000008, "Wrong alignment on FRigVMFunction_SimBase");
static_assert(sizeof(FRigVMFunction_SimBase) == 0x000008, "Wrong size on FRigVMFunction_SimBase");

// ScriptStruct RigVM.RigVMFunction_AccumulateBase
// 0x0000 (0x0008 - 0x0008)
struct FRigVMFunction_AccumulateBase : public FRigVMFunction_SimBase
{
};
static_assert(alignof(FRigVMFunction_AccumulateBase) == 0x000008, "Wrong alignment on FRigVMFunction_AccumulateBase");
static_assert(sizeof(FRigVMFunction_AccumulateBase) == 0x000008, "Wrong size on FRigVMFunction_AccumulateBase");

// ScriptStruct RigVM.RigVMFunction_AccumulateFloatLerp
// 0x0020 (0x0028 - 0x0008)
struct FRigVMFunction_AccumulateFloatLerp final : public FRigVMFunction_AccumulateBase
{
public:
	float                                         TargetValue;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialValue;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Blend;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIntegrateDeltaTime;                               // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Result;                                            // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccumulatedValue;                                  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInitialized;                                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_AccumulateFloatLerp) == 0x000008, "Wrong alignment on FRigVMFunction_AccumulateFloatLerp");
static_assert(sizeof(FRigVMFunction_AccumulateFloatLerp) == 0x000028, "Wrong size on FRigVMFunction_AccumulateFloatLerp");
static_assert(offsetof(FRigVMFunction_AccumulateFloatLerp, TargetValue) == 0x000008, "Member 'FRigVMFunction_AccumulateFloatLerp::TargetValue' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateFloatLerp, InitialValue) == 0x00000C, "Member 'FRigVMFunction_AccumulateFloatLerp::InitialValue' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateFloatLerp, Blend) == 0x000010, "Member 'FRigVMFunction_AccumulateFloatLerp::Blend' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateFloatLerp, bIntegrateDeltaTime) == 0x000014, "Member 'FRigVMFunction_AccumulateFloatLerp::bIntegrateDeltaTime' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateFloatLerp, Result) == 0x000018, "Member 'FRigVMFunction_AccumulateFloatLerp::Result' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateFloatLerp, AccumulatedValue) == 0x00001C, "Member 'FRigVMFunction_AccumulateFloatLerp::AccumulatedValue' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateFloatLerp, bIsInitialized) == 0x000020, "Member 'FRigVMFunction_AccumulateFloatLerp::bIsInitialized' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_Sequence
// 0x02D8 (0x02E0 - 0x0008)
struct FRigVMFunction_Sequence final : public FRigVMStruct
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigVMExecuteContext                   ExecuteContext;                                    // 0x0010(0x00F0)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	struct FRigVMExecuteContext                   A;                                                 // 0x0100(0x00F0)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	struct FRigVMExecuteContext                   B;                                                 // 0x01F0(0x00F0)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_Sequence) == 0x000010, "Wrong alignment on FRigVMFunction_Sequence");
static_assert(sizeof(FRigVMFunction_Sequence) == 0x0002E0, "Wrong size on FRigVMFunction_Sequence");
static_assert(offsetof(FRigVMFunction_Sequence, ExecuteContext) == 0x000010, "Member 'FRigVMFunction_Sequence::ExecuteContext' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_Sequence, A) == 0x000100, "Member 'FRigVMFunction_Sequence::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_Sequence, B) == 0x0001F0, "Member 'FRigVMFunction_Sequence::B' has a wrong offset!");

// ScriptStruct RigVM.RigVMUnknownType
// 0x0004 (0x0004 - 0x0000)
struct FRigVMUnknownType final
{
public:
	uint32                                        Hash;                                              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FRigVMUnknownType) == 0x000004, "Wrong alignment on FRigVMUnknownType");
static_assert(sizeof(FRigVMUnknownType) == 0x000004, "Wrong size on FRigVMUnknownType");
static_assert(offsetof(FRigVMUnknownType, Hash) == 0x000000, "Member 'FRigVMUnknownType::Hash' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_AccumulateFloatAdd
// 0x0018 (0x0020 - 0x0008)
struct FRigVMFunction_AccumulateFloatAdd final : public FRigVMFunction_AccumulateBase
{
public:
	float                                         Increment;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialValue;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIntegrateDeltaTime;                               // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Result;                                            // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccumulatedValue;                                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInitialized;                                    // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_AccumulateFloatAdd) == 0x000008, "Wrong alignment on FRigVMFunction_AccumulateFloatAdd");
static_assert(sizeof(FRigVMFunction_AccumulateFloatAdd) == 0x000020, "Wrong size on FRigVMFunction_AccumulateFloatAdd");
static_assert(offsetof(FRigVMFunction_AccumulateFloatAdd, Increment) == 0x000008, "Member 'FRigVMFunction_AccumulateFloatAdd::Increment' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateFloatAdd, InitialValue) == 0x00000C, "Member 'FRigVMFunction_AccumulateFloatAdd::InitialValue' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateFloatAdd, bIntegrateDeltaTime) == 0x000010, "Member 'FRigVMFunction_AccumulateFloatAdd::bIntegrateDeltaTime' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateFloatAdd, Result) == 0x000014, "Member 'FRigVMFunction_AccumulateFloatAdd::Result' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateFloatAdd, AccumulatedValue) == 0x000018, "Member 'FRigVMFunction_AccumulateFloatAdd::AccumulatedValue' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateFloatAdd, bIsInitialized) == 0x00001C, "Member 'FRigVMFunction_AccumulateFloatAdd::bIsInitialized' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_SimBaseMutable
// 0x0000 (0x0100 - 0x0100)
struct FRigVMFunction_SimBaseMutable : public FRigVMStructMutable
{
};
static_assert(alignof(FRigVMFunction_SimBaseMutable) == 0x000010, "Wrong alignment on FRigVMFunction_SimBaseMutable");
static_assert(sizeof(FRigVMFunction_SimBaseMutable) == 0x000100, "Wrong size on FRigVMFunction_SimBaseMutable");

// ScriptStruct RigVM.RigVMFunction_MathVectorArraySum
// 0x0028 (0x0030 - 0x0008)
struct FRigVMFunction_MathVectorArraySum final : public FRigVMFunction_MathVectorBase
{
public:
	TArray<struct FVector>                        Array;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                Sum;                                               // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathVectorArraySum) == 0x000008, "Wrong alignment on FRigVMFunction_MathVectorArraySum");
static_assert(sizeof(FRigVMFunction_MathVectorArraySum) == 0x000030, "Wrong size on FRigVMFunction_MathVectorArraySum");
static_assert(offsetof(FRigVMFunction_MathVectorArraySum, Array) == 0x000008, "Member 'FRigVMFunction_MathVectorArraySum::Array' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorArraySum, Sum) == 0x000018, "Member 'FRigVMFunction_MathVectorArraySum::Sum' has a wrong offset!");

// ScriptStruct RigVM.RigVMGraphFunctionIdentifier
// 0x0040 (0x0040 - 0x0000)
struct FRigVMGraphFunctionIdentifier final
{
public:
	struct FSoftObjectPath                        LibraryNode;                                       // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        HostObject;                                        // 0x0020(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMGraphFunctionIdentifier) == 0x000008, "Wrong alignment on FRigVMGraphFunctionIdentifier");
static_assert(sizeof(FRigVMGraphFunctionIdentifier) == 0x000040, "Wrong size on FRigVMGraphFunctionIdentifier");
static_assert(offsetof(FRigVMGraphFunctionIdentifier, LibraryNode) == 0x000000, "Member 'FRigVMGraphFunctionIdentifier::LibraryNode' has a wrong offset!");
static_assert(offsetof(FRigVMGraphFunctionIdentifier, HostObject) == 0x000020, "Member 'FRigVMGraphFunctionIdentifier::HostObject' has a wrong offset!");

// ScriptStruct RigVM.RigVMGraphFunctionArgument
// 0x00B0 (0x00B0 - 0x0000)
struct FRigVMGraphFunctionArgument final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DisplayName;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CPPType;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 CPPTypeObject;                                     // 0x0018(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsArray;                                          // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigVMPinDirection                            Direction;                                         // 0x0041(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DefaultValue;                                      // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsConst;                                          // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FText>              PathToTooltip;                                     // 0x0060(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMGraphFunctionArgument) == 0x000008, "Wrong alignment on FRigVMGraphFunctionArgument");
static_assert(sizeof(FRigVMGraphFunctionArgument) == 0x0000B0, "Wrong size on FRigVMGraphFunctionArgument");
static_assert(offsetof(FRigVMGraphFunctionArgument, Name) == 0x000000, "Member 'FRigVMGraphFunctionArgument::Name' has a wrong offset!");
static_assert(offsetof(FRigVMGraphFunctionArgument, DisplayName) == 0x000008, "Member 'FRigVMGraphFunctionArgument::DisplayName' has a wrong offset!");
static_assert(offsetof(FRigVMGraphFunctionArgument, CPPType) == 0x000010, "Member 'FRigVMGraphFunctionArgument::CPPType' has a wrong offset!");
static_assert(offsetof(FRigVMGraphFunctionArgument, CPPTypeObject) == 0x000018, "Member 'FRigVMGraphFunctionArgument::CPPTypeObject' has a wrong offset!");
static_assert(offsetof(FRigVMGraphFunctionArgument, bIsArray) == 0x000040, "Member 'FRigVMGraphFunctionArgument::bIsArray' has a wrong offset!");
static_assert(offsetof(FRigVMGraphFunctionArgument, Direction) == 0x000041, "Member 'FRigVMGraphFunctionArgument::Direction' has a wrong offset!");
static_assert(offsetof(FRigVMGraphFunctionArgument, DefaultValue) == 0x000048, "Member 'FRigVMGraphFunctionArgument::DefaultValue' has a wrong offset!");
static_assert(offsetof(FRigVMGraphFunctionArgument, bIsConst) == 0x000058, "Member 'FRigVMGraphFunctionArgument::bIsConst' has a wrong offset!");
static_assert(offsetof(FRigVMGraphFunctionArgument, PathToTooltip) == 0x000060, "Member 'FRigVMGraphFunctionArgument::PathToTooltip' has a wrong offset!");

// ScriptStruct RigVM.RigVMGraphFunctionHeader
// 0x0118 (0x0118 - 0x0000)
struct FRigVMGraphFunctionHeader final
{
public:
	struct FRigVMGraphFunctionIdentifier          LibraryPointer;                                    // 0x0000(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name;                                              // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NodeTitle;                                         // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           NodeColor;                                         // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ToolTip;                                           // 0x0068(0x0010)(Deprecated, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Category;                                          // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Keywords;                                          // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRigVMGraphFunctionArgument>    Arguments;                                         // 0x00A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TMap<struct FRigVMGraphFunctionIdentifier, uint32> Dependencies;                                      // 0x00B8(0x0050)(NativeAccessSpecifierPublic)
	TArray<struct FRigVMExternalVariable>         ExternalVariables;                                 // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMGraphFunctionHeader) == 0x000008, "Wrong alignment on FRigVMGraphFunctionHeader");
static_assert(sizeof(FRigVMGraphFunctionHeader) == 0x000118, "Wrong size on FRigVMGraphFunctionHeader");
static_assert(offsetof(FRigVMGraphFunctionHeader, LibraryPointer) == 0x000000, "Member 'FRigVMGraphFunctionHeader::LibraryPointer' has a wrong offset!");
static_assert(offsetof(FRigVMGraphFunctionHeader, Name) == 0x000040, "Member 'FRigVMGraphFunctionHeader::Name' has a wrong offset!");
static_assert(offsetof(FRigVMGraphFunctionHeader, NodeTitle) == 0x000048, "Member 'FRigVMGraphFunctionHeader::NodeTitle' has a wrong offset!");
static_assert(offsetof(FRigVMGraphFunctionHeader, NodeColor) == 0x000058, "Member 'FRigVMGraphFunctionHeader::NodeColor' has a wrong offset!");
static_assert(offsetof(FRigVMGraphFunctionHeader, ToolTip) == 0x000068, "Member 'FRigVMGraphFunctionHeader::ToolTip' has a wrong offset!");
static_assert(offsetof(FRigVMGraphFunctionHeader, Description) == 0x000078, "Member 'FRigVMGraphFunctionHeader::Description' has a wrong offset!");
static_assert(offsetof(FRigVMGraphFunctionHeader, Category) == 0x000088, "Member 'FRigVMGraphFunctionHeader::Category' has a wrong offset!");
static_assert(offsetof(FRigVMGraphFunctionHeader, Keywords) == 0x000098, "Member 'FRigVMGraphFunctionHeader::Keywords' has a wrong offset!");
static_assert(offsetof(FRigVMGraphFunctionHeader, Arguments) == 0x0000A8, "Member 'FRigVMGraphFunctionHeader::Arguments' has a wrong offset!");
static_assert(offsetof(FRigVMGraphFunctionHeader, Dependencies) == 0x0000B8, "Member 'FRigVMGraphFunctionHeader::Dependencies' has a wrong offset!");
static_assert(offsetof(FRigVMGraphFunctionHeader, ExternalVariables) == 0x000108, "Member 'FRigVMGraphFunctionHeader::ExternalVariables' has a wrong offset!");

// ScriptStruct RigVM.RigVMByteCodeEntry
// 0x000C (0x000C - 0x0000)
struct FRigVMByteCodeEntry final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstructionIndex;                                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMByteCodeEntry) == 0x000004, "Wrong alignment on FRigVMByteCodeEntry");
static_assert(sizeof(FRigVMByteCodeEntry) == 0x00000C, "Wrong size on FRigVMByteCodeEntry");
static_assert(offsetof(FRigVMByteCodeEntry, Name) == 0x000000, "Member 'FRigVMByteCodeEntry::Name' has a wrong offset!");
static_assert(offsetof(FRigVMByteCodeEntry, InstructionIndex) == 0x000008, "Member 'FRigVMByteCodeEntry::InstructionIndex' has a wrong offset!");

// ScriptStruct RigVM.RigVMBranchInfo
// 0x0018 (0x0018 - 0x0000)
struct FRigVMBranchInfo final
{
public:
	int32                                         Index;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Label;                                             // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstructionIndex;                                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ArgumentIndex;                                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        FirstInstruction;                                  // 0x0014(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        LastInstruction;                                   // 0x0016(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMBranchInfo) == 0x000004, "Wrong alignment on FRigVMBranchInfo");
static_assert(sizeof(FRigVMBranchInfo) == 0x000018, "Wrong size on FRigVMBranchInfo");
static_assert(offsetof(FRigVMBranchInfo, Index) == 0x000000, "Member 'FRigVMBranchInfo::Index' has a wrong offset!");
static_assert(offsetof(FRigVMBranchInfo, Label) == 0x000004, "Member 'FRigVMBranchInfo::Label' has a wrong offset!");
static_assert(offsetof(FRigVMBranchInfo, InstructionIndex) == 0x00000C, "Member 'FRigVMBranchInfo::InstructionIndex' has a wrong offset!");
static_assert(offsetof(FRigVMBranchInfo, ArgumentIndex) == 0x000010, "Member 'FRigVMBranchInfo::ArgumentIndex' has a wrong offset!");
static_assert(offsetof(FRigVMBranchInfo, FirstInstruction) == 0x000014, "Member 'FRigVMBranchInfo::FirstInstruction' has a wrong offset!");
static_assert(offsetof(FRigVMBranchInfo, LastInstruction) == 0x000016, "Member 'FRigVMBranchInfo::LastInstruction' has a wrong offset!");

// ScriptStruct RigVM.RigVMPredicateBranch
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FRigVMPredicateBranch final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMPredicateBranch) == 0x000008, "Wrong alignment on FRigVMPredicateBranch");
static_assert(sizeof(FRigVMPredicateBranch) == 0x000030, "Wrong size on FRigVMPredicateBranch");

// ScriptStruct RigVM.RigVMByteCode
// 0x00B0 (0x00B0 - 0x0000)
struct FRigVMByteCode final
{
public:
	TArray<uint8>                                 ByteCode;                                          // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	int32                                         NumInstructions;                                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigVMByteCodeEntry>            Entries;                                           // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FRigVMBranchInfo>               BranchInfos;                                       // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FRigVMPredicateBranch>          PredicateBranches;                                 // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class FString                                 PublicContextPathName;                             // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_58[0x58];                                      // 0x0058(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMByteCode) == 0x000008, "Wrong alignment on FRigVMByteCode");
static_assert(sizeof(FRigVMByteCode) == 0x0000B0, "Wrong size on FRigVMByteCode");
static_assert(offsetof(FRigVMByteCode, ByteCode) == 0x000000, "Member 'FRigVMByteCode::ByteCode' has a wrong offset!");
static_assert(offsetof(FRigVMByteCode, NumInstructions) == 0x000010, "Member 'FRigVMByteCode::NumInstructions' has a wrong offset!");
static_assert(offsetof(FRigVMByteCode, Entries) == 0x000018, "Member 'FRigVMByteCode::Entries' has a wrong offset!");
static_assert(offsetof(FRigVMByteCode, BranchInfos) == 0x000028, "Member 'FRigVMByteCode::BranchInfos' has a wrong offset!");
static_assert(offsetof(FRigVMByteCode, PredicateBranches) == 0x000038, "Member 'FRigVMByteCode::PredicateBranches' has a wrong offset!");
static_assert(offsetof(FRigVMByteCode, PublicContextPathName) == 0x000048, "Member 'FRigVMByteCode::PublicContextPathName' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunctionCompilationPropertyDescription
// 0x0050 (0x0050 - 0x0000)
struct FRigVMFunctionCompilationPropertyDescription final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CPPType;                                           // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 CPPTypeObject;                                     // 0x0018(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DefaultValue;                                      // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunctionCompilationPropertyDescription) == 0x000008, "Wrong alignment on FRigVMFunctionCompilationPropertyDescription");
static_assert(sizeof(FRigVMFunctionCompilationPropertyDescription) == 0x000050, "Wrong size on FRigVMFunctionCompilationPropertyDescription");
static_assert(offsetof(FRigVMFunctionCompilationPropertyDescription, Name) == 0x000000, "Member 'FRigVMFunctionCompilationPropertyDescription::Name' has a wrong offset!");
static_assert(offsetof(FRigVMFunctionCompilationPropertyDescription, CPPType) == 0x000008, "Member 'FRigVMFunctionCompilationPropertyDescription::CPPType' has a wrong offset!");
static_assert(offsetof(FRigVMFunctionCompilationPropertyDescription, CPPTypeObject) == 0x000018, "Member 'FRigVMFunctionCompilationPropertyDescription::CPPTypeObject' has a wrong offset!");
static_assert(offsetof(FRigVMFunctionCompilationPropertyDescription, DefaultValue) == 0x000040, "Member 'FRigVMFunctionCompilationPropertyDescription::DefaultValue' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunctionCompilationPropertyPath
// 0x0028 (0x0028 - 0x0000)
struct FRigVMFunctionCompilationPropertyPath final
{
public:
	int32                                         PropertyIndex;                                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 HeadCPPType;                                       // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SegmentPath;                                       // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunctionCompilationPropertyPath) == 0x000008, "Wrong alignment on FRigVMFunctionCompilationPropertyPath");
static_assert(sizeof(FRigVMFunctionCompilationPropertyPath) == 0x000028, "Wrong size on FRigVMFunctionCompilationPropertyPath");
static_assert(offsetof(FRigVMFunctionCompilationPropertyPath, PropertyIndex) == 0x000000, "Member 'FRigVMFunctionCompilationPropertyPath::PropertyIndex' has a wrong offset!");
static_assert(offsetof(FRigVMFunctionCompilationPropertyPath, HeadCPPType) == 0x000008, "Member 'FRigVMFunctionCompilationPropertyPath::HeadCPPType' has a wrong offset!");
static_assert(offsetof(FRigVMFunctionCompilationPropertyPath, SegmentPath) == 0x000018, "Member 'FRigVMFunctionCompilationPropertyPath::SegmentPath' has a wrong offset!");

// ScriptStruct RigVM.RigVMOperand
// 0x0006 (0x0006 - 0x0000)
struct FRigVMOperand final
{
public:
	ERigVMMemoryType                              MemoryType;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1[0x1];                                        // 0x0001(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint16                                        RegisterIndex;                                     // 0x0002(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint16                                        RegisterOffset;                                    // 0x0004(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FRigVMOperand) == 0x000002, "Wrong alignment on FRigVMOperand");
static_assert(sizeof(FRigVMOperand) == 0x000006, "Wrong size on FRigVMOperand");
static_assert(offsetof(FRigVMOperand, MemoryType) == 0x000000, "Member 'FRigVMOperand::MemoryType' has a wrong offset!");
static_assert(offsetof(FRigVMOperand, RegisterIndex) == 0x000002, "Member 'FRigVMOperand::RegisterIndex' has a wrong offset!");
static_assert(offsetof(FRigVMOperand, RegisterOffset) == 0x000004, "Member 'FRigVMOperand::RegisterOffset' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunctionCompilationData
// 0x0238 (0x0238 - 0x0000)
struct FRigVMFunctionCompilationData final
{
public:
	struct FRigVMByteCode                         ByteCode;                                          // 0x0000(0x00B0)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           FunctionNames;                                     // 0x00B0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRigVMFunctionCompilationPropertyDescription> WorkPropertyDescriptions;                          // 0x00C0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRigVMFunctionCompilationPropertyPath> WorkPropertyPathDescriptions;                      // 0x00D0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRigVMFunctionCompilationPropertyDescription> LiteralPropertyDescriptions;                       // 0x00E0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRigVMFunctionCompilationPropertyPath> LiteralPropertyPathDescriptions;                   // 0x00F0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRigVMFunctionCompilationPropertyDescription> DebugPropertyDescriptions;                         // 0x0100(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRigVMFunctionCompilationPropertyPath> DebugPropertyPathDescriptions;                     // 0x0110(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRigVMFunctionCompilationPropertyDescription> ExternalPropertyDescriptions;                      // 0x0120(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRigVMFunctionCompilationPropertyPath> ExternalPropertyPathDescriptions;                  // 0x0130(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<int32, class FName>                      ExternalRegisterIndexToVariable;                   // 0x0140(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FString, struct FRigVMOperand>     Operands;                                          // 0x0190(0x0050)(NativeAccessSpecifierPublic)
	uint32                                        Hash;                                              // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEncounteredSurpressedErrors;                      // 0x01E4(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E5[0x53];                                     // 0x01E5(0x0053)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunctionCompilationData) == 0x000008, "Wrong alignment on FRigVMFunctionCompilationData");
static_assert(sizeof(FRigVMFunctionCompilationData) == 0x000238, "Wrong size on FRigVMFunctionCompilationData");
static_assert(offsetof(FRigVMFunctionCompilationData, ByteCode) == 0x000000, "Member 'FRigVMFunctionCompilationData::ByteCode' has a wrong offset!");
static_assert(offsetof(FRigVMFunctionCompilationData, FunctionNames) == 0x0000B0, "Member 'FRigVMFunctionCompilationData::FunctionNames' has a wrong offset!");
static_assert(offsetof(FRigVMFunctionCompilationData, WorkPropertyDescriptions) == 0x0000C0, "Member 'FRigVMFunctionCompilationData::WorkPropertyDescriptions' has a wrong offset!");
static_assert(offsetof(FRigVMFunctionCompilationData, WorkPropertyPathDescriptions) == 0x0000D0, "Member 'FRigVMFunctionCompilationData::WorkPropertyPathDescriptions' has a wrong offset!");
static_assert(offsetof(FRigVMFunctionCompilationData, LiteralPropertyDescriptions) == 0x0000E0, "Member 'FRigVMFunctionCompilationData::LiteralPropertyDescriptions' has a wrong offset!");
static_assert(offsetof(FRigVMFunctionCompilationData, LiteralPropertyPathDescriptions) == 0x0000F0, "Member 'FRigVMFunctionCompilationData::LiteralPropertyPathDescriptions' has a wrong offset!");
static_assert(offsetof(FRigVMFunctionCompilationData, DebugPropertyDescriptions) == 0x000100, "Member 'FRigVMFunctionCompilationData::DebugPropertyDescriptions' has a wrong offset!");
static_assert(offsetof(FRigVMFunctionCompilationData, DebugPropertyPathDescriptions) == 0x000110, "Member 'FRigVMFunctionCompilationData::DebugPropertyPathDescriptions' has a wrong offset!");
static_assert(offsetof(FRigVMFunctionCompilationData, ExternalPropertyDescriptions) == 0x000120, "Member 'FRigVMFunctionCompilationData::ExternalPropertyDescriptions' has a wrong offset!");
static_assert(offsetof(FRigVMFunctionCompilationData, ExternalPropertyPathDescriptions) == 0x000130, "Member 'FRigVMFunctionCompilationData::ExternalPropertyPathDescriptions' has a wrong offset!");
static_assert(offsetof(FRigVMFunctionCompilationData, ExternalRegisterIndexToVariable) == 0x000140, "Member 'FRigVMFunctionCompilationData::ExternalRegisterIndexToVariable' has a wrong offset!");
static_assert(offsetof(FRigVMFunctionCompilationData, Operands) == 0x000190, "Member 'FRigVMFunctionCompilationData::Operands' has a wrong offset!");
static_assert(offsetof(FRigVMFunctionCompilationData, Hash) == 0x0001E0, "Member 'FRigVMFunctionCompilationData::Hash' has a wrong offset!");
static_assert(offsetof(FRigVMFunctionCompilationData, bEncounteredSurpressedErrors) == 0x0001E4, "Member 'FRigVMFunctionCompilationData::bEncounteredSurpressedErrors' has a wrong offset!");

// ScriptStruct RigVM.RigVMGraphFunctionData
// 0x0360 (0x0360 - 0x0000)
struct FRigVMGraphFunctionData final
{
public:
	struct FRigVMGraphFunctionHeader              Header;                                            // 0x0000(0x0118)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigVMFunctionCompilationData          CompilationData;                                   // 0x0118(0x0238)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SerializedCollapsedNode;                           // 0x0350(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMGraphFunctionData) == 0x000008, "Wrong alignment on FRigVMGraphFunctionData");
static_assert(sizeof(FRigVMGraphFunctionData) == 0x000360, "Wrong size on FRigVMGraphFunctionData");
static_assert(offsetof(FRigVMGraphFunctionData, Header) == 0x000000, "Member 'FRigVMGraphFunctionData::Header' has a wrong offset!");
static_assert(offsetof(FRigVMGraphFunctionData, CompilationData) == 0x000118, "Member 'FRigVMGraphFunctionData::CompilationData' has a wrong offset!");
static_assert(offsetof(FRigVMGraphFunctionData, SerializedCollapsedNode) == 0x000350, "Member 'FRigVMGraphFunctionData::SerializedCollapsedNode' has a wrong offset!");

// ScriptStruct RigVM.RigVMGraphFunctionStore
// 0x0020 (0x0020 - 0x0000)
struct FRigVMGraphFunctionStore final
{
public:
	TArray<struct FRigVMGraphFunctionData>        PublicFunctions;                                   // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRigVMGraphFunctionData>        PrivateFunctions;                                  // 0x0010(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMGraphFunctionStore) == 0x000008, "Wrong alignment on FRigVMGraphFunctionStore");
static_assert(sizeof(FRigVMGraphFunctionStore) == 0x000020, "Wrong size on FRigVMGraphFunctionStore");
static_assert(offsetof(FRigVMGraphFunctionStore, PublicFunctions) == 0x000000, "Member 'FRigVMGraphFunctionStore::PublicFunctions' has a wrong offset!");
static_assert(offsetof(FRigVMGraphFunctionStore, PrivateFunctions) == 0x000010, "Member 'FRigVMGraphFunctionStore::PrivateFunctions' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_AccumulateQuatMul
// 0x00A8 (0x00B0 - 0x0008)
struct FRigVMFunction_AccumulateQuatMul final : public FRigVMFunction_AccumulateBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Multiplier;                                        // 0x0010(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  InitialValue;                                      // 0x0030(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlipOrder;                                        // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIntegrateDeltaTime;                               // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0xE];                                       // 0x0052(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Result;                                            // 0x0060(0x0020)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  AccumulatedValue;                                  // 0x0080(0x0020)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInitialized;                                    // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0xF];                                       // 0x00A1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_AccumulateQuatMul) == 0x000010, "Wrong alignment on FRigVMFunction_AccumulateQuatMul");
static_assert(sizeof(FRigVMFunction_AccumulateQuatMul) == 0x0000B0, "Wrong size on FRigVMFunction_AccumulateQuatMul");
static_assert(offsetof(FRigVMFunction_AccumulateQuatMul, Multiplier) == 0x000010, "Member 'FRigVMFunction_AccumulateQuatMul::Multiplier' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateQuatMul, InitialValue) == 0x000030, "Member 'FRigVMFunction_AccumulateQuatMul::InitialValue' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateQuatMul, bFlipOrder) == 0x000050, "Member 'FRigVMFunction_AccumulateQuatMul::bFlipOrder' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateQuatMul, bIntegrateDeltaTime) == 0x000051, "Member 'FRigVMFunction_AccumulateQuatMul::bIntegrateDeltaTime' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateQuatMul, Result) == 0x000060, "Member 'FRigVMFunction_AccumulateQuatMul::Result' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateQuatMul, AccumulatedValue) == 0x000080, "Member 'FRigVMFunction_AccumulateQuatMul::AccumulatedValue' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateQuatMul, bIsInitialized) == 0x0000A0, "Member 'FRigVMFunction_AccumulateQuatMul::bIsInitialized' has a wrong offset!");

// ScriptStruct RigVM.RigVMDispatch_ArrayBaseMutable
// 0x0000 (0x0070 - 0x0070)
struct FRigVMDispatch_ArrayBaseMutable : public FRigVMDispatch_ArrayBase
{
};
static_assert(alignof(FRigVMDispatch_ArrayBaseMutable) == 0x000008, "Wrong alignment on FRigVMDispatch_ArrayBaseMutable");
static_assert(sizeof(FRigVMDispatch_ArrayBaseMutable) == 0x000070, "Wrong size on FRigVMDispatch_ArrayBaseMutable");

// ScriptStruct RigVM.RigVMDispatch_ArraySetAtIndex
// 0x0000 (0x0070 - 0x0070)
struct FRigVMDispatch_ArraySetAtIndex : public FRigVMDispatch_ArrayBaseMutable
{
};
static_assert(alignof(FRigVMDispatch_ArraySetAtIndex) == 0x000008, "Wrong alignment on FRigVMDispatch_ArraySetAtIndex");
static_assert(sizeof(FRigVMDispatch_ArraySetAtIndex) == 0x000070, "Wrong size on FRigVMDispatch_ArraySetAtIndex");

// ScriptStruct RigVM.RigVMDispatch_ArrayInsert
// 0x0000 (0x0070 - 0x0070)
struct FRigVMDispatch_ArrayInsert final : public FRigVMDispatch_ArraySetAtIndex
{
};
static_assert(alignof(FRigVMDispatch_ArrayInsert) == 0x000008, "Wrong alignment on FRigVMDispatch_ArrayInsert");
static_assert(sizeof(FRigVMDispatch_ArrayInsert) == 0x000070, "Wrong size on FRigVMDispatch_ArrayInsert");

// ScriptStruct RigVM.RigVMDispatch_ArrayReset
// 0x0000 (0x0070 - 0x0070)
struct FRigVMDispatch_ArrayReset : public FRigVMDispatch_ArrayBaseMutable
{
};
static_assert(alignof(FRigVMDispatch_ArrayReset) == 0x000008, "Wrong alignment on FRigVMDispatch_ArrayReset");
static_assert(sizeof(FRigVMDispatch_ArrayReset) == 0x000070, "Wrong size on FRigVMDispatch_ArrayReset");

// ScriptStruct RigVM.RigVMMirrorSettings
// 0x0028 (0x0028 - 0x0000)
struct FRigVMMirrorSettings final
{
public:
	EAxis                                         MirrorAxis;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         AxisToFlip;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SearchString;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReplaceString;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMMirrorSettings) == 0x000008, "Wrong alignment on FRigVMMirrorSettings");
static_assert(sizeof(FRigVMMirrorSettings) == 0x000028, "Wrong size on FRigVMMirrorSettings");
static_assert(offsetof(FRigVMMirrorSettings, MirrorAxis) == 0x000000, "Member 'FRigVMMirrorSettings::MirrorAxis' has a wrong offset!");
static_assert(offsetof(FRigVMMirrorSettings, AxisToFlip) == 0x000001, "Member 'FRigVMMirrorSettings::AxisToFlip' has a wrong offset!");
static_assert(offsetof(FRigVMMirrorSettings, SearchString) == 0x000008, "Member 'FRigVMMirrorSettings::SearchString' has a wrong offset!");
static_assert(offsetof(FRigVMMirrorSettings, ReplaceString) == 0x000018, "Member 'FRigVMMirrorSettings::ReplaceString' has a wrong offset!");

// ScriptStruct RigVM.RigVMDispatch_ArrayDifference
// 0x0000 (0x0070 - 0x0070)
struct FRigVMDispatch_ArrayDifference : public FRigVMDispatch_ArrayBase
{
};
static_assert(alignof(FRigVMDispatch_ArrayDifference) == 0x000008, "Wrong alignment on FRigVMDispatch_ArrayDifference");
static_assert(sizeof(FRigVMDispatch_ArrayDifference) == 0x000070, "Wrong size on FRigVMDispatch_ArrayDifference");

// ScriptStruct RigVM.RigVMDispatch_ArrayIntersection
// 0x0000 (0x0070 - 0x0070)
struct FRigVMDispatch_ArrayIntersection final : public FRigVMDispatch_ArrayDifference
{
};
static_assert(alignof(FRigVMDispatch_ArrayIntersection) == 0x000008, "Wrong alignment on FRigVMDispatch_ArrayIntersection");
static_assert(sizeof(FRigVMDispatch_ArrayIntersection) == 0x000070, "Wrong size on FRigVMDispatch_ArrayIntersection");

// ScriptStruct RigVM.RigVMMemoryStorageStruct
// 0x0040 (0x0050 - 0x0010)
struct FRigVMMemoryStorageStruct final : public FInstancedPropertyBag
{
public:
	uint8                                         Pad_10[0x40];                                      // 0x0010(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMMemoryStorageStruct) == 0x000008, "Wrong alignment on FRigVMMemoryStorageStruct");
static_assert(sizeof(FRigVMMemoryStorageStruct) == 0x000050, "Wrong size on FRigVMMemoryStorageStruct");

// ScriptStruct RigVM.RigVMDispatch_ArrayReverse
// 0x0000 (0x0070 - 0x0070)
struct FRigVMDispatch_ArrayReverse final : public FRigVMDispatch_ArrayReset
{
};
static_assert(alignof(FRigVMDispatch_ArrayReverse) == 0x000008, "Wrong alignment on FRigVMDispatch_ArrayReverse");
static_assert(sizeof(FRigVMDispatch_ArrayReverse) == 0x000070, "Wrong size on FRigVMDispatch_ArrayReverse");

// ScriptStruct RigVM.RigVMMemoryStatistics
// 0x000C (0x000C - 0x0000)
struct FRigVMMemoryStatistics final
{
public:
	int32                                         RegisterCount;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DataBytes;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalBytes;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMMemoryStatistics) == 0x000004, "Wrong alignment on FRigVMMemoryStatistics");
static_assert(sizeof(FRigVMMemoryStatistics) == 0x00000C, "Wrong size on FRigVMMemoryStatistics");
static_assert(offsetof(FRigVMMemoryStatistics, RegisterCount) == 0x000000, "Member 'FRigVMMemoryStatistics::RegisterCount' has a wrong offset!");
static_assert(offsetof(FRigVMMemoryStatistics, DataBytes) == 0x000004, "Member 'FRigVMMemoryStatistics::DataBytes' has a wrong offset!");
static_assert(offsetof(FRigVMMemoryStatistics, TotalBytes) == 0x000008, "Member 'FRigVMMemoryStatistics::TotalBytes' has a wrong offset!");

// ScriptStruct RigVM.RigVMByteCodeStatistics
// 0x0008 (0x0008 - 0x0000)
struct FRigVMByteCodeStatistics final
{
public:
	int32                                         InstructionCount;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DataBytes;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMByteCodeStatistics) == 0x000004, "Wrong alignment on FRigVMByteCodeStatistics");
static_assert(sizeof(FRigVMByteCodeStatistics) == 0x000008, "Wrong size on FRigVMByteCodeStatistics");
static_assert(offsetof(FRigVMByteCodeStatistics, InstructionCount) == 0x000000, "Member 'FRigVMByteCodeStatistics::InstructionCount' has a wrong offset!");
static_assert(offsetof(FRigVMByteCodeStatistics, DataBytes) == 0x000004, "Member 'FRigVMByteCodeStatistics::DataBytes' has a wrong offset!");

// ScriptStruct RigVM.RigVMDispatch_ArraySetNum
// 0x0000 (0x0070 - 0x0070)
struct FRigVMDispatch_ArraySetNum final : public FRigVMDispatch_ArrayBaseMutable
{
};
static_assert(alignof(FRigVMDispatch_ArraySetNum) == 0x000008, "Wrong alignment on FRigVMDispatch_ArraySetNum");
static_assert(sizeof(FRigVMDispatch_ArraySetNum) == 0x000070, "Wrong size on FRigVMDispatch_ArraySetNum");

// ScriptStruct RigVM.RigVMStatistics
// 0x0038 (0x0038 - 0x0000)
struct FRigVMStatistics final
{
public:
	int32                                         BytesForCDO;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BytesPerInstance;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigVMMemoryStatistics                 LiteralMemory;                                     // 0x0008(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FRigVMMemoryStatistics                 WorkMemory;                                        // 0x0014(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FRigVMMemoryStatistics                 DebugMemory;                                       // 0x0020(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         BytesForCaching;                                   // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigVMByteCodeStatistics               ByteCode;                                          // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMStatistics) == 0x000004, "Wrong alignment on FRigVMStatistics");
static_assert(sizeof(FRigVMStatistics) == 0x000038, "Wrong size on FRigVMStatistics");
static_assert(offsetof(FRigVMStatistics, BytesForCDO) == 0x000000, "Member 'FRigVMStatistics::BytesForCDO' has a wrong offset!");
static_assert(offsetof(FRigVMStatistics, BytesPerInstance) == 0x000004, "Member 'FRigVMStatistics::BytesPerInstance' has a wrong offset!");
static_assert(offsetof(FRigVMStatistics, LiteralMemory) == 0x000008, "Member 'FRigVMStatistics::LiteralMemory' has a wrong offset!");
static_assert(offsetof(FRigVMStatistics, WorkMemory) == 0x000014, "Member 'FRigVMStatistics::WorkMemory' has a wrong offset!");
static_assert(offsetof(FRigVMStatistics, DebugMemory) == 0x000020, "Member 'FRigVMStatistics::DebugMemory' has a wrong offset!");
static_assert(offsetof(FRigVMStatistics, BytesForCaching) == 0x00002C, "Member 'FRigVMStatistics::BytesForCaching' has a wrong offset!");
static_assert(offsetof(FRigVMStatistics, ByteCode) == 0x000030, "Member 'FRigVMStatistics::ByteCode' has a wrong offset!");

// ScriptStruct RigVM.RigVMGraphFunctionHeaderArray
// 0x0010 (0x0010 - 0x0000)
struct FRigVMGraphFunctionHeaderArray final
{
public:
	TArray<struct FRigVMGraphFunctionHeader>      Headers;                                           // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMGraphFunctionHeaderArray) == 0x000008, "Wrong alignment on FRigVMGraphFunctionHeaderArray");
static_assert(sizeof(FRigVMGraphFunctionHeaderArray) == 0x000010, "Wrong size on FRigVMGraphFunctionHeaderArray");
static_assert(offsetof(FRigVMGraphFunctionHeaderArray, Headers) == 0x000000, "Member 'FRigVMGraphFunctionHeaderArray::Headers' has a wrong offset!");

// ScriptStruct RigVM.RigVMDispatch_ArrayAppend
// 0x0000 (0x0070 - 0x0070)
struct FRigVMDispatch_ArrayAppend : public FRigVMDispatch_ArrayBaseMutable
{
};
static_assert(alignof(FRigVMDispatch_ArrayAppend) == 0x000008, "Wrong alignment on FRigVMDispatch_ArrayAppend");
static_assert(sizeof(FRigVMDispatch_ArrayAppend) == 0x000070, "Wrong size on FRigVMDispatch_ArrayAppend");

// ScriptStruct RigVM.RigVMDispatch_ArrayUnion
// 0x0000 (0x0070 - 0x0070)
struct FRigVMDispatch_ArrayUnion final : public FRigVMDispatch_ArrayAppend
{
};
static_assert(alignof(FRigVMDispatch_ArrayUnion) == 0x000008, "Wrong alignment on FRigVMDispatch_ArrayUnion");
static_assert(sizeof(FRigVMDispatch_ArrayUnion) == 0x000070, "Wrong size on FRigVMDispatch_ArrayUnion");

// ScriptStruct RigVM.RigVMParameter
// 0x0030 (0x0030 - 0x0000)
struct FRigVMParameter final
{
public:
	ERigVMParameterType                           Type;                                              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Name;                                              // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         RegisterIndex;                                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 CPPType;                                           // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UScriptStruct*                          ScriptStruct;                                      // 0x0020(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ScriptStructPath;                                  // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FRigVMParameter) == 0x000008, "Wrong alignment on FRigVMParameter");
static_assert(sizeof(FRigVMParameter) == 0x000030, "Wrong size on FRigVMParameter");
static_assert(offsetof(FRigVMParameter, Type) == 0x000000, "Member 'FRigVMParameter::Type' has a wrong offset!");
static_assert(offsetof(FRigVMParameter, Name) == 0x000004, "Member 'FRigVMParameter::Name' has a wrong offset!");
static_assert(offsetof(FRigVMParameter, RegisterIndex) == 0x00000C, "Member 'FRigVMParameter::RegisterIndex' has a wrong offset!");
static_assert(offsetof(FRigVMParameter, CPPType) == 0x000010, "Member 'FRigVMParameter::CPPType' has a wrong offset!");
static_assert(offsetof(FRigVMParameter, ScriptStruct) == 0x000020, "Member 'FRigVMParameter::ScriptStruct' has a wrong offset!");
static_assert(offsetof(FRigVMParameter, ScriptStructPath) == 0x000028, "Member 'FRigVMParameter::ScriptStructPath' has a wrong offset!");

// ScriptStruct RigVM.RigVMDispatch_Print
// 0x0000 (0x0070 - 0x0070)
struct FRigVMDispatch_Print final : public FRigVMDispatchFactory
{
};
static_assert(alignof(FRigVMDispatch_Print) == 0x000008, "Wrong alignment on FRigVMDispatch_Print");
static_assert(sizeof(FRigVMDispatch_Print) == 0x000070, "Wrong size on FRigVMDispatch_Print");

// ScriptStruct RigVM.RigVMExecuteOp
// 0x0009 (0x000A - 0x0001)
struct alignas(0x02) FRigVMExecuteOp final : public FRigVMBaseOp
{
public:
	uint8                                         Pad_1[0x9];                                        // 0x0001(0x0009)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMExecuteOp) == 0x000002, "Wrong alignment on FRigVMExecuteOp");
static_assert(sizeof(FRigVMExecuteOp) == 0x00000A, "Wrong size on FRigVMExecuteOp");

// ScriptStruct RigVM.RigVMDispatch_Constant
// 0x0000 (0x0070 - 0x0070)
struct FRigVMDispatch_Constant final : public FRigVMDispatch_CoreBase
{
};
static_assert(alignof(FRigVMDispatch_Constant) == 0x000008, "Wrong alignment on FRigVMDispatch_Constant");
static_assert(sizeof(FRigVMDispatch_Constant) == 0x000070, "Wrong size on FRigVMDispatch_Constant");

// ScriptStruct RigVM.RigVMBinaryOp
// 0x000D (0x000E - 0x0001)
struct alignas(0x02) FRigVMBinaryOp final : public FRigVMBaseOp
{
public:
	uint8                                         Pad_1[0xD];                                        // 0x0001(0x000D)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMBinaryOp) == 0x000002, "Wrong alignment on FRigVMBinaryOp");
static_assert(sizeof(FRigVMBinaryOp) == 0x00000E, "Wrong size on FRigVMBinaryOp");

// ScriptStruct RigVM.RigVMQuaternaryOp
// 0x0019 (0x001A - 0x0001)
struct alignas(0x02) FRigVMQuaternaryOp final : public FRigVMBaseOp
{
public:
	uint8                                         Pad_1[0x19];                                       // 0x0001(0x0019)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMQuaternaryOp) == 0x000002, "Wrong alignment on FRigVMQuaternaryOp");
static_assert(sizeof(FRigVMQuaternaryOp) == 0x00001A, "Wrong size on FRigVMQuaternaryOp");

// ScriptStruct RigVM.RigVMQuinaryOp
// 0x001F (0x0020 - 0x0001)
struct alignas(0x02) FRigVMQuinaryOp final : public FRigVMBaseOp
{
public:
	uint8                                         Pad_1[0x1F];                                       // 0x0001(0x001F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMQuinaryOp) == 0x000002, "Wrong alignment on FRigVMQuinaryOp");
static_assert(sizeof(FRigVMQuinaryOp) == 0x000020, "Wrong size on FRigVMQuinaryOp");

// ScriptStruct RigVM.RigVMDispatch_MakeStruct
// 0x0000 (0x0070 - 0x0070)
struct FRigVMDispatch_MakeStruct : public FRigVMDispatch_CoreBase
{
};
static_assert(alignof(FRigVMDispatch_MakeStruct) == 0x000008, "Wrong alignment on FRigVMDispatch_MakeStruct");
static_assert(sizeof(FRigVMDispatch_MakeStruct) == 0x000070, "Wrong size on FRigVMDispatch_MakeStruct");

// ScriptStruct RigVM.RigVMSenaryOp
// 0x0025 (0x0026 - 0x0001)
struct alignas(0x02) FRigVMSenaryOp final : public FRigVMBaseOp
{
public:
	uint8                                         Pad_1[0x25];                                       // 0x0001(0x0025)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMSenaryOp) == 0x000002, "Wrong alignment on FRigVMSenaryOp");
static_assert(sizeof(FRigVMSenaryOp) == 0x000026, "Wrong size on FRigVMSenaryOp");

// ScriptStruct RigVM.RigVMCopyOp
// 0x0011 (0x0012 - 0x0001)
struct alignas(0x02) FRigVMCopyOp final : public FRigVMBaseOp
{
public:
	uint8                                         Pad_1[0x11];                                       // 0x0001(0x0011)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMCopyOp) == 0x000002, "Wrong alignment on FRigVMCopyOp");
static_assert(sizeof(FRigVMCopyOp) == 0x000012, "Wrong size on FRigVMCopyOp");

// ScriptStruct RigVM.RigVMFunction_MathVectorLength
// 0x0020 (0x0028 - 0x0008)
struct FRigVMFunction_MathVectorLength final : public FRigVMFunction_MathVectorBase
{
public:
	struct FVector                                Value;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Result;                                            // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathVectorLength) == 0x000008, "Wrong alignment on FRigVMFunction_MathVectorLength");
static_assert(sizeof(FRigVMFunction_MathVectorLength) == 0x000028, "Wrong size on FRigVMFunction_MathVectorLength");
static_assert(offsetof(FRigVMFunction_MathVectorLength, Value) == 0x000008, "Member 'FRigVMFunction_MathVectorLength::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorLength, Result) == 0x000020, "Member 'FRigVMFunction_MathVectorLength::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMComparisonOp
// 0x0013 (0x0014 - 0x0001)
struct alignas(0x02) FRigVMComparisonOp final : public FRigVMBaseOp
{
public:
	uint8                                         Pad_1[0x13];                                       // 0x0001(0x0013)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMComparisonOp) == 0x000002, "Wrong alignment on FRigVMComparisonOp");
static_assert(sizeof(FRigVMComparisonOp) == 0x000014, "Wrong size on FRigVMComparisonOp");

// ScriptStruct RigVM.RigVMChangeTypeOp
// 0x0000 (0x0008 - 0x0008)
struct FRigVMChangeTypeOp final : public FRigVMUnaryOp
{
};
static_assert(alignof(FRigVMChangeTypeOp) == 0x000002, "Wrong alignment on FRigVMChangeTypeOp");
static_assert(sizeof(FRigVMChangeTypeOp) == 0x000008, "Wrong size on FRigVMChangeTypeOp");

// ScriptStruct RigVM.RigVMDispatch_CoreEquals
// 0x0000 (0x0070 - 0x0070)
struct FRigVMDispatch_CoreEquals : public FRigVMDispatch_CoreBase
{
};
static_assert(alignof(FRigVMDispatch_CoreEquals) == 0x000008, "Wrong alignment on FRigVMDispatch_CoreEquals");
static_assert(sizeof(FRigVMDispatch_CoreEquals) == 0x000070, "Wrong size on FRigVMDispatch_CoreEquals");

// ScriptStruct RigVM.RigVMDispatch_CoreNotEquals
// 0x0000 (0x0070 - 0x0070)
struct FRigVMDispatch_CoreNotEquals final : public FRigVMDispatch_CoreEquals
{
};
static_assert(alignof(FRigVMDispatch_CoreNotEquals) == 0x000008, "Wrong alignment on FRigVMDispatch_CoreNotEquals");
static_assert(sizeof(FRigVMDispatch_CoreNotEquals) == 0x000070, "Wrong size on FRigVMDispatch_CoreNotEquals");

// ScriptStruct RigVM.RigVMInvokeEntryOp
// 0x000B (0x000C - 0x0001)
struct alignas(0x04) FRigVMInvokeEntryOp final : public FRigVMBaseOp
{
public:
	uint8                                         Pad_1[0xB];                                        // 0x0001(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMInvokeEntryOp) == 0x000004, "Wrong alignment on FRigVMInvokeEntryOp");
static_assert(sizeof(FRigVMInvokeEntryOp) == 0x00000C, "Wrong size on FRigVMInvokeEntryOp");

// ScriptStruct RigVM.RigVMJumpToBranchOp
// 0x0004 (0x000C - 0x0008)
struct alignas(0x04) FRigVMJumpToBranchOp final : public FRigVMUnaryOp
{
public:
	uint8                                         Pad_8[0x4];                                        // 0x0008(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMJumpToBranchOp) == 0x000004, "Wrong alignment on FRigVMJumpToBranchOp");
static_assert(sizeof(FRigVMJumpToBranchOp) == 0x00000C, "Wrong size on FRigVMJumpToBranchOp");

// ScriptStruct RigVM.RigVMFunction_MathVectorRad
// 0x0000 (0x0038 - 0x0038)
struct FRigVMFunction_MathVectorRad final : public FRigVMFunction_MathVectorUnaryOp
{
};
static_assert(alignof(FRigVMFunction_MathVectorRad) == 0x000008, "Wrong alignment on FRigVMFunction_MathVectorRad");
static_assert(sizeof(FRigVMFunction_MathVectorRad) == 0x000038, "Wrong size on FRigVMFunction_MathVectorRad");

// ScriptStruct RigVM.RigVMRunInstructionsOp
// 0x0008 (0x0010 - 0x0008)
struct alignas(0x04) FRigVMRunInstructionsOp final : public FRigVMUnaryOp
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMRunInstructionsOp) == 0x000004, "Wrong alignment on FRigVMRunInstructionsOp");
static_assert(sizeof(FRigVMRunInstructionsOp) == 0x000010, "Wrong size on FRigVMRunInstructionsOp");

// ScriptStruct RigVM.RigVMInstruction
// 0x0010 (0x0010 - 0x0000)
struct FRigVMInstruction final
{
public:
	uint64                                        ByteCodeIndex;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigVMOpCode                                  OpCode;                                            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         OperandAlignment;                                  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMInstruction) == 0x000008, "Wrong alignment on FRigVMInstruction");
static_assert(sizeof(FRigVMInstruction) == 0x000010, "Wrong size on FRigVMInstruction");
static_assert(offsetof(FRigVMInstruction, ByteCodeIndex) == 0x000000, "Member 'FRigVMInstruction::ByteCodeIndex' has a wrong offset!");
static_assert(offsetof(FRigVMInstruction, OpCode) == 0x000008, "Member 'FRigVMInstruction::OpCode' has a wrong offset!");
static_assert(offsetof(FRigVMInstruction, OperandAlignment) == 0x000009, "Member 'FRigVMInstruction::OperandAlignment' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_StringBase
// 0x0000 (0x0008 - 0x0008)
struct FRigVMFunction_StringBase : public FRigVMStruct
{
};
static_assert(alignof(FRigVMFunction_StringBase) == 0x000008, "Wrong alignment on FRigVMFunction_StringBase");
static_assert(sizeof(FRigVMFunction_StringBase) == 0x000008, "Wrong size on FRigVMFunction_StringBase");

// ScriptStruct RigVM.RigVMFunction_StringEndsWith
// 0x0028 (0x0030 - 0x0008)
struct FRigVMFunction_StringEndsWith final : public FRigVMFunction_StringBase
{
public:
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ending;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_StringEndsWith) == 0x000008, "Wrong alignment on FRigVMFunction_StringEndsWith");
static_assert(sizeof(FRigVMFunction_StringEndsWith) == 0x000030, "Wrong size on FRigVMFunction_StringEndsWith");
static_assert(offsetof(FRigVMFunction_StringEndsWith, Name) == 0x000008, "Member 'FRigVMFunction_StringEndsWith::Name' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_StringEndsWith, Ending) == 0x000018, "Member 'FRigVMFunction_StringEndsWith::Ending' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_StringEndsWith, Result) == 0x000028, "Member 'FRigVMFunction_StringEndsWith::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMInstructionArray
// 0x0010 (0x0010 - 0x0000)
struct FRigVMInstructionArray final
{
public:
	TArray<struct FRigVMInstruction>              Instructions;                                      // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FRigVMInstructionArray) == 0x000008, "Wrong alignment on FRigVMInstructionArray");
static_assert(sizeof(FRigVMInstructionArray) == 0x000010, "Wrong size on FRigVMInstructionArray");
static_assert(offsetof(FRigVMInstructionArray, Instructions) == 0x000000, "Member 'FRigVMInstructionArray::Instructions' has a wrong offset!");

// ScriptStruct RigVM.RigVMBreakpoint
// 0x0024 (0x0024 - 0x0000)
struct alignas(0x04) FRigVMBreakpoint final
{
public:
	uint8                                         Pad_0[0x24];                                       // 0x0000(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMBreakpoint) == 0x000004, "Wrong alignment on FRigVMBreakpoint");
static_assert(sizeof(FRigVMBreakpoint) == 0x000024, "Wrong size on FRigVMBreakpoint");

// ScriptStruct RigVM.RigVMFunction_NameBase
// 0x0000 (0x0008 - 0x0008)
struct FRigVMFunction_NameBase : public FRigVMStruct
{
};
static_assert(alignof(FRigVMFunction_NameBase) == 0x000008, "Wrong alignment on FRigVMFunction_NameBase");
static_assert(sizeof(FRigVMFunction_NameBase) == 0x000008, "Wrong size on FRigVMFunction_NameBase");

// ScriptStruct RigVM.RigVMFunction_StartsWith
// 0x0018 (0x0020 - 0x0008)
struct FRigVMFunction_StartsWith final : public FRigVMFunction_NameBase
{
public:
	class FName                                   Name;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Start;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_StartsWith) == 0x000008, "Wrong alignment on FRigVMFunction_StartsWith");
static_assert(sizeof(FRigVMFunction_StartsWith) == 0x000020, "Wrong size on FRigVMFunction_StartsWith");
static_assert(offsetof(FRigVMFunction_StartsWith, Name) == 0x000008, "Member 'FRigVMFunction_StartsWith::Name' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_StartsWith, Start) == 0x000010, "Member 'FRigVMFunction_StartsWith::Start' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_StartsWith, Result) == 0x000018, "Member 'FRigVMFunction_StartsWith::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMDebugInfo
// 0x0140 (0x0140 - 0x0000)
struct alignas(0x08) FRigVMDebugInfo final
{
public:
	uint8                                         Pad_0[0x140];                                      // 0x0000(0x0140)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMDebugInfo) == 0x000008, "Wrong alignment on FRigVMDebugInfo");
static_assert(sizeof(FRigVMDebugInfo) == 0x000140, "Wrong size on FRigVMDebugInfo");

// ScriptStruct RigVM.RigVMDrawInterface
// 0x0000 (0x0018 - 0x0018)
struct FRigVMDrawInterface final : public FRigVMDrawContainer
{
};
static_assert(alignof(FRigVMDrawInterface) == 0x000008, "Wrong alignment on FRigVMDrawInterface");
static_assert(sizeof(FRigVMDrawInterface) == 0x000018, "Wrong size on FRigVMDrawInterface");

// ScriptStruct RigVM.RigVMFunction_ControlFlowBase
// 0x0000 (0x0008 - 0x0008)
struct FRigVMFunction_ControlFlowBase : public FRigVMStruct
{
};
static_assert(alignof(FRigVMFunction_ControlFlowBase) == 0x000008, "Wrong alignment on FRigVMFunction_ControlFlowBase");
static_assert(sizeof(FRigVMFunction_ControlFlowBase) == 0x000008, "Wrong size on FRigVMFunction_ControlFlowBase");

// ScriptStruct RigVM.RigVMFunction_ControlFlowBranch
// 0x03E8 (0x03F0 - 0x0008)
struct FRigVMFunction_ControlFlowBranch final : public FRigVMFunction_ControlFlowBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigVMExecuteContext                   ExecuteContext;                                    // 0x0010(0x00F0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Condition;                                         // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0xF];                                      // 0x0101(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigVMExecuteContext                   TURR;                                              // 0x0110(0x00F0)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FRigVMExecuteContext                   FLASE;                                             // 0x0200(0x00F0)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FRigVMExecuteContext                   Completed;                                         // 0x02F0(0x00F0)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FName                                   BlockToRun;                                        // 0x03E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E8[0x8];                                      // 0x03E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_ControlFlowBranch) == 0x000010, "Wrong alignment on FRigVMFunction_ControlFlowBranch");
static_assert(sizeof(FRigVMFunction_ControlFlowBranch) == 0x0003F0, "Wrong size on FRigVMFunction_ControlFlowBranch");
static_assert(offsetof(FRigVMFunction_ControlFlowBranch, ExecuteContext) == 0x000010, "Member 'FRigVMFunction_ControlFlowBranch::ExecuteContext' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_ControlFlowBranch, Condition) == 0x000100, "Member 'FRigVMFunction_ControlFlowBranch::Condition' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_ControlFlowBranch, TURR) == 0x000110, "Member 'FRigVMFunction_ControlFlowBranch::TURR' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_ControlFlowBranch, FLASE) == 0x000200, "Member 'FRigVMFunction_ControlFlowBranch::FLASE' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_ControlFlowBranch, Completed) == 0x0002F0, "Member 'FRigVMFunction_ControlFlowBranch::Completed' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_ControlFlowBranch, BlockToRun) == 0x0003E0, "Member 'FRigVMFunction_ControlFlowBranch::BlockToRun' has a wrong offset!");

// ScriptStruct RigVM.RigVMSlice
// 0x0014 (0x0014 - 0x0000)
struct alignas(0x04) FRigVMSlice final
{
public:
	uint8                                         Pad_0[0x14];                                       // 0x0000(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMSlice) == 0x000004, "Wrong alignment on FRigVMSlice");
static_assert(sizeof(FRigVMSlice) == 0x000014, "Wrong size on FRigVMSlice");

// ScriptStruct RigVM.RigVMInstructionSetExecuteState
// 0x0050 (0x0050 - 0x0000)
struct FRigVMInstructionSetExecuteState final
{
public:
	TMap<uint32, uint32>                          SliceHashToNumInstruction;                         // 0x0000(0x0050)(Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMInstructionSetExecuteState) == 0x000008, "Wrong alignment on FRigVMInstructionSetExecuteState");
static_assert(sizeof(FRigVMInstructionSetExecuteState) == 0x000050, "Wrong size on FRigVMInstructionSetExecuteState");
static_assert(offsetof(FRigVMInstructionSetExecuteState, SliceHashToNumInstruction) == 0x000000, "Member 'FRigVMInstructionSetExecuteState::SliceHashToNumInstruction' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_StringTruncate
// 0x0038 (0x0040 - 0x0008)
struct FRigVMFunction_StringTruncate final : public FRigVMFunction_StringBase
{
public:
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FromEnd;                                           // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Remainder;                                         // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Chopped;                                           // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_StringTruncate) == 0x000008, "Wrong alignment on FRigVMFunction_StringTruncate");
static_assert(sizeof(FRigVMFunction_StringTruncate) == 0x000040, "Wrong size on FRigVMFunction_StringTruncate");
static_assert(offsetof(FRigVMFunction_StringTruncate, Name) == 0x000008, "Member 'FRigVMFunction_StringTruncate::Name' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_StringTruncate, Count) == 0x000018, "Member 'FRigVMFunction_StringTruncate::Count' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_StringTruncate, FromEnd) == 0x00001C, "Member 'FRigVMFunction_StringTruncate::FromEnd' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_StringTruncate, Remainder) == 0x000020, "Member 'FRigVMFunction_StringTruncate::Remainder' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_StringTruncate, Chopped) == 0x000030, "Member 'FRigVMFunction_StringTruncate::Chopped' has a wrong offset!");

// ScriptStruct RigVM.RigVMRegister
// 0x0024 (0x0024 - 0x0000)
struct FRigVMRegister final
{
public:
	ERigVMRegisterType                            Type;                                              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        ByteIndex;                                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        ElementSize;                                       // 0x0008(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        ElementCount;                                      // 0x000A(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SliceCount;                                        // 0x000C(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AlignmentBytes;                                    // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint16                                        TrailingBytes;                                     // 0x0010(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Name;                                              // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScriptStructIndex;                                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsArray;                                          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDynamic;                                        // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMRegister) == 0x000004, "Wrong alignment on FRigVMRegister");
static_assert(sizeof(FRigVMRegister) == 0x000024, "Wrong size on FRigVMRegister");
static_assert(offsetof(FRigVMRegister, Type) == 0x000000, "Member 'FRigVMRegister::Type' has a wrong offset!");
static_assert(offsetof(FRigVMRegister, ByteIndex) == 0x000004, "Member 'FRigVMRegister::ByteIndex' has a wrong offset!");
static_assert(offsetof(FRigVMRegister, ElementSize) == 0x000008, "Member 'FRigVMRegister::ElementSize' has a wrong offset!");
static_assert(offsetof(FRigVMRegister, ElementCount) == 0x00000A, "Member 'FRigVMRegister::ElementCount' has a wrong offset!");
static_assert(offsetof(FRigVMRegister, SliceCount) == 0x00000C, "Member 'FRigVMRegister::SliceCount' has a wrong offset!");
static_assert(offsetof(FRigVMRegister, AlignmentBytes) == 0x00000E, "Member 'FRigVMRegister::AlignmentBytes' has a wrong offset!");
static_assert(offsetof(FRigVMRegister, TrailingBytes) == 0x000010, "Member 'FRigVMRegister::TrailingBytes' has a wrong offset!");
static_assert(offsetof(FRigVMRegister, Name) == 0x000014, "Member 'FRigVMRegister::Name' has a wrong offset!");
static_assert(offsetof(FRigVMRegister, ScriptStructIndex) == 0x00001C, "Member 'FRigVMRegister::ScriptStructIndex' has a wrong offset!");
static_assert(offsetof(FRigVMRegister, bIsArray) == 0x000020, "Member 'FRigVMRegister::bIsArray' has a wrong offset!");
static_assert(offsetof(FRigVMRegister, bIsDynamic) == 0x000021, "Member 'FRigVMRegister::bIsDynamic' has a wrong offset!");

// ScriptStruct RigVM.RigVMRegisterOffset
// 0x0048 (0x0048 - 0x0000)
struct FRigVMRegisterOffset final
{
public:
	TArray<int32>                                 Segments;                                          // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	ERigVMRegisterType                            Type;                                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CPPType;                                           // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UScriptStruct*                          ScriptStruct;                                      // 0x0020(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UScriptStruct*                          ParentScriptStruct;                                // 0x0028(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         ArrayIndex;                                        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint16                                        ElementSize;                                       // 0x0034(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CachedSegmentPath;                                 // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FRigVMRegisterOffset) == 0x000008, "Wrong alignment on FRigVMRegisterOffset");
static_assert(sizeof(FRigVMRegisterOffset) == 0x000048, "Wrong size on FRigVMRegisterOffset");
static_assert(offsetof(FRigVMRegisterOffset, Segments) == 0x000000, "Member 'FRigVMRegisterOffset::Segments' has a wrong offset!");
static_assert(offsetof(FRigVMRegisterOffset, Type) == 0x000010, "Member 'FRigVMRegisterOffset::Type' has a wrong offset!");
static_assert(offsetof(FRigVMRegisterOffset, CPPType) == 0x000014, "Member 'FRigVMRegisterOffset::CPPType' has a wrong offset!");
static_assert(offsetof(FRigVMRegisterOffset, ScriptStruct) == 0x000020, "Member 'FRigVMRegisterOffset::ScriptStruct' has a wrong offset!");
static_assert(offsetof(FRigVMRegisterOffset, ParentScriptStruct) == 0x000028, "Member 'FRigVMRegisterOffset::ParentScriptStruct' has a wrong offset!");
static_assert(offsetof(FRigVMRegisterOffset, ArrayIndex) == 0x000030, "Member 'FRigVMRegisterOffset::ArrayIndex' has a wrong offset!");
static_assert(offsetof(FRigVMRegisterOffset, ElementSize) == 0x000034, "Member 'FRigVMRegisterOffset::ElementSize' has a wrong offset!");
static_assert(offsetof(FRigVMRegisterOffset, CachedSegmentPath) == 0x000038, "Member 'FRigVMRegisterOffset::CachedSegmentPath' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_StringLeft
// 0x0028 (0x0030 - 0x0008)
struct FRigVMFunction_StringLeft final : public FRigVMFunction_StringBase
{
public:
	class FString                                 Value;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Result;                                            // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_StringLeft) == 0x000008, "Wrong alignment on FRigVMFunction_StringLeft");
static_assert(sizeof(FRigVMFunction_StringLeft) == 0x000030, "Wrong size on FRigVMFunction_StringLeft");
static_assert(offsetof(FRigVMFunction_StringLeft, Value) == 0x000008, "Member 'FRigVMFunction_StringLeft::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_StringLeft, Count) == 0x000018, "Member 'FRigVMFunction_StringLeft::Count' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_StringLeft, Result) == 0x000020, "Member 'FRigVMFunction_StringLeft::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMMemoryContainer
// 0x00A0 (0x00A0 - 0x0000)
struct FRigVMMemoryContainer final
{
public:
	bool                                          bUseNameMap;                                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigVMMemoryType                              MemoryType;                                        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigVMRegister>                 Registers;                                         // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRigVMRegisterOffset>           RegisterOffsets;                                   // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Data;                                              // 0x0028(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class UScriptStruct*>                  ScriptStructs;                                     // 0x0038(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      NameMap;                                           // 0x0048(0x0050)(Transient, NativeAccessSpecifierPublic)
	bool                                          bEncounteredErrorDuringLoad;                       // 0x0098(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMMemoryContainer) == 0x000008, "Wrong alignment on FRigVMMemoryContainer");
static_assert(sizeof(FRigVMMemoryContainer) == 0x0000A0, "Wrong size on FRigVMMemoryContainer");
static_assert(offsetof(FRigVMMemoryContainer, bUseNameMap) == 0x000000, "Member 'FRigVMMemoryContainer::bUseNameMap' has a wrong offset!");
static_assert(offsetof(FRigVMMemoryContainer, MemoryType) == 0x000001, "Member 'FRigVMMemoryContainer::MemoryType' has a wrong offset!");
static_assert(offsetof(FRigVMMemoryContainer, Registers) == 0x000008, "Member 'FRigVMMemoryContainer::Registers' has a wrong offset!");
static_assert(offsetof(FRigVMMemoryContainer, RegisterOffsets) == 0x000018, "Member 'FRigVMMemoryContainer::RegisterOffsets' has a wrong offset!");
static_assert(offsetof(FRigVMMemoryContainer, Data) == 0x000028, "Member 'FRigVMMemoryContainer::Data' has a wrong offset!");
static_assert(offsetof(FRigVMMemoryContainer, ScriptStructs) == 0x000038, "Member 'FRigVMMemoryContainer::ScriptStructs' has a wrong offset!");
static_assert(offsetof(FRigVMMemoryContainer, NameMap) == 0x000048, "Member 'FRigVMMemoryContainer::NameMap' has a wrong offset!");
static_assert(offsetof(FRigVMMemoryContainer, bEncounteredErrorDuringLoad) == 0x000098, "Member 'FRigVMMemoryContainer::bEncounteredErrorDuringLoad' has a wrong offset!");

// ScriptStruct RigVM.RigVMInstructionVisitInfo
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FRigVMInstructionVisitInfo final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMInstructionVisitInfo) == 0x000008, "Wrong alignment on FRigVMInstructionVisitInfo");
static_assert(sizeof(FRigVMInstructionVisitInfo) == 0x000028, "Wrong size on FRigVMInstructionVisitInfo");

// ScriptStruct RigVM.RigVMFunction_StringContains
// 0x0028 (0x0030 - 0x0008)
struct FRigVMFunction_StringContains final : public FRigVMFunction_StringBase
{
public:
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Search;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_StringContains) == 0x000008, "Wrong alignment on FRigVMFunction_StringContains");
static_assert(sizeof(FRigVMFunction_StringContains) == 0x000030, "Wrong size on FRigVMFunction_StringContains");
static_assert(offsetof(FRigVMFunction_StringContains, Name) == 0x000008, "Member 'FRigVMFunction_StringContains::Name' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_StringContains, Search) == 0x000018, "Member 'FRigVMFunction_StringContains::Search' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_StringContains, Result) == 0x000028, "Member 'FRigVMFunction_StringContains::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMProfilingInfo
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FRigVMProfilingInfo final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMProfilingInfo) == 0x000008, "Wrong alignment on FRigVMProfilingInfo");
static_assert(sizeof(FRigVMProfilingInfo) == 0x000028, "Wrong size on FRigVMProfilingInfo");

// ScriptStruct RigVM.RigVMTemplateArgumentType
// 0x0010 (0x0010 - 0x0000)
struct FRigVMTemplateArgumentType final
{
public:
	class FName                                   CPPType;                                           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                CPPTypeObject;                                     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMTemplateArgumentType) == 0x000008, "Wrong alignment on FRigVMTemplateArgumentType");
static_assert(sizeof(FRigVMTemplateArgumentType) == 0x000010, "Wrong size on FRigVMTemplateArgumentType");
static_assert(offsetof(FRigVMTemplateArgumentType, CPPType) == 0x000000, "Member 'FRigVMTemplateArgumentType::CPPType' has a wrong offset!");
static_assert(offsetof(FRigVMTemplateArgumentType, CPPTypeObject) == 0x000008, "Member 'FRigVMTemplateArgumentType::CPPTypeObject' has a wrong offset!");

// ScriptStruct RigVM.RigVMUserWorkflow
// 0x0058 (0x0058 - 0x0000)
struct FRigVMUserWorkflow final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Title;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 ToolTip;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ERigVMUserWorkflowType                        Type;                                              // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_29[0x17];                                      // 0x0029(0x0017)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class URigVMUserWorkflowOptions* InOptions, class UObject* InController)> PerformDynamicDelegate;                            // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UObject>                    OptionsClass;                                      // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FRigVMUserWorkflow) == 0x000008, "Wrong alignment on FRigVMUserWorkflow");
static_assert(sizeof(FRigVMUserWorkflow) == 0x000058, "Wrong size on FRigVMUserWorkflow");
static_assert(offsetof(FRigVMUserWorkflow, Title) == 0x000008, "Member 'FRigVMUserWorkflow::Title' has a wrong offset!");
static_assert(offsetof(FRigVMUserWorkflow, ToolTip) == 0x000018, "Member 'FRigVMUserWorkflow::ToolTip' has a wrong offset!");
static_assert(offsetof(FRigVMUserWorkflow, Type) == 0x000028, "Member 'FRigVMUserWorkflow::Type' has a wrong offset!");
static_assert(offsetof(FRigVMUserWorkflow, PerformDynamicDelegate) == 0x000040, "Member 'FRigVMUserWorkflow::PerformDynamicDelegate' has a wrong offset!");
static_assert(offsetof(FRigVMUserWorkflow, OptionsClass) == 0x000050, "Member 'FRigVMUserWorkflow::OptionsClass' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_AnimEasingType
// 0x0008 (0x0010 - 0x0008)
struct FRigVMFunction_AnimEasingType final : public FRigVMFunction_AnimBase
{
public:
	ERigVMAnimEasingType                          Type;                                              // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_AnimEasingType) == 0x000008, "Wrong alignment on FRigVMFunction_AnimEasingType");
static_assert(sizeof(FRigVMFunction_AnimEasingType) == 0x000010, "Wrong size on FRigVMFunction_AnimEasingType");
static_assert(offsetof(FRigVMFunction_AnimEasingType, Type) == 0x000008, "Member 'FRigVMFunction_AnimEasingType::Type' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_StringToLowercase
// 0x0020 (0x0028 - 0x0008)
struct FRigVMFunction_StringToLowercase final : public FRigVMFunction_StringBase
{
public:
	class FString                                 Value;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Result;                                            // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_StringToLowercase) == 0x000008, "Wrong alignment on FRigVMFunction_StringToLowercase");
static_assert(sizeof(FRigVMFunction_StringToLowercase) == 0x000028, "Wrong size on FRigVMFunction_StringToLowercase");
static_assert(offsetof(FRigVMFunction_StringToLowercase, Value) == 0x000008, "Member 'FRigVMFunction_StringToLowercase::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_StringToLowercase, Result) == 0x000018, "Member 'FRigVMFunction_StringToLowercase::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_AnimEasing
// 0x0020 (0x0028 - 0x0008)
struct FRigVMFunction_AnimEasing final : public FRigVMFunction_AnimBase
{
public:
	float                                         Value;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigVMAnimEasingType                          Type;                                              // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SourceMinimum;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SourceMaximum;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetMinimum;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetMaximum;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Result;                                            // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_AnimEasing) == 0x000008, "Wrong alignment on FRigVMFunction_AnimEasing");
static_assert(sizeof(FRigVMFunction_AnimEasing) == 0x000028, "Wrong size on FRigVMFunction_AnimEasing");
static_assert(offsetof(FRigVMFunction_AnimEasing, Value) == 0x000008, "Member 'FRigVMFunction_AnimEasing::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AnimEasing, Type) == 0x00000C, "Member 'FRigVMFunction_AnimEasing::Type' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AnimEasing, SourceMinimum) == 0x000010, "Member 'FRigVMFunction_AnimEasing::SourceMinimum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AnimEasing, SourceMaximum) == 0x000014, "Member 'FRigVMFunction_AnimEasing::SourceMaximum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AnimEasing, TargetMinimum) == 0x000018, "Member 'FRigVMFunction_AnimEasing::TargetMinimum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AnimEasing, TargetMaximum) == 0x00001C, "Member 'FRigVMFunction_AnimEasing::TargetMaximum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AnimEasing, Result) == 0x000020, "Member 'FRigVMFunction_AnimEasing::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_AnimEvalRichCurve
// 0x00A8 (0x00B0 - 0x0008)
struct FRigVMFunction_AnimEvalRichCurve final : public FRigVMFunction_AnimBase
{
public:
	float                                         Value;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     Curve;                                             // 0x0010(0x0088)(Edit, BlueprintVisible, EditConst, NativeAccessSpecifierPublic)
	float                                         SourceMinimum;                                     // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SourceMaximum;                                     // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetMinimum;                                     // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetMaximum;                                     // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Result;                                            // 0x00A8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_AnimEvalRichCurve) == 0x000008, "Wrong alignment on FRigVMFunction_AnimEvalRichCurve");
static_assert(sizeof(FRigVMFunction_AnimEvalRichCurve) == 0x0000B0, "Wrong size on FRigVMFunction_AnimEvalRichCurve");
static_assert(offsetof(FRigVMFunction_AnimEvalRichCurve, Value) == 0x000008, "Member 'FRigVMFunction_AnimEvalRichCurve::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AnimEvalRichCurve, Curve) == 0x000010, "Member 'FRigVMFunction_AnimEvalRichCurve::Curve' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AnimEvalRichCurve, SourceMinimum) == 0x000098, "Member 'FRigVMFunction_AnimEvalRichCurve::SourceMinimum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AnimEvalRichCurve, SourceMaximum) == 0x00009C, "Member 'FRigVMFunction_AnimEvalRichCurve::SourceMaximum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AnimEvalRichCurve, TargetMinimum) == 0x0000A0, "Member 'FRigVMFunction_AnimEvalRichCurve::TargetMinimum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AnimEvalRichCurve, TargetMaximum) == 0x0000A4, "Member 'FRigVMFunction_AnimEvalRichCurve::TargetMaximum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AnimEvalRichCurve, Result) == 0x0000A8, "Member 'FRigVMFunction_AnimEvalRichCurve::Result' has a wrong offset!");

// ScriptStruct RigVM.RigDispatch_FromString
// 0x0000 (0x0070 - 0x0070)
struct FRigDispatch_FromString final : public FRigVMDispatchFactory
{
};
static_assert(alignof(FRigDispatch_FromString) == 0x000008, "Wrong alignment on FRigDispatch_FromString");
static_assert(sizeof(FRigDispatch_FromString) == 0x000070, "Wrong size on FRigDispatch_FromString");

// ScriptStruct RigVM.RigVMFunction_AnimRichCurve
// 0x0088 (0x0090 - 0x0008)
struct FRigVMFunction_AnimRichCurve final : public FRigVMFunction_AnimBase
{
public:
	struct FRuntimeFloatCurve                     Curve;                                             // 0x0008(0x0088)(Edit, BlueprintVisible, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_AnimRichCurve) == 0x000008, "Wrong alignment on FRigVMFunction_AnimRichCurve");
static_assert(sizeof(FRigVMFunction_AnimRichCurve) == 0x000090, "Wrong size on FRigVMFunction_AnimRichCurve");
static_assert(offsetof(FRigVMFunction_AnimRichCurve, Curve) == 0x000008, "Member 'FRigVMFunction_AnimRichCurve::Curve' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_GetDeltaTime
// 0x0008 (0x0010 - 0x0008)
struct FRigVMFunction_GetDeltaTime final : public FRigVMFunction_AnimBase
{
public:
	float                                         Result;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_GetDeltaTime) == 0x000008, "Wrong alignment on FRigVMFunction_GetDeltaTime");
static_assert(sizeof(FRigVMFunction_GetDeltaTime) == 0x000010, "Wrong size on FRigVMFunction_GetDeltaTime");
static_assert(offsetof(FRigVMFunction_GetDeltaTime, Result) == 0x000008, "Member 'FRigVMFunction_GetDeltaTime::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_StringMiddle
// 0x0028 (0x0030 - 0x0008)
struct FRigVMFunction_StringMiddle final : public FRigVMFunction_StringBase
{
public:
	class FString                                 Value;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Start;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Result;                                            // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_StringMiddle) == 0x000008, "Wrong alignment on FRigVMFunction_StringMiddle");
static_assert(sizeof(FRigVMFunction_StringMiddle) == 0x000030, "Wrong size on FRigVMFunction_StringMiddle");
static_assert(offsetof(FRigVMFunction_StringMiddle, Value) == 0x000008, "Member 'FRigVMFunction_StringMiddle::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_StringMiddle, Start) == 0x000018, "Member 'FRigVMFunction_StringMiddle::Start' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_StringMiddle, Count) == 0x00001C, "Member 'FRigVMFunction_StringMiddle::Count' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_StringMiddle, Result) == 0x000020, "Member 'FRigVMFunction_StringMiddle::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_GetWorldTime
// 0x0020 (0x0028 - 0x0008)
struct FRigVMFunction_GetWorldTime final : public FRigVMFunction_AnimBase
{
public:
	float                                         Year;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Month;                                             // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Day;                                               // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeekDay;                                           // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Hours;                                             // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Minutes;                                           // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Seconds;                                           // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverallSeconds;                                    // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_GetWorldTime) == 0x000008, "Wrong alignment on FRigVMFunction_GetWorldTime");
static_assert(sizeof(FRigVMFunction_GetWorldTime) == 0x000028, "Wrong size on FRigVMFunction_GetWorldTime");
static_assert(offsetof(FRigVMFunction_GetWorldTime, Year) == 0x000008, "Member 'FRigVMFunction_GetWorldTime::Year' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_GetWorldTime, Month) == 0x00000C, "Member 'FRigVMFunction_GetWorldTime::Month' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_GetWorldTime, Day) == 0x000010, "Member 'FRigVMFunction_GetWorldTime::Day' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_GetWorldTime, WeekDay) == 0x000014, "Member 'FRigVMFunction_GetWorldTime::WeekDay' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_GetWorldTime, Hours) == 0x000018, "Member 'FRigVMFunction_GetWorldTime::Hours' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_GetWorldTime, Minutes) == 0x00001C, "Member 'FRigVMFunction_GetWorldTime::Minutes' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_GetWorldTime, Seconds) == 0x000020, "Member 'FRigVMFunction_GetWorldTime::Seconds' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_GetWorldTime, OverallSeconds) == 0x000024, "Member 'FRigVMFunction_GetWorldTime::OverallSeconds' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_FramesToSeconds
// 0x0008 (0x0010 - 0x0008)
struct FRigVMFunction_FramesToSeconds final : public FRigVMFunction_AnimBase
{
public:
	float                                         Frames;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Seconds;                                           // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_FramesToSeconds) == 0x000008, "Wrong alignment on FRigVMFunction_FramesToSeconds");
static_assert(sizeof(FRigVMFunction_FramesToSeconds) == 0x000010, "Wrong size on FRigVMFunction_FramesToSeconds");
static_assert(offsetof(FRigVMFunction_FramesToSeconds, Frames) == 0x000008, "Member 'FRigVMFunction_FramesToSeconds::Frames' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_FramesToSeconds, Seconds) == 0x00000C, "Member 'FRigVMFunction_FramesToSeconds::Seconds' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_StringTrimWhitespace
// 0x0020 (0x0028 - 0x0008)
struct FRigVMFunction_StringTrimWhitespace final : public FRigVMFunction_StringBase
{
public:
	class FString                                 Value;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Result;                                            // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_StringTrimWhitespace) == 0x000008, "Wrong alignment on FRigVMFunction_StringTrimWhitespace");
static_assert(sizeof(FRigVMFunction_StringTrimWhitespace) == 0x000028, "Wrong size on FRigVMFunction_StringTrimWhitespace");
static_assert(offsetof(FRigVMFunction_StringTrimWhitespace, Value) == 0x000008, "Member 'FRigVMFunction_StringTrimWhitespace::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_StringTrimWhitespace, Result) == 0x000018, "Member 'FRigVMFunction_StringTrimWhitespace::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_SecondsToFrames
// 0x0008 (0x0010 - 0x0008)
struct FRigVMFunction_SecondsToFrames final : public FRigVMFunction_AnimBase
{
public:
	float                                         Seconds;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Frames;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_SecondsToFrames) == 0x000008, "Wrong alignment on FRigVMFunction_SecondsToFrames");
static_assert(sizeof(FRigVMFunction_SecondsToFrames) == 0x000010, "Wrong size on FRigVMFunction_SecondsToFrames");
static_assert(offsetof(FRigVMFunction_SecondsToFrames, Seconds) == 0x000008, "Member 'FRigVMFunction_SecondsToFrames::Seconds' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_SecondsToFrames, Frames) == 0x00000C, "Member 'FRigVMFunction_SecondsToFrames::Frames' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_DebugLineNoSpace
// 0x00C0 (0x01C0 - 0x0100)
struct FRigVMFunction_DebugLineNoSpace final : public FRigVMFunction_DebugBaseMutable
{
public:
	struct FVector                                A;                                                 // 0x0100(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                B;                                                 // 0x0118(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0130(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_144[0xC];                                      // 0x0144(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             WorldOffset;                                       // 0x0150(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x01B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B1[0xF];                                      // 0x01B1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_DebugLineNoSpace) == 0x000010, "Wrong alignment on FRigVMFunction_DebugLineNoSpace");
static_assert(sizeof(FRigVMFunction_DebugLineNoSpace) == 0x0001C0, "Wrong size on FRigVMFunction_DebugLineNoSpace");
static_assert(offsetof(FRigVMFunction_DebugLineNoSpace, A) == 0x000100, "Member 'FRigVMFunction_DebugLineNoSpace::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugLineNoSpace, B) == 0x000118, "Member 'FRigVMFunction_DebugLineNoSpace::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugLineNoSpace, Color) == 0x000130, "Member 'FRigVMFunction_DebugLineNoSpace::Color' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugLineNoSpace, Thickness) == 0x000140, "Member 'FRigVMFunction_DebugLineNoSpace::Thickness' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugLineNoSpace, WorldOffset) == 0x000150, "Member 'FRigVMFunction_DebugLineNoSpace::WorldOffset' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugLineNoSpace, bEnabled) == 0x0001B0, "Member 'FRigVMFunction_DebugLineNoSpace::bEnabled' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_StringPadInteger
// 0x0018 (0x0020 - 0x0008)
struct FRigVMFunction_StringPadInteger final : public FRigVMFunction_StringBase
{
public:
	int32                                         Value;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Digits;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Result;                                            // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_StringPadInteger) == 0x000008, "Wrong alignment on FRigVMFunction_StringPadInteger");
static_assert(sizeof(FRigVMFunction_StringPadInteger) == 0x000020, "Wrong size on FRigVMFunction_StringPadInteger");
static_assert(offsetof(FRigVMFunction_StringPadInteger, Value) == 0x000008, "Member 'FRigVMFunction_StringPadInteger::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_StringPadInteger, Digits) == 0x00000C, "Member 'FRigVMFunction_StringPadInteger::Digits' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_StringPadInteger, Result) == 0x000010, "Member 'FRigVMFunction_StringPadInteger::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_DebugLineStripNoSpace
// 0x00A0 (0x01A0 - 0x0100)
struct FRigVMFunction_DebugLineStripNoSpace final : public FRigVMFunction_DebugBaseMutable
{
public:
	TArray<struct FVector>                        Points;                                            // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_124[0xC];                                      // 0x0124(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             WorldOffset;                                       // 0x0130(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0190(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_191[0xF];                                      // 0x0191(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_DebugLineStripNoSpace) == 0x000010, "Wrong alignment on FRigVMFunction_DebugLineStripNoSpace");
static_assert(sizeof(FRigVMFunction_DebugLineStripNoSpace) == 0x0001A0, "Wrong size on FRigVMFunction_DebugLineStripNoSpace");
static_assert(offsetof(FRigVMFunction_DebugLineStripNoSpace, Points) == 0x000100, "Member 'FRigVMFunction_DebugLineStripNoSpace::Points' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugLineStripNoSpace, Color) == 0x000110, "Member 'FRigVMFunction_DebugLineStripNoSpace::Color' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugLineStripNoSpace, Thickness) == 0x000120, "Member 'FRigVMFunction_DebugLineStripNoSpace::Thickness' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugLineStripNoSpace, WorldOffset) == 0x000130, "Member 'FRigVMFunction_DebugLineStripNoSpace::WorldOffset' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugLineStripNoSpace, bEnabled) == 0x000190, "Member 'FRigVMFunction_DebugLineStripNoSpace::bEnabled' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_DebugPoint
// 0x00B8 (0x00C0 - 0x0008)
struct FRigVMFunction_DebugPoint final : public FRigVMFunction_DebugBase
{
public:
	struct FVector                                Vector;                                            // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigUnitDebugPointMode                        Mode;                                              // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x0024(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Space;                                             // 0x003C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0xC];                                       // 0x0044(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             WorldOffset;                                       // 0x0050(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x00B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0xF];                                       // 0x00B1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_DebugPoint) == 0x000010, "Wrong alignment on FRigVMFunction_DebugPoint");
static_assert(sizeof(FRigVMFunction_DebugPoint) == 0x0000C0, "Wrong size on FRigVMFunction_DebugPoint");
static_assert(offsetof(FRigVMFunction_DebugPoint, Vector) == 0x000008, "Member 'FRigVMFunction_DebugPoint::Vector' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugPoint, Mode) == 0x000020, "Member 'FRigVMFunction_DebugPoint::Mode' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugPoint, Color) == 0x000024, "Member 'FRigVMFunction_DebugPoint::Color' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugPoint, Scale) == 0x000034, "Member 'FRigVMFunction_DebugPoint::Scale' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugPoint, Thickness) == 0x000038, "Member 'FRigVMFunction_DebugPoint::Thickness' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugPoint, Space) == 0x00003C, "Member 'FRigVMFunction_DebugPoint::Space' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugPoint, WorldOffset) == 0x000050, "Member 'FRigVMFunction_DebugPoint::WorldOffset' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugPoint, bEnabled) == 0x0000B0, "Member 'FRigVMFunction_DebugPoint::bEnabled' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_DebugPointMutable
// 0x00B0 (0x01B0 - 0x0100)
struct FRigVMFunction_DebugPointMutable final : public FRigVMFunction_DebugBaseMutable
{
public:
	struct FVector                                Vector;                                            // 0x0100(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigUnitDebugPointMode                        Mode;                                              // 0x0118(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119[0x3];                                      // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x011C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Space;                                             // 0x0134(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             WorldOffset;                                       // 0x0140(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x01A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A1[0xF];                                      // 0x01A1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_DebugPointMutable) == 0x000010, "Wrong alignment on FRigVMFunction_DebugPointMutable");
static_assert(sizeof(FRigVMFunction_DebugPointMutable) == 0x0001B0, "Wrong size on FRigVMFunction_DebugPointMutable");
static_assert(offsetof(FRigVMFunction_DebugPointMutable, Vector) == 0x000100, "Member 'FRigVMFunction_DebugPointMutable::Vector' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugPointMutable, Mode) == 0x000118, "Member 'FRigVMFunction_DebugPointMutable::Mode' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugPointMutable, Color) == 0x00011C, "Member 'FRigVMFunction_DebugPointMutable::Color' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugPointMutable, Scale) == 0x00012C, "Member 'FRigVMFunction_DebugPointMutable::Scale' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugPointMutable, Thickness) == 0x000130, "Member 'FRigVMFunction_DebugPointMutable::Thickness' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugPointMutable, Space) == 0x000134, "Member 'FRigVMFunction_DebugPointMutable::Space' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugPointMutable, WorldOffset) == 0x000140, "Member 'FRigVMFunction_DebugPointMutable::WorldOffset' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugPointMutable, bEnabled) == 0x0001A0, "Member 'FRigVMFunction_DebugPointMutable::bEnabled' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_DebugRectangle
// 0x00F0 (0x01F0 - 0x0100)
struct FRigVMFunction_DebugRectangle final : public FRigVMFunction_DebugBaseMutable
{
public:
	struct FTransform                             Transform;                                         // 0x0100(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Space;                                             // 0x0178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             WorldOffset;                                       // 0x0180(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x01E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E1[0xF];                                      // 0x01E1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_DebugRectangle) == 0x000010, "Wrong alignment on FRigVMFunction_DebugRectangle");
static_assert(sizeof(FRigVMFunction_DebugRectangle) == 0x0001F0, "Wrong size on FRigVMFunction_DebugRectangle");
static_assert(offsetof(FRigVMFunction_DebugRectangle, Transform) == 0x000100, "Member 'FRigVMFunction_DebugRectangle::Transform' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugRectangle, Color) == 0x000160, "Member 'FRigVMFunction_DebugRectangle::Color' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugRectangle, Scale) == 0x000170, "Member 'FRigVMFunction_DebugRectangle::Scale' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugRectangle, Thickness) == 0x000174, "Member 'FRigVMFunction_DebugRectangle::Thickness' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugRectangle, Space) == 0x000178, "Member 'FRigVMFunction_DebugRectangle::Space' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugRectangle, WorldOffset) == 0x000180, "Member 'FRigVMFunction_DebugRectangle::WorldOffset' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugRectangle, bEnabled) == 0x0001E0, "Member 'FRigVMFunction_DebugRectangle::bEnabled' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_DebugRectangleNoSpace
// 0x00F0 (0x01F0 - 0x0100)
struct FRigVMFunction_DebugRectangleNoSpace final : public FRigVMFunction_DebugBaseMutable
{
public:
	struct FTransform                             Transform;                                         // 0x0100(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_178[0x8];                                      // 0x0178(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             WorldOffset;                                       // 0x0180(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x01E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E1[0xF];                                      // 0x01E1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_DebugRectangleNoSpace) == 0x000010, "Wrong alignment on FRigVMFunction_DebugRectangleNoSpace");
static_assert(sizeof(FRigVMFunction_DebugRectangleNoSpace) == 0x0001F0, "Wrong size on FRigVMFunction_DebugRectangleNoSpace");
static_assert(offsetof(FRigVMFunction_DebugRectangleNoSpace, Transform) == 0x000100, "Member 'FRigVMFunction_DebugRectangleNoSpace::Transform' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugRectangleNoSpace, Color) == 0x000160, "Member 'FRigVMFunction_DebugRectangleNoSpace::Color' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugRectangleNoSpace, Scale) == 0x000170, "Member 'FRigVMFunction_DebugRectangleNoSpace::Scale' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugRectangleNoSpace, Thickness) == 0x000174, "Member 'FRigVMFunction_DebugRectangleNoSpace::Thickness' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugRectangleNoSpace, WorldOffset) == 0x000180, "Member 'FRigVMFunction_DebugRectangleNoSpace::WorldOffset' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugRectangleNoSpace, bEnabled) == 0x0001E0, "Member 'FRigVMFunction_DebugRectangleNoSpace::bEnabled' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_DebugArc
// 0x0100 (0x0200 - 0x0100)
struct FRigVMFunction_DebugArc final : public FRigVMFunction_DebugBaseMutable
{
public:
	struct FTransform                             Transform;                                         // 0x0100(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumDegrees;                                    // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaximumDegrees;                                    // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x017C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Detail;                                            // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Space;                                             // 0x0184(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18C[0x4];                                      // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             WorldOffset;                                       // 0x0190(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x01F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F1[0xF];                                      // 0x01F1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_DebugArc) == 0x000010, "Wrong alignment on FRigVMFunction_DebugArc");
static_assert(sizeof(FRigVMFunction_DebugArc) == 0x000200, "Wrong size on FRigVMFunction_DebugArc");
static_assert(offsetof(FRigVMFunction_DebugArc, Transform) == 0x000100, "Member 'FRigVMFunction_DebugArc::Transform' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugArc, Color) == 0x000160, "Member 'FRigVMFunction_DebugArc::Color' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugArc, Radius) == 0x000170, "Member 'FRigVMFunction_DebugArc::Radius' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugArc, MinimumDegrees) == 0x000174, "Member 'FRigVMFunction_DebugArc::MinimumDegrees' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugArc, MaximumDegrees) == 0x000178, "Member 'FRigVMFunction_DebugArc::MaximumDegrees' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugArc, Thickness) == 0x00017C, "Member 'FRigVMFunction_DebugArc::Thickness' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugArc, Detail) == 0x000180, "Member 'FRigVMFunction_DebugArc::Detail' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugArc, Space) == 0x000184, "Member 'FRigVMFunction_DebugArc::Space' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugArc, WorldOffset) == 0x000190, "Member 'FRigVMFunction_DebugArc::WorldOffset' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugArc, bEnabled) == 0x0001F0, "Member 'FRigVMFunction_DebugArc::bEnabled' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_StringSplit
// 0x0030 (0x0038 - 0x0008)
struct FRigVMFunction_StringSplit final : public FRigVMFunction_StringBase
{
public:
	class FString                                 Value;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Separator;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Result;                                            // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_StringSplit) == 0x000008, "Wrong alignment on FRigVMFunction_StringSplit");
static_assert(sizeof(FRigVMFunction_StringSplit) == 0x000038, "Wrong size on FRigVMFunction_StringSplit");
static_assert(offsetof(FRigVMFunction_StringSplit, Value) == 0x000008, "Member 'FRigVMFunction_StringSplit::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_StringSplit, Separator) == 0x000018, "Member 'FRigVMFunction_StringSplit::Separator' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_StringSplit, Result) == 0x000028, "Member 'FRigVMFunction_StringSplit::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_DebugArcNoSpace
// 0x0100 (0x0200 - 0x0100)
struct FRigVMFunction_DebugArcNoSpace final : public FRigVMFunction_DebugBaseMutable
{
public:
	struct FTransform                             Transform;                                         // 0x0100(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumDegrees;                                    // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaximumDegrees;                                    // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x017C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Detail;                                            // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_184[0xC];                                      // 0x0184(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             WorldOffset;                                       // 0x0190(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x01F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F1[0xF];                                      // 0x01F1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_DebugArcNoSpace) == 0x000010, "Wrong alignment on FRigVMFunction_DebugArcNoSpace");
static_assert(sizeof(FRigVMFunction_DebugArcNoSpace) == 0x000200, "Wrong size on FRigVMFunction_DebugArcNoSpace");
static_assert(offsetof(FRigVMFunction_DebugArcNoSpace, Transform) == 0x000100, "Member 'FRigVMFunction_DebugArcNoSpace::Transform' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugArcNoSpace, Color) == 0x000160, "Member 'FRigVMFunction_DebugArcNoSpace::Color' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugArcNoSpace, Radius) == 0x000170, "Member 'FRigVMFunction_DebugArcNoSpace::Radius' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugArcNoSpace, MinimumDegrees) == 0x000174, "Member 'FRigVMFunction_DebugArcNoSpace::MinimumDegrees' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugArcNoSpace, MaximumDegrees) == 0x000178, "Member 'FRigVMFunction_DebugArcNoSpace::MaximumDegrees' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugArcNoSpace, Thickness) == 0x00017C, "Member 'FRigVMFunction_DebugArcNoSpace::Thickness' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugArcNoSpace, Detail) == 0x000180, "Member 'FRigVMFunction_DebugArcNoSpace::Detail' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugArcNoSpace, WorldOffset) == 0x000190, "Member 'FRigVMFunction_DebugArcNoSpace::WorldOffset' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugArcNoSpace, bEnabled) == 0x0001F0, "Member 'FRigVMFunction_DebugArcNoSpace::bEnabled' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_DebugTransformMutableNoSpace
// 0x00F0 (0x01F0 - 0x0100)
struct FRigVMFunction_DebugTransformMutableNoSpace final : public FRigVMFunction_DebugBaseMutable
{
public:
	struct FTransform                             Transform;                                         // 0x0100(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigUnitDebugTransformMode                    Mode;                                              // 0x0160(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_161[0x3];                                      // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x0164(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17C[0x4];                                      // 0x017C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             WorldOffset;                                       // 0x0180(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x01E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E1[0xF];                                      // 0x01E1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_DebugTransformMutableNoSpace) == 0x000010, "Wrong alignment on FRigVMFunction_DebugTransformMutableNoSpace");
static_assert(sizeof(FRigVMFunction_DebugTransformMutableNoSpace) == 0x0001F0, "Wrong size on FRigVMFunction_DebugTransformMutableNoSpace");
static_assert(offsetof(FRigVMFunction_DebugTransformMutableNoSpace, Transform) == 0x000100, "Member 'FRigVMFunction_DebugTransformMutableNoSpace::Transform' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugTransformMutableNoSpace, Mode) == 0x000160, "Member 'FRigVMFunction_DebugTransformMutableNoSpace::Mode' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugTransformMutableNoSpace, Color) == 0x000164, "Member 'FRigVMFunction_DebugTransformMutableNoSpace::Color' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugTransformMutableNoSpace, Thickness) == 0x000174, "Member 'FRigVMFunction_DebugTransformMutableNoSpace::Thickness' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugTransformMutableNoSpace, Scale) == 0x000178, "Member 'FRigVMFunction_DebugTransformMutableNoSpace::Scale' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugTransformMutableNoSpace, WorldOffset) == 0x000180, "Member 'FRigVMFunction_DebugTransformMutableNoSpace::WorldOffset' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugTransformMutableNoSpace, bEnabled) == 0x0001E0, "Member 'FRigVMFunction_DebugTransformMutableNoSpace::bEnabled' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_DebugTransformArrayMutable_WorkData
// 0x0010 (0x0010 - 0x0000)
struct FRigVMFunction_DebugTransformArrayMutable_WorkData final
{
public:
	TArray<struct FTransform>                     DrawTransforms;                                    // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_DebugTransformArrayMutable_WorkData) == 0x000008, "Wrong alignment on FRigVMFunction_DebugTransformArrayMutable_WorkData");
static_assert(sizeof(FRigVMFunction_DebugTransformArrayMutable_WorkData) == 0x000010, "Wrong size on FRigVMFunction_DebugTransformArrayMutable_WorkData");
static_assert(offsetof(FRigVMFunction_DebugTransformArrayMutable_WorkData, DrawTransforms) == 0x000000, "Member 'FRigVMFunction_DebugTransformArrayMutable_WorkData::DrawTransforms' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_DebugTransformArrayMutableNoSpace
// 0x00B0 (0x01B0 - 0x0100)
struct FRigVMFunction_DebugTransformArrayMutableNoSpace final : public FRigVMFunction_DebugBaseMutable
{
public:
	TArray<struct FTransform>                     Transforms;                                        // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ParentIndices;                                     // 0x0110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	ERigUnitDebugTransformMode                    Mode;                                              // 0x0120(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121[0x3];                                      // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x0124(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             WorldOffset;                                       // 0x0140(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x01A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A1[0xF];                                      // 0x01A1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_DebugTransformArrayMutableNoSpace) == 0x000010, "Wrong alignment on FRigVMFunction_DebugTransformArrayMutableNoSpace");
static_assert(sizeof(FRigVMFunction_DebugTransformArrayMutableNoSpace) == 0x0001B0, "Wrong size on FRigVMFunction_DebugTransformArrayMutableNoSpace");
static_assert(offsetof(FRigVMFunction_DebugTransformArrayMutableNoSpace, Transforms) == 0x000100, "Member 'FRigVMFunction_DebugTransformArrayMutableNoSpace::Transforms' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugTransformArrayMutableNoSpace, ParentIndices) == 0x000110, "Member 'FRigVMFunction_DebugTransformArrayMutableNoSpace::ParentIndices' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugTransformArrayMutableNoSpace, Mode) == 0x000120, "Member 'FRigVMFunction_DebugTransformArrayMutableNoSpace::Mode' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugTransformArrayMutableNoSpace, Color) == 0x000124, "Member 'FRigVMFunction_DebugTransformArrayMutableNoSpace::Color' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugTransformArrayMutableNoSpace, Thickness) == 0x000134, "Member 'FRigVMFunction_DebugTransformArrayMutableNoSpace::Thickness' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugTransformArrayMutableNoSpace, Scale) == 0x000138, "Member 'FRigVMFunction_DebugTransformArrayMutableNoSpace::Scale' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugTransformArrayMutableNoSpace, WorldOffset) == 0x000140, "Member 'FRigVMFunction_DebugTransformArrayMutableNoSpace::WorldOffset' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DebugTransformArrayMutableNoSpace, bEnabled) == 0x0001A0, "Member 'FRigVMFunction_DebugTransformArrayMutableNoSpace::bEnabled' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_AlphaInterpQuat
// 0x00B8 (0x00C0 - 0x0008)
struct FRigVMFunction_AlphaInterpQuat final : public FRigVMFunction_SimBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Value;                                             // 0x0010(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Bias;                                              // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMapRange;                                         // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInputRange                            InRange;                                           // 0x003C(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FInputRange                            OutRange;                                          // 0x0044(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bClampResult;                                      // 0x004C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ClampMin;                                          // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampMax;                                          // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterpResult;                                     // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InterpSpeedIncreasing;                             // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpSpeedDecreasing;                             // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0xC];                                       // 0x0064(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Result;                                            // 0x0070(0x0020)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputScaleBiasClamp                   ScaleBiasClamp;                                    // 0x0090(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_AlphaInterpQuat) == 0x000010, "Wrong alignment on FRigVMFunction_AlphaInterpQuat");
static_assert(sizeof(FRigVMFunction_AlphaInterpQuat) == 0x0000C0, "Wrong size on FRigVMFunction_AlphaInterpQuat");
static_assert(offsetof(FRigVMFunction_AlphaInterpQuat, Value) == 0x000010, "Member 'FRigVMFunction_AlphaInterpQuat::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AlphaInterpQuat, Scale) == 0x000030, "Member 'FRigVMFunction_AlphaInterpQuat::Scale' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AlphaInterpQuat, Bias) == 0x000034, "Member 'FRigVMFunction_AlphaInterpQuat::Bias' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AlphaInterpQuat, bMapRange) == 0x000038, "Member 'FRigVMFunction_AlphaInterpQuat::bMapRange' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AlphaInterpQuat, InRange) == 0x00003C, "Member 'FRigVMFunction_AlphaInterpQuat::InRange' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AlphaInterpQuat, OutRange) == 0x000044, "Member 'FRigVMFunction_AlphaInterpQuat::OutRange' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AlphaInterpQuat, bClampResult) == 0x00004C, "Member 'FRigVMFunction_AlphaInterpQuat::bClampResult' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AlphaInterpQuat, ClampMin) == 0x000050, "Member 'FRigVMFunction_AlphaInterpQuat::ClampMin' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AlphaInterpQuat, ClampMax) == 0x000054, "Member 'FRigVMFunction_AlphaInterpQuat::ClampMax' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AlphaInterpQuat, bInterpResult) == 0x000058, "Member 'FRigVMFunction_AlphaInterpQuat::bInterpResult' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AlphaInterpQuat, InterpSpeedIncreasing) == 0x00005C, "Member 'FRigVMFunction_AlphaInterpQuat::InterpSpeedIncreasing' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AlphaInterpQuat, InterpSpeedDecreasing) == 0x000060, "Member 'FRigVMFunction_AlphaInterpQuat::InterpSpeedDecreasing' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AlphaInterpQuat, Result) == 0x000070, "Member 'FRigVMFunction_AlphaInterpQuat::Result' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AlphaInterpQuat, ScaleBiasClamp) == 0x000090, "Member 'FRigVMFunction_AlphaInterpQuat::ScaleBiasClamp' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_VisualDebugVector
// 0x0040 (0x0048 - 0x0008)
struct FRigVMFunction_VisualDebugVector final : public FRigVMFunction_DebugBase
{
public:
	struct FVector                                Value;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigUnitVisualDebugPointMode                  Mode;                                              // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x0024(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneSpace;                                         // 0x003C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_VisualDebugVector) == 0x000008, "Wrong alignment on FRigVMFunction_VisualDebugVector");
static_assert(sizeof(FRigVMFunction_VisualDebugVector) == 0x000048, "Wrong size on FRigVMFunction_VisualDebugVector");
static_assert(offsetof(FRigVMFunction_VisualDebugVector, Value) == 0x000008, "Member 'FRigVMFunction_VisualDebugVector::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_VisualDebugVector, bEnabled) == 0x000020, "Member 'FRigVMFunction_VisualDebugVector::bEnabled' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_VisualDebugVector, Mode) == 0x000021, "Member 'FRigVMFunction_VisualDebugVector::Mode' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_VisualDebugVector, Color) == 0x000024, "Member 'FRigVMFunction_VisualDebugVector::Color' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_VisualDebugVector, Thickness) == 0x000034, "Member 'FRigVMFunction_VisualDebugVector::Thickness' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_VisualDebugVector, Scale) == 0x000038, "Member 'FRigVMFunction_VisualDebugVector::Scale' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_VisualDebugVector, BoneSpace) == 0x00003C, "Member 'FRigVMFunction_VisualDebugVector::BoneSpace' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_VisualDebugVectorNoSpace
// 0x0038 (0x0040 - 0x0008)
struct FRigVMFunction_VisualDebugVectorNoSpace final : public FRigVMFunction_DebugBase
{
public:
	struct FVector                                Value;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigUnitVisualDebugPointMode                  Mode;                                              // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x0024(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_VisualDebugVectorNoSpace) == 0x000008, "Wrong alignment on FRigVMFunction_VisualDebugVectorNoSpace");
static_assert(sizeof(FRigVMFunction_VisualDebugVectorNoSpace) == 0x000040, "Wrong size on FRigVMFunction_VisualDebugVectorNoSpace");
static_assert(offsetof(FRigVMFunction_VisualDebugVectorNoSpace, Value) == 0x000008, "Member 'FRigVMFunction_VisualDebugVectorNoSpace::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_VisualDebugVectorNoSpace, bEnabled) == 0x000020, "Member 'FRigVMFunction_VisualDebugVectorNoSpace::bEnabled' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_VisualDebugVectorNoSpace, Mode) == 0x000021, "Member 'FRigVMFunction_VisualDebugVectorNoSpace::Mode' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_VisualDebugVectorNoSpace, Color) == 0x000024, "Member 'FRigVMFunction_VisualDebugVectorNoSpace::Color' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_VisualDebugVectorNoSpace, Thickness) == 0x000034, "Member 'FRigVMFunction_VisualDebugVectorNoSpace::Thickness' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_VisualDebugVectorNoSpace, Scale) == 0x000038, "Member 'FRigVMFunction_VisualDebugVectorNoSpace::Scale' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_AccumulateQuatLerp
// 0x00A8 (0x00B0 - 0x0008)
struct FRigVMFunction_AccumulateQuatLerp final : public FRigVMFunction_AccumulateBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  TargetValue;                                       // 0x0010(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  InitialValue;                                      // 0x0030(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Blend;                                             // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIntegrateDeltaTime;                               // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0xB];                                       // 0x0055(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Result;                                            // 0x0060(0x0020)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  AccumulatedValue;                                  // 0x0080(0x0020)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInitialized;                                    // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0xF];                                       // 0x00A1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_AccumulateQuatLerp) == 0x000010, "Wrong alignment on FRigVMFunction_AccumulateQuatLerp");
static_assert(sizeof(FRigVMFunction_AccumulateQuatLerp) == 0x0000B0, "Wrong size on FRigVMFunction_AccumulateQuatLerp");
static_assert(offsetof(FRigVMFunction_AccumulateQuatLerp, TargetValue) == 0x000010, "Member 'FRigVMFunction_AccumulateQuatLerp::TargetValue' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateQuatLerp, InitialValue) == 0x000030, "Member 'FRigVMFunction_AccumulateQuatLerp::InitialValue' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateQuatLerp, Blend) == 0x000050, "Member 'FRigVMFunction_AccumulateQuatLerp::Blend' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateQuatLerp, bIntegrateDeltaTime) == 0x000054, "Member 'FRigVMFunction_AccumulateQuatLerp::bIntegrateDeltaTime' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateQuatLerp, Result) == 0x000060, "Member 'FRigVMFunction_AccumulateQuatLerp::Result' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateQuatLerp, AccumulatedValue) == 0x000080, "Member 'FRigVMFunction_AccumulateQuatLerp::AccumulatedValue' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateQuatLerp, bIsInitialized) == 0x0000A0, "Member 'FRigVMFunction_AccumulateQuatLerp::bIsInitialized' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_VisualDebugQuat
// 0x0048 (0x0050 - 0x0008)
struct FRigVMFunction_VisualDebugQuat final : public FRigVMFunction_DebugBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Value;                                             // 0x0010(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Thickness;                                         // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneSpace;                                         // 0x003C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0xC];                                       // 0x0044(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_VisualDebugQuat) == 0x000010, "Wrong alignment on FRigVMFunction_VisualDebugQuat");
static_assert(sizeof(FRigVMFunction_VisualDebugQuat) == 0x000050, "Wrong size on FRigVMFunction_VisualDebugQuat");
static_assert(offsetof(FRigVMFunction_VisualDebugQuat, Value) == 0x000010, "Member 'FRigVMFunction_VisualDebugQuat::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_VisualDebugQuat, bEnabled) == 0x000030, "Member 'FRigVMFunction_VisualDebugQuat::bEnabled' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_VisualDebugQuat, Thickness) == 0x000034, "Member 'FRigVMFunction_VisualDebugQuat::Thickness' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_VisualDebugQuat, Scale) == 0x000038, "Member 'FRigVMFunction_VisualDebugQuat::Scale' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_VisualDebugQuat, BoneSpace) == 0x00003C, "Member 'FRigVMFunction_VisualDebugQuat::BoneSpace' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_VisualDebugQuatNoSpace
// 0x0038 (0x0040 - 0x0008)
struct FRigVMFunction_VisualDebugQuatNoSpace final : public FRigVMFunction_DebugBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Value;                                             // 0x0010(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Thickness;                                         // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_VisualDebugQuatNoSpace) == 0x000010, "Wrong alignment on FRigVMFunction_VisualDebugQuatNoSpace");
static_assert(sizeof(FRigVMFunction_VisualDebugQuatNoSpace) == 0x000040, "Wrong size on FRigVMFunction_VisualDebugQuatNoSpace");
static_assert(offsetof(FRigVMFunction_VisualDebugQuatNoSpace, Value) == 0x000010, "Member 'FRigVMFunction_VisualDebugQuatNoSpace::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_VisualDebugQuatNoSpace, bEnabled) == 0x000030, "Member 'FRigVMFunction_VisualDebugQuatNoSpace::bEnabled' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_VisualDebugQuatNoSpace, Thickness) == 0x000034, "Member 'FRigVMFunction_VisualDebugQuatNoSpace::Thickness' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_VisualDebugQuatNoSpace, Scale) == 0x000038, "Member 'FRigVMFunction_VisualDebugQuatNoSpace::Scale' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_AccumulateFloatMul
// 0x0018 (0x0020 - 0x0008)
struct FRigVMFunction_AccumulateFloatMul final : public FRigVMFunction_AccumulateBase
{
public:
	float                                         Multiplier;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialValue;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIntegrateDeltaTime;                               // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Result;                                            // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccumulatedValue;                                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInitialized;                                    // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_AccumulateFloatMul) == 0x000008, "Wrong alignment on FRigVMFunction_AccumulateFloatMul");
static_assert(sizeof(FRigVMFunction_AccumulateFloatMul) == 0x000020, "Wrong size on FRigVMFunction_AccumulateFloatMul");
static_assert(offsetof(FRigVMFunction_AccumulateFloatMul, Multiplier) == 0x000008, "Member 'FRigVMFunction_AccumulateFloatMul::Multiplier' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateFloatMul, InitialValue) == 0x00000C, "Member 'FRigVMFunction_AccumulateFloatMul::InitialValue' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateFloatMul, bIntegrateDeltaTime) == 0x000010, "Member 'FRigVMFunction_AccumulateFloatMul::bIntegrateDeltaTime' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateFloatMul, Result) == 0x000014, "Member 'FRigVMFunction_AccumulateFloatMul::Result' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateFloatMul, AccumulatedValue) == 0x000018, "Member 'FRigVMFunction_AccumulateFloatMul::AccumulatedValue' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateFloatMul, bIsInitialized) == 0x00001C, "Member 'FRigVMFunction_AccumulateFloatMul::bIsInitialized' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_VisualDebugTransform
// 0x0088 (0x0090 - 0x0008)
struct FRigVMFunction_VisualDebugTransform final : public FRigVMFunction_DebugBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Value;                                             // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Thickness;                                         // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneSpace;                                         // 0x007C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0xC];                                       // 0x0084(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_VisualDebugTransform) == 0x000010, "Wrong alignment on FRigVMFunction_VisualDebugTransform");
static_assert(sizeof(FRigVMFunction_VisualDebugTransform) == 0x000090, "Wrong size on FRigVMFunction_VisualDebugTransform");
static_assert(offsetof(FRigVMFunction_VisualDebugTransform, Value) == 0x000010, "Member 'FRigVMFunction_VisualDebugTransform::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_VisualDebugTransform, bEnabled) == 0x000070, "Member 'FRigVMFunction_VisualDebugTransform::bEnabled' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_VisualDebugTransform, Thickness) == 0x000074, "Member 'FRigVMFunction_VisualDebugTransform::Thickness' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_VisualDebugTransform, Scale) == 0x000078, "Member 'FRigVMFunction_VisualDebugTransform::Scale' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_VisualDebugTransform, BoneSpace) == 0x00007C, "Member 'FRigVMFunction_VisualDebugTransform::BoneSpace' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_VisualDebugTransformNoSpace
// 0x0078 (0x0080 - 0x0008)
struct FRigVMFunction_VisualDebugTransformNoSpace final : public FRigVMFunction_DebugBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Value;                                             // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Thickness;                                         // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_VisualDebugTransformNoSpace) == 0x000010, "Wrong alignment on FRigVMFunction_VisualDebugTransformNoSpace");
static_assert(sizeof(FRigVMFunction_VisualDebugTransformNoSpace) == 0x000080, "Wrong size on FRigVMFunction_VisualDebugTransformNoSpace");
static_assert(offsetof(FRigVMFunction_VisualDebugTransformNoSpace, Value) == 0x000010, "Member 'FRigVMFunction_VisualDebugTransformNoSpace::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_VisualDebugTransformNoSpace, bEnabled) == 0x000070, "Member 'FRigVMFunction_VisualDebugTransformNoSpace::bEnabled' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_VisualDebugTransformNoSpace, Thickness) == 0x000074, "Member 'FRigVMFunction_VisualDebugTransformNoSpace::Thickness' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_VisualDebugTransformNoSpace, Scale) == 0x000078, "Member 'FRigVMFunction_VisualDebugTransformNoSpace::Scale' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_AlphaInterp
// 0x0070 (0x0078 - 0x0008)
struct FRigVMFunction_AlphaInterp final : public FRigVMFunction_SimBase
{
public:
	float                                         Value;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Bias;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMapRange;                                         // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInputRange                            InRange;                                           // 0x0018(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FInputRange                            OutRange;                                          // 0x0020(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bClampResult;                                      // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ClampMin;                                          // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampMax;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterpResult;                                     // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InterpSpeedIncreasing;                             // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpSpeedDecreasing;                             // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Result;                                            // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputScaleBiasClamp                   ScaleBiasClamp;                                    // 0x0044(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_AlphaInterp) == 0x000008, "Wrong alignment on FRigVMFunction_AlphaInterp");
static_assert(sizeof(FRigVMFunction_AlphaInterp) == 0x000078, "Wrong size on FRigVMFunction_AlphaInterp");
static_assert(offsetof(FRigVMFunction_AlphaInterp, Value) == 0x000008, "Member 'FRigVMFunction_AlphaInterp::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AlphaInterp, Scale) == 0x00000C, "Member 'FRigVMFunction_AlphaInterp::Scale' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AlphaInterp, Bias) == 0x000010, "Member 'FRigVMFunction_AlphaInterp::Bias' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AlphaInterp, bMapRange) == 0x000014, "Member 'FRigVMFunction_AlphaInterp::bMapRange' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AlphaInterp, InRange) == 0x000018, "Member 'FRigVMFunction_AlphaInterp::InRange' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AlphaInterp, OutRange) == 0x000020, "Member 'FRigVMFunction_AlphaInterp::OutRange' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AlphaInterp, bClampResult) == 0x000028, "Member 'FRigVMFunction_AlphaInterp::bClampResult' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AlphaInterp, ClampMin) == 0x00002C, "Member 'FRigVMFunction_AlphaInterp::ClampMin' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AlphaInterp, ClampMax) == 0x000030, "Member 'FRigVMFunction_AlphaInterp::ClampMax' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AlphaInterp, bInterpResult) == 0x000034, "Member 'FRigVMFunction_AlphaInterp::bInterpResult' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AlphaInterp, InterpSpeedIncreasing) == 0x000038, "Member 'FRigVMFunction_AlphaInterp::InterpSpeedIncreasing' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AlphaInterp, InterpSpeedDecreasing) == 0x00003C, "Member 'FRigVMFunction_AlphaInterp::InterpSpeedDecreasing' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AlphaInterp, Result) == 0x000040, "Member 'FRigVMFunction_AlphaInterp::Result' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AlphaInterp, ScaleBiasClamp) == 0x000044, "Member 'FRigVMFunction_AlphaInterp::ScaleBiasClamp' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_ForLoopCount
// 0x0110 (0x0210 - 0x0100)
struct FRigVMFunction_ForLoopCount final : public FRigVMStructMutable
{
public:
	class FName                                   BlockToRun;                                        // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index;                                             // 0x010C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ratio;                                             // 0x0110(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114[0xC];                                      // 0x0114(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigVMExecuteContext                   Completed;                                         // 0x0120(0x00F0)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_ForLoopCount) == 0x000010, "Wrong alignment on FRigVMFunction_ForLoopCount");
static_assert(sizeof(FRigVMFunction_ForLoopCount) == 0x000210, "Wrong size on FRigVMFunction_ForLoopCount");
static_assert(offsetof(FRigVMFunction_ForLoopCount, BlockToRun) == 0x000100, "Member 'FRigVMFunction_ForLoopCount::BlockToRun' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_ForLoopCount, Count) == 0x000108, "Member 'FRigVMFunction_ForLoopCount::Count' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_ForLoopCount, Index) == 0x00010C, "Member 'FRigVMFunction_ForLoopCount::Index' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_ForLoopCount, Ratio) == 0x000110, "Member 'FRigVMFunction_ForLoopCount::Ratio' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_ForLoopCount, Completed) == 0x000120, "Member 'FRigVMFunction_ForLoopCount::Completed' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_UserDefinedEvent
// 0x0108 (0x0110 - 0x0008)
struct FRigVMFunction_UserDefinedEvent final : public FRigVMStruct
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigVMExecuteContext                   ExecuteContext;                                    // 0x0010(0x00F0)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	class FName                                   EventName;                                         // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_108[0x8];                                      // 0x0108(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_UserDefinedEvent) == 0x000010, "Wrong alignment on FRigVMFunction_UserDefinedEvent");
static_assert(sizeof(FRigVMFunction_UserDefinedEvent) == 0x000110, "Wrong size on FRigVMFunction_UserDefinedEvent");
static_assert(offsetof(FRigVMFunction_UserDefinedEvent, ExecuteContext) == 0x000010, "Member 'FRigVMFunction_UserDefinedEvent::ExecuteContext' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_UserDefinedEvent, EventName) == 0x000100, "Member 'FRigVMFunction_UserDefinedEvent::EventName' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_Timeline
// 0x0010 (0x0018 - 0x0008)
struct FRigVMFunction_Timeline final : public FRigVMFunction_SimBase
{
public:
	float                                         Speed;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccumulatedValue;                                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInitialized;                                    // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_Timeline) == 0x000008, "Wrong alignment on FRigVMFunction_Timeline");
static_assert(sizeof(FRigVMFunction_Timeline) == 0x000018, "Wrong size on FRigVMFunction_Timeline");
static_assert(offsetof(FRigVMFunction_Timeline, Speed) == 0x000008, "Member 'FRigVMFunction_Timeline::Speed' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_Timeline, Time) == 0x00000C, "Member 'FRigVMFunction_Timeline::Time' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_Timeline, AccumulatedValue) == 0x000010, "Member 'FRigVMFunction_Timeline::AccumulatedValue' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_Timeline, bIsInitialized) == 0x000014, "Member 'FRigVMFunction_Timeline::bIsInitialized' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathBoolBase
// 0x0000 (0x0008 - 0x0008)
struct FRigVMFunction_MathBoolBase : public FRigVMFunction_MathBase
{
};
static_assert(alignof(FRigVMFunction_MathBoolBase) == 0x000008, "Wrong alignment on FRigVMFunction_MathBoolBase");
static_assert(sizeof(FRigVMFunction_MathBoolBase) == 0x000008, "Wrong size on FRigVMFunction_MathBoolBase");

// ScriptStruct RigVM.RigVMFunction_MathBoolConstant
// 0x0008 (0x0010 - 0x0008)
struct FRigVMFunction_MathBoolConstant : public FRigVMFunction_MathBoolBase
{
public:
	bool                                          Value;                                             // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathBoolConstant) == 0x000008, "Wrong alignment on FRigVMFunction_MathBoolConstant");
static_assert(sizeof(FRigVMFunction_MathBoolConstant) == 0x000010, "Wrong size on FRigVMFunction_MathBoolConstant");
static_assert(offsetof(FRigVMFunction_MathBoolConstant, Value) == 0x000008, "Member 'FRigVMFunction_MathBoolConstant::Value' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_DeltaFromPreviousVector
// 0x0068 (0x0070 - 0x0008)
struct FRigVMFunction_DeltaFromPreviousVector final : public FRigVMFunction_SimBase
{
public:
	struct FVector                                Value;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Delta;                                             // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PreviousValue;                                     // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Cache;                                             // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInitialized;                                    // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_DeltaFromPreviousVector) == 0x000008, "Wrong alignment on FRigVMFunction_DeltaFromPreviousVector");
static_assert(sizeof(FRigVMFunction_DeltaFromPreviousVector) == 0x000070, "Wrong size on FRigVMFunction_DeltaFromPreviousVector");
static_assert(offsetof(FRigVMFunction_DeltaFromPreviousVector, Value) == 0x000008, "Member 'FRigVMFunction_DeltaFromPreviousVector::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DeltaFromPreviousVector, Delta) == 0x000020, "Member 'FRigVMFunction_DeltaFromPreviousVector::Delta' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DeltaFromPreviousVector, PreviousValue) == 0x000038, "Member 'FRigVMFunction_DeltaFromPreviousVector::PreviousValue' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DeltaFromPreviousVector, Cache) == 0x000050, "Member 'FRigVMFunction_DeltaFromPreviousVector::Cache' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DeltaFromPreviousVector, bIsInitialized) == 0x000068, "Member 'FRigVMFunction_DeltaFromPreviousVector::bIsInitialized' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathBoolUnaryOp
// 0x0008 (0x0010 - 0x0008)
struct FRigVMFunction_MathBoolUnaryOp : public FRigVMFunction_MathBoolBase
{
public:
	bool                                          Value;                                             // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathBoolUnaryOp) == 0x000008, "Wrong alignment on FRigVMFunction_MathBoolUnaryOp");
static_assert(sizeof(FRigVMFunction_MathBoolUnaryOp) == 0x000010, "Wrong size on FRigVMFunction_MathBoolUnaryOp");
static_assert(offsetof(FRigVMFunction_MathBoolUnaryOp, Value) == 0x000008, "Member 'FRigVMFunction_MathBoolUnaryOp::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathBoolUnaryOp, Result) == 0x000009, "Member 'FRigVMFunction_MathBoolUnaryOp::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathBoolBinaryOp
// 0x0008 (0x0010 - 0x0008)
struct FRigVMFunction_MathBoolBinaryOp : public FRigVMFunction_MathBoolBase
{
public:
	bool                                          A;                                                 // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          B;                                                 // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathBoolBinaryOp) == 0x000008, "Wrong alignment on FRigVMFunction_MathBoolBinaryOp");
static_assert(sizeof(FRigVMFunction_MathBoolBinaryOp) == 0x000010, "Wrong size on FRigVMFunction_MathBoolBinaryOp");
static_assert(offsetof(FRigVMFunction_MathBoolBinaryOp, A) == 0x000008, "Member 'FRigVMFunction_MathBoolBinaryOp::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathBoolBinaryOp, B) == 0x000009, "Member 'FRigVMFunction_MathBoolBinaryOp::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathBoolBinaryOp, Result) == 0x00000A, "Member 'FRigVMFunction_MathBoolBinaryOp::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_AccumulateFloatRange
// 0x0018 (0x0020 - 0x0008)
struct FRigVMFunction_AccumulateFloatRange final : public FRigVMFunction_AccumulateBase
{
public:
	float                                         Value;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Minimum;                                           // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Maximum;                                           // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccumulatedMinimum;                                // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccumulatedMaximum;                                // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInitialized;                                    // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_AccumulateFloatRange) == 0x000008, "Wrong alignment on FRigVMFunction_AccumulateFloatRange");
static_assert(sizeof(FRigVMFunction_AccumulateFloatRange) == 0x000020, "Wrong size on FRigVMFunction_AccumulateFloatRange");
static_assert(offsetof(FRigVMFunction_AccumulateFloatRange, Value) == 0x000008, "Member 'FRigVMFunction_AccumulateFloatRange::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateFloatRange, Minimum) == 0x00000C, "Member 'FRigVMFunction_AccumulateFloatRange::Minimum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateFloatRange, Maximum) == 0x000010, "Member 'FRigVMFunction_AccumulateFloatRange::Maximum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateFloatRange, AccumulatedMinimum) == 0x000014, "Member 'FRigVMFunction_AccumulateFloatRange::AccumulatedMinimum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateFloatRange, AccumulatedMaximum) == 0x000018, "Member 'FRigVMFunction_AccumulateFloatRange::AccumulatedMaximum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateFloatRange, bIsInitialized) == 0x00001C, "Member 'FRigVMFunction_AccumulateFloatRange::bIsInitialized' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathBoolBinaryAggregateOp
// 0x0008 (0x0010 - 0x0008)
struct FRigVMFunction_MathBoolBinaryAggregateOp : public FRigVMFunction_MathBoolBase
{
public:
	bool                                          A;                                                 // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          B;                                                 // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathBoolBinaryAggregateOp) == 0x000008, "Wrong alignment on FRigVMFunction_MathBoolBinaryAggregateOp");
static_assert(sizeof(FRigVMFunction_MathBoolBinaryAggregateOp) == 0x000010, "Wrong size on FRigVMFunction_MathBoolBinaryAggregateOp");
static_assert(offsetof(FRigVMFunction_MathBoolBinaryAggregateOp, A) == 0x000008, "Member 'FRigVMFunction_MathBoolBinaryAggregateOp::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathBoolBinaryAggregateOp, B) == 0x000009, "Member 'FRigVMFunction_MathBoolBinaryAggregateOp::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathBoolBinaryAggregateOp, Result) == 0x00000A, "Member 'FRigVMFunction_MathBoolBinaryAggregateOp::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathBoolMake
// 0x0008 (0x0010 - 0x0008)
struct FRigVMFunction_MathBoolMake final : public FRigVMFunction_MathBoolBase
{
public:
	bool                                          Value;                                             // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathBoolMake) == 0x000008, "Wrong alignment on FRigVMFunction_MathBoolMake");
static_assert(sizeof(FRigVMFunction_MathBoolMake) == 0x000010, "Wrong size on FRigVMFunction_MathBoolMake");
static_assert(offsetof(FRigVMFunction_MathBoolMake, Value) == 0x000008, "Member 'FRigVMFunction_MathBoolMake::Value' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_KalmanVector
// 0x0050 (0x0058 - 0x0008)
struct FRigVMFunction_KalmanVector final : public FRigVMFunction_SimBase
{
public:
	struct FVector                                Value;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BufferSize;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Result;                                            // 0x0028(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        Buffer;                                            // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         LastInsertIndex;                                   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_KalmanVector) == 0x000008, "Wrong alignment on FRigVMFunction_KalmanVector");
static_assert(sizeof(FRigVMFunction_KalmanVector) == 0x000058, "Wrong size on FRigVMFunction_KalmanVector");
static_assert(offsetof(FRigVMFunction_KalmanVector, Value) == 0x000008, "Member 'FRigVMFunction_KalmanVector::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_KalmanVector, BufferSize) == 0x000020, "Member 'FRigVMFunction_KalmanVector::BufferSize' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_KalmanVector, Result) == 0x000028, "Member 'FRigVMFunction_KalmanVector::Result' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_KalmanVector, Buffer) == 0x000040, "Member 'FRigVMFunction_KalmanVector::Buffer' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_KalmanVector, LastInsertIndex) == 0x000050, "Member 'FRigVMFunction_KalmanVector::LastInsertIndex' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathBoolConstTrue
// 0x0000 (0x0010 - 0x0010)
struct FRigVMFunction_MathBoolConstTrue final : public FRigVMFunction_MathBoolConstant
{
};
static_assert(alignof(FRigVMFunction_MathBoolConstTrue) == 0x000008, "Wrong alignment on FRigVMFunction_MathBoolConstTrue");
static_assert(sizeof(FRigVMFunction_MathBoolConstTrue) == 0x000010, "Wrong size on FRigVMFunction_MathBoolConstTrue");

// ScriptStruct RigVM.RigVMFunction_MathBoolConstFalse
// 0x0000 (0x0010 - 0x0010)
struct FRigVMFunction_MathBoolConstFalse final : public FRigVMFunction_MathBoolConstant
{
};
static_assert(alignof(FRigVMFunction_MathBoolConstFalse) == 0x000008, "Wrong alignment on FRigVMFunction_MathBoolConstFalse");
static_assert(sizeof(FRigVMFunction_MathBoolConstFalse) == 0x000010, "Wrong size on FRigVMFunction_MathBoolConstFalse");

// ScriptStruct RigVM.RigVMFunction_MathBoolNot
// 0x0000 (0x0010 - 0x0010)
struct FRigVMFunction_MathBoolNot final : public FRigVMFunction_MathBoolUnaryOp
{
};
static_assert(alignof(FRigVMFunction_MathBoolNot) == 0x000008, "Wrong alignment on FRigVMFunction_MathBoolNot");
static_assert(sizeof(FRigVMFunction_MathBoolNot) == 0x000010, "Wrong size on FRigVMFunction_MathBoolNot");

// ScriptStruct RigVM.RigVMFunction_MathBoolAnd
// 0x0000 (0x0010 - 0x0010)
struct FRigVMFunction_MathBoolAnd final : public FRigVMFunction_MathBoolBinaryAggregateOp
{
};
static_assert(alignof(FRigVMFunction_MathBoolAnd) == 0x000008, "Wrong alignment on FRigVMFunction_MathBoolAnd");
static_assert(sizeof(FRigVMFunction_MathBoolAnd) == 0x000010, "Wrong size on FRigVMFunction_MathBoolAnd");

// ScriptStruct RigVM.RigVMFunction_TimeOffsetFloat
// 0x0040 (0x0048 - 0x0008)
struct FRigVMFunction_TimeOffsetFloat final : public FRigVMFunction_SimBase
{
public:
	float                                         Value;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondsAgo;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BufferSize;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeRange;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Result;                                            // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 Buffer;                                            // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 DeltaTimes;                                        // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         LastInsertIndex;                                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UpperBound;                                        // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_TimeOffsetFloat) == 0x000008, "Wrong alignment on FRigVMFunction_TimeOffsetFloat");
static_assert(sizeof(FRigVMFunction_TimeOffsetFloat) == 0x000048, "Wrong size on FRigVMFunction_TimeOffsetFloat");
static_assert(offsetof(FRigVMFunction_TimeOffsetFloat, Value) == 0x000008, "Member 'FRigVMFunction_TimeOffsetFloat::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_TimeOffsetFloat, SecondsAgo) == 0x00000C, "Member 'FRigVMFunction_TimeOffsetFloat::SecondsAgo' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_TimeOffsetFloat, BufferSize) == 0x000010, "Member 'FRigVMFunction_TimeOffsetFloat::BufferSize' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_TimeOffsetFloat, TimeRange) == 0x000014, "Member 'FRigVMFunction_TimeOffsetFloat::TimeRange' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_TimeOffsetFloat, Result) == 0x000018, "Member 'FRigVMFunction_TimeOffsetFloat::Result' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_TimeOffsetFloat, Buffer) == 0x000020, "Member 'FRigVMFunction_TimeOffsetFloat::Buffer' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_TimeOffsetFloat, DeltaTimes) == 0x000030, "Member 'FRigVMFunction_TimeOffsetFloat::DeltaTimes' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_TimeOffsetFloat, LastInsertIndex) == 0x000040, "Member 'FRigVMFunction_TimeOffsetFloat::LastInsertIndex' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_TimeOffsetFloat, UpperBound) == 0x000044, "Member 'FRigVMFunction_TimeOffsetFloat::UpperBound' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathBoolNand
// 0x0000 (0x0010 - 0x0010)
struct FRigVMFunction_MathBoolNand final : public FRigVMFunction_MathBoolBinaryOp
{
};
static_assert(alignof(FRigVMFunction_MathBoolNand) == 0x000008, "Wrong alignment on FRigVMFunction_MathBoolNand");
static_assert(sizeof(FRigVMFunction_MathBoolNand) == 0x000010, "Wrong size on FRigVMFunction_MathBoolNand");

// ScriptStruct RigVM.RigVMFunction_MathBoolNand2
// 0x0000 (0x0010 - 0x0010)
struct FRigVMFunction_MathBoolNand2 final : public FRigVMFunction_MathBoolBinaryOp
{
};
static_assert(alignof(FRigVMFunction_MathBoolNand2) == 0x000008, "Wrong alignment on FRigVMFunction_MathBoolNand2");
static_assert(sizeof(FRigVMFunction_MathBoolNand2) == 0x000010, "Wrong size on FRigVMFunction_MathBoolNand2");

// ScriptStruct RigVM.RigVMFunction_DeltaFromPreviousTransform
// 0x0198 (0x01A0 - 0x0008)
struct FRigVMFunction_DeltaFromPreviousTransform final : public FRigVMFunction_SimBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Value;                                             // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Delta;                                             // 0x0070(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             PreviousValue;                                     // 0x00D0(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Cache;                                             // 0x0130(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInitialized;                                    // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_191[0xF];                                      // 0x0191(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_DeltaFromPreviousTransform) == 0x000010, "Wrong alignment on FRigVMFunction_DeltaFromPreviousTransform");
static_assert(sizeof(FRigVMFunction_DeltaFromPreviousTransform) == 0x0001A0, "Wrong size on FRigVMFunction_DeltaFromPreviousTransform");
static_assert(offsetof(FRigVMFunction_DeltaFromPreviousTransform, Value) == 0x000010, "Member 'FRigVMFunction_DeltaFromPreviousTransform::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DeltaFromPreviousTransform, Delta) == 0x000070, "Member 'FRigVMFunction_DeltaFromPreviousTransform::Delta' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DeltaFromPreviousTransform, PreviousValue) == 0x0000D0, "Member 'FRigVMFunction_DeltaFromPreviousTransform::PreviousValue' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DeltaFromPreviousTransform, Cache) == 0x000130, "Member 'FRigVMFunction_DeltaFromPreviousTransform::Cache' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DeltaFromPreviousTransform, bIsInitialized) == 0x000190, "Member 'FRigVMFunction_DeltaFromPreviousTransform::bIsInitialized' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathBoolOr
// 0x0000 (0x0010 - 0x0010)
struct FRigVMFunction_MathBoolOr final : public FRigVMFunction_MathBoolBinaryAggregateOp
{
};
static_assert(alignof(FRigVMFunction_MathBoolOr) == 0x000008, "Wrong alignment on FRigVMFunction_MathBoolOr");
static_assert(sizeof(FRigVMFunction_MathBoolOr) == 0x000010, "Wrong size on FRigVMFunction_MathBoolOr");

// ScriptStruct RigVM.RigVMFunction_MathBoolEquals
// 0x0008 (0x0010 - 0x0008)
struct FRigVMFunction_MathBoolEquals final : public FRigVMFunction_MathBoolBase
{
public:
	bool                                          A;                                                 // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          B;                                                 // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathBoolEquals) == 0x000008, "Wrong alignment on FRigVMFunction_MathBoolEquals");
static_assert(sizeof(FRigVMFunction_MathBoolEquals) == 0x000010, "Wrong size on FRigVMFunction_MathBoolEquals");
static_assert(offsetof(FRigVMFunction_MathBoolEquals, A) == 0x000008, "Member 'FRigVMFunction_MathBoolEquals::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathBoolEquals, B) == 0x000009, "Member 'FRigVMFunction_MathBoolEquals::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathBoolEquals, Result) == 0x00000A, "Member 'FRigVMFunction_MathBoolEquals::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathBoolNotEquals
// 0x0008 (0x0010 - 0x0008)
struct FRigVMFunction_MathBoolNotEquals final : public FRigVMFunction_MathBoolBase
{
public:
	bool                                          A;                                                 // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          B;                                                 // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathBoolNotEquals) == 0x000008, "Wrong alignment on FRigVMFunction_MathBoolNotEquals");
static_assert(sizeof(FRigVMFunction_MathBoolNotEquals) == 0x000010, "Wrong size on FRigVMFunction_MathBoolNotEquals");
static_assert(offsetof(FRigVMFunction_MathBoolNotEquals, A) == 0x000008, "Member 'FRigVMFunction_MathBoolNotEquals::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathBoolNotEquals, B) == 0x000009, "Member 'FRigVMFunction_MathBoolNotEquals::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathBoolNotEquals, Result) == 0x00000A, "Member 'FRigVMFunction_MathBoolNotEquals::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathBoolToggled
// 0x0008 (0x0010 - 0x0008)
struct FRigVMFunction_MathBoolToggled final : public FRigVMFunction_MathBoolBase
{
public:
	bool                                          Value;                                             // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Toggled;                                           // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Initialized;                                       // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LastValue;                                         // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathBoolToggled) == 0x000008, "Wrong alignment on FRigVMFunction_MathBoolToggled");
static_assert(sizeof(FRigVMFunction_MathBoolToggled) == 0x000010, "Wrong size on FRigVMFunction_MathBoolToggled");
static_assert(offsetof(FRigVMFunction_MathBoolToggled, Value) == 0x000008, "Member 'FRigVMFunction_MathBoolToggled::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathBoolToggled, Toggled) == 0x000009, "Member 'FRigVMFunction_MathBoolToggled::Toggled' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathBoolToggled, Initialized) == 0x00000A, "Member 'FRigVMFunction_MathBoolToggled::Initialized' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathBoolToggled, LastValue) == 0x00000B, "Member 'FRigVMFunction_MathBoolToggled::LastValue' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_NameReplace
// 0x0020 (0x0028 - 0x0008)
struct FRigVMFunction_NameReplace final : public FRigVMFunction_NameBase
{
public:
	class FName                                   Name;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Old;                                               // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   New;                                               // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Result;                                            // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_NameReplace) == 0x000008, "Wrong alignment on FRigVMFunction_NameReplace");
static_assert(sizeof(FRigVMFunction_NameReplace) == 0x000028, "Wrong size on FRigVMFunction_NameReplace");
static_assert(offsetof(FRigVMFunction_NameReplace, Name) == 0x000008, "Member 'FRigVMFunction_NameReplace::Name' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_NameReplace, Old) == 0x000010, "Member 'FRigVMFunction_NameReplace::Old' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_NameReplace, New) == 0x000018, "Member 'FRigVMFunction_NameReplace::New' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_NameReplace, Result) == 0x000020, "Member 'FRigVMFunction_NameReplace::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathBoolFlipFlop
// 0x0010 (0x0018 - 0x0008)
struct FRigVMFunction_MathBoolFlipFlop final : public FRigVMFunction_MathBoolBase
{
public:
	bool                                          StartValue;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LastValue;                                         // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeLeft;                                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathBoolFlipFlop) == 0x000008, "Wrong alignment on FRigVMFunction_MathBoolFlipFlop");
static_assert(sizeof(FRigVMFunction_MathBoolFlipFlop) == 0x000018, "Wrong size on FRigVMFunction_MathBoolFlipFlop");
static_assert(offsetof(FRigVMFunction_MathBoolFlipFlop, StartValue) == 0x000008, "Member 'FRigVMFunction_MathBoolFlipFlop::StartValue' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathBoolFlipFlop, Duration) == 0x00000C, "Member 'FRigVMFunction_MathBoolFlipFlop::Duration' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathBoolFlipFlop, Result) == 0x000010, "Member 'FRigVMFunction_MathBoolFlipFlop::Result' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathBoolFlipFlop, LastValue) == 0x000011, "Member 'FRigVMFunction_MathBoolFlipFlop::LastValue' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathBoolFlipFlop, TimeLeft) == 0x000014, "Member 'FRigVMFunction_MathBoolFlipFlop::TimeLeft' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathBoolOnce
// 0x0010 (0x0018 - 0x0008)
struct FRigVMFunction_MathBoolOnce final : public FRigVMFunction_MathBoolBase
{
public:
	float                                         Duration;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LastValue;                                         // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeLeft;                                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathBoolOnce) == 0x000008, "Wrong alignment on FRigVMFunction_MathBoolOnce");
static_assert(sizeof(FRigVMFunction_MathBoolOnce) == 0x000018, "Wrong size on FRigVMFunction_MathBoolOnce");
static_assert(offsetof(FRigVMFunction_MathBoolOnce, Duration) == 0x000008, "Member 'FRigVMFunction_MathBoolOnce::Duration' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathBoolOnce, Result) == 0x00000C, "Member 'FRigVMFunction_MathBoolOnce::Result' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathBoolOnce, LastValue) == 0x00000D, "Member 'FRigVMFunction_MathBoolOnce::LastValue' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathBoolOnce, TimeLeft) == 0x000010, "Member 'FRigVMFunction_MathBoolOnce::TimeLeft' has a wrong offset!");

// ScriptStruct RigVM.RigVMDispatch_SwitchInt32
// 0x0000 (0x0070 - 0x0070)
struct FRigVMDispatch_SwitchInt32 final : public FRigVMDispatch_CoreBase
{
};
static_assert(alignof(FRigVMDispatch_SwitchInt32) == 0x000008, "Wrong alignment on FRigVMDispatch_SwitchInt32");
static_assert(sizeof(FRigVMDispatch_SwitchInt32) == 0x000070, "Wrong size on FRigVMDispatch_SwitchInt32");

// ScriptStruct RigVM.RigVMFunction_MathBoolToFloat
// 0x0008 (0x0010 - 0x0008)
struct FRigVMFunction_MathBoolToFloat final : public FRigVMFunction_MathBoolBase
{
public:
	bool                                          Value;                                             // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Result;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathBoolToFloat) == 0x000008, "Wrong alignment on FRigVMFunction_MathBoolToFloat");
static_assert(sizeof(FRigVMFunction_MathBoolToFloat) == 0x000010, "Wrong size on FRigVMFunction_MathBoolToFloat");
static_assert(offsetof(FRigVMFunction_MathBoolToFloat, Value) == 0x000008, "Member 'FRigVMFunction_MathBoolToFloat::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathBoolToFloat, Result) == 0x00000C, "Member 'FRigVMFunction_MathBoolToFloat::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathBoolToInteger
// 0x0008 (0x0010 - 0x0008)
struct FRigVMFunction_MathBoolToInteger final : public FRigVMFunction_MathBoolBase
{
public:
	bool                                          Value;                                             // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Result;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathBoolToInteger) == 0x000008, "Wrong alignment on FRigVMFunction_MathBoolToInteger");
static_assert(sizeof(FRigVMFunction_MathBoolToInteger) == 0x000010, "Wrong size on FRigVMFunction_MathBoolToInteger");
static_assert(offsetof(FRigVMFunction_MathBoolToInteger, Value) == 0x000008, "Member 'FRigVMFunction_MathBoolToInteger::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathBoolToInteger, Result) == 0x00000C, "Member 'FRigVMFunction_MathBoolToInteger::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_TimeOffsetTransform
// 0x0108 (0x0110 - 0x0008)
struct FRigVMFunction_TimeOffsetTransform final : public FRigVMFunction_SimBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Value;                                             // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondsAgo;                                        // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BufferSize;                                        // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeRange;                                         // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Result;                                            // 0x0080(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     Buffer;                                            // 0x00E0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 DeltaTimes;                                        // 0x00F0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         LastInsertIndex;                                   // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UpperBound;                                        // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_108[0x8];                                      // 0x0108(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_TimeOffsetTransform) == 0x000010, "Wrong alignment on FRigVMFunction_TimeOffsetTransform");
static_assert(sizeof(FRigVMFunction_TimeOffsetTransform) == 0x000110, "Wrong size on FRigVMFunction_TimeOffsetTransform");
static_assert(offsetof(FRigVMFunction_TimeOffsetTransform, Value) == 0x000010, "Member 'FRigVMFunction_TimeOffsetTransform::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_TimeOffsetTransform, SecondsAgo) == 0x000070, "Member 'FRigVMFunction_TimeOffsetTransform::SecondsAgo' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_TimeOffsetTransform, BufferSize) == 0x000074, "Member 'FRigVMFunction_TimeOffsetTransform::BufferSize' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_TimeOffsetTransform, TimeRange) == 0x000078, "Member 'FRigVMFunction_TimeOffsetTransform::TimeRange' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_TimeOffsetTransform, Result) == 0x000080, "Member 'FRigVMFunction_TimeOffsetTransform::Result' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_TimeOffsetTransform, Buffer) == 0x0000E0, "Member 'FRigVMFunction_TimeOffsetTransform::Buffer' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_TimeOffsetTransform, DeltaTimes) == 0x0000F0, "Member 'FRigVMFunction_TimeOffsetTransform::DeltaTimes' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_TimeOffsetTransform, LastInsertIndex) == 0x000100, "Member 'FRigVMFunction_TimeOffsetTransform::LastInsertIndex' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_TimeOffsetTransform, UpperBound) == 0x000104, "Member 'FRigVMFunction_TimeOffsetTransform::UpperBound' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathColorBase
// 0x0000 (0x0008 - 0x0008)
struct FRigVMFunction_MathColorBase : public FRigVMFunction_MathBase
{
};
static_assert(alignof(FRigVMFunction_MathColorBase) == 0x000008, "Wrong alignment on FRigVMFunction_MathColorBase");
static_assert(sizeof(FRigVMFunction_MathColorBase) == 0x000008, "Wrong size on FRigVMFunction_MathColorBase");

// ScriptStruct RigVM.RigVMFunction_MathColorBinaryOp
// 0x0030 (0x0038 - 0x0008)
struct FRigVMFunction_MathColorBinaryOp : public FRigVMFunction_MathColorBase
{
public:
	struct FLinearColor                           A;                                                 // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           B;                                                 // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Result;                                            // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathColorBinaryOp) == 0x000008, "Wrong alignment on FRigVMFunction_MathColorBinaryOp");
static_assert(sizeof(FRigVMFunction_MathColorBinaryOp) == 0x000038, "Wrong size on FRigVMFunction_MathColorBinaryOp");
static_assert(offsetof(FRigVMFunction_MathColorBinaryOp, A) == 0x000008, "Member 'FRigVMFunction_MathColorBinaryOp::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathColorBinaryOp, B) == 0x000018, "Member 'FRigVMFunction_MathColorBinaryOp::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathColorBinaryOp, Result) == 0x000028, "Member 'FRigVMFunction_MathColorBinaryOp::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_NameConcat
// 0x0018 (0x0020 - 0x0008)
struct FRigVMFunction_NameConcat final : public FRigVMFunction_NameBase
{
public:
	class FName                                   A;                                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   B;                                                 // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Result;                                            // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_NameConcat) == 0x000008, "Wrong alignment on FRigVMFunction_NameConcat");
static_assert(sizeof(FRigVMFunction_NameConcat) == 0x000020, "Wrong size on FRigVMFunction_NameConcat");
static_assert(offsetof(FRigVMFunction_NameConcat, A) == 0x000008, "Member 'FRigVMFunction_NameConcat::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_NameConcat, B) == 0x000010, "Member 'FRigVMFunction_NameConcat::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_NameConcat, Result) == 0x000018, "Member 'FRigVMFunction_NameConcat::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathColorBinaryAggregateOp
// 0x0030 (0x0038 - 0x0008)
struct FRigVMFunction_MathColorBinaryAggregateOp : public FRigVMFunction_MathColorBase
{
public:
	struct FLinearColor                           A;                                                 // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           B;                                                 // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Result;                                            // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathColorBinaryAggregateOp) == 0x000008, "Wrong alignment on FRigVMFunction_MathColorBinaryAggregateOp");
static_assert(sizeof(FRigVMFunction_MathColorBinaryAggregateOp) == 0x000038, "Wrong size on FRigVMFunction_MathColorBinaryAggregateOp");
static_assert(offsetof(FRigVMFunction_MathColorBinaryAggregateOp, A) == 0x000008, "Member 'FRigVMFunction_MathColorBinaryAggregateOp::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathColorBinaryAggregateOp, B) == 0x000018, "Member 'FRigVMFunction_MathColorBinaryAggregateOp::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathColorBinaryAggregateOp, Result) == 0x000028, "Member 'FRigVMFunction_MathColorBinaryAggregateOp::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathColorMake
// 0x0020 (0x0028 - 0x0008)
struct FRigVMFunction_MathColorMake final : public FRigVMFunction_MathColorBase
{
public:
	float                                         R;                                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         G;                                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         B;                                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         A;                                                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Result;                                            // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathColorMake) == 0x000008, "Wrong alignment on FRigVMFunction_MathColorMake");
static_assert(sizeof(FRigVMFunction_MathColorMake) == 0x000028, "Wrong size on FRigVMFunction_MathColorMake");
static_assert(offsetof(FRigVMFunction_MathColorMake, R) == 0x000008, "Member 'FRigVMFunction_MathColorMake::R' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathColorMake, G) == 0x00000C, "Member 'FRigVMFunction_MathColorMake::G' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathColorMake, B) == 0x000010, "Member 'FRigVMFunction_MathColorMake::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathColorMake, A) == 0x000014, "Member 'FRigVMFunction_MathColorMake::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathColorMake, Result) == 0x000018, "Member 'FRigVMFunction_MathColorMake::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathColorFromFloat
// 0x0018 (0x0020 - 0x0008)
struct FRigVMFunction_MathColorFromFloat final : public FRigVMFunction_MathColorBase
{
public:
	float                                         Value;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Result;                                            // 0x000C(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathColorFromFloat) == 0x000008, "Wrong alignment on FRigVMFunction_MathColorFromFloat");
static_assert(sizeof(FRigVMFunction_MathColorFromFloat) == 0x000020, "Wrong size on FRigVMFunction_MathColorFromFloat");
static_assert(offsetof(FRigVMFunction_MathColorFromFloat, Value) == 0x000008, "Member 'FRigVMFunction_MathColorFromFloat::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathColorFromFloat, Result) == 0x00000C, "Member 'FRigVMFunction_MathColorFromFloat::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathRBFInterpolateQuatWorkData
// 0x0090 (0x0090 - 0x0000)
struct alignas(0x10) FRigVMFunction_MathRBFInterpolateQuatWorkData final
{
public:
	uint8                                         Pad_0[0x90];                                       // 0x0000(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathRBFInterpolateQuatWorkData) == 0x000010, "Wrong alignment on FRigVMFunction_MathRBFInterpolateQuatWorkData");
static_assert(sizeof(FRigVMFunction_MathRBFInterpolateQuatWorkData) == 0x000090, "Wrong size on FRigVMFunction_MathRBFInterpolateQuatWorkData");

// ScriptStruct RigVM.RigVMFunction_MathRBFInterpolateBase
// 0x0000 (0x0008 - 0x0008)
struct FRigVMFunction_MathRBFInterpolateBase : public FRigVMFunction_MathBase
{
};
static_assert(alignof(FRigVMFunction_MathRBFInterpolateBase) == 0x000008, "Wrong alignment on FRigVMFunction_MathRBFInterpolateBase");
static_assert(sizeof(FRigVMFunction_MathRBFInterpolateBase) == 0x000008, "Wrong size on FRigVMFunction_MathRBFInterpolateBase");

// ScriptStruct RigVM.RigVMFunction_MathRBFInterpolateQuatBase
// 0x00E8 (0x00F0 - 0x0008)
struct FRigVMFunction_MathRBFInterpolateQuatBase : public FRigVMFunction_MathRBFInterpolateBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Input;                                             // 0x0010(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERBFQuatDistanceType                          DistanceFunction;                                  // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERBFKernelType                                SmoothingFunction;                                 // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SmoothingAngle;                                    // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNormalizeOutput;                                  // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TwistAxis;                                         // 0x0040(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigVMFunction_MathRBFInterpolateQuatWorkData WorkData;                                          // 0x0060(0x0090)(Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathRBFInterpolateQuatBase) == 0x000010, "Wrong alignment on FRigVMFunction_MathRBFInterpolateQuatBase");
static_assert(sizeof(FRigVMFunction_MathRBFInterpolateQuatBase) == 0x0000F0, "Wrong size on FRigVMFunction_MathRBFInterpolateQuatBase");
static_assert(offsetof(FRigVMFunction_MathRBFInterpolateQuatBase, Input) == 0x000010, "Member 'FRigVMFunction_MathRBFInterpolateQuatBase::Input' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathRBFInterpolateQuatBase, DistanceFunction) == 0x000030, "Member 'FRigVMFunction_MathRBFInterpolateQuatBase::DistanceFunction' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathRBFInterpolateQuatBase, SmoothingFunction) == 0x000031, "Member 'FRigVMFunction_MathRBFInterpolateQuatBase::SmoothingFunction' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathRBFInterpolateQuatBase, SmoothingAngle) == 0x000034, "Member 'FRigVMFunction_MathRBFInterpolateQuatBase::SmoothingAngle' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathRBFInterpolateQuatBase, bNormalizeOutput) == 0x000038, "Member 'FRigVMFunction_MathRBFInterpolateQuatBase::bNormalizeOutput' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathRBFInterpolateQuatBase, TwistAxis) == 0x000040, "Member 'FRigVMFunction_MathRBFInterpolateQuatBase::TwistAxis' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathRBFInterpolateQuatBase, WorkData) == 0x000060, "Member 'FRigVMFunction_MathRBFInterpolateQuatBase::WorkData' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathColorFromDouble
// 0x0018 (0x0020 - 0x0008)
struct FRigVMFunction_MathColorFromDouble final : public FRigVMFunction_MathColorBase
{
public:
	double                                        Value;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Result;                                            // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathColorFromDouble) == 0x000008, "Wrong alignment on FRigVMFunction_MathColorFromDouble");
static_assert(sizeof(FRigVMFunction_MathColorFromDouble) == 0x000020, "Wrong size on FRigVMFunction_MathColorFromDouble");
static_assert(offsetof(FRigVMFunction_MathColorFromDouble, Value) == 0x000008, "Member 'FRigVMFunction_MathColorFromDouble::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathColorFromDouble, Result) == 0x000010, "Member 'FRigVMFunction_MathColorFromDouble::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathColorAdd
// 0x0000 (0x0038 - 0x0038)
struct FRigVMFunction_MathColorAdd final : public FRigVMFunction_MathColorBinaryAggregateOp
{
};
static_assert(alignof(FRigVMFunction_MathColorAdd) == 0x000008, "Wrong alignment on FRigVMFunction_MathColorAdd");
static_assert(sizeof(FRigVMFunction_MathColorAdd) == 0x000038, "Wrong size on FRigVMFunction_MathColorAdd");

// ScriptStruct RigVM.RigVMFunction_MathIntArraySum
// 0x0018 (0x0020 - 0x0008)
struct FRigVMFunction_MathIntArraySum final : public FRigVMFunction_MathIntBase
{
public:
	TArray<int32>                                 Array;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Sum;                                               // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathIntArraySum) == 0x000008, "Wrong alignment on FRigVMFunction_MathIntArraySum");
static_assert(sizeof(FRigVMFunction_MathIntArraySum) == 0x000020, "Wrong size on FRigVMFunction_MathIntArraySum");
static_assert(offsetof(FRigVMFunction_MathIntArraySum, Array) == 0x000008, "Member 'FRigVMFunction_MathIntArraySum::Array' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathIntArraySum, Sum) == 0x000018, "Member 'FRigVMFunction_MathIntArraySum::Sum' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathColorSub
// 0x0000 (0x0038 - 0x0038)
struct FRigVMFunction_MathColorSub final : public FRigVMFunction_MathColorBinaryOp
{
};
static_assert(alignof(FRigVMFunction_MathColorSub) == 0x000008, "Wrong alignment on FRigVMFunction_MathColorSub");
static_assert(sizeof(FRigVMFunction_MathColorSub) == 0x000038, "Wrong size on FRigVMFunction_MathColorSub");

// ScriptStruct RigVM.RigVMFunction_MathColorMul
// 0x0000 (0x0038 - 0x0038)
struct FRigVMFunction_MathColorMul final : public FRigVMFunction_MathColorBinaryAggregateOp
{
};
static_assert(alignof(FRigVMFunction_MathColorMul) == 0x000008, "Wrong alignment on FRigVMFunction_MathColorMul");
static_assert(sizeof(FRigVMFunction_MathColorMul) == 0x000038, "Wrong size on FRigVMFunction_MathColorMul");

// ScriptStruct RigVM.MathRBFInterpolateQuatVector_Target
// 0x0040 (0x0040 - 0x0000)
struct FMathRBFInterpolateQuatVector_Target final
{
public:
	struct FQuat                                  Target;                                            // 0x0000(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Value;                                             // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMathRBFInterpolateQuatVector_Target) == 0x000010, "Wrong alignment on FMathRBFInterpolateQuatVector_Target");
static_assert(sizeof(FMathRBFInterpolateQuatVector_Target) == 0x000040, "Wrong size on FMathRBFInterpolateQuatVector_Target");
static_assert(offsetof(FMathRBFInterpolateQuatVector_Target, Target) == 0x000000, "Member 'FMathRBFInterpolateQuatVector_Target::Target' has a wrong offset!");
static_assert(offsetof(FMathRBFInterpolateQuatVector_Target, Value) == 0x000020, "Member 'FMathRBFInterpolateQuatVector_Target::Value' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathColorLerp
// 0x0038 (0x0040 - 0x0008)
struct FRigVMFunction_MathColorLerp final : public FRigVMFunction_MathColorBase
{
public:
	struct FLinearColor                           A;                                                 // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           B;                                                 // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         T;                                                 // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Result;                                            // 0x002C(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathColorLerp) == 0x000008, "Wrong alignment on FRigVMFunction_MathColorLerp");
static_assert(sizeof(FRigVMFunction_MathColorLerp) == 0x000040, "Wrong size on FRigVMFunction_MathColorLerp");
static_assert(offsetof(FRigVMFunction_MathColorLerp, A) == 0x000008, "Member 'FRigVMFunction_MathColorLerp::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathColorLerp, B) == 0x000018, "Member 'FRigVMFunction_MathColorLerp::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathColorLerp, T) == 0x000028, "Member 'FRigVMFunction_MathColorLerp::T' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathColorLerp, Result) == 0x00002C, "Member 'FRigVMFunction_MathColorLerp::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathDoubleBase
// 0x0000 (0x0008 - 0x0008)
struct FRigVMFunction_MathDoubleBase : public FRigVMFunction_MathBase
{
};
static_assert(alignof(FRigVMFunction_MathDoubleBase) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoubleBase");
static_assert(sizeof(FRigVMFunction_MathDoubleBase) == 0x000008, "Wrong size on FRigVMFunction_MathDoubleBase");

// ScriptStruct RigVM.RigVMFunction_MathRBFInterpolateVectorWorkData
// 0x0090 (0x0090 - 0x0000)
struct alignas(0x10) FRigVMFunction_MathRBFInterpolateVectorWorkData final
{
public:
	uint8                                         Pad_0[0x90];                                       // 0x0000(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathRBFInterpolateVectorWorkData) == 0x000010, "Wrong alignment on FRigVMFunction_MathRBFInterpolateVectorWorkData");
static_assert(sizeof(FRigVMFunction_MathRBFInterpolateVectorWorkData) == 0x000090, "Wrong size on FRigVMFunction_MathRBFInterpolateVectorWorkData");

// ScriptStruct RigVM.RigVMFunction_MathDoubleConstant
// 0x0008 (0x0010 - 0x0008)
struct FRigVMFunction_MathDoubleConstant : public FRigVMFunction_MathDoubleBase
{
public:
	double                                        Value;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathDoubleConstant) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoubleConstant");
static_assert(sizeof(FRigVMFunction_MathDoubleConstant) == 0x000010, "Wrong size on FRigVMFunction_MathDoubleConstant");
static_assert(offsetof(FRigVMFunction_MathDoubleConstant, Value) == 0x000008, "Member 'FRigVMFunction_MathDoubleConstant::Value' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathDoubleUnaryOp
// 0x0010 (0x0018 - 0x0008)
struct FRigVMFunction_MathDoubleUnaryOp : public FRigVMFunction_MathDoubleBase
{
public:
	double                                        Value;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Result;                                            // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathDoubleUnaryOp) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoubleUnaryOp");
static_assert(sizeof(FRigVMFunction_MathDoubleUnaryOp) == 0x000018, "Wrong size on FRigVMFunction_MathDoubleUnaryOp");
static_assert(offsetof(FRigVMFunction_MathDoubleUnaryOp, Value) == 0x000008, "Member 'FRigVMFunction_MathDoubleUnaryOp::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDoubleUnaryOp, Result) == 0x000010, "Member 'FRigVMFunction_MathDoubleUnaryOp::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathIntGreaterEqual
// 0x0010 (0x0018 - 0x0008)
struct FRigVMFunction_MathIntGreaterEqual final : public FRigVMFunction_MathIntBase
{
public:
	int32                                         A;                                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         B;                                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathIntGreaterEqual) == 0x000008, "Wrong alignment on FRigVMFunction_MathIntGreaterEqual");
static_assert(sizeof(FRigVMFunction_MathIntGreaterEqual) == 0x000018, "Wrong size on FRigVMFunction_MathIntGreaterEqual");
static_assert(offsetof(FRigVMFunction_MathIntGreaterEqual, A) == 0x000008, "Member 'FRigVMFunction_MathIntGreaterEqual::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathIntGreaterEqual, B) == 0x00000C, "Member 'FRigVMFunction_MathIntGreaterEqual::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathIntGreaterEqual, Result) == 0x000010, "Member 'FRigVMFunction_MathIntGreaterEqual::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathDoubleBinaryOp
// 0x0018 (0x0020 - 0x0008)
struct FRigVMFunction_MathDoubleBinaryOp : public FRigVMFunction_MathDoubleBase
{
public:
	double                                        A;                                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        B;                                                 // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Result;                                            // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathDoubleBinaryOp) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoubleBinaryOp");
static_assert(sizeof(FRigVMFunction_MathDoubleBinaryOp) == 0x000020, "Wrong size on FRigVMFunction_MathDoubleBinaryOp");
static_assert(offsetof(FRigVMFunction_MathDoubleBinaryOp, A) == 0x000008, "Member 'FRigVMFunction_MathDoubleBinaryOp::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDoubleBinaryOp, B) == 0x000010, "Member 'FRigVMFunction_MathDoubleBinaryOp::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDoubleBinaryOp, Result) == 0x000018, "Member 'FRigVMFunction_MathDoubleBinaryOp::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathDoubleBinaryAggregateOp
// 0x0018 (0x0020 - 0x0008)
struct FRigVMFunction_MathDoubleBinaryAggregateOp : public FRigVMFunction_MathDoubleBase
{
public:
	double                                        A;                                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        B;                                                 // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Result;                                            // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathDoubleBinaryAggregateOp) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoubleBinaryAggregateOp");
static_assert(sizeof(FRigVMFunction_MathDoubleBinaryAggregateOp) == 0x000020, "Wrong size on FRigVMFunction_MathDoubleBinaryAggregateOp");
static_assert(offsetof(FRigVMFunction_MathDoubleBinaryAggregateOp, A) == 0x000008, "Member 'FRigVMFunction_MathDoubleBinaryAggregateOp::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDoubleBinaryAggregateOp, B) == 0x000010, "Member 'FRigVMFunction_MathDoubleBinaryAggregateOp::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDoubleBinaryAggregateOp, Result) == 0x000018, "Member 'FRigVMFunction_MathDoubleBinaryAggregateOp::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathMatrixBase
// 0x0000 (0x0008 - 0x0008)
struct FRigVMFunction_MathMatrixBase : public FRigVMFunction_MathBase
{
};
static_assert(alignof(FRigVMFunction_MathMatrixBase) == 0x000008, "Wrong alignment on FRigVMFunction_MathMatrixBase");
static_assert(sizeof(FRigVMFunction_MathMatrixBase) == 0x000008, "Wrong size on FRigVMFunction_MathMatrixBase");

// ScriptStruct RigVM.RigVMFunction_MathMatrixToTransform
// 0x00E8 (0x00F0 - 0x0008)
struct FRigVMFunction_MathMatrixToTransform final : public FRigVMFunction_MathMatrixBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatrix                                Value;                                             // 0x0010(0x0080)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             Result;                                            // 0x0090(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathMatrixToTransform) == 0x000010, "Wrong alignment on FRigVMFunction_MathMatrixToTransform");
static_assert(sizeof(FRigVMFunction_MathMatrixToTransform) == 0x0000F0, "Wrong size on FRigVMFunction_MathMatrixToTransform");
static_assert(offsetof(FRigVMFunction_MathMatrixToTransform, Value) == 0x000010, "Member 'FRigVMFunction_MathMatrixToTransform::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathMatrixToTransform, Result) == 0x000090, "Member 'FRigVMFunction_MathMatrixToTransform::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathDoubleMake
// 0x0008 (0x0010 - 0x0008)
struct FRigVMFunction_MathDoubleMake final : public FRigVMFunction_MathDoubleBase
{
public:
	double                                        Value;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathDoubleMake) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoubleMake");
static_assert(sizeof(FRigVMFunction_MathDoubleMake) == 0x000010, "Wrong size on FRigVMFunction_MathDoubleMake");
static_assert(offsetof(FRigVMFunction_MathDoubleMake, Value) == 0x000008, "Member 'FRigVMFunction_MathDoubleMake::Value' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathDoubleConstPi
// 0x0000 (0x0010 - 0x0010)
struct FRigVMFunction_MathDoubleConstPi final : public FRigVMFunction_MathDoubleConstant
{
};
static_assert(alignof(FRigVMFunction_MathDoubleConstPi) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoubleConstPi");
static_assert(sizeof(FRigVMFunction_MathDoubleConstPi) == 0x000010, "Wrong size on FRigVMFunction_MathDoubleConstPi");

// ScriptStruct RigVM.RigVMFunction_MathIntToString
// 0x0018 (0x0020 - 0x0008)
struct FRigVMFunction_MathIntToString final : public FRigVMFunction_MathIntBase
{
public:
	int32                                         Number;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PaddedSize;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Result;                                            // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathIntToString) == 0x000008, "Wrong alignment on FRigVMFunction_MathIntToString");
static_assert(sizeof(FRigVMFunction_MathIntToString) == 0x000020, "Wrong size on FRigVMFunction_MathIntToString");
static_assert(offsetof(FRigVMFunction_MathIntToString, Number) == 0x000008, "Member 'FRigVMFunction_MathIntToString::Number' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathIntToString, PaddedSize) == 0x00000C, "Member 'FRigVMFunction_MathIntToString::PaddedSize' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathIntToString, Result) == 0x000010, "Member 'FRigVMFunction_MathIntToString::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathDoubleConstHalfPi
// 0x0000 (0x0010 - 0x0010)
struct FRigVMFunction_MathDoubleConstHalfPi final : public FRigVMFunction_MathDoubleConstant
{
};
static_assert(alignof(FRigVMFunction_MathDoubleConstHalfPi) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoubleConstHalfPi");
static_assert(sizeof(FRigVMFunction_MathDoubleConstHalfPi) == 0x000010, "Wrong size on FRigVMFunction_MathDoubleConstHalfPi");

// ScriptStruct RigVM.RigVMFunction_MathDoubleConstTwoPi
// 0x0000 (0x0010 - 0x0010)
struct FRigVMFunction_MathDoubleConstTwoPi final : public FRigVMFunction_MathDoubleConstant
{
};
static_assert(alignof(FRigVMFunction_MathDoubleConstTwoPi) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoubleConstTwoPi");
static_assert(sizeof(FRigVMFunction_MathDoubleConstTwoPi) == 0x000010, "Wrong size on FRigVMFunction_MathDoubleConstTwoPi");

// ScriptStruct RigVM.RigVMFunction_MathIntGreater
// 0x0010 (0x0018 - 0x0008)
struct FRigVMFunction_MathIntGreater final : public FRigVMFunction_MathIntBase
{
public:
	int32                                         A;                                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         B;                                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathIntGreater) == 0x000008, "Wrong alignment on FRigVMFunction_MathIntGreater");
static_assert(sizeof(FRigVMFunction_MathIntGreater) == 0x000018, "Wrong size on FRigVMFunction_MathIntGreater");
static_assert(offsetof(FRigVMFunction_MathIntGreater, A) == 0x000008, "Member 'FRigVMFunction_MathIntGreater::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathIntGreater, B) == 0x00000C, "Member 'FRigVMFunction_MathIntGreater::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathIntGreater, Result) == 0x000010, "Member 'FRigVMFunction_MathIntGreater::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathDoubleConstE
// 0x0000 (0x0010 - 0x0010)
struct FRigVMFunction_MathDoubleConstE final : public FRigVMFunction_MathDoubleConstant
{
};
static_assert(alignof(FRigVMFunction_MathDoubleConstE) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoubleConstE");
static_assert(sizeof(FRigVMFunction_MathDoubleConstE) == 0x000010, "Wrong size on FRigVMFunction_MathDoubleConstE");

// ScriptStruct RigVM.RigVMFunction_MathDoubleAdd
// 0x0000 (0x0020 - 0x0020)
struct FRigVMFunction_MathDoubleAdd final : public FRigVMFunction_MathDoubleBinaryAggregateOp
{
};
static_assert(alignof(FRigVMFunction_MathDoubleAdd) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoubleAdd");
static_assert(sizeof(FRigVMFunction_MathDoubleAdd) == 0x000020, "Wrong size on FRigVMFunction_MathDoubleAdd");

// ScriptStruct RigVM.RigVMFunction_MathMatrixBinaryOp
// 0x0188 (0x0190 - 0x0008)
struct FRigVMFunction_MathMatrixBinaryOp final : public FRigVMFunction_MathMatrixBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatrix                                A;                                                 // 0x0010(0x0080)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMatrix                                B;                                                 // 0x0090(0x0080)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMatrix                                Result;                                            // 0x0110(0x0080)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathMatrixBinaryOp) == 0x000010, "Wrong alignment on FRigVMFunction_MathMatrixBinaryOp");
static_assert(sizeof(FRigVMFunction_MathMatrixBinaryOp) == 0x000190, "Wrong size on FRigVMFunction_MathMatrixBinaryOp");
static_assert(offsetof(FRigVMFunction_MathMatrixBinaryOp, A) == 0x000010, "Member 'FRigVMFunction_MathMatrixBinaryOp::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathMatrixBinaryOp, B) == 0x000090, "Member 'FRigVMFunction_MathMatrixBinaryOp::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathMatrixBinaryOp, Result) == 0x000110, "Member 'FRigVMFunction_MathMatrixBinaryOp::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathDoubleSub
// 0x0000 (0x0020 - 0x0020)
struct FRigVMFunction_MathDoubleSub final : public FRigVMFunction_MathDoubleBinaryOp
{
};
static_assert(alignof(FRigVMFunction_MathDoubleSub) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoubleSub");
static_assert(sizeof(FRigVMFunction_MathDoubleSub) == 0x000020, "Wrong size on FRigVMFunction_MathDoubleSub");

// ScriptStruct RigVM.RigVMFunction_MathDoubleMul
// 0x0000 (0x0020 - 0x0020)
struct FRigVMFunction_MathDoubleMul final : public FRigVMFunction_MathDoubleBinaryAggregateOp
{
};
static_assert(alignof(FRigVMFunction_MathDoubleMul) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoubleMul");
static_assert(sizeof(FRigVMFunction_MathDoubleMul) == 0x000020, "Wrong size on FRigVMFunction_MathDoubleMul");

// ScriptStruct RigVM.RigVMFunction_MathQuaternionBase
// 0x0000 (0x0008 - 0x0008)
struct FRigVMFunction_MathQuaternionBase : public FRigVMFunction_MathBase
{
};
static_assert(alignof(FRigVMFunction_MathQuaternionBase) == 0x000008, "Wrong alignment on FRigVMFunction_MathQuaternionBase");
static_assert(sizeof(FRigVMFunction_MathQuaternionBase) == 0x000008, "Wrong size on FRigVMFunction_MathQuaternionBase");

// ScriptStruct RigVM.RigVMFunction_MathQuaternionUnaryOp
// 0x0048 (0x0050 - 0x0008)
struct FRigVMFunction_MathQuaternionUnaryOp : public FRigVMFunction_MathQuaternionBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Value;                                             // 0x0010(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  Result;                                            // 0x0030(0x0020)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathQuaternionUnaryOp) == 0x000010, "Wrong alignment on FRigVMFunction_MathQuaternionUnaryOp");
static_assert(sizeof(FRigVMFunction_MathQuaternionUnaryOp) == 0x000050, "Wrong size on FRigVMFunction_MathQuaternionUnaryOp");
static_assert(offsetof(FRigVMFunction_MathQuaternionUnaryOp, Value) == 0x000010, "Member 'FRigVMFunction_MathQuaternionUnaryOp::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionUnaryOp, Result) == 0x000030, "Member 'FRigVMFunction_MathQuaternionUnaryOp::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathDoubleDiv
// 0x0000 (0x0020 - 0x0020)
struct FRigVMFunction_MathDoubleDiv final : public FRigVMFunction_MathDoubleBinaryOp
{
};
static_assert(alignof(FRigVMFunction_MathDoubleDiv) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoubleDiv");
static_assert(sizeof(FRigVMFunction_MathDoubleDiv) == 0x000020, "Wrong size on FRigVMFunction_MathDoubleDiv");

// ScriptStruct RigVM.RigVMFunction_MathDoubleMod
// 0x0000 (0x0020 - 0x0020)
struct FRigVMFunction_MathDoubleMod final : public FRigVMFunction_MathDoubleBinaryOp
{
};
static_assert(alignof(FRigVMFunction_MathDoubleMod) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoubleMod");
static_assert(sizeof(FRigVMFunction_MathDoubleMod) == 0x000020, "Wrong size on FRigVMFunction_MathDoubleMod");

// ScriptStruct RigVM.RigVMFunction_MathMatrixFromTransformV2
// 0x00E8 (0x00F0 - 0x0008)
struct FRigVMFunction_MathMatrixFromTransformV2 final : public FRigVMFunction_MathMatrixBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Value;                                             // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMatrix                                Result;                                            // 0x0070(0x0080)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathMatrixFromTransformV2) == 0x000010, "Wrong alignment on FRigVMFunction_MathMatrixFromTransformV2");
static_assert(sizeof(FRigVMFunction_MathMatrixFromTransformV2) == 0x0000F0, "Wrong size on FRigVMFunction_MathMatrixFromTransformV2");
static_assert(offsetof(FRigVMFunction_MathMatrixFromTransformV2, Value) == 0x000010, "Member 'FRigVMFunction_MathMatrixFromTransformV2::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathMatrixFromTransformV2, Result) == 0x000070, "Member 'FRigVMFunction_MathMatrixFromTransformV2::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathDoubleMin
// 0x0000 (0x0020 - 0x0020)
struct FRigVMFunction_MathDoubleMin final : public FRigVMFunction_MathDoubleBinaryAggregateOp
{
};
static_assert(alignof(FRigVMFunction_MathDoubleMin) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoubleMin");
static_assert(sizeof(FRigVMFunction_MathDoubleMin) == 0x000020, "Wrong size on FRigVMFunction_MathDoubleMin");

// ScriptStruct RigVM.RigVMFunction_MathDoubleMax
// 0x0000 (0x0020 - 0x0020)
struct FRigVMFunction_MathDoubleMax final : public FRigVMFunction_MathDoubleBinaryAggregateOp
{
};
static_assert(alignof(FRigVMFunction_MathDoubleMax) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoubleMax");
static_assert(sizeof(FRigVMFunction_MathDoubleMax) == 0x000020, "Wrong size on FRigVMFunction_MathDoubleMax");

// ScriptStruct RigVM.RigVMFunction_MathDoublePow
// 0x0000 (0x0020 - 0x0020)
struct FRigVMFunction_MathDoublePow final : public FRigVMFunction_MathDoubleBinaryOp
{
};
static_assert(alignof(FRigVMFunction_MathDoublePow) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoublePow");
static_assert(sizeof(FRigVMFunction_MathDoublePow) == 0x000020, "Wrong size on FRigVMFunction_MathDoublePow");

// ScriptStruct RigVM.RigVMFunction_MathDoubleSqrt
// 0x0000 (0x0018 - 0x0018)
struct FRigVMFunction_MathDoubleSqrt final : public FRigVMFunction_MathDoubleUnaryOp
{
};
static_assert(alignof(FRigVMFunction_MathDoubleSqrt) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoubleSqrt");
static_assert(sizeof(FRigVMFunction_MathDoubleSqrt) == 0x000018, "Wrong size on FRigVMFunction_MathDoubleSqrt");

// ScriptStruct RigVM.RigVMFunction_MathMatrixUnaryOp
// 0x0108 (0x0110 - 0x0008)
struct FRigVMFunction_MathMatrixUnaryOp : public FRigVMFunction_MathMatrixBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatrix                                Value;                                             // 0x0010(0x0080)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMatrix                                Result;                                            // 0x0090(0x0080)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathMatrixUnaryOp) == 0x000010, "Wrong alignment on FRigVMFunction_MathMatrixUnaryOp");
static_assert(sizeof(FRigVMFunction_MathMatrixUnaryOp) == 0x000110, "Wrong size on FRigVMFunction_MathMatrixUnaryOp");
static_assert(offsetof(FRigVMFunction_MathMatrixUnaryOp, Value) == 0x000010, "Member 'FRigVMFunction_MathMatrixUnaryOp::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathMatrixUnaryOp, Result) == 0x000090, "Member 'FRigVMFunction_MathMatrixUnaryOp::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathMatrixInverse
// 0x0000 (0x0110 - 0x0110)
struct FRigVMFunction_MathMatrixInverse final : public FRigVMFunction_MathMatrixUnaryOp
{
};
static_assert(alignof(FRigVMFunction_MathMatrixInverse) == 0x000010, "Wrong alignment on FRigVMFunction_MathMatrixInverse");
static_assert(sizeof(FRigVMFunction_MathMatrixInverse) == 0x000110, "Wrong size on FRigVMFunction_MathMatrixInverse");

// ScriptStruct RigVM.RigVMFunction_MathDoubleNegate
// 0x0000 (0x0018 - 0x0018)
struct FRigVMFunction_MathDoubleNegate final : public FRigVMFunction_MathDoubleUnaryOp
{
};
static_assert(alignof(FRigVMFunction_MathDoubleNegate) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoubleNegate");
static_assert(sizeof(FRigVMFunction_MathDoubleNegate) == 0x000018, "Wrong size on FRigVMFunction_MathDoubleNegate");

// ScriptStruct RigVM.RigVMFunction_MathDoubleAbs
// 0x0000 (0x0018 - 0x0018)
struct FRigVMFunction_MathDoubleAbs final : public FRigVMFunction_MathDoubleUnaryOp
{
};
static_assert(alignof(FRigVMFunction_MathDoubleAbs) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoubleAbs");
static_assert(sizeof(FRigVMFunction_MathDoubleAbs) == 0x000018, "Wrong size on FRigVMFunction_MathDoubleAbs");

// ScriptStruct RigVM.RigVMFunction_MathQuaternionFromTwoVectors
// 0x0058 (0x0060 - 0x0008)
struct FRigVMFunction_MathQuaternionFromTwoVectors final : public FRigVMFunction_MathQuaternionBase
{
public:
	struct FVector                                A;                                                 // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                B;                                                 // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Result;                                            // 0x0040(0x0020)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathQuaternionFromTwoVectors) == 0x000010, "Wrong alignment on FRigVMFunction_MathQuaternionFromTwoVectors");
static_assert(sizeof(FRigVMFunction_MathQuaternionFromTwoVectors) == 0x000060, "Wrong size on FRigVMFunction_MathQuaternionFromTwoVectors");
static_assert(offsetof(FRigVMFunction_MathQuaternionFromTwoVectors, A) == 0x000008, "Member 'FRigVMFunction_MathQuaternionFromTwoVectors::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionFromTwoVectors, B) == 0x000020, "Member 'FRigVMFunction_MathQuaternionFromTwoVectors::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionFromTwoVectors, Result) == 0x000040, "Member 'FRigVMFunction_MathQuaternionFromTwoVectors::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathDoubleFloor
// 0x0018 (0x0020 - 0x0008)
struct FRigVMFunction_MathDoubleFloor final : public FRigVMFunction_MathDoubleBase
{
public:
	double                                        Value;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Result;                                            // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Int;                                               // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathDoubleFloor) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoubleFloor");
static_assert(sizeof(FRigVMFunction_MathDoubleFloor) == 0x000020, "Wrong size on FRigVMFunction_MathDoubleFloor");
static_assert(offsetof(FRigVMFunction_MathDoubleFloor, Value) == 0x000008, "Member 'FRigVMFunction_MathDoubleFloor::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDoubleFloor, Result) == 0x000010, "Member 'FRigVMFunction_MathDoubleFloor::Result' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDoubleFloor, Int) == 0x000018, "Member 'FRigVMFunction_MathDoubleFloor::Int' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathDoubleCeil
// 0x0018 (0x0020 - 0x0008)
struct FRigVMFunction_MathDoubleCeil final : public FRigVMFunction_MathDoubleBase
{
public:
	double                                        Value;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Result;                                            // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Int;                                               // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathDoubleCeil) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoubleCeil");
static_assert(sizeof(FRigVMFunction_MathDoubleCeil) == 0x000020, "Wrong size on FRigVMFunction_MathDoubleCeil");
static_assert(offsetof(FRigVMFunction_MathDoubleCeil, Value) == 0x000008, "Member 'FRigVMFunction_MathDoubleCeil::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDoubleCeil, Result) == 0x000010, "Member 'FRigVMFunction_MathDoubleCeil::Result' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDoubleCeil, Int) == 0x000018, "Member 'FRigVMFunction_MathDoubleCeil::Int' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathQuaternionBinaryAggregateOp
// 0x0068 (0x0070 - 0x0008)
struct FRigVMFunction_MathQuaternionBinaryAggregateOp : public FRigVMFunction_MathQuaternionBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  A;                                                 // 0x0010(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  B;                                                 // 0x0030(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  Result;                                            // 0x0050(0x0020)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathQuaternionBinaryAggregateOp) == 0x000010, "Wrong alignment on FRigVMFunction_MathQuaternionBinaryAggregateOp");
static_assert(sizeof(FRigVMFunction_MathQuaternionBinaryAggregateOp) == 0x000070, "Wrong size on FRigVMFunction_MathQuaternionBinaryAggregateOp");
static_assert(offsetof(FRigVMFunction_MathQuaternionBinaryAggregateOp, A) == 0x000010, "Member 'FRigVMFunction_MathQuaternionBinaryAggregateOp::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionBinaryAggregateOp, B) == 0x000030, "Member 'FRigVMFunction_MathQuaternionBinaryAggregateOp::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionBinaryAggregateOp, Result) == 0x000050, "Member 'FRigVMFunction_MathQuaternionBinaryAggregateOp::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathDoubleRound
// 0x0018 (0x0020 - 0x0008)
struct FRigVMFunction_MathDoubleRound final : public FRigVMFunction_MathDoubleBase
{
public:
	double                                        Value;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Result;                                            // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Int;                                               // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathDoubleRound) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoubleRound");
static_assert(sizeof(FRigVMFunction_MathDoubleRound) == 0x000020, "Wrong size on FRigVMFunction_MathDoubleRound");
static_assert(offsetof(FRigVMFunction_MathDoubleRound, Value) == 0x000008, "Member 'FRigVMFunction_MathDoubleRound::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDoubleRound, Result) == 0x000010, "Member 'FRigVMFunction_MathDoubleRound::Result' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDoubleRound, Int) == 0x000018, "Member 'FRigVMFunction_MathDoubleRound::Int' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathDoubleToInt
// 0x0010 (0x0018 - 0x0008)
struct FRigVMFunction_MathDoubleToInt final : public FRigVMFunction_MathDoubleBase
{
public:
	double                                        Value;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Result;                                            // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathDoubleToInt) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoubleToInt");
static_assert(sizeof(FRigVMFunction_MathDoubleToInt) == 0x000018, "Wrong size on FRigVMFunction_MathDoubleToInt");
static_assert(offsetof(FRigVMFunction_MathDoubleToInt, Value) == 0x000008, "Member 'FRigVMFunction_MathDoubleToInt::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDoubleToInt, Result) == 0x000010, "Member 'FRigVMFunction_MathDoubleToInt::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathMatrixFromVectors
// 0x00E8 (0x00F0 - 0x0008)
struct FRigVMFunction_MathMatrixFromVectors final : public FRigVMFunction_MathMatrixBase
{
public:
	struct FVector                                Origin;                                            // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                X;                                                 // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Y;                                                 // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Z;                                                 // 0x0050(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatrix                                Result;                                            // 0x0070(0x0080)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathMatrixFromVectors) == 0x000010, "Wrong alignment on FRigVMFunction_MathMatrixFromVectors");
static_assert(sizeof(FRigVMFunction_MathMatrixFromVectors) == 0x0000F0, "Wrong size on FRigVMFunction_MathMatrixFromVectors");
static_assert(offsetof(FRigVMFunction_MathMatrixFromVectors, Origin) == 0x000008, "Member 'FRigVMFunction_MathMatrixFromVectors::Origin' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathMatrixFromVectors, X) == 0x000020, "Member 'FRigVMFunction_MathMatrixFromVectors::X' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathMatrixFromVectors, Y) == 0x000038, "Member 'FRigVMFunction_MathMatrixFromVectors::Y' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathMatrixFromVectors, Z) == 0x000050, "Member 'FRigVMFunction_MathMatrixFromVectors::Z' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathMatrixFromVectors, Result) == 0x000070, "Member 'FRigVMFunction_MathMatrixFromVectors::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathDoubleSign
// 0x0000 (0x0018 - 0x0018)
struct FRigVMFunction_MathDoubleSign final : public FRigVMFunction_MathDoubleUnaryOp
{
};
static_assert(alignof(FRigVMFunction_MathDoubleSign) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoubleSign");
static_assert(sizeof(FRigVMFunction_MathDoubleSign) == 0x000018, "Wrong size on FRigVMFunction_MathDoubleSign");

// ScriptStruct RigVM.RigVMFunction_MathDoubleClamp
// 0x0020 (0x0028 - 0x0008)
struct FRigVMFunction_MathDoubleClamp final : public FRigVMFunction_MathDoubleBase
{
public:
	double                                        Value;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Minimum;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Maximum;                                           // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Result;                                            // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathDoubleClamp) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoubleClamp");
static_assert(sizeof(FRigVMFunction_MathDoubleClamp) == 0x000028, "Wrong size on FRigVMFunction_MathDoubleClamp");
static_assert(offsetof(FRigVMFunction_MathDoubleClamp, Value) == 0x000008, "Member 'FRigVMFunction_MathDoubleClamp::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDoubleClamp, Minimum) == 0x000010, "Member 'FRigVMFunction_MathDoubleClamp::Minimum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDoubleClamp, Maximum) == 0x000018, "Member 'FRigVMFunction_MathDoubleClamp::Maximum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDoubleClamp, Result) == 0x000020, "Member 'FRigVMFunction_MathDoubleClamp::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathDoubleLerp
// 0x0020 (0x0028 - 0x0008)
struct FRigVMFunction_MathDoubleLerp final : public FRigVMFunction_MathDoubleBase
{
public:
	double                                        A;                                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        B;                                                 // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        T;                                                 // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Result;                                            // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathDoubleLerp) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoubleLerp");
static_assert(sizeof(FRigVMFunction_MathDoubleLerp) == 0x000028, "Wrong size on FRigVMFunction_MathDoubleLerp");
static_assert(offsetof(FRigVMFunction_MathDoubleLerp, A) == 0x000008, "Member 'FRigVMFunction_MathDoubleLerp::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDoubleLerp, B) == 0x000010, "Member 'FRigVMFunction_MathDoubleLerp::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDoubleLerp, T) == 0x000018, "Member 'FRigVMFunction_MathDoubleLerp::T' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDoubleLerp, Result) == 0x000020, "Member 'FRigVMFunction_MathDoubleLerp::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathDoubleRemap
// 0x0038 (0x0040 - 0x0008)
struct FRigVMFunction_MathDoubleRemap final : public FRigVMFunction_MathDoubleBase
{
public:
	double                                        Value;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SourceMinimum;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SourceMaximum;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        TargetMinimum;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        TargetMaximum;                                     // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClamp;                                            // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Result;                                            // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathDoubleRemap) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoubleRemap");
static_assert(sizeof(FRigVMFunction_MathDoubleRemap) == 0x000040, "Wrong size on FRigVMFunction_MathDoubleRemap");
static_assert(offsetof(FRigVMFunction_MathDoubleRemap, Value) == 0x000008, "Member 'FRigVMFunction_MathDoubleRemap::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDoubleRemap, SourceMinimum) == 0x000010, "Member 'FRigVMFunction_MathDoubleRemap::SourceMinimum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDoubleRemap, SourceMaximum) == 0x000018, "Member 'FRigVMFunction_MathDoubleRemap::SourceMaximum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDoubleRemap, TargetMinimum) == 0x000020, "Member 'FRigVMFunction_MathDoubleRemap::TargetMinimum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDoubleRemap, TargetMaximum) == 0x000028, "Member 'FRigVMFunction_MathDoubleRemap::TargetMaximum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDoubleRemap, bClamp) == 0x000030, "Member 'FRigVMFunction_MathDoubleRemap::bClamp' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDoubleRemap, Result) == 0x000038, "Member 'FRigVMFunction_MathDoubleRemap::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathQuaternionInverse
// 0x0000 (0x0050 - 0x0050)
struct FRigVMFunction_MathQuaternionInverse final : public FRigVMFunction_MathQuaternionUnaryOp
{
};
static_assert(alignof(FRigVMFunction_MathQuaternionInverse) == 0x000010, "Wrong alignment on FRigVMFunction_MathQuaternionInverse");
static_assert(sizeof(FRigVMFunction_MathQuaternionInverse) == 0x000050, "Wrong size on FRigVMFunction_MathQuaternionInverse");

// ScriptStruct RigVM.RigVMFunction_MathDoubleEquals
// 0x0018 (0x0020 - 0x0008)
struct FRigVMFunction_MathDoubleEquals final : public FRigVMFunction_MathDoubleBase
{
public:
	double                                        A;                                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        B;                                                 // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathDoubleEquals) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoubleEquals");
static_assert(sizeof(FRigVMFunction_MathDoubleEquals) == 0x000020, "Wrong size on FRigVMFunction_MathDoubleEquals");
static_assert(offsetof(FRigVMFunction_MathDoubleEquals, A) == 0x000008, "Member 'FRigVMFunction_MathDoubleEquals::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDoubleEquals, B) == 0x000010, "Member 'FRigVMFunction_MathDoubleEquals::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDoubleEquals, Result) == 0x000018, "Member 'FRigVMFunction_MathDoubleEquals::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathDoubleNotEquals
// 0x0018 (0x0020 - 0x0008)
struct FRigVMFunction_MathDoubleNotEquals final : public FRigVMFunction_MathDoubleBase
{
public:
	double                                        A;                                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        B;                                                 // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathDoubleNotEquals) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoubleNotEquals");
static_assert(sizeof(FRigVMFunction_MathDoubleNotEquals) == 0x000020, "Wrong size on FRigVMFunction_MathDoubleNotEquals");
static_assert(offsetof(FRigVMFunction_MathDoubleNotEquals, A) == 0x000008, "Member 'FRigVMFunction_MathDoubleNotEquals::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDoubleNotEquals, B) == 0x000010, "Member 'FRigVMFunction_MathDoubleNotEquals::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDoubleNotEquals, Result) == 0x000018, "Member 'FRigVMFunction_MathDoubleNotEquals::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathDoubleGreater
// 0x0018 (0x0020 - 0x0008)
struct FRigVMFunction_MathDoubleGreater final : public FRigVMFunction_MathDoubleBase
{
public:
	double                                        A;                                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        B;                                                 // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathDoubleGreater) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoubleGreater");
static_assert(sizeof(FRigVMFunction_MathDoubleGreater) == 0x000020, "Wrong size on FRigVMFunction_MathDoubleGreater");
static_assert(offsetof(FRigVMFunction_MathDoubleGreater, A) == 0x000008, "Member 'FRigVMFunction_MathDoubleGreater::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDoubleGreater, B) == 0x000010, "Member 'FRigVMFunction_MathDoubleGreater::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDoubleGreater, Result) == 0x000018, "Member 'FRigVMFunction_MathDoubleGreater::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathDoubleLess
// 0x0018 (0x0020 - 0x0008)
struct FRigVMFunction_MathDoubleLess final : public FRigVMFunction_MathDoubleBase
{
public:
	double                                        A;                                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        B;                                                 // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathDoubleLess) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoubleLess");
static_assert(sizeof(FRigVMFunction_MathDoubleLess) == 0x000020, "Wrong size on FRigVMFunction_MathDoubleLess");
static_assert(offsetof(FRigVMFunction_MathDoubleLess, A) == 0x000008, "Member 'FRigVMFunction_MathDoubleLess::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDoubleLess, B) == 0x000010, "Member 'FRigVMFunction_MathDoubleLess::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDoubleLess, Result) == 0x000018, "Member 'FRigVMFunction_MathDoubleLess::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathDoubleGreaterEqual
// 0x0018 (0x0020 - 0x0008)
struct FRigVMFunction_MathDoubleGreaterEqual final : public FRigVMFunction_MathDoubleBase
{
public:
	double                                        A;                                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        B;                                                 // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathDoubleGreaterEqual) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoubleGreaterEqual");
static_assert(sizeof(FRigVMFunction_MathDoubleGreaterEqual) == 0x000020, "Wrong size on FRigVMFunction_MathDoubleGreaterEqual");
static_assert(offsetof(FRigVMFunction_MathDoubleGreaterEqual, A) == 0x000008, "Member 'FRigVMFunction_MathDoubleGreaterEqual::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDoubleGreaterEqual, B) == 0x000010, "Member 'FRigVMFunction_MathDoubleGreaterEqual::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDoubleGreaterEqual, Result) == 0x000018, "Member 'FRigVMFunction_MathDoubleGreaterEqual::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathDoubleLessEqual
// 0x0018 (0x0020 - 0x0008)
struct FRigVMFunction_MathDoubleLessEqual final : public FRigVMFunction_MathDoubleBase
{
public:
	double                                        A;                                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        B;                                                 // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathDoubleLessEqual) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoubleLessEqual");
static_assert(sizeof(FRigVMFunction_MathDoubleLessEqual) == 0x000020, "Wrong size on FRigVMFunction_MathDoubleLessEqual");
static_assert(offsetof(FRigVMFunction_MathDoubleLessEqual, A) == 0x000008, "Member 'FRigVMFunction_MathDoubleLessEqual::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDoubleLessEqual, B) == 0x000010, "Member 'FRigVMFunction_MathDoubleLessEqual::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDoubleLessEqual, Result) == 0x000018, "Member 'FRigVMFunction_MathDoubleLessEqual::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathQuaternionToRotator
// 0x0048 (0x0050 - 0x0008)
struct FRigVMFunction_MathQuaternionToRotator final : public FRigVMFunction_MathQuaternionBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Value;                                             // 0x0010(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Result;                                            // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathQuaternionToRotator) == 0x000010, "Wrong alignment on FRigVMFunction_MathQuaternionToRotator");
static_assert(sizeof(FRigVMFunction_MathQuaternionToRotator) == 0x000050, "Wrong size on FRigVMFunction_MathQuaternionToRotator");
static_assert(offsetof(FRigVMFunction_MathQuaternionToRotator, Value) == 0x000010, "Member 'FRigVMFunction_MathQuaternionToRotator::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionToRotator, Result) == 0x000030, "Member 'FRigVMFunction_MathQuaternionToRotator::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathDoubleIsNearlyZero
// 0x0018 (0x0020 - 0x0008)
struct FRigVMFunction_MathDoubleIsNearlyZero final : public FRigVMFunction_MathDoubleBase
{
public:
	double                                        Value;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Tolerance;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathDoubleIsNearlyZero) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoubleIsNearlyZero");
static_assert(sizeof(FRigVMFunction_MathDoubleIsNearlyZero) == 0x000020, "Wrong size on FRigVMFunction_MathDoubleIsNearlyZero");
static_assert(offsetof(FRigVMFunction_MathDoubleIsNearlyZero, Value) == 0x000008, "Member 'FRigVMFunction_MathDoubleIsNearlyZero::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDoubleIsNearlyZero, Tolerance) == 0x000010, "Member 'FRigVMFunction_MathDoubleIsNearlyZero::Tolerance' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDoubleIsNearlyZero, Result) == 0x000018, "Member 'FRigVMFunction_MathDoubleIsNearlyZero::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathDoubleIsNearlyEqual
// 0x0020 (0x0028 - 0x0008)
struct FRigVMFunction_MathDoubleIsNearlyEqual final : public FRigVMFunction_MathDoubleBase
{
public:
	double                                        A;                                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        B;                                                 // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Tolerance;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathDoubleIsNearlyEqual) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoubleIsNearlyEqual");
static_assert(sizeof(FRigVMFunction_MathDoubleIsNearlyEqual) == 0x000028, "Wrong size on FRigVMFunction_MathDoubleIsNearlyEqual");
static_assert(offsetof(FRigVMFunction_MathDoubleIsNearlyEqual, A) == 0x000008, "Member 'FRigVMFunction_MathDoubleIsNearlyEqual::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDoubleIsNearlyEqual, B) == 0x000010, "Member 'FRigVMFunction_MathDoubleIsNearlyEqual::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDoubleIsNearlyEqual, Tolerance) == 0x000018, "Member 'FRigVMFunction_MathDoubleIsNearlyEqual::Tolerance' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDoubleIsNearlyEqual, Result) == 0x000020, "Member 'FRigVMFunction_MathDoubleIsNearlyEqual::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathQuaternionGetAxis
// 0x0048 (0x0050 - 0x0008)
struct FRigVMFunction_MathQuaternionGetAxis final : public FRigVMFunction_MathQuaternionBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Quaternion;                                        // 0x0010(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         Axis;                                              // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Result;                                            // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathQuaternionGetAxis) == 0x000010, "Wrong alignment on FRigVMFunction_MathQuaternionGetAxis");
static_assert(sizeof(FRigVMFunction_MathQuaternionGetAxis) == 0x000050, "Wrong size on FRigVMFunction_MathQuaternionGetAxis");
static_assert(offsetof(FRigVMFunction_MathQuaternionGetAxis, Quaternion) == 0x000010, "Member 'FRigVMFunction_MathQuaternionGetAxis::Quaternion' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionGetAxis, Axis) == 0x000030, "Member 'FRigVMFunction_MathQuaternionGetAxis::Axis' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionGetAxis, Result) == 0x000038, "Member 'FRigVMFunction_MathQuaternionGetAxis::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathDoubleDeg
// 0x0000 (0x0018 - 0x0018)
struct FRigVMFunction_MathDoubleDeg final : public FRigVMFunction_MathDoubleUnaryOp
{
};
static_assert(alignof(FRigVMFunction_MathDoubleDeg) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoubleDeg");
static_assert(sizeof(FRigVMFunction_MathDoubleDeg) == 0x000018, "Wrong size on FRigVMFunction_MathDoubleDeg");

// ScriptStruct RigVM.RigVMFunction_MathDoubleRad
// 0x0000 (0x0018 - 0x0018)
struct FRigVMFunction_MathDoubleRad final : public FRigVMFunction_MathDoubleUnaryOp
{
};
static_assert(alignof(FRigVMFunction_MathDoubleRad) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoubleRad");
static_assert(sizeof(FRigVMFunction_MathDoubleRad) == 0x000018, "Wrong size on FRigVMFunction_MathDoubleRad");

// ScriptStruct RigVM.RigVMFunction_MathQuaternionEquals
// 0x0058 (0x0060 - 0x0008)
struct FRigVMFunction_MathQuaternionEquals final : public FRigVMFunction_MathQuaternionBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  A;                                                 // 0x0010(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  B;                                                 // 0x0030(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0050(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0xF];                                       // 0x0051(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathQuaternionEquals) == 0x000010, "Wrong alignment on FRigVMFunction_MathQuaternionEquals");
static_assert(sizeof(FRigVMFunction_MathQuaternionEquals) == 0x000060, "Wrong size on FRigVMFunction_MathQuaternionEquals");
static_assert(offsetof(FRigVMFunction_MathQuaternionEquals, A) == 0x000010, "Member 'FRigVMFunction_MathQuaternionEquals::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionEquals, B) == 0x000030, "Member 'FRigVMFunction_MathQuaternionEquals::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionEquals, Result) == 0x000050, "Member 'FRigVMFunction_MathQuaternionEquals::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathDoubleSin
// 0x0000 (0x0018 - 0x0018)
struct FRigVMFunction_MathDoubleSin final : public FRigVMFunction_MathDoubleUnaryOp
{
};
static_assert(alignof(FRigVMFunction_MathDoubleSin) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoubleSin");
static_assert(sizeof(FRigVMFunction_MathDoubleSin) == 0x000018, "Wrong size on FRigVMFunction_MathDoubleSin");

// ScriptStruct RigVM.RigVMFunction_MathDoubleCos
// 0x0000 (0x0018 - 0x0018)
struct FRigVMFunction_MathDoubleCos final : public FRigVMFunction_MathDoubleUnaryOp
{
};
static_assert(alignof(FRigVMFunction_MathDoubleCos) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoubleCos");
static_assert(sizeof(FRigVMFunction_MathDoubleCos) == 0x000018, "Wrong size on FRigVMFunction_MathDoubleCos");

// ScriptStruct RigVM.RigVMFunction_MathQuaternionScaleV2
// 0x0058 (0x0060 - 0x0008)
struct FRigVMFunction_MathQuaternionScaleV2 final : public FRigVMFunction_MathQuaternionBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Value;                                             // 0x0010(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Factor;                                            // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0xC];                                       // 0x0034(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Result;                                            // 0x0040(0x0020)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathQuaternionScaleV2) == 0x000010, "Wrong alignment on FRigVMFunction_MathQuaternionScaleV2");
static_assert(sizeof(FRigVMFunction_MathQuaternionScaleV2) == 0x000060, "Wrong size on FRigVMFunction_MathQuaternionScaleV2");
static_assert(offsetof(FRigVMFunction_MathQuaternionScaleV2, Value) == 0x000010, "Member 'FRigVMFunction_MathQuaternionScaleV2::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionScaleV2, Factor) == 0x000030, "Member 'FRigVMFunction_MathQuaternionScaleV2::Factor' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionScaleV2, Result) == 0x000040, "Member 'FRigVMFunction_MathQuaternionScaleV2::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathDoubleTan
// 0x0000 (0x0018 - 0x0018)
struct FRigVMFunction_MathDoubleTan final : public FRigVMFunction_MathDoubleUnaryOp
{
};
static_assert(alignof(FRigVMFunction_MathDoubleTan) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoubleTan");
static_assert(sizeof(FRigVMFunction_MathDoubleTan) == 0x000018, "Wrong size on FRigVMFunction_MathDoubleTan");

// ScriptStruct RigVM.RigVMFunction_MathDoubleAsin
// 0x0000 (0x0018 - 0x0018)
struct FRigVMFunction_MathDoubleAsin final : public FRigVMFunction_MathDoubleUnaryOp
{
};
static_assert(alignof(FRigVMFunction_MathDoubleAsin) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoubleAsin");
static_assert(sizeof(FRigVMFunction_MathDoubleAsin) == 0x000018, "Wrong size on FRigVMFunction_MathDoubleAsin");

// ScriptStruct RigVM.RigVMFunction_MathQuaternionUnit
// 0x0000 (0x0050 - 0x0050)
struct FRigVMFunction_MathQuaternionUnit final : public FRigVMFunction_MathQuaternionUnaryOp
{
};
static_assert(alignof(FRigVMFunction_MathQuaternionUnit) == 0x000010, "Wrong alignment on FRigVMFunction_MathQuaternionUnit");
static_assert(sizeof(FRigVMFunction_MathQuaternionUnit) == 0x000050, "Wrong size on FRigVMFunction_MathQuaternionUnit");

// ScriptStruct RigVM.RigVMFunction_MathDoubleAcos
// 0x0000 (0x0018 - 0x0018)
struct FRigVMFunction_MathDoubleAcos final : public FRigVMFunction_MathDoubleUnaryOp
{
};
static_assert(alignof(FRigVMFunction_MathDoubleAcos) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoubleAcos");
static_assert(sizeof(FRigVMFunction_MathDoubleAcos) == 0x000018, "Wrong size on FRigVMFunction_MathDoubleAcos");

// ScriptStruct RigVM.RigVMFunction_MathDoubleAtan
// 0x0000 (0x0018 - 0x0018)
struct FRigVMFunction_MathDoubleAtan final : public FRigVMFunction_MathDoubleUnaryOp
{
};
static_assert(alignof(FRigVMFunction_MathDoubleAtan) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoubleAtan");
static_assert(sizeof(FRigVMFunction_MathDoubleAtan) == 0x000018, "Wrong size on FRigVMFunction_MathDoubleAtan");

// ScriptStruct RigVM.RigVMFunction_MathRayBase
// 0x0000 (0x0008 - 0x0008)
struct FRigVMFunction_MathRayBase : public FRigVMFunction_MathBase
{
};
static_assert(alignof(FRigVMFunction_MathRayBase) == 0x000008, "Wrong alignment on FRigVMFunction_MathRayBase");
static_assert(sizeof(FRigVMFunction_MathRayBase) == 0x000008, "Wrong size on FRigVMFunction_MathRayBase");

// ScriptStruct RigVM.RigVMFunction_MathRayIntersectPlane
// 0x0080 (0x0088 - 0x0008)
struct FRigVMFunction_MathRayIntersectPlane final : public FRigVMFunction_MathRayBase
{
public:
	struct FRay                                   Ray;                                               // 0x0008(0x0030)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                PlanePoint;                                        // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PlaneNormal;                                       // 0x0050(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Result;                                            // 0x0068(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0080(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ratio;                                             // 0x0084(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathRayIntersectPlane) == 0x000008, "Wrong alignment on FRigVMFunction_MathRayIntersectPlane");
static_assert(sizeof(FRigVMFunction_MathRayIntersectPlane) == 0x000088, "Wrong size on FRigVMFunction_MathRayIntersectPlane");
static_assert(offsetof(FRigVMFunction_MathRayIntersectPlane, Ray) == 0x000008, "Member 'FRigVMFunction_MathRayIntersectPlane::Ray' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathRayIntersectPlane, PlanePoint) == 0x000038, "Member 'FRigVMFunction_MathRayIntersectPlane::PlanePoint' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathRayIntersectPlane, PlaneNormal) == 0x000050, "Member 'FRigVMFunction_MathRayIntersectPlane::PlaneNormal' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathRayIntersectPlane, Result) == 0x000068, "Member 'FRigVMFunction_MathRayIntersectPlane::Result' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathRayIntersectPlane, Distance) == 0x000080, "Member 'FRigVMFunction_MathRayIntersectPlane::Distance' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathRayIntersectPlane, Ratio) == 0x000084, "Member 'FRigVMFunction_MathRayIntersectPlane::Ratio' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathDoubleAtan2
// 0x0000 (0x0020 - 0x0020)
struct FRigVMFunction_MathDoubleAtan2 final : public FRigVMFunction_MathDoubleBinaryOp
{
};
static_assert(alignof(FRigVMFunction_MathDoubleAtan2) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoubleAtan2");
static_assert(sizeof(FRigVMFunction_MathDoubleAtan2) == 0x000020, "Wrong size on FRigVMFunction_MathDoubleAtan2");

// ScriptStruct RigVM.RigVMFunction_MathDoubleLawOfCosine
// 0x0038 (0x0040 - 0x0008)
struct FRigVMFunction_MathDoubleLawOfCosine final : public FRigVMFunction_MathDoubleBase
{
public:
	double                                        A;                                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        B;                                                 // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        C;                                                 // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        AlphaAngle;                                        // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        BetaAngle;                                         // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        GammaAngle;                                        // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValid;                                            // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathDoubleLawOfCosine) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoubleLawOfCosine");
static_assert(sizeof(FRigVMFunction_MathDoubleLawOfCosine) == 0x000040, "Wrong size on FRigVMFunction_MathDoubleLawOfCosine");
static_assert(offsetof(FRigVMFunction_MathDoubleLawOfCosine, A) == 0x000008, "Member 'FRigVMFunction_MathDoubleLawOfCosine::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDoubleLawOfCosine, B) == 0x000010, "Member 'FRigVMFunction_MathDoubleLawOfCosine::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDoubleLawOfCosine, C) == 0x000018, "Member 'FRigVMFunction_MathDoubleLawOfCosine::C' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDoubleLawOfCosine, AlphaAngle) == 0x000020, "Member 'FRigVMFunction_MathDoubleLawOfCosine::AlphaAngle' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDoubleLawOfCosine, BetaAngle) == 0x000028, "Member 'FRigVMFunction_MathDoubleLawOfCosine::BetaAngle' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDoubleLawOfCosine, GammaAngle) == 0x000030, "Member 'FRigVMFunction_MathDoubleLawOfCosine::GammaAngle' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDoubleLawOfCosine, bValid) == 0x000038, "Member 'FRigVMFunction_MathDoubleLawOfCosine::bValid' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathQuaternionRotationOrder
// 0x0008 (0x0010 - 0x0008)
struct FRigVMFunction_MathQuaternionRotationOrder final : public FRigVMFunction_MathBase
{
public:
	EEulerRotationOrder                           RotationOrder;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathQuaternionRotationOrder) == 0x000008, "Wrong alignment on FRigVMFunction_MathQuaternionRotationOrder");
static_assert(sizeof(FRigVMFunction_MathQuaternionRotationOrder) == 0x000010, "Wrong size on FRigVMFunction_MathQuaternionRotationOrder");
static_assert(offsetof(FRigVMFunction_MathQuaternionRotationOrder, RotationOrder) == 0x000008, "Member 'FRigVMFunction_MathQuaternionRotationOrder::RotationOrder' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathDoubleExponential
// 0x0000 (0x0018 - 0x0018)
struct FRigVMFunction_MathDoubleExponential final : public FRigVMFunction_MathDoubleUnaryOp
{
};
static_assert(alignof(FRigVMFunction_MathDoubleExponential) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoubleExponential");
static_assert(sizeof(FRigVMFunction_MathDoubleExponential) == 0x000018, "Wrong size on FRigVMFunction_MathDoubleExponential");

// ScriptStruct RigVM.RigVMFunction_MathDoubleArraySum
// 0x0018 (0x0020 - 0x0008)
struct FRigVMFunction_MathDoubleArraySum final : public FRigVMFunction_MathDoubleBase
{
public:
	TArray<double>                                Array;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	double                                        Sum;                                               // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathDoubleArraySum) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoubleArraySum");
static_assert(sizeof(FRigVMFunction_MathDoubleArraySum) == 0x000020, "Wrong size on FRigVMFunction_MathDoubleArraySum");
static_assert(offsetof(FRigVMFunction_MathDoubleArraySum, Array) == 0x000008, "Member 'FRigVMFunction_MathDoubleArraySum::Array' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDoubleArraySum, Sum) == 0x000018, "Member 'FRigVMFunction_MathDoubleArraySum::Sum' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathQuaternionSelectBool
// 0x0068 (0x0070 - 0x0008)
struct FRigVMFunction_MathQuaternionSelectBool final : public FRigVMFunction_MathQuaternionBase
{
public:
	bool                                          Condition;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  IfTrue;                                            // 0x0010(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  IfFalse;                                           // 0x0030(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  Result;                                            // 0x0050(0x0020)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathQuaternionSelectBool) == 0x000010, "Wrong alignment on FRigVMFunction_MathQuaternionSelectBool");
static_assert(sizeof(FRigVMFunction_MathQuaternionSelectBool) == 0x000070, "Wrong size on FRigVMFunction_MathQuaternionSelectBool");
static_assert(offsetof(FRigVMFunction_MathQuaternionSelectBool, Condition) == 0x000008, "Member 'FRigVMFunction_MathQuaternionSelectBool::Condition' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionSelectBool, IfTrue) == 0x000010, "Member 'FRigVMFunction_MathQuaternionSelectBool::IfTrue' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionSelectBool, IfFalse) == 0x000030, "Member 'FRigVMFunction_MathQuaternionSelectBool::IfFalse' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionSelectBool, Result) == 0x000050, "Member 'FRigVMFunction_MathQuaternionSelectBool::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathDoubleArrayAverage
// 0x0018 (0x0020 - 0x0008)
struct FRigVMFunction_MathDoubleArrayAverage final : public FRigVMFunction_MathDoubleBase
{
public:
	TArray<double>                                Array;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	double                                        Average;                                           // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathDoubleArrayAverage) == 0x000008, "Wrong alignment on FRigVMFunction_MathDoubleArrayAverage");
static_assert(sizeof(FRigVMFunction_MathDoubleArrayAverage) == 0x000020, "Wrong size on FRigVMFunction_MathDoubleArrayAverage");
static_assert(offsetof(FRigVMFunction_MathDoubleArrayAverage, Array) == 0x000008, "Member 'FRigVMFunction_MathDoubleArrayAverage::Array' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDoubleArrayAverage, Average) == 0x000018, "Member 'FRigVMFunction_MathDoubleArrayAverage::Average' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathFloatConstant
// 0x0008 (0x0010 - 0x0008)
struct FRigVMFunction_MathFloatConstant : public FRigVMFunction_MathFloatBase
{
public:
	float                                         Value;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathFloatConstant) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatConstant");
static_assert(sizeof(FRigVMFunction_MathFloatConstant) == 0x000010, "Wrong size on FRigVMFunction_MathFloatConstant");
static_assert(offsetof(FRigVMFunction_MathFloatConstant, Value) == 0x000008, "Member 'FRigVMFunction_MathFloatConstant::Value' has a wrong offset!");

// ScriptStruct RigVM.MathRBFInterpolateQuatFloat_Target
// 0x0030 (0x0030 - 0x0000)
struct FMathRBFInterpolateQuatFloat_Target final
{
public:
	struct FQuat                                  Target;                                            // 0x0000(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0xC];                                       // 0x0024(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMathRBFInterpolateQuatFloat_Target) == 0x000010, "Wrong alignment on FMathRBFInterpolateQuatFloat_Target");
static_assert(sizeof(FMathRBFInterpolateQuatFloat_Target) == 0x000030, "Wrong size on FMathRBFInterpolateQuatFloat_Target");
static_assert(offsetof(FMathRBFInterpolateQuatFloat_Target, Target) == 0x000000, "Member 'FMathRBFInterpolateQuatFloat_Target::Target' has a wrong offset!");
static_assert(offsetof(FMathRBFInterpolateQuatFloat_Target, Value) == 0x000020, "Member 'FMathRBFInterpolateQuatFloat_Target::Value' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathFloatBinaryAggregateOp
// 0x0010 (0x0018 - 0x0008)
struct FRigVMFunction_MathFloatBinaryAggregateOp : public FRigVMFunction_MathFloatBase
{
public:
	float                                         A;                                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         B;                                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Result;                                            // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathFloatBinaryAggregateOp) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatBinaryAggregateOp");
static_assert(sizeof(FRigVMFunction_MathFloatBinaryAggregateOp) == 0x000018, "Wrong size on FRigVMFunction_MathFloatBinaryAggregateOp");
static_assert(offsetof(FRigVMFunction_MathFloatBinaryAggregateOp, A) == 0x000008, "Member 'FRigVMFunction_MathFloatBinaryAggregateOp::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatBinaryAggregateOp, B) == 0x00000C, "Member 'FRigVMFunction_MathFloatBinaryAggregateOp::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatBinaryAggregateOp, Result) == 0x000010, "Member 'FRigVMFunction_MathFloatBinaryAggregateOp::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathRayTransform
// 0x00C8 (0x00D0 - 0x0008)
struct FRigVMFunction_MathRayTransform final : public FRigVMFunction_MathRayBase
{
public:
	struct FRay                                   Ray;                                               // 0x0008(0x0030)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0040(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRay                                   Result;                                            // 0x00A0(0x0030)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathRayTransform) == 0x000010, "Wrong alignment on FRigVMFunction_MathRayTransform");
static_assert(sizeof(FRigVMFunction_MathRayTransform) == 0x0000D0, "Wrong size on FRigVMFunction_MathRayTransform");
static_assert(offsetof(FRigVMFunction_MathRayTransform, Ray) == 0x000008, "Member 'FRigVMFunction_MathRayTransform::Ray' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathRayTransform, Transform) == 0x000040, "Member 'FRigVMFunction_MathRayTransform::Transform' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathRayTransform, Result) == 0x0000A0, "Member 'FRigVMFunction_MathRayTransform::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathFloatMake
// 0x0008 (0x0010 - 0x0008)
struct FRigVMFunction_MathFloatMake final : public FRigVMFunction_MathFloatBase
{
public:
	float                                         Value;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathFloatMake) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatMake");
static_assert(sizeof(FRigVMFunction_MathFloatMake) == 0x000010, "Wrong size on FRigVMFunction_MathFloatMake");
static_assert(offsetof(FRigVMFunction_MathFloatMake, Value) == 0x000008, "Member 'FRigVMFunction_MathFloatMake::Value' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathFloatConstPi
// 0x0000 (0x0010 - 0x0010)
struct FRigVMFunction_MathFloatConstPi final : public FRigVMFunction_MathFloatConstant
{
};
static_assert(alignof(FRigVMFunction_MathFloatConstPi) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatConstPi");
static_assert(sizeof(FRigVMFunction_MathFloatConstPi) == 0x000010, "Wrong size on FRigVMFunction_MathFloatConstPi");

// ScriptStruct RigVM.RigVMFunction_MathQuaternionMakeAbsolute
// 0x0068 (0x0070 - 0x0008)
struct FRigVMFunction_MathQuaternionMakeAbsolute final : public FRigVMFunction_MathQuaternionBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Local;                                             // 0x0010(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  Parent;                                            // 0x0030(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  Global;                                            // 0x0050(0x0020)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathQuaternionMakeAbsolute) == 0x000010, "Wrong alignment on FRigVMFunction_MathQuaternionMakeAbsolute");
static_assert(sizeof(FRigVMFunction_MathQuaternionMakeAbsolute) == 0x000070, "Wrong size on FRigVMFunction_MathQuaternionMakeAbsolute");
static_assert(offsetof(FRigVMFunction_MathQuaternionMakeAbsolute, Local) == 0x000010, "Member 'FRigVMFunction_MathQuaternionMakeAbsolute::Local' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionMakeAbsolute, Parent) == 0x000030, "Member 'FRigVMFunction_MathQuaternionMakeAbsolute::Parent' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionMakeAbsolute, Global) == 0x000050, "Member 'FRigVMFunction_MathQuaternionMakeAbsolute::Global' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathFloatConstHalfPi
// 0x0000 (0x0010 - 0x0010)
struct FRigVMFunction_MathFloatConstHalfPi final : public FRigVMFunction_MathFloatConstant
{
};
static_assert(alignof(FRigVMFunction_MathFloatConstHalfPi) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatConstHalfPi");
static_assert(sizeof(FRigVMFunction_MathFloatConstHalfPi) == 0x000010, "Wrong size on FRigVMFunction_MathFloatConstHalfPi");

// ScriptStruct RigVM.RigVMFunction_MathFloatConstTwoPi
// 0x0000 (0x0010 - 0x0010)
struct FRigVMFunction_MathFloatConstTwoPi final : public FRigVMFunction_MathFloatConstant
{
};
static_assert(alignof(FRigVMFunction_MathFloatConstTwoPi) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatConstTwoPi");
static_assert(sizeof(FRigVMFunction_MathFloatConstTwoPi) == 0x000010, "Wrong size on FRigVMFunction_MathFloatConstTwoPi");

// ScriptStruct RigVM.RigVMFunction_MathVectorRound
// 0x0000 (0x0038 - 0x0038)
struct FRigVMFunction_MathVectorRound final : public FRigVMFunction_MathVectorUnaryOp
{
};
static_assert(alignof(FRigVMFunction_MathVectorRound) == 0x000008, "Wrong alignment on FRigVMFunction_MathVectorRound");
static_assert(sizeof(FRigVMFunction_MathVectorRound) == 0x000038, "Wrong size on FRigVMFunction_MathVectorRound");

// ScriptStruct RigVM.RigVMFunction_MathFloatConstE
// 0x0000 (0x0010 - 0x0010)
struct FRigVMFunction_MathFloatConstE final : public FRigVMFunction_MathFloatConstant
{
};
static_assert(alignof(FRigVMFunction_MathFloatConstE) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatConstE");
static_assert(sizeof(FRigVMFunction_MathFloatConstE) == 0x000010, "Wrong size on FRigVMFunction_MathFloatConstE");

// ScriptStruct RigVM.RigVMFunction_MathFloatAdd
// 0x0000 (0x0018 - 0x0018)
struct FRigVMFunction_MathFloatAdd final : public FRigVMFunction_MathFloatBinaryAggregateOp
{
};
static_assert(alignof(FRigVMFunction_MathFloatAdd) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatAdd");
static_assert(sizeof(FRigVMFunction_MathFloatAdd) == 0x000018, "Wrong size on FRigVMFunction_MathFloatAdd");

// ScriptStruct RigVM.MathRBFInterpolateQuatXform_Target
// 0x0080 (0x0080 - 0x0000)
struct FMathRBFInterpolateQuatXform_Target final
{
public:
	struct FQuat                                  Target;                                            // 0x0000(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Value;                                             // 0x0020(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMathRBFInterpolateQuatXform_Target) == 0x000010, "Wrong alignment on FMathRBFInterpolateQuatXform_Target");
static_assert(sizeof(FMathRBFInterpolateQuatXform_Target) == 0x000080, "Wrong size on FMathRBFInterpolateQuatXform_Target");
static_assert(offsetof(FMathRBFInterpolateQuatXform_Target, Target) == 0x000000, "Member 'FMathRBFInterpolateQuatXform_Target::Target' has a wrong offset!");
static_assert(offsetof(FMathRBFInterpolateQuatXform_Target, Value) == 0x000020, "Member 'FMathRBFInterpolateQuatXform_Target::Value' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathFloatSub
// 0x0000 (0x0018 - 0x0018)
struct FRigVMFunction_MathFloatSub final : public FRigVMFunction_MathFloatBinaryOp
{
};
static_assert(alignof(FRigVMFunction_MathFloatSub) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatSub");
static_assert(sizeof(FRigVMFunction_MathFloatSub) == 0x000018, "Wrong size on FRigVMFunction_MathFloatSub");

// ScriptStruct RigVM.RigVMFunction_MathFloatMul
// 0x0000 (0x0018 - 0x0018)
struct FRigVMFunction_MathFloatMul final : public FRigVMFunction_MathFloatBinaryAggregateOp
{
};
static_assert(alignof(FRigVMFunction_MathFloatMul) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatMul");
static_assert(sizeof(FRigVMFunction_MathFloatMul) == 0x000018, "Wrong size on FRigVMFunction_MathFloatMul");

// ScriptStruct RigVM.RigVMFunction_MathVectorRemap
// 0x0098 (0x00A0 - 0x0008)
struct FRigVMFunction_MathVectorRemap final : public FRigVMFunction_MathVectorBase
{
public:
	struct FVector                                Value;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SourceMinimum;                                     // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SourceMaximum;                                     // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetMinimum;                                     // 0x0050(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetMaximum;                                     // 0x0068(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClamp;                                            // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Result;                                            // 0x0088(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathVectorRemap) == 0x000008, "Wrong alignment on FRigVMFunction_MathVectorRemap");
static_assert(sizeof(FRigVMFunction_MathVectorRemap) == 0x0000A0, "Wrong size on FRigVMFunction_MathVectorRemap");
static_assert(offsetof(FRigVMFunction_MathVectorRemap, Value) == 0x000008, "Member 'FRigVMFunction_MathVectorRemap::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorRemap, SourceMinimum) == 0x000020, "Member 'FRigVMFunction_MathVectorRemap::SourceMinimum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorRemap, SourceMaximum) == 0x000038, "Member 'FRigVMFunction_MathVectorRemap::SourceMaximum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorRemap, TargetMinimum) == 0x000050, "Member 'FRigVMFunction_MathVectorRemap::TargetMinimum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorRemap, TargetMaximum) == 0x000068, "Member 'FRigVMFunction_MathVectorRemap::TargetMaximum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorRemap, bClamp) == 0x000080, "Member 'FRigVMFunction_MathVectorRemap::bClamp' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorRemap, Result) == 0x000088, "Member 'FRigVMFunction_MathVectorRemap::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathFloatDiv
// 0x0000 (0x0018 - 0x0018)
struct FRigVMFunction_MathFloatDiv final : public FRigVMFunction_MathFloatBinaryOp
{
};
static_assert(alignof(FRigVMFunction_MathFloatDiv) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatDiv");
static_assert(sizeof(FRigVMFunction_MathFloatDiv) == 0x000018, "Wrong size on FRigVMFunction_MathFloatDiv");

// ScriptStruct RigVM.RigVMFunction_MathFloatMod
// 0x0000 (0x0018 - 0x0018)
struct FRigVMFunction_MathFloatMod final : public FRigVMFunction_MathFloatBinaryOp
{
};
static_assert(alignof(FRigVMFunction_MathFloatMod) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatMod");
static_assert(sizeof(FRigVMFunction_MathFloatMod) == 0x000018, "Wrong size on FRigVMFunction_MathFloatMod");

// ScriptStruct RigVM.RigVMFunction_MathVectorFloor
// 0x0000 (0x0038 - 0x0038)
struct FRigVMFunction_MathVectorFloor final : public FRigVMFunction_MathVectorUnaryOp
{
};
static_assert(alignof(FRigVMFunction_MathVectorFloor) == 0x000008, "Wrong alignment on FRigVMFunction_MathVectorFloor");
static_assert(sizeof(FRigVMFunction_MathVectorFloor) == 0x000038, "Wrong size on FRigVMFunction_MathVectorFloor");

// ScriptStruct RigVM.RigVMFunction_MathFloatMin
// 0x0000 (0x0018 - 0x0018)
struct FRigVMFunction_MathFloatMin final : public FRigVMFunction_MathFloatBinaryAggregateOp
{
};
static_assert(alignof(FRigVMFunction_MathFloatMin) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatMin");
static_assert(sizeof(FRigVMFunction_MathFloatMin) == 0x000018, "Wrong size on FRigVMFunction_MathFloatMin");

// ScriptStruct RigVM.RigVMFunction_MathFloatMax
// 0x0000 (0x0018 - 0x0018)
struct FRigVMFunction_MathFloatMax final : public FRigVMFunction_MathFloatBinaryAggregateOp
{
};
static_assert(alignof(FRigVMFunction_MathFloatMax) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatMax");
static_assert(sizeof(FRigVMFunction_MathFloatMax) == 0x000018, "Wrong size on FRigVMFunction_MathFloatMax");

// ScriptStruct RigVM.RigVMFunction_MathFloatSqrt
// 0x0000 (0x0010 - 0x0010)
struct FRigVMFunction_MathFloatSqrt final : public FRigVMFunction_MathFloatUnaryOp
{
};
static_assert(alignof(FRigVMFunction_MathFloatSqrt) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatSqrt");
static_assert(sizeof(FRigVMFunction_MathFloatSqrt) == 0x000010, "Wrong size on FRigVMFunction_MathFloatSqrt");

// ScriptStruct RigVM.MathRBFInterpolateVectorQuat_Target
// 0x0040 (0x0040 - 0x0000)
struct FMathRBFInterpolateVectorQuat_Target final
{
public:
	struct FVector                                Target;                                            // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Value;                                             // 0x0020(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMathRBFInterpolateVectorQuat_Target) == 0x000010, "Wrong alignment on FMathRBFInterpolateVectorQuat_Target");
static_assert(sizeof(FMathRBFInterpolateVectorQuat_Target) == 0x000040, "Wrong size on FMathRBFInterpolateVectorQuat_Target");
static_assert(offsetof(FMathRBFInterpolateVectorQuat_Target, Target) == 0x000000, "Member 'FMathRBFInterpolateVectorQuat_Target::Target' has a wrong offset!");
static_assert(offsetof(FMathRBFInterpolateVectorQuat_Target, Value) == 0x000020, "Member 'FMathRBFInterpolateVectorQuat_Target::Value' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathFloatNegate
// 0x0000 (0x0010 - 0x0010)
struct FRigVMFunction_MathFloatNegate final : public FRigVMFunction_MathFloatUnaryOp
{
};
static_assert(alignof(FRigVMFunction_MathFloatNegate) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatNegate");
static_assert(sizeof(FRigVMFunction_MathFloatNegate) == 0x000010, "Wrong size on FRigVMFunction_MathFloatNegate");

// ScriptStruct RigVM.RigVMFunction_MathFloatAbs
// 0x0000 (0x0010 - 0x0010)
struct FRigVMFunction_MathFloatAbs final : public FRigVMFunction_MathFloatUnaryOp
{
};
static_assert(alignof(FRigVMFunction_MathFloatAbs) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatAbs");
static_assert(sizeof(FRigVMFunction_MathFloatAbs) == 0x000010, "Wrong size on FRigVMFunction_MathFloatAbs");

// ScriptStruct RigVM.MathRBFInterpolateVectorFloat_Target
// 0x0020 (0x0020 - 0x0000)
struct FMathRBFInterpolateVectorFloat_Target final
{
public:
	struct FVector                                Target;                                            // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMathRBFInterpolateVectorFloat_Target) == 0x000008, "Wrong alignment on FMathRBFInterpolateVectorFloat_Target");
static_assert(sizeof(FMathRBFInterpolateVectorFloat_Target) == 0x000020, "Wrong size on FMathRBFInterpolateVectorFloat_Target");
static_assert(offsetof(FMathRBFInterpolateVectorFloat_Target, Target) == 0x000000, "Member 'FMathRBFInterpolateVectorFloat_Target::Target' has a wrong offset!");
static_assert(offsetof(FMathRBFInterpolateVectorFloat_Target, Value) == 0x000018, "Member 'FMathRBFInterpolateVectorFloat_Target::Value' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathFloatFloor
// 0x0010 (0x0018 - 0x0008)
struct FRigVMFunction_MathFloatFloor final : public FRigVMFunction_MathFloatBase
{
public:
	float                                         Value;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Result;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Int;                                               // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathFloatFloor) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatFloor");
static_assert(sizeof(FRigVMFunction_MathFloatFloor) == 0x000018, "Wrong size on FRigVMFunction_MathFloatFloor");
static_assert(offsetof(FRigVMFunction_MathFloatFloor, Value) == 0x000008, "Member 'FRigVMFunction_MathFloatFloor::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatFloor, Result) == 0x00000C, "Member 'FRigVMFunction_MathFloatFloor::Result' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatFloor, Int) == 0x000010, "Member 'FRigVMFunction_MathFloatFloor::Int' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathFloatCeil
// 0x0010 (0x0018 - 0x0008)
struct FRigVMFunction_MathFloatCeil final : public FRigVMFunction_MathFloatBase
{
public:
	float                                         Value;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Result;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Int;                                               // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathFloatCeil) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatCeil");
static_assert(sizeof(FRigVMFunction_MathFloatCeil) == 0x000018, "Wrong size on FRigVMFunction_MathFloatCeil");
static_assert(offsetof(FRigVMFunction_MathFloatCeil, Value) == 0x000008, "Member 'FRigVMFunction_MathFloatCeil::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatCeil, Result) == 0x00000C, "Member 'FRigVMFunction_MathFloatCeil::Result' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatCeil, Int) == 0x000010, "Member 'FRigVMFunction_MathFloatCeil::Int' has a wrong offset!");

// ScriptStruct RigVM.MathRBFInterpolateQuatColor_Target
// 0x0030 (0x0030 - 0x0000)
struct FMathRBFInterpolateQuatColor_Target final
{
public:
	struct FQuat                                  Target;                                            // 0x0000(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Value;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMathRBFInterpolateQuatColor_Target) == 0x000010, "Wrong alignment on FMathRBFInterpolateQuatColor_Target");
static_assert(sizeof(FMathRBFInterpolateQuatColor_Target) == 0x000030, "Wrong size on FMathRBFInterpolateQuatColor_Target");
static_assert(offsetof(FMathRBFInterpolateQuatColor_Target, Target) == 0x000000, "Member 'FMathRBFInterpolateQuatColor_Target::Target' has a wrong offset!");
static_assert(offsetof(FMathRBFInterpolateQuatColor_Target, Value) == 0x000020, "Member 'FMathRBFInterpolateQuatColor_Target::Value' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathFloatRound
// 0x0010 (0x0018 - 0x0008)
struct FRigVMFunction_MathFloatRound final : public FRigVMFunction_MathFloatBase
{
public:
	float                                         Value;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Result;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Int;                                               // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathFloatRound) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatRound");
static_assert(sizeof(FRigVMFunction_MathFloatRound) == 0x000018, "Wrong size on FRigVMFunction_MathFloatRound");
static_assert(offsetof(FRigVMFunction_MathFloatRound, Value) == 0x000008, "Member 'FRigVMFunction_MathFloatRound::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatRound, Result) == 0x00000C, "Member 'FRigVMFunction_MathFloatRound::Result' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatRound, Int) == 0x000010, "Member 'FRigVMFunction_MathFloatRound::Int' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathFloatToInt
// 0x0008 (0x0010 - 0x0008)
struct FRigVMFunction_MathFloatToInt final : public FRigVMFunction_MathFloatBase
{
public:
	float                                         Value;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Result;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathFloatToInt) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatToInt");
static_assert(sizeof(FRigVMFunction_MathFloatToInt) == 0x000010, "Wrong size on FRigVMFunction_MathFloatToInt");
static_assert(offsetof(FRigVMFunction_MathFloatToInt, Value) == 0x000008, "Member 'FRigVMFunction_MathFloatToInt::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatToInt, Result) == 0x00000C, "Member 'FRigVMFunction_MathFloatToInt::Result' has a wrong offset!");

// ScriptStruct RigVM.MathRBFInterpolateVectorColor_Target
// 0x0028 (0x0028 - 0x0000)
struct FMathRBFInterpolateVectorColor_Target final
{
public:
	struct FVector                                Target;                                            // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Value;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMathRBFInterpolateVectorColor_Target) == 0x000008, "Wrong alignment on FMathRBFInterpolateVectorColor_Target");
static_assert(sizeof(FMathRBFInterpolateVectorColor_Target) == 0x000028, "Wrong size on FMathRBFInterpolateVectorColor_Target");
static_assert(offsetof(FMathRBFInterpolateVectorColor_Target, Target) == 0x000000, "Member 'FMathRBFInterpolateVectorColor_Target::Target' has a wrong offset!");
static_assert(offsetof(FMathRBFInterpolateVectorColor_Target, Value) == 0x000018, "Member 'FMathRBFInterpolateVectorColor_Target::Value' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathFloatSign
// 0x0000 (0x0010 - 0x0010)
struct FRigVMFunction_MathFloatSign final : public FRigVMFunction_MathFloatUnaryOp
{
};
static_assert(alignof(FRigVMFunction_MathFloatSign) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatSign");
static_assert(sizeof(FRigVMFunction_MathFloatSign) == 0x000010, "Wrong size on FRigVMFunction_MathFloatSign");

// ScriptStruct RigVM.RigVMFunction_MathFloatClamp
// 0x0010 (0x0018 - 0x0008)
struct FRigVMFunction_MathFloatClamp final : public FRigVMFunction_MathFloatBase
{
public:
	float                                         Value;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Minimum;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Maximum;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Result;                                            // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathFloatClamp) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatClamp");
static_assert(sizeof(FRigVMFunction_MathFloatClamp) == 0x000018, "Wrong size on FRigVMFunction_MathFloatClamp");
static_assert(offsetof(FRigVMFunction_MathFloatClamp, Value) == 0x000008, "Member 'FRigVMFunction_MathFloatClamp::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatClamp, Minimum) == 0x00000C, "Member 'FRigVMFunction_MathFloatClamp::Minimum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatClamp, Maximum) == 0x000010, "Member 'FRigVMFunction_MathFloatClamp::Maximum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatClamp, Result) == 0x000014, "Member 'FRigVMFunction_MathFloatClamp::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathTransformBase
// 0x0000 (0x0008 - 0x0008)
struct FRigVMFunction_MathTransformBase : public FRigVMFunction_MathBase
{
};
static_assert(alignof(FRigVMFunction_MathTransformBase) == 0x000008, "Wrong alignment on FRigVMFunction_MathTransformBase");
static_assert(sizeof(FRigVMFunction_MathTransformBase) == 0x000008, "Wrong size on FRigVMFunction_MathTransformBase");

// ScriptStruct RigVM.RigVMFunction_MathTransformBinaryAggregateOp
// 0x0128 (0x0130 - 0x0008)
struct FRigVMFunction_MathTransformBinaryAggregateOp : public FRigVMFunction_MathTransformBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             A;                                                 // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             B;                                                 // 0x0070(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Result;                                            // 0x00D0(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathTransformBinaryAggregateOp) == 0x000010, "Wrong alignment on FRigVMFunction_MathTransformBinaryAggregateOp");
static_assert(sizeof(FRigVMFunction_MathTransformBinaryAggregateOp) == 0x000130, "Wrong size on FRigVMFunction_MathTransformBinaryAggregateOp");
static_assert(offsetof(FRigVMFunction_MathTransformBinaryAggregateOp, A) == 0x000010, "Member 'FRigVMFunction_MathTransformBinaryAggregateOp::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformBinaryAggregateOp, B) == 0x000070, "Member 'FRigVMFunction_MathTransformBinaryAggregateOp::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformBinaryAggregateOp, Result) == 0x0000D0, "Member 'FRigVMFunction_MathTransformBinaryAggregateOp::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathFloatLerp
// 0x0010 (0x0018 - 0x0008)
struct FRigVMFunction_MathFloatLerp final : public FRigVMFunction_MathFloatBase
{
public:
	float                                         A;                                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         B;                                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         T;                                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Result;                                            // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathFloatLerp) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatLerp");
static_assert(sizeof(FRigVMFunction_MathFloatLerp) == 0x000018, "Wrong size on FRigVMFunction_MathFloatLerp");
static_assert(offsetof(FRigVMFunction_MathFloatLerp, A) == 0x000008, "Member 'FRigVMFunction_MathFloatLerp::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatLerp, B) == 0x00000C, "Member 'FRigVMFunction_MathFloatLerp::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatLerp, T) == 0x000010, "Member 'FRigVMFunction_MathFloatLerp::T' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatLerp, Result) == 0x000014, "Member 'FRigVMFunction_MathFloatLerp::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathFloatRemap
// 0x0020 (0x0028 - 0x0008)
struct FRigVMFunction_MathFloatRemap final : public FRigVMFunction_MathFloatBase
{
public:
	float                                         Value;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SourceMinimum;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SourceMaximum;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetMinimum;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetMaximum;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClamp;                                            // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Result;                                            // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathFloatRemap) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatRemap");
static_assert(sizeof(FRigVMFunction_MathFloatRemap) == 0x000028, "Wrong size on FRigVMFunction_MathFloatRemap");
static_assert(offsetof(FRigVMFunction_MathFloatRemap, Value) == 0x000008, "Member 'FRigVMFunction_MathFloatRemap::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatRemap, SourceMinimum) == 0x00000C, "Member 'FRigVMFunction_MathFloatRemap::SourceMinimum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatRemap, SourceMaximum) == 0x000010, "Member 'FRigVMFunction_MathFloatRemap::SourceMaximum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatRemap, TargetMinimum) == 0x000014, "Member 'FRigVMFunction_MathFloatRemap::TargetMinimum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatRemap, TargetMaximum) == 0x000018, "Member 'FRigVMFunction_MathFloatRemap::TargetMaximum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatRemap, bClamp) == 0x00001C, "Member 'FRigVMFunction_MathFloatRemap::bClamp' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatRemap, Result) == 0x000020, "Member 'FRigVMFunction_MathFloatRemap::Result' has a wrong offset!");

// ScriptStruct RigVM.MathRBFInterpolateVectorXform_Target
// 0x0080 (0x0080 - 0x0000)
struct FMathRBFInterpolateVectorXform_Target final
{
public:
	struct FVector                                Target;                                            // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Value;                                             // 0x0020(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMathRBFInterpolateVectorXform_Target) == 0x000010, "Wrong alignment on FMathRBFInterpolateVectorXform_Target");
static_assert(sizeof(FMathRBFInterpolateVectorXform_Target) == 0x000080, "Wrong size on FMathRBFInterpolateVectorXform_Target");
static_assert(offsetof(FMathRBFInterpolateVectorXform_Target, Target) == 0x000000, "Member 'FMathRBFInterpolateVectorXform_Target::Target' has a wrong offset!");
static_assert(offsetof(FMathRBFInterpolateVectorXform_Target, Value) == 0x000020, "Member 'FMathRBFInterpolateVectorXform_Target::Value' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathFloatEquals
// 0x0010 (0x0018 - 0x0008)
struct FRigVMFunction_MathFloatEquals final : public FRigVMFunction_MathFloatBase
{
public:
	float                                         A;                                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         B;                                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathFloatEquals) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatEquals");
static_assert(sizeof(FRigVMFunction_MathFloatEquals) == 0x000018, "Wrong size on FRigVMFunction_MathFloatEquals");
static_assert(offsetof(FRigVMFunction_MathFloatEquals, A) == 0x000008, "Member 'FRigVMFunction_MathFloatEquals::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatEquals, B) == 0x00000C, "Member 'FRigVMFunction_MathFloatEquals::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatEquals, Result) == 0x000010, "Member 'FRigVMFunction_MathFloatEquals::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathFloatNotEquals
// 0x0010 (0x0018 - 0x0008)
struct FRigVMFunction_MathFloatNotEquals final : public FRigVMFunction_MathFloatBase
{
public:
	float                                         A;                                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         B;                                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathFloatNotEquals) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatNotEquals");
static_assert(sizeof(FRigVMFunction_MathFloatNotEquals) == 0x000018, "Wrong size on FRigVMFunction_MathFloatNotEquals");
static_assert(offsetof(FRigVMFunction_MathFloatNotEquals, A) == 0x000008, "Member 'FRigVMFunction_MathFloatNotEquals::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatNotEquals, B) == 0x00000C, "Member 'FRigVMFunction_MathFloatNotEquals::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatNotEquals, Result) == 0x000010, "Member 'FRigVMFunction_MathFloatNotEquals::Result' has a wrong offset!");

// ScriptStruct RigVM.MathRBFInterpolateVectorVector_Target
// 0x0030 (0x0030 - 0x0000)
struct FMathRBFInterpolateVectorVector_Target final
{
public:
	struct FVector                                Target;                                            // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Value;                                             // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMathRBFInterpolateVectorVector_Target) == 0x000008, "Wrong alignment on FMathRBFInterpolateVectorVector_Target");
static_assert(sizeof(FMathRBFInterpolateVectorVector_Target) == 0x000030, "Wrong size on FMathRBFInterpolateVectorVector_Target");
static_assert(offsetof(FMathRBFInterpolateVectorVector_Target, Target) == 0x000000, "Member 'FMathRBFInterpolateVectorVector_Target::Target' has a wrong offset!");
static_assert(offsetof(FMathRBFInterpolateVectorVector_Target, Value) == 0x000018, "Member 'FMathRBFInterpolateVectorVector_Target::Value' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathFloatGreater
// 0x0010 (0x0018 - 0x0008)
struct FRigVMFunction_MathFloatGreater final : public FRigVMFunction_MathFloatBase
{
public:
	float                                         A;                                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         B;                                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathFloatGreater) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatGreater");
static_assert(sizeof(FRigVMFunction_MathFloatGreater) == 0x000018, "Wrong size on FRigVMFunction_MathFloatGreater");
static_assert(offsetof(FRigVMFunction_MathFloatGreater, A) == 0x000008, "Member 'FRigVMFunction_MathFloatGreater::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatGreater, B) == 0x00000C, "Member 'FRigVMFunction_MathFloatGreater::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatGreater, Result) == 0x000010, "Member 'FRigVMFunction_MathFloatGreater::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathFloatLess
// 0x0010 (0x0018 - 0x0008)
struct FRigVMFunction_MathFloatLess final : public FRigVMFunction_MathFloatBase
{
public:
	float                                         A;                                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         B;                                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathFloatLess) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatLess");
static_assert(sizeof(FRigVMFunction_MathFloatLess) == 0x000018, "Wrong size on FRigVMFunction_MathFloatLess");
static_assert(offsetof(FRigVMFunction_MathFloatLess, A) == 0x000008, "Member 'FRigVMFunction_MathFloatLess::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatLess, B) == 0x00000C, "Member 'FRigVMFunction_MathFloatLess::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatLess, Result) == 0x000010, "Member 'FRigVMFunction_MathFloatLess::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathTransformUnaryOp
// 0x00C8 (0x00D0 - 0x0008)
struct FRigVMFunction_MathTransformUnaryOp : public FRigVMFunction_MathTransformBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Value;                                             // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Result;                                            // 0x0070(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathTransformUnaryOp) == 0x000010, "Wrong alignment on FRigVMFunction_MathTransformUnaryOp");
static_assert(sizeof(FRigVMFunction_MathTransformUnaryOp) == 0x0000D0, "Wrong size on FRigVMFunction_MathTransformUnaryOp");
static_assert(offsetof(FRigVMFunction_MathTransformUnaryOp, Value) == 0x000010, "Member 'FRigVMFunction_MathTransformUnaryOp::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformUnaryOp, Result) == 0x000070, "Member 'FRigVMFunction_MathTransformUnaryOp::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathFloatGreaterEqual
// 0x0010 (0x0018 - 0x0008)
struct FRigVMFunction_MathFloatGreaterEqual final : public FRigVMFunction_MathFloatBase
{
public:
	float                                         A;                                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         B;                                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathFloatGreaterEqual) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatGreaterEqual");
static_assert(sizeof(FRigVMFunction_MathFloatGreaterEqual) == 0x000018, "Wrong size on FRigVMFunction_MathFloatGreaterEqual");
static_assert(offsetof(FRigVMFunction_MathFloatGreaterEqual, A) == 0x000008, "Member 'FRigVMFunction_MathFloatGreaterEqual::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatGreaterEqual, B) == 0x00000C, "Member 'FRigVMFunction_MathFloatGreaterEqual::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatGreaterEqual, Result) == 0x000010, "Member 'FRigVMFunction_MathFloatGreaterEqual::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathFloatLessEqual
// 0x0010 (0x0018 - 0x0008)
struct FRigVMFunction_MathFloatLessEqual final : public FRigVMFunction_MathFloatBase
{
public:
	float                                         A;                                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         B;                                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathFloatLessEqual) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatLessEqual");
static_assert(sizeof(FRigVMFunction_MathFloatLessEqual) == 0x000018, "Wrong size on FRigVMFunction_MathFloatLessEqual");
static_assert(offsetof(FRigVMFunction_MathFloatLessEqual, A) == 0x000008, "Member 'FRigVMFunction_MathFloatLessEqual::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatLessEqual, B) == 0x00000C, "Member 'FRigVMFunction_MathFloatLessEqual::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatLessEqual, Result) == 0x000010, "Member 'FRigVMFunction_MathFloatLessEqual::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathTransformMakeAbsolute
// 0x0128 (0x0130 - 0x0008)
struct FRigVMFunction_MathTransformMakeAbsolute final : public FRigVMFunction_MathTransformBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Local;                                             // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Parent;                                            // 0x0070(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Global;                                            // 0x00D0(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathTransformMakeAbsolute) == 0x000010, "Wrong alignment on FRigVMFunction_MathTransformMakeAbsolute");
static_assert(sizeof(FRigVMFunction_MathTransformMakeAbsolute) == 0x000130, "Wrong size on FRigVMFunction_MathTransformMakeAbsolute");
static_assert(offsetof(FRigVMFunction_MathTransformMakeAbsolute, Local) == 0x000010, "Member 'FRigVMFunction_MathTransformMakeAbsolute::Local' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformMakeAbsolute, Parent) == 0x000070, "Member 'FRigVMFunction_MathTransformMakeAbsolute::Parent' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformMakeAbsolute, Global) == 0x0000D0, "Member 'FRigVMFunction_MathTransformMakeAbsolute::Global' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathFloatIsNearlyZero
// 0x0010 (0x0018 - 0x0008)
struct FRigVMFunction_MathFloatIsNearlyZero final : public FRigVMFunction_MathFloatBase
{
public:
	float                                         Value;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tolerance;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathFloatIsNearlyZero) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatIsNearlyZero");
static_assert(sizeof(FRigVMFunction_MathFloatIsNearlyZero) == 0x000018, "Wrong size on FRigVMFunction_MathFloatIsNearlyZero");
static_assert(offsetof(FRigVMFunction_MathFloatIsNearlyZero, Value) == 0x000008, "Member 'FRigVMFunction_MathFloatIsNearlyZero::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatIsNearlyZero, Tolerance) == 0x00000C, "Member 'FRigVMFunction_MathFloatIsNearlyZero::Tolerance' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatIsNearlyZero, Result) == 0x000010, "Member 'FRigVMFunction_MathFloatIsNearlyZero::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathFloatIsNearlyEqual
// 0x0010 (0x0018 - 0x0008)
struct FRigVMFunction_MathFloatIsNearlyEqual final : public FRigVMFunction_MathFloatBase
{
public:
	float                                         A;                                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         B;                                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tolerance;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathFloatIsNearlyEqual) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatIsNearlyEqual");
static_assert(sizeof(FRigVMFunction_MathFloatIsNearlyEqual) == 0x000018, "Wrong size on FRigVMFunction_MathFloatIsNearlyEqual");
static_assert(offsetof(FRigVMFunction_MathFloatIsNearlyEqual, A) == 0x000008, "Member 'FRigVMFunction_MathFloatIsNearlyEqual::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatIsNearlyEqual, B) == 0x00000C, "Member 'FRigVMFunction_MathFloatIsNearlyEqual::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatIsNearlyEqual, Tolerance) == 0x000010, "Member 'FRigVMFunction_MathFloatIsNearlyEqual::Tolerance' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatIsNearlyEqual, Result) == 0x000014, "Member 'FRigVMFunction_MathFloatIsNearlyEqual::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathTransformFromEulerTransform
// 0x00A8 (0x00B0 - 0x0008)
struct FRigVMFunction_MathTransformFromEulerTransform final : public FRigVMFunction_MathTransformBase
{
public:
	struct FEulerTransform                        EulerTransform;                                    // 0x0008(0x0048)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             Result;                                            // 0x0050(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathTransformFromEulerTransform) == 0x000010, "Wrong alignment on FRigVMFunction_MathTransformFromEulerTransform");
static_assert(sizeof(FRigVMFunction_MathTransformFromEulerTransform) == 0x0000B0, "Wrong size on FRigVMFunction_MathTransformFromEulerTransform");
static_assert(offsetof(FRigVMFunction_MathTransformFromEulerTransform, EulerTransform) == 0x000008, "Member 'FRigVMFunction_MathTransformFromEulerTransform::EulerTransform' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformFromEulerTransform, Result) == 0x000050, "Member 'FRigVMFunction_MathTransformFromEulerTransform::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathFloatSelectBool
// 0x0010 (0x0018 - 0x0008)
struct FRigVMFunction_MathFloatSelectBool final : public FRigVMFunction_MathFloatBase
{
public:
	bool                                          Condition;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IfTrue;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IfFalse;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Result;                                            // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathFloatSelectBool) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatSelectBool");
static_assert(sizeof(FRigVMFunction_MathFloatSelectBool) == 0x000018, "Wrong size on FRigVMFunction_MathFloatSelectBool");
static_assert(offsetof(FRigVMFunction_MathFloatSelectBool, Condition) == 0x000008, "Member 'FRigVMFunction_MathFloatSelectBool::Condition' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatSelectBool, IfTrue) == 0x00000C, "Member 'FRigVMFunction_MathFloatSelectBool::IfTrue' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatSelectBool, IfFalse) == 0x000010, "Member 'FRigVMFunction_MathFloatSelectBool::IfFalse' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatSelectBool, Result) == 0x000014, "Member 'FRigVMFunction_MathFloatSelectBool::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathFloatDeg
// 0x0000 (0x0010 - 0x0010)
struct FRigVMFunction_MathFloatDeg final : public FRigVMFunction_MathFloatUnaryOp
{
};
static_assert(alignof(FRigVMFunction_MathFloatDeg) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatDeg");
static_assert(sizeof(FRigVMFunction_MathFloatDeg) == 0x000010, "Wrong size on FRigVMFunction_MathFloatDeg");

// ScriptStruct RigVM.RigVMFunction_MathFloatRad
// 0x0000 (0x0010 - 0x0010)
struct FRigVMFunction_MathFloatRad final : public FRigVMFunction_MathFloatUnaryOp
{
};
static_assert(alignof(FRigVMFunction_MathFloatRad) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatRad");
static_assert(sizeof(FRigVMFunction_MathFloatRad) == 0x000010, "Wrong size on FRigVMFunction_MathFloatRad");

// ScriptStruct RigVM.RigVMFunction_MathFloatSin
// 0x0000 (0x0010 - 0x0010)
struct FRigVMFunction_MathFloatSin final : public FRigVMFunction_MathFloatUnaryOp
{
};
static_assert(alignof(FRigVMFunction_MathFloatSin) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatSin");
static_assert(sizeof(FRigVMFunction_MathFloatSin) == 0x000010, "Wrong size on FRigVMFunction_MathFloatSin");

// ScriptStruct RigVM.RigVMFunction_MathQuaternionFromRotator
// 0x0038 (0x0040 - 0x0008)
struct FRigVMFunction_MathQuaternionFromRotator final : public FRigVMFunction_MathQuaternionBase
{
public:
	struct FRotator                               Rotator;                                           // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FQuat                                  Result;                                            // 0x0020(0x0020)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathQuaternionFromRotator) == 0x000010, "Wrong alignment on FRigVMFunction_MathQuaternionFromRotator");
static_assert(sizeof(FRigVMFunction_MathQuaternionFromRotator) == 0x000040, "Wrong size on FRigVMFunction_MathQuaternionFromRotator");
static_assert(offsetof(FRigVMFunction_MathQuaternionFromRotator, Rotator) == 0x000008, "Member 'FRigVMFunction_MathQuaternionFromRotator::Rotator' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionFromRotator, Result) == 0x000020, "Member 'FRigVMFunction_MathQuaternionFromRotator::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathFloatCos
// 0x0000 (0x0010 - 0x0010)
struct FRigVMFunction_MathFloatCos final : public FRigVMFunction_MathFloatUnaryOp
{
};
static_assert(alignof(FRigVMFunction_MathFloatCos) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatCos");
static_assert(sizeof(FRigVMFunction_MathFloatCos) == 0x000010, "Wrong size on FRigVMFunction_MathFloatCos");

// ScriptStruct RigVM.RigVMFunction_MathFloatTan
// 0x0000 (0x0010 - 0x0010)
struct FRigVMFunction_MathFloatTan final : public FRigVMFunction_MathFloatUnaryOp
{
};
static_assert(alignof(FRigVMFunction_MathFloatTan) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatTan");
static_assert(sizeof(FRigVMFunction_MathFloatTan) == 0x000010, "Wrong size on FRigVMFunction_MathFloatTan");

// ScriptStruct RigVM.RigVMFunction_MathTransformArrayToSRT
// 0x0040 (0x0048 - 0x0008)
struct FRigVMFunction_MathTransformArrayToSRT final : public FRigVMFunction_MathTransformBase
{
public:
	TArray<struct FTransform>                     Transforms;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        Translations;                                      // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FQuat>                          Rotations;                                         // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        Scales;                                            // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathTransformArrayToSRT) == 0x000008, "Wrong alignment on FRigVMFunction_MathTransformArrayToSRT");
static_assert(sizeof(FRigVMFunction_MathTransformArrayToSRT) == 0x000048, "Wrong size on FRigVMFunction_MathTransformArrayToSRT");
static_assert(offsetof(FRigVMFunction_MathTransformArrayToSRT, Transforms) == 0x000008, "Member 'FRigVMFunction_MathTransformArrayToSRT::Transforms' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformArrayToSRT, Translations) == 0x000018, "Member 'FRigVMFunction_MathTransformArrayToSRT::Translations' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformArrayToSRT, Rotations) == 0x000028, "Member 'FRigVMFunction_MathTransformArrayToSRT::Rotations' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformArrayToSRT, Scales) == 0x000038, "Member 'FRigVMFunction_MathTransformArrayToSRT::Scales' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathFloatAsin
// 0x0000 (0x0010 - 0x0010)
struct FRigVMFunction_MathFloatAsin final : public FRigVMFunction_MathFloatUnaryOp
{
};
static_assert(alignof(FRigVMFunction_MathFloatAsin) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatAsin");
static_assert(sizeof(FRigVMFunction_MathFloatAsin) == 0x000010, "Wrong size on FRigVMFunction_MathFloatAsin");

// ScriptStruct RigVM.RigVMFunction_MathFloatAcos
// 0x0000 (0x0010 - 0x0010)
struct FRigVMFunction_MathFloatAcos final : public FRigVMFunction_MathFloatUnaryOp
{
};
static_assert(alignof(FRigVMFunction_MathFloatAcos) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatAcos");
static_assert(sizeof(FRigVMFunction_MathFloatAcos) == 0x000010, "Wrong size on FRigVMFunction_MathFloatAcos");

// ScriptStruct RigVM.RigVMFunction_MathQuaternionToVectors
// 0x0078 (0x0080 - 0x0008)
struct FRigVMFunction_MathQuaternionToVectors final : public FRigVMFunction_MathQuaternionBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Value;                                             // 0x0010(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Forward;                                           // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Right;                                             // 0x0048(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Up;                                                // 0x0060(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathQuaternionToVectors) == 0x000010, "Wrong alignment on FRigVMFunction_MathQuaternionToVectors");
static_assert(sizeof(FRigVMFunction_MathQuaternionToVectors) == 0x000080, "Wrong size on FRigVMFunction_MathQuaternionToVectors");
static_assert(offsetof(FRigVMFunction_MathQuaternionToVectors, Value) == 0x000010, "Member 'FRigVMFunction_MathQuaternionToVectors::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionToVectors, Forward) == 0x000030, "Member 'FRigVMFunction_MathQuaternionToVectors::Forward' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionToVectors, Right) == 0x000048, "Member 'FRigVMFunction_MathQuaternionToVectors::Right' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionToVectors, Up) == 0x000060, "Member 'FRigVMFunction_MathQuaternionToVectors::Up' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathFloatAtan
// 0x0000 (0x0010 - 0x0010)
struct FRigVMFunction_MathFloatAtan final : public FRigVMFunction_MathFloatUnaryOp
{
};
static_assert(alignof(FRigVMFunction_MathFloatAtan) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatAtan");
static_assert(sizeof(FRigVMFunction_MathFloatAtan) == 0x000010, "Wrong size on FRigVMFunction_MathFloatAtan");

// ScriptStruct RigVM.RigVMFunction_MathFloatAtan2
// 0x0000 (0x0018 - 0x0018)
struct FRigVMFunction_MathFloatAtan2 final : public FRigVMFunction_MathFloatBinaryOp
{
};
static_assert(alignof(FRigVMFunction_MathFloatAtan2) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatAtan2");
static_assert(sizeof(FRigVMFunction_MathFloatAtan2) == 0x000018, "Wrong size on FRigVMFunction_MathFloatAtan2");

// ScriptStruct RigVM.RigVMFunction_MathQuaternionFromAxisAndAngle
// 0x0048 (0x0050 - 0x0008)
struct FRigVMFunction_MathQuaternionFromAxisAndAngle final : public FRigVMFunction_MathQuaternionBase
{
public:
	struct FVector                                Axis;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0xC];                                       // 0x0024(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Result;                                            // 0x0030(0x0020)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathQuaternionFromAxisAndAngle) == 0x000010, "Wrong alignment on FRigVMFunction_MathQuaternionFromAxisAndAngle");
static_assert(sizeof(FRigVMFunction_MathQuaternionFromAxisAndAngle) == 0x000050, "Wrong size on FRigVMFunction_MathQuaternionFromAxisAndAngle");
static_assert(offsetof(FRigVMFunction_MathQuaternionFromAxisAndAngle, Axis) == 0x000008, "Member 'FRigVMFunction_MathQuaternionFromAxisAndAngle::Axis' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionFromAxisAndAngle, Angle) == 0x000020, "Member 'FRigVMFunction_MathQuaternionFromAxisAndAngle::Angle' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionFromAxisAndAngle, Result) == 0x000030, "Member 'FRigVMFunction_MathQuaternionFromAxisAndAngle::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathFloatLawOfCosine
// 0x0020 (0x0028 - 0x0008)
struct FRigVMFunction_MathFloatLawOfCosine final : public FRigVMFunction_MathFloatBase
{
public:
	float                                         A;                                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         B;                                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         C;                                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AlphaAngle;                                        // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BetaAngle;                                         // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GammaAngle;                                        // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValid;                                            // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathFloatLawOfCosine) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatLawOfCosine");
static_assert(sizeof(FRigVMFunction_MathFloatLawOfCosine) == 0x000028, "Wrong size on FRigVMFunction_MathFloatLawOfCosine");
static_assert(offsetof(FRigVMFunction_MathFloatLawOfCosine, A) == 0x000008, "Member 'FRigVMFunction_MathFloatLawOfCosine::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatLawOfCosine, B) == 0x00000C, "Member 'FRigVMFunction_MathFloatLawOfCosine::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatLawOfCosine, C) == 0x000010, "Member 'FRigVMFunction_MathFloatLawOfCosine::C' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatLawOfCosine, AlphaAngle) == 0x000014, "Member 'FRigVMFunction_MathFloatLawOfCosine::AlphaAngle' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatLawOfCosine, BetaAngle) == 0x000018, "Member 'FRigVMFunction_MathFloatLawOfCosine::BetaAngle' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatLawOfCosine, GammaAngle) == 0x00001C, "Member 'FRigVMFunction_MathFloatLawOfCosine::GammaAngle' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatLawOfCosine, bValid) == 0x000020, "Member 'FRigVMFunction_MathFloatLawOfCosine::bValid' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathFloatExponential
// 0x0000 (0x0010 - 0x0010)
struct FRigVMFunction_MathFloatExponential final : public FRigVMFunction_MathFloatUnaryOp
{
};
static_assert(alignof(FRigVMFunction_MathFloatExponential) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatExponential");
static_assert(sizeof(FRigVMFunction_MathFloatExponential) == 0x000010, "Wrong size on FRigVMFunction_MathFloatExponential");

// ScriptStruct RigVM.RigVMFunction_MathTransformTransformVector
// 0x0098 (0x00A0 - 0x0008)
struct FRigVMFunction_MathTransformTransformVector final : public FRigVMFunction_MathTransformBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0070(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Result;                                            // 0x0088(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathTransformTransformVector) == 0x000010, "Wrong alignment on FRigVMFunction_MathTransformTransformVector");
static_assert(sizeof(FRigVMFunction_MathTransformTransformVector) == 0x0000A0, "Wrong size on FRigVMFunction_MathTransformTransformVector");
static_assert(offsetof(FRigVMFunction_MathTransformTransformVector, Transform) == 0x000010, "Member 'FRigVMFunction_MathTransformTransformVector::Transform' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformTransformVector, Location) == 0x000070, "Member 'FRigVMFunction_MathTransformTransformVector::Location' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformTransformVector, Result) == 0x000088, "Member 'FRigVMFunction_MathTransformTransformVector::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathFloatArraySum
// 0x0018 (0x0020 - 0x0008)
struct FRigVMFunction_MathFloatArraySum final : public FRigVMFunction_MathFloatBase
{
public:
	TArray<float>                                 Array;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Sum;                                               // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathFloatArraySum) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatArraySum");
static_assert(sizeof(FRigVMFunction_MathFloatArraySum) == 0x000020, "Wrong size on FRigVMFunction_MathFloatArraySum");
static_assert(offsetof(FRigVMFunction_MathFloatArraySum, Array) == 0x000008, "Member 'FRigVMFunction_MathFloatArraySum::Array' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatArraySum, Sum) == 0x000018, "Member 'FRigVMFunction_MathFloatArraySum::Sum' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathFloatArrayAverage
// 0x0018 (0x0020 - 0x0008)
struct FRigVMFunction_MathFloatArrayAverage final : public FRigVMFunction_MathFloatBase
{
public:
	TArray<float>                                 Array;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Average;                                           // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathFloatArrayAverage) == 0x000008, "Wrong alignment on FRigVMFunction_MathFloatArrayAverage");
static_assert(sizeof(FRigVMFunction_MathFloatArrayAverage) == 0x000020, "Wrong size on FRigVMFunction_MathFloatArrayAverage");
static_assert(offsetof(FRigVMFunction_MathFloatArrayAverage, Array) == 0x000008, "Member 'FRigVMFunction_MathFloatArrayAverage::Array' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathFloatArrayAverage, Average) == 0x000018, "Member 'FRigVMFunction_MathFloatArrayAverage::Average' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathVectorFromFloat
// 0x0020 (0x0028 - 0x0008)
struct FRigVMFunction_MathVectorFromFloat final : public FRigVMFunction_MathVectorBase
{
public:
	float                                         Value;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Result;                                            // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathVectorFromFloat) == 0x000008, "Wrong alignment on FRigVMFunction_MathVectorFromFloat");
static_assert(sizeof(FRigVMFunction_MathVectorFromFloat) == 0x000028, "Wrong size on FRigVMFunction_MathVectorFromFloat");
static_assert(offsetof(FRigVMFunction_MathVectorFromFloat, Value) == 0x000008, "Member 'FRigVMFunction_MathVectorFromFloat::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorFromFloat, Result) == 0x000010, "Member 'FRigVMFunction_MathVectorFromFloat::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathTransformMirrorTransform
// 0x0138 (0x0140 - 0x0008)
struct FRigVMFunction_MathTransformMirrorTransform final : public FRigVMFunction_MathTransformBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Value;                                             // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         MirrorAxis;                                        // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         AxisToFlip;                                        // 0x0071(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0xE];                                       // 0x0072(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CentralTransform;                                  // 0x0080(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Result;                                            // 0x00E0(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathTransformMirrorTransform) == 0x000010, "Wrong alignment on FRigVMFunction_MathTransformMirrorTransform");
static_assert(sizeof(FRigVMFunction_MathTransformMirrorTransform) == 0x000140, "Wrong size on FRigVMFunction_MathTransformMirrorTransform");
static_assert(offsetof(FRigVMFunction_MathTransformMirrorTransform, Value) == 0x000010, "Member 'FRigVMFunction_MathTransformMirrorTransform::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformMirrorTransform, MirrorAxis) == 0x000070, "Member 'FRigVMFunction_MathTransformMirrorTransform::MirrorAxis' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformMirrorTransform, AxisToFlip) == 0x000071, "Member 'FRigVMFunction_MathTransformMirrorTransform::AxisToFlip' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformMirrorTransform, CentralTransform) == 0x000080, "Member 'FRigVMFunction_MathTransformMirrorTransform::CentralTransform' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformMirrorTransform, Result) == 0x0000E0, "Member 'FRigVMFunction_MathTransformMirrorTransform::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathIntBinaryOp
// 0x0010 (0x0018 - 0x0008)
struct FRigVMFunction_MathIntBinaryOp : public FRigVMFunction_MathIntBase
{
public:
	int32                                         A;                                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         B;                                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Result;                                            // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathIntBinaryOp) == 0x000008, "Wrong alignment on FRigVMFunction_MathIntBinaryOp");
static_assert(sizeof(FRigVMFunction_MathIntBinaryOp) == 0x000018, "Wrong size on FRigVMFunction_MathIntBinaryOp");
static_assert(offsetof(FRigVMFunction_MathIntBinaryOp, A) == 0x000008, "Member 'FRigVMFunction_MathIntBinaryOp::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathIntBinaryOp, B) == 0x00000C, "Member 'FRigVMFunction_MathIntBinaryOp::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathIntBinaryOp, Result) == 0x000010, "Member 'FRigVMFunction_MathIntBinaryOp::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathIntBinaryAggregateOp
// 0x0010 (0x0018 - 0x0008)
struct FRigVMFunction_MathIntBinaryAggregateOp : public FRigVMFunction_MathIntBase
{
public:
	int32                                         A;                                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         B;                                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Result;                                            // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathIntBinaryAggregateOp) == 0x000008, "Wrong alignment on FRigVMFunction_MathIntBinaryAggregateOp");
static_assert(sizeof(FRigVMFunction_MathIntBinaryAggregateOp) == 0x000018, "Wrong size on FRigVMFunction_MathIntBinaryAggregateOp");
static_assert(offsetof(FRigVMFunction_MathIntBinaryAggregateOp, A) == 0x000008, "Member 'FRigVMFunction_MathIntBinaryAggregateOp::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathIntBinaryAggregateOp, B) == 0x00000C, "Member 'FRigVMFunction_MathIntBinaryAggregateOp::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathIntBinaryAggregateOp, Result) == 0x000010, "Member 'FRigVMFunction_MathIntBinaryAggregateOp::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathTransformSelectBool
// 0x0128 (0x0130 - 0x0008)
struct FRigVMFunction_MathTransformSelectBool final : public FRigVMFunction_MathTransformBase
{
public:
	bool                                          Condition;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             IfTrue;                                            // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             IfFalse;                                           // 0x0070(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Result;                                            // 0x00D0(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathTransformSelectBool) == 0x000010, "Wrong alignment on FRigVMFunction_MathTransformSelectBool");
static_assert(sizeof(FRigVMFunction_MathTransformSelectBool) == 0x000130, "Wrong size on FRigVMFunction_MathTransformSelectBool");
static_assert(offsetof(FRigVMFunction_MathTransformSelectBool, Condition) == 0x000008, "Member 'FRigVMFunction_MathTransformSelectBool::Condition' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformSelectBool, IfTrue) == 0x000010, "Member 'FRigVMFunction_MathTransformSelectBool::IfTrue' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformSelectBool, IfFalse) == 0x000070, "Member 'FRigVMFunction_MathTransformSelectBool::IfFalse' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformSelectBool, Result) == 0x0000D0, "Member 'FRigVMFunction_MathTransformSelectBool::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathIntMake
// 0x0008 (0x0010 - 0x0008)
struct FRigVMFunction_MathIntMake final : public FRigVMFunction_MathIntBase
{
public:
	int32                                         Value;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathIntMake) == 0x000008, "Wrong alignment on FRigVMFunction_MathIntMake");
static_assert(sizeof(FRigVMFunction_MathIntMake) == 0x000010, "Wrong size on FRigVMFunction_MathIntMake");
static_assert(offsetof(FRigVMFunction_MathIntMake, Value) == 0x000008, "Member 'FRigVMFunction_MathIntMake::Value' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathIntAdd
// 0x0000 (0x0018 - 0x0018)
struct FRigVMFunction_MathIntAdd final : public FRigVMFunction_MathIntBinaryAggregateOp
{
};
static_assert(alignof(FRigVMFunction_MathIntAdd) == 0x000008, "Wrong alignment on FRigVMFunction_MathIntAdd");
static_assert(sizeof(FRigVMFunction_MathIntAdd) == 0x000018, "Wrong size on FRigVMFunction_MathIntAdd");

// ScriptStruct RigVM.RigVMFunction_MathVectorBinaryAggregateOp
// 0x0048 (0x0050 - 0x0008)
struct FRigVMFunction_MathVectorBinaryAggregateOp : public FRigVMFunction_MathVectorBase
{
public:
	struct FVector                                A;                                                 // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                B;                                                 // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Result;                                            // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathVectorBinaryAggregateOp) == 0x000008, "Wrong alignment on FRigVMFunction_MathVectorBinaryAggregateOp");
static_assert(sizeof(FRigVMFunction_MathVectorBinaryAggregateOp) == 0x000050, "Wrong size on FRigVMFunction_MathVectorBinaryAggregateOp");
static_assert(offsetof(FRigVMFunction_MathVectorBinaryAggregateOp, A) == 0x000008, "Member 'FRigVMFunction_MathVectorBinaryAggregateOp::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorBinaryAggregateOp, B) == 0x000020, "Member 'FRigVMFunction_MathVectorBinaryAggregateOp::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorBinaryAggregateOp, Result) == 0x000038, "Member 'FRigVMFunction_MathVectorBinaryAggregateOp::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathIntSub
// 0x0000 (0x0018 - 0x0018)
struct FRigVMFunction_MathIntSub final : public FRigVMFunction_MathIntBinaryOp
{
};
static_assert(alignof(FRigVMFunction_MathIntSub) == 0x000008, "Wrong alignment on FRigVMFunction_MathIntSub");
static_assert(sizeof(FRigVMFunction_MathIntSub) == 0x000018, "Wrong size on FRigVMFunction_MathIntSub");

// ScriptStruct RigVM.RigVMFunction_MathIntMul
// 0x0000 (0x0018 - 0x0018)
struct FRigVMFunction_MathIntMul final : public FRigVMFunction_MathIntBinaryAggregateOp
{
};
static_assert(alignof(FRigVMFunction_MathIntMul) == 0x000008, "Wrong alignment on FRigVMFunction_MathIntMul");
static_assert(sizeof(FRigVMFunction_MathIntMul) == 0x000018, "Wrong size on FRigVMFunction_MathIntMul");

// ScriptStruct RigVM.RigVMFunction_MathVectorMin
// 0x0000 (0x0050 - 0x0050)
struct FRigVMFunction_MathVectorMin final : public FRigVMFunction_MathVectorBinaryAggregateOp
{
};
static_assert(alignof(FRigVMFunction_MathVectorMin) == 0x000008, "Wrong alignment on FRigVMFunction_MathVectorMin");
static_assert(sizeof(FRigVMFunction_MathVectorMin) == 0x000050, "Wrong size on FRigVMFunction_MathVectorMin");

// ScriptStruct RigVM.RigVMFunction_MathIntDiv
// 0x0000 (0x0018 - 0x0018)
struct FRigVMFunction_MathIntDiv final : public FRigVMFunction_MathIntBinaryOp
{
};
static_assert(alignof(FRigVMFunction_MathIntDiv) == 0x000008, "Wrong alignment on FRigVMFunction_MathIntDiv");
static_assert(sizeof(FRigVMFunction_MathIntDiv) == 0x000018, "Wrong size on FRigVMFunction_MathIntDiv");

// ScriptStruct RigVM.RigVMFunction_MathIntMod
// 0x0000 (0x0018 - 0x0018)
struct FRigVMFunction_MathIntMod final : public FRigVMFunction_MathIntBinaryOp
{
};
static_assert(alignof(FRigVMFunction_MathIntMod) == 0x000008, "Wrong alignment on FRigVMFunction_MathIntMod");
static_assert(sizeof(FRigVMFunction_MathIntMod) == 0x000018, "Wrong size on FRigVMFunction_MathIntMod");

// ScriptStruct RigVM.RigVMFunction_MathVectorAdd
// 0x0000 (0x0050 - 0x0050)
struct FRigVMFunction_MathVectorAdd final : public FRigVMFunction_MathVectorBinaryAggregateOp
{
};
static_assert(alignof(FRigVMFunction_MathVectorAdd) == 0x000008, "Wrong alignment on FRigVMFunction_MathVectorAdd");
static_assert(sizeof(FRigVMFunction_MathVectorAdd) == 0x000050, "Wrong size on FRigVMFunction_MathVectorAdd");

// ScriptStruct RigVM.RigVMFunction_MathIntMin
// 0x0000 (0x0018 - 0x0018)
struct FRigVMFunction_MathIntMin final : public FRigVMFunction_MathIntBinaryAggregateOp
{
};
static_assert(alignof(FRigVMFunction_MathIntMin) == 0x000008, "Wrong alignment on FRigVMFunction_MathIntMin");
static_assert(sizeof(FRigVMFunction_MathIntMin) == 0x000018, "Wrong size on FRigVMFunction_MathIntMin");

// ScriptStruct RigVM.RigVMFunction_MathIntMax
// 0x0000 (0x0018 - 0x0018)
struct FRigVMFunction_MathIntMax final : public FRigVMFunction_MathIntBinaryAggregateOp
{
};
static_assert(alignof(FRigVMFunction_MathIntMax) == 0x000008, "Wrong alignment on FRigVMFunction_MathIntMax");
static_assert(sizeof(FRigVMFunction_MathIntMax) == 0x000018, "Wrong size on FRigVMFunction_MathIntMax");

// ScriptStruct RigVM.RigVMFunction_MathIntPow
// 0x0000 (0x0018 - 0x0018)
struct FRigVMFunction_MathIntPow final : public FRigVMFunction_MathIntBinaryOp
{
};
static_assert(alignof(FRigVMFunction_MathIntPow) == 0x000008, "Wrong alignment on FRigVMFunction_MathIntPow");
static_assert(sizeof(FRigVMFunction_MathIntPow) == 0x000018, "Wrong size on FRigVMFunction_MathIntPow");

// ScriptStruct RigVM.RigVMFunction_MathIntNegate
// 0x0000 (0x0010 - 0x0010)
struct FRigVMFunction_MathIntNegate final : public FRigVMFunction_MathIntUnaryOp
{
};
static_assert(alignof(FRigVMFunction_MathIntNegate) == 0x000008, "Wrong alignment on FRigVMFunction_MathIntNegate");
static_assert(sizeof(FRigVMFunction_MathIntNegate) == 0x000010, "Wrong size on FRigVMFunction_MathIntNegate");

// ScriptStruct RigVM.RigVMFunction_MathIntToFloat
// 0x0008 (0x0010 - 0x0008)
struct FRigVMFunction_MathIntToFloat final : public FRigVMFunction_MathIntBase
{
public:
	int32                                         Value;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Result;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathIntToFloat) == 0x000008, "Wrong alignment on FRigVMFunction_MathIntToFloat");
static_assert(sizeof(FRigVMFunction_MathIntToFloat) == 0x000010, "Wrong size on FRigVMFunction_MathIntToFloat");
static_assert(offsetof(FRigVMFunction_MathIntToFloat, Value) == 0x000008, "Member 'FRigVMFunction_MathIntToFloat::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathIntToFloat, Result) == 0x00000C, "Member 'FRigVMFunction_MathIntToFloat::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathVectorClamp
// 0x0060 (0x0068 - 0x0008)
struct FRigVMFunction_MathVectorClamp final : public FRigVMFunction_MathVectorBase
{
public:
	struct FVector                                Value;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Minimum;                                           // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Maximum;                                           // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Result;                                            // 0x0050(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathVectorClamp) == 0x000008, "Wrong alignment on FRigVMFunction_MathVectorClamp");
static_assert(sizeof(FRigVMFunction_MathVectorClamp) == 0x000068, "Wrong size on FRigVMFunction_MathVectorClamp");
static_assert(offsetof(FRigVMFunction_MathVectorClamp, Value) == 0x000008, "Member 'FRigVMFunction_MathVectorClamp::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorClamp, Minimum) == 0x000020, "Member 'FRigVMFunction_MathVectorClamp::Minimum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorClamp, Maximum) == 0x000038, "Member 'FRigVMFunction_MathVectorClamp::Maximum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorClamp, Result) == 0x000050, "Member 'FRigVMFunction_MathVectorClamp::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathIntToDouble
// 0x0010 (0x0018 - 0x0008)
struct FRigVMFunction_MathIntToDouble final : public FRigVMFunction_MathIntBase
{
public:
	int32                                         Value;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Result;                                            // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathIntToDouble) == 0x000008, "Wrong alignment on FRigVMFunction_MathIntToDouble");
static_assert(sizeof(FRigVMFunction_MathIntToDouble) == 0x000018, "Wrong size on FRigVMFunction_MathIntToDouble");
static_assert(offsetof(FRigVMFunction_MathIntToDouble, Value) == 0x000008, "Member 'FRigVMFunction_MathIntToDouble::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathIntToDouble, Result) == 0x000010, "Member 'FRigVMFunction_MathIntToDouble::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathIntSign
// 0x0000 (0x0010 - 0x0010)
struct FRigVMFunction_MathIntSign final : public FRigVMFunction_MathIntUnaryOp
{
};
static_assert(alignof(FRigVMFunction_MathIntSign) == 0x000008, "Wrong alignment on FRigVMFunction_MathIntSign");
static_assert(sizeof(FRigVMFunction_MathIntSign) == 0x000010, "Wrong size on FRigVMFunction_MathIntSign");

// ScriptStruct RigVM.RigVMFunction_MathVectorNegate
// 0x0000 (0x0038 - 0x0038)
struct FRigVMFunction_MathVectorNegate final : public FRigVMFunction_MathVectorUnaryOp
{
};
static_assert(alignof(FRigVMFunction_MathVectorNegate) == 0x000008, "Wrong alignment on FRigVMFunction_MathVectorNegate");
static_assert(sizeof(FRigVMFunction_MathVectorNegate) == 0x000038, "Wrong size on FRigVMFunction_MathVectorNegate");

// ScriptStruct RigVM.RigVMFunction_MathIntClamp
// 0x0010 (0x0018 - 0x0008)
struct FRigVMFunction_MathIntClamp final : public FRigVMFunction_MathIntBase
{
public:
	int32                                         Value;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minimum;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Maximum;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Result;                                            // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathIntClamp) == 0x000008, "Wrong alignment on FRigVMFunction_MathIntClamp");
static_assert(sizeof(FRigVMFunction_MathIntClamp) == 0x000018, "Wrong size on FRigVMFunction_MathIntClamp");
static_assert(offsetof(FRigVMFunction_MathIntClamp, Value) == 0x000008, "Member 'FRigVMFunction_MathIntClamp::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathIntClamp, Minimum) == 0x00000C, "Member 'FRigVMFunction_MathIntClamp::Minimum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathIntClamp, Maximum) == 0x000010, "Member 'FRigVMFunction_MathIntClamp::Maximum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathIntClamp, Result) == 0x000014, "Member 'FRigVMFunction_MathIntClamp::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathIntEquals
// 0x0010 (0x0018 - 0x0008)
struct FRigVMFunction_MathIntEquals final : public FRigVMFunction_MathIntBase
{
public:
	int32                                         A;                                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         B;                                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathIntEquals) == 0x000008, "Wrong alignment on FRigVMFunction_MathIntEquals");
static_assert(sizeof(FRigVMFunction_MathIntEquals) == 0x000018, "Wrong size on FRigVMFunction_MathIntEquals");
static_assert(offsetof(FRigVMFunction_MathIntEquals, A) == 0x000008, "Member 'FRigVMFunction_MathIntEquals::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathIntEquals, B) == 0x00000C, "Member 'FRigVMFunction_MathIntEquals::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathIntEquals, Result) == 0x000010, "Member 'FRigVMFunction_MathIntEquals::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathVectorMul
// 0x0000 (0x0050 - 0x0050)
struct FRigVMFunction_MathVectorMul final : public FRigVMFunction_MathVectorBinaryAggregateOp
{
};
static_assert(alignof(FRigVMFunction_MathVectorMul) == 0x000008, "Wrong alignment on FRigVMFunction_MathVectorMul");
static_assert(sizeof(FRigVMFunction_MathVectorMul) == 0x000050, "Wrong size on FRigVMFunction_MathVectorMul");

// ScriptStruct RigVM.RigVMFunction_MathIntNotEquals
// 0x0010 (0x0018 - 0x0008)
struct FRigVMFunction_MathIntNotEquals final : public FRigVMFunction_MathIntBase
{
public:
	int32                                         A;                                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         B;                                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathIntNotEquals) == 0x000008, "Wrong alignment on FRigVMFunction_MathIntNotEquals");
static_assert(sizeof(FRigVMFunction_MathIntNotEquals) == 0x000018, "Wrong size on FRigVMFunction_MathIntNotEquals");
static_assert(offsetof(FRigVMFunction_MathIntNotEquals, A) == 0x000008, "Member 'FRigVMFunction_MathIntNotEquals::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathIntNotEquals, B) == 0x00000C, "Member 'FRigVMFunction_MathIntNotEquals::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathIntNotEquals, Result) == 0x000010, "Member 'FRigVMFunction_MathIntNotEquals::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathIntLess
// 0x0010 (0x0018 - 0x0008)
struct FRigVMFunction_MathIntLess final : public FRigVMFunction_MathIntBase
{
public:
	int32                                         A;                                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         B;                                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathIntLess) == 0x000008, "Wrong alignment on FRigVMFunction_MathIntLess");
static_assert(sizeof(FRigVMFunction_MathIntLess) == 0x000018, "Wrong size on FRigVMFunction_MathIntLess");
static_assert(offsetof(FRigVMFunction_MathIntLess, A) == 0x000008, "Member 'FRigVMFunction_MathIntLess::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathIntLess, B) == 0x00000C, "Member 'FRigVMFunction_MathIntLess::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathIntLess, Result) == 0x000010, "Member 'FRigVMFunction_MathIntLess::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathIntLessEqual
// 0x0010 (0x0018 - 0x0008)
struct FRigVMFunction_MathIntLessEqual final : public FRigVMFunction_MathIntBase
{
public:
	int32                                         A;                                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         B;                                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathIntLessEqual) == 0x000008, "Wrong alignment on FRigVMFunction_MathIntLessEqual");
static_assert(sizeof(FRigVMFunction_MathIntLessEqual) == 0x000018, "Wrong size on FRigVMFunction_MathIntLessEqual");
static_assert(offsetof(FRigVMFunction_MathIntLessEqual, A) == 0x000008, "Member 'FRigVMFunction_MathIntLessEqual::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathIntLessEqual, B) == 0x00000C, "Member 'FRigVMFunction_MathIntLessEqual::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathIntLessEqual, Result) == 0x000010, "Member 'FRigVMFunction_MathIntLessEqual::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathIntArrayAverage
// 0x0018 (0x0020 - 0x0008)
struct FRigVMFunction_MathIntArrayAverage final : public FRigVMFunction_MathIntBase
{
public:
	TArray<int32>                                 Array;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Average;                                           // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathIntArrayAverage) == 0x000008, "Wrong alignment on FRigVMFunction_MathIntArrayAverage");
static_assert(sizeof(FRigVMFunction_MathIntArrayAverage) == 0x000020, "Wrong size on FRigVMFunction_MathIntArrayAverage");
static_assert(offsetof(FRigVMFunction_MathIntArrayAverage, Array) == 0x000008, "Member 'FRigVMFunction_MathIntArrayAverage::Array' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathIntArrayAverage, Average) == 0x000018, "Member 'FRigVMFunction_MathIntArrayAverage::Average' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathIntToName
// 0x0010 (0x0018 - 0x0008)
struct FRigVMFunction_MathIntToName final : public FRigVMFunction_MathIntBase
{
public:
	int32                                         Number;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PaddedSize;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Result;                                            // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathIntToName) == 0x000008, "Wrong alignment on FRigVMFunction_MathIntToName");
static_assert(sizeof(FRigVMFunction_MathIntToName) == 0x000018, "Wrong size on FRigVMFunction_MathIntToName");
static_assert(offsetof(FRigVMFunction_MathIntToName, Number) == 0x000008, "Member 'FRigVMFunction_MathIntToName::Number' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathIntToName, PaddedSize) == 0x00000C, "Member 'FRigVMFunction_MathIntToName::PaddedSize' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathIntToName, Result) == 0x000010, "Member 'FRigVMFunction_MathIntToName::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathMatrixBinaryAggregateOp
// 0x0188 (0x0190 - 0x0008)
struct FRigVMFunction_MathMatrixBinaryAggregateOp : public FRigVMFunction_MathMatrixBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatrix                                A;                                                 // 0x0010(0x0080)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMatrix                                B;                                                 // 0x0090(0x0080)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMatrix                                Result;                                            // 0x0110(0x0080)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathMatrixBinaryAggregateOp) == 0x000010, "Wrong alignment on FRigVMFunction_MathMatrixBinaryAggregateOp");
static_assert(sizeof(FRigVMFunction_MathMatrixBinaryAggregateOp) == 0x000190, "Wrong size on FRigVMFunction_MathMatrixBinaryAggregateOp");
static_assert(offsetof(FRigVMFunction_MathMatrixBinaryAggregateOp, A) == 0x000010, "Member 'FRigVMFunction_MathMatrixBinaryAggregateOp::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathMatrixBinaryAggregateOp, B) == 0x000090, "Member 'FRigVMFunction_MathMatrixBinaryAggregateOp::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathMatrixBinaryAggregateOp, Result) == 0x000110, "Member 'FRigVMFunction_MathMatrixBinaryAggregateOp::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathMatrixFromTransform
// 0x00E8 (0x00F0 - 0x0008)
struct FRigVMFunction_MathMatrixFromTransform final : public FRigVMFunction_MathMatrixBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMatrix                                Result;                                            // 0x0070(0x0080)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathMatrixFromTransform) == 0x000010, "Wrong alignment on FRigVMFunction_MathMatrixFromTransform");
static_assert(sizeof(FRigVMFunction_MathMatrixFromTransform) == 0x0000F0, "Wrong size on FRigVMFunction_MathMatrixFromTransform");
static_assert(offsetof(FRigVMFunction_MathMatrixFromTransform, Transform) == 0x000010, "Member 'FRigVMFunction_MathMatrixFromTransform::Transform' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathMatrixFromTransform, Result) == 0x000070, "Member 'FRigVMFunction_MathMatrixFromTransform::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathMatrixToVectors
// 0x00E8 (0x00F0 - 0x0008)
struct FRigVMFunction_MathMatrixToVectors final : public FRigVMFunction_MathMatrixBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatrix                                Value;                                             // 0x0010(0x0080)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0090(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                X;                                                 // 0x00A8(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Y;                                                 // 0x00C0(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Z;                                                 // 0x00D8(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathMatrixToVectors) == 0x000010, "Wrong alignment on FRigVMFunction_MathMatrixToVectors");
static_assert(sizeof(FRigVMFunction_MathMatrixToVectors) == 0x0000F0, "Wrong size on FRigVMFunction_MathMatrixToVectors");
static_assert(offsetof(FRigVMFunction_MathMatrixToVectors, Value) == 0x000010, "Member 'FRigVMFunction_MathMatrixToVectors::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathMatrixToVectors, Origin) == 0x000090, "Member 'FRigVMFunction_MathMatrixToVectors::Origin' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathMatrixToVectors, X) == 0x0000A8, "Member 'FRigVMFunction_MathMatrixToVectors::X' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathMatrixToVectors, Y) == 0x0000C0, "Member 'FRigVMFunction_MathMatrixToVectors::Y' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathMatrixToVectors, Z) == 0x0000D8, "Member 'FRigVMFunction_MathMatrixToVectors::Z' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathMatrixMul
// 0x0000 (0x0190 - 0x0190)
struct FRigVMFunction_MathMatrixMul final : public FRigVMFunction_MathMatrixBinaryAggregateOp
{
};
static_assert(alignof(FRigVMFunction_MathMatrixMul) == 0x000010, "Wrong alignment on FRigVMFunction_MathMatrixMul");
static_assert(sizeof(FRigVMFunction_MathMatrixMul) == 0x000190, "Wrong size on FRigVMFunction_MathMatrixMul");

// ScriptStruct RigVM.RigVMFunction_MathQuaternionBinaryOp
// 0x0068 (0x0070 - 0x0008)
struct FRigVMFunction_MathQuaternionBinaryOp final : public FRigVMFunction_MathQuaternionBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  A;                                                 // 0x0010(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  B;                                                 // 0x0030(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  Result;                                            // 0x0050(0x0020)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathQuaternionBinaryOp) == 0x000010, "Wrong alignment on FRigVMFunction_MathQuaternionBinaryOp");
static_assert(sizeof(FRigVMFunction_MathQuaternionBinaryOp) == 0x000070, "Wrong size on FRigVMFunction_MathQuaternionBinaryOp");
static_assert(offsetof(FRigVMFunction_MathQuaternionBinaryOp, A) == 0x000010, "Member 'FRigVMFunction_MathQuaternionBinaryOp::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionBinaryOp, B) == 0x000030, "Member 'FRigVMFunction_MathQuaternionBinaryOp::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionBinaryOp, Result) == 0x000050, "Member 'FRigVMFunction_MathQuaternionBinaryOp::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathQuaternionMake
// 0x0038 (0x0040 - 0x0008)
struct FRigVMFunction_MathQuaternionMake final : public FRigVMFunction_MathQuaternionBase
{
public:
	float                                         X;                                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         W;                                                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Result;                                            // 0x0020(0x0020)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathQuaternionMake) == 0x000010, "Wrong alignment on FRigVMFunction_MathQuaternionMake");
static_assert(sizeof(FRigVMFunction_MathQuaternionMake) == 0x000040, "Wrong size on FRigVMFunction_MathQuaternionMake");
static_assert(offsetof(FRigVMFunction_MathQuaternionMake, X) == 0x000008, "Member 'FRigVMFunction_MathQuaternionMake::X' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionMake, Y) == 0x00000C, "Member 'FRigVMFunction_MathQuaternionMake::Y' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionMake, Z) == 0x000010, "Member 'FRigVMFunction_MathQuaternionMake::Z' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionMake, W) == 0x000014, "Member 'FRigVMFunction_MathQuaternionMake::W' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionMake, Result) == 0x000020, "Member 'FRigVMFunction_MathQuaternionMake::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathQuaternionFromEuler
// 0x0048 (0x0050 - 0x0008)
struct FRigVMFunction_MathQuaternionFromEuler final : public FRigVMFunction_MathQuaternionBase
{
public:
	struct FVector                                Euler;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEulerRotationOrder                           RotationOrder;                                     // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0xF];                                       // 0x0021(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Result;                                            // 0x0030(0x0020)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathQuaternionFromEuler) == 0x000010, "Wrong alignment on FRigVMFunction_MathQuaternionFromEuler");
static_assert(sizeof(FRigVMFunction_MathQuaternionFromEuler) == 0x000050, "Wrong size on FRigVMFunction_MathQuaternionFromEuler");
static_assert(offsetof(FRigVMFunction_MathQuaternionFromEuler, Euler) == 0x000008, "Member 'FRigVMFunction_MathQuaternionFromEuler::Euler' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionFromEuler, RotationOrder) == 0x000020, "Member 'FRigVMFunction_MathQuaternionFromEuler::RotationOrder' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionFromEuler, Result) == 0x000030, "Member 'FRigVMFunction_MathQuaternionFromEuler::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathQuaternionFromRotatorV2
// 0x0038 (0x0040 - 0x0008)
struct FRigVMFunction_MathQuaternionFromRotatorV2 final : public FRigVMFunction_MathQuaternionBase
{
public:
	struct FRotator                               Value;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FQuat                                  Result;                                            // 0x0020(0x0020)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathQuaternionFromRotatorV2) == 0x000010, "Wrong alignment on FRigVMFunction_MathQuaternionFromRotatorV2");
static_assert(sizeof(FRigVMFunction_MathQuaternionFromRotatorV2) == 0x000040, "Wrong size on FRigVMFunction_MathQuaternionFromRotatorV2");
static_assert(offsetof(FRigVMFunction_MathQuaternionFromRotatorV2, Value) == 0x000008, "Member 'FRigVMFunction_MathQuaternionFromRotatorV2::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionFromRotatorV2, Result) == 0x000020, "Member 'FRigVMFunction_MathQuaternionFromRotatorV2::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathQuaternionToAxisAndAngle
// 0x0048 (0x0050 - 0x0008)
struct FRigVMFunction_MathQuaternionToAxisAndAngle final : public FRigVMFunction_MathQuaternionBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Value;                                             // 0x0010(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Axis;                                              // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathQuaternionToAxisAndAngle) == 0x000010, "Wrong alignment on FRigVMFunction_MathQuaternionToAxisAndAngle");
static_assert(sizeof(FRigVMFunction_MathQuaternionToAxisAndAngle) == 0x000050, "Wrong size on FRigVMFunction_MathQuaternionToAxisAndAngle");
static_assert(offsetof(FRigVMFunction_MathQuaternionToAxisAndAngle, Value) == 0x000010, "Member 'FRigVMFunction_MathQuaternionToAxisAndAngle::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionToAxisAndAngle, Axis) == 0x000030, "Member 'FRigVMFunction_MathQuaternionToAxisAndAngle::Axis' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionToAxisAndAngle, Angle) == 0x000048, "Member 'FRigVMFunction_MathQuaternionToAxisAndAngle::Angle' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathQuaternionScale
// 0x0038 (0x0040 - 0x0008)
struct FRigVMFunction_MathQuaternionScale final : public FRigVMFunction_MathQuaternionBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Value;                                             // 0x0010(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0xC];                                       // 0x0034(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathQuaternionScale) == 0x000010, "Wrong alignment on FRigVMFunction_MathQuaternionScale");
static_assert(sizeof(FRigVMFunction_MathQuaternionScale) == 0x000040, "Wrong size on FRigVMFunction_MathQuaternionScale");
static_assert(offsetof(FRigVMFunction_MathQuaternionScale, Value) == 0x000010, "Member 'FRigVMFunction_MathQuaternionScale::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionScale, Scale) == 0x000030, "Member 'FRigVMFunction_MathQuaternionScale::Scale' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathQuaternionToEuler
// 0x0048 (0x0050 - 0x0008)
struct FRigVMFunction_MathQuaternionToEuler final : public FRigVMFunction_MathQuaternionBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Value;                                             // 0x0010(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEulerRotationOrder                           RotationOrder;                                     // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Result;                                            // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathQuaternionToEuler) == 0x000010, "Wrong alignment on FRigVMFunction_MathQuaternionToEuler");
static_assert(sizeof(FRigVMFunction_MathQuaternionToEuler) == 0x000050, "Wrong size on FRigVMFunction_MathQuaternionToEuler");
static_assert(offsetof(FRigVMFunction_MathQuaternionToEuler, Value) == 0x000010, "Member 'FRigVMFunction_MathQuaternionToEuler::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionToEuler, RotationOrder) == 0x000030, "Member 'FRigVMFunction_MathQuaternionToEuler::RotationOrder' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionToEuler, Result) == 0x000038, "Member 'FRigVMFunction_MathQuaternionToEuler::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathQuaternionMul
// 0x0000 (0x0070 - 0x0070)
struct FRigVMFunction_MathQuaternionMul final : public FRigVMFunction_MathQuaternionBinaryAggregateOp
{
};
static_assert(alignof(FRigVMFunction_MathQuaternionMul) == 0x000010, "Wrong alignment on FRigVMFunction_MathQuaternionMul");
static_assert(sizeof(FRigVMFunction_MathQuaternionMul) == 0x000070, "Wrong size on FRigVMFunction_MathQuaternionMul");

// ScriptStruct RigVM.RigVMFunction_MathQuaternionSlerp
// 0x0078 (0x0080 - 0x0008)
struct FRigVMFunction_MathQuaternionSlerp final : public FRigVMFunction_MathQuaternionBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  A;                                                 // 0x0010(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  B;                                                 // 0x0030(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         T;                                                 // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0xC];                                       // 0x0054(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Result;                                            // 0x0060(0x0020)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathQuaternionSlerp) == 0x000010, "Wrong alignment on FRigVMFunction_MathQuaternionSlerp");
static_assert(sizeof(FRigVMFunction_MathQuaternionSlerp) == 0x000080, "Wrong size on FRigVMFunction_MathQuaternionSlerp");
static_assert(offsetof(FRigVMFunction_MathQuaternionSlerp, A) == 0x000010, "Member 'FRigVMFunction_MathQuaternionSlerp::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionSlerp, B) == 0x000030, "Member 'FRigVMFunction_MathQuaternionSlerp::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionSlerp, T) == 0x000050, "Member 'FRigVMFunction_MathQuaternionSlerp::T' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionSlerp, Result) == 0x000060, "Member 'FRigVMFunction_MathQuaternionSlerp::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathQuaternionNotEquals
// 0x0058 (0x0060 - 0x0008)
struct FRigVMFunction_MathQuaternionNotEquals final : public FRigVMFunction_MathQuaternionBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  A;                                                 // 0x0010(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  B;                                                 // 0x0030(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0050(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0xF];                                       // 0x0051(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathQuaternionNotEquals) == 0x000010, "Wrong alignment on FRigVMFunction_MathQuaternionNotEquals");
static_assert(sizeof(FRigVMFunction_MathQuaternionNotEquals) == 0x000060, "Wrong size on FRigVMFunction_MathQuaternionNotEquals");
static_assert(offsetof(FRigVMFunction_MathQuaternionNotEquals, A) == 0x000010, "Member 'FRigVMFunction_MathQuaternionNotEquals::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionNotEquals, B) == 0x000030, "Member 'FRigVMFunction_MathQuaternionNotEquals::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionNotEquals, Result) == 0x000050, "Member 'FRigVMFunction_MathQuaternionNotEquals::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathQuaternionDot
// 0x0058 (0x0060 - 0x0008)
struct FRigVMFunction_MathQuaternionDot final : public FRigVMFunction_MathQuaternionBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  A;                                                 // 0x0010(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  B;                                                 // 0x0030(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Result;                                            // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0xC];                                       // 0x0054(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathQuaternionDot) == 0x000010, "Wrong alignment on FRigVMFunction_MathQuaternionDot");
static_assert(sizeof(FRigVMFunction_MathQuaternionDot) == 0x000060, "Wrong size on FRigVMFunction_MathQuaternionDot");
static_assert(offsetof(FRigVMFunction_MathQuaternionDot, A) == 0x000010, "Member 'FRigVMFunction_MathQuaternionDot::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionDot, B) == 0x000030, "Member 'FRigVMFunction_MathQuaternionDot::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionDot, Result) == 0x000050, "Member 'FRigVMFunction_MathQuaternionDot::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathQuaternionRotateVector
// 0x0058 (0x0060 - 0x0008)
struct FRigVMFunction_MathQuaternionRotateVector final : public FRigVMFunction_MathQuaternionBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Transform;                                         // 0x0010(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Vector;                                            // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Result;                                            // 0x0048(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathQuaternionRotateVector) == 0x000010, "Wrong alignment on FRigVMFunction_MathQuaternionRotateVector");
static_assert(sizeof(FRigVMFunction_MathQuaternionRotateVector) == 0x000060, "Wrong size on FRigVMFunction_MathQuaternionRotateVector");
static_assert(offsetof(FRigVMFunction_MathQuaternionRotateVector, Transform) == 0x000010, "Member 'FRigVMFunction_MathQuaternionRotateVector::Transform' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionRotateVector, Vector) == 0x000030, "Member 'FRigVMFunction_MathQuaternionRotateVector::Vector' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionRotateVector, Result) == 0x000048, "Member 'FRigVMFunction_MathQuaternionRotateVector::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathQuaternionSwingTwist
// 0x0088 (0x0090 - 0x0008)
struct FRigVMFunction_MathQuaternionSwingTwist final : public FRigVMFunction_MathQuaternionBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Input;                                             // 0x0010(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TwistAxis;                                         // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Swing;                                             // 0x0050(0x0020)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  Twist;                                             // 0x0070(0x0020)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathQuaternionSwingTwist) == 0x000010, "Wrong alignment on FRigVMFunction_MathQuaternionSwingTwist");
static_assert(sizeof(FRigVMFunction_MathQuaternionSwingTwist) == 0x000090, "Wrong size on FRigVMFunction_MathQuaternionSwingTwist");
static_assert(offsetof(FRigVMFunction_MathQuaternionSwingTwist, Input) == 0x000010, "Member 'FRigVMFunction_MathQuaternionSwingTwist::Input' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionSwingTwist, TwistAxis) == 0x000030, "Member 'FRigVMFunction_MathQuaternionSwingTwist::TwistAxis' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionSwingTwist, Swing) == 0x000050, "Member 'FRigVMFunction_MathQuaternionSwingTwist::Swing' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionSwingTwist, Twist) == 0x000070, "Member 'FRigVMFunction_MathQuaternionSwingTwist::Twist' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathQuaternionMakeRelative
// 0x0068 (0x0070 - 0x0008)
struct FRigVMFunction_MathQuaternionMakeRelative final : public FRigVMFunction_MathQuaternionBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Global;                                            // 0x0010(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  Parent;                                            // 0x0030(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  Local;                                             // 0x0050(0x0020)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathQuaternionMakeRelative) == 0x000010, "Wrong alignment on FRigVMFunction_MathQuaternionMakeRelative");
static_assert(sizeof(FRigVMFunction_MathQuaternionMakeRelative) == 0x000070, "Wrong size on FRigVMFunction_MathQuaternionMakeRelative");
static_assert(offsetof(FRigVMFunction_MathQuaternionMakeRelative, Global) == 0x000010, "Member 'FRigVMFunction_MathQuaternionMakeRelative::Global' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionMakeRelative, Parent) == 0x000030, "Member 'FRigVMFunction_MathQuaternionMakeRelative::Parent' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionMakeRelative, Local) == 0x000050, "Member 'FRigVMFunction_MathQuaternionMakeRelative::Local' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathQuaternionMirrorTransform
// 0x00B8 (0x00C0 - 0x0008)
struct FRigVMFunction_MathQuaternionMirrorTransform final : public FRigVMFunction_MathQuaternionBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Value;                                             // 0x0010(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         MirrorAxis;                                        // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         AxisToFlip;                                        // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0xE];                                       // 0x0032(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CentralTransform;                                  // 0x0040(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  Result;                                            // 0x00A0(0x0020)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathQuaternionMirrorTransform) == 0x000010, "Wrong alignment on FRigVMFunction_MathQuaternionMirrorTransform");
static_assert(sizeof(FRigVMFunction_MathQuaternionMirrorTransform) == 0x0000C0, "Wrong size on FRigVMFunction_MathQuaternionMirrorTransform");
static_assert(offsetof(FRigVMFunction_MathQuaternionMirrorTransform, Value) == 0x000010, "Member 'FRigVMFunction_MathQuaternionMirrorTransform::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionMirrorTransform, MirrorAxis) == 0x000030, "Member 'FRigVMFunction_MathQuaternionMirrorTransform::MirrorAxis' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionMirrorTransform, AxisToFlip) == 0x000031, "Member 'FRigVMFunction_MathQuaternionMirrorTransform::AxisToFlip' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionMirrorTransform, CentralTransform) == 0x000040, "Member 'FRigVMFunction_MathQuaternionMirrorTransform::CentralTransform' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathQuaternionMirrorTransform, Result) == 0x0000A0, "Member 'FRigVMFunction_MathQuaternionMirrorTransform::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathRayIntersectRay
// 0x0088 (0x0090 - 0x0008)
struct FRigVMFunction_MathRayIntersectRay final : public FRigVMFunction_MathRayBase
{
public:
	struct FRay                                   A;                                                 // 0x0008(0x0030)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRay                                   B;                                                 // 0x0038(0x0030)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Result;                                            // 0x0068(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0080(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RatioA;                                            // 0x0084(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RatioB;                                            // 0x0088(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathRayIntersectRay) == 0x000008, "Wrong alignment on FRigVMFunction_MathRayIntersectRay");
static_assert(sizeof(FRigVMFunction_MathRayIntersectRay) == 0x000090, "Wrong size on FRigVMFunction_MathRayIntersectRay");
static_assert(offsetof(FRigVMFunction_MathRayIntersectRay, A) == 0x000008, "Member 'FRigVMFunction_MathRayIntersectRay::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathRayIntersectRay, B) == 0x000038, "Member 'FRigVMFunction_MathRayIntersectRay::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathRayIntersectRay, Result) == 0x000068, "Member 'FRigVMFunction_MathRayIntersectRay::Result' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathRayIntersectRay, Distance) == 0x000080, "Member 'FRigVMFunction_MathRayIntersectRay::Distance' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathRayIntersectRay, RatioA) == 0x000084, "Member 'FRigVMFunction_MathRayIntersectRay::RatioA' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathRayIntersectRay, RatioB) == 0x000088, "Member 'FRigVMFunction_MathRayIntersectRay::RatioB' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathRayGetAt
// 0x0050 (0x0058 - 0x0008)
struct FRigVMFunction_MathRayGetAt final : public FRigVMFunction_MathRayBase
{
public:
	struct FRay                                   Ray;                                               // 0x0008(0x0030)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Ratio;                                             // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Result;                                            // 0x0040(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathRayGetAt) == 0x000008, "Wrong alignment on FRigVMFunction_MathRayGetAt");
static_assert(sizeof(FRigVMFunction_MathRayGetAt) == 0x000058, "Wrong size on FRigVMFunction_MathRayGetAt");
static_assert(offsetof(FRigVMFunction_MathRayGetAt, Ray) == 0x000008, "Member 'FRigVMFunction_MathRayGetAt::Ray' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathRayGetAt, Ratio) == 0x000038, "Member 'FRigVMFunction_MathRayGetAt::Ratio' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathRayGetAt, Result) == 0x000040, "Member 'FRigVMFunction_MathRayGetAt::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathRBFInterpolateVectorBase
// 0x00B8 (0x00C0 - 0x0008)
struct FRigVMFunction_MathRBFInterpolateVectorBase : public FRigVMFunction_MathRBFInterpolateBase
{
public:
	struct FVector                                Input;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERBFVectorDistanceType                        DistanceFunction;                                  // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERBFKernelType                                SmoothingFunction;                                 // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SmoothingRadius;                                   // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNormalizeOutput;                                  // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigVMFunction_MathRBFInterpolateVectorWorkData WorkData;                                          // 0x0030(0x0090)(Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathRBFInterpolateVectorBase) == 0x000010, "Wrong alignment on FRigVMFunction_MathRBFInterpolateVectorBase");
static_assert(sizeof(FRigVMFunction_MathRBFInterpolateVectorBase) == 0x0000C0, "Wrong size on FRigVMFunction_MathRBFInterpolateVectorBase");
static_assert(offsetof(FRigVMFunction_MathRBFInterpolateVectorBase, Input) == 0x000008, "Member 'FRigVMFunction_MathRBFInterpolateVectorBase::Input' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathRBFInterpolateVectorBase, DistanceFunction) == 0x000020, "Member 'FRigVMFunction_MathRBFInterpolateVectorBase::DistanceFunction' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathRBFInterpolateVectorBase, SmoothingFunction) == 0x000021, "Member 'FRigVMFunction_MathRBFInterpolateVectorBase::SmoothingFunction' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathRBFInterpolateVectorBase, SmoothingRadius) == 0x000024, "Member 'FRigVMFunction_MathRBFInterpolateVectorBase::SmoothingRadius' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathRBFInterpolateVectorBase, bNormalizeOutput) == 0x000028, "Member 'FRigVMFunction_MathRBFInterpolateVectorBase::bNormalizeOutput' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathRBFInterpolateVectorBase, WorkData) == 0x000030, "Member 'FRigVMFunction_MathRBFInterpolateVectorBase::WorkData' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathRBFInterpolateQuatFloat
// 0x0020 (0x0110 - 0x00F0)
struct FRigVMFunction_MathRBFInterpolateQuatFloat final : public FRigVMFunction_MathRBFInterpolateQuatBase
{
public:
	TArray<struct FMathRBFInterpolateQuatFloat_Target> Targets;                                           // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Output;                                            // 0x0100(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_104[0xC];                                      // 0x0104(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathRBFInterpolateQuatFloat) == 0x000010, "Wrong alignment on FRigVMFunction_MathRBFInterpolateQuatFloat");
static_assert(sizeof(FRigVMFunction_MathRBFInterpolateQuatFloat) == 0x000110, "Wrong size on FRigVMFunction_MathRBFInterpolateQuatFloat");
static_assert(offsetof(FRigVMFunction_MathRBFInterpolateQuatFloat, Targets) == 0x0000F0, "Member 'FRigVMFunction_MathRBFInterpolateQuatFloat::Targets' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathRBFInterpolateQuatFloat, Output) == 0x000100, "Member 'FRigVMFunction_MathRBFInterpolateQuatFloat::Output' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathRBFInterpolateQuatVector
// 0x0030 (0x0120 - 0x00F0)
struct FRigVMFunction_MathRBFInterpolateQuatVector final : public FRigVMFunction_MathRBFInterpolateQuatBase
{
public:
	TArray<struct FMathRBFInterpolateQuatVector_Target> Targets;                                           // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                Output;                                            // 0x0100(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathRBFInterpolateQuatVector) == 0x000010, "Wrong alignment on FRigVMFunction_MathRBFInterpolateQuatVector");
static_assert(sizeof(FRigVMFunction_MathRBFInterpolateQuatVector) == 0x000120, "Wrong size on FRigVMFunction_MathRBFInterpolateQuatVector");
static_assert(offsetof(FRigVMFunction_MathRBFInterpolateQuatVector, Targets) == 0x0000F0, "Member 'FRigVMFunction_MathRBFInterpolateQuatVector::Targets' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathRBFInterpolateQuatVector, Output) == 0x000100, "Member 'FRigVMFunction_MathRBFInterpolateQuatVector::Output' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathRBFInterpolateQuatColor
// 0x0020 (0x0110 - 0x00F0)
struct FRigVMFunction_MathRBFInterpolateQuatColor final : public FRigVMFunction_MathRBFInterpolateQuatBase
{
public:
	TArray<struct FMathRBFInterpolateQuatColor_Target> Targets;                                           // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           Output;                                            // 0x0100(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathRBFInterpolateQuatColor) == 0x000010, "Wrong alignment on FRigVMFunction_MathRBFInterpolateQuatColor");
static_assert(sizeof(FRigVMFunction_MathRBFInterpolateQuatColor) == 0x000110, "Wrong size on FRigVMFunction_MathRBFInterpolateQuatColor");
static_assert(offsetof(FRigVMFunction_MathRBFInterpolateQuatColor, Targets) == 0x0000F0, "Member 'FRigVMFunction_MathRBFInterpolateQuatColor::Targets' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathRBFInterpolateQuatColor, Output) == 0x000100, "Member 'FRigVMFunction_MathRBFInterpolateQuatColor::Output' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathRBFInterpolateQuatQuat
// 0x0030 (0x0120 - 0x00F0)
struct FRigVMFunction_MathRBFInterpolateQuatQuat final : public FRigVMFunction_MathRBFInterpolateQuatBase
{
public:
	TArray<struct FMathRBFInterpolateQuatQuat_Target> Targets;                                           // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FQuat                                  Output;                                            // 0x0100(0x0020)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathRBFInterpolateQuatQuat) == 0x000010, "Wrong alignment on FRigVMFunction_MathRBFInterpolateQuatQuat");
static_assert(sizeof(FRigVMFunction_MathRBFInterpolateQuatQuat) == 0x000120, "Wrong size on FRigVMFunction_MathRBFInterpolateQuatQuat");
static_assert(offsetof(FRigVMFunction_MathRBFInterpolateQuatQuat, Targets) == 0x0000F0, "Member 'FRigVMFunction_MathRBFInterpolateQuatQuat::Targets' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathRBFInterpolateQuatQuat, Output) == 0x000100, "Member 'FRigVMFunction_MathRBFInterpolateQuatQuat::Output' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathRBFInterpolateQuatXform
// 0x0070 (0x0160 - 0x00F0)
struct FRigVMFunction_MathRBFInterpolateQuatXform final : public FRigVMFunction_MathRBFInterpolateQuatBase
{
public:
	TArray<struct FMathRBFInterpolateQuatXform_Target> Targets;                                           // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FTransform                             Output;                                            // 0x0100(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathRBFInterpolateQuatXform) == 0x000010, "Wrong alignment on FRigVMFunction_MathRBFInterpolateQuatXform");
static_assert(sizeof(FRigVMFunction_MathRBFInterpolateQuatXform) == 0x000160, "Wrong size on FRigVMFunction_MathRBFInterpolateQuatXform");
static_assert(offsetof(FRigVMFunction_MathRBFInterpolateQuatXform, Targets) == 0x0000F0, "Member 'FRigVMFunction_MathRBFInterpolateQuatXform::Targets' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathRBFInterpolateQuatXform, Output) == 0x000100, "Member 'FRigVMFunction_MathRBFInterpolateQuatXform::Output' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathRBFInterpolateVectorFloat
// 0x0020 (0x00E0 - 0x00C0)
struct FRigVMFunction_MathRBFInterpolateVectorFloat final : public FRigVMFunction_MathRBFInterpolateVectorBase
{
public:
	TArray<struct FMathRBFInterpolateVectorFloat_Target> Targets;                                           // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Output;                                            // 0x00D0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0xC];                                       // 0x00D4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathRBFInterpolateVectorFloat) == 0x000010, "Wrong alignment on FRigVMFunction_MathRBFInterpolateVectorFloat");
static_assert(sizeof(FRigVMFunction_MathRBFInterpolateVectorFloat) == 0x0000E0, "Wrong size on FRigVMFunction_MathRBFInterpolateVectorFloat");
static_assert(offsetof(FRigVMFunction_MathRBFInterpolateVectorFloat, Targets) == 0x0000C0, "Member 'FRigVMFunction_MathRBFInterpolateVectorFloat::Targets' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathRBFInterpolateVectorFloat, Output) == 0x0000D0, "Member 'FRigVMFunction_MathRBFInterpolateVectorFloat::Output' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathRBFInterpolateVectorVector
// 0x0030 (0x00F0 - 0x00C0)
struct FRigVMFunction_MathRBFInterpolateVectorVector final : public FRigVMFunction_MathRBFInterpolateVectorBase
{
public:
	TArray<struct FMathRBFInterpolateVectorVector_Target> Targets;                                           // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                Output;                                            // 0x00D0(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathRBFInterpolateVectorVector) == 0x000010, "Wrong alignment on FRigVMFunction_MathRBFInterpolateVectorVector");
static_assert(sizeof(FRigVMFunction_MathRBFInterpolateVectorVector) == 0x0000F0, "Wrong size on FRigVMFunction_MathRBFInterpolateVectorVector");
static_assert(offsetof(FRigVMFunction_MathRBFInterpolateVectorVector, Targets) == 0x0000C0, "Member 'FRigVMFunction_MathRBFInterpolateVectorVector::Targets' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathRBFInterpolateVectorVector, Output) == 0x0000D0, "Member 'FRigVMFunction_MathRBFInterpolateVectorVector::Output' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathRBFInterpolateVectorColor
// 0x0020 (0x00E0 - 0x00C0)
struct FRigVMFunction_MathRBFInterpolateVectorColor final : public FRigVMFunction_MathRBFInterpolateVectorBase
{
public:
	TArray<struct FMathRBFInterpolateVectorColor_Target> Targets;                                           // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           Output;                                            // 0x00D0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathRBFInterpolateVectorColor) == 0x000010, "Wrong alignment on FRigVMFunction_MathRBFInterpolateVectorColor");
static_assert(sizeof(FRigVMFunction_MathRBFInterpolateVectorColor) == 0x0000E0, "Wrong size on FRigVMFunction_MathRBFInterpolateVectorColor");
static_assert(offsetof(FRigVMFunction_MathRBFInterpolateVectorColor, Targets) == 0x0000C0, "Member 'FRigVMFunction_MathRBFInterpolateVectorColor::Targets' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathRBFInterpolateVectorColor, Output) == 0x0000D0, "Member 'FRigVMFunction_MathRBFInterpolateVectorColor::Output' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathRBFInterpolateVectorQuat
// 0x0030 (0x00F0 - 0x00C0)
struct FRigVMFunction_MathRBFInterpolateVectorQuat final : public FRigVMFunction_MathRBFInterpolateVectorBase
{
public:
	TArray<struct FMathRBFInterpolateVectorQuat_Target> Targets;                                           // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FQuat                                  Output;                                            // 0x00D0(0x0020)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathRBFInterpolateVectorQuat) == 0x000010, "Wrong alignment on FRigVMFunction_MathRBFInterpolateVectorQuat");
static_assert(sizeof(FRigVMFunction_MathRBFInterpolateVectorQuat) == 0x0000F0, "Wrong size on FRigVMFunction_MathRBFInterpolateVectorQuat");
static_assert(offsetof(FRigVMFunction_MathRBFInterpolateVectorQuat, Targets) == 0x0000C0, "Member 'FRigVMFunction_MathRBFInterpolateVectorQuat::Targets' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathRBFInterpolateVectorQuat, Output) == 0x0000D0, "Member 'FRigVMFunction_MathRBFInterpolateVectorQuat::Output' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathRBFInterpolateVectorXform
// 0x0070 (0x0130 - 0x00C0)
struct FRigVMFunction_MathRBFInterpolateVectorXform final : public FRigVMFunction_MathRBFInterpolateVectorBase
{
public:
	TArray<struct FMathRBFInterpolateVectorXform_Target> Targets;                                           // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FTransform                             Output;                                            // 0x00D0(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathRBFInterpolateVectorXform) == 0x000010, "Wrong alignment on FRigVMFunction_MathRBFInterpolateVectorXform");
static_assert(sizeof(FRigVMFunction_MathRBFInterpolateVectorXform) == 0x000130, "Wrong size on FRigVMFunction_MathRBFInterpolateVectorXform");
static_assert(offsetof(FRigVMFunction_MathRBFInterpolateVectorXform, Targets) == 0x0000C0, "Member 'FRigVMFunction_MathRBFInterpolateVectorXform::Targets' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathRBFInterpolateVectorXform, Output) == 0x0000D0, "Member 'FRigVMFunction_MathRBFInterpolateVectorXform::Output' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathTransformMutableBase
// 0x0000 (0x0100 - 0x0100)
struct FRigVMFunction_MathTransformMutableBase : public FRigVMFunction_MathMutableBase
{
};
static_assert(alignof(FRigVMFunction_MathTransformMutableBase) == 0x000010, "Wrong alignment on FRigVMFunction_MathTransformMutableBase");
static_assert(sizeof(FRigVMFunction_MathTransformMutableBase) == 0x000100, "Wrong size on FRigVMFunction_MathTransformMutableBase");

// ScriptStruct RigVM.RigVMFunction_MathTransformBinaryOp
// 0x0128 (0x0130 - 0x0008)
struct FRigVMFunction_MathTransformBinaryOp final : public FRigVMFunction_MathTransformBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             A;                                                 // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             B;                                                 // 0x0070(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Result;                                            // 0x00D0(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathTransformBinaryOp) == 0x000010, "Wrong alignment on FRigVMFunction_MathTransformBinaryOp");
static_assert(sizeof(FRigVMFunction_MathTransformBinaryOp) == 0x000130, "Wrong size on FRigVMFunction_MathTransformBinaryOp");
static_assert(offsetof(FRigVMFunction_MathTransformBinaryOp, A) == 0x000010, "Member 'FRigVMFunction_MathTransformBinaryOp::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformBinaryOp, B) == 0x000070, "Member 'FRigVMFunction_MathTransformBinaryOp::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformBinaryOp, Result) == 0x0000D0, "Member 'FRigVMFunction_MathTransformBinaryOp::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathTransformMake
// 0x00B8 (0x00C0 - 0x0008)
struct FRigVMFunction_MathTransformMake final : public FRigVMFunction_MathTransformBase
{
public:
	struct FVector                                Translation;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  Rotation;                                          // 0x0020(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0040(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Result;                                            // 0x0060(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathTransformMake) == 0x000010, "Wrong alignment on FRigVMFunction_MathTransformMake");
static_assert(sizeof(FRigVMFunction_MathTransformMake) == 0x0000C0, "Wrong size on FRigVMFunction_MathTransformMake");
static_assert(offsetof(FRigVMFunction_MathTransformMake, Translation) == 0x000008, "Member 'FRigVMFunction_MathTransformMake::Translation' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformMake, Rotation) == 0x000020, "Member 'FRigVMFunction_MathTransformMake::Rotation' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformMake, Scale) == 0x000040, "Member 'FRigVMFunction_MathTransformMake::Scale' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformMake, Result) == 0x000060, "Member 'FRigVMFunction_MathTransformMake::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathTransformFromEulerTransformV2
// 0x00A8 (0x00B0 - 0x0008)
struct FRigVMFunction_MathTransformFromEulerTransformV2 final : public FRigVMFunction_MathTransformBase
{
public:
	struct FEulerTransform                        Value;                                             // 0x0008(0x0048)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             Result;                                            // 0x0050(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathTransformFromEulerTransformV2) == 0x000010, "Wrong alignment on FRigVMFunction_MathTransformFromEulerTransformV2");
static_assert(sizeof(FRigVMFunction_MathTransformFromEulerTransformV2) == 0x0000B0, "Wrong size on FRigVMFunction_MathTransformFromEulerTransformV2");
static_assert(offsetof(FRigVMFunction_MathTransformFromEulerTransformV2, Value) == 0x000008, "Member 'FRigVMFunction_MathTransformFromEulerTransformV2::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformFromEulerTransformV2, Result) == 0x000050, "Member 'FRigVMFunction_MathTransformFromEulerTransformV2::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathTransformToEulerTransform
// 0x00B8 (0x00C0 - 0x0008)
struct FRigVMFunction_MathTransformToEulerTransform final : public FRigVMFunction_MathTransformBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Value;                                             // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEulerTransform                        Result;                                            // 0x0070(0x0048)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B8[0x8];                                       // 0x00B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathTransformToEulerTransform) == 0x000010, "Wrong alignment on FRigVMFunction_MathTransformToEulerTransform");
static_assert(sizeof(FRigVMFunction_MathTransformToEulerTransform) == 0x0000C0, "Wrong size on FRigVMFunction_MathTransformToEulerTransform");
static_assert(offsetof(FRigVMFunction_MathTransformToEulerTransform, Value) == 0x000010, "Member 'FRigVMFunction_MathTransformToEulerTransform::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformToEulerTransform, Result) == 0x000070, "Member 'FRigVMFunction_MathTransformToEulerTransform::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathTransformToVectors
// 0x00B8 (0x00C0 - 0x0008)
struct FRigVMFunction_MathTransformToVectors final : public FRigVMFunction_MathTransformBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Value;                                             // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Forward;                                           // 0x0070(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Right;                                             // 0x0088(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Up;                                                // 0x00A0(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B8[0x8];                                       // 0x00B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathTransformToVectors) == 0x000010, "Wrong alignment on FRigVMFunction_MathTransformToVectors");
static_assert(sizeof(FRigVMFunction_MathTransformToVectors) == 0x0000C0, "Wrong size on FRigVMFunction_MathTransformToVectors");
static_assert(offsetof(FRigVMFunction_MathTransformToVectors, Value) == 0x000010, "Member 'FRigVMFunction_MathTransformToVectors::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformToVectors, Forward) == 0x000070, "Member 'FRigVMFunction_MathTransformToVectors::Forward' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformToVectors, Right) == 0x000088, "Member 'FRigVMFunction_MathTransformToVectors::Right' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformToVectors, Up) == 0x0000A0, "Member 'FRigVMFunction_MathTransformToVectors::Up' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathTransformMul
// 0x0000 (0x0130 - 0x0130)
struct FRigVMFunction_MathTransformMul final : public FRigVMFunction_MathTransformBinaryAggregateOp
{
};
static_assert(alignof(FRigVMFunction_MathTransformMul) == 0x000010, "Wrong alignment on FRigVMFunction_MathTransformMul");
static_assert(sizeof(FRigVMFunction_MathTransformMul) == 0x000130, "Wrong size on FRigVMFunction_MathTransformMul");

// ScriptStruct RigVM.RigVMFunction_MathTransformMakeRelative
// 0x0128 (0x0130 - 0x0008)
struct FRigVMFunction_MathTransformMakeRelative final : public FRigVMFunction_MathTransformBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Global;                                            // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Parent;                                            // 0x0070(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Local;                                             // 0x00D0(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathTransformMakeRelative) == 0x000010, "Wrong alignment on FRigVMFunction_MathTransformMakeRelative");
static_assert(sizeof(FRigVMFunction_MathTransformMakeRelative) == 0x000130, "Wrong size on FRigVMFunction_MathTransformMakeRelative");
static_assert(offsetof(FRigVMFunction_MathTransformMakeRelative, Global) == 0x000010, "Member 'FRigVMFunction_MathTransformMakeRelative::Global' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformMakeRelative, Parent) == 0x000070, "Member 'FRigVMFunction_MathTransformMakeRelative::Parent' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformMakeRelative, Local) == 0x0000D0, "Member 'FRigVMFunction_MathTransformMakeRelative::Local' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathTransformAccumulateArray
// 0x0090 (0x0190 - 0x0100)
struct FRigVMFunction_MathTransformAccumulateArray final : public FRigVMFunction_MathTransformMutableBase
{
public:
	TArray<struct FTransform>                     Transforms;                                        // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	ERigVMTransformSpace                          TargetSpace;                                       // 0x0110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0xF];                                      // 0x0111(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Root;                                              // 0x0120(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ParentIndices;                                     // 0x0180(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathTransformAccumulateArray) == 0x000010, "Wrong alignment on FRigVMFunction_MathTransformAccumulateArray");
static_assert(sizeof(FRigVMFunction_MathTransformAccumulateArray) == 0x000190, "Wrong size on FRigVMFunction_MathTransformAccumulateArray");
static_assert(offsetof(FRigVMFunction_MathTransformAccumulateArray, Transforms) == 0x000100, "Member 'FRigVMFunction_MathTransformAccumulateArray::Transforms' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformAccumulateArray, TargetSpace) == 0x000110, "Member 'FRigVMFunction_MathTransformAccumulateArray::TargetSpace' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformAccumulateArray, Root) == 0x000120, "Member 'FRigVMFunction_MathTransformAccumulateArray::Root' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformAccumulateArray, ParentIndices) == 0x000180, "Member 'FRigVMFunction_MathTransformAccumulateArray::ParentIndices' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathTransformInverse
// 0x0000 (0x00D0 - 0x00D0)
struct FRigVMFunction_MathTransformInverse final : public FRigVMFunction_MathTransformUnaryOp
{
};
static_assert(alignof(FRigVMFunction_MathTransformInverse) == 0x000010, "Wrong alignment on FRigVMFunction_MathTransformInverse");
static_assert(sizeof(FRigVMFunction_MathTransformInverse) == 0x0000D0, "Wrong size on FRigVMFunction_MathTransformInverse");

// ScriptStruct RigVM.RigVMFunction_MathTransformLerp
// 0x0138 (0x0140 - 0x0008)
struct FRigVMFunction_MathTransformLerp final : public FRigVMFunction_MathTransformBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             A;                                                 // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             B;                                                 // 0x0070(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         T;                                                 // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0xC];                                       // 0x00D4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Result;                                            // 0x00E0(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathTransformLerp) == 0x000010, "Wrong alignment on FRigVMFunction_MathTransformLerp");
static_assert(sizeof(FRigVMFunction_MathTransformLerp) == 0x000140, "Wrong size on FRigVMFunction_MathTransformLerp");
static_assert(offsetof(FRigVMFunction_MathTransformLerp, A) == 0x000010, "Member 'FRigVMFunction_MathTransformLerp::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformLerp, B) == 0x000070, "Member 'FRigVMFunction_MathTransformLerp::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformLerp, T) == 0x0000D0, "Member 'FRigVMFunction_MathTransformLerp::T' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformLerp, Result) == 0x0000E0, "Member 'FRigVMFunction_MathTransformLerp::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathTransformRotateVector
// 0x0098 (0x00A0 - 0x0008)
struct FRigVMFunction_MathTransformRotateVector final : public FRigVMFunction_MathTransformBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Vector;                                            // 0x0070(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Result;                                            // 0x0088(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathTransformRotateVector) == 0x000010, "Wrong alignment on FRigVMFunction_MathTransformRotateVector");
static_assert(sizeof(FRigVMFunction_MathTransformRotateVector) == 0x0000A0, "Wrong size on FRigVMFunction_MathTransformRotateVector");
static_assert(offsetof(FRigVMFunction_MathTransformRotateVector, Transform) == 0x000010, "Member 'FRigVMFunction_MathTransformRotateVector::Transform' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformRotateVector, Vector) == 0x000070, "Member 'FRigVMFunction_MathTransformRotateVector::Vector' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformRotateVector, Result) == 0x000088, "Member 'FRigVMFunction_MathTransformRotateVector::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathTransformFromSRT
// 0x0108 (0x0110 - 0x0008)
struct FRigVMFunction_MathTransformFromSRT final : public FRigVMFunction_MathTransformBase
{
public:
	struct FVector                                Location;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Rotation;                                          // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEulerRotationOrder                           RotationOrder;                                     // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Scale;                                             // 0x0040(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0060(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEulerTransform                        EulerTransform;                                    // 0x00C0(0x0048)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_108[0x8];                                      // 0x0108(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathTransformFromSRT) == 0x000010, "Wrong alignment on FRigVMFunction_MathTransformFromSRT");
static_assert(sizeof(FRigVMFunction_MathTransformFromSRT) == 0x000110, "Wrong size on FRigVMFunction_MathTransformFromSRT");
static_assert(offsetof(FRigVMFunction_MathTransformFromSRT, Location) == 0x000008, "Member 'FRigVMFunction_MathTransformFromSRT::Location' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformFromSRT, Rotation) == 0x000020, "Member 'FRigVMFunction_MathTransformFromSRT::Rotation' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformFromSRT, RotationOrder) == 0x000038, "Member 'FRigVMFunction_MathTransformFromSRT::RotationOrder' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformFromSRT, Scale) == 0x000040, "Member 'FRigVMFunction_MathTransformFromSRT::Scale' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformFromSRT, Transform) == 0x000060, "Member 'FRigVMFunction_MathTransformFromSRT::Transform' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformFromSRT, EulerTransform) == 0x0000C0, "Member 'FRigVMFunction_MathTransformFromSRT::EulerTransform' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathTransformClampSpatially
// 0x0158 (0x0160 - 0x0008)
struct FRigVMFunction_MathTransformClampSpatially final : public FRigVMFunction_MathTransformBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Value;                                             // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         Axis;                                              // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigVMClampSpatialMode                        Type;                                              // 0x0071(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Minimum;                                           // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Maximum;                                           // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Space;                                             // 0x0080(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawDebug;                                        // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           DebugColor;                                        // 0x00E4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DebugThickness;                                    // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Result;                                            // 0x0100(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathTransformClampSpatially) == 0x000010, "Wrong alignment on FRigVMFunction_MathTransformClampSpatially");
static_assert(sizeof(FRigVMFunction_MathTransformClampSpatially) == 0x000160, "Wrong size on FRigVMFunction_MathTransformClampSpatially");
static_assert(offsetof(FRigVMFunction_MathTransformClampSpatially, Value) == 0x000010, "Member 'FRigVMFunction_MathTransformClampSpatially::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformClampSpatially, Axis) == 0x000070, "Member 'FRigVMFunction_MathTransformClampSpatially::Axis' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformClampSpatially, Type) == 0x000071, "Member 'FRigVMFunction_MathTransformClampSpatially::Type' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformClampSpatially, Minimum) == 0x000074, "Member 'FRigVMFunction_MathTransformClampSpatially::Minimum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformClampSpatially, Maximum) == 0x000078, "Member 'FRigVMFunction_MathTransformClampSpatially::Maximum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformClampSpatially, Space) == 0x000080, "Member 'FRigVMFunction_MathTransformClampSpatially::Space' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformClampSpatially, bDrawDebug) == 0x0000E0, "Member 'FRigVMFunction_MathTransformClampSpatially::bDrawDebug' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformClampSpatially, DebugColor) == 0x0000E4, "Member 'FRigVMFunction_MathTransformClampSpatially::DebugColor' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformClampSpatially, DebugThickness) == 0x0000F4, "Member 'FRigVMFunction_MathTransformClampSpatially::DebugThickness' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathTransformClampSpatially, Result) == 0x000100, "Member 'FRigVMFunction_MathTransformClampSpatially::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathVectorMake
// 0x0028 (0x0030 - 0x0008)
struct FRigVMFunction_MathVectorMake final : public FRigVMFunction_MathVectorBase
{
public:
	float                                         X;                                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Result;                                            // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathVectorMake) == 0x000008, "Wrong alignment on FRigVMFunction_MathVectorMake");
static_assert(sizeof(FRigVMFunction_MathVectorMake) == 0x000030, "Wrong size on FRigVMFunction_MathVectorMake");
static_assert(offsetof(FRigVMFunction_MathVectorMake, X) == 0x000008, "Member 'FRigVMFunction_MathVectorMake::X' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorMake, Y) == 0x00000C, "Member 'FRigVMFunction_MathVectorMake::Y' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorMake, Z) == 0x000010, "Member 'FRigVMFunction_MathVectorMake::Z' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorMake, Result) == 0x000018, "Member 'FRigVMFunction_MathVectorMake::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathVectorFromDouble
// 0x0020 (0x0028 - 0x0008)
struct FRigVMFunction_MathVectorFromDouble final : public FRigVMFunction_MathVectorBase
{
public:
	double                                        Value;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Result;                                            // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathVectorFromDouble) == 0x000008, "Wrong alignment on FRigVMFunction_MathVectorFromDouble");
static_assert(sizeof(FRigVMFunction_MathVectorFromDouble) == 0x000028, "Wrong size on FRigVMFunction_MathVectorFromDouble");
static_assert(offsetof(FRigVMFunction_MathVectorFromDouble, Value) == 0x000008, "Member 'FRigVMFunction_MathVectorFromDouble::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorFromDouble, Result) == 0x000010, "Member 'FRigVMFunction_MathVectorFromDouble::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathVectorSub
// 0x0000 (0x0050 - 0x0050)
struct FRigVMFunction_MathVectorSub final : public FRigVMFunction_MathVectorBinaryOp
{
};
static_assert(alignof(FRigVMFunction_MathVectorSub) == 0x000008, "Wrong alignment on FRigVMFunction_MathVectorSub");
static_assert(sizeof(FRigVMFunction_MathVectorSub) == 0x000050, "Wrong size on FRigVMFunction_MathVectorSub");

// ScriptStruct RigVM.RigVMFunction_MathVectorScale
// 0x0038 (0x0040 - 0x0008)
struct FRigVMFunction_MathVectorScale final : public FRigVMFunction_MathVectorBase
{
public:
	struct FVector                                Value;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Factor;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Result;                                            // 0x0028(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathVectorScale) == 0x000008, "Wrong alignment on FRigVMFunction_MathVectorScale");
static_assert(sizeof(FRigVMFunction_MathVectorScale) == 0x000040, "Wrong size on FRigVMFunction_MathVectorScale");
static_assert(offsetof(FRigVMFunction_MathVectorScale, Value) == 0x000008, "Member 'FRigVMFunction_MathVectorScale::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorScale, Factor) == 0x000020, "Member 'FRigVMFunction_MathVectorScale::Factor' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorScale, Result) == 0x000028, "Member 'FRigVMFunction_MathVectorScale::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathVectorMod
// 0x0000 (0x0050 - 0x0050)
struct FRigVMFunction_MathVectorMod final : public FRigVMFunction_MathVectorBinaryOp
{
};
static_assert(alignof(FRigVMFunction_MathVectorMod) == 0x000008, "Wrong alignment on FRigVMFunction_MathVectorMod");
static_assert(sizeof(FRigVMFunction_MathVectorMod) == 0x000050, "Wrong size on FRigVMFunction_MathVectorMod");

// ScriptStruct RigVM.RigVMFunction_MathVectorMax
// 0x0000 (0x0050 - 0x0050)
struct FRigVMFunction_MathVectorMax final : public FRigVMFunction_MathVectorBinaryAggregateOp
{
};
static_assert(alignof(FRigVMFunction_MathVectorMax) == 0x000008, "Wrong alignment on FRigVMFunction_MathVectorMax");
static_assert(sizeof(FRigVMFunction_MathVectorMax) == 0x000050, "Wrong size on FRigVMFunction_MathVectorMax");

// ScriptStruct RigVM.RigVMFunction_MathVectorAbs
// 0x0000 (0x0038 - 0x0038)
struct FRigVMFunction_MathVectorAbs final : public FRigVMFunction_MathVectorUnaryOp
{
};
static_assert(alignof(FRigVMFunction_MathVectorAbs) == 0x000008, "Wrong alignment on FRigVMFunction_MathVectorAbs");
static_assert(sizeof(FRigVMFunction_MathVectorAbs) == 0x000038, "Wrong size on FRigVMFunction_MathVectorAbs");

// ScriptStruct RigVM.RigVMFunction_MathVectorCeil
// 0x0000 (0x0038 - 0x0038)
struct FRigVMFunction_MathVectorCeil final : public FRigVMFunction_MathVectorUnaryOp
{
};
static_assert(alignof(FRigVMFunction_MathVectorCeil) == 0x000008, "Wrong alignment on FRigVMFunction_MathVectorCeil");
static_assert(sizeof(FRigVMFunction_MathVectorCeil) == 0x000038, "Wrong size on FRigVMFunction_MathVectorCeil");

// ScriptStruct RigVM.RigVMFunction_MathVectorSign
// 0x0000 (0x0038 - 0x0038)
struct FRigVMFunction_MathVectorSign final : public FRigVMFunction_MathVectorUnaryOp
{
};
static_assert(alignof(FRigVMFunction_MathVectorSign) == 0x000008, "Wrong alignment on FRigVMFunction_MathVectorSign");
static_assert(sizeof(FRigVMFunction_MathVectorSign) == 0x000038, "Wrong size on FRigVMFunction_MathVectorSign");

// ScriptStruct RigVM.RigVMFunction_MathVectorLerp
// 0x0050 (0x0058 - 0x0008)
struct FRigVMFunction_MathVectorLerp final : public FRigVMFunction_MathVectorBase
{
public:
	struct FVector                                A;                                                 // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                B;                                                 // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         T;                                                 // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Result;                                            // 0x0040(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathVectorLerp) == 0x000008, "Wrong alignment on FRigVMFunction_MathVectorLerp");
static_assert(sizeof(FRigVMFunction_MathVectorLerp) == 0x000058, "Wrong size on FRigVMFunction_MathVectorLerp");
static_assert(offsetof(FRigVMFunction_MathVectorLerp, A) == 0x000008, "Member 'FRigVMFunction_MathVectorLerp::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorLerp, B) == 0x000020, "Member 'FRigVMFunction_MathVectorLerp::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorLerp, T) == 0x000038, "Member 'FRigVMFunction_MathVectorLerp::T' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorLerp, Result) == 0x000040, "Member 'FRigVMFunction_MathVectorLerp::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathVectorEquals
// 0x0038 (0x0040 - 0x0008)
struct FRigVMFunction_MathVectorEquals final : public FRigVMFunction_MathVectorBase
{
public:
	struct FVector                                A;                                                 // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                B;                                                 // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathVectorEquals) == 0x000008, "Wrong alignment on FRigVMFunction_MathVectorEquals");
static_assert(sizeof(FRigVMFunction_MathVectorEquals) == 0x000040, "Wrong size on FRigVMFunction_MathVectorEquals");
static_assert(offsetof(FRigVMFunction_MathVectorEquals, A) == 0x000008, "Member 'FRigVMFunction_MathVectorEquals::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorEquals, B) == 0x000020, "Member 'FRigVMFunction_MathVectorEquals::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorEquals, Result) == 0x000038, "Member 'FRigVMFunction_MathVectorEquals::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathVectorNotEquals
// 0x0038 (0x0040 - 0x0008)
struct FRigVMFunction_MathVectorNotEquals final : public FRigVMFunction_MathVectorBase
{
public:
	struct FVector                                A;                                                 // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                B;                                                 // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathVectorNotEquals) == 0x000008, "Wrong alignment on FRigVMFunction_MathVectorNotEquals");
static_assert(sizeof(FRigVMFunction_MathVectorNotEquals) == 0x000040, "Wrong size on FRigVMFunction_MathVectorNotEquals");
static_assert(offsetof(FRigVMFunction_MathVectorNotEquals, A) == 0x000008, "Member 'FRigVMFunction_MathVectorNotEquals::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorNotEquals, B) == 0x000020, "Member 'FRigVMFunction_MathVectorNotEquals::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorNotEquals, Result) == 0x000038, "Member 'FRigVMFunction_MathVectorNotEquals::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathVectorIsNearlyEqual
// 0x0038 (0x0040 - 0x0008)
struct FRigVMFunction_MathVectorIsNearlyEqual final : public FRigVMFunction_MathVectorBase
{
public:
	struct FVector                                A;                                                 // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                B;                                                 // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tolerance;                                         // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x003C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathVectorIsNearlyEqual) == 0x000008, "Wrong alignment on FRigVMFunction_MathVectorIsNearlyEqual");
static_assert(sizeof(FRigVMFunction_MathVectorIsNearlyEqual) == 0x000040, "Wrong size on FRigVMFunction_MathVectorIsNearlyEqual");
static_assert(offsetof(FRigVMFunction_MathVectorIsNearlyEqual, A) == 0x000008, "Member 'FRigVMFunction_MathVectorIsNearlyEqual::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorIsNearlyEqual, B) == 0x000020, "Member 'FRigVMFunction_MathVectorIsNearlyEqual::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorIsNearlyEqual, Tolerance) == 0x000038, "Member 'FRigVMFunction_MathVectorIsNearlyEqual::Tolerance' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorIsNearlyEqual, Result) == 0x00003C, "Member 'FRigVMFunction_MathVectorIsNearlyEqual::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathVectorSelectBool
// 0x0050 (0x0058 - 0x0008)
struct FRigVMFunction_MathVectorSelectBool final : public FRigVMFunction_MathVectorBase
{
public:
	bool                                          Condition;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                IfTrue;                                            // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                IfFalse;                                           // 0x0028(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Result;                                            // 0x0040(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathVectorSelectBool) == 0x000008, "Wrong alignment on FRigVMFunction_MathVectorSelectBool");
static_assert(sizeof(FRigVMFunction_MathVectorSelectBool) == 0x000058, "Wrong size on FRigVMFunction_MathVectorSelectBool");
static_assert(offsetof(FRigVMFunction_MathVectorSelectBool, Condition) == 0x000008, "Member 'FRigVMFunction_MathVectorSelectBool::Condition' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorSelectBool, IfTrue) == 0x000010, "Member 'FRigVMFunction_MathVectorSelectBool::IfTrue' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorSelectBool, IfFalse) == 0x000028, "Member 'FRigVMFunction_MathVectorSelectBool::IfFalse' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorSelectBool, Result) == 0x000040, "Member 'FRigVMFunction_MathVectorSelectBool::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathVectorDeg
// 0x0000 (0x0038 - 0x0038)
struct FRigVMFunction_MathVectorDeg final : public FRigVMFunction_MathVectorUnaryOp
{
};
static_assert(alignof(FRigVMFunction_MathVectorDeg) == 0x000008, "Wrong alignment on FRigVMFunction_MathVectorDeg");
static_assert(sizeof(FRigVMFunction_MathVectorDeg) == 0x000038, "Wrong size on FRigVMFunction_MathVectorDeg");

// ScriptStruct RigVM.RigVMFunction_MathVectorLengthSquared
// 0x0020 (0x0028 - 0x0008)
struct FRigVMFunction_MathVectorLengthSquared final : public FRigVMFunction_MathVectorBase
{
public:
	struct FVector                                Value;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Result;                                            // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathVectorLengthSquared) == 0x000008, "Wrong alignment on FRigVMFunction_MathVectorLengthSquared");
static_assert(sizeof(FRigVMFunction_MathVectorLengthSquared) == 0x000028, "Wrong size on FRigVMFunction_MathVectorLengthSquared");
static_assert(offsetof(FRigVMFunction_MathVectorLengthSquared, Value) == 0x000008, "Member 'FRigVMFunction_MathVectorLengthSquared::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorLengthSquared, Result) == 0x000020, "Member 'FRigVMFunction_MathVectorLengthSquared::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathVectorDistance
// 0x0038 (0x0040 - 0x0008)
struct FRigVMFunction_MathVectorDistance final : public FRigVMFunction_MathVectorBase
{
public:
	struct FVector                                A;                                                 // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                B;                                                 // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Result;                                            // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathVectorDistance) == 0x000008, "Wrong alignment on FRigVMFunction_MathVectorDistance");
static_assert(sizeof(FRigVMFunction_MathVectorDistance) == 0x000040, "Wrong size on FRigVMFunction_MathVectorDistance");
static_assert(offsetof(FRigVMFunction_MathVectorDistance, A) == 0x000008, "Member 'FRigVMFunction_MathVectorDistance::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorDistance, B) == 0x000020, "Member 'FRigVMFunction_MathVectorDistance::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorDistance, Result) == 0x000038, "Member 'FRigVMFunction_MathVectorDistance::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathVectorCross
// 0x0000 (0x0050 - 0x0050)
struct FRigVMFunction_MathVectorCross final : public FRigVMFunction_MathVectorBinaryOp
{
};
static_assert(alignof(FRigVMFunction_MathVectorCross) == 0x000008, "Wrong alignment on FRigVMFunction_MathVectorCross");
static_assert(sizeof(FRigVMFunction_MathVectorCross) == 0x000050, "Wrong size on FRigVMFunction_MathVectorCross");

// ScriptStruct RigVM.RigVMFunction_MathVectorDot
// 0x0038 (0x0040 - 0x0008)
struct FRigVMFunction_MathVectorDot final : public FRigVMFunction_MathVectorBase
{
public:
	struct FVector                                A;                                                 // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                B;                                                 // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Result;                                            // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathVectorDot) == 0x000008, "Wrong alignment on FRigVMFunction_MathVectorDot");
static_assert(sizeof(FRigVMFunction_MathVectorDot) == 0x000040, "Wrong size on FRigVMFunction_MathVectorDot");
static_assert(offsetof(FRigVMFunction_MathVectorDot, A) == 0x000008, "Member 'FRigVMFunction_MathVectorDot::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorDot, B) == 0x000020, "Member 'FRigVMFunction_MathVectorDot::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorDot, Result) == 0x000038, "Member 'FRigVMFunction_MathVectorDot::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathVectorSetLength
// 0x0038 (0x0040 - 0x0008)
struct FRigVMFunction_MathVectorSetLength final : public FRigVMFunction_MathVectorBase
{
public:
	struct FVector                                Value;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Result;                                            // 0x0028(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathVectorSetLength) == 0x000008, "Wrong alignment on FRigVMFunction_MathVectorSetLength");
static_assert(sizeof(FRigVMFunction_MathVectorSetLength) == 0x000040, "Wrong size on FRigVMFunction_MathVectorSetLength");
static_assert(offsetof(FRigVMFunction_MathVectorSetLength, Value) == 0x000008, "Member 'FRigVMFunction_MathVectorSetLength::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorSetLength, Length) == 0x000020, "Member 'FRigVMFunction_MathVectorSetLength::Length' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorSetLength, Result) == 0x000028, "Member 'FRigVMFunction_MathVectorSetLength::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathVectorClampLength
// 0x0038 (0x0040 - 0x0008)
struct FRigVMFunction_MathVectorClampLength final : public FRigVMFunction_MathVectorBase
{
public:
	struct FVector                                Value;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumLength;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaximumLength;                                     // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Result;                                            // 0x0028(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathVectorClampLength) == 0x000008, "Wrong alignment on FRigVMFunction_MathVectorClampLength");
static_assert(sizeof(FRigVMFunction_MathVectorClampLength) == 0x000040, "Wrong size on FRigVMFunction_MathVectorClampLength");
static_assert(offsetof(FRigVMFunction_MathVectorClampLength, Value) == 0x000008, "Member 'FRigVMFunction_MathVectorClampLength::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorClampLength, MinimumLength) == 0x000020, "Member 'FRigVMFunction_MathVectorClampLength::MinimumLength' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorClampLength, MaximumLength) == 0x000024, "Member 'FRigVMFunction_MathVectorClampLength::MaximumLength' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorClampLength, Result) == 0x000028, "Member 'FRigVMFunction_MathVectorClampLength::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathVectorMirror
// 0x0048 (0x0050 - 0x0008)
struct FRigVMFunction_MathVectorMirror final : public FRigVMFunction_MathVectorBase
{
public:
	struct FVector                                Value;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Result;                                            // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathVectorMirror) == 0x000008, "Wrong alignment on FRigVMFunction_MathVectorMirror");
static_assert(sizeof(FRigVMFunction_MathVectorMirror) == 0x000050, "Wrong size on FRigVMFunction_MathVectorMirror");
static_assert(offsetof(FRigVMFunction_MathVectorMirror, Value) == 0x000008, "Member 'FRigVMFunction_MathVectorMirror::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorMirror, Normal) == 0x000020, "Member 'FRigVMFunction_MathVectorMirror::Normal' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorMirror, Result) == 0x000038, "Member 'FRigVMFunction_MathVectorMirror::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathVectorAngle
// 0x0038 (0x0040 - 0x0008)
struct FRigVMFunction_MathVectorAngle final : public FRigVMFunction_MathVectorBase
{
public:
	struct FVector                                A;                                                 // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                B;                                                 // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Result;                                            // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathVectorAngle) == 0x000008, "Wrong alignment on FRigVMFunction_MathVectorAngle");
static_assert(sizeof(FRigVMFunction_MathVectorAngle) == 0x000040, "Wrong size on FRigVMFunction_MathVectorAngle");
static_assert(offsetof(FRigVMFunction_MathVectorAngle, A) == 0x000008, "Member 'FRigVMFunction_MathVectorAngle::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorAngle, B) == 0x000020, "Member 'FRigVMFunction_MathVectorAngle::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorAngle, Result) == 0x000038, "Member 'FRigVMFunction_MathVectorAngle::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathVectorParallel
// 0x0038 (0x0040 - 0x0008)
struct FRigVMFunction_MathVectorParallel final : public FRigVMFunction_MathVectorBase
{
public:
	struct FVector                                A;                                                 // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                B;                                                 // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathVectorParallel) == 0x000008, "Wrong alignment on FRigVMFunction_MathVectorParallel");
static_assert(sizeof(FRigVMFunction_MathVectorParallel) == 0x000040, "Wrong size on FRigVMFunction_MathVectorParallel");
static_assert(offsetof(FRigVMFunction_MathVectorParallel, A) == 0x000008, "Member 'FRigVMFunction_MathVectorParallel::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorParallel, B) == 0x000020, "Member 'FRigVMFunction_MathVectorParallel::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorParallel, Result) == 0x000038, "Member 'FRigVMFunction_MathVectorParallel::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathVectorBezierFourPoint
// 0x0098 (0x00A0 - 0x0008)
struct FRigVMFunction_MathVectorBezierFourPoint final : public FRigVMFunction_MathVectorBase
{
public:
	struct FRigVMFourPointBezier                  Bezier;                                            // 0x0008(0x0060)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         T;                                                 // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Result;                                            // 0x0070(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Tangent;                                           // 0x0088(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathVectorBezierFourPoint) == 0x000008, "Wrong alignment on FRigVMFunction_MathVectorBezierFourPoint");
static_assert(sizeof(FRigVMFunction_MathVectorBezierFourPoint) == 0x0000A0, "Wrong size on FRigVMFunction_MathVectorBezierFourPoint");
static_assert(offsetof(FRigVMFunction_MathVectorBezierFourPoint, Bezier) == 0x000008, "Member 'FRigVMFunction_MathVectorBezierFourPoint::Bezier' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorBezierFourPoint, T) == 0x000068, "Member 'FRigVMFunction_MathVectorBezierFourPoint::T' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorBezierFourPoint, Result) == 0x000070, "Member 'FRigVMFunction_MathVectorBezierFourPoint::Result' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorBezierFourPoint, Tangent) == 0x000088, "Member 'FRigVMFunction_MathVectorBezierFourPoint::Tangent' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathVectorMakeBezierFourPoint
// 0x0060 (0x0068 - 0x0008)
struct FRigVMFunction_MathVectorMakeBezierFourPoint final : public FRigVMFunction_MathVectorBase
{
public:
	struct FRigVMFourPointBezier                  Bezier;                                            // 0x0008(0x0060)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathVectorMakeBezierFourPoint) == 0x000008, "Wrong alignment on FRigVMFunction_MathVectorMakeBezierFourPoint");
static_assert(sizeof(FRigVMFunction_MathVectorMakeBezierFourPoint) == 0x000068, "Wrong size on FRigVMFunction_MathVectorMakeBezierFourPoint");
static_assert(offsetof(FRigVMFunction_MathVectorMakeBezierFourPoint, Bezier) == 0x000008, "Member 'FRigVMFunction_MathVectorMakeBezierFourPoint::Bezier' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathIntersectPlane
// 0x0080 (0x0088 - 0x0008)
struct FRigVMFunction_MathIntersectPlane final : public FRigVMFunction_MathVectorBase
{
public:
	struct FVector                                Start;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PlanePoint;                                        // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PlaneNormal;                                       // 0x0050(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Result;                                            // 0x0068(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0080(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathIntersectPlane) == 0x000008, "Wrong alignment on FRigVMFunction_MathIntersectPlane");
static_assert(sizeof(FRigVMFunction_MathIntersectPlane) == 0x000088, "Wrong size on FRigVMFunction_MathIntersectPlane");
static_assert(offsetof(FRigVMFunction_MathIntersectPlane, Start) == 0x000008, "Member 'FRigVMFunction_MathIntersectPlane::Start' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathIntersectPlane, Direction) == 0x000020, "Member 'FRigVMFunction_MathIntersectPlane::Direction' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathIntersectPlane, PlanePoint) == 0x000038, "Member 'FRigVMFunction_MathIntersectPlane::PlanePoint' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathIntersectPlane, PlaneNormal) == 0x000050, "Member 'FRigVMFunction_MathIntersectPlane::PlaneNormal' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathIntersectPlane, Result) == 0x000068, "Member 'FRigVMFunction_MathIntersectPlane::Result' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathIntersectPlane, Distance) == 0x000080, "Member 'FRigVMFunction_MathIntersectPlane::Distance' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathDistanceToPlane
// 0x0068 (0x0070 - 0x0008)
struct FRigVMFunction_MathDistanceToPlane final : public FRigVMFunction_MathVectorBase
{
public:
	struct FVector                                Point;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PlanePoint;                                        // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PlaneNormal;                                       // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ClosestPointOnPlane;                               // 0x0050(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SignedDistance;                                    // 0x0068(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathDistanceToPlane) == 0x000008, "Wrong alignment on FRigVMFunction_MathDistanceToPlane");
static_assert(sizeof(FRigVMFunction_MathDistanceToPlane) == 0x000070, "Wrong size on FRigVMFunction_MathDistanceToPlane");
static_assert(offsetof(FRigVMFunction_MathDistanceToPlane, Point) == 0x000008, "Member 'FRigVMFunction_MathDistanceToPlane::Point' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDistanceToPlane, PlanePoint) == 0x000020, "Member 'FRigVMFunction_MathDistanceToPlane::PlanePoint' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDistanceToPlane, PlaneNormal) == 0x000038, "Member 'FRigVMFunction_MathDistanceToPlane::PlaneNormal' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDistanceToPlane, ClosestPointOnPlane) == 0x000050, "Member 'FRigVMFunction_MathDistanceToPlane::ClosestPointOnPlane' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathDistanceToPlane, SignedDistance) == 0x000068, "Member 'FRigVMFunction_MathDistanceToPlane::SignedDistance' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathVectorMakeRelative
// 0x0048 (0x0050 - 0x0008)
struct FRigVMFunction_MathVectorMakeRelative final : public FRigVMFunction_MathVectorBase
{
public:
	struct FVector                                Global;                                            // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Parent;                                            // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Local;                                             // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathVectorMakeRelative) == 0x000008, "Wrong alignment on FRigVMFunction_MathVectorMakeRelative");
static_assert(sizeof(FRigVMFunction_MathVectorMakeRelative) == 0x000050, "Wrong size on FRigVMFunction_MathVectorMakeRelative");
static_assert(offsetof(FRigVMFunction_MathVectorMakeRelative, Global) == 0x000008, "Member 'FRigVMFunction_MathVectorMakeRelative::Global' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorMakeRelative, Parent) == 0x000020, "Member 'FRigVMFunction_MathVectorMakeRelative::Parent' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorMakeRelative, Local) == 0x000038, "Member 'FRigVMFunction_MathVectorMakeRelative::Local' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathVectorMirrorTransform
// 0x00A8 (0x00B0 - 0x0008)
struct FRigVMFunction_MathVectorMirrorTransform final : public FRigVMFunction_MathVectorBase
{
public:
	struct FVector                                Value;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         MirrorAxis;                                        // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         AxisToFlip;                                        // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0xE];                                       // 0x0022(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CentralTransform;                                  // 0x0030(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Result;                                            // 0x0090(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_MathVectorMirrorTransform) == 0x000010, "Wrong alignment on FRigVMFunction_MathVectorMirrorTransform");
static_assert(sizeof(FRigVMFunction_MathVectorMirrorTransform) == 0x0000B0, "Wrong size on FRigVMFunction_MathVectorMirrorTransform");
static_assert(offsetof(FRigVMFunction_MathVectorMirrorTransform, Value) == 0x000008, "Member 'FRigVMFunction_MathVectorMirrorTransform::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorMirrorTransform, MirrorAxis) == 0x000020, "Member 'FRigVMFunction_MathVectorMirrorTransform::MirrorAxis' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorMirrorTransform, AxisToFlip) == 0x000021, "Member 'FRigVMFunction_MathVectorMirrorTransform::AxisToFlip' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorMirrorTransform, CentralTransform) == 0x000030, "Member 'FRigVMFunction_MathVectorMirrorTransform::CentralTransform' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorMirrorTransform, Result) == 0x000090, "Member 'FRigVMFunction_MathVectorMirrorTransform::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_MathVectorArrayAverage
// 0x0028 (0x0030 - 0x0008)
struct FRigVMFunction_MathVectorArrayAverage final : public FRigVMFunction_MathVectorBase
{
public:
	TArray<struct FVector>                        Array;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                Average;                                           // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_MathVectorArrayAverage) == 0x000008, "Wrong alignment on FRigVMFunction_MathVectorArrayAverage");
static_assert(sizeof(FRigVMFunction_MathVectorArrayAverage) == 0x000030, "Wrong size on FRigVMFunction_MathVectorArrayAverage");
static_assert(offsetof(FRigVMFunction_MathVectorArrayAverage, Array) == 0x000008, "Member 'FRigVMFunction_MathVectorArrayAverage::Array' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_MathVectorArrayAverage, Average) == 0x000018, "Member 'FRigVMFunction_MathVectorArrayAverage::Average' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_NoiseDouble
// 0x0038 (0x0040 - 0x0008)
struct FRigVMFunction_NoiseDouble final : public FRigVMFunction_MathBase
{
public:
	double                                        Value;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Speed;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Frequency;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Minimum;                                           // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Maximum;                                           // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Result;                                            // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Time;                                              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_NoiseDouble) == 0x000008, "Wrong alignment on FRigVMFunction_NoiseDouble");
static_assert(sizeof(FRigVMFunction_NoiseDouble) == 0x000040, "Wrong size on FRigVMFunction_NoiseDouble");
static_assert(offsetof(FRigVMFunction_NoiseDouble, Value) == 0x000008, "Member 'FRigVMFunction_NoiseDouble::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_NoiseDouble, Speed) == 0x000010, "Member 'FRigVMFunction_NoiseDouble::Speed' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_NoiseDouble, Frequency) == 0x000018, "Member 'FRigVMFunction_NoiseDouble::Frequency' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_NoiseDouble, Minimum) == 0x000020, "Member 'FRigVMFunction_NoiseDouble::Minimum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_NoiseDouble, Maximum) == 0x000028, "Member 'FRigVMFunction_NoiseDouble::Maximum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_NoiseDouble, Result) == 0x000030, "Member 'FRigVMFunction_NoiseDouble::Result' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_NoiseDouble, Time) == 0x000038, "Member 'FRigVMFunction_NoiseDouble::Time' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_NoiseVector2
// 0x0088 (0x0090 - 0x0008)
struct FRigVMFunction_NoiseVector2 final : public FRigVMFunction_MathBase
{
public:
	struct FVector                                Value;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Speed;                                             // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Frequency;                                         // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Minimum;                                           // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Maximum;                                           // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Result;                                            // 0x0060(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Time;                                              // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_NoiseVector2) == 0x000008, "Wrong alignment on FRigVMFunction_NoiseVector2");
static_assert(sizeof(FRigVMFunction_NoiseVector2) == 0x000090, "Wrong size on FRigVMFunction_NoiseVector2");
static_assert(offsetof(FRigVMFunction_NoiseVector2, Value) == 0x000008, "Member 'FRigVMFunction_NoiseVector2::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_NoiseVector2, Speed) == 0x000020, "Member 'FRigVMFunction_NoiseVector2::Speed' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_NoiseVector2, Frequency) == 0x000038, "Member 'FRigVMFunction_NoiseVector2::Frequency' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_NoiseVector2, Minimum) == 0x000050, "Member 'FRigVMFunction_NoiseVector2::Minimum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_NoiseVector2, Maximum) == 0x000058, "Member 'FRigVMFunction_NoiseVector2::Maximum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_NoiseVector2, Result) == 0x000060, "Member 'FRigVMFunction_NoiseVector2::Result' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_NoiseVector2, Time) == 0x000078, "Member 'FRigVMFunction_NoiseVector2::Time' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_RandomFloat
// 0x0028 (0x0030 - 0x0008)
struct FRigVMFunction_RandomFloat final : public FRigVMFunction_MathBase
{
public:
	int32                                         Seed;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Minimum;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Maximum;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Result;                                            // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastResult;                                        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastSeed;                                          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BaseSeed;                                          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeLeft;                                          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_RandomFloat) == 0x000008, "Wrong alignment on FRigVMFunction_RandomFloat");
static_assert(sizeof(FRigVMFunction_RandomFloat) == 0x000030, "Wrong size on FRigVMFunction_RandomFloat");
static_assert(offsetof(FRigVMFunction_RandomFloat, Seed) == 0x000008, "Member 'FRigVMFunction_RandomFloat::Seed' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_RandomFloat, Minimum) == 0x00000C, "Member 'FRigVMFunction_RandomFloat::Minimum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_RandomFloat, Maximum) == 0x000010, "Member 'FRigVMFunction_RandomFloat::Maximum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_RandomFloat, Duration) == 0x000014, "Member 'FRigVMFunction_RandomFloat::Duration' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_RandomFloat, Result) == 0x000018, "Member 'FRigVMFunction_RandomFloat::Result' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_RandomFloat, LastResult) == 0x00001C, "Member 'FRigVMFunction_RandomFloat::LastResult' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_RandomFloat, LastSeed) == 0x000020, "Member 'FRigVMFunction_RandomFloat::LastSeed' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_RandomFloat, BaseSeed) == 0x000024, "Member 'FRigVMFunction_RandomFloat::BaseSeed' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_RandomFloat, TimeLeft) == 0x000028, "Member 'FRigVMFunction_RandomFloat::TimeLeft' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_RandomVector
// 0x0050 (0x0058 - 0x0008)
struct FRigVMFunction_RandomVector final : public FRigVMFunction_MathBase
{
public:
	int32                                         Seed;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Minimum;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Maximum;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Result;                                            // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LastResult;                                        // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastSeed;                                          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BaseSeed;                                          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeLeft;                                          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_RandomVector) == 0x000008, "Wrong alignment on FRigVMFunction_RandomVector");
static_assert(sizeof(FRigVMFunction_RandomVector) == 0x000058, "Wrong size on FRigVMFunction_RandomVector");
static_assert(offsetof(FRigVMFunction_RandomVector, Seed) == 0x000008, "Member 'FRigVMFunction_RandomVector::Seed' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_RandomVector, Minimum) == 0x00000C, "Member 'FRigVMFunction_RandomVector::Minimum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_RandomVector, Maximum) == 0x000010, "Member 'FRigVMFunction_RandomVector::Maximum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_RandomVector, Duration) == 0x000014, "Member 'FRigVMFunction_RandomVector::Duration' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_RandomVector, Result) == 0x000018, "Member 'FRigVMFunction_RandomVector::Result' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_RandomVector, LastResult) == 0x000030, "Member 'FRigVMFunction_RandomVector::LastResult' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_RandomVector, LastSeed) == 0x000048, "Member 'FRigVMFunction_RandomVector::LastSeed' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_RandomVector, BaseSeed) == 0x00004C, "Member 'FRigVMFunction_RandomVector::BaseSeed' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_RandomVector, TimeLeft) == 0x000050, "Member 'FRigVMFunction_RandomVector::TimeLeft' has a wrong offset!");

// ScriptStruct RigVM.RigVMSimPoint
// 0x0040 (0x0040 - 0x0000)
struct FRigVMSimPoint final
{
public:
	float                                         Mass;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Size;                                              // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearDamping;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InheritMotion;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0010(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LinearVelocity;                                    // 0x0028(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMSimPoint) == 0x000008, "Wrong alignment on FRigVMSimPoint");
static_assert(sizeof(FRigVMSimPoint) == 0x000040, "Wrong size on FRigVMSimPoint");
static_assert(offsetof(FRigVMSimPoint, Mass) == 0x000000, "Member 'FRigVMSimPoint::Mass' has a wrong offset!");
static_assert(offsetof(FRigVMSimPoint, Size) == 0x000004, "Member 'FRigVMSimPoint::Size' has a wrong offset!");
static_assert(offsetof(FRigVMSimPoint, LinearDamping) == 0x000008, "Member 'FRigVMSimPoint::LinearDamping' has a wrong offset!");
static_assert(offsetof(FRigVMSimPoint, InheritMotion) == 0x00000C, "Member 'FRigVMSimPoint::InheritMotion' has a wrong offset!");
static_assert(offsetof(FRigVMSimPoint, Position) == 0x000010, "Member 'FRigVMSimPoint::Position' has a wrong offset!");
static_assert(offsetof(FRigVMSimPoint, LinearVelocity) == 0x000028, "Member 'FRigVMSimPoint::LinearVelocity' has a wrong offset!");

// ScriptStruct RigVM.RigVMDispatch_ArrayMake
// 0x0000 (0x0070 - 0x0070)
struct FRigVMDispatch_ArrayMake final : public FRigVMDispatch_ArrayBase
{
};
static_assert(alignof(FRigVMDispatch_ArrayMake) == 0x000008, "Wrong alignment on FRigVMDispatch_ArrayMake");
static_assert(sizeof(FRigVMDispatch_ArrayMake) == 0x000070, "Wrong size on FRigVMDispatch_ArrayMake");

// ScriptStruct RigVM.RigVMDispatch_ArrayGetNum
// 0x0000 (0x0070 - 0x0070)
struct FRigVMDispatch_ArrayGetNum final : public FRigVMDispatch_ArrayBase
{
};
static_assert(alignof(FRigVMDispatch_ArrayGetNum) == 0x000008, "Wrong alignment on FRigVMDispatch_ArrayGetNum");
static_assert(sizeof(FRigVMDispatch_ArrayGetNum) == 0x000070, "Wrong size on FRigVMDispatch_ArrayGetNum");

// ScriptStruct RigVM.RigVMDispatch_ArrayGetAtIndex
// 0x0000 (0x0070 - 0x0070)
struct FRigVMDispatch_ArrayGetAtIndex final : public FRigVMDispatch_ArrayBase
{
};
static_assert(alignof(FRigVMDispatch_ArrayGetAtIndex) == 0x000008, "Wrong alignment on FRigVMDispatch_ArrayGetAtIndex");
static_assert(sizeof(FRigVMDispatch_ArrayGetAtIndex) == 0x000070, "Wrong size on FRigVMDispatch_ArrayGetAtIndex");

// ScriptStruct RigVM.RigVMDispatch_ArrayAdd
// 0x0000 (0x0070 - 0x0070)
struct FRigVMDispatch_ArrayAdd final : public FRigVMDispatch_ArraySetAtIndex
{
};
static_assert(alignof(FRigVMDispatch_ArrayAdd) == 0x000008, "Wrong alignment on FRigVMDispatch_ArrayAdd");
static_assert(sizeof(FRigVMDispatch_ArrayAdd) == 0x000070, "Wrong size on FRigVMDispatch_ArrayAdd");

// ScriptStruct RigVM.RigVMDispatch_ArrayRemove
// 0x0000 (0x0070 - 0x0070)
struct FRigVMDispatch_ArrayRemove final : public FRigVMDispatch_ArrayBaseMutable
{
};
static_assert(alignof(FRigVMDispatch_ArrayRemove) == 0x000008, "Wrong alignment on FRigVMDispatch_ArrayRemove");
static_assert(sizeof(FRigVMDispatch_ArrayRemove) == 0x000070, "Wrong size on FRigVMDispatch_ArrayRemove");

// ScriptStruct RigVM.RigVMDispatch_ArrayFind
// 0x0000 (0x0070 - 0x0070)
struct FRigVMDispatch_ArrayFind final : public FRigVMDispatch_ArrayBase
{
};
static_assert(alignof(FRigVMDispatch_ArrayFind) == 0x000008, "Wrong alignment on FRigVMDispatch_ArrayFind");
static_assert(sizeof(FRigVMDispatch_ArrayFind) == 0x000070, "Wrong size on FRigVMDispatch_ArrayFind");

// ScriptStruct RigVM.RigVMDispatch_ArrayIterator
// 0x0000 (0x0070 - 0x0070)
struct FRigVMDispatch_ArrayIterator final : public FRigVMDispatch_ArrayBaseMutable
{
};
static_assert(alignof(FRigVMDispatch_ArrayIterator) == 0x000008, "Wrong alignment on FRigVMDispatch_ArrayIterator");
static_assert(sizeof(FRigVMDispatch_ArrayIterator) == 0x000070, "Wrong size on FRigVMDispatch_ArrayIterator");

// ScriptStruct RigVM.RigVMDispatch_If
// 0x0000 (0x0070 - 0x0070)
struct FRigVMDispatch_If final : public FRigVMDispatch_CoreBase
{
};
static_assert(alignof(FRigVMDispatch_If) == 0x000008, "Wrong alignment on FRigVMDispatch_If");
static_assert(sizeof(FRigVMDispatch_If) == 0x000070, "Wrong size on FRigVMDispatch_If");

// ScriptStruct RigVM.RigVMDispatch_BreakStruct
// 0x0000 (0x0070 - 0x0070)
struct FRigVMDispatch_BreakStruct final : public FRigVMDispatch_MakeStruct
{
};
static_assert(alignof(FRigVMDispatch_BreakStruct) == 0x000008, "Wrong alignment on FRigVMDispatch_BreakStruct");
static_assert(sizeof(FRigVMDispatch_BreakStruct) == 0x000070, "Wrong size on FRigVMDispatch_BreakStruct");

// ScriptStruct RigVM.RigVMDispatch_SelectInt32
// 0x0000 (0x0070 - 0x0070)
struct FRigVMDispatch_SelectInt32 final : public FRigVMDispatch_CoreBase
{
};
static_assert(alignof(FRigVMDispatch_SelectInt32) == 0x000008, "Wrong alignment on FRigVMDispatch_SelectInt32");
static_assert(sizeof(FRigVMDispatch_SelectInt32) == 0x000070, "Wrong size on FRigVMDispatch_SelectInt32");

// ScriptStruct RigVM.RigVMFunction_NameTruncate
// 0x0020 (0x0028 - 0x0008)
struct FRigVMFunction_NameTruncate final : public FRigVMFunction_NameBase
{
public:
	class FName                                   Name;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FromEnd;                                           // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Remainder;                                         // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Chopped;                                           // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_NameTruncate) == 0x000008, "Wrong alignment on FRigVMFunction_NameTruncate");
static_assert(sizeof(FRigVMFunction_NameTruncate) == 0x000028, "Wrong size on FRigVMFunction_NameTruncate");
static_assert(offsetof(FRigVMFunction_NameTruncate, Name) == 0x000008, "Member 'FRigVMFunction_NameTruncate::Name' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_NameTruncate, Count) == 0x000010, "Member 'FRigVMFunction_NameTruncate::Count' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_NameTruncate, FromEnd) == 0x000014, "Member 'FRigVMFunction_NameTruncate::FromEnd' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_NameTruncate, Remainder) == 0x000018, "Member 'FRigVMFunction_NameTruncate::Remainder' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_NameTruncate, Chopped) == 0x000020, "Member 'FRigVMFunction_NameTruncate::Chopped' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_EndsWith
// 0x0018 (0x0020 - 0x0008)
struct FRigVMFunction_EndsWith final : public FRigVMFunction_NameBase
{
public:
	class FName                                   Name;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Ending;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_EndsWith) == 0x000008, "Wrong alignment on FRigVMFunction_EndsWith");
static_assert(sizeof(FRigVMFunction_EndsWith) == 0x000020, "Wrong size on FRigVMFunction_EndsWith");
static_assert(offsetof(FRigVMFunction_EndsWith, Name) == 0x000008, "Member 'FRigVMFunction_EndsWith::Name' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_EndsWith, Ending) == 0x000010, "Member 'FRigVMFunction_EndsWith::Ending' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_EndsWith, Result) == 0x000018, "Member 'FRigVMFunction_EndsWith::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_Contains
// 0x0018 (0x0020 - 0x0008)
struct FRigVMFunction_Contains final : public FRigVMFunction_NameBase
{
public:
	class FName                                   Name;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Search;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_Contains) == 0x000008, "Wrong alignment on FRigVMFunction_Contains");
static_assert(sizeof(FRigVMFunction_Contains) == 0x000020, "Wrong size on FRigVMFunction_Contains");
static_assert(offsetof(FRigVMFunction_Contains, Name) == 0x000008, "Member 'FRigVMFunction_Contains::Name' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_Contains, Search) == 0x000010, "Member 'FRigVMFunction_Contains::Search' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_Contains, Result) == 0x000018, "Member 'FRigVMFunction_Contains::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_StringConcat
// 0x0030 (0x0038 - 0x0008)
struct FRigVMFunction_StringConcat final : public FRigVMFunction_StringBase
{
public:
	class FString                                 A;                                                 // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 B;                                                 // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Result;                                            // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_StringConcat) == 0x000008, "Wrong alignment on FRigVMFunction_StringConcat");
static_assert(sizeof(FRigVMFunction_StringConcat) == 0x000038, "Wrong size on FRigVMFunction_StringConcat");
static_assert(offsetof(FRigVMFunction_StringConcat, A) == 0x000008, "Member 'FRigVMFunction_StringConcat::A' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_StringConcat, B) == 0x000018, "Member 'FRigVMFunction_StringConcat::B' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_StringConcat, Result) == 0x000028, "Member 'FRigVMFunction_StringConcat::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_StringReplace
// 0x0040 (0x0048 - 0x0008)
struct FRigVMFunction_StringReplace final : public FRigVMFunction_StringBase
{
public:
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Old;                                               // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 New;                                               // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Result;                                            // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_StringReplace) == 0x000008, "Wrong alignment on FRigVMFunction_StringReplace");
static_assert(sizeof(FRigVMFunction_StringReplace) == 0x000048, "Wrong size on FRigVMFunction_StringReplace");
static_assert(offsetof(FRigVMFunction_StringReplace, Name) == 0x000008, "Member 'FRigVMFunction_StringReplace::Name' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_StringReplace, Old) == 0x000018, "Member 'FRigVMFunction_StringReplace::Old' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_StringReplace, New) == 0x000028, "Member 'FRigVMFunction_StringReplace::New' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_StringReplace, Result) == 0x000038, "Member 'FRigVMFunction_StringReplace::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_StringStartsWith
// 0x0028 (0x0030 - 0x0008)
struct FRigVMFunction_StringStartsWith final : public FRigVMFunction_StringBase
{
public:
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Start;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_StringStartsWith) == 0x000008, "Wrong alignment on FRigVMFunction_StringStartsWith");
static_assert(sizeof(FRigVMFunction_StringStartsWith) == 0x000030, "Wrong size on FRigVMFunction_StringStartsWith");
static_assert(offsetof(FRigVMFunction_StringStartsWith, Name) == 0x000008, "Member 'FRigVMFunction_StringStartsWith::Name' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_StringStartsWith, Start) == 0x000018, "Member 'FRigVMFunction_StringStartsWith::Start' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_StringStartsWith, Result) == 0x000028, "Member 'FRigVMFunction_StringStartsWith::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_StringLength
// 0x0018 (0x0020 - 0x0008)
struct FRigVMFunction_StringLength final : public FRigVMFunction_StringBase
{
public:
	class FString                                 Value;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_StringLength) == 0x000008, "Wrong alignment on FRigVMFunction_StringLength");
static_assert(sizeof(FRigVMFunction_StringLength) == 0x000020, "Wrong size on FRigVMFunction_StringLength");
static_assert(offsetof(FRigVMFunction_StringLength, Value) == 0x000008, "Member 'FRigVMFunction_StringLength::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_StringLength, Length) == 0x000018, "Member 'FRigVMFunction_StringLength::Length' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_StringToUppercase
// 0x0020 (0x0028 - 0x0008)
struct FRigVMFunction_StringToUppercase final : public FRigVMFunction_StringBase
{
public:
	class FString                                 Value;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Result;                                            // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_StringToUppercase) == 0x000008, "Wrong alignment on FRigVMFunction_StringToUppercase");
static_assert(sizeof(FRigVMFunction_StringToUppercase) == 0x000028, "Wrong size on FRigVMFunction_StringToUppercase");
static_assert(offsetof(FRigVMFunction_StringToUppercase, Value) == 0x000008, "Member 'FRigVMFunction_StringToUppercase::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_StringToUppercase, Result) == 0x000018, "Member 'FRigVMFunction_StringToUppercase::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_StringReverse
// 0x0020 (0x0028 - 0x0008)
struct FRigVMFunction_StringReverse final : public FRigVMFunction_StringBase
{
public:
	class FString                                 Value;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Reverse;                                           // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_StringReverse) == 0x000008, "Wrong alignment on FRigVMFunction_StringReverse");
static_assert(sizeof(FRigVMFunction_StringReverse) == 0x000028, "Wrong size on FRigVMFunction_StringReverse");
static_assert(offsetof(FRigVMFunction_StringReverse, Value) == 0x000008, "Member 'FRigVMFunction_StringReverse::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_StringReverse, Reverse) == 0x000018, "Member 'FRigVMFunction_StringReverse::Reverse' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_StringRight
// 0x0028 (0x0030 - 0x0008)
struct FRigVMFunction_StringRight final : public FRigVMFunction_StringBase
{
public:
	class FString                                 Value;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Result;                                            // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_StringRight) == 0x000008, "Wrong alignment on FRigVMFunction_StringRight");
static_assert(sizeof(FRigVMFunction_StringRight) == 0x000030, "Wrong size on FRigVMFunction_StringRight");
static_assert(offsetof(FRigVMFunction_StringRight, Value) == 0x000008, "Member 'FRigVMFunction_StringRight::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_StringRight, Count) == 0x000018, "Member 'FRigVMFunction_StringRight::Count' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_StringRight, Result) == 0x000020, "Member 'FRigVMFunction_StringRight::Result' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_StringFind
// 0x0028 (0x0030 - 0x0008)
struct FRigVMFunction_StringFind final : public FRigVMFunction_StringBase
{
public:
	class FString                                 Value;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Search;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Found;                                             // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Index;                                             // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_StringFind) == 0x000008, "Wrong alignment on FRigVMFunction_StringFind");
static_assert(sizeof(FRigVMFunction_StringFind) == 0x000030, "Wrong size on FRigVMFunction_StringFind");
static_assert(offsetof(FRigVMFunction_StringFind, Value) == 0x000008, "Member 'FRigVMFunction_StringFind::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_StringFind, Search) == 0x000018, "Member 'FRigVMFunction_StringFind::Search' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_StringFind, Found) == 0x000028, "Member 'FRigVMFunction_StringFind::Found' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_StringFind, Index) == 0x00002C, "Member 'FRigVMFunction_StringFind::Index' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_StringJoin
// 0x0030 (0x0038 - 0x0008)
struct FRigVMFunction_StringJoin final : public FRigVMFunction_StringBase
{
public:
	TArray<class FString>                         Values;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Separator;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Result;                                            // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_StringJoin) == 0x000008, "Wrong alignment on FRigVMFunction_StringJoin");
static_assert(sizeof(FRigVMFunction_StringJoin) == 0x000038, "Wrong size on FRigVMFunction_StringJoin");
static_assert(offsetof(FRigVMFunction_StringJoin, Values) == 0x000008, "Member 'FRigVMFunction_StringJoin::Values' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_StringJoin, Separator) == 0x000018, "Member 'FRigVMFunction_StringJoin::Separator' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_StringJoin, Result) == 0x000028, "Member 'FRigVMFunction_StringJoin::Result' has a wrong offset!");

// ScriptStruct RigVM.RigDispatch_ToString
// 0x0000 (0x0070 - 0x0070)
struct FRigDispatch_ToString final : public FRigVMDispatchFactory
{
};
static_assert(alignof(FRigDispatch_ToString) == 0x000008, "Wrong alignment on FRigDispatch_ToString");
static_assert(sizeof(FRigDispatch_ToString) == 0x000070, "Wrong size on FRigDispatch_ToString");

// ScriptStruct RigVM.RigVMFunction_AccumulateVectorAdd
// 0x0070 (0x0078 - 0x0008)
struct FRigVMFunction_AccumulateVectorAdd final : public FRigVMFunction_AccumulateBase
{
public:
	struct FVector                                Increment;                                         // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InitialValue;                                      // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIntegrateDeltaTime;                               // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Result;                                            // 0x0040(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AccumulatedValue;                                  // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInitialized;                                    // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_AccumulateVectorAdd) == 0x000008, "Wrong alignment on FRigVMFunction_AccumulateVectorAdd");
static_assert(sizeof(FRigVMFunction_AccumulateVectorAdd) == 0x000078, "Wrong size on FRigVMFunction_AccumulateVectorAdd");
static_assert(offsetof(FRigVMFunction_AccumulateVectorAdd, Increment) == 0x000008, "Member 'FRigVMFunction_AccumulateVectorAdd::Increment' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateVectorAdd, InitialValue) == 0x000020, "Member 'FRigVMFunction_AccumulateVectorAdd::InitialValue' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateVectorAdd, bIntegrateDeltaTime) == 0x000038, "Member 'FRigVMFunction_AccumulateVectorAdd::bIntegrateDeltaTime' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateVectorAdd, Result) == 0x000040, "Member 'FRigVMFunction_AccumulateVectorAdd::Result' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateVectorAdd, AccumulatedValue) == 0x000058, "Member 'FRigVMFunction_AccumulateVectorAdd::AccumulatedValue' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateVectorAdd, bIsInitialized) == 0x000070, "Member 'FRigVMFunction_AccumulateVectorAdd::bIsInitialized' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_AccumulateVectorMul
// 0x0070 (0x0078 - 0x0008)
struct FRigVMFunction_AccumulateVectorMul final : public FRigVMFunction_AccumulateBase
{
public:
	struct FVector                                Multiplier;                                        // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InitialValue;                                      // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIntegrateDeltaTime;                               // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Result;                                            // 0x0040(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AccumulatedValue;                                  // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInitialized;                                    // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_AccumulateVectorMul) == 0x000008, "Wrong alignment on FRigVMFunction_AccumulateVectorMul");
static_assert(sizeof(FRigVMFunction_AccumulateVectorMul) == 0x000078, "Wrong size on FRigVMFunction_AccumulateVectorMul");
static_assert(offsetof(FRigVMFunction_AccumulateVectorMul, Multiplier) == 0x000008, "Member 'FRigVMFunction_AccumulateVectorMul::Multiplier' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateVectorMul, InitialValue) == 0x000020, "Member 'FRigVMFunction_AccumulateVectorMul::InitialValue' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateVectorMul, bIntegrateDeltaTime) == 0x000038, "Member 'FRigVMFunction_AccumulateVectorMul::bIntegrateDeltaTime' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateVectorMul, Result) == 0x000040, "Member 'FRigVMFunction_AccumulateVectorMul::Result' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateVectorMul, AccumulatedValue) == 0x000058, "Member 'FRigVMFunction_AccumulateVectorMul::AccumulatedValue' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateVectorMul, bIsInitialized) == 0x000070, "Member 'FRigVMFunction_AccumulateVectorMul::bIsInitialized' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_AccumulateTransformMul
// 0x01A8 (0x01B0 - 0x0008)
struct FRigVMFunction_AccumulateTransformMul final : public FRigVMFunction_AccumulateBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Multiplier;                                        // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             InitialValue;                                      // 0x0070(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlipOrder;                                        // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIntegrateDeltaTime;                               // 0x00D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D2[0xE];                                       // 0x00D2(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Result;                                            // 0x00E0(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             AccumulatedValue;                                  // 0x0140(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInitialized;                                    // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A1[0xF];                                      // 0x01A1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_AccumulateTransformMul) == 0x000010, "Wrong alignment on FRigVMFunction_AccumulateTransformMul");
static_assert(sizeof(FRigVMFunction_AccumulateTransformMul) == 0x0001B0, "Wrong size on FRigVMFunction_AccumulateTransformMul");
static_assert(offsetof(FRigVMFunction_AccumulateTransformMul, Multiplier) == 0x000010, "Member 'FRigVMFunction_AccumulateTransformMul::Multiplier' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateTransformMul, InitialValue) == 0x000070, "Member 'FRigVMFunction_AccumulateTransformMul::InitialValue' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateTransformMul, bFlipOrder) == 0x0000D0, "Member 'FRigVMFunction_AccumulateTransformMul::bFlipOrder' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateTransformMul, bIntegrateDeltaTime) == 0x0000D1, "Member 'FRigVMFunction_AccumulateTransformMul::bIntegrateDeltaTime' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateTransformMul, Result) == 0x0000E0, "Member 'FRigVMFunction_AccumulateTransformMul::Result' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateTransformMul, AccumulatedValue) == 0x000140, "Member 'FRigVMFunction_AccumulateTransformMul::AccumulatedValue' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateTransformMul, bIsInitialized) == 0x0001A0, "Member 'FRigVMFunction_AccumulateTransformMul::bIsInitialized' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_AccumulateVectorLerp
// 0x0070 (0x0078 - 0x0008)
struct FRigVMFunction_AccumulateVectorLerp final : public FRigVMFunction_AccumulateBase
{
public:
	struct FVector                                TargetValue;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InitialValue;                                      // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Blend;                                             // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIntegrateDeltaTime;                               // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Result;                                            // 0x0040(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AccumulatedValue;                                  // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInitialized;                                    // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_AccumulateVectorLerp) == 0x000008, "Wrong alignment on FRigVMFunction_AccumulateVectorLerp");
static_assert(sizeof(FRigVMFunction_AccumulateVectorLerp) == 0x000078, "Wrong size on FRigVMFunction_AccumulateVectorLerp");
static_assert(offsetof(FRigVMFunction_AccumulateVectorLerp, TargetValue) == 0x000008, "Member 'FRigVMFunction_AccumulateVectorLerp::TargetValue' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateVectorLerp, InitialValue) == 0x000020, "Member 'FRigVMFunction_AccumulateVectorLerp::InitialValue' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateVectorLerp, Blend) == 0x000038, "Member 'FRigVMFunction_AccumulateVectorLerp::Blend' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateVectorLerp, bIntegrateDeltaTime) == 0x00003C, "Member 'FRigVMFunction_AccumulateVectorLerp::bIntegrateDeltaTime' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateVectorLerp, Result) == 0x000040, "Member 'FRigVMFunction_AccumulateVectorLerp::Result' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateVectorLerp, AccumulatedValue) == 0x000058, "Member 'FRigVMFunction_AccumulateVectorLerp::AccumulatedValue' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateVectorLerp, bIsInitialized) == 0x000070, "Member 'FRigVMFunction_AccumulateVectorLerp::bIsInitialized' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_AccumulateTransformLerp
// 0x01A8 (0x01B0 - 0x0008)
struct FRigVMFunction_AccumulateTransformLerp final : public FRigVMFunction_AccumulateBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TargetValue;                                       // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             InitialValue;                                      // 0x0070(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Blend;                                             // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIntegrateDeltaTime;                               // 0x00D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D5[0xB];                                       // 0x00D5(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Result;                                            // 0x00E0(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             AccumulatedValue;                                  // 0x0140(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInitialized;                                    // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A1[0xF];                                      // 0x01A1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_AccumulateTransformLerp) == 0x000010, "Wrong alignment on FRigVMFunction_AccumulateTransformLerp");
static_assert(sizeof(FRigVMFunction_AccumulateTransformLerp) == 0x0001B0, "Wrong size on FRigVMFunction_AccumulateTransformLerp");
static_assert(offsetof(FRigVMFunction_AccumulateTransformLerp, TargetValue) == 0x000010, "Member 'FRigVMFunction_AccumulateTransformLerp::TargetValue' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateTransformLerp, InitialValue) == 0x000070, "Member 'FRigVMFunction_AccumulateTransformLerp::InitialValue' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateTransformLerp, Blend) == 0x0000D0, "Member 'FRigVMFunction_AccumulateTransformLerp::Blend' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateTransformLerp, bIntegrateDeltaTime) == 0x0000D4, "Member 'FRigVMFunction_AccumulateTransformLerp::bIntegrateDeltaTime' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateTransformLerp, Result) == 0x0000E0, "Member 'FRigVMFunction_AccumulateTransformLerp::Result' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateTransformLerp, AccumulatedValue) == 0x000140, "Member 'FRigVMFunction_AccumulateTransformLerp::AccumulatedValue' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateTransformLerp, bIsInitialized) == 0x0001A0, "Member 'FRigVMFunction_AccumulateTransformLerp::bIsInitialized' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_AccumulateVectorRange
// 0x0080 (0x0088 - 0x0008)
struct FRigVMFunction_AccumulateVectorRange final : public FRigVMFunction_AccumulateBase
{
public:
	struct FVector                                Value;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Minimum;                                           // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Maximum;                                           // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AccumulatedMinimum;                                // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AccumulatedMaximum;                                // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInitialized;                                    // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_AccumulateVectorRange) == 0x000008, "Wrong alignment on FRigVMFunction_AccumulateVectorRange");
static_assert(sizeof(FRigVMFunction_AccumulateVectorRange) == 0x000088, "Wrong size on FRigVMFunction_AccumulateVectorRange");
static_assert(offsetof(FRigVMFunction_AccumulateVectorRange, Value) == 0x000008, "Member 'FRigVMFunction_AccumulateVectorRange::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateVectorRange, Minimum) == 0x000020, "Member 'FRigVMFunction_AccumulateVectorRange::Minimum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateVectorRange, Maximum) == 0x000038, "Member 'FRigVMFunction_AccumulateVectorRange::Maximum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateVectorRange, AccumulatedMinimum) == 0x000050, "Member 'FRigVMFunction_AccumulateVectorRange::AccumulatedMinimum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateVectorRange, AccumulatedMaximum) == 0x000068, "Member 'FRigVMFunction_AccumulateVectorRange::AccumulatedMaximum' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AccumulateVectorRange, bIsInitialized) == 0x000080, "Member 'FRigVMFunction_AccumulateVectorRange::bIsInitialized' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_AlphaInterpVector
// 0x0098 (0x00A0 - 0x0008)
struct FRigVMFunction_AlphaInterpVector final : public FRigVMFunction_SimBase
{
public:
	struct FVector                                Value;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Bias;                                              // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMapRange;                                         // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInputRange                            InRange;                                           // 0x002C(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FInputRange                            OutRange;                                          // 0x0034(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bClampResult;                                      // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ClampMin;                                          // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampMax;                                          // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterpResult;                                     // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InterpSpeedIncreasing;                             // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpSpeedDecreasing;                             // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Result;                                            // 0x0058(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputScaleBiasClamp                   ScaleBiasClamp;                                    // 0x0070(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_AlphaInterpVector) == 0x000008, "Wrong alignment on FRigVMFunction_AlphaInterpVector");
static_assert(sizeof(FRigVMFunction_AlphaInterpVector) == 0x0000A0, "Wrong size on FRigVMFunction_AlphaInterpVector");
static_assert(offsetof(FRigVMFunction_AlphaInterpVector, Value) == 0x000008, "Member 'FRigVMFunction_AlphaInterpVector::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AlphaInterpVector, Scale) == 0x000020, "Member 'FRigVMFunction_AlphaInterpVector::Scale' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AlphaInterpVector, Bias) == 0x000024, "Member 'FRigVMFunction_AlphaInterpVector::Bias' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AlphaInterpVector, bMapRange) == 0x000028, "Member 'FRigVMFunction_AlphaInterpVector::bMapRange' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AlphaInterpVector, InRange) == 0x00002C, "Member 'FRigVMFunction_AlphaInterpVector::InRange' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AlphaInterpVector, OutRange) == 0x000034, "Member 'FRigVMFunction_AlphaInterpVector::OutRange' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AlphaInterpVector, bClampResult) == 0x00003C, "Member 'FRigVMFunction_AlphaInterpVector::bClampResult' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AlphaInterpVector, ClampMin) == 0x000040, "Member 'FRigVMFunction_AlphaInterpVector::ClampMin' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AlphaInterpVector, ClampMax) == 0x000044, "Member 'FRigVMFunction_AlphaInterpVector::ClampMax' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AlphaInterpVector, bInterpResult) == 0x000048, "Member 'FRigVMFunction_AlphaInterpVector::bInterpResult' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AlphaInterpVector, InterpSpeedIncreasing) == 0x00004C, "Member 'FRigVMFunction_AlphaInterpVector::InterpSpeedIncreasing' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AlphaInterpVector, InterpSpeedDecreasing) == 0x000050, "Member 'FRigVMFunction_AlphaInterpVector::InterpSpeedDecreasing' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AlphaInterpVector, Result) == 0x000058, "Member 'FRigVMFunction_AlphaInterpVector::Result' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_AlphaInterpVector, ScaleBiasClamp) == 0x000070, "Member 'FRigVMFunction_AlphaInterpVector::ScaleBiasClamp' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_DeltaFromPreviousFloat
// 0x0018 (0x0020 - 0x0008)
struct FRigVMFunction_DeltaFromPreviousFloat final : public FRigVMFunction_SimBase
{
public:
	float                                         Value;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delta;                                             // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreviousValue;                                     // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Cache;                                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInitialized;                                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_DeltaFromPreviousFloat) == 0x000008, "Wrong alignment on FRigVMFunction_DeltaFromPreviousFloat");
static_assert(sizeof(FRigVMFunction_DeltaFromPreviousFloat) == 0x000020, "Wrong size on FRigVMFunction_DeltaFromPreviousFloat");
static_assert(offsetof(FRigVMFunction_DeltaFromPreviousFloat, Value) == 0x000008, "Member 'FRigVMFunction_DeltaFromPreviousFloat::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DeltaFromPreviousFloat, Delta) == 0x00000C, "Member 'FRigVMFunction_DeltaFromPreviousFloat::Delta' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DeltaFromPreviousFloat, PreviousValue) == 0x000010, "Member 'FRigVMFunction_DeltaFromPreviousFloat::PreviousValue' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DeltaFromPreviousFloat, Cache) == 0x000014, "Member 'FRigVMFunction_DeltaFromPreviousFloat::Cache' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DeltaFromPreviousFloat, bIsInitialized) == 0x000018, "Member 'FRigVMFunction_DeltaFromPreviousFloat::bIsInitialized' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_DeltaFromPreviousQuat
// 0x0098 (0x00A0 - 0x0008)
struct FRigVMFunction_DeltaFromPreviousQuat final : public FRigVMFunction_SimBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Value;                                             // 0x0010(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  Delta;                                             // 0x0030(0x0020)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  PreviousValue;                                     // 0x0050(0x0020)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  Cache;                                             // 0x0070(0x0020)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInitialized;                                    // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0xF];                                       // 0x0091(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_DeltaFromPreviousQuat) == 0x000010, "Wrong alignment on FRigVMFunction_DeltaFromPreviousQuat");
static_assert(sizeof(FRigVMFunction_DeltaFromPreviousQuat) == 0x0000A0, "Wrong size on FRigVMFunction_DeltaFromPreviousQuat");
static_assert(offsetof(FRigVMFunction_DeltaFromPreviousQuat, Value) == 0x000010, "Member 'FRigVMFunction_DeltaFromPreviousQuat::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DeltaFromPreviousQuat, Delta) == 0x000030, "Member 'FRigVMFunction_DeltaFromPreviousQuat::Delta' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DeltaFromPreviousQuat, PreviousValue) == 0x000050, "Member 'FRigVMFunction_DeltaFromPreviousQuat::PreviousValue' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DeltaFromPreviousQuat, Cache) == 0x000070, "Member 'FRigVMFunction_DeltaFromPreviousQuat::Cache' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_DeltaFromPreviousQuat, bIsInitialized) == 0x000090, "Member 'FRigVMFunction_DeltaFromPreviousQuat::bIsInitialized' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_KalmanFloat
// 0x0028 (0x0030 - 0x0008)
struct FRigVMFunction_KalmanFloat final : public FRigVMFunction_SimBase
{
public:
	float                                         Value;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BufferSize;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Result;                                            // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 Buffer;                                            // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         LastInsertIndex;                                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_KalmanFloat) == 0x000008, "Wrong alignment on FRigVMFunction_KalmanFloat");
static_assert(sizeof(FRigVMFunction_KalmanFloat) == 0x000030, "Wrong size on FRigVMFunction_KalmanFloat");
static_assert(offsetof(FRigVMFunction_KalmanFloat, Value) == 0x000008, "Member 'FRigVMFunction_KalmanFloat::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_KalmanFloat, BufferSize) == 0x00000C, "Member 'FRigVMFunction_KalmanFloat::BufferSize' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_KalmanFloat, Result) == 0x000010, "Member 'FRigVMFunction_KalmanFloat::Result' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_KalmanFloat, Buffer) == 0x000018, "Member 'FRigVMFunction_KalmanFloat::Buffer' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_KalmanFloat, LastInsertIndex) == 0x000028, "Member 'FRigVMFunction_KalmanFloat::LastInsertIndex' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_KalmanTransform
// 0x00F8 (0x0100 - 0x0008)
struct FRigVMFunction_KalmanTransform final : public FRigVMFunction_SimBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Value;                                             // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BufferSize;                                        // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0xC];                                       // 0x0074(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Result;                                            // 0x0080(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     Buffer;                                            // 0x00E0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         LastInsertIndex;                                   // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0xC];                                       // 0x00F4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_KalmanTransform) == 0x000010, "Wrong alignment on FRigVMFunction_KalmanTransform");
static_assert(sizeof(FRigVMFunction_KalmanTransform) == 0x000100, "Wrong size on FRigVMFunction_KalmanTransform");
static_assert(offsetof(FRigVMFunction_KalmanTransform, Value) == 0x000010, "Member 'FRigVMFunction_KalmanTransform::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_KalmanTransform, BufferSize) == 0x000070, "Member 'FRigVMFunction_KalmanTransform::BufferSize' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_KalmanTransform, Result) == 0x000080, "Member 'FRigVMFunction_KalmanTransform::Result' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_KalmanTransform, Buffer) == 0x0000E0, "Member 'FRigVMFunction_KalmanTransform::Buffer' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_KalmanTransform, LastInsertIndex) == 0x0000F0, "Member 'FRigVMFunction_KalmanTransform::LastInsertIndex' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_TimeLoop
// 0x0030 (0x0038 - 0x0008)
struct FRigVMFunction_TimeLoop final : public FRigVMFunction_SimBase
{
public:
	float                                         Speed;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Normalize;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Absolute;                                          // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Relative;                                          // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipFlop;                                          // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Even;                                              // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AccumulatedAbsolute;                               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccumulatedRelative;                               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumIterations;                                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInitialized;                                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_TimeLoop) == 0x000008, "Wrong alignment on FRigVMFunction_TimeLoop");
static_assert(sizeof(FRigVMFunction_TimeLoop) == 0x000038, "Wrong size on FRigVMFunction_TimeLoop");
static_assert(offsetof(FRigVMFunction_TimeLoop, Speed) == 0x000008, "Member 'FRigVMFunction_TimeLoop::Speed' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_TimeLoop, Duration) == 0x00000C, "Member 'FRigVMFunction_TimeLoop::Duration' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_TimeLoop, Normalize) == 0x000010, "Member 'FRigVMFunction_TimeLoop::Normalize' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_TimeLoop, Absolute) == 0x000014, "Member 'FRigVMFunction_TimeLoop::Absolute' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_TimeLoop, Relative) == 0x000018, "Member 'FRigVMFunction_TimeLoop::Relative' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_TimeLoop, FlipFlop) == 0x00001C, "Member 'FRigVMFunction_TimeLoop::FlipFlop' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_TimeLoop, Even) == 0x000020, "Member 'FRigVMFunction_TimeLoop::Even' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_TimeLoop, AccumulatedAbsolute) == 0x000024, "Member 'FRigVMFunction_TimeLoop::AccumulatedAbsolute' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_TimeLoop, AccumulatedRelative) == 0x000028, "Member 'FRigVMFunction_TimeLoop::AccumulatedRelative' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_TimeLoop, NumIterations) == 0x00002C, "Member 'FRigVMFunction_TimeLoop::NumIterations' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_TimeLoop, bIsInitialized) == 0x000030, "Member 'FRigVMFunction_TimeLoop::bIsInitialized' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_TimeOffsetVector
// 0x0068 (0x0070 - 0x0008)
struct FRigVMFunction_TimeOffsetVector final : public FRigVMFunction_SimBase
{
public:
	struct FVector                                Value;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondsAgo;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BufferSize;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeRange;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Result;                                            // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        Buffer;                                            // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 DeltaTimes;                                        // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         LastInsertIndex;                                   // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UpperBound;                                        // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_TimeOffsetVector) == 0x000008, "Wrong alignment on FRigVMFunction_TimeOffsetVector");
static_assert(sizeof(FRigVMFunction_TimeOffsetVector) == 0x000070, "Wrong size on FRigVMFunction_TimeOffsetVector");
static_assert(offsetof(FRigVMFunction_TimeOffsetVector, Value) == 0x000008, "Member 'FRigVMFunction_TimeOffsetVector::Value' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_TimeOffsetVector, SecondsAgo) == 0x000020, "Member 'FRigVMFunction_TimeOffsetVector::SecondsAgo' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_TimeOffsetVector, BufferSize) == 0x000024, "Member 'FRigVMFunction_TimeOffsetVector::BufferSize' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_TimeOffsetVector, TimeRange) == 0x000028, "Member 'FRigVMFunction_TimeOffsetVector::TimeRange' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_TimeOffsetVector, Result) == 0x000030, "Member 'FRigVMFunction_TimeOffsetVector::Result' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_TimeOffsetVector, Buffer) == 0x000048, "Member 'FRigVMFunction_TimeOffsetVector::Buffer' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_TimeOffsetVector, DeltaTimes) == 0x000058, "Member 'FRigVMFunction_TimeOffsetVector::DeltaTimes' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_TimeOffsetVector, LastInsertIndex) == 0x000068, "Member 'FRigVMFunction_TimeOffsetVector::LastInsertIndex' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_TimeOffsetVector, UpperBound) == 0x00006C, "Member 'FRigVMFunction_TimeOffsetVector::UpperBound' has a wrong offset!");

// ScriptStruct RigVM.RigVMFunction_VerletIntegrateVector
// 0x00D0 (0x00D8 - 0x0008)
struct FRigVMFunction_VerletIntegrateVector final : public FRigVMFunction_SimBase
{
public:
	struct FVector                                Target;                                            // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Strength;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damp;                                              // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Blend;                                             // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Force;                                             // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0048(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Velocity;                                          // 0x0060(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Acceleration;                                      // 0x0078(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigVMSimPoint                         Point;                                             // 0x0090(0x0040)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bInitialized;                                      // 0x00D0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_VerletIntegrateVector) == 0x000008, "Wrong alignment on FRigVMFunction_VerletIntegrateVector");
static_assert(sizeof(FRigVMFunction_VerletIntegrateVector) == 0x0000D8, "Wrong size on FRigVMFunction_VerletIntegrateVector");
static_assert(offsetof(FRigVMFunction_VerletIntegrateVector, Target) == 0x000008, "Member 'FRigVMFunction_VerletIntegrateVector::Target' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_VerletIntegrateVector, Strength) == 0x000020, "Member 'FRigVMFunction_VerletIntegrateVector::Strength' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_VerletIntegrateVector, Damp) == 0x000024, "Member 'FRigVMFunction_VerletIntegrateVector::Damp' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_VerletIntegrateVector, Blend) == 0x000028, "Member 'FRigVMFunction_VerletIntegrateVector::Blend' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_VerletIntegrateVector, Force) == 0x000030, "Member 'FRigVMFunction_VerletIntegrateVector::Force' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_VerletIntegrateVector, Position) == 0x000048, "Member 'FRigVMFunction_VerletIntegrateVector::Position' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_VerletIntegrateVector, Velocity) == 0x000060, "Member 'FRigVMFunction_VerletIntegrateVector::Velocity' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_VerletIntegrateVector, Acceleration) == 0x000078, "Member 'FRigVMFunction_VerletIntegrateVector::Acceleration' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_VerletIntegrateVector, Point) == 0x000090, "Member 'FRigVMFunction_VerletIntegrateVector::Point' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_VerletIntegrateVector, bInitialized) == 0x0000D0, "Member 'FRigVMFunction_VerletIntegrateVector::bInitialized' has a wrong offset!");

}

