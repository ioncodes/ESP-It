#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_SpyMonitor

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function B_SpyMonitor.B_SpyMonitor_C.Activated
// 0x0008 (0x0008 - 0x0000)
struct B_SpyMonitor_C_Activated final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_SpyMonitor_C_Activated) == 0x000008, "Wrong alignment on B_SpyMonitor_C_Activated");
static_assert(sizeof(B_SpyMonitor_C_Activated) == 0x000008, "Wrong size on B_SpyMonitor_C_Activated");
static_assert(offsetof(B_SpyMonitor_C_Activated, PlayerController) == 0x000000, "Member 'B_SpyMonitor_C_Activated::PlayerController' has a wrong offset!");

// Function B_SpyMonitor.B_SpyMonitor_C.BndEvt__Highlight_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature
// 0x0108 (0x0108 - 0x0000)
struct B_SpyMonitor_C_BndEvt__Highlight_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51BA[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(B_SpyMonitor_C_BndEvt__Highlight_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on B_SpyMonitor_C_BndEvt__Highlight_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(B_SpyMonitor_C_BndEvt__Highlight_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature) == 0x000108, "Wrong size on B_SpyMonitor_C_BndEvt__Highlight_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(B_SpyMonitor_C_BndEvt__Highlight_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'B_SpyMonitor_C_BndEvt__Highlight_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_BndEvt__Highlight_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'B_SpyMonitor_C_BndEvt__Highlight_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_BndEvt__Highlight_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'B_SpyMonitor_C_BndEvt__Highlight_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_BndEvt__Highlight_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'B_SpyMonitor_C_BndEvt__Highlight_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_BndEvt__Highlight_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'B_SpyMonitor_C_BndEvt__Highlight_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_BndEvt__Highlight_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'B_SpyMonitor_C_BndEvt__Highlight_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function B_SpyMonitor.B_SpyMonitor_C.BndEvt__Highlight_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct B_SpyMonitor_C_BndEvt__Highlight_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_SpyMonitor_C_BndEvt__Highlight_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on B_SpyMonitor_C_BndEvt__Highlight_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(B_SpyMonitor_C_BndEvt__Highlight_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on B_SpyMonitor_C_BndEvt__Highlight_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(B_SpyMonitor_C_BndEvt__Highlight_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'B_SpyMonitor_C_BndEvt__Highlight_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_BndEvt__Highlight_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'B_SpyMonitor_C_BndEvt__Highlight_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_BndEvt__Highlight_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'B_SpyMonitor_C_BndEvt__Highlight_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_BndEvt__Highlight_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'B_SpyMonitor_C_BndEvt__Highlight_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function B_SpyMonitor.B_SpyMonitor_C.Deactivated
// 0x0008 (0x0008 - 0x0000)
struct B_SpyMonitor_C_Deactivated final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_SpyMonitor_C_Deactivated) == 0x000008, "Wrong alignment on B_SpyMonitor_C_Deactivated");
static_assert(sizeof(B_SpyMonitor_C_Deactivated) == 0x000008, "Wrong size on B_SpyMonitor_C_Deactivated");
static_assert(offsetof(B_SpyMonitor_C_Deactivated, PlayerController) == 0x000000, "Member 'B_SpyMonitor_C_Deactivated::PlayerController' has a wrong offset!");

// Function B_SpyMonitor.B_SpyMonitor_C.ExecuteUbergraph_B_SpyMonitor
// 0x01E8 (0x01E8 - 0x0000)
struct B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51BB[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_1;  // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_1;           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_1;            // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_1;       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51BC[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0028(0x00E8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class APawn*                                  K2Node_DynamicCast_AsPawn;                         // 0x0110(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51BD[0x6];                                     // 0x011A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0120(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0128(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0130(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51BE[0x4];                                     // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  K2Node_DynamicCast_AsPawn_1;                       // 0x0140(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue_1;        // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51BF[0x6];                                     // 0x014A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0150(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetFirstLocalPlayerController_ReturnValue; // 0x0158(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51C0[0x7];                                     // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_SecurityCameraHud_C*                CallFunc_Create_ReturnValue;                       // 0x0168(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0170(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_ImpostorPlayerState_C*               K2Node_DynamicCast_AsB_Impostor_Player_State;      // 0x0178(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51C1[0x7];                                     // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_1;            // 0x0188(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetFirstLocalPlayerController_ReturnValue_1; // 0x0190(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      K2Node_CustomEvent_PlayerController_1;             // 0x0198(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue_1;                 // 0x01A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_ImpostorPlayerState_C*               K2Node_DynamicCast_AsB_Impostor_Player_State_1;    // 0x01A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x01B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51C2[0x6];                                     // 0x01B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x01B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_ImpostorGameState_C*                 K2Node_DynamicCast_AsB_Impostor_Game_State;        // 0x01C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsTickingCooldowns_TickingCooldowns;      // 0x01C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x01CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51C3[0x5];                                     // 0x01CB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      K2Node_CustomEvent_PlayerController;               // 0x01D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue_2;                 // 0x01D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor) == 0x000008, "Wrong alignment on B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor");
static_assert(sizeof(B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor) == 0x0001E8, "Wrong size on B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor");
static_assert(offsetof(B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor, EntryPoint) == 0x000000, "Member 'B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor::EntryPoint' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor, K2Node_ComponentBoundEvent_OverlappedComponent_1) == 0x000008, "Member 'B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor::K2Node_ComponentBoundEvent_OverlappedComponent_1' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor, K2Node_ComponentBoundEvent_OtherActor_1) == 0x000010, "Member 'B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor::K2Node_ComponentBoundEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor, K2Node_ComponentBoundEvent_OtherComp_1) == 0x000018, "Member 'B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor::K2Node_ComponentBoundEvent_OtherComp_1' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor, K2Node_ComponentBoundEvent_OtherBodyIndex_1) == 0x000020, "Member 'B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor::K2Node_ComponentBoundEvent_OtherBodyIndex_1' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor, K2Node_ComponentBoundEvent_bFromSweep) == 0x000024, "Member 'B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor, K2Node_ComponentBoundEvent_SweepResult) == 0x000028, "Member 'B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor, K2Node_DynamicCast_AsPawn) == 0x000110, "Member 'B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor::K2Node_DynamicCast_AsPawn' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor, K2Node_DynamicCast_bSuccess) == 0x000118, "Member 'B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor, CallFunc_IsLocallyControlled_ReturnValue) == 0x000119, "Member 'B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000120, "Member 'B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor, K2Node_ComponentBoundEvent_OtherActor) == 0x000128, "Member 'B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor, K2Node_ComponentBoundEvent_OtherComp) == 0x000130, "Member 'B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000138, "Member 'B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor, K2Node_DynamicCast_AsPawn_1) == 0x000140, "Member 'B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor::K2Node_DynamicCast_AsPawn_1' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor, K2Node_DynamicCast_bSuccess_1) == 0x000148, "Member 'B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor, CallFunc_IsLocallyControlled_ReturnValue_1) == 0x000149, "Member 'B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor::CallFunc_IsLocallyControlled_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor, CallFunc_GetGameInstance_ReturnValue) == 0x000150, "Member 'B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor, CallFunc_GetFirstLocalPlayerController_ReturnValue) == 0x000158, "Member 'B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor::CallFunc_GetFirstLocalPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor, CallFunc_Not_PreBool_ReturnValue) == 0x000160, "Member 'B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor, CallFunc_Create_ReturnValue) == 0x000168, "Member 'B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor, CallFunc_K2_GetPawn_ReturnValue) == 0x000170, "Member 'B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor, K2Node_DynamicCast_AsB_Impostor_Player_State) == 0x000178, "Member 'B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor::K2Node_DynamicCast_AsB_Impostor_Player_State' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor, K2Node_DynamicCast_bSuccess_2) == 0x000180, "Member 'B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor, CallFunc_GetGameInstance_ReturnValue_1) == 0x000188, "Member 'B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor::CallFunc_GetGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor, CallFunc_GetFirstLocalPlayerController_ReturnValue_1) == 0x000190, "Member 'B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor::CallFunc_GetFirstLocalPlayerController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor, K2Node_CustomEvent_PlayerController_1) == 0x000198, "Member 'B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor::K2Node_CustomEvent_PlayerController_1' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor, CallFunc_K2_GetPawn_ReturnValue_1) == 0x0001A0, "Member 'B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor::CallFunc_K2_GetPawn_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor, K2Node_DynamicCast_AsB_Impostor_Player_State_1) == 0x0001A8, "Member 'B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor::K2Node_DynamicCast_AsB_Impostor_Player_State_1' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor, K2Node_DynamicCast_bSuccess_3) == 0x0001B0, "Member 'B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor, CallFunc_HasAuthority_ReturnValue) == 0x0001B1, "Member 'B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor, CallFunc_GetGameState_ReturnValue) == 0x0001B8, "Member 'B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor, K2Node_DynamicCast_AsB_Impostor_Game_State) == 0x0001C0, "Member 'B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor::K2Node_DynamicCast_AsB_Impostor_Game_State' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor, K2Node_DynamicCast_bSuccess_4) == 0x0001C8, "Member 'B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor, CallFunc_IsTickingCooldowns_TickingCooldowns) == 0x0001C9, "Member 'B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor::CallFunc_IsTickingCooldowns_TickingCooldowns' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor, CallFunc_BooleanAND_ReturnValue) == 0x0001CA, "Member 'B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor, K2Node_CustomEvent_PlayerController) == 0x0001D0, "Member 'B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor::K2Node_CustomEvent_PlayerController' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor, CallFunc_K2_GetPawn_ReturnValue_2) == 0x0001D8, "Member 'B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor::CallFunc_K2_GetPawn_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor, K2Node_Event_DeltaSeconds) == 0x0001E0, "Member 'B_SpyMonitor_C_ExecuteUbergraph_B_SpyMonitor::K2Node_Event_DeltaSeconds' has a wrong offset!");

// Function B_SpyMonitor.B_SpyMonitor_C.GetTooltipText
// 0x0018 (0x0018 - 0x0000)
struct B_SpyMonitor_C_GetTooltipText final
{
public:
	class FText                                   ToolTip;                                           // 0x0000(0x0018)(Parm, OutParm)
};
static_assert(alignof(B_SpyMonitor_C_GetTooltipText) == 0x000008, "Wrong alignment on B_SpyMonitor_C_GetTooltipText");
static_assert(sizeof(B_SpyMonitor_C_GetTooltipText) == 0x000018, "Wrong size on B_SpyMonitor_C_GetTooltipText");
static_assert(offsetof(B_SpyMonitor_C_GetTooltipText, ToolTip) == 0x000000, "Member 'B_SpyMonitor_C_GetTooltipText::ToolTip' has a wrong offset!");

// Function B_SpyMonitor.B_SpyMonitor_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct B_SpyMonitor_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_SpyMonitor_C_ReceiveTick) == 0x000004, "Wrong alignment on B_SpyMonitor_C_ReceiveTick");
static_assert(sizeof(B_SpyMonitor_C_ReceiveTick) == 0x000004, "Wrong size on B_SpyMonitor_C_ReceiveTick");
static_assert(offsetof(B_SpyMonitor_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'B_SpyMonitor_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function B_SpyMonitor.B_SpyMonitor_C.Tick
// 0x0058 (0x0058 - 0x0000)
struct B_SpyMonitor_C_Tick final
{
public:
	bool                                          StillActive;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51C4[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Pawns;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51C5[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_DynamicCast_AsPawn;                         // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51C6[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51C7[0x5];                                     // 0x0043(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetOverlappingActors_OverlappingActors;   // 0x0048(0x0010)(ReferenceParm)
};
static_assert(alignof(B_SpyMonitor_C_Tick) == 0x000008, "Wrong alignment on B_SpyMonitor_C_Tick");
static_assert(sizeof(B_SpyMonitor_C_Tick) == 0x000058, "Wrong size on B_SpyMonitor_C_Tick");
static_assert(offsetof(B_SpyMonitor_C_Tick, StillActive) == 0x000000, "Member 'B_SpyMonitor_C_Tick::StillActive' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_Tick, Pawns) == 0x000008, "Member 'B_SpyMonitor_C_Tick::Pawns' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_Tick, Temp_int_Array_Index_Variable) == 0x000018, "Member 'B_SpyMonitor_C_Tick::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_Tick, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'B_SpyMonitor_C_Tick::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_Tick, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'B_SpyMonitor_C_Tick::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_Tick, CallFunc_Array_Get_Item) == 0x000028, "Member 'B_SpyMonitor_C_Tick::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_Tick, K2Node_DynamicCast_AsPawn) == 0x000030, "Member 'B_SpyMonitor_C_Tick::K2Node_DynamicCast_AsPawn' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_Tick, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'B_SpyMonitor_C_Tick::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_Tick, CallFunc_Array_Length_ReturnValue) == 0x00003C, "Member 'B_SpyMonitor_C_Tick::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_Tick, CallFunc_IsLocallyControlled_ReturnValue) == 0x000040, "Member 'B_SpyMonitor_C_Tick::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_Tick, CallFunc_Less_IntInt_ReturnValue) == 0x000041, "Member 'B_SpyMonitor_C_Tick::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_Tick, CallFunc_Not_PreBool_ReturnValue) == 0x000042, "Member 'B_SpyMonitor_C_Tick::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SpyMonitor_C_Tick, CallFunc_GetOverlappingActors_OverlappingActors) == 0x000048, "Member 'B_SpyMonitor_C_Tick::CallFunc_GetOverlappingActors_OverlappingActors' has a wrong offset!");

}

