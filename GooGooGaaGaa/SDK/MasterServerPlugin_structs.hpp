#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MasterServerPlugin

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "OnlineSubsystemUtils_structs.hpp"


namespace SDK
{

// Enum MasterServerPlugin.ELoginAndRegisterResult
// NumValues: 0x0008
enum class ELoginAndRegisterResult : uint8
{
	UnkownError                              = 0,
	AccountAlreadyExists                     = 1,
	FailedRegister                           = 2,
	RegisterAndLoginSuccessful               = 3,
	LoginSuccessful                          = 4,
	LoginFailed                              = 5,
	LoginFailedCredentials                   = 6,
	ELoginAndRegisterResult_MAX              = 7,
};

// Enum MasterServerPlugin.EItemChangeReason
// NumValues: 0x0009
enum class EItemChangeReason : uint8
{
	Other                                    = 0,
	Craft                                    = 1,
	Trade                                    = 2,
	Cauldron                                 = 3,
	Consolidated                             = 4,
	Achievement                              = 5,
	Quest                                    = 6,
	SourceTransfer                           = 7,
	EItemChangeReason_MAX                    = 8,
};

// Enum MasterServerPlugin.EItemChangeType
// NumValues: 0x0004
enum class EItemChangeType : uint8
{
	Invalid                                  = 0,
	ItemAdded                                = 1,
	ItemRemoved                              = 2,
	EItemChangeType_MAX                      = 3,
};

// Enum MasterServerPlugin.EQuestChangeReason
// NumValues: 0x0006
enum class EQuestChangeReason : uint8
{
	Invalid                                  = 0,
	AssignedQuestsDidChange                  = 1,
	QuestCompleted                           = 2,
	QuestRemoved                             = 3,
	QuestAdded                               = 4,
	EQuestChangeReason_MAX                   = 5,
};

// Enum MasterServerPlugin.ERuntimeAccountFlags
// NumValues: 0x0003
enum class ERuntimeAccountFlags : uint8
{
	None                                     = 0,
	SessionUsageBlocked                      = 1,
	ERuntimeAccountFlags_MAX                 = 2,
};

// Enum MasterServerPlugin.EStatChangeReason
// NumValues: 0x0003
enum class EStatChangeReason : uint8
{
	Invalid                                  = 0,
	AchievementGranted                       = 1,
	EStatChangeReason_MAX                    = 2,
};

// Enum MasterServerPlugin.EAccountSettingType
// NumValues: 0x0004
enum class EAccountSettingType : uint8
{
	String                                   = 0,
	Bool                                     = 1,
	Int32                                    = 2,
	EAccountSettingType_MAX                  = 3,
};

// Enum MasterServerPlugin.ENativeUserBehaviorEventType
// NumValues: 0x0006
enum class ENativeUserBehaviorEventType : uint8
{
	None                                     = 0,
	Start                                    = 1,
	Heartbeat                                = 2,
	End                                      = 3,
	Singular                                 = 4,
	ENativeUserBehaviorEventType_MAX         = 5,
};

// Enum MasterServerPlugin.EInstanceMgrPacketType
// NumValues: 0x0006
enum class EInstanceMgrPacketType : uint8
{
	Ping                                     = 10,
	PingResponse                             = 11,
	Hello                                    = 20,
	Welcome                                  = 21,
	Teardown                                 = 31,
	EInstanceMgrPacketType_MAX               = 32,
};

// Enum MasterServerPlugin.EGameServerType
// NumValues: 0x0004
enum class EGameServerType : uint8
{
	None                                     = 0,
	OfficialServer                           = 1,
	CustomServer                             = 2,
	EGameServerType_MAX                      = 3,
};

// Enum MasterServerPlugin.EServerBrowserEntryFlags
// NumValues: 0x0007
enum class EServerBrowserEntryFlags : uint8
{
	None                                     = 0,
	IsTournamentServer                       = 1,
	IsUserGeneratedContent                   = 2,
	HasObjectiveMatchStarted                 = 4,
	IsPasswordProtected                      = 8,
	HasMatchStarted                          = 16,
	EServerBrowserEntryFlags_MAX             = 17,
};

// Enum MasterServerPlugin.EServerBrowserEntryOnlineSystemType
// NumValues: 0x0004
enum class EServerBrowserEntryOnlineSystemType : uint32
{
	None                                     = 0,
	BRG                                      = 1,
	Steam                                    = 2,
	EServerBrowserEntryOnlineSystemType_MAX  = 3,
};

// ScriptStruct MasterServerPlugin.UserBehaviorEvent
// 0x0030 (0x0030 - 0x0000)
struct FUserBehaviorEvent final
{
public:
	ENativeUserBehaviorEventType                  EventType;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DF2[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventData;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Timestamp;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              TimestampExt;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTimestampExtSet;                                 // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DF3[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUserBehaviorEvent) == 0x000008, "Wrong alignment on FUserBehaviorEvent");
static_assert(sizeof(FUserBehaviorEvent) == 0x000030, "Wrong size on FUserBehaviorEvent");
static_assert(offsetof(FUserBehaviorEvent, EventType) == 0x000000, "Member 'FUserBehaviorEvent::EventType' has a wrong offset!");
static_assert(offsetof(FUserBehaviorEvent, EventData) == 0x000008, "Member 'FUserBehaviorEvent::EventData' has a wrong offset!");
static_assert(offsetof(FUserBehaviorEvent, Timestamp) == 0x000018, "Member 'FUserBehaviorEvent::Timestamp' has a wrong offset!");
static_assert(offsetof(FUserBehaviorEvent, TimestampExt) == 0x000020, "Member 'FUserBehaviorEvent::TimestampExt' has a wrong offset!");
static_assert(offsetof(FUserBehaviorEvent, IsTimestampExtSet) == 0x000028, "Member 'FUserBehaviorEvent::IsTimestampExtSet' has a wrong offset!");

// ScriptStruct MasterServerPlugin.BlueprintOnlineItem
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FBlueprintOnlineItem final
{
public:
	uint8                                         Pad_1DF4[0x10];                                    // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBlueprintOnlineItem) == 0x000008, "Wrong alignment on FBlueprintOnlineItem");
static_assert(sizeof(FBlueprintOnlineItem) == 0x000010, "Wrong size on FBlueprintOnlineItem");

// ScriptStruct MasterServerPlugin.GrantItemResultEntry
// 0x0008 (0x0008 - 0x0000)
struct FGrantItemResultEntry final
{
public:
	int32                                         ItemDefId;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StackSize;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGrantItemResultEntry) == 0x000004, "Wrong alignment on FGrantItemResultEntry");
static_assert(sizeof(FGrantItemResultEntry) == 0x000008, "Wrong size on FGrantItemResultEntry");
static_assert(offsetof(FGrantItemResultEntry, ItemDefId) == 0x000000, "Member 'FGrantItemResultEntry::ItemDefId' has a wrong offset!");
static_assert(offsetof(FGrantItemResultEntry, StackSize) == 0x000004, "Member 'FGrantItemResultEntry::StackSize' has a wrong offset!");

// ScriptStruct MasterServerPlugin.AddedItem
// 0x0028 (0x0028 - 0x0000)
struct FAddedItem final
{
public:
	struct FBlueprintOnlineItem                   Item;                                              // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EItemChangeReason                             Reason;                                            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DF5[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Payload;                                           // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAddedItem) == 0x000008, "Wrong alignment on FAddedItem");
static_assert(sizeof(FAddedItem) == 0x000028, "Wrong size on FAddedItem");
static_assert(offsetof(FAddedItem, Item) == 0x000000, "Member 'FAddedItem::Item' has a wrong offset!");
static_assert(offsetof(FAddedItem, Reason) == 0x000010, "Member 'FAddedItem::Reason' has a wrong offset!");
static_assert(offsetof(FAddedItem, Payload) == 0x000018, "Member 'FAddedItem::Payload' has a wrong offset!");

// ScriptStruct MasterServerPlugin.AccountSetting
// 0x0030 (0x0030 - 0x0000)
struct FAccountSetting final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccountSettingType                           Type;                                              // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DF6[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StringValue;                                       // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBoolValue;                                        // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DF7[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Int32Value;                                        // 0x002C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccountSetting) == 0x000008, "Wrong alignment on FAccountSetting");
static_assert(sizeof(FAccountSetting) == 0x000030, "Wrong size on FAccountSetting");
static_assert(offsetof(FAccountSetting, Name) == 0x000000, "Member 'FAccountSetting::Name' has a wrong offset!");
static_assert(offsetof(FAccountSetting, Type) == 0x000010, "Member 'FAccountSetting::Type' has a wrong offset!");
static_assert(offsetof(FAccountSetting, StringValue) == 0x000018, "Member 'FAccountSetting::StringValue' has a wrong offset!");
static_assert(offsetof(FAccountSetting, bBoolValue) == 0x000028, "Member 'FAccountSetting::bBoolValue' has a wrong offset!");
static_assert(offsetof(FAccountSetting, Int32Value) == 0x00002C, "Member 'FAccountSetting::Int32Value' has a wrong offset!");

// ScriptStruct MasterServerPlugin.DatabaseItem
// 0x0058 (0x0058 - 0x0000)
struct FDatabaseItem final
{
public:
	int32                                         ItemDefId;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DF8[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class FString>              Properties;                                        // 0x0008(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatabaseItem) == 0x000008, "Wrong alignment on FDatabaseItem");
static_assert(sizeof(FDatabaseItem) == 0x000058, "Wrong size on FDatabaseItem");
static_assert(offsetof(FDatabaseItem, ItemDefId) == 0x000000, "Member 'FDatabaseItem::ItemDefId' has a wrong offset!");
static_assert(offsetof(FDatabaseItem, Properties) == 0x000008, "Member 'FDatabaseItem::Properties' has a wrong offset!");

// ScriptStruct MasterServerPlugin.AccountPresenceEntry
// 0x0030 (0x0030 - 0x0000)
struct FAccountPresenceEntry final
{
public:
	class FString                                 ProductUserId;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOnline;                                         // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DF9[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PresenceString;                                    // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerLevel;                                       // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerIconItemDefId;                               // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccountPresenceEntry) == 0x000008, "Wrong alignment on FAccountPresenceEntry");
static_assert(sizeof(FAccountPresenceEntry) == 0x000030, "Wrong size on FAccountPresenceEntry");
static_assert(offsetof(FAccountPresenceEntry, ProductUserId) == 0x000000, "Member 'FAccountPresenceEntry::ProductUserId' has a wrong offset!");
static_assert(offsetof(FAccountPresenceEntry, bIsOnline) == 0x000010, "Member 'FAccountPresenceEntry::bIsOnline' has a wrong offset!");
static_assert(offsetof(FAccountPresenceEntry, PresenceString) == 0x000018, "Member 'FAccountPresenceEntry::PresenceString' has a wrong offset!");
static_assert(offsetof(FAccountPresenceEntry, PlayerLevel) == 0x000028, "Member 'FAccountPresenceEntry::PlayerLevel' has a wrong offset!");
static_assert(offsetof(FAccountPresenceEntry, PlayerIconItemDefId) == 0x00002C, "Member 'FAccountPresenceEntry::PlayerIconItemDefId' has a wrong offset!");

// ScriptStruct MasterServerPlugin.GameServerInfo
// 0x0158 (0x0158 - 0x0000)
struct FGameServerInfo final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameRules;                                         // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CustomHost;                                        // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CustomListeningPort;                               // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DFA[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlueprintSessionResult                Session;                                           // 0x0038(0x0120)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameServerInfo) == 0x000008, "Wrong alignment on FGameServerInfo");
static_assert(sizeof(FGameServerInfo) == 0x000158, "Wrong size on FGameServerInfo");
static_assert(offsetof(FGameServerInfo, Name) == 0x000000, "Member 'FGameServerInfo::Name' has a wrong offset!");
static_assert(offsetof(FGameServerInfo, GameRules) == 0x000010, "Member 'FGameServerInfo::GameRules' has a wrong offset!");
static_assert(offsetof(FGameServerInfo, CustomHost) == 0x000020, "Member 'FGameServerInfo::CustomHost' has a wrong offset!");
static_assert(offsetof(FGameServerInfo, CustomListeningPort) == 0x000030, "Member 'FGameServerInfo::CustomListeningPort' has a wrong offset!");
static_assert(offsetof(FGameServerInfo, Session) == 0x000038, "Member 'FGameServerInfo::Session' has a wrong offset!");

// ScriptStruct MasterServerPlugin.GameServerListEntry
// 0x00C8 (0x00C8 - 0x0000)
struct FGameServerListEntry final
{
public:
	int64                                         UniqueID;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuildUniqueId;                                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PingInMs;                                          // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        SessionSettingsFlags;                              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OnlineSystemUserId;                                // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameServerType                               ServerType;                                        // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DFB[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentPlayers;                                    // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPlayers;                                        // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MatchTime;                                         // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameMode;                                          // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameRules;                                         // 0x0058(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ActiveMapName;                                     // 0x0068(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VersionNumber;                                     // 0x0078(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StartTime;                                         // 0x0088(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTournamentServer;                               // 0x0098(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasUserGeneratedContent;                          // 0x0099(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasObjectiveMatchStarted;                         // 0x009A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPasswordProtected;                              // 0x009B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasMatchStarted;                                  // 0x009C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DFC[0x3];                                     // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 HostName;                                          // 0x00A0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ListeningPort;                                     // 0x00B0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EServerBrowserEntryOnlineSystemType           OnlineSystemType;                                  // 0x00B4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OnlineSystemConnectionInfoBlock;                   // 0x00B8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameServerListEntry) == 0x000008, "Wrong alignment on FGameServerListEntry");
static_assert(sizeof(FGameServerListEntry) == 0x0000C8, "Wrong size on FGameServerListEntry");
static_assert(offsetof(FGameServerListEntry, UniqueID) == 0x000000, "Member 'FGameServerListEntry::UniqueID' has a wrong offset!");
static_assert(offsetof(FGameServerListEntry, BuildUniqueId) == 0x000008, "Member 'FGameServerListEntry::BuildUniqueId' has a wrong offset!");
static_assert(offsetof(FGameServerListEntry, PingInMs) == 0x00000C, "Member 'FGameServerListEntry::PingInMs' has a wrong offset!");
static_assert(offsetof(FGameServerListEntry, SessionSettingsFlags) == 0x000010, "Member 'FGameServerListEntry::SessionSettingsFlags' has a wrong offset!");
static_assert(offsetof(FGameServerListEntry, Name) == 0x000018, "Member 'FGameServerListEntry::Name' has a wrong offset!");
static_assert(offsetof(FGameServerListEntry, OnlineSystemUserId) == 0x000028, "Member 'FGameServerListEntry::OnlineSystemUserId' has a wrong offset!");
static_assert(offsetof(FGameServerListEntry, ServerType) == 0x000038, "Member 'FGameServerListEntry::ServerType' has a wrong offset!");
static_assert(offsetof(FGameServerListEntry, CurrentPlayers) == 0x00003C, "Member 'FGameServerListEntry::CurrentPlayers' has a wrong offset!");
static_assert(offsetof(FGameServerListEntry, MaxPlayers) == 0x000040, "Member 'FGameServerListEntry::MaxPlayers' has a wrong offset!");
static_assert(offsetof(FGameServerListEntry, MatchTime) == 0x000044, "Member 'FGameServerListEntry::MatchTime' has a wrong offset!");
static_assert(offsetof(FGameServerListEntry, GameMode) == 0x000048, "Member 'FGameServerListEntry::GameMode' has a wrong offset!");
static_assert(offsetof(FGameServerListEntry, GameRules) == 0x000058, "Member 'FGameServerListEntry::GameRules' has a wrong offset!");
static_assert(offsetof(FGameServerListEntry, ActiveMapName) == 0x000068, "Member 'FGameServerListEntry::ActiveMapName' has a wrong offset!");
static_assert(offsetof(FGameServerListEntry, VersionNumber) == 0x000078, "Member 'FGameServerListEntry::VersionNumber' has a wrong offset!");
static_assert(offsetof(FGameServerListEntry, StartTime) == 0x000088, "Member 'FGameServerListEntry::StartTime' has a wrong offset!");
static_assert(offsetof(FGameServerListEntry, bIsTournamentServer) == 0x000098, "Member 'FGameServerListEntry::bIsTournamentServer' has a wrong offset!");
static_assert(offsetof(FGameServerListEntry, bHasUserGeneratedContent) == 0x000099, "Member 'FGameServerListEntry::bHasUserGeneratedContent' has a wrong offset!");
static_assert(offsetof(FGameServerListEntry, bHasObjectiveMatchStarted) == 0x00009A, "Member 'FGameServerListEntry::bHasObjectiveMatchStarted' has a wrong offset!");
static_assert(offsetof(FGameServerListEntry, bIsPasswordProtected) == 0x00009B, "Member 'FGameServerListEntry::bIsPasswordProtected' has a wrong offset!");
static_assert(offsetof(FGameServerListEntry, bHasMatchStarted) == 0x00009C, "Member 'FGameServerListEntry::bHasMatchStarted' has a wrong offset!");
static_assert(offsetof(FGameServerListEntry, HostName) == 0x0000A0, "Member 'FGameServerListEntry::HostName' has a wrong offset!");
static_assert(offsetof(FGameServerListEntry, ListeningPort) == 0x0000B0, "Member 'FGameServerListEntry::ListeningPort' has a wrong offset!");
static_assert(offsetof(FGameServerListEntry, OnlineSystemType) == 0x0000B4, "Member 'FGameServerListEntry::OnlineSystemType' has a wrong offset!");
static_assert(offsetof(FGameServerListEntry, OnlineSystemConnectionInfoBlock) == 0x0000B8, "Member 'FGameServerListEntry::OnlineSystemConnectionInfoBlock' has a wrong offset!");

}

