#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_ModParametersSubsystem

#include "Basic.hpp"

#include "E_GameModifierType_structs.hpp"
#include "Engine_structs.hpp"
#include "PropWitchHuntModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_ModParametersSubsystem.B_ModParametersSubsystem_C
// 0x00D8 (0x0108 - 0x0030)
class UB_ModParametersSubsystem_C final : public UModParametersSubsystem
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0030(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UB_MoveOrDamageParameters_C*            MoveOrDamage;                                      // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UB_DissolvingPropsParameters_C*         DissolvingProps;                                   // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UB_PropRetaliationParameters_C*         PropRetaliation;                                   // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<E_GameModifierType, class UModParameters*> Mods;                                              // 0x0050(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             ModRulesUpdated;                                   // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMap<E_GameModifierType, class AB_BaseGameModifierActor_C*> ModActors;                                         // 0x00B0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          UsingCustomRules;                                  // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ModRulesUpdated__DelegateSignature();
	void ApplyModRules(TArray<struct FS_GameModifier>& ModRules);
	void ExecuteUbergraph_B_ModParametersSubsystem(int32 EntryPoint);
	void GetDefaultModParameterValue(E_GameModifierType SkillType, const struct FUIParameterData& UIPameter, struct FUIParam* DefaultValue);
	TArray<struct FUIParam> GetDefaultModParameterValues(TArray<struct FUIParameterData>& UIParameters, E_GameModifierType ModType);
	void GetModParameters(E_GameModifierType ModType, class UModParameters** ModParameter);
	void GetUIParameters(E_GameModifierType ModType, TArray<struct FUIParameterData>* UIParameters);
	void InitializeDefaultModParameters();
	void InitializeDissolvingProps();
	void InitializeMods();
	void InitializeMoveOrDamageActor();
	void InitializePropRetaliation();
	void InitializeSubsystem();
	void IsModUsingRules(E_GameModifierType SkillType, bool* IsUsingRules);
	void IsUsingCustomRules(bool* CustomRules);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_ModParametersSubsystem_C">();
	}
	static class UB_ModParametersSubsystem_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UB_ModParametersSubsystem_C>();
	}
};
static_assert(alignof(UB_ModParametersSubsystem_C) == 0x000008, "Wrong alignment on UB_ModParametersSubsystem_C");
static_assert(sizeof(UB_ModParametersSubsystem_C) == 0x000108, "Wrong size on UB_ModParametersSubsystem_C");
static_assert(offsetof(UB_ModParametersSubsystem_C, UberGraphFrame) == 0x000030, "Member 'UB_ModParametersSubsystem_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UB_ModParametersSubsystem_C, MoveOrDamage) == 0x000038, "Member 'UB_ModParametersSubsystem_C::MoveOrDamage' has a wrong offset!");
static_assert(offsetof(UB_ModParametersSubsystem_C, DissolvingProps) == 0x000040, "Member 'UB_ModParametersSubsystem_C::DissolvingProps' has a wrong offset!");
static_assert(offsetof(UB_ModParametersSubsystem_C, PropRetaliation) == 0x000048, "Member 'UB_ModParametersSubsystem_C::PropRetaliation' has a wrong offset!");
static_assert(offsetof(UB_ModParametersSubsystem_C, Mods) == 0x000050, "Member 'UB_ModParametersSubsystem_C::Mods' has a wrong offset!");
static_assert(offsetof(UB_ModParametersSubsystem_C, ModRulesUpdated) == 0x0000A0, "Member 'UB_ModParametersSubsystem_C::ModRulesUpdated' has a wrong offset!");
static_assert(offsetof(UB_ModParametersSubsystem_C, ModActors) == 0x0000B0, "Member 'UB_ModParametersSubsystem_C::ModActors' has a wrong offset!");
static_assert(offsetof(UB_ModParametersSubsystem_C, UsingCustomRules) == 0x000100, "Member 'UB_ModParametersSubsystem_C::UsingCustomRules' has a wrong offset!");

}

