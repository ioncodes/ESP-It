#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GeometryScriptingCore

#include "Basic.hpp"

#include "GeometryScriptingCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function GeometryScriptingCore.GeometryScriptLibrary_CollisionFunctions.ApproximateConvexHullsWithSimplerCollisionShapes
// 0x0098 (0x0098 - 0x0000)
struct GeometryScriptLibrary_CollisionFunctions_ApproximateConvexHullsWithSimplerCollisionShapes final
{
public:
	struct FGeometryScriptSimpleCollision         SimpleCollision;                                   // 0x0000(0x0080)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometryScriptConvexHullApproximationOptions ApproximateOptions;                                // 0x0080(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bHasApproximated;                                  // 0x008C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0090(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_CollisionFunctions_ApproximateConvexHullsWithSimplerCollisionShapes) == 0x000008, "Wrong alignment on GeometryScriptLibrary_CollisionFunctions_ApproximateConvexHullsWithSimplerCollisionShapes");
static_assert(sizeof(GeometryScriptLibrary_CollisionFunctions_ApproximateConvexHullsWithSimplerCollisionShapes) == 0x000098, "Wrong size on GeometryScriptLibrary_CollisionFunctions_ApproximateConvexHullsWithSimplerCollisionShapes");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_ApproximateConvexHullsWithSimplerCollisionShapes, SimpleCollision) == 0x000000, "Member 'GeometryScriptLibrary_CollisionFunctions_ApproximateConvexHullsWithSimplerCollisionShapes::SimpleCollision' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_ApproximateConvexHullsWithSimplerCollisionShapes, ApproximateOptions) == 0x000080, "Member 'GeometryScriptLibrary_CollisionFunctions_ApproximateConvexHullsWithSimplerCollisionShapes::ApproximateOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_ApproximateConvexHullsWithSimplerCollisionShapes, bHasApproximated) == 0x00008C, "Member 'GeometryScriptLibrary_CollisionFunctions_ApproximateConvexHullsWithSimplerCollisionShapes::bHasApproximated' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_ApproximateConvexHullsWithSimplerCollisionShapes, Debug) == 0x000090, "Member 'GeometryScriptLibrary_CollisionFunctions_ApproximateConvexHullsWithSimplerCollisionShapes::Debug' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_CollisionFunctions.CombineSimpleCollision
// 0x0108 (0x0108 - 0x0000)
struct GeometryScriptLibrary_CollisionFunctions_CombineSimpleCollision final
{
public:
	struct FGeometryScriptSimpleCollision         CollisionToUpdate;                                 // 0x0000(0x0080)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometryScriptSimpleCollision         AppendCollision;                                   // 0x0080(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0100(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_CollisionFunctions_CombineSimpleCollision) == 0x000008, "Wrong alignment on GeometryScriptLibrary_CollisionFunctions_CombineSimpleCollision");
static_assert(sizeof(GeometryScriptLibrary_CollisionFunctions_CombineSimpleCollision) == 0x000108, "Wrong size on GeometryScriptLibrary_CollisionFunctions_CombineSimpleCollision");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_CombineSimpleCollision, CollisionToUpdate) == 0x000000, "Member 'GeometryScriptLibrary_CollisionFunctions_CombineSimpleCollision::CollisionToUpdate' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_CombineSimpleCollision, AppendCollision) == 0x000080, "Member 'GeometryScriptLibrary_CollisionFunctions_CombineSimpleCollision::AppendCollision' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_CombineSimpleCollision, Debug) == 0x000100, "Member 'GeometryScriptLibrary_CollisionFunctions_CombineSimpleCollision::Debug' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_CollisionFunctions.ComputeNegativeSpace
// 0x0060 (0x0060 - 0x0000)
struct GeometryScriptLibrary_CollisionFunctions_ComputeNegativeSpace final
{
public:
	struct FGeometryScriptDynamicMeshBVH          MeshBVH;                                           // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FComputeNegativeSpaceOptions           NegativeSpaceOptions;                              // 0x0020(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0048(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptSphereCovering          ReturnValue;                                       // 0x0050(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_CollisionFunctions_ComputeNegativeSpace) == 0x000008, "Wrong alignment on GeometryScriptLibrary_CollisionFunctions_ComputeNegativeSpace");
static_assert(sizeof(GeometryScriptLibrary_CollisionFunctions_ComputeNegativeSpace) == 0x000060, "Wrong size on GeometryScriptLibrary_CollisionFunctions_ComputeNegativeSpace");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_ComputeNegativeSpace, MeshBVH) == 0x000000, "Member 'GeometryScriptLibrary_CollisionFunctions_ComputeNegativeSpace::MeshBVH' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_ComputeNegativeSpace, NegativeSpaceOptions) == 0x000020, "Member 'GeometryScriptLibrary_CollisionFunctions_ComputeNegativeSpace::NegativeSpaceOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_ComputeNegativeSpace, Debug) == 0x000048, "Member 'GeometryScriptLibrary_CollisionFunctions_ComputeNegativeSpace::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_ComputeNegativeSpace, ReturnValue) == 0x000050, "Member 'GeometryScriptLibrary_CollisionFunctions_ComputeNegativeSpace::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_CollisionFunctions.Conv_GeometryScriptSphereCoveringToSphereArray
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_CollisionFunctions_Conv_GeometryScriptSphereCoveringToSphereArray final
{
public:
	struct FGeometryScriptSphereCovering          SphereCovering;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FSphere>                        ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_CollisionFunctions_Conv_GeometryScriptSphereCoveringToSphereArray) == 0x000008, "Wrong alignment on GeometryScriptLibrary_CollisionFunctions_Conv_GeometryScriptSphereCoveringToSphereArray");
static_assert(sizeof(GeometryScriptLibrary_CollisionFunctions_Conv_GeometryScriptSphereCoveringToSphereArray) == 0x000020, "Wrong size on GeometryScriptLibrary_CollisionFunctions_Conv_GeometryScriptSphereCoveringToSphereArray");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_Conv_GeometryScriptSphereCoveringToSphereArray, SphereCovering) == 0x000000, "Member 'GeometryScriptLibrary_CollisionFunctions_Conv_GeometryScriptSphereCoveringToSphereArray::SphereCovering' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_Conv_GeometryScriptSphereCoveringToSphereArray, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_CollisionFunctions_Conv_GeometryScriptSphereCoveringToSphereArray::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_CollisionFunctions.Conv_SphereArrayToGeometryScriptSphereCovering
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_CollisionFunctions_Conv_SphereArrayToGeometryScriptSphereCovering final
{
public:
	TArray<struct FSphere>                        Spheres;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometryScriptSphereCovering          ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_CollisionFunctions_Conv_SphereArrayToGeometryScriptSphereCovering) == 0x000008, "Wrong alignment on GeometryScriptLibrary_CollisionFunctions_Conv_SphereArrayToGeometryScriptSphereCovering");
static_assert(sizeof(GeometryScriptLibrary_CollisionFunctions_Conv_SphereArrayToGeometryScriptSphereCovering) == 0x000020, "Wrong size on GeometryScriptLibrary_CollisionFunctions_Conv_SphereArrayToGeometryScriptSphereCovering");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_Conv_SphereArrayToGeometryScriptSphereCovering, Spheres) == 0x000000, "Member 'GeometryScriptLibrary_CollisionFunctions_Conv_SphereArrayToGeometryScriptSphereCovering::Spheres' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_Conv_SphereArrayToGeometryScriptSphereCovering, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_CollisionFunctions_Conv_SphereArrayToGeometryScriptSphereCovering::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_CollisionFunctions.GetSimpleCollisionFromComponent
// 0x0090 (0x0090 - 0x0000)
struct GeometryScriptLibrary_CollisionFunctions_GetSimpleCollisionFromComponent final
{
public:
	class UPrimitiveComponent*                    Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptSimpleCollision         ReturnValue;                                       // 0x0010(0x0080)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_CollisionFunctions_GetSimpleCollisionFromComponent) == 0x000008, "Wrong alignment on GeometryScriptLibrary_CollisionFunctions_GetSimpleCollisionFromComponent");
static_assert(sizeof(GeometryScriptLibrary_CollisionFunctions_GetSimpleCollisionFromComponent) == 0x000090, "Wrong size on GeometryScriptLibrary_CollisionFunctions_GetSimpleCollisionFromComponent");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_GetSimpleCollisionFromComponent, Component) == 0x000000, "Member 'GeometryScriptLibrary_CollisionFunctions_GetSimpleCollisionFromComponent::Component' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_GetSimpleCollisionFromComponent, Debug) == 0x000008, "Member 'GeometryScriptLibrary_CollisionFunctions_GetSimpleCollisionFromComponent::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_GetSimpleCollisionFromComponent, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_CollisionFunctions_GetSimpleCollisionFromComponent::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_CollisionFunctions.GetSimpleCollisionFromStaticMesh
// 0x0090 (0x0090 - 0x0000)
struct GeometryScriptLibrary_CollisionFunctions_GetSimpleCollisionFromStaticMesh final
{
public:
	class UStaticMesh*                            StaticMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptSimpleCollision         ReturnValue;                                       // 0x0010(0x0080)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_CollisionFunctions_GetSimpleCollisionFromStaticMesh) == 0x000008, "Wrong alignment on GeometryScriptLibrary_CollisionFunctions_GetSimpleCollisionFromStaticMesh");
static_assert(sizeof(GeometryScriptLibrary_CollisionFunctions_GetSimpleCollisionFromStaticMesh) == 0x000090, "Wrong size on GeometryScriptLibrary_CollisionFunctions_GetSimpleCollisionFromStaticMesh");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_GetSimpleCollisionFromStaticMesh, StaticMesh) == 0x000000, "Member 'GeometryScriptLibrary_CollisionFunctions_GetSimpleCollisionFromStaticMesh::StaticMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_GetSimpleCollisionFromStaticMesh, Debug) == 0x000008, "Member 'GeometryScriptLibrary_CollisionFunctions_GetSimpleCollisionFromStaticMesh::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_GetSimpleCollisionFromStaticMesh, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_CollisionFunctions_GetSimpleCollisionFromStaticMesh::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_CollisionFunctions.GetSimpleCollisionShapeCount
// 0x0088 (0x0088 - 0x0000)
struct GeometryScriptLibrary_CollisionFunctions_GetSimpleCollisionShapeCount final
{
public:
	struct FGeometryScriptSimpleCollision         SimpleCollision;                                   // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0080(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_CollisionFunctions_GetSimpleCollisionShapeCount) == 0x000008, "Wrong alignment on GeometryScriptLibrary_CollisionFunctions_GetSimpleCollisionShapeCount");
static_assert(sizeof(GeometryScriptLibrary_CollisionFunctions_GetSimpleCollisionShapeCount) == 0x000088, "Wrong size on GeometryScriptLibrary_CollisionFunctions_GetSimpleCollisionShapeCount");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_GetSimpleCollisionShapeCount, SimpleCollision) == 0x000000, "Member 'GeometryScriptLibrary_CollisionFunctions_GetSimpleCollisionShapeCount::SimpleCollision' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_GetSimpleCollisionShapeCount, ReturnValue) == 0x000080, "Member 'GeometryScriptLibrary_CollisionFunctions_GetSimpleCollisionShapeCount::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_CollisionFunctions.MergeSimpleCollisionShapes
// 0x0180 (0x0180 - 0x0000)
struct GeometryScriptLibrary_CollisionFunctions_MergeSimpleCollisionShapes final
{
public:
	struct FGeometryScriptSimpleCollision         SimpleCollision;                                   // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometryScriptMergeSimpleCollisionOptions MergeOptions;                                      // 0x0080(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bHasMerged;                                        // 0x00F0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x00F8(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptSimpleCollision         ReturnValue;                                       // 0x0100(0x0080)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_CollisionFunctions_MergeSimpleCollisionShapes) == 0x000008, "Wrong alignment on GeometryScriptLibrary_CollisionFunctions_MergeSimpleCollisionShapes");
static_assert(sizeof(GeometryScriptLibrary_CollisionFunctions_MergeSimpleCollisionShapes) == 0x000180, "Wrong size on GeometryScriptLibrary_CollisionFunctions_MergeSimpleCollisionShapes");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_MergeSimpleCollisionShapes, SimpleCollision) == 0x000000, "Member 'GeometryScriptLibrary_CollisionFunctions_MergeSimpleCollisionShapes::SimpleCollision' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_MergeSimpleCollisionShapes, MergeOptions) == 0x000080, "Member 'GeometryScriptLibrary_CollisionFunctions_MergeSimpleCollisionShapes::MergeOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_MergeSimpleCollisionShapes, bHasMerged) == 0x0000F0, "Member 'GeometryScriptLibrary_CollisionFunctions_MergeSimpleCollisionShapes::bHasMerged' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_MergeSimpleCollisionShapes, Debug) == 0x0000F8, "Member 'GeometryScriptLibrary_CollisionFunctions_MergeSimpleCollisionShapes::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_MergeSimpleCollisionShapes, ReturnValue) == 0x000100, "Member 'GeometryScriptLibrary_CollisionFunctions_MergeSimpleCollisionShapes::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_CollisionFunctions.ResetDynamicMeshCollision
// 0x0018 (0x0018 - 0x0000)
struct GeometryScriptLibrary_CollisionFunctions_ResetDynamicMeshCollision final
{
public:
	class UDynamicMeshComponent*                  Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEmitTransaction;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_CollisionFunctions_ResetDynamicMeshCollision) == 0x000008, "Wrong alignment on GeometryScriptLibrary_CollisionFunctions_ResetDynamicMeshCollision");
static_assert(sizeof(GeometryScriptLibrary_CollisionFunctions_ResetDynamicMeshCollision) == 0x000018, "Wrong size on GeometryScriptLibrary_CollisionFunctions_ResetDynamicMeshCollision");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_ResetDynamicMeshCollision, Component) == 0x000000, "Member 'GeometryScriptLibrary_CollisionFunctions_ResetDynamicMeshCollision::Component' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_ResetDynamicMeshCollision, bEmitTransaction) == 0x000008, "Member 'GeometryScriptLibrary_CollisionFunctions_ResetDynamicMeshCollision::bEmitTransaction' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_ResetDynamicMeshCollision, Debug) == 0x000010, "Member 'GeometryScriptLibrary_CollisionFunctions_ResetDynamicMeshCollision::Debug' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_CollisionFunctions.SetDynamicMeshCollisionFromMesh
// 0x0050 (0x0050 - 0x0000)
struct GeometryScriptLibrary_CollisionFunctions_SetDynamicMeshCollisionFromMesh final
{
public:
	class UDynamicMesh*                           FromDynamicMesh;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMeshComponent*                  ToDynamicMeshComponent;                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptCollisionFromMeshOptions Options;                                           // 0x0010(0x0030)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0040(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_CollisionFunctions_SetDynamicMeshCollisionFromMesh) == 0x000008, "Wrong alignment on GeometryScriptLibrary_CollisionFunctions_SetDynamicMeshCollisionFromMesh");
static_assert(sizeof(GeometryScriptLibrary_CollisionFunctions_SetDynamicMeshCollisionFromMesh) == 0x000050, "Wrong size on GeometryScriptLibrary_CollisionFunctions_SetDynamicMeshCollisionFromMesh");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_SetDynamicMeshCollisionFromMesh, FromDynamicMesh) == 0x000000, "Member 'GeometryScriptLibrary_CollisionFunctions_SetDynamicMeshCollisionFromMesh::FromDynamicMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_SetDynamicMeshCollisionFromMesh, ToDynamicMeshComponent) == 0x000008, "Member 'GeometryScriptLibrary_CollisionFunctions_SetDynamicMeshCollisionFromMesh::ToDynamicMeshComponent' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_SetDynamicMeshCollisionFromMesh, Options) == 0x000010, "Member 'GeometryScriptLibrary_CollisionFunctions_SetDynamicMeshCollisionFromMesh::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_SetDynamicMeshCollisionFromMesh, Debug) == 0x000040, "Member 'GeometryScriptLibrary_CollisionFunctions_SetDynamicMeshCollisionFromMesh::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_SetDynamicMeshCollisionFromMesh, ReturnValue) == 0x000048, "Member 'GeometryScriptLibrary_CollisionFunctions_SetDynamicMeshCollisionFromMesh::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_CollisionFunctions.SetSimpleCollisionOfDynamicMeshComponent
// 0x0098 (0x0098 - 0x0000)
struct GeometryScriptLibrary_CollisionFunctions_SetSimpleCollisionOfDynamicMeshComponent final
{
public:
	struct FGeometryScriptSimpleCollision         SimpleCollision;                                   // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UDynamicMeshComponent*                  DynamicMeshComponent;                              // 0x0080(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptSetSimpleCollisionOptions Options;                                           // 0x0088(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0090(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_CollisionFunctions_SetSimpleCollisionOfDynamicMeshComponent) == 0x000008, "Wrong alignment on GeometryScriptLibrary_CollisionFunctions_SetSimpleCollisionOfDynamicMeshComponent");
static_assert(sizeof(GeometryScriptLibrary_CollisionFunctions_SetSimpleCollisionOfDynamicMeshComponent) == 0x000098, "Wrong size on GeometryScriptLibrary_CollisionFunctions_SetSimpleCollisionOfDynamicMeshComponent");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_SetSimpleCollisionOfDynamicMeshComponent, SimpleCollision) == 0x000000, "Member 'GeometryScriptLibrary_CollisionFunctions_SetSimpleCollisionOfDynamicMeshComponent::SimpleCollision' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_SetSimpleCollisionOfDynamicMeshComponent, DynamicMeshComponent) == 0x000080, "Member 'GeometryScriptLibrary_CollisionFunctions_SetSimpleCollisionOfDynamicMeshComponent::DynamicMeshComponent' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_SetSimpleCollisionOfDynamicMeshComponent, Options) == 0x000088, "Member 'GeometryScriptLibrary_CollisionFunctions_SetSimpleCollisionOfDynamicMeshComponent::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_SetSimpleCollisionOfDynamicMeshComponent, Debug) == 0x000090, "Member 'GeometryScriptLibrary_CollisionFunctions_SetSimpleCollisionOfDynamicMeshComponent::Debug' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_CollisionFunctions.SetSimpleCollisionOfStaticMesh
// 0x0098 (0x0098 - 0x0000)
struct GeometryScriptLibrary_CollisionFunctions_SetSimpleCollisionOfStaticMesh final
{
public:
	struct FGeometryScriptSimpleCollision         SimpleCollision;                                   // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UStaticMesh*                            StaticMesh;                                        // 0x0080(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptSetSimpleCollisionOptions Options;                                           // 0x0088(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FGeometryScriptSetStaticMeshCollisionOptions StaticMeshCollisionOptions;                        // 0x0089(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A[0x6];                                       // 0x008A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0090(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_CollisionFunctions_SetSimpleCollisionOfStaticMesh) == 0x000008, "Wrong alignment on GeometryScriptLibrary_CollisionFunctions_SetSimpleCollisionOfStaticMesh");
static_assert(sizeof(GeometryScriptLibrary_CollisionFunctions_SetSimpleCollisionOfStaticMesh) == 0x000098, "Wrong size on GeometryScriptLibrary_CollisionFunctions_SetSimpleCollisionOfStaticMesh");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_SetSimpleCollisionOfStaticMesh, SimpleCollision) == 0x000000, "Member 'GeometryScriptLibrary_CollisionFunctions_SetSimpleCollisionOfStaticMesh::SimpleCollision' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_SetSimpleCollisionOfStaticMesh, StaticMesh) == 0x000080, "Member 'GeometryScriptLibrary_CollisionFunctions_SetSimpleCollisionOfStaticMesh::StaticMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_SetSimpleCollisionOfStaticMesh, Options) == 0x000088, "Member 'GeometryScriptLibrary_CollisionFunctions_SetSimpleCollisionOfStaticMesh::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_SetSimpleCollisionOfStaticMesh, StaticMeshCollisionOptions) == 0x000089, "Member 'GeometryScriptLibrary_CollisionFunctions_SetSimpleCollisionOfStaticMesh::StaticMeshCollisionOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_SetSimpleCollisionOfStaticMesh, Debug) == 0x000090, "Member 'GeometryScriptLibrary_CollisionFunctions_SetSimpleCollisionOfStaticMesh::Debug' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_CollisionFunctions.SetStaticMeshCollisionFromComponent
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_CollisionFunctions_SetStaticMeshCollisionFromComponent final
{
public:
	class UStaticMesh*                            StaticMeshAsset;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    SourceComponent;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptSetSimpleCollisionOptions Options;                                           // 0x0010(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FGeometryScriptSetStaticMeshCollisionOptions StaticMeshCollisionOptions;                        // 0x0011(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_CollisionFunctions_SetStaticMeshCollisionFromComponent) == 0x000008, "Wrong alignment on GeometryScriptLibrary_CollisionFunctions_SetStaticMeshCollisionFromComponent");
static_assert(sizeof(GeometryScriptLibrary_CollisionFunctions_SetStaticMeshCollisionFromComponent) == 0x000020, "Wrong size on GeometryScriptLibrary_CollisionFunctions_SetStaticMeshCollisionFromComponent");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_SetStaticMeshCollisionFromComponent, StaticMeshAsset) == 0x000000, "Member 'GeometryScriptLibrary_CollisionFunctions_SetStaticMeshCollisionFromComponent::StaticMeshAsset' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_SetStaticMeshCollisionFromComponent, SourceComponent) == 0x000008, "Member 'GeometryScriptLibrary_CollisionFunctions_SetStaticMeshCollisionFromComponent::SourceComponent' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_SetStaticMeshCollisionFromComponent, Options) == 0x000010, "Member 'GeometryScriptLibrary_CollisionFunctions_SetStaticMeshCollisionFromComponent::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_SetStaticMeshCollisionFromComponent, StaticMeshCollisionOptions) == 0x000011, "Member 'GeometryScriptLibrary_CollisionFunctions_SetStaticMeshCollisionFromComponent::StaticMeshCollisionOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_SetStaticMeshCollisionFromComponent, Debug) == 0x000018, "Member 'GeometryScriptLibrary_CollisionFunctions_SetStaticMeshCollisionFromComponent::Debug' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_CollisionFunctions.SetStaticMeshCollisionFromMesh
// 0x0058 (0x0058 - 0x0000)
struct GeometryScriptLibrary_CollisionFunctions_SetStaticMeshCollisionFromMesh final
{
public:
	class UDynamicMesh*                           FromDynamicMesh;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            ToStaticMeshAsset;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptCollisionFromMeshOptions Options;                                           // 0x0010(0x0030)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FGeometryScriptSetStaticMeshCollisionOptions StaticMeshCollisionOptions;                        // 0x0040(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0048(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_CollisionFunctions_SetStaticMeshCollisionFromMesh) == 0x000008, "Wrong alignment on GeometryScriptLibrary_CollisionFunctions_SetStaticMeshCollisionFromMesh");
static_assert(sizeof(GeometryScriptLibrary_CollisionFunctions_SetStaticMeshCollisionFromMesh) == 0x000058, "Wrong size on GeometryScriptLibrary_CollisionFunctions_SetStaticMeshCollisionFromMesh");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_SetStaticMeshCollisionFromMesh, FromDynamicMesh) == 0x000000, "Member 'GeometryScriptLibrary_CollisionFunctions_SetStaticMeshCollisionFromMesh::FromDynamicMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_SetStaticMeshCollisionFromMesh, ToStaticMeshAsset) == 0x000008, "Member 'GeometryScriptLibrary_CollisionFunctions_SetStaticMeshCollisionFromMesh::ToStaticMeshAsset' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_SetStaticMeshCollisionFromMesh, Options) == 0x000010, "Member 'GeometryScriptLibrary_CollisionFunctions_SetStaticMeshCollisionFromMesh::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_SetStaticMeshCollisionFromMesh, StaticMeshCollisionOptions) == 0x000040, "Member 'GeometryScriptLibrary_CollisionFunctions_SetStaticMeshCollisionFromMesh::StaticMeshCollisionOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_SetStaticMeshCollisionFromMesh, Debug) == 0x000048, "Member 'GeometryScriptLibrary_CollisionFunctions_SetStaticMeshCollisionFromMesh::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_SetStaticMeshCollisionFromMesh, ReturnValue) == 0x000050, "Member 'GeometryScriptLibrary_CollisionFunctions_SetStaticMeshCollisionFromMesh::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_CollisionFunctions.SimplifyConvexHulls
// 0x00A0 (0x00A0 - 0x0000)
struct GeometryScriptLibrary_CollisionFunctions_SimplifyConvexHulls final
{
public:
	struct FGeometryScriptSimpleCollision         SimpleCollision;                                   // 0x0000(0x0080)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometryScriptConvexHullSimplificationOptions SimplifyOptions;                                   // 0x0080(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bHasSimplified;                                    // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0098(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_CollisionFunctions_SimplifyConvexHulls) == 0x000008, "Wrong alignment on GeometryScriptLibrary_CollisionFunctions_SimplifyConvexHulls");
static_assert(sizeof(GeometryScriptLibrary_CollisionFunctions_SimplifyConvexHulls) == 0x0000A0, "Wrong size on GeometryScriptLibrary_CollisionFunctions_SimplifyConvexHulls");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_SimplifyConvexHulls, SimpleCollision) == 0x000000, "Member 'GeometryScriptLibrary_CollisionFunctions_SimplifyConvexHulls::SimpleCollision' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_SimplifyConvexHulls, SimplifyOptions) == 0x000080, "Member 'GeometryScriptLibrary_CollisionFunctions_SimplifyConvexHulls::SimplifyOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_SimplifyConvexHulls, bHasSimplified) == 0x000090, "Member 'GeometryScriptLibrary_CollisionFunctions_SimplifyConvexHulls::bHasSimplified' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_SimplifyConvexHulls, Debug) == 0x000098, "Member 'GeometryScriptLibrary_CollisionFunctions_SimplifyConvexHulls::Debug' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_CollisionFunctions.StaticMeshHasCustomizedCollision
// 0x0010 (0x0010 - 0x0000)
struct GeometryScriptLibrary_CollisionFunctions_StaticMeshHasCustomizedCollision final
{
public:
	class UStaticMesh*                            StaticMeshAsset;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_CollisionFunctions_StaticMeshHasCustomizedCollision) == 0x000008, "Wrong alignment on GeometryScriptLibrary_CollisionFunctions_StaticMeshHasCustomizedCollision");
static_assert(sizeof(GeometryScriptLibrary_CollisionFunctions_StaticMeshHasCustomizedCollision) == 0x000010, "Wrong size on GeometryScriptLibrary_CollisionFunctions_StaticMeshHasCustomizedCollision");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_StaticMeshHasCustomizedCollision, StaticMeshAsset) == 0x000000, "Member 'GeometryScriptLibrary_CollisionFunctions_StaticMeshHasCustomizedCollision::StaticMeshAsset' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_StaticMeshHasCustomizedCollision, ReturnValue) == 0x000008, "Member 'GeometryScriptLibrary_CollisionFunctions_StaticMeshHasCustomizedCollision::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_CollisionFunctions.TransformSimpleCollisionShapes
// 0x0170 (0x0170 - 0x0000)
struct GeometryScriptLibrary_CollisionFunctions_TransformSimpleCollisionShapes final
{
public:
	struct FGeometryScriptSimpleCollision         SimpleCollision;                                   // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FTransform                             Transform;                                         // 0x0080(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptTransformCollisionOptions TransformOptions;                                  // 0x00E0(0x0002)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x00E2(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E3[0x5];                                       // 0x00E3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x00E8(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptSimpleCollision         ReturnValue;                                       // 0x00F0(0x0080)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_CollisionFunctions_TransformSimpleCollisionShapes) == 0x000010, "Wrong alignment on GeometryScriptLibrary_CollisionFunctions_TransformSimpleCollisionShapes");
static_assert(sizeof(GeometryScriptLibrary_CollisionFunctions_TransformSimpleCollisionShapes) == 0x000170, "Wrong size on GeometryScriptLibrary_CollisionFunctions_TransformSimpleCollisionShapes");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_TransformSimpleCollisionShapes, SimpleCollision) == 0x000000, "Member 'GeometryScriptLibrary_CollisionFunctions_TransformSimpleCollisionShapes::SimpleCollision' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_TransformSimpleCollisionShapes, Transform) == 0x000080, "Member 'GeometryScriptLibrary_CollisionFunctions_TransformSimpleCollisionShapes::Transform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_TransformSimpleCollisionShapes, TransformOptions) == 0x0000E0, "Member 'GeometryScriptLibrary_CollisionFunctions_TransformSimpleCollisionShapes::TransformOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_TransformSimpleCollisionShapes, bSuccess) == 0x0000E2, "Member 'GeometryScriptLibrary_CollisionFunctions_TransformSimpleCollisionShapes::bSuccess' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_TransformSimpleCollisionShapes, Debug) == 0x0000E8, "Member 'GeometryScriptLibrary_CollisionFunctions_TransformSimpleCollisionShapes::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_CollisionFunctions_TransformSimpleCollisionShapes, ReturnValue) == 0x0000F0, "Member 'GeometryScriptLibrary_CollisionFunctions_TransformSimpleCollisionShapes::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ContainmentFunctions.ComputeMeshConvexDecomposition
// 0x0050 (0x0050 - 0x0000)
struct GeometryScriptLibrary_ContainmentFunctions_ComputeMeshConvexDecomposition final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           CopyToMesh;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           CopyToMeshOut;                                     // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptConvexDecompositionOptions Options;                                           // 0x0018(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0040(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_ContainmentFunctions_ComputeMeshConvexDecomposition) == 0x000008, "Wrong alignment on GeometryScriptLibrary_ContainmentFunctions_ComputeMeshConvexDecomposition");
static_assert(sizeof(GeometryScriptLibrary_ContainmentFunctions_ComputeMeshConvexDecomposition) == 0x000050, "Wrong size on GeometryScriptLibrary_ContainmentFunctions_ComputeMeshConvexDecomposition");
static_assert(offsetof(GeometryScriptLibrary_ContainmentFunctions_ComputeMeshConvexDecomposition, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_ContainmentFunctions_ComputeMeshConvexDecomposition::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ContainmentFunctions_ComputeMeshConvexDecomposition, CopyToMesh) == 0x000008, "Member 'GeometryScriptLibrary_ContainmentFunctions_ComputeMeshConvexDecomposition::CopyToMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ContainmentFunctions_ComputeMeshConvexDecomposition, CopyToMeshOut) == 0x000010, "Member 'GeometryScriptLibrary_ContainmentFunctions_ComputeMeshConvexDecomposition::CopyToMeshOut' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ContainmentFunctions_ComputeMeshConvexDecomposition, Options) == 0x000018, "Member 'GeometryScriptLibrary_ContainmentFunctions_ComputeMeshConvexDecomposition::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ContainmentFunctions_ComputeMeshConvexDecomposition, Debug) == 0x000040, "Member 'GeometryScriptLibrary_ContainmentFunctions_ComputeMeshConvexDecomposition::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ContainmentFunctions_ComputeMeshConvexDecomposition, ReturnValue) == 0x000048, "Member 'GeometryScriptLibrary_ContainmentFunctions_ComputeMeshConvexDecomposition::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ContainmentFunctions.ComputeMeshConvexHull
// 0x0048 (0x0048 - 0x0000)
struct GeometryScriptLibrary_ContainmentFunctions_ComputeMeshConvexHull final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           CopyToMesh;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           CopyToMeshOut;                                     // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0018(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptConvexHullOptions       Options;                                           // 0x0028(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_ContainmentFunctions_ComputeMeshConvexHull) == 0x000008, "Wrong alignment on GeometryScriptLibrary_ContainmentFunctions_ComputeMeshConvexHull");
static_assert(sizeof(GeometryScriptLibrary_ContainmentFunctions_ComputeMeshConvexHull) == 0x000048, "Wrong size on GeometryScriptLibrary_ContainmentFunctions_ComputeMeshConvexHull");
static_assert(offsetof(GeometryScriptLibrary_ContainmentFunctions_ComputeMeshConvexHull, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_ContainmentFunctions_ComputeMeshConvexHull::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ContainmentFunctions_ComputeMeshConvexHull, CopyToMesh) == 0x000008, "Member 'GeometryScriptLibrary_ContainmentFunctions_ComputeMeshConvexHull::CopyToMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ContainmentFunctions_ComputeMeshConvexHull, CopyToMeshOut) == 0x000010, "Member 'GeometryScriptLibrary_ContainmentFunctions_ComputeMeshConvexHull::CopyToMeshOut' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ContainmentFunctions_ComputeMeshConvexHull, Selection) == 0x000018, "Member 'GeometryScriptLibrary_ContainmentFunctions_ComputeMeshConvexHull::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ContainmentFunctions_ComputeMeshConvexHull, Options) == 0x000028, "Member 'GeometryScriptLibrary_ContainmentFunctions_ComputeMeshConvexHull::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ContainmentFunctions_ComputeMeshConvexHull, Debug) == 0x000038, "Member 'GeometryScriptLibrary_ContainmentFunctions_ComputeMeshConvexHull::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ContainmentFunctions_ComputeMeshConvexHull, ReturnValue) == 0x000040, "Member 'GeometryScriptLibrary_ContainmentFunctions_ComputeMeshConvexHull::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ContainmentFunctions.ComputeMeshSweptHull
// 0x00B0 (0x00B0 - 0x0000)
struct GeometryScriptLibrary_ContainmentFunctions_ComputeMeshSweptHull final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           CopyToMesh;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           CopyToMeshOut;                                     // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ProjectionFrame;                                   // 0x0020(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptSweptHullOptions        Options;                                           // 0x0080(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0098(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x00A0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_ContainmentFunctions_ComputeMeshSweptHull) == 0x000010, "Wrong alignment on GeometryScriptLibrary_ContainmentFunctions_ComputeMeshSweptHull");
static_assert(sizeof(GeometryScriptLibrary_ContainmentFunctions_ComputeMeshSweptHull) == 0x0000B0, "Wrong size on GeometryScriptLibrary_ContainmentFunctions_ComputeMeshSweptHull");
static_assert(offsetof(GeometryScriptLibrary_ContainmentFunctions_ComputeMeshSweptHull, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_ContainmentFunctions_ComputeMeshSweptHull::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ContainmentFunctions_ComputeMeshSweptHull, CopyToMesh) == 0x000008, "Member 'GeometryScriptLibrary_ContainmentFunctions_ComputeMeshSweptHull::CopyToMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ContainmentFunctions_ComputeMeshSweptHull, CopyToMeshOut) == 0x000010, "Member 'GeometryScriptLibrary_ContainmentFunctions_ComputeMeshSweptHull::CopyToMeshOut' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ContainmentFunctions_ComputeMeshSweptHull, ProjectionFrame) == 0x000020, "Member 'GeometryScriptLibrary_ContainmentFunctions_ComputeMeshSweptHull::ProjectionFrame' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ContainmentFunctions_ComputeMeshSweptHull, Options) == 0x000080, "Member 'GeometryScriptLibrary_ContainmentFunctions_ComputeMeshSweptHull::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ContainmentFunctions_ComputeMeshSweptHull, Debug) == 0x000098, "Member 'GeometryScriptLibrary_ContainmentFunctions_ComputeMeshSweptHull::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ContainmentFunctions_ComputeMeshSweptHull, ReturnValue) == 0x0000A0, "Member 'GeometryScriptLibrary_ContainmentFunctions_ComputeMeshSweptHull::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ListUtilityFunctions.ClearColorList
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_ListUtilityFunctions_ClearColorList final
{
public:
	struct FGeometryScriptColorList               ColorList;                                         // 0x0000(0x0010)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLinearColor                           ClearColor;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_ListUtilityFunctions_ClearColorList) == 0x000008, "Wrong alignment on GeometryScriptLibrary_ListUtilityFunctions_ClearColorList");
static_assert(sizeof(GeometryScriptLibrary_ListUtilityFunctions_ClearColorList) == 0x000020, "Wrong size on GeometryScriptLibrary_ListUtilityFunctions_ClearColorList");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_ClearColorList, ColorList) == 0x000000, "Member 'GeometryScriptLibrary_ListUtilityFunctions_ClearColorList::ColorList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_ClearColorList, ClearColor) == 0x000010, "Member 'GeometryScriptLibrary_ListUtilityFunctions_ClearColorList::ClearColor' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ListUtilityFunctions.ClearIndexList
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_ListUtilityFunctions_ClearIndexList final
{
public:
	struct FGeometryScriptIndexList               IndexList;                                         // 0x0000(0x0018)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ClearValue;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_ListUtilityFunctions_ClearIndexList) == 0x000008, "Wrong alignment on GeometryScriptLibrary_ListUtilityFunctions_ClearIndexList");
static_assert(sizeof(GeometryScriptLibrary_ListUtilityFunctions_ClearIndexList) == 0x000020, "Wrong size on GeometryScriptLibrary_ListUtilityFunctions_ClearIndexList");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_ClearIndexList, IndexList) == 0x000000, "Member 'GeometryScriptLibrary_ListUtilityFunctions_ClearIndexList::IndexList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_ClearIndexList, ClearValue) == 0x000018, "Member 'GeometryScriptLibrary_ListUtilityFunctions_ClearIndexList::ClearValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ListUtilityFunctions.ClearScalarList
// 0x0018 (0x0018 - 0x0000)
struct GeometryScriptLibrary_ListUtilityFunctions_ClearScalarList final
{
public:
	struct FGeometryScriptScalarList              ScalarList;                                        // 0x0000(0x0010)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	double                                        ClearValue;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_ListUtilityFunctions_ClearScalarList) == 0x000008, "Wrong alignment on GeometryScriptLibrary_ListUtilityFunctions_ClearScalarList");
static_assert(sizeof(GeometryScriptLibrary_ListUtilityFunctions_ClearScalarList) == 0x000018, "Wrong size on GeometryScriptLibrary_ListUtilityFunctions_ClearScalarList");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_ClearScalarList, ScalarList) == 0x000000, "Member 'GeometryScriptLibrary_ListUtilityFunctions_ClearScalarList::ScalarList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_ClearScalarList, ClearValue) == 0x000010, "Member 'GeometryScriptLibrary_ListUtilityFunctions_ClearScalarList::ClearValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ListUtilityFunctions.ClearUVList
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_ListUtilityFunctions_ClearUVList final
{
public:
	struct FGeometryScriptUVList                  UVList;                                            // 0x0000(0x0010)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector2D                              ClearUV;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_ListUtilityFunctions_ClearUVList) == 0x000008, "Wrong alignment on GeometryScriptLibrary_ListUtilityFunctions_ClearUVList");
static_assert(sizeof(GeometryScriptLibrary_ListUtilityFunctions_ClearUVList) == 0x000020, "Wrong size on GeometryScriptLibrary_ListUtilityFunctions_ClearUVList");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_ClearUVList, UVList) == 0x000000, "Member 'GeometryScriptLibrary_ListUtilityFunctions_ClearUVList::UVList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_ClearUVList, ClearUV) == 0x000010, "Member 'GeometryScriptLibrary_ListUtilityFunctions_ClearUVList::ClearUV' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ListUtilityFunctions.ClearVectorList
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_ListUtilityFunctions_ClearVectorList final
{
public:
	struct FGeometryScriptVectorList              VectorList;                                        // 0x0000(0x0010)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                ClearValue;                                        // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_ListUtilityFunctions_ClearVectorList) == 0x000008, "Wrong alignment on GeometryScriptLibrary_ListUtilityFunctions_ClearVectorList");
static_assert(sizeof(GeometryScriptLibrary_ListUtilityFunctions_ClearVectorList) == 0x000028, "Wrong size on GeometryScriptLibrary_ListUtilityFunctions_ClearVectorList");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_ClearVectorList, VectorList) == 0x000000, "Member 'GeometryScriptLibrary_ListUtilityFunctions_ClearVectorList::VectorList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_ClearVectorList, ClearValue) == 0x000010, "Member 'GeometryScriptLibrary_ListUtilityFunctions_ClearVectorList::ClearValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ListUtilityFunctions.ConvertArrayToColorList
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToColorList final
{
public:
	TArray<struct FLinearColor>                   ColorArray;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometryScriptColorList               ColorList;                                         // 0x0010(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToColorList) == 0x000008, "Wrong alignment on GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToColorList");
static_assert(sizeof(GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToColorList) == 0x000020, "Wrong size on GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToColorList");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToColorList, ColorArray) == 0x000000, "Member 'GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToColorList::ColorArray' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToColorList, ColorList) == 0x000010, "Member 'GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToColorList::ColorList' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ListUtilityFunctions.ConvertArrayToIndexList
// 0x0030 (0x0030 - 0x0000)
struct GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToIndexList final
{
public:
	TArray<int32>                                 IndexArray;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometryScriptIndexList               IndexList;                                         // 0x0010(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	EGeometryScriptIndexType                      IndexType;                                         // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToIndexList) == 0x000008, "Wrong alignment on GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToIndexList");
static_assert(sizeof(GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToIndexList) == 0x000030, "Wrong size on GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToIndexList");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToIndexList, IndexArray) == 0x000000, "Member 'GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToIndexList::IndexArray' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToIndexList, IndexList) == 0x000010, "Member 'GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToIndexList::IndexList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToIndexList, IndexType) == 0x000028, "Member 'GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToIndexList::IndexType' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ListUtilityFunctions.ConvertArrayToScalarList
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToScalarList final
{
public:
	TArray<double>                                VectorArray;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometryScriptScalarList              ScalarList;                                        // 0x0010(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToScalarList) == 0x000008, "Wrong alignment on GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToScalarList");
static_assert(sizeof(GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToScalarList) == 0x000020, "Wrong size on GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToScalarList");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToScalarList, VectorArray) == 0x000000, "Member 'GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToScalarList::VectorArray' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToScalarList, ScalarList) == 0x000010, "Member 'GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToScalarList::ScalarList' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ListUtilityFunctions.ConvertArrayToTriangleList
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToTriangleList final
{
public:
	TArray<struct FIntVector>                     TriangleArray;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometryScriptTriangleList            TriangleList;                                      // 0x0010(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToTriangleList) == 0x000008, "Wrong alignment on GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToTriangleList");
static_assert(sizeof(GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToTriangleList) == 0x000020, "Wrong size on GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToTriangleList");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToTriangleList, TriangleArray) == 0x000000, "Member 'GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToTriangleList::TriangleArray' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToTriangleList, TriangleList) == 0x000010, "Member 'GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToTriangleList::TriangleList' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ListUtilityFunctions.ConvertArrayToUVList
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToUVList final
{
public:
	TArray<struct FVector2D>                      UVArray;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometryScriptUVList                  UVList;                                            // 0x0010(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToUVList) == 0x000008, "Wrong alignment on GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToUVList");
static_assert(sizeof(GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToUVList) == 0x000020, "Wrong size on GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToUVList");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToUVList, UVArray) == 0x000000, "Member 'GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToUVList::UVArray' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToUVList, UVList) == 0x000010, "Member 'GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToUVList::UVList' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ListUtilityFunctions.ConvertArrayToVectorList
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToVectorList final
{
public:
	TArray<struct FVector>                        VectorArray;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometryScriptVectorList              VectorList;                                        // 0x0010(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToVectorList) == 0x000008, "Wrong alignment on GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToVectorList");
static_assert(sizeof(GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToVectorList) == 0x000020, "Wrong size on GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToVectorList");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToVectorList, VectorArray) == 0x000000, "Member 'GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToVectorList::VectorArray' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToVectorList, VectorList) == 0x000010, "Member 'GeometryScriptLibrary_ListUtilityFunctions_ConvertArrayToVectorList::VectorList' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ListUtilityFunctions.ConvertColorListToArray
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_ListUtilityFunctions_ConvertColorListToArray final
{
public:
	struct FGeometryScriptColorList               ColorList;                                         // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                   ColorArray;                                        // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_ListUtilityFunctions_ConvertColorListToArray) == 0x000008, "Wrong alignment on GeometryScriptLibrary_ListUtilityFunctions_ConvertColorListToArray");
static_assert(sizeof(GeometryScriptLibrary_ListUtilityFunctions_ConvertColorListToArray) == 0x000020, "Wrong size on GeometryScriptLibrary_ListUtilityFunctions_ConvertColorListToArray");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_ConvertColorListToArray, ColorList) == 0x000000, "Member 'GeometryScriptLibrary_ListUtilityFunctions_ConvertColorListToArray::ColorList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_ConvertColorListToArray, ColorArray) == 0x000010, "Member 'GeometryScriptLibrary_ListUtilityFunctions_ConvertColorListToArray::ColorArray' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ListUtilityFunctions.ConvertIndexListToArray
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_ListUtilityFunctions_ConvertIndexListToArray final
{
public:
	struct FGeometryScriptIndexList               IndexList;                                         // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	TArray<int32>                                 IndexArray;                                        // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_ListUtilityFunctions_ConvertIndexListToArray) == 0x000008, "Wrong alignment on GeometryScriptLibrary_ListUtilityFunctions_ConvertIndexListToArray");
static_assert(sizeof(GeometryScriptLibrary_ListUtilityFunctions_ConvertIndexListToArray) == 0x000028, "Wrong size on GeometryScriptLibrary_ListUtilityFunctions_ConvertIndexListToArray");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_ConvertIndexListToArray, IndexList) == 0x000000, "Member 'GeometryScriptLibrary_ListUtilityFunctions_ConvertIndexListToArray::IndexList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_ConvertIndexListToArray, IndexArray) == 0x000018, "Member 'GeometryScriptLibrary_ListUtilityFunctions_ConvertIndexListToArray::IndexArray' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ListUtilityFunctions.ConvertScalarListToArray
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_ListUtilityFunctions_ConvertScalarListToArray final
{
public:
	struct FGeometryScriptScalarList              ScalarList;                                        // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	TArray<double>                                ScalarArray;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_ListUtilityFunctions_ConvertScalarListToArray) == 0x000008, "Wrong alignment on GeometryScriptLibrary_ListUtilityFunctions_ConvertScalarListToArray");
static_assert(sizeof(GeometryScriptLibrary_ListUtilityFunctions_ConvertScalarListToArray) == 0x000020, "Wrong size on GeometryScriptLibrary_ListUtilityFunctions_ConvertScalarListToArray");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_ConvertScalarListToArray, ScalarList) == 0x000000, "Member 'GeometryScriptLibrary_ListUtilityFunctions_ConvertScalarListToArray::ScalarList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_ConvertScalarListToArray, ScalarArray) == 0x000010, "Member 'GeometryScriptLibrary_ListUtilityFunctions_ConvertScalarListToArray::ScalarArray' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ListUtilityFunctions.ConvertTriangleListToArray
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_ListUtilityFunctions_ConvertTriangleListToArray final
{
public:
	struct FGeometryScriptTriangleList            TriangleList;                                      // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	TArray<struct FIntVector>                     TriangleArray;                                     // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_ListUtilityFunctions_ConvertTriangleListToArray) == 0x000008, "Wrong alignment on GeometryScriptLibrary_ListUtilityFunctions_ConvertTriangleListToArray");
static_assert(sizeof(GeometryScriptLibrary_ListUtilityFunctions_ConvertTriangleListToArray) == 0x000020, "Wrong size on GeometryScriptLibrary_ListUtilityFunctions_ConvertTriangleListToArray");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_ConvertTriangleListToArray, TriangleList) == 0x000000, "Member 'GeometryScriptLibrary_ListUtilityFunctions_ConvertTriangleListToArray::TriangleList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_ConvertTriangleListToArray, TriangleArray) == 0x000010, "Member 'GeometryScriptLibrary_ListUtilityFunctions_ConvertTriangleListToArray::TriangleArray' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ListUtilityFunctions.ConvertUVListToArray
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_ListUtilityFunctions_ConvertUVListToArray final
{
public:
	struct FGeometryScriptUVList                  UVList;                                            // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      UVArray;                                           // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_ListUtilityFunctions_ConvertUVListToArray) == 0x000008, "Wrong alignment on GeometryScriptLibrary_ListUtilityFunctions_ConvertUVListToArray");
static_assert(sizeof(GeometryScriptLibrary_ListUtilityFunctions_ConvertUVListToArray) == 0x000020, "Wrong size on GeometryScriptLibrary_ListUtilityFunctions_ConvertUVListToArray");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_ConvertUVListToArray, UVList) == 0x000000, "Member 'GeometryScriptLibrary_ListUtilityFunctions_ConvertUVListToArray::UVList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_ConvertUVListToArray, UVArray) == 0x000010, "Member 'GeometryScriptLibrary_ListUtilityFunctions_ConvertUVListToArray::UVArray' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ListUtilityFunctions.ConvertVectorListToArray
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_ListUtilityFunctions_ConvertVectorListToArray final
{
public:
	struct FGeometryScriptVectorList              VectorList;                                        // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        VectorArray;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_ListUtilityFunctions_ConvertVectorListToArray) == 0x000008, "Wrong alignment on GeometryScriptLibrary_ListUtilityFunctions_ConvertVectorListToArray");
static_assert(sizeof(GeometryScriptLibrary_ListUtilityFunctions_ConvertVectorListToArray) == 0x000020, "Wrong size on GeometryScriptLibrary_ListUtilityFunctions_ConvertVectorListToArray");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_ConvertVectorListToArray, VectorList) == 0x000000, "Member 'GeometryScriptLibrary_ListUtilityFunctions_ConvertVectorListToArray::VectorList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_ConvertVectorListToArray, VectorArray) == 0x000010, "Member 'GeometryScriptLibrary_ListUtilityFunctions_ConvertVectorListToArray::VectorArray' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ListUtilityFunctions.DuplicateColorList
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_ListUtilityFunctions_DuplicateColorList final
{
public:
	struct FGeometryScriptColorList               ColorList;                                         // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptColorList               DuplicateList;                                     // 0x0010(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_ListUtilityFunctions_DuplicateColorList) == 0x000008, "Wrong alignment on GeometryScriptLibrary_ListUtilityFunctions_DuplicateColorList");
static_assert(sizeof(GeometryScriptLibrary_ListUtilityFunctions_DuplicateColorList) == 0x000020, "Wrong size on GeometryScriptLibrary_ListUtilityFunctions_DuplicateColorList");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_DuplicateColorList, ColorList) == 0x000000, "Member 'GeometryScriptLibrary_ListUtilityFunctions_DuplicateColorList::ColorList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_DuplicateColorList, DuplicateList) == 0x000010, "Member 'GeometryScriptLibrary_ListUtilityFunctions_DuplicateColorList::DuplicateList' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ListUtilityFunctions.DuplicateIndexList
// 0x0030 (0x0030 - 0x0000)
struct GeometryScriptLibrary_ListUtilityFunctions_DuplicateIndexList final
{
public:
	struct FGeometryScriptIndexList               IndexList;                                         // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptIndexList               DuplicateList;                                     // 0x0018(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_ListUtilityFunctions_DuplicateIndexList) == 0x000008, "Wrong alignment on GeometryScriptLibrary_ListUtilityFunctions_DuplicateIndexList");
static_assert(sizeof(GeometryScriptLibrary_ListUtilityFunctions_DuplicateIndexList) == 0x000030, "Wrong size on GeometryScriptLibrary_ListUtilityFunctions_DuplicateIndexList");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_DuplicateIndexList, IndexList) == 0x000000, "Member 'GeometryScriptLibrary_ListUtilityFunctions_DuplicateIndexList::IndexList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_DuplicateIndexList, DuplicateList) == 0x000018, "Member 'GeometryScriptLibrary_ListUtilityFunctions_DuplicateIndexList::DuplicateList' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ListUtilityFunctions.DuplicateScalarList
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_ListUtilityFunctions_DuplicateScalarList final
{
public:
	struct FGeometryScriptScalarList              ScalarList;                                        // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptScalarList              DuplicateList;                                     // 0x0010(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_ListUtilityFunctions_DuplicateScalarList) == 0x000008, "Wrong alignment on GeometryScriptLibrary_ListUtilityFunctions_DuplicateScalarList");
static_assert(sizeof(GeometryScriptLibrary_ListUtilityFunctions_DuplicateScalarList) == 0x000020, "Wrong size on GeometryScriptLibrary_ListUtilityFunctions_DuplicateScalarList");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_DuplicateScalarList, ScalarList) == 0x000000, "Member 'GeometryScriptLibrary_ListUtilityFunctions_DuplicateScalarList::ScalarList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_DuplicateScalarList, DuplicateList) == 0x000010, "Member 'GeometryScriptLibrary_ListUtilityFunctions_DuplicateScalarList::DuplicateList' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ListUtilityFunctions.DuplicateUVList
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_ListUtilityFunctions_DuplicateUVList final
{
public:
	struct FGeometryScriptUVList                  UVList;                                            // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptUVList                  DuplicateList;                                     // 0x0010(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_ListUtilityFunctions_DuplicateUVList) == 0x000008, "Wrong alignment on GeometryScriptLibrary_ListUtilityFunctions_DuplicateUVList");
static_assert(sizeof(GeometryScriptLibrary_ListUtilityFunctions_DuplicateUVList) == 0x000020, "Wrong size on GeometryScriptLibrary_ListUtilityFunctions_DuplicateUVList");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_DuplicateUVList, UVList) == 0x000000, "Member 'GeometryScriptLibrary_ListUtilityFunctions_DuplicateUVList::UVList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_DuplicateUVList, DuplicateList) == 0x000010, "Member 'GeometryScriptLibrary_ListUtilityFunctions_DuplicateUVList::DuplicateList' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ListUtilityFunctions.DuplicateVectorList
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_ListUtilityFunctions_DuplicateVectorList final
{
public:
	struct FGeometryScriptVectorList              VectorList;                                        // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptVectorList              DuplicateList;                                     // 0x0010(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_ListUtilityFunctions_DuplicateVectorList) == 0x000008, "Wrong alignment on GeometryScriptLibrary_ListUtilityFunctions_DuplicateVectorList");
static_assert(sizeof(GeometryScriptLibrary_ListUtilityFunctions_DuplicateVectorList) == 0x000020, "Wrong size on GeometryScriptLibrary_ListUtilityFunctions_DuplicateVectorList");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_DuplicateVectorList, VectorList) == 0x000000, "Member 'GeometryScriptLibrary_ListUtilityFunctions_DuplicateVectorList::VectorList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_DuplicateVectorList, DuplicateList) == 0x000010, "Member 'GeometryScriptLibrary_ListUtilityFunctions_DuplicateVectorList::DuplicateList' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ListUtilityFunctions.ExtractColorListChannel
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_ListUtilityFunctions_ExtractColorListChannel final
{
public:
	struct FGeometryScriptColorList               ColorList;                                         // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptScalarList              ScalarList;                                        // 0x0010(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	int32                                         ChannelIndex;                                      // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_ListUtilityFunctions_ExtractColorListChannel) == 0x000008, "Wrong alignment on GeometryScriptLibrary_ListUtilityFunctions_ExtractColorListChannel");
static_assert(sizeof(GeometryScriptLibrary_ListUtilityFunctions_ExtractColorListChannel) == 0x000028, "Wrong size on GeometryScriptLibrary_ListUtilityFunctions_ExtractColorListChannel");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_ExtractColorListChannel, ColorList) == 0x000000, "Member 'GeometryScriptLibrary_ListUtilityFunctions_ExtractColorListChannel::ColorList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_ExtractColorListChannel, ScalarList) == 0x000010, "Member 'GeometryScriptLibrary_ListUtilityFunctions_ExtractColorListChannel::ScalarList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_ExtractColorListChannel, ChannelIndex) == 0x000020, "Member 'GeometryScriptLibrary_ListUtilityFunctions_ExtractColorListChannel::ChannelIndex' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ListUtilityFunctions.ExtractColorListChannels
// 0x0030 (0x0030 - 0x0000)
struct GeometryScriptLibrary_ListUtilityFunctions_ExtractColorListChannels final
{
public:
	struct FGeometryScriptColorList               ColorList;                                         // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptVectorList              VectorList;                                        // 0x0010(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	int32                                         XChannelIndex;                                     // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         YChannelIndex;                                     // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ZChannelIndex;                                     // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_ListUtilityFunctions_ExtractColorListChannels) == 0x000008, "Wrong alignment on GeometryScriptLibrary_ListUtilityFunctions_ExtractColorListChannels");
static_assert(sizeof(GeometryScriptLibrary_ListUtilityFunctions_ExtractColorListChannels) == 0x000030, "Wrong size on GeometryScriptLibrary_ListUtilityFunctions_ExtractColorListChannels");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_ExtractColorListChannels, ColorList) == 0x000000, "Member 'GeometryScriptLibrary_ListUtilityFunctions_ExtractColorListChannels::ColorList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_ExtractColorListChannels, VectorList) == 0x000010, "Member 'GeometryScriptLibrary_ListUtilityFunctions_ExtractColorListChannels::VectorList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_ExtractColorListChannels, XChannelIndex) == 0x000020, "Member 'GeometryScriptLibrary_ListUtilityFunctions_ExtractColorListChannels::XChannelIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_ExtractColorListChannels, YChannelIndex) == 0x000024, "Member 'GeometryScriptLibrary_ListUtilityFunctions_ExtractColorListChannels::YChannelIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_ExtractColorListChannels, ZChannelIndex) == 0x000028, "Member 'GeometryScriptLibrary_ListUtilityFunctions_ExtractColorListChannels::ZChannelIndex' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ListUtilityFunctions.GetColorListItem
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_ListUtilityFunctions_GetColorListItem final
{
public:
	struct FGeometryScriptColorList               ColorList;                                         // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValidIndex;                                     // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_ListUtilityFunctions_GetColorListItem) == 0x000008, "Wrong alignment on GeometryScriptLibrary_ListUtilityFunctions_GetColorListItem");
static_assert(sizeof(GeometryScriptLibrary_ListUtilityFunctions_GetColorListItem) == 0x000028, "Wrong size on GeometryScriptLibrary_ListUtilityFunctions_GetColorListItem");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_GetColorListItem, ColorList) == 0x000000, "Member 'GeometryScriptLibrary_ListUtilityFunctions_GetColorListItem::ColorList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_GetColorListItem, Index_0) == 0x000010, "Member 'GeometryScriptLibrary_ListUtilityFunctions_GetColorListItem::Index_0' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_GetColorListItem, bIsValidIndex) == 0x000014, "Member 'GeometryScriptLibrary_ListUtilityFunctions_GetColorListItem::bIsValidIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_GetColorListItem, ReturnValue) == 0x000018, "Member 'GeometryScriptLibrary_ListUtilityFunctions_GetColorListItem::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ListUtilityFunctions.GetColorListLastIndex
// 0x0018 (0x0018 - 0x0000)
struct GeometryScriptLibrary_ListUtilityFunctions_GetColorListLastIndex final
{
public:
	struct FGeometryScriptColorList               ColorList;                                         // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_ListUtilityFunctions_GetColorListLastIndex) == 0x000008, "Wrong alignment on GeometryScriptLibrary_ListUtilityFunctions_GetColorListLastIndex");
static_assert(sizeof(GeometryScriptLibrary_ListUtilityFunctions_GetColorListLastIndex) == 0x000018, "Wrong size on GeometryScriptLibrary_ListUtilityFunctions_GetColorListLastIndex");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_GetColorListLastIndex, ColorList) == 0x000000, "Member 'GeometryScriptLibrary_ListUtilityFunctions_GetColorListLastIndex::ColorList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_GetColorListLastIndex, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_ListUtilityFunctions_GetColorListLastIndex::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ListUtilityFunctions.GetColorListLength
// 0x0018 (0x0018 - 0x0000)
struct GeometryScriptLibrary_ListUtilityFunctions_GetColorListLength final
{
public:
	struct FGeometryScriptColorList               ColorList;                                         // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_ListUtilityFunctions_GetColorListLength) == 0x000008, "Wrong alignment on GeometryScriptLibrary_ListUtilityFunctions_GetColorListLength");
static_assert(sizeof(GeometryScriptLibrary_ListUtilityFunctions_GetColorListLength) == 0x000018, "Wrong size on GeometryScriptLibrary_ListUtilityFunctions_GetColorListLength");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_GetColorListLength, ColorList) == 0x000000, "Member 'GeometryScriptLibrary_ListUtilityFunctions_GetColorListLength::ColorList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_GetColorListLength, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_ListUtilityFunctions_GetColorListLength::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ListUtilityFunctions.GetIndexListItem
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_ListUtilityFunctions_GetIndexListItem final
{
public:
	struct FGeometryScriptIndexList               IndexList;                                         // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValidIndex;                                     // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_ListUtilityFunctions_GetIndexListItem) == 0x000008, "Wrong alignment on GeometryScriptLibrary_ListUtilityFunctions_GetIndexListItem");
static_assert(sizeof(GeometryScriptLibrary_ListUtilityFunctions_GetIndexListItem) == 0x000028, "Wrong size on GeometryScriptLibrary_ListUtilityFunctions_GetIndexListItem");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_GetIndexListItem, IndexList) == 0x000000, "Member 'GeometryScriptLibrary_ListUtilityFunctions_GetIndexListItem::IndexList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_GetIndexListItem, Index_0) == 0x000018, "Member 'GeometryScriptLibrary_ListUtilityFunctions_GetIndexListItem::Index_0' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_GetIndexListItem, bIsValidIndex) == 0x00001C, "Member 'GeometryScriptLibrary_ListUtilityFunctions_GetIndexListItem::bIsValidIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_GetIndexListItem, ReturnValue) == 0x000020, "Member 'GeometryScriptLibrary_ListUtilityFunctions_GetIndexListItem::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ListUtilityFunctions.GetIndexListLastIndex
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_ListUtilityFunctions_GetIndexListLastIndex final
{
public:
	struct FGeometryScriptIndexList               IndexList;                                         // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_ListUtilityFunctions_GetIndexListLastIndex) == 0x000008, "Wrong alignment on GeometryScriptLibrary_ListUtilityFunctions_GetIndexListLastIndex");
static_assert(sizeof(GeometryScriptLibrary_ListUtilityFunctions_GetIndexListLastIndex) == 0x000020, "Wrong size on GeometryScriptLibrary_ListUtilityFunctions_GetIndexListLastIndex");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_GetIndexListLastIndex, IndexList) == 0x000000, "Member 'GeometryScriptLibrary_ListUtilityFunctions_GetIndexListLastIndex::IndexList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_GetIndexListLastIndex, ReturnValue) == 0x000018, "Member 'GeometryScriptLibrary_ListUtilityFunctions_GetIndexListLastIndex::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ListUtilityFunctions.GetIndexListLength
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_ListUtilityFunctions_GetIndexListLength final
{
public:
	struct FGeometryScriptIndexList               IndexList;                                         // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_ListUtilityFunctions_GetIndexListLength) == 0x000008, "Wrong alignment on GeometryScriptLibrary_ListUtilityFunctions_GetIndexListLength");
static_assert(sizeof(GeometryScriptLibrary_ListUtilityFunctions_GetIndexListLength) == 0x000020, "Wrong size on GeometryScriptLibrary_ListUtilityFunctions_GetIndexListLength");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_GetIndexListLength, IndexList) == 0x000000, "Member 'GeometryScriptLibrary_ListUtilityFunctions_GetIndexListLength::IndexList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_GetIndexListLength, ReturnValue) == 0x000018, "Member 'GeometryScriptLibrary_ListUtilityFunctions_GetIndexListLength::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ListUtilityFunctions.GetScalarListItem
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_ListUtilityFunctions_GetScalarListItem final
{
public:
	struct FGeometryScriptScalarList              ScalarList;                                        // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValidIndex;                                     // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_ListUtilityFunctions_GetScalarListItem) == 0x000008, "Wrong alignment on GeometryScriptLibrary_ListUtilityFunctions_GetScalarListItem");
static_assert(sizeof(GeometryScriptLibrary_ListUtilityFunctions_GetScalarListItem) == 0x000020, "Wrong size on GeometryScriptLibrary_ListUtilityFunctions_GetScalarListItem");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_GetScalarListItem, ScalarList) == 0x000000, "Member 'GeometryScriptLibrary_ListUtilityFunctions_GetScalarListItem::ScalarList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_GetScalarListItem, Index_0) == 0x000010, "Member 'GeometryScriptLibrary_ListUtilityFunctions_GetScalarListItem::Index_0' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_GetScalarListItem, bIsValidIndex) == 0x000014, "Member 'GeometryScriptLibrary_ListUtilityFunctions_GetScalarListItem::bIsValidIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_GetScalarListItem, ReturnValue) == 0x000018, "Member 'GeometryScriptLibrary_ListUtilityFunctions_GetScalarListItem::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ListUtilityFunctions.GetScalarListLastIndex
// 0x0018 (0x0018 - 0x0000)
struct GeometryScriptLibrary_ListUtilityFunctions_GetScalarListLastIndex final
{
public:
	struct FGeometryScriptScalarList              ScalarList;                                        // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_ListUtilityFunctions_GetScalarListLastIndex) == 0x000008, "Wrong alignment on GeometryScriptLibrary_ListUtilityFunctions_GetScalarListLastIndex");
static_assert(sizeof(GeometryScriptLibrary_ListUtilityFunctions_GetScalarListLastIndex) == 0x000018, "Wrong size on GeometryScriptLibrary_ListUtilityFunctions_GetScalarListLastIndex");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_GetScalarListLastIndex, ScalarList) == 0x000000, "Member 'GeometryScriptLibrary_ListUtilityFunctions_GetScalarListLastIndex::ScalarList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_GetScalarListLastIndex, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_ListUtilityFunctions_GetScalarListLastIndex::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ListUtilityFunctions.GetScalarListLength
// 0x0018 (0x0018 - 0x0000)
struct GeometryScriptLibrary_ListUtilityFunctions_GetScalarListLength final
{
public:
	struct FGeometryScriptScalarList              ScalarList;                                        // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_ListUtilityFunctions_GetScalarListLength) == 0x000008, "Wrong alignment on GeometryScriptLibrary_ListUtilityFunctions_GetScalarListLength");
static_assert(sizeof(GeometryScriptLibrary_ListUtilityFunctions_GetScalarListLength) == 0x000018, "Wrong size on GeometryScriptLibrary_ListUtilityFunctions_GetScalarListLength");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_GetScalarListLength, ScalarList) == 0x000000, "Member 'GeometryScriptLibrary_ListUtilityFunctions_GetScalarListLength::ScalarList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_GetScalarListLength, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_ListUtilityFunctions_GetScalarListLength::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ListUtilityFunctions.GetTriangleListItem
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_ListUtilityFunctions_GetTriangleListItem final
{
public:
	struct FGeometryScriptTriangleList            TriangleList;                                      // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	int32                                         Triangle;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValidTriangle;                                  // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntVector                             ReturnValue;                                       // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_ListUtilityFunctions_GetTriangleListItem) == 0x000008, "Wrong alignment on GeometryScriptLibrary_ListUtilityFunctions_GetTriangleListItem");
static_assert(sizeof(GeometryScriptLibrary_ListUtilityFunctions_GetTriangleListItem) == 0x000028, "Wrong size on GeometryScriptLibrary_ListUtilityFunctions_GetTriangleListItem");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_GetTriangleListItem, TriangleList) == 0x000000, "Member 'GeometryScriptLibrary_ListUtilityFunctions_GetTriangleListItem::TriangleList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_GetTriangleListItem, Triangle) == 0x000010, "Member 'GeometryScriptLibrary_ListUtilityFunctions_GetTriangleListItem::Triangle' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_GetTriangleListItem, bIsValidTriangle) == 0x000014, "Member 'GeometryScriptLibrary_ListUtilityFunctions_GetTriangleListItem::bIsValidTriangle' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_GetTriangleListItem, ReturnValue) == 0x000018, "Member 'GeometryScriptLibrary_ListUtilityFunctions_GetTriangleListItem::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ListUtilityFunctions.GetTriangleListLastTriangle
// 0x0018 (0x0018 - 0x0000)
struct GeometryScriptLibrary_ListUtilityFunctions_GetTriangleListLastTriangle final
{
public:
	struct FGeometryScriptTriangleList            TriangleList;                                      // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_ListUtilityFunctions_GetTriangleListLastTriangle) == 0x000008, "Wrong alignment on GeometryScriptLibrary_ListUtilityFunctions_GetTriangleListLastTriangle");
static_assert(sizeof(GeometryScriptLibrary_ListUtilityFunctions_GetTriangleListLastTriangle) == 0x000018, "Wrong size on GeometryScriptLibrary_ListUtilityFunctions_GetTriangleListLastTriangle");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_GetTriangleListLastTriangle, TriangleList) == 0x000000, "Member 'GeometryScriptLibrary_ListUtilityFunctions_GetTriangleListLastTriangle::TriangleList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_GetTriangleListLastTriangle, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_ListUtilityFunctions_GetTriangleListLastTriangle::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ListUtilityFunctions.GetTriangleListLength
// 0x0018 (0x0018 - 0x0000)
struct GeometryScriptLibrary_ListUtilityFunctions_GetTriangleListLength final
{
public:
	struct FGeometryScriptTriangleList            TriangleList;                                      // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_ListUtilityFunctions_GetTriangleListLength) == 0x000008, "Wrong alignment on GeometryScriptLibrary_ListUtilityFunctions_GetTriangleListLength");
static_assert(sizeof(GeometryScriptLibrary_ListUtilityFunctions_GetTriangleListLength) == 0x000018, "Wrong size on GeometryScriptLibrary_ListUtilityFunctions_GetTriangleListLength");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_GetTriangleListLength, TriangleList) == 0x000000, "Member 'GeometryScriptLibrary_ListUtilityFunctions_GetTriangleListLength::TriangleList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_GetTriangleListLength, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_ListUtilityFunctions_GetTriangleListLength::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ListUtilityFunctions.GetUVListItem
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_ListUtilityFunctions_GetUVListItem final
{
public:
	struct FGeometryScriptUVList                  UVList;                                            // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValidIndex;                                     // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_ListUtilityFunctions_GetUVListItem) == 0x000008, "Wrong alignment on GeometryScriptLibrary_ListUtilityFunctions_GetUVListItem");
static_assert(sizeof(GeometryScriptLibrary_ListUtilityFunctions_GetUVListItem) == 0x000028, "Wrong size on GeometryScriptLibrary_ListUtilityFunctions_GetUVListItem");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_GetUVListItem, UVList) == 0x000000, "Member 'GeometryScriptLibrary_ListUtilityFunctions_GetUVListItem::UVList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_GetUVListItem, Index_0) == 0x000010, "Member 'GeometryScriptLibrary_ListUtilityFunctions_GetUVListItem::Index_0' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_GetUVListItem, bIsValidIndex) == 0x000014, "Member 'GeometryScriptLibrary_ListUtilityFunctions_GetUVListItem::bIsValidIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_GetUVListItem, ReturnValue) == 0x000018, "Member 'GeometryScriptLibrary_ListUtilityFunctions_GetUVListItem::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ListUtilityFunctions.GetUVListLastIndex
// 0x0018 (0x0018 - 0x0000)
struct GeometryScriptLibrary_ListUtilityFunctions_GetUVListLastIndex final
{
public:
	struct FGeometryScriptUVList                  UVList;                                            // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_ListUtilityFunctions_GetUVListLastIndex) == 0x000008, "Wrong alignment on GeometryScriptLibrary_ListUtilityFunctions_GetUVListLastIndex");
static_assert(sizeof(GeometryScriptLibrary_ListUtilityFunctions_GetUVListLastIndex) == 0x000018, "Wrong size on GeometryScriptLibrary_ListUtilityFunctions_GetUVListLastIndex");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_GetUVListLastIndex, UVList) == 0x000000, "Member 'GeometryScriptLibrary_ListUtilityFunctions_GetUVListLastIndex::UVList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_GetUVListLastIndex, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_ListUtilityFunctions_GetUVListLastIndex::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ListUtilityFunctions.GetUVListLength
// 0x0018 (0x0018 - 0x0000)
struct GeometryScriptLibrary_ListUtilityFunctions_GetUVListLength final
{
public:
	struct FGeometryScriptUVList                  UVList;                                            // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_ListUtilityFunctions_GetUVListLength) == 0x000008, "Wrong alignment on GeometryScriptLibrary_ListUtilityFunctions_GetUVListLength");
static_assert(sizeof(GeometryScriptLibrary_ListUtilityFunctions_GetUVListLength) == 0x000018, "Wrong size on GeometryScriptLibrary_ListUtilityFunctions_GetUVListLength");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_GetUVListLength, UVList) == 0x000000, "Member 'GeometryScriptLibrary_ListUtilityFunctions_GetUVListLength::UVList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_GetUVListLength, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_ListUtilityFunctions_GetUVListLength::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ListUtilityFunctions.GetVectorListItem
// 0x0030 (0x0030 - 0x0000)
struct GeometryScriptLibrary_ListUtilityFunctions_GetVectorListItem final
{
public:
	struct FGeometryScriptVectorList              VectorList;                                        // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValidIndex;                                     // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_ListUtilityFunctions_GetVectorListItem) == 0x000008, "Wrong alignment on GeometryScriptLibrary_ListUtilityFunctions_GetVectorListItem");
static_assert(sizeof(GeometryScriptLibrary_ListUtilityFunctions_GetVectorListItem) == 0x000030, "Wrong size on GeometryScriptLibrary_ListUtilityFunctions_GetVectorListItem");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_GetVectorListItem, VectorList) == 0x000000, "Member 'GeometryScriptLibrary_ListUtilityFunctions_GetVectorListItem::VectorList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_GetVectorListItem, Index_0) == 0x000010, "Member 'GeometryScriptLibrary_ListUtilityFunctions_GetVectorListItem::Index_0' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_GetVectorListItem, bIsValidIndex) == 0x000014, "Member 'GeometryScriptLibrary_ListUtilityFunctions_GetVectorListItem::bIsValidIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_GetVectorListItem, ReturnValue) == 0x000018, "Member 'GeometryScriptLibrary_ListUtilityFunctions_GetVectorListItem::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ListUtilityFunctions.GetVectorListLastIndex
// 0x0018 (0x0018 - 0x0000)
struct GeometryScriptLibrary_ListUtilityFunctions_GetVectorListLastIndex final
{
public:
	struct FGeometryScriptVectorList              VectorList;                                        // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_ListUtilityFunctions_GetVectorListLastIndex) == 0x000008, "Wrong alignment on GeometryScriptLibrary_ListUtilityFunctions_GetVectorListLastIndex");
static_assert(sizeof(GeometryScriptLibrary_ListUtilityFunctions_GetVectorListLastIndex) == 0x000018, "Wrong size on GeometryScriptLibrary_ListUtilityFunctions_GetVectorListLastIndex");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_GetVectorListLastIndex, VectorList) == 0x000000, "Member 'GeometryScriptLibrary_ListUtilityFunctions_GetVectorListLastIndex::VectorList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_GetVectorListLastIndex, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_ListUtilityFunctions_GetVectorListLastIndex::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ListUtilityFunctions.GetVectorListLength
// 0x0018 (0x0018 - 0x0000)
struct GeometryScriptLibrary_ListUtilityFunctions_GetVectorListLength final
{
public:
	struct FGeometryScriptVectorList              VectorList;                                        // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_ListUtilityFunctions_GetVectorListLength) == 0x000008, "Wrong alignment on GeometryScriptLibrary_ListUtilityFunctions_GetVectorListLength");
static_assert(sizeof(GeometryScriptLibrary_ListUtilityFunctions_GetVectorListLength) == 0x000018, "Wrong size on GeometryScriptLibrary_ListUtilityFunctions_GetVectorListLength");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_GetVectorListLength, VectorList) == 0x000000, "Member 'GeometryScriptLibrary_ListUtilityFunctions_GetVectorListLength::VectorList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_GetVectorListLength, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_ListUtilityFunctions_GetVectorListLength::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ListUtilityFunctions.SetColorListItem
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_ListUtilityFunctions_SetColorListItem final
{
public:
	struct FGeometryScriptColorList               ColorList;                                         // 0x0000(0x0010)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           NewColor;                                          // 0x0014(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValidIndex;                                     // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_ListUtilityFunctions_SetColorListItem) == 0x000008, "Wrong alignment on GeometryScriptLibrary_ListUtilityFunctions_SetColorListItem");
static_assert(sizeof(GeometryScriptLibrary_ListUtilityFunctions_SetColorListItem) == 0x000028, "Wrong size on GeometryScriptLibrary_ListUtilityFunctions_SetColorListItem");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_SetColorListItem, ColorList) == 0x000000, "Member 'GeometryScriptLibrary_ListUtilityFunctions_SetColorListItem::ColorList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_SetColorListItem, Index_0) == 0x000010, "Member 'GeometryScriptLibrary_ListUtilityFunctions_SetColorListItem::Index_0' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_SetColorListItem, NewColor) == 0x000014, "Member 'GeometryScriptLibrary_ListUtilityFunctions_SetColorListItem::NewColor' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_SetColorListItem, bIsValidIndex) == 0x000024, "Member 'GeometryScriptLibrary_ListUtilityFunctions_SetColorListItem::bIsValidIndex' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ListUtilityFunctions.SetIndexListItem
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_ListUtilityFunctions_SetIndexListItem final
{
public:
	struct FGeometryScriptIndexList               IndexList;                                         // 0x0000(0x0018)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewValue;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValidIndex;                                     // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_ListUtilityFunctions_SetIndexListItem) == 0x000008, "Wrong alignment on GeometryScriptLibrary_ListUtilityFunctions_SetIndexListItem");
static_assert(sizeof(GeometryScriptLibrary_ListUtilityFunctions_SetIndexListItem) == 0x000028, "Wrong size on GeometryScriptLibrary_ListUtilityFunctions_SetIndexListItem");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_SetIndexListItem, IndexList) == 0x000000, "Member 'GeometryScriptLibrary_ListUtilityFunctions_SetIndexListItem::IndexList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_SetIndexListItem, Index_0) == 0x000018, "Member 'GeometryScriptLibrary_ListUtilityFunctions_SetIndexListItem::Index_0' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_SetIndexListItem, NewValue) == 0x00001C, "Member 'GeometryScriptLibrary_ListUtilityFunctions_SetIndexListItem::NewValue' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_SetIndexListItem, bIsValidIndex) == 0x000020, "Member 'GeometryScriptLibrary_ListUtilityFunctions_SetIndexListItem::bIsValidIndex' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ListUtilityFunctions.SetScalarListItem
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_ListUtilityFunctions_SetScalarListItem final
{
public:
	struct FGeometryScriptScalarList              ScalarList;                                        // 0x0000(0x0010)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        NewValue;                                          // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValidIndex;                                     // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_ListUtilityFunctions_SetScalarListItem) == 0x000008, "Wrong alignment on GeometryScriptLibrary_ListUtilityFunctions_SetScalarListItem");
static_assert(sizeof(GeometryScriptLibrary_ListUtilityFunctions_SetScalarListItem) == 0x000028, "Wrong size on GeometryScriptLibrary_ListUtilityFunctions_SetScalarListItem");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_SetScalarListItem, ScalarList) == 0x000000, "Member 'GeometryScriptLibrary_ListUtilityFunctions_SetScalarListItem::ScalarList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_SetScalarListItem, Index_0) == 0x000010, "Member 'GeometryScriptLibrary_ListUtilityFunctions_SetScalarListItem::Index_0' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_SetScalarListItem, NewValue) == 0x000018, "Member 'GeometryScriptLibrary_ListUtilityFunctions_SetScalarListItem::NewValue' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_SetScalarListItem, bIsValidIndex) == 0x000020, "Member 'GeometryScriptLibrary_ListUtilityFunctions_SetScalarListItem::bIsValidIndex' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ListUtilityFunctions.SetUVListItem
// 0x0030 (0x0030 - 0x0000)
struct GeometryScriptLibrary_ListUtilityFunctions_SetUVListItem final
{
public:
	struct FGeometryScriptUVList                  UVList;                                            // 0x0000(0x0010)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              NewUV;                                             // 0x0018(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValidIndex;                                     // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_ListUtilityFunctions_SetUVListItem) == 0x000008, "Wrong alignment on GeometryScriptLibrary_ListUtilityFunctions_SetUVListItem");
static_assert(sizeof(GeometryScriptLibrary_ListUtilityFunctions_SetUVListItem) == 0x000030, "Wrong size on GeometryScriptLibrary_ListUtilityFunctions_SetUVListItem");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_SetUVListItem, UVList) == 0x000000, "Member 'GeometryScriptLibrary_ListUtilityFunctions_SetUVListItem::UVList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_SetUVListItem, Index_0) == 0x000010, "Member 'GeometryScriptLibrary_ListUtilityFunctions_SetUVListItem::Index_0' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_SetUVListItem, NewUV) == 0x000018, "Member 'GeometryScriptLibrary_ListUtilityFunctions_SetUVListItem::NewUV' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_SetUVListItem, bIsValidIndex) == 0x000028, "Member 'GeometryScriptLibrary_ListUtilityFunctions_SetUVListItem::bIsValidIndex' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_ListUtilityFunctions.SetVectorListItem
// 0x0038 (0x0038 - 0x0000)
struct GeometryScriptLibrary_ListUtilityFunctions_SetVectorListItem final
{
public:
	struct FGeometryScriptVectorList              VectorList;                                        // 0x0000(0x0010)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                NewValue;                                          // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValidIndex;                                     // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_ListUtilityFunctions_SetVectorListItem) == 0x000008, "Wrong alignment on GeometryScriptLibrary_ListUtilityFunctions_SetVectorListItem");
static_assert(sizeof(GeometryScriptLibrary_ListUtilityFunctions_SetVectorListItem) == 0x000038, "Wrong size on GeometryScriptLibrary_ListUtilityFunctions_SetVectorListItem");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_SetVectorListItem, VectorList) == 0x000000, "Member 'GeometryScriptLibrary_ListUtilityFunctions_SetVectorListItem::VectorList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_SetVectorListItem, Index_0) == 0x000010, "Member 'GeometryScriptLibrary_ListUtilityFunctions_SetVectorListItem::Index_0' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_SetVectorListItem, NewValue) == 0x000018, "Member 'GeometryScriptLibrary_ListUtilityFunctions_SetVectorListItem::NewValue' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_ListUtilityFunctions_SetVectorListItem, bIsValidIndex) == 0x000030, "Member 'GeometryScriptLibrary_ListUtilityFunctions_SetVectorListItem::bIsValidIndex' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_StaticMeshFunctions.CheckStaticMeshHasAvailableLOD
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_StaticMeshFunctions_CheckStaticMeshHasAvailableLOD final
{
public:
	class UStaticMesh*                            StaticMeshAsset;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshReadLOD             RequestedLOD;                                      // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EGeometryScriptSearchOutcomePins              Outcome;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_StaticMeshFunctions_CheckStaticMeshHasAvailableLOD) == 0x000008, "Wrong alignment on GeometryScriptLibrary_StaticMeshFunctions_CheckStaticMeshHasAvailableLOD");
static_assert(sizeof(GeometryScriptLibrary_StaticMeshFunctions_CheckStaticMeshHasAvailableLOD) == 0x000028, "Wrong size on GeometryScriptLibrary_StaticMeshFunctions_CheckStaticMeshHasAvailableLOD");
static_assert(offsetof(GeometryScriptLibrary_StaticMeshFunctions_CheckStaticMeshHasAvailableLOD, StaticMeshAsset) == 0x000000, "Member 'GeometryScriptLibrary_StaticMeshFunctions_CheckStaticMeshHasAvailableLOD::StaticMeshAsset' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_StaticMeshFunctions_CheckStaticMeshHasAvailableLOD, RequestedLOD) == 0x000008, "Member 'GeometryScriptLibrary_StaticMeshFunctions_CheckStaticMeshHasAvailableLOD::RequestedLOD' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_StaticMeshFunctions_CheckStaticMeshHasAvailableLOD, Outcome) == 0x000010, "Member 'GeometryScriptLibrary_StaticMeshFunctions_CheckStaticMeshHasAvailableLOD::Outcome' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_StaticMeshFunctions_CheckStaticMeshHasAvailableLOD, Debug) == 0x000018, "Member 'GeometryScriptLibrary_StaticMeshFunctions_CheckStaticMeshHasAvailableLOD::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_StaticMeshFunctions_CheckStaticMeshHasAvailableLOD, ReturnValue) == 0x000020, "Member 'GeometryScriptLibrary_StaticMeshFunctions_CheckStaticMeshHasAvailableLOD::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_StaticMeshFunctions.CopyMeshFromSkeletalMesh
// 0x0030 (0x0030 - 0x0000)
struct GeometryScriptLibrary_StaticMeshFunctions_CopyMeshFromSkeletalMesh final
{
public:
	class USkeletalMesh*                          FromSkeletalMeshAsset;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ToDynamicMesh;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptCopyMeshFromAssetOptions AssetOptions;                                      // 0x0010(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshReadLOD             RequestedLOD;                                      // 0x0014(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EGeometryScriptOutcomePins                    Outcome;                                           // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_StaticMeshFunctions_CopyMeshFromSkeletalMesh) == 0x000008, "Wrong alignment on GeometryScriptLibrary_StaticMeshFunctions_CopyMeshFromSkeletalMesh");
static_assert(sizeof(GeometryScriptLibrary_StaticMeshFunctions_CopyMeshFromSkeletalMesh) == 0x000030, "Wrong size on GeometryScriptLibrary_StaticMeshFunctions_CopyMeshFromSkeletalMesh");
static_assert(offsetof(GeometryScriptLibrary_StaticMeshFunctions_CopyMeshFromSkeletalMesh, FromSkeletalMeshAsset) == 0x000000, "Member 'GeometryScriptLibrary_StaticMeshFunctions_CopyMeshFromSkeletalMesh::FromSkeletalMeshAsset' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_StaticMeshFunctions_CopyMeshFromSkeletalMesh, ToDynamicMesh) == 0x000008, "Member 'GeometryScriptLibrary_StaticMeshFunctions_CopyMeshFromSkeletalMesh::ToDynamicMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_StaticMeshFunctions_CopyMeshFromSkeletalMesh, AssetOptions) == 0x000010, "Member 'GeometryScriptLibrary_StaticMeshFunctions_CopyMeshFromSkeletalMesh::AssetOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_StaticMeshFunctions_CopyMeshFromSkeletalMesh, RequestedLOD) == 0x000014, "Member 'GeometryScriptLibrary_StaticMeshFunctions_CopyMeshFromSkeletalMesh::RequestedLOD' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_StaticMeshFunctions_CopyMeshFromSkeletalMesh, Outcome) == 0x00001C, "Member 'GeometryScriptLibrary_StaticMeshFunctions_CopyMeshFromSkeletalMesh::Outcome' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_StaticMeshFunctions_CopyMeshFromSkeletalMesh, Debug) == 0x000020, "Member 'GeometryScriptLibrary_StaticMeshFunctions_CopyMeshFromSkeletalMesh::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_StaticMeshFunctions_CopyMeshFromSkeletalMesh, ReturnValue) == 0x000028, "Member 'GeometryScriptLibrary_StaticMeshFunctions_CopyMeshFromSkeletalMesh::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_StaticMeshFunctions.CopyMeshFromStaticMesh
// 0x0030 (0x0030 - 0x0000)
struct GeometryScriptLibrary_StaticMeshFunctions_CopyMeshFromStaticMesh final
{
public:
	class UStaticMesh*                            FromStaticMeshAsset;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ToDynamicMesh;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptCopyMeshFromAssetOptions AssetOptions;                                      // 0x0010(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshReadLOD             RequestedLOD;                                      // 0x0014(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EGeometryScriptOutcomePins                    Outcome;                                           // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_StaticMeshFunctions_CopyMeshFromStaticMesh) == 0x000008, "Wrong alignment on GeometryScriptLibrary_StaticMeshFunctions_CopyMeshFromStaticMesh");
static_assert(sizeof(GeometryScriptLibrary_StaticMeshFunctions_CopyMeshFromStaticMesh) == 0x000030, "Wrong size on GeometryScriptLibrary_StaticMeshFunctions_CopyMeshFromStaticMesh");
static_assert(offsetof(GeometryScriptLibrary_StaticMeshFunctions_CopyMeshFromStaticMesh, FromStaticMeshAsset) == 0x000000, "Member 'GeometryScriptLibrary_StaticMeshFunctions_CopyMeshFromStaticMesh::FromStaticMeshAsset' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_StaticMeshFunctions_CopyMeshFromStaticMesh, ToDynamicMesh) == 0x000008, "Member 'GeometryScriptLibrary_StaticMeshFunctions_CopyMeshFromStaticMesh::ToDynamicMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_StaticMeshFunctions_CopyMeshFromStaticMesh, AssetOptions) == 0x000010, "Member 'GeometryScriptLibrary_StaticMeshFunctions_CopyMeshFromStaticMesh::AssetOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_StaticMeshFunctions_CopyMeshFromStaticMesh, RequestedLOD) == 0x000014, "Member 'GeometryScriptLibrary_StaticMeshFunctions_CopyMeshFromStaticMesh::RequestedLOD' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_StaticMeshFunctions_CopyMeshFromStaticMesh, Outcome) == 0x00001C, "Member 'GeometryScriptLibrary_StaticMeshFunctions_CopyMeshFromStaticMesh::Outcome' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_StaticMeshFunctions_CopyMeshFromStaticMesh, Debug) == 0x000020, "Member 'GeometryScriptLibrary_StaticMeshFunctions_CopyMeshFromStaticMesh::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_StaticMeshFunctions_CopyMeshFromStaticMesh, ReturnValue) == 0x000028, "Member 'GeometryScriptLibrary_StaticMeshFunctions_CopyMeshFromStaticMesh::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_StaticMeshFunctions.CopyMeshToSkeletalMesh
// 0x00B0 (0x00B0 - 0x0000)
struct GeometryScriptLibrary_StaticMeshFunctions_CopyMeshToSkeletalMesh final
{
public:
	class UDynamicMesh*                           FromDynamicMesh;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          ToSkeletalMeshAsset;                               // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptCopyMeshToAssetOptions  Options;                                           // 0x0010(0x0080)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshWriteLOD            TargetLod;                                         // 0x0090(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EGeometryScriptOutcomePins                    Outcome;                                           // 0x0098(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x00A0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_StaticMeshFunctions_CopyMeshToSkeletalMesh) == 0x000008, "Wrong alignment on GeometryScriptLibrary_StaticMeshFunctions_CopyMeshToSkeletalMesh");
static_assert(sizeof(GeometryScriptLibrary_StaticMeshFunctions_CopyMeshToSkeletalMesh) == 0x0000B0, "Wrong size on GeometryScriptLibrary_StaticMeshFunctions_CopyMeshToSkeletalMesh");
static_assert(offsetof(GeometryScriptLibrary_StaticMeshFunctions_CopyMeshToSkeletalMesh, FromDynamicMesh) == 0x000000, "Member 'GeometryScriptLibrary_StaticMeshFunctions_CopyMeshToSkeletalMesh::FromDynamicMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_StaticMeshFunctions_CopyMeshToSkeletalMesh, ToSkeletalMeshAsset) == 0x000008, "Member 'GeometryScriptLibrary_StaticMeshFunctions_CopyMeshToSkeletalMesh::ToSkeletalMeshAsset' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_StaticMeshFunctions_CopyMeshToSkeletalMesh, Options) == 0x000010, "Member 'GeometryScriptLibrary_StaticMeshFunctions_CopyMeshToSkeletalMesh::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_StaticMeshFunctions_CopyMeshToSkeletalMesh, TargetLod) == 0x000090, "Member 'GeometryScriptLibrary_StaticMeshFunctions_CopyMeshToSkeletalMesh::TargetLod' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_StaticMeshFunctions_CopyMeshToSkeletalMesh, Outcome) == 0x000098, "Member 'GeometryScriptLibrary_StaticMeshFunctions_CopyMeshToSkeletalMesh::Outcome' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_StaticMeshFunctions_CopyMeshToSkeletalMesh, Debug) == 0x0000A0, "Member 'GeometryScriptLibrary_StaticMeshFunctions_CopyMeshToSkeletalMesh::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_StaticMeshFunctions_CopyMeshToSkeletalMesh, ReturnValue) == 0x0000A8, "Member 'GeometryScriptLibrary_StaticMeshFunctions_CopyMeshToSkeletalMesh::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_StaticMeshFunctions.CopyMeshToStaticMesh
// 0x00B0 (0x00B0 - 0x0000)
struct GeometryScriptLibrary_StaticMeshFunctions_CopyMeshToStaticMesh final
{
public:
	class UDynamicMesh*                           FromDynamicMesh;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            ToStaticMeshAsset;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptCopyMeshToAssetOptions  Options;                                           // 0x0010(0x0080)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshWriteLOD            TargetLod;                                         // 0x0090(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EGeometryScriptOutcomePins                    Outcome;                                           // 0x0098(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x00A0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_StaticMeshFunctions_CopyMeshToStaticMesh) == 0x000008, "Wrong alignment on GeometryScriptLibrary_StaticMeshFunctions_CopyMeshToStaticMesh");
static_assert(sizeof(GeometryScriptLibrary_StaticMeshFunctions_CopyMeshToStaticMesh) == 0x0000B0, "Wrong size on GeometryScriptLibrary_StaticMeshFunctions_CopyMeshToStaticMesh");
static_assert(offsetof(GeometryScriptLibrary_StaticMeshFunctions_CopyMeshToStaticMesh, FromDynamicMesh) == 0x000000, "Member 'GeometryScriptLibrary_StaticMeshFunctions_CopyMeshToStaticMesh::FromDynamicMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_StaticMeshFunctions_CopyMeshToStaticMesh, ToStaticMeshAsset) == 0x000008, "Member 'GeometryScriptLibrary_StaticMeshFunctions_CopyMeshToStaticMesh::ToStaticMeshAsset' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_StaticMeshFunctions_CopyMeshToStaticMesh, Options) == 0x000010, "Member 'GeometryScriptLibrary_StaticMeshFunctions_CopyMeshToStaticMesh::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_StaticMeshFunctions_CopyMeshToStaticMesh, TargetLod) == 0x000090, "Member 'GeometryScriptLibrary_StaticMeshFunctions_CopyMeshToStaticMesh::TargetLod' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_StaticMeshFunctions_CopyMeshToStaticMesh, Outcome) == 0x000098, "Member 'GeometryScriptLibrary_StaticMeshFunctions_CopyMeshToStaticMesh::Outcome' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_StaticMeshFunctions_CopyMeshToStaticMesh, Debug) == 0x0000A0, "Member 'GeometryScriptLibrary_StaticMeshFunctions_CopyMeshToStaticMesh::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_StaticMeshFunctions_CopyMeshToStaticMesh, ReturnValue) == 0x0000A8, "Member 'GeometryScriptLibrary_StaticMeshFunctions_CopyMeshToStaticMesh::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_StaticMeshFunctions.GetNumStaticMeshLODsOfType
// 0x0010 (0x0010 - 0x0000)
struct GeometryScriptLibrary_StaticMeshFunctions_GetNumStaticMeshLODsOfType final
{
public:
	class UStaticMesh*                            StaticMeshAsset;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptLODType                        LODType;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_StaticMeshFunctions_GetNumStaticMeshLODsOfType) == 0x000008, "Wrong alignment on GeometryScriptLibrary_StaticMeshFunctions_GetNumStaticMeshLODsOfType");
static_assert(sizeof(GeometryScriptLibrary_StaticMeshFunctions_GetNumStaticMeshLODsOfType) == 0x000010, "Wrong size on GeometryScriptLibrary_StaticMeshFunctions_GetNumStaticMeshLODsOfType");
static_assert(offsetof(GeometryScriptLibrary_StaticMeshFunctions_GetNumStaticMeshLODsOfType, StaticMeshAsset) == 0x000000, "Member 'GeometryScriptLibrary_StaticMeshFunctions_GetNumStaticMeshLODsOfType::StaticMeshAsset' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_StaticMeshFunctions_GetNumStaticMeshLODsOfType, LODType) == 0x000008, "Member 'GeometryScriptLibrary_StaticMeshFunctions_GetNumStaticMeshLODsOfType::LODType' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_StaticMeshFunctions_GetNumStaticMeshLODsOfType, ReturnValue) == 0x00000C, "Member 'GeometryScriptLibrary_StaticMeshFunctions_GetNumStaticMeshLODsOfType::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_StaticMeshFunctions.GetSectionMaterialListFromStaticMesh
// 0x0050 (0x0050 - 0x0000)
struct GeometryScriptLibrary_StaticMeshFunctions_GetSectionMaterialListFromStaticMesh final
{
public:
	class UStaticMesh*                            FromStaticMeshAsset;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshReadLOD             RequestedLOD;                                      // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             MaterialList;                                      // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 MaterialIndex;                                     // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           MaterialSlotNames;                                 // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	EGeometryScriptOutcomePins                    Outcome;                                           // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0048(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_StaticMeshFunctions_GetSectionMaterialListFromStaticMesh) == 0x000008, "Wrong alignment on GeometryScriptLibrary_StaticMeshFunctions_GetSectionMaterialListFromStaticMesh");
static_assert(sizeof(GeometryScriptLibrary_StaticMeshFunctions_GetSectionMaterialListFromStaticMesh) == 0x000050, "Wrong size on GeometryScriptLibrary_StaticMeshFunctions_GetSectionMaterialListFromStaticMesh");
static_assert(offsetof(GeometryScriptLibrary_StaticMeshFunctions_GetSectionMaterialListFromStaticMesh, FromStaticMeshAsset) == 0x000000, "Member 'GeometryScriptLibrary_StaticMeshFunctions_GetSectionMaterialListFromStaticMesh::FromStaticMeshAsset' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_StaticMeshFunctions_GetSectionMaterialListFromStaticMesh, RequestedLOD) == 0x000008, "Member 'GeometryScriptLibrary_StaticMeshFunctions_GetSectionMaterialListFromStaticMesh::RequestedLOD' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_StaticMeshFunctions_GetSectionMaterialListFromStaticMesh, MaterialList) == 0x000010, "Member 'GeometryScriptLibrary_StaticMeshFunctions_GetSectionMaterialListFromStaticMesh::MaterialList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_StaticMeshFunctions_GetSectionMaterialListFromStaticMesh, MaterialIndex) == 0x000020, "Member 'GeometryScriptLibrary_StaticMeshFunctions_GetSectionMaterialListFromStaticMesh::MaterialIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_StaticMeshFunctions_GetSectionMaterialListFromStaticMesh, MaterialSlotNames) == 0x000030, "Member 'GeometryScriptLibrary_StaticMeshFunctions_GetSectionMaterialListFromStaticMesh::MaterialSlotNames' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_StaticMeshFunctions_GetSectionMaterialListFromStaticMesh, Outcome) == 0x000040, "Member 'GeometryScriptLibrary_StaticMeshFunctions_GetSectionMaterialListFromStaticMesh::Outcome' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_StaticMeshFunctions_GetSectionMaterialListFromStaticMesh, Debug) == 0x000048, "Member 'GeometryScriptLibrary_StaticMeshFunctions_GetSectionMaterialListFromStaticMesh::Debug' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBakeFunctions.BakeTexture
// 0x0140 (0x0140 - 0x0000)
struct GeometryScriptLibrary_MeshBakeFunctions_BakeTexture final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TargetTransform;                                   // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptBakeTargetMeshOptions   TargetOptions;                                     // 0x0070(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           SourceMesh;                                        // 0x0078(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             SourceTransform;                                   // 0x0080(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptBakeSourceMeshOptions   SourceOptions;                                     // 0x00E0(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FGeometryScriptBakeTypeOptions> BakeTypes;                                         // 0x00F0(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometryScriptBakeTextureOptions      BakeOptions;                                       // 0x0100(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0120(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UTexture2D*>                     ReturnValue;                                       // 0x0128(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
	uint8                                         Pad_138[0x8];                                      // 0x0138(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshBakeFunctions_BakeTexture) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshBakeFunctions_BakeTexture");
static_assert(sizeof(GeometryScriptLibrary_MeshBakeFunctions_BakeTexture) == 0x000140, "Wrong size on GeometryScriptLibrary_MeshBakeFunctions_BakeTexture");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_BakeTexture, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshBakeFunctions_BakeTexture::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_BakeTexture, TargetTransform) == 0x000010, "Member 'GeometryScriptLibrary_MeshBakeFunctions_BakeTexture::TargetTransform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_BakeTexture, TargetOptions) == 0x000070, "Member 'GeometryScriptLibrary_MeshBakeFunctions_BakeTexture::TargetOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_BakeTexture, SourceMesh) == 0x000078, "Member 'GeometryScriptLibrary_MeshBakeFunctions_BakeTexture::SourceMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_BakeTexture, SourceTransform) == 0x000080, "Member 'GeometryScriptLibrary_MeshBakeFunctions_BakeTexture::SourceTransform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_BakeTexture, SourceOptions) == 0x0000E0, "Member 'GeometryScriptLibrary_MeshBakeFunctions_BakeTexture::SourceOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_BakeTexture, BakeTypes) == 0x0000F0, "Member 'GeometryScriptLibrary_MeshBakeFunctions_BakeTexture::BakeTypes' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_BakeTexture, BakeOptions) == 0x000100, "Member 'GeometryScriptLibrary_MeshBakeFunctions_BakeTexture::BakeOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_BakeTexture, Debug) == 0x000120, "Member 'GeometryScriptLibrary_MeshBakeFunctions_BakeTexture::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_BakeTexture, ReturnValue) == 0x000128, "Member 'GeometryScriptLibrary_MeshBakeFunctions_BakeTexture::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBakeFunctions.BakeTextureFromRenderCaptures
// 0x0160 (0x0160 - 0x0000)
struct GeometryScriptLibrary_MeshBakeFunctions_BakeTextureFromRenderCaptures final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TargetLocalToWorld;                                // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptBakeTargetMeshOptions   TargetOptions;                                     // 0x0070(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         SourceActors;                                      // 0x0078(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGeometryScriptBakeRenderCaptureOptions BakeOptions;                                       // 0x0088(0x0040)(Parm, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x00C8(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptRenderCaptureTextures   ReturnValue;                                       // 0x00D0(0x0090)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshBakeFunctions_BakeTextureFromRenderCaptures) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshBakeFunctions_BakeTextureFromRenderCaptures");
static_assert(sizeof(GeometryScriptLibrary_MeshBakeFunctions_BakeTextureFromRenderCaptures) == 0x000160, "Wrong size on GeometryScriptLibrary_MeshBakeFunctions_BakeTextureFromRenderCaptures");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_BakeTextureFromRenderCaptures, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshBakeFunctions_BakeTextureFromRenderCaptures::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_BakeTextureFromRenderCaptures, TargetLocalToWorld) == 0x000010, "Member 'GeometryScriptLibrary_MeshBakeFunctions_BakeTextureFromRenderCaptures::TargetLocalToWorld' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_BakeTextureFromRenderCaptures, TargetOptions) == 0x000070, "Member 'GeometryScriptLibrary_MeshBakeFunctions_BakeTextureFromRenderCaptures::TargetOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_BakeTextureFromRenderCaptures, SourceActors) == 0x000078, "Member 'GeometryScriptLibrary_MeshBakeFunctions_BakeTextureFromRenderCaptures::SourceActors' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_BakeTextureFromRenderCaptures, BakeOptions) == 0x000088, "Member 'GeometryScriptLibrary_MeshBakeFunctions_BakeTextureFromRenderCaptures::BakeOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_BakeTextureFromRenderCaptures, Debug) == 0x0000C8, "Member 'GeometryScriptLibrary_MeshBakeFunctions_BakeTextureFromRenderCaptures::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_BakeTextureFromRenderCaptures, ReturnValue) == 0x0000D0, "Member 'GeometryScriptLibrary_MeshBakeFunctions_BakeTextureFromRenderCaptures::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBakeFunctions.BakeVertex
// 0x0190 (0x0190 - 0x0000)
struct GeometryScriptLibrary_MeshBakeFunctions_BakeVertex final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TargetTransform;                                   // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptBakeTargetMeshOptions   TargetOptions;                                     // 0x0070(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           SourceMesh;                                        // 0x0078(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             SourceTransform;                                   // 0x0080(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptBakeSourceMeshOptions   SourceOptions;                                     // 0x00E0(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FGeometryScriptBakeOutputType          BakeTypes;                                         // 0x00F0(0x0080)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptBakeVertexOptions       BakeOptions;                                       // 0x0170(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_17C[0x4];                                      // 0x017C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0180(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0188(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshBakeFunctions_BakeVertex) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshBakeFunctions_BakeVertex");
static_assert(sizeof(GeometryScriptLibrary_MeshBakeFunctions_BakeVertex) == 0x000190, "Wrong size on GeometryScriptLibrary_MeshBakeFunctions_BakeVertex");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_BakeVertex, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshBakeFunctions_BakeVertex::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_BakeVertex, TargetTransform) == 0x000010, "Member 'GeometryScriptLibrary_MeshBakeFunctions_BakeVertex::TargetTransform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_BakeVertex, TargetOptions) == 0x000070, "Member 'GeometryScriptLibrary_MeshBakeFunctions_BakeVertex::TargetOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_BakeVertex, SourceMesh) == 0x000078, "Member 'GeometryScriptLibrary_MeshBakeFunctions_BakeVertex::SourceMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_BakeVertex, SourceTransform) == 0x000080, "Member 'GeometryScriptLibrary_MeshBakeFunctions_BakeVertex::SourceTransform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_BakeVertex, SourceOptions) == 0x0000E0, "Member 'GeometryScriptLibrary_MeshBakeFunctions_BakeVertex::SourceOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_BakeVertex, BakeTypes) == 0x0000F0, "Member 'GeometryScriptLibrary_MeshBakeFunctions_BakeVertex::BakeTypes' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_BakeVertex, BakeOptions) == 0x000170, "Member 'GeometryScriptLibrary_MeshBakeFunctions_BakeVertex::BakeOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_BakeVertex, Debug) == 0x000180, "Member 'GeometryScriptLibrary_MeshBakeFunctions_BakeVertex::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_BakeVertex, ReturnValue) == 0x000188, "Member 'GeometryScriptLibrary_MeshBakeFunctions_BakeVertex::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBakeFunctions.ConvertBakeResolutionToInt
// 0x0008 (0x0008 - 0x0000)
struct GeometryScriptLibrary_MeshBakeFunctions_ConvertBakeResolutionToInt final
{
public:
	EGeometryScriptBakeResolution                 BakeResolution;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshBakeFunctions_ConvertBakeResolutionToInt) == 0x000004, "Wrong alignment on GeometryScriptLibrary_MeshBakeFunctions_ConvertBakeResolutionToInt");
static_assert(sizeof(GeometryScriptLibrary_MeshBakeFunctions_ConvertBakeResolutionToInt) == 0x000008, "Wrong size on GeometryScriptLibrary_MeshBakeFunctions_ConvertBakeResolutionToInt");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_ConvertBakeResolutionToInt, BakeResolution) == 0x000000, "Member 'GeometryScriptLibrary_MeshBakeFunctions_ConvertBakeResolutionToInt::BakeResolution' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_ConvertBakeResolutionToInt, ReturnValue) == 0x000004, "Member 'GeometryScriptLibrary_MeshBakeFunctions_ConvertBakeResolutionToInt::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBakeFunctions.MakeBakeTypeAmbientOcclusion
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeAmbientOcclusion final
{
public:
	int32                                         OcclusionRays;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistance;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpreadAngle;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BiasAngle;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptBakeTypeOptions         ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeAmbientOcclusion) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeAmbientOcclusion");
static_assert(sizeof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeAmbientOcclusion) == 0x000028, "Wrong size on GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeAmbientOcclusion");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeAmbientOcclusion, OcclusionRays) == 0x000000, "Member 'GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeAmbientOcclusion::OcclusionRays' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeAmbientOcclusion, MaxDistance) == 0x000004, "Member 'GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeAmbientOcclusion::MaxDistance' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeAmbientOcclusion, SpreadAngle) == 0x000008, "Member 'GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeAmbientOcclusion::SpreadAngle' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeAmbientOcclusion, BiasAngle) == 0x00000C, "Member 'GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeAmbientOcclusion::BiasAngle' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeAmbientOcclusion, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeAmbientOcclusion::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBakeFunctions.MakeBakeTypeBentNormal
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeBentNormal final
{
public:
	int32                                         OcclusionRays;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistance;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpreadAngle;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptBakeTypeOptions         ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeBentNormal) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeBentNormal");
static_assert(sizeof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeBentNormal) == 0x000028, "Wrong size on GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeBentNormal");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeBentNormal, OcclusionRays) == 0x000000, "Member 'GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeBentNormal::OcclusionRays' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeBentNormal, MaxDistance) == 0x000004, "Member 'GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeBentNormal::MaxDistance' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeBentNormal, SpreadAngle) == 0x000008, "Member 'GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeBentNormal::SpreadAngle' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeBentNormal, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeBentNormal::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBakeFunctions.MakeBakeTypeConstant
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeConstant final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptBakeTypeOptions         ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeConstant) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeConstant");
static_assert(sizeof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeConstant) == 0x000020, "Wrong size on GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeConstant");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeConstant, Value) == 0x000000, "Member 'GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeConstant::Value' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeConstant, ReturnValue) == 0x000008, "Member 'GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeConstant::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBakeFunctions.MakeBakeTypeCurvature
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeCurvature final
{
public:
	EGeometryScriptBakeCurvatureTypeMode          CurvatureType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptBakeCurvatureColorMode         ColorMapping;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ColorRangeMultiplier;                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinRangeMultiplier;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptBakeCurvatureClampMode         Clamping;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptBakeTypeOptions         ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeCurvature) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeCurvature");
static_assert(sizeof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeCurvature) == 0x000028, "Wrong size on GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeCurvature");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeCurvature, CurvatureType) == 0x000000, "Member 'GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeCurvature::CurvatureType' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeCurvature, ColorMapping) == 0x000001, "Member 'GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeCurvature::ColorMapping' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeCurvature, ColorRangeMultiplier) == 0x000004, "Member 'GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeCurvature::ColorRangeMultiplier' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeCurvature, MinRangeMultiplier) == 0x000008, "Member 'GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeCurvature::MinRangeMultiplier' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeCurvature, Clamping) == 0x00000C, "Member 'GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeCurvature::Clamping' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeCurvature, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeCurvature::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBakeFunctions.MakeBakeTypeFaceNormal
// 0x0018 (0x0018 - 0x0000)
struct GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeFaceNormal final
{
public:
	struct FGeometryScriptBakeTypeOptions         ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeFaceNormal) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeFaceNormal");
static_assert(sizeof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeFaceNormal) == 0x000018, "Wrong size on GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeFaceNormal");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeFaceNormal, ReturnValue) == 0x000000, "Member 'GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeFaceNormal::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBakeFunctions.MakeBakeTypeMaterialID
// 0x0018 (0x0018 - 0x0000)
struct GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeMaterialID final
{
public:
	struct FGeometryScriptBakeTypeOptions         ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeMaterialID) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeMaterialID");
static_assert(sizeof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeMaterialID) == 0x000018, "Wrong size on GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeMaterialID");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeMaterialID, ReturnValue) == 0x000000, "Member 'GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeMaterialID::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBakeFunctions.MakeBakeTypeMultiTexture
// 0x0030 (0x0030 - 0x0000)
struct GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeMultiTexture final
{
public:
	TArray<class UTexture2D*>                     MaterialIDSourceTextures;                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         SourceUVLayer;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptBakeTypeOptions         ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeMultiTexture) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeMultiTexture");
static_assert(sizeof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeMultiTexture) == 0x000030, "Wrong size on GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeMultiTexture");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeMultiTexture, MaterialIDSourceTextures) == 0x000000, "Member 'GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeMultiTexture::MaterialIDSourceTextures' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeMultiTexture, SourceUVLayer) == 0x000010, "Member 'GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeMultiTexture::SourceUVLayer' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeMultiTexture, ReturnValue) == 0x000018, "Member 'GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeMultiTexture::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBakeFunctions.MakeBakeTypeObjectNormal
// 0x0018 (0x0018 - 0x0000)
struct GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeObjectNormal final
{
public:
	struct FGeometryScriptBakeTypeOptions         ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeObjectNormal) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeObjectNormal");
static_assert(sizeof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeObjectNormal) == 0x000018, "Wrong size on GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeObjectNormal");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeObjectNormal, ReturnValue) == 0x000000, "Member 'GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeObjectNormal::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBakeFunctions.MakeBakeTypePosition
// 0x0018 (0x0018 - 0x0000)
struct GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypePosition final
{
public:
	struct FGeometryScriptBakeTypeOptions         ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypePosition) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypePosition");
static_assert(sizeof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypePosition) == 0x000018, "Wrong size on GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypePosition");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypePosition, ReturnValue) == 0x000000, "Member 'GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypePosition::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBakeFunctions.MakeBakeTypeTangentNormal
// 0x0018 (0x0018 - 0x0000)
struct GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeTangentNormal final
{
public:
	struct FGeometryScriptBakeTypeOptions         ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeTangentNormal) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeTangentNormal");
static_assert(sizeof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeTangentNormal) == 0x000018, "Wrong size on GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeTangentNormal");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeTangentNormal, ReturnValue) == 0x000000, "Member 'GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeTangentNormal::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBakeFunctions.MakeBakeTypeTexture
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeTexture final
{
public:
	class UTexture2D*                             SourceTexture;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SourceUVLayer;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptBakeTypeOptions         ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeTexture) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeTexture");
static_assert(sizeof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeTexture) == 0x000028, "Wrong size on GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeTexture");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeTexture, SourceTexture) == 0x000000, "Member 'GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeTexture::SourceTexture' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeTexture, SourceUVLayer) == 0x000008, "Member 'GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeTexture::SourceUVLayer' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeTexture, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeTexture::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBakeFunctions.MakeBakeTypeVertexColor
// 0x0018 (0x0018 - 0x0000)
struct GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeVertexColor final
{
public:
	struct FGeometryScriptBakeTypeOptions         ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeVertexColor) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeVertexColor");
static_assert(sizeof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeVertexColor) == 0x000018, "Wrong size on GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeVertexColor");
static_assert(offsetof(GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeVertexColor, ReturnValue) == 0x000000, "Member 'GeometryScriptLibrary_MeshBakeFunctions_MakeBakeTypeVertexColor::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBasicEditFunctions.AddTrianglesToMesh
// 0x0048 (0x0048 - 0x0000)
struct GeometryScriptLibrary_MeshBasicEditFunctions_AddTrianglesToMesh final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptTriangleList            NewTrianglesList;                                  // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptIndexList               NewIndicesList;                                    // 0x0018(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	int32                                         NewTriangleGroupID;                                // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeferChangeNotifications;                         // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshBasicEditFunctions_AddTrianglesToMesh) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshBasicEditFunctions_AddTrianglesToMesh");
static_assert(sizeof(GeometryScriptLibrary_MeshBasicEditFunctions_AddTrianglesToMesh) == 0x000048, "Wrong size on GeometryScriptLibrary_MeshBasicEditFunctions_AddTrianglesToMesh");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AddTrianglesToMesh, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AddTrianglesToMesh::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AddTrianglesToMesh, NewTrianglesList) == 0x000008, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AddTrianglesToMesh::NewTrianglesList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AddTrianglesToMesh, NewIndicesList) == 0x000018, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AddTrianglesToMesh::NewIndicesList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AddTrianglesToMesh, NewTriangleGroupID) == 0x000030, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AddTrianglesToMesh::NewTriangleGroupID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AddTrianglesToMesh, bDeferChangeNotifications) == 0x000034, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AddTrianglesToMesh::bDeferChangeNotifications' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AddTrianglesToMesh, Debug) == 0x000038, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AddTrianglesToMesh::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AddTrianglesToMesh, ReturnValue) == 0x000040, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AddTrianglesToMesh::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBasicEditFunctions.AddTriangleToMesh
// 0x0030 (0x0030 - 0x0000)
struct GeometryScriptLibrary_MeshBasicEditFunctions_AddTriangleToMesh final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             NewTriangle;                                       // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewTriangleIndex;                                  // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewTriangleGroupID;                                // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeferChangeNotifications;                         // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshBasicEditFunctions_AddTriangleToMesh) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshBasicEditFunctions_AddTriangleToMesh");
static_assert(sizeof(GeometryScriptLibrary_MeshBasicEditFunctions_AddTriangleToMesh) == 0x000030, "Wrong size on GeometryScriptLibrary_MeshBasicEditFunctions_AddTriangleToMesh");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AddTriangleToMesh, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AddTriangleToMesh::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AddTriangleToMesh, NewTriangle) == 0x000008, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AddTriangleToMesh::NewTriangle' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AddTriangleToMesh, NewTriangleIndex) == 0x000014, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AddTriangleToMesh::NewTriangleIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AddTriangleToMesh, NewTriangleGroupID) == 0x000018, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AddTriangleToMesh::NewTriangleGroupID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AddTriangleToMesh, bDeferChangeNotifications) == 0x00001C, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AddTriangleToMesh::bDeferChangeNotifications' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AddTriangleToMesh, Debug) == 0x000020, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AddTriangleToMesh::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AddTriangleToMesh, ReturnValue) == 0x000028, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AddTriangleToMesh::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBasicEditFunctions.AddVertexToMesh
// 0x0030 (0x0030 - 0x0000)
struct GeometryScriptLibrary_MeshBasicEditFunctions_AddVertexToMesh final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NewPosition;                                       // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewVertexIndex;                                    // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeferChangeNotifications;                         // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshBasicEditFunctions_AddVertexToMesh) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshBasicEditFunctions_AddVertexToMesh");
static_assert(sizeof(GeometryScriptLibrary_MeshBasicEditFunctions_AddVertexToMesh) == 0x000030, "Wrong size on GeometryScriptLibrary_MeshBasicEditFunctions_AddVertexToMesh");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AddVertexToMesh, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AddVertexToMesh::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AddVertexToMesh, NewPosition) == 0x000008, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AddVertexToMesh::NewPosition' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AddVertexToMesh, NewVertexIndex) == 0x000020, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AddVertexToMesh::NewVertexIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AddVertexToMesh, bDeferChangeNotifications) == 0x000024, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AddVertexToMesh::bDeferChangeNotifications' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AddVertexToMesh, ReturnValue) == 0x000028, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AddVertexToMesh::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBasicEditFunctions.AddVerticesToMesh
// 0x0040 (0x0040 - 0x0000)
struct GeometryScriptLibrary_MeshBasicEditFunctions_AddVerticesToMesh final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptVectorList              NewPositionsList;                                  // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptIndexList               NewIndicesList;                                    // 0x0018(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          bDeferChangeNotifications;                         // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshBasicEditFunctions_AddVerticesToMesh) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshBasicEditFunctions_AddVerticesToMesh");
static_assert(sizeof(GeometryScriptLibrary_MeshBasicEditFunctions_AddVerticesToMesh) == 0x000040, "Wrong size on GeometryScriptLibrary_MeshBasicEditFunctions_AddVerticesToMesh");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AddVerticesToMesh, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AddVerticesToMesh::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AddVerticesToMesh, NewPositionsList) == 0x000008, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AddVerticesToMesh::NewPositionsList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AddVerticesToMesh, NewIndicesList) == 0x000018, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AddVerticesToMesh::NewIndicesList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AddVerticesToMesh, bDeferChangeNotifications) == 0x000030, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AddVerticesToMesh::bDeferChangeNotifications' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AddVerticesToMesh, ReturnValue) == 0x000038, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AddVerticesToMesh::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBasicEditFunctions.AppendBuffersToMesh
// 0x0108 (0x0108 - 0x0000)
struct GeometryScriptLibrary_MeshBasicEditFunctions_AppendBuffersToMesh final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptSimpleMeshBuffers       Buffers;                                           // 0x0008(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometryScriptIndexList               NewTriangleIndicesList;                            // 0x00D8(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	int32                                         MaterialID;                                        // 0x00F0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeferChangeNotifications;                         // 0x00F4(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F5[0x3];                                       // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x00F8(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0100(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshBasicEditFunctions_AppendBuffersToMesh) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshBasicEditFunctions_AppendBuffersToMesh");
static_assert(sizeof(GeometryScriptLibrary_MeshBasicEditFunctions_AppendBuffersToMesh) == 0x000108, "Wrong size on GeometryScriptLibrary_MeshBasicEditFunctions_AppendBuffersToMesh");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AppendBuffersToMesh, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AppendBuffersToMesh::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AppendBuffersToMesh, Buffers) == 0x000008, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AppendBuffersToMesh::Buffers' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AppendBuffersToMesh, NewTriangleIndicesList) == 0x0000D8, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AppendBuffersToMesh::NewTriangleIndicesList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AppendBuffersToMesh, MaterialID) == 0x0000F0, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AppendBuffersToMesh::MaterialID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AppendBuffersToMesh, bDeferChangeNotifications) == 0x0000F4, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AppendBuffersToMesh::bDeferChangeNotifications' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AppendBuffersToMesh, Debug) == 0x0000F8, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AppendBuffersToMesh::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AppendBuffersToMesh, ReturnValue) == 0x000100, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AppendBuffersToMesh::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBasicEditFunctions.AppendMesh
// 0x0090 (0x0090 - 0x0000)
struct GeometryScriptLibrary_MeshBasicEditFunctions_AppendMesh final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           AppendMesh_0;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             AppendTransform;                                   // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeferChangeNotifications;                         // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptAppendMeshOptions       AppendOptions;                                     // 0x0071(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0078(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0080(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshBasicEditFunctions_AppendMesh) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshBasicEditFunctions_AppendMesh");
static_assert(sizeof(GeometryScriptLibrary_MeshBasicEditFunctions_AppendMesh) == 0x000090, "Wrong size on GeometryScriptLibrary_MeshBasicEditFunctions_AppendMesh");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AppendMesh, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AppendMesh::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AppendMesh, AppendMesh_0) == 0x000008, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AppendMesh::AppendMesh_0' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AppendMesh, AppendTransform) == 0x000010, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AppendMesh::AppendTransform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AppendMesh, bDeferChangeNotifications) == 0x000070, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AppendMesh::bDeferChangeNotifications' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AppendMesh, AppendOptions) == 0x000071, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AppendMesh::AppendOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AppendMesh, Debug) == 0x000078, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AppendMesh::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AppendMesh, ReturnValue) == 0x000080, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AppendMesh::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBasicEditFunctions.AppendMeshRepeated
// 0x0090 (0x0090 - 0x0000)
struct GeometryScriptLibrary_MeshBasicEditFunctions_AppendMeshRepeated final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           AppendMesh;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             AppendTransform;                                   // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RepeatCount;                                       // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyTransformToFirstInstance;                    // 0x0074(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeferChangeNotifications;                         // 0x0075(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptAppendMeshOptions       AppendOptions;                                     // 0x0076(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_77[0x1];                                       // 0x0077(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0078(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0080(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshBasicEditFunctions_AppendMeshRepeated) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshBasicEditFunctions_AppendMeshRepeated");
static_assert(sizeof(GeometryScriptLibrary_MeshBasicEditFunctions_AppendMeshRepeated) == 0x000090, "Wrong size on GeometryScriptLibrary_MeshBasicEditFunctions_AppendMeshRepeated");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AppendMeshRepeated, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AppendMeshRepeated::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AppendMeshRepeated, AppendMesh) == 0x000008, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AppendMeshRepeated::AppendMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AppendMeshRepeated, AppendTransform) == 0x000010, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AppendMeshRepeated::AppendTransform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AppendMeshRepeated, RepeatCount) == 0x000070, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AppendMeshRepeated::RepeatCount' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AppendMeshRepeated, bApplyTransformToFirstInstance) == 0x000074, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AppendMeshRepeated::bApplyTransformToFirstInstance' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AppendMeshRepeated, bDeferChangeNotifications) == 0x000075, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AppendMeshRepeated::bDeferChangeNotifications' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AppendMeshRepeated, AppendOptions) == 0x000076, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AppendMeshRepeated::AppendOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AppendMeshRepeated, Debug) == 0x000078, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AppendMeshRepeated::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AppendMeshRepeated, ReturnValue) == 0x000080, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AppendMeshRepeated::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBasicEditFunctions.AppendMeshTransformed
// 0x00A0 (0x00A0 - 0x0000)
struct GeometryScriptLibrary_MeshBasicEditFunctions_AppendMeshTransformed final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           AppendMesh;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     AppendTransforms;                                  // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FTransform                             ConstantTransform;                                 // 0x0020(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConstantTransformIsRelative;                      // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeferChangeNotifications;                         // 0x0081(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptAppendMeshOptions       AppendOptions;                                     // 0x0082(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_83[0x5];                                       // 0x0083(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0088(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshBasicEditFunctions_AppendMeshTransformed) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshBasicEditFunctions_AppendMeshTransformed");
static_assert(sizeof(GeometryScriptLibrary_MeshBasicEditFunctions_AppendMeshTransformed) == 0x0000A0, "Wrong size on GeometryScriptLibrary_MeshBasicEditFunctions_AppendMeshTransformed");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AppendMeshTransformed, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AppendMeshTransformed::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AppendMeshTransformed, AppendMesh) == 0x000008, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AppendMeshTransformed::AppendMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AppendMeshTransformed, AppendTransforms) == 0x000010, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AppendMeshTransformed::AppendTransforms' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AppendMeshTransformed, ConstantTransform) == 0x000020, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AppendMeshTransformed::ConstantTransform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AppendMeshTransformed, bConstantTransformIsRelative) == 0x000080, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AppendMeshTransformed::bConstantTransformIsRelative' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AppendMeshTransformed, bDeferChangeNotifications) == 0x000081, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AppendMeshTransformed::bDeferChangeNotifications' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AppendMeshTransformed, AppendOptions) == 0x000082, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AppendMeshTransformed::AppendOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AppendMeshTransformed, Debug) == 0x000088, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AppendMeshTransformed::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_AppendMeshTransformed, ReturnValue) == 0x000090, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_AppendMeshTransformed::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBasicEditFunctions.DeleteSelectedTrianglesFromMesh
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_MeshBasicEditFunctions_DeleteSelectedTrianglesFromMesh final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	int32                                         NumDeleted;                                        // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeferChangeNotifications;                         // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshBasicEditFunctions_DeleteSelectedTrianglesFromMesh) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshBasicEditFunctions_DeleteSelectedTrianglesFromMesh");
static_assert(sizeof(GeometryScriptLibrary_MeshBasicEditFunctions_DeleteSelectedTrianglesFromMesh) == 0x000028, "Wrong size on GeometryScriptLibrary_MeshBasicEditFunctions_DeleteSelectedTrianglesFromMesh");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_DeleteSelectedTrianglesFromMesh, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_DeleteSelectedTrianglesFromMesh::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_DeleteSelectedTrianglesFromMesh, Selection) == 0x000008, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_DeleteSelectedTrianglesFromMesh::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_DeleteSelectedTrianglesFromMesh, NumDeleted) == 0x000018, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_DeleteSelectedTrianglesFromMesh::NumDeleted' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_DeleteSelectedTrianglesFromMesh, bDeferChangeNotifications) == 0x00001C, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_DeleteSelectedTrianglesFromMesh::bDeferChangeNotifications' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_DeleteSelectedTrianglesFromMesh, ReturnValue) == 0x000020, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_DeleteSelectedTrianglesFromMesh::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBasicEditFunctions.DeleteTriangleFromMesh
// 0x0018 (0x0018 - 0x0000)
struct GeometryScriptLibrary_MeshBasicEditFunctions_DeleteTriangleFromMesh final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TriangleID;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasTriangleDeleted;                               // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeferChangeNotifications;                         // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshBasicEditFunctions_DeleteTriangleFromMesh) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshBasicEditFunctions_DeleteTriangleFromMesh");
static_assert(sizeof(GeometryScriptLibrary_MeshBasicEditFunctions_DeleteTriangleFromMesh) == 0x000018, "Wrong size on GeometryScriptLibrary_MeshBasicEditFunctions_DeleteTriangleFromMesh");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_DeleteTriangleFromMesh, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_DeleteTriangleFromMesh::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_DeleteTriangleFromMesh, TriangleID) == 0x000008, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_DeleteTriangleFromMesh::TriangleID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_DeleteTriangleFromMesh, bWasTriangleDeleted) == 0x00000C, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_DeleteTriangleFromMesh::bWasTriangleDeleted' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_DeleteTriangleFromMesh, bDeferChangeNotifications) == 0x00000D, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_DeleteTriangleFromMesh::bDeferChangeNotifications' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_DeleteTriangleFromMesh, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_DeleteTriangleFromMesh::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBasicEditFunctions.DeleteTrianglesFromMesh
// 0x0030 (0x0030 - 0x0000)
struct GeometryScriptLibrary_MeshBasicEditFunctions_DeleteTrianglesFromMesh final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptIndexList               TriangleList;                                      // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	int32                                         NumDeleted;                                        // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeferChangeNotifications;                         // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshBasicEditFunctions_DeleteTrianglesFromMesh) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshBasicEditFunctions_DeleteTrianglesFromMesh");
static_assert(sizeof(GeometryScriptLibrary_MeshBasicEditFunctions_DeleteTrianglesFromMesh) == 0x000030, "Wrong size on GeometryScriptLibrary_MeshBasicEditFunctions_DeleteTrianglesFromMesh");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_DeleteTrianglesFromMesh, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_DeleteTrianglesFromMesh::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_DeleteTrianglesFromMesh, TriangleList) == 0x000008, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_DeleteTrianglesFromMesh::TriangleList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_DeleteTrianglesFromMesh, NumDeleted) == 0x000020, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_DeleteTrianglesFromMesh::NumDeleted' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_DeleteTrianglesFromMesh, bDeferChangeNotifications) == 0x000024, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_DeleteTrianglesFromMesh::bDeferChangeNotifications' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_DeleteTrianglesFromMesh, ReturnValue) == 0x000028, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_DeleteTrianglesFromMesh::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBasicEditFunctions.DeleteVertexFromMesh
// 0x0018 (0x0018 - 0x0000)
struct GeometryScriptLibrary_MeshBasicEditFunctions_DeleteVertexFromMesh final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VertexID;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasVertexDeleted;                                 // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeferChangeNotifications;                         // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshBasicEditFunctions_DeleteVertexFromMesh) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshBasicEditFunctions_DeleteVertexFromMesh");
static_assert(sizeof(GeometryScriptLibrary_MeshBasicEditFunctions_DeleteVertexFromMesh) == 0x000018, "Wrong size on GeometryScriptLibrary_MeshBasicEditFunctions_DeleteVertexFromMesh");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_DeleteVertexFromMesh, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_DeleteVertexFromMesh::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_DeleteVertexFromMesh, VertexID) == 0x000008, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_DeleteVertexFromMesh::VertexID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_DeleteVertexFromMesh, bWasVertexDeleted) == 0x00000C, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_DeleteVertexFromMesh::bWasVertexDeleted' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_DeleteVertexFromMesh, bDeferChangeNotifications) == 0x00000D, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_DeleteVertexFromMesh::bDeferChangeNotifications' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_DeleteVertexFromMesh, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_DeleteVertexFromMesh::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBasicEditFunctions.DeleteVerticesFromMesh
// 0x0030 (0x0030 - 0x0000)
struct GeometryScriptLibrary_MeshBasicEditFunctions_DeleteVerticesFromMesh final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptIndexList               VertexList;                                        // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	int32                                         NumDeleted;                                        // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeferChangeNotifications;                         // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshBasicEditFunctions_DeleteVerticesFromMesh) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshBasicEditFunctions_DeleteVerticesFromMesh");
static_assert(sizeof(GeometryScriptLibrary_MeshBasicEditFunctions_DeleteVerticesFromMesh) == 0x000030, "Wrong size on GeometryScriptLibrary_MeshBasicEditFunctions_DeleteVerticesFromMesh");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_DeleteVerticesFromMesh, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_DeleteVerticesFromMesh::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_DeleteVerticesFromMesh, VertexList) == 0x000008, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_DeleteVerticesFromMesh::VertexList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_DeleteVerticesFromMesh, NumDeleted) == 0x000020, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_DeleteVerticesFromMesh::NumDeleted' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_DeleteVerticesFromMesh, bDeferChangeNotifications) == 0x000024, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_DeleteVerticesFromMesh::bDeferChangeNotifications' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_DeleteVerticesFromMesh, ReturnValue) == 0x000028, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_DeleteVerticesFromMesh::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBasicEditFunctions.DiscardMeshAttributes
// 0x0018 (0x0018 - 0x0000)
struct GeometryScriptLibrary_MeshBasicEditFunctions_DiscardMeshAttributes final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeferChangeNotifications;                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshBasicEditFunctions_DiscardMeshAttributes) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshBasicEditFunctions_DiscardMeshAttributes");
static_assert(sizeof(GeometryScriptLibrary_MeshBasicEditFunctions_DiscardMeshAttributes) == 0x000018, "Wrong size on GeometryScriptLibrary_MeshBasicEditFunctions_DiscardMeshAttributes");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_DiscardMeshAttributes, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_DiscardMeshAttributes::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_DiscardMeshAttributes, bDeferChangeNotifications) == 0x000008, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_DiscardMeshAttributes::bDeferChangeNotifications' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_DiscardMeshAttributes, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_DiscardMeshAttributes::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBasicEditFunctions.SetAllMeshVertexPositions
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_MeshBasicEditFunctions_SetAllMeshVertexPositions final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptVectorList              PositionList;                                      // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshBasicEditFunctions_SetAllMeshVertexPositions) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshBasicEditFunctions_SetAllMeshVertexPositions");
static_assert(sizeof(GeometryScriptLibrary_MeshBasicEditFunctions_SetAllMeshVertexPositions) == 0x000028, "Wrong size on GeometryScriptLibrary_MeshBasicEditFunctions_SetAllMeshVertexPositions");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_SetAllMeshVertexPositions, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_SetAllMeshVertexPositions::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_SetAllMeshVertexPositions, PositionList) == 0x000008, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_SetAllMeshVertexPositions::PositionList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_SetAllMeshVertexPositions, Debug) == 0x000018, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_SetAllMeshVertexPositions::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_SetAllMeshVertexPositions, ReturnValue) == 0x000020, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_SetAllMeshVertexPositions::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBasicEditFunctions.SetVertexPosition
// 0x0038 (0x0038 - 0x0000)
struct GeometryScriptLibrary_MeshBasicEditFunctions_SetVertexPosition final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VertexID;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                NewPosition;                                       // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValidVertex;                                    // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeferChangeNotifications;                         // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshBasicEditFunctions_SetVertexPosition) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshBasicEditFunctions_SetVertexPosition");
static_assert(sizeof(GeometryScriptLibrary_MeshBasicEditFunctions_SetVertexPosition) == 0x000038, "Wrong size on GeometryScriptLibrary_MeshBasicEditFunctions_SetVertexPosition");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_SetVertexPosition, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_SetVertexPosition::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_SetVertexPosition, VertexID) == 0x000008, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_SetVertexPosition::VertexID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_SetVertexPosition, NewPosition) == 0x000010, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_SetVertexPosition::NewPosition' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_SetVertexPosition, bIsValidVertex) == 0x000028, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_SetVertexPosition::bIsValidVertex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_SetVertexPosition, bDeferChangeNotifications) == 0x000029, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_SetVertexPosition::bDeferChangeNotifications' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBasicEditFunctions_SetVertexPosition, ReturnValue) == 0x000030, "Member 'GeometryScriptLibrary_MeshBasicEditFunctions_SetVertexPosition::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBoneWeightFunctions.ComputeSmoothBoneWeights
// 0x0038 (0x0038 - 0x0000)
struct GeometryScriptLibrary_MeshBoneWeightFunctions_ComputeSmoothBoneWeights final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeleton*                              Skeleton;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptSmoothBoneWeightsOptions Options;                                           // 0x0010(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FGeometryScriptBoneWeightProfile       Profile;                                           // 0x0020(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshBoneWeightFunctions_ComputeSmoothBoneWeights) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshBoneWeightFunctions_ComputeSmoothBoneWeights");
static_assert(sizeof(GeometryScriptLibrary_MeshBoneWeightFunctions_ComputeSmoothBoneWeights) == 0x000038, "Wrong size on GeometryScriptLibrary_MeshBoneWeightFunctions_ComputeSmoothBoneWeights");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_ComputeSmoothBoneWeights, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_ComputeSmoothBoneWeights::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_ComputeSmoothBoneWeights, Skeleton) == 0x000008, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_ComputeSmoothBoneWeights::Skeleton' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_ComputeSmoothBoneWeights, Options) == 0x000010, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_ComputeSmoothBoneWeights::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_ComputeSmoothBoneWeights, Profile) == 0x000020, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_ComputeSmoothBoneWeights::Profile' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_ComputeSmoothBoneWeights, Debug) == 0x000028, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_ComputeSmoothBoneWeights::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_ComputeSmoothBoneWeights, ReturnValue) == 0x000030, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_ComputeSmoothBoneWeights::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBoneWeightFunctions.CopyBonesFromMesh
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_MeshBoneWeightFunctions_CopyBonesFromMesh final
{
public:
	class UDynamicMesh*                           SourceMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           TargetMesh;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshBoneWeightFunctions_CopyBonesFromMesh) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshBoneWeightFunctions_CopyBonesFromMesh");
static_assert(sizeof(GeometryScriptLibrary_MeshBoneWeightFunctions_CopyBonesFromMesh) == 0x000020, "Wrong size on GeometryScriptLibrary_MeshBoneWeightFunctions_CopyBonesFromMesh");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_CopyBonesFromMesh, SourceMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_CopyBonesFromMesh::SourceMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_CopyBonesFromMesh, TargetMesh) == 0x000008, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_CopyBonesFromMesh::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_CopyBonesFromMesh, Debug) == 0x000010, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_CopyBonesFromMesh::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_CopyBonesFromMesh, ReturnValue) == 0x000018, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_CopyBonesFromMesh::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBoneWeightFunctions.DiscardBonesFromMesh
// 0x0018 (0x0018 - 0x0000)
struct GeometryScriptLibrary_MeshBoneWeightFunctions_DiscardBonesFromMesh final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshBoneWeightFunctions_DiscardBonesFromMesh) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshBoneWeightFunctions_DiscardBonesFromMesh");
static_assert(sizeof(GeometryScriptLibrary_MeshBoneWeightFunctions_DiscardBonesFromMesh) == 0x000018, "Wrong size on GeometryScriptLibrary_MeshBoneWeightFunctions_DiscardBonesFromMesh");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_DiscardBonesFromMesh, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_DiscardBonesFromMesh::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_DiscardBonesFromMesh, Debug) == 0x000008, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_DiscardBonesFromMesh::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_DiscardBonesFromMesh, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_DiscardBonesFromMesh::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBoneWeightFunctions.GetAllBonesInfo
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_MeshBoneWeightFunctions_GetAllBonesInfo final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGeometryScriptBoneInfo>        BonesInfo;                                         // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetAllBonesInfo) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshBoneWeightFunctions_GetAllBonesInfo");
static_assert(sizeof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetAllBonesInfo) == 0x000028, "Wrong size on GeometryScriptLibrary_MeshBoneWeightFunctions_GetAllBonesInfo");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetAllBonesInfo, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_GetAllBonesInfo::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetAllBonesInfo, BonesInfo) == 0x000008, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_GetAllBonesInfo::BonesInfo' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetAllBonesInfo, Debug) == 0x000018, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_GetAllBonesInfo::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetAllBonesInfo, ReturnValue) == 0x000020, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_GetAllBonesInfo::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBoneWeightFunctions.GetBoneChildren
// 0x0038 (0x0038 - 0x0000)
struct GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneChildren final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecursive;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValidBoneName;                                  // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGeometryScriptBoneInfo>        ChildrenInfo;                                      // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneChildren) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneChildren");
static_assert(sizeof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneChildren) == 0x000038, "Wrong size on GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneChildren");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneChildren, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneChildren::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneChildren, BoneName) == 0x000008, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneChildren::BoneName' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneChildren, bRecursive) == 0x000010, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneChildren::bRecursive' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneChildren, bIsValidBoneName) == 0x000011, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneChildren::bIsValidBoneName' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneChildren, ChildrenInfo) == 0x000018, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneChildren::ChildrenInfo' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneChildren, Debug) == 0x000028, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneChildren::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneChildren, ReturnValue) == 0x000030, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneChildren::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBoneWeightFunctions.GetBoneIndex
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneIndex final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValidBoneName;                                  // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BoneIndex;                                         // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneIndex) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneIndex");
static_assert(sizeof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneIndex) == 0x000028, "Wrong size on GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneIndex");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneIndex, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneIndex::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneIndex, BoneName) == 0x000008, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneIndex::BoneName' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneIndex, bIsValidBoneName) == 0x000010, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneIndex::bIsValidBoneName' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneIndex, BoneIndex) == 0x000014, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneIndex::BoneIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneIndex, Debug) == 0x000018, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneIndex::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneIndex, ReturnValue) == 0x000020, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneIndex::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBoneWeightFunctions.GetBoneInfo
// 0x0110 (0x0110 - 0x0000)
struct GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneInfo final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValidBoneName;                                  // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0xF];                                       // 0x0011(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptBoneInfo                BoneInfo;                                          // 0x0020(0x00E0)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0100(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0108(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneInfo) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneInfo");
static_assert(sizeof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneInfo) == 0x000110, "Wrong size on GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneInfo");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneInfo, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneInfo::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneInfo, BoneName) == 0x000008, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneInfo::BoneName' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneInfo, bIsValidBoneName) == 0x000010, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneInfo::bIsValidBoneName' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneInfo, BoneInfo) == 0x000020, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneInfo::BoneInfo' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneInfo, Debug) == 0x000100, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneInfo::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneInfo, ReturnValue) == 0x000108, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_GetBoneInfo::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBoneWeightFunctions.GetLargestVertexBoneWeight
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_MeshBoneWeightFunctions_GetLargestVertexBoneWeight final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VertexID;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptBoneWeight              BoneWeight;                                        // 0x000C(0x0008)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bHasValidBoneWeights;                              // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptBoneWeightProfile       Profile;                                           // 0x0018(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetLargestVertexBoneWeight) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshBoneWeightFunctions_GetLargestVertexBoneWeight");
static_assert(sizeof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetLargestVertexBoneWeight) == 0x000028, "Wrong size on GeometryScriptLibrary_MeshBoneWeightFunctions_GetLargestVertexBoneWeight");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetLargestVertexBoneWeight, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_GetLargestVertexBoneWeight::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetLargestVertexBoneWeight, VertexID) == 0x000008, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_GetLargestVertexBoneWeight::VertexID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetLargestVertexBoneWeight, BoneWeight) == 0x00000C, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_GetLargestVertexBoneWeight::BoneWeight' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetLargestVertexBoneWeight, bHasValidBoneWeights) == 0x000014, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_GetLargestVertexBoneWeight::bHasValidBoneWeights' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetLargestVertexBoneWeight, Profile) == 0x000018, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_GetLargestVertexBoneWeight::Profile' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetLargestVertexBoneWeight, ReturnValue) == 0x000020, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_GetLargestVertexBoneWeight::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBoneWeightFunctions.GetMaxBoneWeightIndex
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_MeshBoneWeightFunctions_GetMaxBoneWeightIndex final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasBoneWeights;                                   // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxBoneIndex;                                      // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptBoneWeightProfile       Profile;                                           // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetMaxBoneWeightIndex) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshBoneWeightFunctions_GetMaxBoneWeightIndex");
static_assert(sizeof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetMaxBoneWeightIndex) == 0x000020, "Wrong size on GeometryScriptLibrary_MeshBoneWeightFunctions_GetMaxBoneWeightIndex");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetMaxBoneWeightIndex, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_GetMaxBoneWeightIndex::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetMaxBoneWeightIndex, bHasBoneWeights) == 0x000008, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_GetMaxBoneWeightIndex::bHasBoneWeights' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetMaxBoneWeightIndex, MaxBoneIndex) == 0x00000C, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_GetMaxBoneWeightIndex::MaxBoneIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetMaxBoneWeightIndex, Profile) == 0x000010, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_GetMaxBoneWeightIndex::Profile' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetMaxBoneWeightIndex, ReturnValue) == 0x000018, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_GetMaxBoneWeightIndex::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBoneWeightFunctions.GetRootBoneName
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_MeshBoneWeightFunctions_GetRootBoneName final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetRootBoneName) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshBoneWeightFunctions_GetRootBoneName");
static_assert(sizeof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetRootBoneName) == 0x000020, "Wrong size on GeometryScriptLibrary_MeshBoneWeightFunctions_GetRootBoneName");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetRootBoneName, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_GetRootBoneName::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetRootBoneName, BoneName) == 0x000008, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_GetRootBoneName::BoneName' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetRootBoneName, Debug) == 0x000010, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_GetRootBoneName::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetRootBoneName, ReturnValue) == 0x000018, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_GetRootBoneName::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBoneWeightFunctions.GetVertexBoneWeights
// 0x0038 (0x0038 - 0x0000)
struct GeometryScriptLibrary_MeshBoneWeightFunctions_GetVertexBoneWeights final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VertexID;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGeometryScriptBoneWeight>      BoneWeights;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bHasValidBoneWeights;                              // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptBoneWeightProfile       Profile;                                           // 0x0024(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetVertexBoneWeights) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshBoneWeightFunctions_GetVertexBoneWeights");
static_assert(sizeof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetVertexBoneWeights) == 0x000038, "Wrong size on GeometryScriptLibrary_MeshBoneWeightFunctions_GetVertexBoneWeights");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetVertexBoneWeights, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_GetVertexBoneWeights::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetVertexBoneWeights, VertexID) == 0x000008, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_GetVertexBoneWeights::VertexID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetVertexBoneWeights, BoneWeights) == 0x000010, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_GetVertexBoneWeights::BoneWeights' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetVertexBoneWeights, bHasValidBoneWeights) == 0x000020, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_GetVertexBoneWeights::bHasValidBoneWeights' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetVertexBoneWeights, Profile) == 0x000024, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_GetVertexBoneWeights::Profile' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_GetVertexBoneWeights, ReturnValue) == 0x000030, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_GetVertexBoneWeights::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBoneWeightFunctions.MeshCreateBoneWeights
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_MeshBoneWeightFunctions_MeshCreateBoneWeights final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bProfileExisted;                                   // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReplaceExistingProfile;                           // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptBoneWeightProfile       Profile;                                           // 0x000C(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshBoneWeightFunctions_MeshCreateBoneWeights) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshBoneWeightFunctions_MeshCreateBoneWeights");
static_assert(sizeof(GeometryScriptLibrary_MeshBoneWeightFunctions_MeshCreateBoneWeights) == 0x000020, "Wrong size on GeometryScriptLibrary_MeshBoneWeightFunctions_MeshCreateBoneWeights");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_MeshCreateBoneWeights, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_MeshCreateBoneWeights::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_MeshCreateBoneWeights, bProfileExisted) == 0x000008, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_MeshCreateBoneWeights::bProfileExisted' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_MeshCreateBoneWeights, bReplaceExistingProfile) == 0x000009, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_MeshCreateBoneWeights::bReplaceExistingProfile' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_MeshCreateBoneWeights, Profile) == 0x00000C, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_MeshCreateBoneWeights::Profile' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_MeshCreateBoneWeights, ReturnValue) == 0x000018, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_MeshCreateBoneWeights::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBoneWeightFunctions.MeshHasBoneWeights
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_MeshBoneWeightFunctions_MeshHasBoneWeights final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasBoneWeights;                                   // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptBoneWeightProfile       Profile;                                           // 0x000C(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshBoneWeightFunctions_MeshHasBoneWeights) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshBoneWeightFunctions_MeshHasBoneWeights");
static_assert(sizeof(GeometryScriptLibrary_MeshBoneWeightFunctions_MeshHasBoneWeights) == 0x000020, "Wrong size on GeometryScriptLibrary_MeshBoneWeightFunctions_MeshHasBoneWeights");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_MeshHasBoneWeights, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_MeshHasBoneWeights::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_MeshHasBoneWeights, bHasBoneWeights) == 0x000008, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_MeshHasBoneWeights::bHasBoneWeights' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_MeshHasBoneWeights, Profile) == 0x00000C, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_MeshHasBoneWeights::Profile' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_MeshHasBoneWeights, ReturnValue) == 0x000018, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_MeshHasBoneWeights::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBoneWeightFunctions.SetAllVertexBoneWeights
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_MeshBoneWeightFunctions_SetAllVertexBoneWeights final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGeometryScriptBoneWeight>      BoneWeights;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometryScriptBoneWeightProfile       Profile;                                           // 0x0018(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshBoneWeightFunctions_SetAllVertexBoneWeights) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshBoneWeightFunctions_SetAllVertexBoneWeights");
static_assert(sizeof(GeometryScriptLibrary_MeshBoneWeightFunctions_SetAllVertexBoneWeights) == 0x000028, "Wrong size on GeometryScriptLibrary_MeshBoneWeightFunctions_SetAllVertexBoneWeights");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_SetAllVertexBoneWeights, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_SetAllVertexBoneWeights::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_SetAllVertexBoneWeights, BoneWeights) == 0x000008, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_SetAllVertexBoneWeights::BoneWeights' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_SetAllVertexBoneWeights, Profile) == 0x000018, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_SetAllVertexBoneWeights::Profile' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_SetAllVertexBoneWeights, ReturnValue) == 0x000020, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_SetAllVertexBoneWeights::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBoneWeightFunctions.SetVertexBoneWeights
// 0x0038 (0x0038 - 0x0000)
struct GeometryScriptLibrary_MeshBoneWeightFunctions_SetVertexBoneWeights final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VertexID;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGeometryScriptBoneWeight>      BoneWeights;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsValidVertexID;                                  // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptBoneWeightProfile       Profile;                                           // 0x0024(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshBoneWeightFunctions_SetVertexBoneWeights) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshBoneWeightFunctions_SetVertexBoneWeights");
static_assert(sizeof(GeometryScriptLibrary_MeshBoneWeightFunctions_SetVertexBoneWeights) == 0x000038, "Wrong size on GeometryScriptLibrary_MeshBoneWeightFunctions_SetVertexBoneWeights");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_SetVertexBoneWeights, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_SetVertexBoneWeights::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_SetVertexBoneWeights, VertexID) == 0x000008, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_SetVertexBoneWeights::VertexID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_SetVertexBoneWeights, BoneWeights) == 0x000010, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_SetVertexBoneWeights::BoneWeights' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_SetVertexBoneWeights, bIsValidVertexID) == 0x000020, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_SetVertexBoneWeights::bIsValidVertexID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_SetVertexBoneWeights, Profile) == 0x000024, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_SetVertexBoneWeights::Profile' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_SetVertexBoneWeights, ReturnValue) == 0x000030, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_SetVertexBoneWeights::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBoneWeightFunctions.TransferBoneWeightsFromMesh
// 0x0060 (0x0060 - 0x0000)
struct GeometryScriptLibrary_MeshBoneWeightFunctions_TransferBoneWeightsFromMesh final
{
public:
	class UDynamicMesh*                           SourceMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           TargetMesh;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptTransferBoneWeightsOptions Options;                                           // 0x0010(0x0040)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0050(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshBoneWeightFunctions_TransferBoneWeightsFromMesh) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshBoneWeightFunctions_TransferBoneWeightsFromMesh");
static_assert(sizeof(GeometryScriptLibrary_MeshBoneWeightFunctions_TransferBoneWeightsFromMesh) == 0x000060, "Wrong size on GeometryScriptLibrary_MeshBoneWeightFunctions_TransferBoneWeightsFromMesh");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_TransferBoneWeightsFromMesh, SourceMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_TransferBoneWeightsFromMesh::SourceMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_TransferBoneWeightsFromMesh, TargetMesh) == 0x000008, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_TransferBoneWeightsFromMesh::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_TransferBoneWeightsFromMesh, Options) == 0x000010, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_TransferBoneWeightsFromMesh::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_TransferBoneWeightsFromMesh, Debug) == 0x000050, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_TransferBoneWeightsFromMesh::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBoneWeightFunctions_TransferBoneWeightsFromMesh, ReturnValue) == 0x000058, "Member 'GeometryScriptLibrary_MeshBoneWeightFunctions_TransferBoneWeightsFromMesh::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBooleanFunctions.ApplyMeshBoolean
// 0x0100 (0x0100 - 0x0000)
struct GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshBoolean final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TargetTransform;                                   // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ToolMesh;                                          // 0x0070(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ToolTransform;                                     // 0x0080(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptBooleanOperation               Operation;                                         // 0x00E0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptMeshBooleanOptions      Options;                                           // 0x00E4(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x00F0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x00F8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshBoolean) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshBoolean");
static_assert(sizeof(GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshBoolean) == 0x000100, "Wrong size on GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshBoolean");
static_assert(offsetof(GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshBoolean, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshBoolean::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshBoolean, TargetTransform) == 0x000010, "Member 'GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshBoolean::TargetTransform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshBoolean, ToolMesh) == 0x000070, "Member 'GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshBoolean::ToolMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshBoolean, ToolTransform) == 0x000080, "Member 'GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshBoolean::ToolTransform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshBoolean, Operation) == 0x0000E0, "Member 'GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshBoolean::Operation' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshBoolean, Options) == 0x0000E4, "Member 'GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshBoolean::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshBoolean, Debug) == 0x0000F0, "Member 'GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshBoolean::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshBoolean, ReturnValue) == 0x0000F8, "Member 'GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshBoolean::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBooleanFunctions.ApplyMeshMirror
// 0x0090 (0x0090 - 0x0000)
struct GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshMirror final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             MirrorFrame;                                       // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshMirrorOptions       Options;                                           // 0x0070(0x0003)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_73[0x5];                                       // 0x0073(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0078(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0080(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshMirror) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshMirror");
static_assert(sizeof(GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshMirror) == 0x000090, "Wrong size on GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshMirror");
static_assert(offsetof(GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshMirror, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshMirror::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshMirror, MirrorFrame) == 0x000010, "Member 'GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshMirror::MirrorFrame' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshMirror, Options) == 0x000070, "Member 'GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshMirror::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshMirror, Debug) == 0x000078, "Member 'GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshMirror::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshMirror, ReturnValue) == 0x000080, "Member 'GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshMirror::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBooleanFunctions.ApplyMeshPlaneCut
// 0x0090 (0x0090 - 0x0000)
struct GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshPlaneCut final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CutFrame;                                          // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshPlaneCutOptions     Options;                                           // 0x0070(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0078(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0080(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshPlaneCut) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshPlaneCut");
static_assert(sizeof(GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshPlaneCut) == 0x000090, "Wrong size on GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshPlaneCut");
static_assert(offsetof(GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshPlaneCut, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshPlaneCut::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshPlaneCut, CutFrame) == 0x000010, "Member 'GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshPlaneCut::CutFrame' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshPlaneCut, Options) == 0x000070, "Member 'GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshPlaneCut::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshPlaneCut, Debug) == 0x000078, "Member 'GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshPlaneCut::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshPlaneCut, ReturnValue) == 0x000080, "Member 'GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshPlaneCut::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBooleanFunctions.ApplyMeshPlaneSlice
// 0x0090 (0x0090 - 0x0000)
struct GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshPlaneSlice final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CutFrame;                                          // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshPlaneSliceOptions   Options;                                           // 0x0070(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0080(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0088(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshPlaneSlice) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshPlaneSlice");
static_assert(sizeof(GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshPlaneSlice) == 0x000090, "Wrong size on GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshPlaneSlice");
static_assert(offsetof(GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshPlaneSlice, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshPlaneSlice::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshPlaneSlice, CutFrame) == 0x000010, "Member 'GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshPlaneSlice::CutFrame' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshPlaneSlice, Options) == 0x000070, "Member 'GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshPlaneSlice::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshPlaneSlice, Debug) == 0x000080, "Member 'GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshPlaneSlice::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshPlaneSlice, ReturnValue) == 0x000088, "Member 'GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshPlaneSlice::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshBooleanFunctions.ApplyMeshSelfUnion
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshSelfUnion final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelfUnionOptions    Options;                                           // 0x0008(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshSelfUnion) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshSelfUnion");
static_assert(sizeof(GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshSelfUnion) == 0x000028, "Wrong size on GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshSelfUnion");
static_assert(offsetof(GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshSelfUnion, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshSelfUnion::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshSelfUnion, Options) == 0x000008, "Member 'GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshSelfUnion::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshSelfUnion, Debug) == 0x000018, "Member 'GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshSelfUnion::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshSelfUnion, ReturnValue) == 0x000020, "Member 'GeometryScriptLibrary_MeshBooleanFunctions_ApplyMeshSelfUnion::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshComparisonFunctions.IsIntersectingMesh
// 0x0100 (0x0100 - 0x0000)
struct GeometryScriptLibrary_MeshComparisonFunctions_IsIntersectingMesh final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TargetTransform;                                   // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           OtherMesh;                                         // 0x0070(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OtherTransform;                                    // 0x0080(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsIntersecting;                                   // 0x00E0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x00E8(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x00F0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshComparisonFunctions_IsIntersectingMesh) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshComparisonFunctions_IsIntersectingMesh");
static_assert(sizeof(GeometryScriptLibrary_MeshComparisonFunctions_IsIntersectingMesh) == 0x000100, "Wrong size on GeometryScriptLibrary_MeshComparisonFunctions_IsIntersectingMesh");
static_assert(offsetof(GeometryScriptLibrary_MeshComparisonFunctions_IsIntersectingMesh, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshComparisonFunctions_IsIntersectingMesh::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshComparisonFunctions_IsIntersectingMesh, TargetTransform) == 0x000010, "Member 'GeometryScriptLibrary_MeshComparisonFunctions_IsIntersectingMesh::TargetTransform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshComparisonFunctions_IsIntersectingMesh, OtherMesh) == 0x000070, "Member 'GeometryScriptLibrary_MeshComparisonFunctions_IsIntersectingMesh::OtherMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshComparisonFunctions_IsIntersectingMesh, OtherTransform) == 0x000080, "Member 'GeometryScriptLibrary_MeshComparisonFunctions_IsIntersectingMesh::OtherTransform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshComparisonFunctions_IsIntersectingMesh, bIsIntersecting) == 0x0000E0, "Member 'GeometryScriptLibrary_MeshComparisonFunctions_IsIntersectingMesh::bIsIntersecting' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshComparisonFunctions_IsIntersectingMesh, Debug) == 0x0000E8, "Member 'GeometryScriptLibrary_MeshComparisonFunctions_IsIntersectingMesh::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshComparisonFunctions_IsIntersectingMesh, ReturnValue) == 0x0000F0, "Member 'GeometryScriptLibrary_MeshComparisonFunctions_IsIntersectingMesh::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshComparisonFunctions.IsSameMeshAs
// 0x0030 (0x0030 - 0x0000)
struct GeometryScriptLibrary_MeshComparisonFunctions_IsSameMeshAs final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           OtherMesh;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptIsSameMeshOptions       Options;                                           // 0x0010(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsSameMesh;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshComparisonFunctions_IsSameMeshAs) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshComparisonFunctions_IsSameMeshAs");
static_assert(sizeof(GeometryScriptLibrary_MeshComparisonFunctions_IsSameMeshAs) == 0x000030, "Wrong size on GeometryScriptLibrary_MeshComparisonFunctions_IsSameMeshAs");
static_assert(offsetof(GeometryScriptLibrary_MeshComparisonFunctions_IsSameMeshAs, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshComparisonFunctions_IsSameMeshAs::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshComparisonFunctions_IsSameMeshAs, OtherMesh) == 0x000008, "Member 'GeometryScriptLibrary_MeshComparisonFunctions_IsSameMeshAs::OtherMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshComparisonFunctions_IsSameMeshAs, Options) == 0x000010, "Member 'GeometryScriptLibrary_MeshComparisonFunctions_IsSameMeshAs::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshComparisonFunctions_IsSameMeshAs, bIsSameMesh) == 0x00001C, "Member 'GeometryScriptLibrary_MeshComparisonFunctions_IsSameMeshAs::bIsSameMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshComparisonFunctions_IsSameMeshAs, Debug) == 0x000020, "Member 'GeometryScriptLibrary_MeshComparisonFunctions_IsSameMeshAs::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshComparisonFunctions_IsSameMeshAs, ReturnValue) == 0x000028, "Member 'GeometryScriptLibrary_MeshComparisonFunctions_IsSameMeshAs::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshComparisonFunctions.MeasureDistancesBetweenMeshes
// 0x0048 (0x0048 - 0x0000)
struct GeometryScriptLibrary_MeshComparisonFunctions_MeasureDistancesBetweenMeshes final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           OtherMesh;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeasureMeshDistanceOptions Options;                                           // 0x0010(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MaxDistance;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MinDistance;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        AverageDistance;                                   // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        RootMeanSqrDeviation;                              // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshComparisonFunctions_MeasureDistancesBetweenMeshes) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshComparisonFunctions_MeasureDistancesBetweenMeshes");
static_assert(sizeof(GeometryScriptLibrary_MeshComparisonFunctions_MeasureDistancesBetweenMeshes) == 0x000048, "Wrong size on GeometryScriptLibrary_MeshComparisonFunctions_MeasureDistancesBetweenMeshes");
static_assert(offsetof(GeometryScriptLibrary_MeshComparisonFunctions_MeasureDistancesBetweenMeshes, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshComparisonFunctions_MeasureDistancesBetweenMeshes::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshComparisonFunctions_MeasureDistancesBetweenMeshes, OtherMesh) == 0x000008, "Member 'GeometryScriptLibrary_MeshComparisonFunctions_MeasureDistancesBetweenMeshes::OtherMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshComparisonFunctions_MeasureDistancesBetweenMeshes, Options) == 0x000010, "Member 'GeometryScriptLibrary_MeshComparisonFunctions_MeasureDistancesBetweenMeshes::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshComparisonFunctions_MeasureDistancesBetweenMeshes, MaxDistance) == 0x000018, "Member 'GeometryScriptLibrary_MeshComparisonFunctions_MeasureDistancesBetweenMeshes::MaxDistance' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshComparisonFunctions_MeasureDistancesBetweenMeshes, MinDistance) == 0x000020, "Member 'GeometryScriptLibrary_MeshComparisonFunctions_MeasureDistancesBetweenMeshes::MinDistance' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshComparisonFunctions_MeasureDistancesBetweenMeshes, AverageDistance) == 0x000028, "Member 'GeometryScriptLibrary_MeshComparisonFunctions_MeasureDistancesBetweenMeshes::AverageDistance' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshComparisonFunctions_MeasureDistancesBetweenMeshes, RootMeanSqrDeviation) == 0x000030, "Member 'GeometryScriptLibrary_MeshComparisonFunctions_MeasureDistancesBetweenMeshes::RootMeanSqrDeviation' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshComparisonFunctions_MeasureDistancesBetweenMeshes, Debug) == 0x000038, "Member 'GeometryScriptLibrary_MeshComparisonFunctions_MeasureDistancesBetweenMeshes::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshComparisonFunctions_MeasureDistancesBetweenMeshes, ReturnValue) == 0x000040, "Member 'GeometryScriptLibrary_MeshComparisonFunctions_MeasureDistancesBetweenMeshes::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshDecompositionFunctions.CopyMeshSelectionToMesh
// 0x0040 (0x0040 - 0x0000)
struct GeometryScriptLibrary_MeshDecompositionFunctions_CopyMeshSelectionToMesh final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           StoreToSubmesh;                                    // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0010(0x0010)(Parm, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           StoreToSubmeshOut;                                 // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAppendToExisting;                                 // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreserveGroupIDs;                                 // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshDecompositionFunctions_CopyMeshSelectionToMesh) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshDecompositionFunctions_CopyMeshSelectionToMesh");
static_assert(sizeof(GeometryScriptLibrary_MeshDecompositionFunctions_CopyMeshSelectionToMesh) == 0x000040, "Wrong size on GeometryScriptLibrary_MeshDecompositionFunctions_CopyMeshSelectionToMesh");
static_assert(offsetof(GeometryScriptLibrary_MeshDecompositionFunctions_CopyMeshSelectionToMesh, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshDecompositionFunctions_CopyMeshSelectionToMesh::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDecompositionFunctions_CopyMeshSelectionToMesh, StoreToSubmesh) == 0x000008, "Member 'GeometryScriptLibrary_MeshDecompositionFunctions_CopyMeshSelectionToMesh::StoreToSubmesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDecompositionFunctions_CopyMeshSelectionToMesh, Selection) == 0x000010, "Member 'GeometryScriptLibrary_MeshDecompositionFunctions_CopyMeshSelectionToMesh::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDecompositionFunctions_CopyMeshSelectionToMesh, StoreToSubmeshOut) == 0x000020, "Member 'GeometryScriptLibrary_MeshDecompositionFunctions_CopyMeshSelectionToMesh::StoreToSubmeshOut' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDecompositionFunctions_CopyMeshSelectionToMesh, bAppendToExisting) == 0x000028, "Member 'GeometryScriptLibrary_MeshDecompositionFunctions_CopyMeshSelectionToMesh::bAppendToExisting' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDecompositionFunctions_CopyMeshSelectionToMesh, bPreserveGroupIDs) == 0x000029, "Member 'GeometryScriptLibrary_MeshDecompositionFunctions_CopyMeshSelectionToMesh::bPreserveGroupIDs' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDecompositionFunctions_CopyMeshSelectionToMesh, Debug) == 0x000030, "Member 'GeometryScriptLibrary_MeshDecompositionFunctions_CopyMeshSelectionToMesh::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDecompositionFunctions_CopyMeshSelectionToMesh, ReturnValue) == 0x000038, "Member 'GeometryScriptLibrary_MeshDecompositionFunctions_CopyMeshSelectionToMesh::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshDecompositionFunctions.CopyMeshToMesh
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_MeshDecompositionFunctions_CopyMeshToMesh final
{
public:
	class UDynamicMesh*                           CopyFromMesh;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           CopyToMesh;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           CopyToMeshOut;                                     // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshDecompositionFunctions_CopyMeshToMesh) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshDecompositionFunctions_CopyMeshToMesh");
static_assert(sizeof(GeometryScriptLibrary_MeshDecompositionFunctions_CopyMeshToMesh) == 0x000028, "Wrong size on GeometryScriptLibrary_MeshDecompositionFunctions_CopyMeshToMesh");
static_assert(offsetof(GeometryScriptLibrary_MeshDecompositionFunctions_CopyMeshToMesh, CopyFromMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshDecompositionFunctions_CopyMeshToMesh::CopyFromMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDecompositionFunctions_CopyMeshToMesh, CopyToMesh) == 0x000008, "Member 'GeometryScriptLibrary_MeshDecompositionFunctions_CopyMeshToMesh::CopyToMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDecompositionFunctions_CopyMeshToMesh, CopyToMeshOut) == 0x000010, "Member 'GeometryScriptLibrary_MeshDecompositionFunctions_CopyMeshToMesh::CopyToMeshOut' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDecompositionFunctions_CopyMeshToMesh, Debug) == 0x000018, "Member 'GeometryScriptLibrary_MeshDecompositionFunctions_CopyMeshToMesh::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDecompositionFunctions_CopyMeshToMesh, ReturnValue) == 0x000020, "Member 'GeometryScriptLibrary_MeshDecompositionFunctions_CopyMeshToMesh::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshDecompositionFunctions.GetSubMeshFromMesh
// 0x0040 (0x0040 - 0x0000)
struct GeometryScriptLibrary_MeshDecompositionFunctions_GetSubMeshFromMesh final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           StoreToSubmesh;                                    // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptIndexList               TriangleList;                                      // 0x0010(0x0018)(Parm, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           StoreToSubmeshOut;                                 // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshDecompositionFunctions_GetSubMeshFromMesh) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshDecompositionFunctions_GetSubMeshFromMesh");
static_assert(sizeof(GeometryScriptLibrary_MeshDecompositionFunctions_GetSubMeshFromMesh) == 0x000040, "Wrong size on GeometryScriptLibrary_MeshDecompositionFunctions_GetSubMeshFromMesh");
static_assert(offsetof(GeometryScriptLibrary_MeshDecompositionFunctions_GetSubMeshFromMesh, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshDecompositionFunctions_GetSubMeshFromMesh::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDecompositionFunctions_GetSubMeshFromMesh, StoreToSubmesh) == 0x000008, "Member 'GeometryScriptLibrary_MeshDecompositionFunctions_GetSubMeshFromMesh::StoreToSubmesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDecompositionFunctions_GetSubMeshFromMesh, TriangleList) == 0x000010, "Member 'GeometryScriptLibrary_MeshDecompositionFunctions_GetSubMeshFromMesh::TriangleList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDecompositionFunctions_GetSubMeshFromMesh, StoreToSubmeshOut) == 0x000028, "Member 'GeometryScriptLibrary_MeshDecompositionFunctions_GetSubMeshFromMesh::StoreToSubmeshOut' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDecompositionFunctions_GetSubMeshFromMesh, Debug) == 0x000030, "Member 'GeometryScriptLibrary_MeshDecompositionFunctions_GetSubMeshFromMesh::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDecompositionFunctions_GetSubMeshFromMesh, ReturnValue) == 0x000038, "Member 'GeometryScriptLibrary_MeshDecompositionFunctions_GetSubMeshFromMesh::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshDecompositionFunctions.SplitMeshByComponents
// 0x0030 (0x0030 - 0x0000)
struct GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByComponents final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UDynamicMesh*>                   ComponentMeshes;                                   // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class UDynamicMeshPool*                       MeshPool;                                          // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByComponents) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByComponents");
static_assert(sizeof(GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByComponents) == 0x000030, "Wrong size on GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByComponents");
static_assert(offsetof(GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByComponents, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByComponents::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByComponents, ComponentMeshes) == 0x000008, "Member 'GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByComponents::ComponentMeshes' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByComponents, MeshPool) == 0x000018, "Member 'GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByComponents::MeshPool' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByComponents, Debug) == 0x000020, "Member 'GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByComponents::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByComponents, ReturnValue) == 0x000028, "Member 'GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByComponents::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshDecompositionFunctions.SplitMeshByMaterialIDs
// 0x0040 (0x0040 - 0x0000)
struct GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByMaterialIDs final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UDynamicMesh*>                   ComponentMeshes;                                   // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ComponentMaterialIDs;                              // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class UDynamicMeshPool*                       MeshPool;                                          // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByMaterialIDs) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByMaterialIDs");
static_assert(sizeof(GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByMaterialIDs) == 0x000040, "Wrong size on GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByMaterialIDs");
static_assert(offsetof(GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByMaterialIDs, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByMaterialIDs::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByMaterialIDs, ComponentMeshes) == 0x000008, "Member 'GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByMaterialIDs::ComponentMeshes' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByMaterialIDs, ComponentMaterialIDs) == 0x000018, "Member 'GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByMaterialIDs::ComponentMaterialIDs' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByMaterialIDs, MeshPool) == 0x000028, "Member 'GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByMaterialIDs::MeshPool' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByMaterialIDs, Debug) == 0x000030, "Member 'GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByMaterialIDs::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByMaterialIDs, ReturnValue) == 0x000038, "Member 'GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByMaterialIDs::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshDecompositionFunctions.SplitMeshByPolygroups
// 0x0048 (0x0048 - 0x0000)
struct GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByPolygroups final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptGroupLayer              GroupLayer;                                        // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class UDynamicMesh*>                   ComponentMeshes;                                   // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ComponentPolygroups;                               // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class UDynamicMeshPool*                       MeshPool;                                          // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByPolygroups) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByPolygroups");
static_assert(sizeof(GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByPolygroups) == 0x000048, "Wrong size on GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByPolygroups");
static_assert(offsetof(GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByPolygroups, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByPolygroups::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByPolygroups, GroupLayer) == 0x000008, "Member 'GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByPolygroups::GroupLayer' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByPolygroups, ComponentMeshes) == 0x000010, "Member 'GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByPolygroups::ComponentMeshes' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByPolygroups, ComponentPolygroups) == 0x000020, "Member 'GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByPolygroups::ComponentPolygroups' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByPolygroups, MeshPool) == 0x000030, "Member 'GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByPolygroups::MeshPool' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByPolygroups, Debug) == 0x000038, "Member 'GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByPolygroups::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByPolygroups, ReturnValue) == 0x000040, "Member 'GeometryScriptLibrary_MeshDecompositionFunctions_SplitMeshByPolygroups::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshDeformFunctions.ApplyBendWarpToMesh
// 0x00A0 (0x00A0 - 0x0000)
struct GeometryScriptLibrary_MeshDeformFunctions_ApplyBendWarpToMesh final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptBendWarpOptions         Options;                                           // 0x0008(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             BendOrientation;                                   // 0x0020(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BendAngle;                                         // 0x0080(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BendExtent;                                        // 0x0084(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0088(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshDeformFunctions_ApplyBendWarpToMesh) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshDeformFunctions_ApplyBendWarpToMesh");
static_assert(sizeof(GeometryScriptLibrary_MeshDeformFunctions_ApplyBendWarpToMesh) == 0x0000A0, "Wrong size on GeometryScriptLibrary_MeshDeformFunctions_ApplyBendWarpToMesh");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyBendWarpToMesh, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyBendWarpToMesh::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyBendWarpToMesh, Options) == 0x000008, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyBendWarpToMesh::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyBendWarpToMesh, BendOrientation) == 0x000020, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyBendWarpToMesh::BendOrientation' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyBendWarpToMesh, BendAngle) == 0x000080, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyBendWarpToMesh::BendAngle' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyBendWarpToMesh, BendExtent) == 0x000084, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyBendWarpToMesh::BendExtent' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyBendWarpToMesh, Debug) == 0x000088, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyBendWarpToMesh::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyBendWarpToMesh, ReturnValue) == 0x000090, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyBendWarpToMesh::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshDeformFunctions.ApplyDisplaceFromPerVertexVectors
// 0x0040 (0x0040 - 0x0000)
struct GeometryScriptLibrary_MeshDeformFunctions_ApplyDisplaceFromPerVertexVectors final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptVectorList              VectorList;                                        // 0x0018(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Magnitude;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshDeformFunctions_ApplyDisplaceFromPerVertexVectors) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshDeformFunctions_ApplyDisplaceFromPerVertexVectors");
static_assert(sizeof(GeometryScriptLibrary_MeshDeformFunctions_ApplyDisplaceFromPerVertexVectors) == 0x000040, "Wrong size on GeometryScriptLibrary_MeshDeformFunctions_ApplyDisplaceFromPerVertexVectors");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyDisplaceFromPerVertexVectors, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyDisplaceFromPerVertexVectors::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyDisplaceFromPerVertexVectors, Selection) == 0x000008, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyDisplaceFromPerVertexVectors::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyDisplaceFromPerVertexVectors, VectorList) == 0x000018, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyDisplaceFromPerVertexVectors::VectorList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyDisplaceFromPerVertexVectors, Magnitude) == 0x000028, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyDisplaceFromPerVertexVectors::Magnitude' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyDisplaceFromPerVertexVectors, Debug) == 0x000030, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyDisplaceFromPerVertexVectors::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyDisplaceFromPerVertexVectors, ReturnValue) == 0x000038, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyDisplaceFromPerVertexVectors::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshDeformFunctions.ApplyDisplaceFromTextureMap
// 0x0070 (0x0070 - 0x0000)
struct GeometryScriptLibrary_MeshDeformFunctions_ApplyDisplaceFromTextureMap final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Texture;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0010(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptDisplaceFromTextureOptions Options;                                           // 0x0020(0x0038)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         UVLayer;                                           // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0060(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshDeformFunctions_ApplyDisplaceFromTextureMap) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshDeformFunctions_ApplyDisplaceFromTextureMap");
static_assert(sizeof(GeometryScriptLibrary_MeshDeformFunctions_ApplyDisplaceFromTextureMap) == 0x000070, "Wrong size on GeometryScriptLibrary_MeshDeformFunctions_ApplyDisplaceFromTextureMap");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyDisplaceFromTextureMap, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyDisplaceFromTextureMap::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyDisplaceFromTextureMap, Texture) == 0x000008, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyDisplaceFromTextureMap::Texture' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyDisplaceFromTextureMap, Selection) == 0x000010, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyDisplaceFromTextureMap::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyDisplaceFromTextureMap, Options) == 0x000020, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyDisplaceFromTextureMap::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyDisplaceFromTextureMap, UVLayer) == 0x000058, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyDisplaceFromTextureMap::UVLayer' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyDisplaceFromTextureMap, Debug) == 0x000060, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyDisplaceFromTextureMap::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyDisplaceFromTextureMap, ReturnValue) == 0x000068, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyDisplaceFromTextureMap::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshDeformFunctions.ApplyFlareWarpToMesh
// 0x00A0 (0x00A0 - 0x0000)
struct GeometryScriptLibrary_MeshDeformFunctions_ApplyFlareWarpToMesh final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptFlareWarpOptions        Options;                                           // 0x0008(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             FlareOrientation;                                  // 0x0020(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlarePercentX;                                     // 0x0080(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlarePercentY;                                     // 0x0084(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlareExtent;                                       // 0x0088(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0090(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0098(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshDeformFunctions_ApplyFlareWarpToMesh) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshDeformFunctions_ApplyFlareWarpToMesh");
static_assert(sizeof(GeometryScriptLibrary_MeshDeformFunctions_ApplyFlareWarpToMesh) == 0x0000A0, "Wrong size on GeometryScriptLibrary_MeshDeformFunctions_ApplyFlareWarpToMesh");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyFlareWarpToMesh, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyFlareWarpToMesh::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyFlareWarpToMesh, Options) == 0x000008, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyFlareWarpToMesh::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyFlareWarpToMesh, FlareOrientation) == 0x000020, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyFlareWarpToMesh::FlareOrientation' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyFlareWarpToMesh, FlarePercentX) == 0x000080, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyFlareWarpToMesh::FlarePercentX' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyFlareWarpToMesh, FlarePercentY) == 0x000084, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyFlareWarpToMesh::FlarePercentY' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyFlareWarpToMesh, FlareExtent) == 0x000088, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyFlareWarpToMesh::FlareExtent' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyFlareWarpToMesh, Debug) == 0x000090, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyFlareWarpToMesh::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyFlareWarpToMesh, ReturnValue) == 0x000098, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyFlareWarpToMesh::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshDeformFunctions.ApplyIterativeSmoothingToMesh
// 0x0038 (0x0038 - 0x0000)
struct GeometryScriptLibrary_MeshDeformFunctions_ApplyIterativeSmoothingToMesh final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptIterativeMeshSmoothingOptions Options;                                           // 0x0018(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshDeformFunctions_ApplyIterativeSmoothingToMesh) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshDeformFunctions_ApplyIterativeSmoothingToMesh");
static_assert(sizeof(GeometryScriptLibrary_MeshDeformFunctions_ApplyIterativeSmoothingToMesh) == 0x000038, "Wrong size on GeometryScriptLibrary_MeshDeformFunctions_ApplyIterativeSmoothingToMesh");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyIterativeSmoothingToMesh, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyIterativeSmoothingToMesh::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyIterativeSmoothingToMesh, Selection) == 0x000008, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyIterativeSmoothingToMesh::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyIterativeSmoothingToMesh, Options) == 0x000018, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyIterativeSmoothingToMesh::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyIterativeSmoothingToMesh, Debug) == 0x000028, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyIterativeSmoothingToMesh::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyIterativeSmoothingToMesh, ReturnValue) == 0x000030, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyIterativeSmoothingToMesh::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshDeformFunctions.ApplyMathWarpToMesh
// 0x0090 (0x0090 - 0x0000)
struct GeometryScriptLibrary_MeshDeformFunctions_ApplyMathWarpToMesh final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             WarpOrientation;                                   // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptMathWarpType                   WarpType;                                          // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptMathWarpOptions         Options;                                           // 0x0074(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0080(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0088(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshDeformFunctions_ApplyMathWarpToMesh) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshDeformFunctions_ApplyMathWarpToMesh");
static_assert(sizeof(GeometryScriptLibrary_MeshDeformFunctions_ApplyMathWarpToMesh) == 0x000090, "Wrong size on GeometryScriptLibrary_MeshDeformFunctions_ApplyMathWarpToMesh");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyMathWarpToMesh, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyMathWarpToMesh::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyMathWarpToMesh, WarpOrientation) == 0x000010, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyMathWarpToMesh::WarpOrientation' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyMathWarpToMesh, WarpType) == 0x000070, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyMathWarpToMesh::WarpType' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyMathWarpToMesh, Options) == 0x000074, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyMathWarpToMesh::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyMathWarpToMesh, Debug) == 0x000080, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyMathWarpToMesh::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyMathWarpToMesh, ReturnValue) == 0x000088, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyMathWarpToMesh::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshDeformFunctions.ApplyPerlinNoiseToMesh
// 0x0058 (0x0058 - 0x0000)
struct GeometryScriptLibrary_MeshDeformFunctions_ApplyPerlinNoiseToMesh final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptPerlinNoiseOptions      Options;                                           // 0x0018(0x0030)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0048(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshDeformFunctions_ApplyPerlinNoiseToMesh) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshDeformFunctions_ApplyPerlinNoiseToMesh");
static_assert(sizeof(GeometryScriptLibrary_MeshDeformFunctions_ApplyPerlinNoiseToMesh) == 0x000058, "Wrong size on GeometryScriptLibrary_MeshDeformFunctions_ApplyPerlinNoiseToMesh");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyPerlinNoiseToMesh, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyPerlinNoiseToMesh::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyPerlinNoiseToMesh, Selection) == 0x000008, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyPerlinNoiseToMesh::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyPerlinNoiseToMesh, Options) == 0x000018, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyPerlinNoiseToMesh::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyPerlinNoiseToMesh, Debug) == 0x000048, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyPerlinNoiseToMesh::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyPerlinNoiseToMesh, ReturnValue) == 0x000050, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyPerlinNoiseToMesh::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshDeformFunctions.ApplyTwistWarpToMesh
// 0x00A0 (0x00A0 - 0x0000)
struct GeometryScriptLibrary_MeshDeformFunctions_ApplyTwistWarpToMesh final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptTwistWarpOptions        Options;                                           // 0x0008(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TwistOrientation;                                  // 0x0020(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TwistAngle;                                        // 0x0080(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TwistExtent;                                       // 0x0084(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0088(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshDeformFunctions_ApplyTwistWarpToMesh) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshDeformFunctions_ApplyTwistWarpToMesh");
static_assert(sizeof(GeometryScriptLibrary_MeshDeformFunctions_ApplyTwistWarpToMesh) == 0x0000A0, "Wrong size on GeometryScriptLibrary_MeshDeformFunctions_ApplyTwistWarpToMesh");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyTwistWarpToMesh, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyTwistWarpToMesh::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyTwistWarpToMesh, Options) == 0x000008, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyTwistWarpToMesh::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyTwistWarpToMesh, TwistOrientation) == 0x000020, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyTwistWarpToMesh::TwistOrientation' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyTwistWarpToMesh, TwistAngle) == 0x000080, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyTwistWarpToMesh::TwistAngle' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyTwistWarpToMesh, TwistExtent) == 0x000084, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyTwistWarpToMesh::TwistExtent' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyTwistWarpToMesh, Debug) == 0x000088, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyTwistWarpToMesh::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshDeformFunctions_ApplyTwistWarpToMesh, ReturnValue) == 0x000090, "Member 'GeometryScriptLibrary_MeshDeformFunctions_ApplyTwistWarpToMesh::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshGeodesicFunctions.CreateSurfacePath
// 0x0078 (0x0078 - 0x0000)
struct GeometryScriptLibrary_MeshGeodesicFunctions_CreateSurfacePath final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartTriangleID;                                   // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                StartBaryCoords;                                   // 0x0028(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPathLength;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptPolyPath                SurfacePath;                                       // 0x0048(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          bFoundErrors;                                      // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0068(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshGeodesicFunctions_CreateSurfacePath) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshGeodesicFunctions_CreateSurfacePath");
static_assert(sizeof(GeometryScriptLibrary_MeshGeodesicFunctions_CreateSurfacePath) == 0x000078, "Wrong size on GeometryScriptLibrary_MeshGeodesicFunctions_CreateSurfacePath");
static_assert(offsetof(GeometryScriptLibrary_MeshGeodesicFunctions_CreateSurfacePath, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshGeodesicFunctions_CreateSurfacePath::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshGeodesicFunctions_CreateSurfacePath, Direction) == 0x000008, "Member 'GeometryScriptLibrary_MeshGeodesicFunctions_CreateSurfacePath::Direction' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshGeodesicFunctions_CreateSurfacePath, StartTriangleID) == 0x000020, "Member 'GeometryScriptLibrary_MeshGeodesicFunctions_CreateSurfacePath::StartTriangleID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshGeodesicFunctions_CreateSurfacePath, StartBaryCoords) == 0x000028, "Member 'GeometryScriptLibrary_MeshGeodesicFunctions_CreateSurfacePath::StartBaryCoords' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshGeodesicFunctions_CreateSurfacePath, MaxPathLength) == 0x000040, "Member 'GeometryScriptLibrary_MeshGeodesicFunctions_CreateSurfacePath::MaxPathLength' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshGeodesicFunctions_CreateSurfacePath, SurfacePath) == 0x000048, "Member 'GeometryScriptLibrary_MeshGeodesicFunctions_CreateSurfacePath::SurfacePath' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshGeodesicFunctions_CreateSurfacePath, bFoundErrors) == 0x000060, "Member 'GeometryScriptLibrary_MeshGeodesicFunctions_CreateSurfacePath::bFoundErrors' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshGeodesicFunctions_CreateSurfacePath, Debug) == 0x000068, "Member 'GeometryScriptLibrary_MeshGeodesicFunctions_CreateSurfacePath::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshGeodesicFunctions_CreateSurfacePath, ReturnValue) == 0x000070, "Member 'GeometryScriptLibrary_MeshGeodesicFunctions_CreateSurfacePath::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshGeodesicFunctions.GetShortestSurfacePath
// 0x0078 (0x0078 - 0x0000)
struct GeometryScriptLibrary_MeshGeodesicFunctions_GetShortestSurfacePath final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartTriangleID;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                StartBaryCoords;                                   // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndTriangleID;                                     // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                EndBaryCoords;                                     // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptPolyPath                ShortestPath;                                      // 0x0048(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          bFoundErrors;                                      // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0068(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshGeodesicFunctions_GetShortestSurfacePath) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshGeodesicFunctions_GetShortestSurfacePath");
static_assert(sizeof(GeometryScriptLibrary_MeshGeodesicFunctions_GetShortestSurfacePath) == 0x000078, "Wrong size on GeometryScriptLibrary_MeshGeodesicFunctions_GetShortestSurfacePath");
static_assert(offsetof(GeometryScriptLibrary_MeshGeodesicFunctions_GetShortestSurfacePath, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshGeodesicFunctions_GetShortestSurfacePath::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshGeodesicFunctions_GetShortestSurfacePath, StartTriangleID) == 0x000008, "Member 'GeometryScriptLibrary_MeshGeodesicFunctions_GetShortestSurfacePath::StartTriangleID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshGeodesicFunctions_GetShortestSurfacePath, StartBaryCoords) == 0x000010, "Member 'GeometryScriptLibrary_MeshGeodesicFunctions_GetShortestSurfacePath::StartBaryCoords' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshGeodesicFunctions_GetShortestSurfacePath, EndTriangleID) == 0x000028, "Member 'GeometryScriptLibrary_MeshGeodesicFunctions_GetShortestSurfacePath::EndTriangleID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshGeodesicFunctions_GetShortestSurfacePath, EndBaryCoords) == 0x000030, "Member 'GeometryScriptLibrary_MeshGeodesicFunctions_GetShortestSurfacePath::EndBaryCoords' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshGeodesicFunctions_GetShortestSurfacePath, ShortestPath) == 0x000048, "Member 'GeometryScriptLibrary_MeshGeodesicFunctions_GetShortestSurfacePath::ShortestPath' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshGeodesicFunctions_GetShortestSurfacePath, bFoundErrors) == 0x000060, "Member 'GeometryScriptLibrary_MeshGeodesicFunctions_GetShortestSurfacePath::bFoundErrors' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshGeodesicFunctions_GetShortestSurfacePath, Debug) == 0x000068, "Member 'GeometryScriptLibrary_MeshGeodesicFunctions_GetShortestSurfacePath::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshGeodesicFunctions_GetShortestSurfacePath, ReturnValue) == 0x000070, "Member 'GeometryScriptLibrary_MeshGeodesicFunctions_GetShortestSurfacePath::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshGeodesicFunctions.GetShortestVertexPath
// 0x0040 (0x0040 - 0x0000)
struct GeometryScriptLibrary_MeshGeodesicFunctions_GetShortestVertexPath final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartVertexID;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndVertexID;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptIndexList               VertexIDList;                                      // 0x0010(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          bFoundErrors;                                      // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshGeodesicFunctions_GetShortestVertexPath) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshGeodesicFunctions_GetShortestVertexPath");
static_assert(sizeof(GeometryScriptLibrary_MeshGeodesicFunctions_GetShortestVertexPath) == 0x000040, "Wrong size on GeometryScriptLibrary_MeshGeodesicFunctions_GetShortestVertexPath");
static_assert(offsetof(GeometryScriptLibrary_MeshGeodesicFunctions_GetShortestVertexPath, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshGeodesicFunctions_GetShortestVertexPath::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshGeodesicFunctions_GetShortestVertexPath, StartVertexID) == 0x000008, "Member 'GeometryScriptLibrary_MeshGeodesicFunctions_GetShortestVertexPath::StartVertexID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshGeodesicFunctions_GetShortestVertexPath, EndVertexID) == 0x00000C, "Member 'GeometryScriptLibrary_MeshGeodesicFunctions_GetShortestVertexPath::EndVertexID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshGeodesicFunctions_GetShortestVertexPath, VertexIDList) == 0x000010, "Member 'GeometryScriptLibrary_MeshGeodesicFunctions_GetShortestVertexPath::VertexIDList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshGeodesicFunctions_GetShortestVertexPath, bFoundErrors) == 0x000028, "Member 'GeometryScriptLibrary_MeshGeodesicFunctions_GetShortestVertexPath::bFoundErrors' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshGeodesicFunctions_GetShortestVertexPath, Debug) == 0x000030, "Member 'GeometryScriptLibrary_MeshGeodesicFunctions_GetShortestVertexPath::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshGeodesicFunctions_GetShortestVertexPath, ReturnValue) == 0x000038, "Member 'GeometryScriptLibrary_MeshGeodesicFunctions_GetShortestVertexPath::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshMaterialFunctions.ClearMaterialIDs
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_MeshMaterialFunctions_ClearMaterialIDs final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClearValue;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshMaterialFunctions_ClearMaterialIDs) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshMaterialFunctions_ClearMaterialIDs");
static_assert(sizeof(GeometryScriptLibrary_MeshMaterialFunctions_ClearMaterialIDs) == 0x000020, "Wrong size on GeometryScriptLibrary_MeshMaterialFunctions_ClearMaterialIDs");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_ClearMaterialIDs, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_ClearMaterialIDs::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_ClearMaterialIDs, ClearValue) == 0x000008, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_ClearMaterialIDs::ClearValue' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_ClearMaterialIDs, Debug) == 0x000010, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_ClearMaterialIDs::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_ClearMaterialIDs, ReturnValue) == 0x000018, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_ClearMaterialIDs::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshMaterialFunctions.CompactMaterialIDs
// 0x0038 (0x0038 - 0x0000)
struct GeometryScriptLibrary_MeshMaterialFunctions_CompactMaterialIDs final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             SourceMaterialList;                                // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             CompactedMaterialList;                             // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshMaterialFunctions_CompactMaterialIDs) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshMaterialFunctions_CompactMaterialIDs");
static_assert(sizeof(GeometryScriptLibrary_MeshMaterialFunctions_CompactMaterialIDs) == 0x000038, "Wrong size on GeometryScriptLibrary_MeshMaterialFunctions_CompactMaterialIDs");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_CompactMaterialIDs, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_CompactMaterialIDs::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_CompactMaterialIDs, SourceMaterialList) == 0x000008, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_CompactMaterialIDs::SourceMaterialList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_CompactMaterialIDs, CompactedMaterialList) == 0x000018, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_CompactMaterialIDs::CompactedMaterialList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_CompactMaterialIDs, Debug) == 0x000028, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_CompactMaterialIDs::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_CompactMaterialIDs, ReturnValue) == 0x000030, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_CompactMaterialIDs::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshMaterialFunctions.DeleteTrianglesByMaterialID
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_MeshMaterialFunctions_DeleteTrianglesByMaterialID final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialID;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumDeleted;                                        // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeferChangeNotifications;                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshMaterialFunctions_DeleteTrianglesByMaterialID) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshMaterialFunctions_DeleteTrianglesByMaterialID");
static_assert(sizeof(GeometryScriptLibrary_MeshMaterialFunctions_DeleteTrianglesByMaterialID) == 0x000028, "Wrong size on GeometryScriptLibrary_MeshMaterialFunctions_DeleteTrianglesByMaterialID");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_DeleteTrianglesByMaterialID, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_DeleteTrianglesByMaterialID::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_DeleteTrianglesByMaterialID, MaterialID) == 0x000008, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_DeleteTrianglesByMaterialID::MaterialID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_DeleteTrianglesByMaterialID, NumDeleted) == 0x00000C, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_DeleteTrianglesByMaterialID::NumDeleted' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_DeleteTrianglesByMaterialID, bDeferChangeNotifications) == 0x000010, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_DeleteTrianglesByMaterialID::bDeferChangeNotifications' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_DeleteTrianglesByMaterialID, Debug) == 0x000018, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_DeleteTrianglesByMaterialID::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_DeleteTrianglesByMaterialID, ReturnValue) == 0x000020, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_DeleteTrianglesByMaterialID::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshMaterialFunctions.EnableMaterialIDs
// 0x0018 (0x0018 - 0x0000)
struct GeometryScriptLibrary_MeshMaterialFunctions_EnableMaterialIDs final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshMaterialFunctions_EnableMaterialIDs) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshMaterialFunctions_EnableMaterialIDs");
static_assert(sizeof(GeometryScriptLibrary_MeshMaterialFunctions_EnableMaterialIDs) == 0x000018, "Wrong size on GeometryScriptLibrary_MeshMaterialFunctions_EnableMaterialIDs");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_EnableMaterialIDs, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_EnableMaterialIDs::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_EnableMaterialIDs, Debug) == 0x000008, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_EnableMaterialIDs::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_EnableMaterialIDs, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_EnableMaterialIDs::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshMaterialFunctions.GetAllTriangleMaterialIDs
// 0x0030 (0x0030 - 0x0000)
struct GeometryScriptLibrary_MeshMaterialFunctions_GetAllTriangleMaterialIDs final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptIndexList               MaterialIDList;                                    // 0x0008(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          bHasMaterialIDs;                                   // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshMaterialFunctions_GetAllTriangleMaterialIDs) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshMaterialFunctions_GetAllTriangleMaterialIDs");
static_assert(sizeof(GeometryScriptLibrary_MeshMaterialFunctions_GetAllTriangleMaterialIDs) == 0x000030, "Wrong size on GeometryScriptLibrary_MeshMaterialFunctions_GetAllTriangleMaterialIDs");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_GetAllTriangleMaterialIDs, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_GetAllTriangleMaterialIDs::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_GetAllTriangleMaterialIDs, MaterialIDList) == 0x000008, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_GetAllTriangleMaterialIDs::MaterialIDList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_GetAllTriangleMaterialIDs, bHasMaterialIDs) == 0x000020, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_GetAllTriangleMaterialIDs::bHasMaterialIDs' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_GetAllTriangleMaterialIDs, ReturnValue) == 0x000028, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_GetAllTriangleMaterialIDs::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshMaterialFunctions.GetMaterialIDsOfTriangles
// 0x0048 (0x0048 - 0x0000)
struct GeometryScriptLibrary_MeshMaterialFunctions_GetMaterialIDsOfTriangles final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptIndexList               TriangleIDList;                                    // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptIndexList               MaterialIDList;                                    // 0x0020(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshMaterialFunctions_GetMaterialIDsOfTriangles) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshMaterialFunctions_GetMaterialIDsOfTriangles");
static_assert(sizeof(GeometryScriptLibrary_MeshMaterialFunctions_GetMaterialIDsOfTriangles) == 0x000048, "Wrong size on GeometryScriptLibrary_MeshMaterialFunctions_GetMaterialIDsOfTriangles");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_GetMaterialIDsOfTriangles, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_GetMaterialIDsOfTriangles::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_GetMaterialIDsOfTriangles, TriangleIDList) == 0x000008, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_GetMaterialIDsOfTriangles::TriangleIDList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_GetMaterialIDsOfTriangles, MaterialIDList) == 0x000020, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_GetMaterialIDsOfTriangles::MaterialIDList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_GetMaterialIDsOfTriangles, Debug) == 0x000038, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_GetMaterialIDsOfTriangles::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_GetMaterialIDsOfTriangles, ReturnValue) == 0x000040, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_GetMaterialIDsOfTriangles::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshMaterialFunctions.GetMaxMaterialID
// 0x0010 (0x0010 - 0x0000)
struct GeometryScriptLibrary_MeshMaterialFunctions_GetMaxMaterialID final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasMaterialIDs;                                   // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshMaterialFunctions_GetMaxMaterialID) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshMaterialFunctions_GetMaxMaterialID");
static_assert(sizeof(GeometryScriptLibrary_MeshMaterialFunctions_GetMaxMaterialID) == 0x000010, "Wrong size on GeometryScriptLibrary_MeshMaterialFunctions_GetMaxMaterialID");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_GetMaxMaterialID, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_GetMaxMaterialID::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_GetMaxMaterialID, bHasMaterialIDs) == 0x000008, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_GetMaxMaterialID::bHasMaterialIDs' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_GetMaxMaterialID, ReturnValue) == 0x00000C, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_GetMaxMaterialID::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshMaterialFunctions.GetTriangleMaterialID
// 0x0018 (0x0018 - 0x0000)
struct GeometryScriptLibrary_MeshMaterialFunctions_GetTriangleMaterialID final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TriangleID;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValidTriangle;                                  // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshMaterialFunctions_GetTriangleMaterialID) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshMaterialFunctions_GetTriangleMaterialID");
static_assert(sizeof(GeometryScriptLibrary_MeshMaterialFunctions_GetTriangleMaterialID) == 0x000018, "Wrong size on GeometryScriptLibrary_MeshMaterialFunctions_GetTriangleMaterialID");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_GetTriangleMaterialID, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_GetTriangleMaterialID::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_GetTriangleMaterialID, TriangleID) == 0x000008, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_GetTriangleMaterialID::TriangleID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_GetTriangleMaterialID, bIsValidTriangle) == 0x00000C, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_GetTriangleMaterialID::bIsValidTriangle' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_GetTriangleMaterialID, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_GetTriangleMaterialID::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshMaterialFunctions.GetTrianglesByMaterialID
// 0x0038 (0x0038 - 0x0000)
struct GeometryScriptLibrary_MeshMaterialFunctions_GetTrianglesByMaterialID final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialID;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptIndexList               TriangleIDList;                                    // 0x0010(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshMaterialFunctions_GetTrianglesByMaterialID) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshMaterialFunctions_GetTrianglesByMaterialID");
static_assert(sizeof(GeometryScriptLibrary_MeshMaterialFunctions_GetTrianglesByMaterialID) == 0x000038, "Wrong size on GeometryScriptLibrary_MeshMaterialFunctions_GetTrianglesByMaterialID");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_GetTrianglesByMaterialID, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_GetTrianglesByMaterialID::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_GetTrianglesByMaterialID, MaterialID) == 0x000008, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_GetTrianglesByMaterialID::MaterialID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_GetTrianglesByMaterialID, TriangleIDList) == 0x000010, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_GetTrianglesByMaterialID::TriangleIDList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_GetTrianglesByMaterialID, Debug) == 0x000028, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_GetTrianglesByMaterialID::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_GetTrianglesByMaterialID, ReturnValue) == 0x000030, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_GetTrianglesByMaterialID::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshMaterialFunctions.RemapMaterialIDs
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_MeshMaterialFunctions_RemapMaterialIDs final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FromMaterialID;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ToMaterialID;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshMaterialFunctions_RemapMaterialIDs) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshMaterialFunctions_RemapMaterialIDs");
static_assert(sizeof(GeometryScriptLibrary_MeshMaterialFunctions_RemapMaterialIDs) == 0x000020, "Wrong size on GeometryScriptLibrary_MeshMaterialFunctions_RemapMaterialIDs");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_RemapMaterialIDs, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_RemapMaterialIDs::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_RemapMaterialIDs, FromMaterialID) == 0x000008, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_RemapMaterialIDs::FromMaterialID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_RemapMaterialIDs, ToMaterialID) == 0x00000C, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_RemapMaterialIDs::ToMaterialID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_RemapMaterialIDs, Debug) == 0x000010, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_RemapMaterialIDs::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_RemapMaterialIDs, ReturnValue) == 0x000018, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_RemapMaterialIDs::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshMaterialFunctions.RemapToNewMaterialIDsByMaterial
// 0x0040 (0x0040 - 0x0000)
struct GeometryScriptLibrary_MeshMaterialFunctions_RemapToNewMaterialIDsByMaterial final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             FromMaterialList;                                  // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             ToMaterialList;                                    // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         MissingMaterialID;                                 // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshMaterialFunctions_RemapToNewMaterialIDsByMaterial) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshMaterialFunctions_RemapToNewMaterialIDsByMaterial");
static_assert(sizeof(GeometryScriptLibrary_MeshMaterialFunctions_RemapToNewMaterialIDsByMaterial) == 0x000040, "Wrong size on GeometryScriptLibrary_MeshMaterialFunctions_RemapToNewMaterialIDsByMaterial");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_RemapToNewMaterialIDsByMaterial, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_RemapToNewMaterialIDsByMaterial::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_RemapToNewMaterialIDsByMaterial, FromMaterialList) == 0x000008, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_RemapToNewMaterialIDsByMaterial::FromMaterialList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_RemapToNewMaterialIDsByMaterial, ToMaterialList) == 0x000018, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_RemapToNewMaterialIDsByMaterial::ToMaterialList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_RemapToNewMaterialIDsByMaterial, MissingMaterialID) == 0x000028, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_RemapToNewMaterialIDsByMaterial::MissingMaterialID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_RemapToNewMaterialIDsByMaterial, Debug) == 0x000030, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_RemapToNewMaterialIDsByMaterial::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_RemapToNewMaterialIDsByMaterial, ReturnValue) == 0x000038, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_RemapToNewMaterialIDsByMaterial::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshMaterialFunctions.SetAllTriangleMaterialIDs
// 0x0038 (0x0038 - 0x0000)
struct GeometryScriptLibrary_MeshMaterialFunctions_SetAllTriangleMaterialIDs final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptIndexList               TriangleMaterialIDList;                            // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	bool                                          bDeferChangeNotifications;                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshMaterialFunctions_SetAllTriangleMaterialIDs) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshMaterialFunctions_SetAllTriangleMaterialIDs");
static_assert(sizeof(GeometryScriptLibrary_MeshMaterialFunctions_SetAllTriangleMaterialIDs) == 0x000038, "Wrong size on GeometryScriptLibrary_MeshMaterialFunctions_SetAllTriangleMaterialIDs");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_SetAllTriangleMaterialIDs, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_SetAllTriangleMaterialIDs::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_SetAllTriangleMaterialIDs, TriangleMaterialIDList) == 0x000008, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_SetAllTriangleMaterialIDs::TriangleMaterialIDList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_SetAllTriangleMaterialIDs, bDeferChangeNotifications) == 0x000020, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_SetAllTriangleMaterialIDs::bDeferChangeNotifications' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_SetAllTriangleMaterialIDs, Debug) == 0x000028, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_SetAllTriangleMaterialIDs::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_SetAllTriangleMaterialIDs, ReturnValue) == 0x000030, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_SetAllTriangleMaterialIDs::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshMaterialFunctions.SetMaterialIDForMeshSelection
// 0x0030 (0x0030 - 0x0000)
struct GeometryScriptLibrary_MeshMaterialFunctions_SetMaterialIDForMeshSelection final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	int32                                         MaterialID;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeferChangeNotifications;                         // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshMaterialFunctions_SetMaterialIDForMeshSelection) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshMaterialFunctions_SetMaterialIDForMeshSelection");
static_assert(sizeof(GeometryScriptLibrary_MeshMaterialFunctions_SetMaterialIDForMeshSelection) == 0x000030, "Wrong size on GeometryScriptLibrary_MeshMaterialFunctions_SetMaterialIDForMeshSelection");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_SetMaterialIDForMeshSelection, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_SetMaterialIDForMeshSelection::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_SetMaterialIDForMeshSelection, Selection) == 0x000008, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_SetMaterialIDForMeshSelection::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_SetMaterialIDForMeshSelection, MaterialID) == 0x000018, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_SetMaterialIDForMeshSelection::MaterialID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_SetMaterialIDForMeshSelection, bDeferChangeNotifications) == 0x00001C, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_SetMaterialIDForMeshSelection::bDeferChangeNotifications' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_SetMaterialIDForMeshSelection, Debug) == 0x000020, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_SetMaterialIDForMeshSelection::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_SetMaterialIDForMeshSelection, ReturnValue) == 0x000028, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_SetMaterialIDForMeshSelection::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshMaterialFunctions.SetMaterialIDOnTriangles
// 0x0038 (0x0038 - 0x0000)
struct GeometryScriptLibrary_MeshMaterialFunctions_SetMaterialIDOnTriangles final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptIndexList               TriangleIDList;                                    // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	int32                                         MaterialID;                                        // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeferChangeNotifications;                         // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshMaterialFunctions_SetMaterialIDOnTriangles) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshMaterialFunctions_SetMaterialIDOnTriangles");
static_assert(sizeof(GeometryScriptLibrary_MeshMaterialFunctions_SetMaterialIDOnTriangles) == 0x000038, "Wrong size on GeometryScriptLibrary_MeshMaterialFunctions_SetMaterialIDOnTriangles");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_SetMaterialIDOnTriangles, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_SetMaterialIDOnTriangles::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_SetMaterialIDOnTriangles, TriangleIDList) == 0x000008, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_SetMaterialIDOnTriangles::TriangleIDList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_SetMaterialIDOnTriangles, MaterialID) == 0x000020, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_SetMaterialIDOnTriangles::MaterialID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_SetMaterialIDOnTriangles, bDeferChangeNotifications) == 0x000024, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_SetMaterialIDOnTriangles::bDeferChangeNotifications' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_SetMaterialIDOnTriangles, Debug) == 0x000028, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_SetMaterialIDOnTriangles::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_SetMaterialIDOnTriangles, ReturnValue) == 0x000030, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_SetMaterialIDOnTriangles::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshMaterialFunctions.SetPolygroupMaterialID
// 0x0030 (0x0030 - 0x0000)
struct GeometryScriptLibrary_MeshMaterialFunctions_SetPolygroupMaterialID final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptGroupLayer              GroupLayer;                                        // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         PolygroupID;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialID;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValidPolygroupID;                               // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeferChangeNotifications;                         // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshMaterialFunctions_SetPolygroupMaterialID) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshMaterialFunctions_SetPolygroupMaterialID");
static_assert(sizeof(GeometryScriptLibrary_MeshMaterialFunctions_SetPolygroupMaterialID) == 0x000030, "Wrong size on GeometryScriptLibrary_MeshMaterialFunctions_SetPolygroupMaterialID");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_SetPolygroupMaterialID, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_SetPolygroupMaterialID::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_SetPolygroupMaterialID, GroupLayer) == 0x000008, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_SetPolygroupMaterialID::GroupLayer' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_SetPolygroupMaterialID, PolygroupID) == 0x000010, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_SetPolygroupMaterialID::PolygroupID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_SetPolygroupMaterialID, MaterialID) == 0x000014, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_SetPolygroupMaterialID::MaterialID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_SetPolygroupMaterialID, bIsValidPolygroupID) == 0x000018, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_SetPolygroupMaterialID::bIsValidPolygroupID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_SetPolygroupMaterialID, bDeferChangeNotifications) == 0x000019, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_SetPolygroupMaterialID::bDeferChangeNotifications' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_SetPolygroupMaterialID, Debug) == 0x000020, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_SetPolygroupMaterialID::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_SetPolygroupMaterialID, ReturnValue) == 0x000028, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_SetPolygroupMaterialID::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshMaterialFunctions.SetTriangleMaterialID
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_MeshMaterialFunctions_SetTriangleMaterialID final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TriangleID;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialID;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValidTriangle;                                  // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeferChangeNotifications;                         // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshMaterialFunctions_SetTriangleMaterialID) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshMaterialFunctions_SetTriangleMaterialID");
static_assert(sizeof(GeometryScriptLibrary_MeshMaterialFunctions_SetTriangleMaterialID) == 0x000020, "Wrong size on GeometryScriptLibrary_MeshMaterialFunctions_SetTriangleMaterialID");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_SetTriangleMaterialID, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_SetTriangleMaterialID::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_SetTriangleMaterialID, TriangleID) == 0x000008, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_SetTriangleMaterialID::TriangleID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_SetTriangleMaterialID, MaterialID) == 0x00000C, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_SetTriangleMaterialID::MaterialID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_SetTriangleMaterialID, bIsValidTriangle) == 0x000010, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_SetTriangleMaterialID::bIsValidTriangle' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_SetTriangleMaterialID, bDeferChangeNotifications) == 0x000011, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_SetTriangleMaterialID::bDeferChangeNotifications' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshMaterialFunctions_SetTriangleMaterialID, ReturnValue) == 0x000018, "Member 'GeometryScriptLibrary_MeshMaterialFunctions_SetTriangleMaterialID::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshModelingFunctions.ApplyMeshBevelSelection
// 0x0040 (0x0040 - 0x0000)
struct GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshBevelSelection final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	EGeometryScriptMeshBevelSelectionMode         BevelMode;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptMeshBevelSelectionOptions BevelOptions;                                      // 0x001C(0x0014)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshBevelSelection) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshBevelSelection");
static_assert(sizeof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshBevelSelection) == 0x000040, "Wrong size on GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshBevelSelection");
static_assert(offsetof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshBevelSelection, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshBevelSelection::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshBevelSelection, Selection) == 0x000008, "Member 'GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshBevelSelection::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshBevelSelection, BevelMode) == 0x000018, "Member 'GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshBevelSelection::BevelMode' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshBevelSelection, BevelOptions) == 0x00001C, "Member 'GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshBevelSelection::BevelOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshBevelSelection, Debug) == 0x000030, "Member 'GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshBevelSelection::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshBevelSelection, ReturnValue) == 0x000038, "Member 'GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshBevelSelection::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshModelingFunctions.ApplyMeshDisconnectFaces
// 0x0030 (0x0030 - 0x0000)
struct GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshDisconnectFaces final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	bool                                          bAllowBowtiesInOutput;                             // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshDisconnectFaces) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshDisconnectFaces");
static_assert(sizeof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshDisconnectFaces) == 0x000030, "Wrong size on GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshDisconnectFaces");
static_assert(offsetof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshDisconnectFaces, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshDisconnectFaces::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshDisconnectFaces, Selection) == 0x000008, "Member 'GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshDisconnectFaces::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshDisconnectFaces, bAllowBowtiesInOutput) == 0x000018, "Member 'GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshDisconnectFaces::bAllowBowtiesInOutput' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshDisconnectFaces, Debug) == 0x000020, "Member 'GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshDisconnectFaces::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshDisconnectFaces, ReturnValue) == 0x000028, "Member 'GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshDisconnectFaces::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshModelingFunctions.ApplyMeshDuplicateFaces
// 0x0040 (0x0040 - 0x0000)
struct GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshDuplicateFaces final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           NewTriangles;                                      // 0x0018(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshEditPolygroupOptions GroupOptions;                                      // 0x0028(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshDuplicateFaces) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshDuplicateFaces");
static_assert(sizeof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshDuplicateFaces) == 0x000040, "Wrong size on GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshDuplicateFaces");
static_assert(offsetof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshDuplicateFaces, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshDuplicateFaces::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshDuplicateFaces, Selection) == 0x000008, "Member 'GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshDuplicateFaces::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshDuplicateFaces, NewTriangles) == 0x000018, "Member 'GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshDuplicateFaces::NewTriangles' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshDuplicateFaces, GroupOptions) == 0x000028, "Member 'GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshDuplicateFaces::GroupOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshDuplicateFaces, Debug) == 0x000030, "Member 'GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshDuplicateFaces::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshDuplicateFaces, ReturnValue) == 0x000038, "Member 'GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshDuplicateFaces::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshModelingFunctions.ApplyMeshExtrude_Compatibility_5p0
// 0x0040 (0x0040 - 0x0000)
struct GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshExtrude_Compatibility_5p0 final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshExtrudeOptions      Options;                                           // 0x0008(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshExtrude_Compatibility_5p0) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshExtrude_Compatibility_5p0");
static_assert(sizeof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshExtrude_Compatibility_5p0) == 0x000040, "Wrong size on GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshExtrude_Compatibility_5p0");
static_assert(offsetof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshExtrude_Compatibility_5p0, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshExtrude_Compatibility_5p0::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshExtrude_Compatibility_5p0, Options) == 0x000008, "Member 'GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshExtrude_Compatibility_5p0::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshExtrude_Compatibility_5p0, Debug) == 0x000030, "Member 'GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshExtrude_Compatibility_5p0::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshExtrude_Compatibility_5p0, ReturnValue) == 0x000038, "Member 'GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshExtrude_Compatibility_5p0::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshModelingFunctions.ApplyMeshInsetOutsetFaces
// 0x0048 (0x0048 - 0x0000)
struct GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshInsetOutsetFaces final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshInsetOutsetFacesOptions Options;                                           // 0x0008(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0028(0x0010)(Parm, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshInsetOutsetFaces) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshInsetOutsetFaces");
static_assert(sizeof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshInsetOutsetFaces) == 0x000048, "Wrong size on GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshInsetOutsetFaces");
static_assert(offsetof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshInsetOutsetFaces, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshInsetOutsetFaces::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshInsetOutsetFaces, Options) == 0x000008, "Member 'GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshInsetOutsetFaces::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshInsetOutsetFaces, Selection) == 0x000028, "Member 'GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshInsetOutsetFaces::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshInsetOutsetFaces, Debug) == 0x000038, "Member 'GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshInsetOutsetFaces::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshInsetOutsetFaces, ReturnValue) == 0x000040, "Member 'GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshInsetOutsetFaces::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshModelingFunctions.ApplyMeshLinearExtrudeFaces
// 0x0060 (0x0060 - 0x0000)
struct GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshLinearExtrudeFaces final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshLinearExtrudeOptions Options;                                           // 0x0008(0x0038)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0040(0x0010)(Parm, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0050(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshLinearExtrudeFaces) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshLinearExtrudeFaces");
static_assert(sizeof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshLinearExtrudeFaces) == 0x000060, "Wrong size on GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshLinearExtrudeFaces");
static_assert(offsetof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshLinearExtrudeFaces, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshLinearExtrudeFaces::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshLinearExtrudeFaces, Options) == 0x000008, "Member 'GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshLinearExtrudeFaces::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshLinearExtrudeFaces, Selection) == 0x000040, "Member 'GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshLinearExtrudeFaces::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshLinearExtrudeFaces, Debug) == 0x000050, "Member 'GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshLinearExtrudeFaces::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshLinearExtrudeFaces, ReturnValue) == 0x000058, "Member 'GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshLinearExtrudeFaces::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshModelingFunctions.ApplyMeshOffset
// 0x0030 (0x0030 - 0x0000)
struct GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshOffset final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshOffsetOptions       Options;                                           // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshOffset) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshOffset");
static_assert(sizeof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshOffset) == 0x000030, "Wrong size on GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshOffset");
static_assert(offsetof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshOffset, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshOffset::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshOffset, Options) == 0x000008, "Member 'GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshOffset::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshOffset, Debug) == 0x000020, "Member 'GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshOffset::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshOffset, ReturnValue) == 0x000028, "Member 'GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshOffset::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshModelingFunctions.ApplyMeshOffsetFaces
// 0x0040 (0x0040 - 0x0000)
struct GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshOffsetFaces final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshOffsetFacesOptions  Options;                                           // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0020(0x0010)(Parm, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshOffsetFaces) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshOffsetFaces");
static_assert(sizeof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshOffsetFaces) == 0x000040, "Wrong size on GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshOffsetFaces");
static_assert(offsetof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshOffsetFaces, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshOffsetFaces::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshOffsetFaces, Options) == 0x000008, "Member 'GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshOffsetFaces::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshOffsetFaces, Selection) == 0x000020, "Member 'GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshOffsetFaces::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshOffsetFaces, Debug) == 0x000030, "Member 'GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshOffsetFaces::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshOffsetFaces, ReturnValue) == 0x000038, "Member 'GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshOffsetFaces::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshModelingFunctions.ApplyMeshPolygroupBevel
// 0x00E0 (0x00E0 - 0x0000)
struct GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshPolygroupBevel final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptMeshBevelOptions        Options;                                           // 0x0010(0x00C0)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x00D0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x00D8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshPolygroupBevel) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshPolygroupBevel");
static_assert(sizeof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshPolygroupBevel) == 0x0000E0, "Wrong size on GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshPolygroupBevel");
static_assert(offsetof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshPolygroupBevel, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshPolygroupBevel::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshPolygroupBevel, Options) == 0x000010, "Member 'GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshPolygroupBevel::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshPolygroupBevel, Debug) == 0x0000D0, "Member 'GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshPolygroupBevel::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshPolygroupBevel, ReturnValue) == 0x0000D8, "Member 'GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshPolygroupBevel::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshModelingFunctions.ApplyMeshShell
// 0x0030 (0x0030 - 0x0000)
struct GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshShell final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshOffsetOptions       Options;                                           // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshShell) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshShell");
static_assert(sizeof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshShell) == 0x000030, "Wrong size on GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshShell");
static_assert(offsetof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshShell, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshShell::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshShell, Options) == 0x000008, "Member 'GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshShell::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshShell, Debug) == 0x000020, "Member 'GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshShell::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshShell, ReturnValue) == 0x000028, "Member 'GeometryScriptLibrary_MeshModelingFunctions_ApplyMeshShell::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshNormalsFunctions.AutoRepairNormals
// 0x0018 (0x0018 - 0x0000)
struct GeometryScriptLibrary_MeshNormalsFunctions_AutoRepairNormals final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshNormalsFunctions_AutoRepairNormals) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshNormalsFunctions_AutoRepairNormals");
static_assert(sizeof(GeometryScriptLibrary_MeshNormalsFunctions_AutoRepairNormals) == 0x000018, "Wrong size on GeometryScriptLibrary_MeshNormalsFunctions_AutoRepairNormals");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_AutoRepairNormals, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_AutoRepairNormals::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_AutoRepairNormals, Debug) == 0x000008, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_AutoRepairNormals::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_AutoRepairNormals, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_AutoRepairNormals::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshNormalsFunctions.ComputeSplitNormals
// 0x0030 (0x0030 - 0x0000)
struct GeometryScriptLibrary_MeshNormalsFunctions_ComputeSplitNormals final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptSplitNormalsOptions     SplitOptions;                                      // 0x0008(0x0014)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FGeometryScriptCalculateNormalsOptions CalculateOptions;                                  // 0x001C(0x0002)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshNormalsFunctions_ComputeSplitNormals) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshNormalsFunctions_ComputeSplitNormals");
static_assert(sizeof(GeometryScriptLibrary_MeshNormalsFunctions_ComputeSplitNormals) == 0x000030, "Wrong size on GeometryScriptLibrary_MeshNormalsFunctions_ComputeSplitNormals");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_ComputeSplitNormals, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_ComputeSplitNormals::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_ComputeSplitNormals, SplitOptions) == 0x000008, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_ComputeSplitNormals::SplitOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_ComputeSplitNormals, CalculateOptions) == 0x00001C, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_ComputeSplitNormals::CalculateOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_ComputeSplitNormals, Debug) == 0x000020, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_ComputeSplitNormals::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_ComputeSplitNormals, ReturnValue) == 0x000028, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_ComputeSplitNormals::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshNormalsFunctions.ComputeTangents
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_MeshNormalsFunctions_ComputeTangents final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptTangentsOptions         Options;                                           // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshNormalsFunctions_ComputeTangents) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshNormalsFunctions_ComputeTangents");
static_assert(sizeof(GeometryScriptLibrary_MeshNormalsFunctions_ComputeTangents) == 0x000020, "Wrong size on GeometryScriptLibrary_MeshNormalsFunctions_ComputeTangents");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_ComputeTangents, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_ComputeTangents::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_ComputeTangents, Options) == 0x000008, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_ComputeTangents::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_ComputeTangents, Debug) == 0x000010, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_ComputeTangents::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_ComputeTangents, ReturnValue) == 0x000018, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_ComputeTangents::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshNormalsFunctions.DiscardTangents
// 0x0018 (0x0018 - 0x0000)
struct GeometryScriptLibrary_MeshNormalsFunctions_DiscardTangents final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshNormalsFunctions_DiscardTangents) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshNormalsFunctions_DiscardTangents");
static_assert(sizeof(GeometryScriptLibrary_MeshNormalsFunctions_DiscardTangents) == 0x000018, "Wrong size on GeometryScriptLibrary_MeshNormalsFunctions_DiscardTangents");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_DiscardTangents, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_DiscardTangents::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_DiscardTangents, Debug) == 0x000008, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_DiscardTangents::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_DiscardTangents, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_DiscardTangents::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshNormalsFunctions.FlipNormals
// 0x0018 (0x0018 - 0x0000)
struct GeometryScriptLibrary_MeshNormalsFunctions_FlipNormals final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshNormalsFunctions_FlipNormals) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshNormalsFunctions_FlipNormals");
static_assert(sizeof(GeometryScriptLibrary_MeshNormalsFunctions_FlipNormals) == 0x000018, "Wrong size on GeometryScriptLibrary_MeshNormalsFunctions_FlipNormals");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_FlipNormals, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_FlipNormals::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_FlipNormals, Debug) == 0x000008, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_FlipNormals::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_FlipNormals, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_FlipNormals::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshNormalsFunctions.GetMeshHasTangents
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_MeshNormalsFunctions_GetMeshHasTangents final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasTangents;                                      // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshNormalsFunctions_GetMeshHasTangents) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshNormalsFunctions_GetMeshHasTangents");
static_assert(sizeof(GeometryScriptLibrary_MeshNormalsFunctions_GetMeshHasTangents) == 0x000020, "Wrong size on GeometryScriptLibrary_MeshNormalsFunctions_GetMeshHasTangents");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_GetMeshHasTangents, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_GetMeshHasTangents::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_GetMeshHasTangents, bHasTangents) == 0x000008, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_GetMeshHasTangents::bHasTangents' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_GetMeshHasTangents, Debug) == 0x000010, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_GetMeshHasTangents::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_GetMeshHasTangents, ReturnValue) == 0x000018, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_GetMeshHasTangents::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshNormalsFunctions.GetMeshPerVertexNormals
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_MeshNormalsFunctions_GetMeshPerVertexNormals final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptVectorList              NormalList;                                        // 0x0008(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          bIsValidNormalSet;                                 // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasVertexIDGaps;                                  // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAverageSplitVertexValues;                         // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshNormalsFunctions_GetMeshPerVertexNormals) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshNormalsFunctions_GetMeshPerVertexNormals");
static_assert(sizeof(GeometryScriptLibrary_MeshNormalsFunctions_GetMeshPerVertexNormals) == 0x000028, "Wrong size on GeometryScriptLibrary_MeshNormalsFunctions_GetMeshPerVertexNormals");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_GetMeshPerVertexNormals, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_GetMeshPerVertexNormals::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_GetMeshPerVertexNormals, NormalList) == 0x000008, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_GetMeshPerVertexNormals::NormalList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_GetMeshPerVertexNormals, bIsValidNormalSet) == 0x000018, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_GetMeshPerVertexNormals::bIsValidNormalSet' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_GetMeshPerVertexNormals, bHasVertexIDGaps) == 0x000019, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_GetMeshPerVertexNormals::bHasVertexIDGaps' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_GetMeshPerVertexNormals, bAverageSplitVertexValues) == 0x00001A, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_GetMeshPerVertexNormals::bAverageSplitVertexValues' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_GetMeshPerVertexNormals, ReturnValue) == 0x000020, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_GetMeshPerVertexNormals::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshNormalsFunctions.GetMeshPerVertexTangents
// 0x0038 (0x0038 - 0x0000)
struct GeometryScriptLibrary_MeshNormalsFunctions_GetMeshPerVertexTangents final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptVectorList              TangentXList;                                      // 0x0008(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FGeometryScriptVectorList              TangentYList;                                      // 0x0018(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          bIsValidTangentSet;                                // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasVertexIDGaps;                                  // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAverageSplitVertexValues;                         // 0x002A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshNormalsFunctions_GetMeshPerVertexTangents) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshNormalsFunctions_GetMeshPerVertexTangents");
static_assert(sizeof(GeometryScriptLibrary_MeshNormalsFunctions_GetMeshPerVertexTangents) == 0x000038, "Wrong size on GeometryScriptLibrary_MeshNormalsFunctions_GetMeshPerVertexTangents");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_GetMeshPerVertexTangents, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_GetMeshPerVertexTangents::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_GetMeshPerVertexTangents, TangentXList) == 0x000008, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_GetMeshPerVertexTangents::TangentXList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_GetMeshPerVertexTangents, TangentYList) == 0x000018, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_GetMeshPerVertexTangents::TangentYList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_GetMeshPerVertexTangents, bIsValidTangentSet) == 0x000028, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_GetMeshPerVertexTangents::bIsValidTangentSet' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_GetMeshPerVertexTangents, bHasVertexIDGaps) == 0x000029, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_GetMeshPerVertexTangents::bHasVertexIDGaps' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_GetMeshPerVertexTangents, bAverageSplitVertexValues) == 0x00002A, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_GetMeshPerVertexTangents::bAverageSplitVertexValues' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_GetMeshPerVertexTangents, ReturnValue) == 0x000030, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_GetMeshPerVertexTangents::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshNormalsFunctions.RecomputeNormals
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_MeshNormalsFunctions_RecomputeNormals final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptCalculateNormalsOptions CalculateOptions;                                  // 0x0008(0x0002)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bDeferChangeNotifications;                         // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshNormalsFunctions_RecomputeNormals) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshNormalsFunctions_RecomputeNormals");
static_assert(sizeof(GeometryScriptLibrary_MeshNormalsFunctions_RecomputeNormals) == 0x000020, "Wrong size on GeometryScriptLibrary_MeshNormalsFunctions_RecomputeNormals");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_RecomputeNormals, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_RecomputeNormals::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_RecomputeNormals, CalculateOptions) == 0x000008, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_RecomputeNormals::CalculateOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_RecomputeNormals, bDeferChangeNotifications) == 0x00000A, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_RecomputeNormals::bDeferChangeNotifications' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_RecomputeNormals, Debug) == 0x000010, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_RecomputeNormals::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_RecomputeNormals, ReturnValue) == 0x000018, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_RecomputeNormals::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshNormalsFunctions.RecomputeNormalsForMeshSelection
// 0x0030 (0x0030 - 0x0000)
struct GeometryScriptLibrary_MeshNormalsFunctions_RecomputeNormalsForMeshSelection final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptCalculateNormalsOptions CalculateOptions;                                  // 0x0018(0x0002)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bDeferChangeNotifications;                         // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshNormalsFunctions_RecomputeNormalsForMeshSelection) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshNormalsFunctions_RecomputeNormalsForMeshSelection");
static_assert(sizeof(GeometryScriptLibrary_MeshNormalsFunctions_RecomputeNormalsForMeshSelection) == 0x000030, "Wrong size on GeometryScriptLibrary_MeshNormalsFunctions_RecomputeNormalsForMeshSelection");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_RecomputeNormalsForMeshSelection, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_RecomputeNormalsForMeshSelection::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_RecomputeNormalsForMeshSelection, Selection) == 0x000008, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_RecomputeNormalsForMeshSelection::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_RecomputeNormalsForMeshSelection, CalculateOptions) == 0x000018, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_RecomputeNormalsForMeshSelection::CalculateOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_RecomputeNormalsForMeshSelection, bDeferChangeNotifications) == 0x00001A, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_RecomputeNormalsForMeshSelection::bDeferChangeNotifications' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_RecomputeNormalsForMeshSelection, Debug) == 0x000020, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_RecomputeNormalsForMeshSelection::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_RecomputeNormalsForMeshSelection, ReturnValue) == 0x000028, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_RecomputeNormalsForMeshSelection::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshNormalsFunctions.SetMeshPerVertexNormals
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_MeshNormalsFunctions_SetMeshPerVertexNormals final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptVectorList              VertexNormalList;                                  // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshNormalsFunctions_SetMeshPerVertexNormals) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshNormalsFunctions_SetMeshPerVertexNormals");
static_assert(sizeof(GeometryScriptLibrary_MeshNormalsFunctions_SetMeshPerVertexNormals) == 0x000028, "Wrong size on GeometryScriptLibrary_MeshNormalsFunctions_SetMeshPerVertexNormals");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_SetMeshPerVertexNormals, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_SetMeshPerVertexNormals::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_SetMeshPerVertexNormals, VertexNormalList) == 0x000008, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_SetMeshPerVertexNormals::VertexNormalList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_SetMeshPerVertexNormals, Debug) == 0x000018, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_SetMeshPerVertexNormals::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_SetMeshPerVertexNormals, ReturnValue) == 0x000020, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_SetMeshPerVertexNormals::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshNormalsFunctions.SetMeshPerVertexTangents
// 0x0038 (0x0038 - 0x0000)
struct GeometryScriptLibrary_MeshNormalsFunctions_SetMeshPerVertexTangents final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptVectorList              TangentXList;                                      // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptVectorList              TangentYList;                                      // 0x0018(0x0010)(Parm, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshNormalsFunctions_SetMeshPerVertexTangents) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshNormalsFunctions_SetMeshPerVertexTangents");
static_assert(sizeof(GeometryScriptLibrary_MeshNormalsFunctions_SetMeshPerVertexTangents) == 0x000038, "Wrong size on GeometryScriptLibrary_MeshNormalsFunctions_SetMeshPerVertexTangents");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_SetMeshPerVertexTangents, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_SetMeshPerVertexTangents::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_SetMeshPerVertexTangents, TangentXList) == 0x000008, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_SetMeshPerVertexTangents::TangentXList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_SetMeshPerVertexTangents, TangentYList) == 0x000018, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_SetMeshPerVertexTangents::TangentYList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_SetMeshPerVertexTangents, Debug) == 0x000028, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_SetMeshPerVertexTangents::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_SetMeshPerVertexTangents, ReturnValue) == 0x000030, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_SetMeshPerVertexTangents::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshNormalsFunctions.SetMeshTriangleNormals
// 0x0068 (0x0068 - 0x0000)
struct GeometryScriptLibrary_MeshNormalsFunctions_SetMeshTriangleNormals final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TriangleID;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptTriangle                Normals;                                           // 0x0010(0x0048)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsValidTriangle;                                  // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeferChangeNotifications;                         // 0x0059(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshNormalsFunctions_SetMeshTriangleNormals) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshNormalsFunctions_SetMeshTriangleNormals");
static_assert(sizeof(GeometryScriptLibrary_MeshNormalsFunctions_SetMeshTriangleNormals) == 0x000068, "Wrong size on GeometryScriptLibrary_MeshNormalsFunctions_SetMeshTriangleNormals");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_SetMeshTriangleNormals, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_SetMeshTriangleNormals::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_SetMeshTriangleNormals, TriangleID) == 0x000008, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_SetMeshTriangleNormals::TriangleID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_SetMeshTriangleNormals, Normals) == 0x000010, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_SetMeshTriangleNormals::Normals' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_SetMeshTriangleNormals, bIsValidTriangle) == 0x000058, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_SetMeshTriangleNormals::bIsValidTriangle' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_SetMeshTriangleNormals, bDeferChangeNotifications) == 0x000059, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_SetMeshTriangleNormals::bDeferChangeNotifications' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_SetMeshTriangleNormals, ReturnValue) == 0x000060, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_SetMeshTriangleNormals::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshNormalsFunctions.SetPerFaceNormals
// 0x0018 (0x0018 - 0x0000)
struct GeometryScriptLibrary_MeshNormalsFunctions_SetPerFaceNormals final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshNormalsFunctions_SetPerFaceNormals) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshNormalsFunctions_SetPerFaceNormals");
static_assert(sizeof(GeometryScriptLibrary_MeshNormalsFunctions_SetPerFaceNormals) == 0x000018, "Wrong size on GeometryScriptLibrary_MeshNormalsFunctions_SetPerFaceNormals");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_SetPerFaceNormals, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_SetPerFaceNormals::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_SetPerFaceNormals, Debug) == 0x000008, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_SetPerFaceNormals::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_SetPerFaceNormals, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_SetPerFaceNormals::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshNormalsFunctions.SetPerVertexNormals
// 0x0018 (0x0018 - 0x0000)
struct GeometryScriptLibrary_MeshNormalsFunctions_SetPerVertexNormals final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshNormalsFunctions_SetPerVertexNormals) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshNormalsFunctions_SetPerVertexNormals");
static_assert(sizeof(GeometryScriptLibrary_MeshNormalsFunctions_SetPerVertexNormals) == 0x000018, "Wrong size on GeometryScriptLibrary_MeshNormalsFunctions_SetPerVertexNormals");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_SetPerVertexNormals, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_SetPerVertexNormals::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_SetPerVertexNormals, Debug) == 0x000008, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_SetPerVertexNormals::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_SetPerVertexNormals, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_SetPerVertexNormals::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshNormalsFunctions.UpdateVertexNormal
// 0x0070 (0x0070 - 0x0000)
struct GeometryScriptLibrary_MeshNormalsFunctions_UpdateVertexNormal final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VertexID;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateNormal;                                     // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                NewNormal;                                         // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateTangents;                                   // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                NewTangentX;                                       // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NewTangentY;                                       // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValidVertex;                                    // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMergeSplitValues;                                 // 0x0061(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeferChangeNotifications;                         // 0x0062(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_63[0x5];                                       // 0x0063(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           ReturnValue;                                       // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshNormalsFunctions_UpdateVertexNormal) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshNormalsFunctions_UpdateVertexNormal");
static_assert(sizeof(GeometryScriptLibrary_MeshNormalsFunctions_UpdateVertexNormal) == 0x000070, "Wrong size on GeometryScriptLibrary_MeshNormalsFunctions_UpdateVertexNormal");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_UpdateVertexNormal, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_UpdateVertexNormal::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_UpdateVertexNormal, VertexID) == 0x000008, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_UpdateVertexNormal::VertexID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_UpdateVertexNormal, bUpdateNormal) == 0x00000C, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_UpdateVertexNormal::bUpdateNormal' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_UpdateVertexNormal, NewNormal) == 0x000010, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_UpdateVertexNormal::NewNormal' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_UpdateVertexNormal, bUpdateTangents) == 0x000028, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_UpdateVertexNormal::bUpdateTangents' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_UpdateVertexNormal, NewTangentX) == 0x000030, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_UpdateVertexNormal::NewTangentX' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_UpdateVertexNormal, NewTangentY) == 0x000048, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_UpdateVertexNormal::NewTangentY' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_UpdateVertexNormal, bIsValidVertex) == 0x000060, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_UpdateVertexNormal::bIsValidVertex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_UpdateVertexNormal, bMergeSplitValues) == 0x000061, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_UpdateVertexNormal::bMergeSplitValues' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_UpdateVertexNormal, bDeferChangeNotifications) == 0x000062, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_UpdateVertexNormal::bDeferChangeNotifications' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshNormalsFunctions_UpdateVertexNormal, ReturnValue) == 0x000068, "Member 'GeometryScriptLibrary_MeshNormalsFunctions_UpdateVertexNormal::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshPolygroupFunctions.ClearPolygroups
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_MeshPolygroupFunctions_ClearPolygroups final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptGroupLayer              GroupLayer;                                        // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ClearValue;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshPolygroupFunctions_ClearPolygroups) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshPolygroupFunctions_ClearPolygroups");
static_assert(sizeof(GeometryScriptLibrary_MeshPolygroupFunctions_ClearPolygroups) == 0x000028, "Wrong size on GeometryScriptLibrary_MeshPolygroupFunctions_ClearPolygroups");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_ClearPolygroups, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_ClearPolygroups::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_ClearPolygroups, GroupLayer) == 0x000008, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_ClearPolygroups::GroupLayer' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_ClearPolygroups, ClearValue) == 0x000010, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_ClearPolygroups::ClearValue' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_ClearPolygroups, Debug) == 0x000018, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_ClearPolygroups::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_ClearPolygroups, ReturnValue) == 0x000020, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_ClearPolygroups::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshPolygroupFunctions.ComputePolygroupsFromAngleThreshold
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_MeshPolygroupFunctions_ComputePolygroupsFromAngleThreshold final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptGroupLayer              GroupLayer;                                        // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         CreaseAngle;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinGroupSize;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshPolygroupFunctions_ComputePolygroupsFromAngleThreshold) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshPolygroupFunctions_ComputePolygroupsFromAngleThreshold");
static_assert(sizeof(GeometryScriptLibrary_MeshPolygroupFunctions_ComputePolygroupsFromAngleThreshold) == 0x000028, "Wrong size on GeometryScriptLibrary_MeshPolygroupFunctions_ComputePolygroupsFromAngleThreshold");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_ComputePolygroupsFromAngleThreshold, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_ComputePolygroupsFromAngleThreshold::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_ComputePolygroupsFromAngleThreshold, GroupLayer) == 0x000008, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_ComputePolygroupsFromAngleThreshold::GroupLayer' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_ComputePolygroupsFromAngleThreshold, CreaseAngle) == 0x000010, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_ComputePolygroupsFromAngleThreshold::CreaseAngle' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_ComputePolygroupsFromAngleThreshold, MinGroupSize) == 0x000014, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_ComputePolygroupsFromAngleThreshold::MinGroupSize' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_ComputePolygroupsFromAngleThreshold, Debug) == 0x000018, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_ComputePolygroupsFromAngleThreshold::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_ComputePolygroupsFromAngleThreshold, ReturnValue) == 0x000020, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_ComputePolygroupsFromAngleThreshold::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshPolygroupFunctions.ComputePolygroupsFromPolygonDetection
// 0x0040 (0x0040 - 0x0000)
struct GeometryScriptLibrary_MeshPolygroupFunctions_ComputePolygroupsFromPolygonDetection final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptGroupLayer              GroupLayer;                                        // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bRespectUVSeams;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRespectHardNormals;                               // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        QuadAdjacencyWeight;                               // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        QuadMetricClamp;                                   // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxSearchRounds;                                   // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshPolygroupFunctions_ComputePolygroupsFromPolygonDetection) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshPolygroupFunctions_ComputePolygroupsFromPolygonDetection");
static_assert(sizeof(GeometryScriptLibrary_MeshPolygroupFunctions_ComputePolygroupsFromPolygonDetection) == 0x000040, "Wrong size on GeometryScriptLibrary_MeshPolygroupFunctions_ComputePolygroupsFromPolygonDetection");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_ComputePolygroupsFromPolygonDetection, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_ComputePolygroupsFromPolygonDetection::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_ComputePolygroupsFromPolygonDetection, GroupLayer) == 0x000008, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_ComputePolygroupsFromPolygonDetection::GroupLayer' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_ComputePolygroupsFromPolygonDetection, bRespectUVSeams) == 0x000010, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_ComputePolygroupsFromPolygonDetection::bRespectUVSeams' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_ComputePolygroupsFromPolygonDetection, bRespectHardNormals) == 0x000011, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_ComputePolygroupsFromPolygonDetection::bRespectHardNormals' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_ComputePolygroupsFromPolygonDetection, QuadAdjacencyWeight) == 0x000018, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_ComputePolygroupsFromPolygonDetection::QuadAdjacencyWeight' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_ComputePolygroupsFromPolygonDetection, QuadMetricClamp) == 0x000020, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_ComputePolygroupsFromPolygonDetection::QuadMetricClamp' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_ComputePolygroupsFromPolygonDetection, MaxSearchRounds) == 0x000028, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_ComputePolygroupsFromPolygonDetection::MaxSearchRounds' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_ComputePolygroupsFromPolygonDetection, Debug) == 0x000030, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_ComputePolygroupsFromPolygonDetection::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_ComputePolygroupsFromPolygonDetection, ReturnValue) == 0x000038, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_ComputePolygroupsFromPolygonDetection::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshPolygroupFunctions.ConvertComponentsToPolygroups
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_MeshPolygroupFunctions_ConvertComponentsToPolygroups final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptGroupLayer              GroupLayer;                                        // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshPolygroupFunctions_ConvertComponentsToPolygroups) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshPolygroupFunctions_ConvertComponentsToPolygroups");
static_assert(sizeof(GeometryScriptLibrary_MeshPolygroupFunctions_ConvertComponentsToPolygroups) == 0x000020, "Wrong size on GeometryScriptLibrary_MeshPolygroupFunctions_ConvertComponentsToPolygroups");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_ConvertComponentsToPolygroups, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_ConvertComponentsToPolygroups::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_ConvertComponentsToPolygroups, GroupLayer) == 0x000008, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_ConvertComponentsToPolygroups::GroupLayer' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_ConvertComponentsToPolygroups, Debug) == 0x000010, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_ConvertComponentsToPolygroups::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_ConvertComponentsToPolygroups, ReturnValue) == 0x000018, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_ConvertComponentsToPolygroups::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshPolygroupFunctions.ConvertUVIslandsToPolygroups
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_MeshPolygroupFunctions_ConvertUVIslandsToPolygroups final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptGroupLayer              GroupLayer;                                        // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         UVLayer;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshPolygroupFunctions_ConvertUVIslandsToPolygroups) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshPolygroupFunctions_ConvertUVIslandsToPolygroups");
static_assert(sizeof(GeometryScriptLibrary_MeshPolygroupFunctions_ConvertUVIslandsToPolygroups) == 0x000028, "Wrong size on GeometryScriptLibrary_MeshPolygroupFunctions_ConvertUVIslandsToPolygroups");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_ConvertUVIslandsToPolygroups, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_ConvertUVIslandsToPolygroups::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_ConvertUVIslandsToPolygroups, GroupLayer) == 0x000008, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_ConvertUVIslandsToPolygroups::GroupLayer' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_ConvertUVIslandsToPolygroups, UVLayer) == 0x000010, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_ConvertUVIslandsToPolygroups::UVLayer' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_ConvertUVIslandsToPolygroups, Debug) == 0x000018, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_ConvertUVIslandsToPolygroups::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_ConvertUVIslandsToPolygroups, ReturnValue) == 0x000020, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_ConvertUVIslandsToPolygroups::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshPolygroupFunctions.CopyPolygroupsLayer
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_MeshPolygroupFunctions_CopyPolygroupsLayer final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptGroupLayer              FromGroupLayer;                                    // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FGeometryScriptGroupLayer              ToGroupLayer;                                      // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshPolygroupFunctions_CopyPolygroupsLayer) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshPolygroupFunctions_CopyPolygroupsLayer");
static_assert(sizeof(GeometryScriptLibrary_MeshPolygroupFunctions_CopyPolygroupsLayer) == 0x000028, "Wrong size on GeometryScriptLibrary_MeshPolygroupFunctions_CopyPolygroupsLayer");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_CopyPolygroupsLayer, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_CopyPolygroupsLayer::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_CopyPolygroupsLayer, FromGroupLayer) == 0x000008, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_CopyPolygroupsLayer::FromGroupLayer' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_CopyPolygroupsLayer, ToGroupLayer) == 0x000010, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_CopyPolygroupsLayer::ToGroupLayer' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_CopyPolygroupsLayer, Debug) == 0x000018, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_CopyPolygroupsLayer::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_CopyPolygroupsLayer, ReturnValue) == 0x000020, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_CopyPolygroupsLayer::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshPolygroupFunctions.DeleteTrianglesInPolygroup
// 0x0030 (0x0030 - 0x0000)
struct GeometryScriptLibrary_MeshPolygroupFunctions_DeleteTrianglesInPolygroup final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptGroupLayer              GroupLayer;                                        // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         PolygroupID;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumDeleted;                                        // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeferChangeNotifications;                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshPolygroupFunctions_DeleteTrianglesInPolygroup) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshPolygroupFunctions_DeleteTrianglesInPolygroup");
static_assert(sizeof(GeometryScriptLibrary_MeshPolygroupFunctions_DeleteTrianglesInPolygroup) == 0x000030, "Wrong size on GeometryScriptLibrary_MeshPolygroupFunctions_DeleteTrianglesInPolygroup");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_DeleteTrianglesInPolygroup, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_DeleteTrianglesInPolygroup::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_DeleteTrianglesInPolygroup, GroupLayer) == 0x000008, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_DeleteTrianglesInPolygroup::GroupLayer' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_DeleteTrianglesInPolygroup, PolygroupID) == 0x000010, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_DeleteTrianglesInPolygroup::PolygroupID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_DeleteTrianglesInPolygroup, NumDeleted) == 0x000014, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_DeleteTrianglesInPolygroup::NumDeleted' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_DeleteTrianglesInPolygroup, bDeferChangeNotifications) == 0x000018, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_DeleteTrianglesInPolygroup::bDeferChangeNotifications' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_DeleteTrianglesInPolygroup, Debug) == 0x000020, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_DeleteTrianglesInPolygroup::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_DeleteTrianglesInPolygroup, ReturnValue) == 0x000028, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_DeleteTrianglesInPolygroup::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshPolygroupFunctions.EnablePolygroups
// 0x0018 (0x0018 - 0x0000)
struct GeometryScriptLibrary_MeshPolygroupFunctions_EnablePolygroups final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshPolygroupFunctions_EnablePolygroups) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshPolygroupFunctions_EnablePolygroups");
static_assert(sizeof(GeometryScriptLibrary_MeshPolygroupFunctions_EnablePolygroups) == 0x000018, "Wrong size on GeometryScriptLibrary_MeshPolygroupFunctions_EnablePolygroups");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_EnablePolygroups, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_EnablePolygroups::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_EnablePolygroups, Debug) == 0x000008, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_EnablePolygroups::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_EnablePolygroups, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_EnablePolygroups::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshPolygroupFunctions.GetAllTrianglePolygroupIDs
// 0x0030 (0x0030 - 0x0000)
struct GeometryScriptLibrary_MeshPolygroupFunctions_GetAllTrianglePolygroupIDs final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptGroupLayer              GroupLayer;                                        // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FGeometryScriptIndexList               PolygroupIDsOut;                                   // 0x0010(0x0018)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshPolygroupFunctions_GetAllTrianglePolygroupIDs) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshPolygroupFunctions_GetAllTrianglePolygroupIDs");
static_assert(sizeof(GeometryScriptLibrary_MeshPolygroupFunctions_GetAllTrianglePolygroupIDs) == 0x000030, "Wrong size on GeometryScriptLibrary_MeshPolygroupFunctions_GetAllTrianglePolygroupIDs");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_GetAllTrianglePolygroupIDs, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_GetAllTrianglePolygroupIDs::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_GetAllTrianglePolygroupIDs, GroupLayer) == 0x000008, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_GetAllTrianglePolygroupIDs::GroupLayer' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_GetAllTrianglePolygroupIDs, PolygroupIDsOut) == 0x000010, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_GetAllTrianglePolygroupIDs::PolygroupIDsOut' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_GetAllTrianglePolygroupIDs, ReturnValue) == 0x000028, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_GetAllTrianglePolygroupIDs::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshPolygroupFunctions.GetPolygroupIDsInMesh
// 0x0030 (0x0030 - 0x0000)
struct GeometryScriptLibrary_MeshPolygroupFunctions_GetPolygroupIDsInMesh final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptGroupLayer              GroupLayer;                                        // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FGeometryScriptIndexList               PolygroupIDsOut;                                   // 0x0010(0x0018)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshPolygroupFunctions_GetPolygroupIDsInMesh) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshPolygroupFunctions_GetPolygroupIDsInMesh");
static_assert(sizeof(GeometryScriptLibrary_MeshPolygroupFunctions_GetPolygroupIDsInMesh) == 0x000030, "Wrong size on GeometryScriptLibrary_MeshPolygroupFunctions_GetPolygroupIDsInMesh");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_GetPolygroupIDsInMesh, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_GetPolygroupIDsInMesh::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_GetPolygroupIDsInMesh, GroupLayer) == 0x000008, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_GetPolygroupIDsInMesh::GroupLayer' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_GetPolygroupIDsInMesh, PolygroupIDsOut) == 0x000010, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_GetPolygroupIDsInMesh::PolygroupIDsOut' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_GetPolygroupIDsInMesh, ReturnValue) == 0x000028, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_GetPolygroupIDsInMesh::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshPolygroupFunctions.GetTrianglePolygroupID
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_MeshPolygroupFunctions_GetTrianglePolygroupID final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptGroupLayer              GroupLayer;                                        // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         TriangleID;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValidTriangle;                                  // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshPolygroupFunctions_GetTrianglePolygroupID) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshPolygroupFunctions_GetTrianglePolygroupID");
static_assert(sizeof(GeometryScriptLibrary_MeshPolygroupFunctions_GetTrianglePolygroupID) == 0x000020, "Wrong size on GeometryScriptLibrary_MeshPolygroupFunctions_GetTrianglePolygroupID");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_GetTrianglePolygroupID, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_GetTrianglePolygroupID::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_GetTrianglePolygroupID, GroupLayer) == 0x000008, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_GetTrianglePolygroupID::GroupLayer' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_GetTrianglePolygroupID, TriangleID) == 0x000010, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_GetTrianglePolygroupID::TriangleID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_GetTrianglePolygroupID, bIsValidTriangle) == 0x000014, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_GetTrianglePolygroupID::bIsValidTriangle' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_GetTrianglePolygroupID, ReturnValue) == 0x000018, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_GetTrianglePolygroupID::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshPolygroupFunctions.GetTrianglesInPolygroup
// 0x0038 (0x0038 - 0x0000)
struct GeometryScriptLibrary_MeshPolygroupFunctions_GetTrianglesInPolygroup final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptGroupLayer              GroupLayer;                                        // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         PolygroupID;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptIndexList               TriangleIDsOut;                                    // 0x0018(0x0018)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshPolygroupFunctions_GetTrianglesInPolygroup) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshPolygroupFunctions_GetTrianglesInPolygroup");
static_assert(sizeof(GeometryScriptLibrary_MeshPolygroupFunctions_GetTrianglesInPolygroup) == 0x000038, "Wrong size on GeometryScriptLibrary_MeshPolygroupFunctions_GetTrianglesInPolygroup");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_GetTrianglesInPolygroup, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_GetTrianglesInPolygroup::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_GetTrianglesInPolygroup, GroupLayer) == 0x000008, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_GetTrianglesInPolygroup::GroupLayer' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_GetTrianglesInPolygroup, PolygroupID) == 0x000010, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_GetTrianglesInPolygroup::PolygroupID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_GetTrianglesInPolygroup, TriangleIDsOut) == 0x000018, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_GetTrianglesInPolygroup::TriangleIDsOut' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_GetTrianglesInPolygroup, ReturnValue) == 0x000030, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_GetTrianglesInPolygroup::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshPolygroupFunctions.SetNumExtendedPolygroupLayers
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_MeshPolygroupFunctions_SetNumExtendedPolygroupLayers final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLayers;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshPolygroupFunctions_SetNumExtendedPolygroupLayers) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshPolygroupFunctions_SetNumExtendedPolygroupLayers");
static_assert(sizeof(GeometryScriptLibrary_MeshPolygroupFunctions_SetNumExtendedPolygroupLayers) == 0x000020, "Wrong size on GeometryScriptLibrary_MeshPolygroupFunctions_SetNumExtendedPolygroupLayers");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_SetNumExtendedPolygroupLayers, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_SetNumExtendedPolygroupLayers::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_SetNumExtendedPolygroupLayers, NumLayers) == 0x000008, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_SetNumExtendedPolygroupLayers::NumLayers' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_SetNumExtendedPolygroupLayers, Debug) == 0x000010, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_SetNumExtendedPolygroupLayers::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_SetNumExtendedPolygroupLayers, ReturnValue) == 0x000018, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_SetNumExtendedPolygroupLayers::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshPolygroupFunctions.SetPolygroupForMeshSelection
// 0x0038 (0x0038 - 0x0000)
struct GeometryScriptLibrary_MeshPolygroupFunctions_SetPolygroupForMeshSelection final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptGroupLayer              GroupLayer;                                        // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0010(0x0010)(Parm, NativeAccessSpecifierPublic)
	int32                                         SetPolygroupIDOut;                                 // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SetPolygroupID;                                    // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGenerateNewPolygroup;                             // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeferChangeNotifications;                         // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshPolygroupFunctions_SetPolygroupForMeshSelection) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshPolygroupFunctions_SetPolygroupForMeshSelection");
static_assert(sizeof(GeometryScriptLibrary_MeshPolygroupFunctions_SetPolygroupForMeshSelection) == 0x000038, "Wrong size on GeometryScriptLibrary_MeshPolygroupFunctions_SetPolygroupForMeshSelection");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_SetPolygroupForMeshSelection, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_SetPolygroupForMeshSelection::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_SetPolygroupForMeshSelection, GroupLayer) == 0x000008, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_SetPolygroupForMeshSelection::GroupLayer' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_SetPolygroupForMeshSelection, Selection) == 0x000010, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_SetPolygroupForMeshSelection::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_SetPolygroupForMeshSelection, SetPolygroupIDOut) == 0x000020, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_SetPolygroupForMeshSelection::SetPolygroupIDOut' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_SetPolygroupForMeshSelection, SetPolygroupID) == 0x000024, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_SetPolygroupForMeshSelection::SetPolygroupID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_SetPolygroupForMeshSelection, bGenerateNewPolygroup) == 0x000028, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_SetPolygroupForMeshSelection::bGenerateNewPolygroup' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_SetPolygroupForMeshSelection, bDeferChangeNotifications) == 0x000029, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_SetPolygroupForMeshSelection::bDeferChangeNotifications' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPolygroupFunctions_SetPolygroupForMeshSelection, ReturnValue) == 0x000030, "Member 'GeometryScriptLibrary_MeshPolygroupFunctions_SetPolygroupForMeshSelection::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshPrimitiveFunctions.AppendBoundingBox
// 0x00D0 (0x00D0 - 0x0000)
struct GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBoundingBox final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptPrimitiveOptions        PrimitiveOptions;                                  // 0x0008(0x0003)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   Box;                                               // 0x0070(0x0038)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         StepsX;                                            // 0x00A8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StepsY;                                            // 0x00AC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StepsZ;                                            // 0x00B0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x00B8(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x00C0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBoundingBox) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBoundingBox");
static_assert(sizeof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBoundingBox) == 0x0000D0, "Wrong size on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBoundingBox");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBoundingBox, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBoundingBox::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBoundingBox, PrimitiveOptions) == 0x000008, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBoundingBox::PrimitiveOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBoundingBox, Transform) == 0x000010, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBoundingBox::Transform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBoundingBox, Box) == 0x000070, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBoundingBox::Box' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBoundingBox, StepsX) == 0x0000A8, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBoundingBox::StepsX' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBoundingBox, StepsY) == 0x0000AC, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBoundingBox::StepsY' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBoundingBox, StepsZ) == 0x0000B0, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBoundingBox::StepsZ' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBoundingBox, Debug) == 0x0000B8, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBoundingBox::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBoundingBox, ReturnValue) == 0x0000C0, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBoundingBox::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshPrimitiveFunctions.AppendBox
// 0x00A0 (0x00A0 - 0x0000)
struct GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBox final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptPrimitiveOptions        PrimitiveOptions;                                  // 0x0008(0x0003)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DimensionX;                                        // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DimensionY;                                        // 0x0074(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DimensionZ;                                        // 0x0078(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StepsX;                                            // 0x007C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StepsY;                                            // 0x0080(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StepsZ;                                            // 0x0084(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptPrimitiveOriginMode            Origin;                                            // 0x0088(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0090(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0098(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBox) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBox");
static_assert(sizeof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBox) == 0x0000A0, "Wrong size on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBox");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBox, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBox::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBox, PrimitiveOptions) == 0x000008, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBox::PrimitiveOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBox, Transform) == 0x000010, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBox::Transform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBox, DimensionX) == 0x000070, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBox::DimensionX' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBox, DimensionY) == 0x000074, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBox::DimensionY' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBox, DimensionZ) == 0x000078, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBox::DimensionZ' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBox, StepsX) == 0x00007C, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBox::StepsX' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBox, StepsY) == 0x000080, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBox::StepsY' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBox, StepsZ) == 0x000084, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBox::StepsZ' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBox, Origin) == 0x000088, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBox::Origin' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBox, Debug) == 0x000090, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBox::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBox, ReturnValue) == 0x000098, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendBox::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshPrimitiveFunctions.AppendCapsule
// 0x00A0 (0x00A0 - 0x0000)
struct GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCapsule final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptPrimitiveOptions        PrimitiveOptions;                                  // 0x0008(0x0003)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LineLength;                                        // 0x0074(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HemisphereSteps;                                   // 0x0078(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CircleSteps;                                       // 0x007C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptPrimitiveOriginMode            Origin;                                            // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0088(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCapsule) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCapsule");
static_assert(sizeof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCapsule) == 0x0000A0, "Wrong size on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCapsule");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCapsule, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCapsule::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCapsule, PrimitiveOptions) == 0x000008, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCapsule::PrimitiveOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCapsule, Transform) == 0x000010, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCapsule::Transform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCapsule, Radius) == 0x000070, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCapsule::Radius' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCapsule, LineLength) == 0x000074, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCapsule::LineLength' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCapsule, HemisphereSteps) == 0x000078, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCapsule::HemisphereSteps' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCapsule, CircleSteps) == 0x00007C, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCapsule::CircleSteps' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCapsule, Origin) == 0x000080, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCapsule::Origin' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCapsule, Debug) == 0x000088, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCapsule::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCapsule, ReturnValue) == 0x000090, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCapsule::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshPrimitiveFunctions.AppendCone
// 0x00A0 (0x00A0 - 0x0000)
struct GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCone final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptPrimitiveOptions        PrimitiveOptions;                                  // 0x0008(0x0003)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseRadius;                                        // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TopRadius;                                         // 0x0074(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0078(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RadialSteps;                                       // 0x007C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeightSteps;                                       // 0x0080(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCapped;                                           // 0x0084(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptPrimitiveOriginMode            Origin;                                            // 0x0085(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_86[0x2];                                       // 0x0086(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0088(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCone) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCone");
static_assert(sizeof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCone) == 0x0000A0, "Wrong size on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCone");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCone, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCone::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCone, PrimitiveOptions) == 0x000008, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCone::PrimitiveOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCone, Transform) == 0x000010, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCone::Transform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCone, BaseRadius) == 0x000070, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCone::BaseRadius' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCone, TopRadius) == 0x000074, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCone::TopRadius' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCone, Height) == 0x000078, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCone::Height' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCone, RadialSteps) == 0x00007C, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCone::RadialSteps' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCone, HeightSteps) == 0x000080, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCone::HeightSteps' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCone, bCapped) == 0x000084, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCone::bCapped' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCone, Origin) == 0x000085, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCone::Origin' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCone, Debug) == 0x000088, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCone::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCone, ReturnValue) == 0x000090, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCone::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshPrimitiveFunctions.AppendCurvedStairs
// 0x00A0 (0x00A0 - 0x0000)
struct GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCurvedStairs final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptPrimitiveOptions        PrimitiveOptions;                                  // 0x0008(0x0003)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StepWidth;                                         // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StepHeight;                                        // 0x0074(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InnerRadius;                                       // 0x0078(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurveAngle;                                        // 0x007C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSteps;                                          // 0x0080(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFloating;                                         // 0x0084(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0088(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCurvedStairs) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCurvedStairs");
static_assert(sizeof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCurvedStairs) == 0x0000A0, "Wrong size on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCurvedStairs");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCurvedStairs, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCurvedStairs::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCurvedStairs, PrimitiveOptions) == 0x000008, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCurvedStairs::PrimitiveOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCurvedStairs, Transform) == 0x000010, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCurvedStairs::Transform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCurvedStairs, StepWidth) == 0x000070, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCurvedStairs::StepWidth' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCurvedStairs, StepHeight) == 0x000074, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCurvedStairs::StepHeight' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCurvedStairs, InnerRadius) == 0x000078, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCurvedStairs::InnerRadius' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCurvedStairs, CurveAngle) == 0x00007C, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCurvedStairs::CurveAngle' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCurvedStairs, NumSteps) == 0x000080, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCurvedStairs::NumSteps' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCurvedStairs, bFloating) == 0x000084, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCurvedStairs::bFloating' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCurvedStairs, Debug) == 0x000088, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCurvedStairs::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCurvedStairs, ReturnValue) == 0x000090, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCurvedStairs::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshPrimitiveFunctions.AppendCylinder
// 0x00A0 (0x00A0 - 0x0000)
struct GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCylinder final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptPrimitiveOptions        PrimitiveOptions;                                  // 0x0008(0x0003)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0074(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RadialSteps;                                       // 0x0078(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeightSteps;                                       // 0x007C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCapped;                                           // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptPrimitiveOriginMode            Origin;                                            // 0x0081(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0088(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCylinder) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCylinder");
static_assert(sizeof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCylinder) == 0x0000A0, "Wrong size on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCylinder");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCylinder, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCylinder::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCylinder, PrimitiveOptions) == 0x000008, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCylinder::PrimitiveOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCylinder, Transform) == 0x000010, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCylinder::Transform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCylinder, Radius) == 0x000070, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCylinder::Radius' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCylinder, Height) == 0x000074, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCylinder::Height' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCylinder, RadialSteps) == 0x000078, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCylinder::RadialSteps' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCylinder, HeightSteps) == 0x00007C, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCylinder::HeightSteps' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCylinder, bCapped) == 0x000080, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCylinder::bCapped' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCylinder, Origin) == 0x000081, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCylinder::Origin' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCylinder, Debug) == 0x000088, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCylinder::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCylinder, ReturnValue) == 0x000090, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendCylinder::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshPrimitiveFunctions.AppendDelaunayTriangulation2D
// 0x00C0 (0x00C0 - 0x0000)
struct GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDelaunayTriangulation2D final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptPrimitiveOptions        PrimitiveOptions;                                  // 0x0008(0x0003)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      VertexPositions;                                   // 0x0070(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FIntPoint>                      ConstrainedEdges;                                  // 0x0080(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometryScriptConstrainedDelaunayTriangulationOptions TriangulationOptions;                              // 0x0090(0x0003)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_93[0x5];                                       // 0x0093(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 PositionsToVertexIDs;                              // 0x0098(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bHasDuplicateVertices;                             // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x00B0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x00B8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDelaunayTriangulation2D) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDelaunayTriangulation2D");
static_assert(sizeof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDelaunayTriangulation2D) == 0x0000C0, "Wrong size on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDelaunayTriangulation2D");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDelaunayTriangulation2D, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDelaunayTriangulation2D::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDelaunayTriangulation2D, PrimitiveOptions) == 0x000008, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDelaunayTriangulation2D::PrimitiveOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDelaunayTriangulation2D, Transform) == 0x000010, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDelaunayTriangulation2D::Transform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDelaunayTriangulation2D, VertexPositions) == 0x000070, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDelaunayTriangulation2D::VertexPositions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDelaunayTriangulation2D, ConstrainedEdges) == 0x000080, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDelaunayTriangulation2D::ConstrainedEdges' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDelaunayTriangulation2D, TriangulationOptions) == 0x000090, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDelaunayTriangulation2D::TriangulationOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDelaunayTriangulation2D, PositionsToVertexIDs) == 0x000098, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDelaunayTriangulation2D::PositionsToVertexIDs' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDelaunayTriangulation2D, bHasDuplicateVertices) == 0x0000A8, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDelaunayTriangulation2D::bHasDuplicateVertices' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDelaunayTriangulation2D, Debug) == 0x0000B0, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDelaunayTriangulation2D::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDelaunayTriangulation2D, ReturnValue) == 0x0000B8, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDelaunayTriangulation2D::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshPrimitiveFunctions.AppendDisc
// 0x00A0 (0x00A0 - 0x0000)
struct GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDisc final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptPrimitiveOptions        PrimitiveOptions;                                  // 0x0008(0x0003)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AngleSteps;                                        // 0x0074(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpokeSteps;                                        // 0x0078(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartAngle;                                        // 0x007C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndAngle;                                          // 0x0080(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HoleRadius;                                        // 0x0084(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0088(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDisc) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDisc");
static_assert(sizeof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDisc) == 0x0000A0, "Wrong size on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDisc");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDisc, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDisc::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDisc, PrimitiveOptions) == 0x000008, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDisc::PrimitiveOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDisc, Transform) == 0x000010, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDisc::Transform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDisc, Radius) == 0x000070, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDisc::Radius' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDisc, AngleSteps) == 0x000074, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDisc::AngleSteps' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDisc, SpokeSteps) == 0x000078, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDisc::SpokeSteps' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDisc, StartAngle) == 0x00007C, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDisc::StartAngle' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDisc, EndAngle) == 0x000080, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDisc::EndAngle' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDisc, HoleRadius) == 0x000084, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDisc::HoleRadius' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDisc, Debug) == 0x000088, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDisc::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDisc, ReturnValue) == 0x000090, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendDisc::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshPrimitiveFunctions.AppendLinearStairs
// 0x00A0 (0x00A0 - 0x0000)
struct GeometryScriptLibrary_MeshPrimitiveFunctions_AppendLinearStairs final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptPrimitiveOptions        PrimitiveOptions;                                  // 0x0008(0x0003)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StepWidth;                                         // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StepHeight;                                        // 0x0074(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StepDepth;                                         // 0x0078(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSteps;                                          // 0x007C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFloating;                                         // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0088(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendLinearStairs) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendLinearStairs");
static_assert(sizeof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendLinearStairs) == 0x0000A0, "Wrong size on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendLinearStairs");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendLinearStairs, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendLinearStairs::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendLinearStairs, PrimitiveOptions) == 0x000008, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendLinearStairs::PrimitiveOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendLinearStairs, Transform) == 0x000010, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendLinearStairs::Transform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendLinearStairs, StepWidth) == 0x000070, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendLinearStairs::StepWidth' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendLinearStairs, StepHeight) == 0x000074, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendLinearStairs::StepHeight' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendLinearStairs, StepDepth) == 0x000078, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendLinearStairs::StepDepth' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendLinearStairs, NumSteps) == 0x00007C, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendLinearStairs::NumSteps' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendLinearStairs, bFloating) == 0x000080, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendLinearStairs::bFloating' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendLinearStairs, Debug) == 0x000088, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendLinearStairs::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendLinearStairs, ReturnValue) == 0x000090, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendLinearStairs::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshPrimitiveFunctions.AppendPolygonListTriangulation
// 0x00A0 (0x00A0 - 0x0000)
struct GeometryScriptLibrary_MeshPrimitiveFunctions_AppendPolygonListTriangulation final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptPrimitiveOptions        PrimitiveOptions;                                  // 0x0008(0x0003)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptGeneralPolygonList      PolygonList;                                       // 0x0070(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptPolygonsTriangulationOptions TriangulationOptions;                              // 0x0080(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bTriangulationError;                               // 0x0081(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0088(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendPolygonListTriangulation) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendPolygonListTriangulation");
static_assert(sizeof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendPolygonListTriangulation) == 0x0000A0, "Wrong size on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendPolygonListTriangulation");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendPolygonListTriangulation, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendPolygonListTriangulation::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendPolygonListTriangulation, PrimitiveOptions) == 0x000008, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendPolygonListTriangulation::PrimitiveOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendPolygonListTriangulation, Transform) == 0x000010, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendPolygonListTriangulation::Transform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendPolygonListTriangulation, PolygonList) == 0x000070, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendPolygonListTriangulation::PolygonList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendPolygonListTriangulation, TriangulationOptions) == 0x000080, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendPolygonListTriangulation::TriangulationOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendPolygonListTriangulation, bTriangulationError) == 0x000081, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendPolygonListTriangulation::bTriangulationError' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendPolygonListTriangulation, Debug) == 0x000088, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendPolygonListTriangulation::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendPolygonListTriangulation, ReturnValue) == 0x000090, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendPolygonListTriangulation::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshPrimitiveFunctions.AppendRectangle_Compatibility_5_0
// 0x0090 (0x0090 - 0x0000)
struct GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRectangle_Compatibility_5_0 final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptPrimitiveOptions        PrimitiveOptions;                                  // 0x0008(0x0003)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DimensionX;                                        // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DimensionY;                                        // 0x0074(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StepsWidth;                                        // 0x0078(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StepsHeight;                                       // 0x007C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0080(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0088(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRectangle_Compatibility_5_0) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRectangle_Compatibility_5_0");
static_assert(sizeof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRectangle_Compatibility_5_0) == 0x000090, "Wrong size on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRectangle_Compatibility_5_0");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRectangle_Compatibility_5_0, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRectangle_Compatibility_5_0::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRectangle_Compatibility_5_0, PrimitiveOptions) == 0x000008, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRectangle_Compatibility_5_0::PrimitiveOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRectangle_Compatibility_5_0, Transform) == 0x000010, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRectangle_Compatibility_5_0::Transform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRectangle_Compatibility_5_0, DimensionX) == 0x000070, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRectangle_Compatibility_5_0::DimensionX' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRectangle_Compatibility_5_0, DimensionY) == 0x000074, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRectangle_Compatibility_5_0::DimensionY' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRectangle_Compatibility_5_0, StepsWidth) == 0x000078, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRectangle_Compatibility_5_0::StepsWidth' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRectangle_Compatibility_5_0, StepsHeight) == 0x00007C, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRectangle_Compatibility_5_0::StepsHeight' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRectangle_Compatibility_5_0, Debug) == 0x000080, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRectangle_Compatibility_5_0::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRectangle_Compatibility_5_0, ReturnValue) == 0x000088, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRectangle_Compatibility_5_0::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshPrimitiveFunctions.AppendRectangleXY
// 0x0090 (0x0090 - 0x0000)
struct GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRectangleXY final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptPrimitiveOptions        PrimitiveOptions;                                  // 0x0008(0x0003)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DimensionX;                                        // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DimensionY;                                        // 0x0074(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StepsWidth;                                        // 0x0078(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StepsHeight;                                       // 0x007C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0080(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0088(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRectangleXY) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRectangleXY");
static_assert(sizeof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRectangleXY) == 0x000090, "Wrong size on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRectangleXY");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRectangleXY, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRectangleXY::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRectangleXY, PrimitiveOptions) == 0x000008, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRectangleXY::PrimitiveOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRectangleXY, Transform) == 0x000010, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRectangleXY::Transform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRectangleXY, DimensionX) == 0x000070, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRectangleXY::DimensionX' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRectangleXY, DimensionY) == 0x000074, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRectangleXY::DimensionY' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRectangleXY, StepsWidth) == 0x000078, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRectangleXY::StepsWidth' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRectangleXY, StepsHeight) == 0x00007C, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRectangleXY::StepsHeight' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRectangleXY, Debug) == 0x000080, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRectangleXY::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRectangleXY, ReturnValue) == 0x000088, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRectangleXY::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshPrimitiveFunctions.AppendRevolvePath
// 0x00B0 (0x00B0 - 0x0000)
struct GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRevolvePath final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptPrimitiveOptions        PrimitiveOptions;                                  // 0x0008(0x0003)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      PathVertices;                                      // 0x0070(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometryScriptRevolveOptions          RevolveOptions;                                    // 0x0080(0x0014)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Steps;                                             // 0x0094(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCapped;                                           // 0x0098(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x00A0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRevolvePath) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRevolvePath");
static_assert(sizeof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRevolvePath) == 0x0000B0, "Wrong size on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRevolvePath");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRevolvePath, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRevolvePath::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRevolvePath, PrimitiveOptions) == 0x000008, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRevolvePath::PrimitiveOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRevolvePath, Transform) == 0x000010, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRevolvePath::Transform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRevolvePath, PathVertices) == 0x000070, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRevolvePath::PathVertices' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRevolvePath, RevolveOptions) == 0x000080, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRevolvePath::RevolveOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRevolvePath, Steps) == 0x000094, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRevolvePath::Steps' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRevolvePath, bCapped) == 0x000098, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRevolvePath::bCapped' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRevolvePath, Debug) == 0x0000A0, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRevolvePath::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRevolvePath, ReturnValue) == 0x0000A8, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRevolvePath::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshPrimitiveFunctions.AppendRevolvePolygon
// 0x00B0 (0x00B0 - 0x0000)
struct GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRevolvePolygon final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptPrimitiveOptions        PrimitiveOptions;                                  // 0x0008(0x0003)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      PolygonVertices;                                   // 0x0070(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometryScriptRevolveOptions          RevolveOptions;                                    // 0x0080(0x0014)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0094(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Steps;                                             // 0x0098(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x00A0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRevolvePolygon) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRevolvePolygon");
static_assert(sizeof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRevolvePolygon) == 0x0000B0, "Wrong size on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRevolvePolygon");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRevolvePolygon, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRevolvePolygon::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRevolvePolygon, PrimitiveOptions) == 0x000008, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRevolvePolygon::PrimitiveOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRevolvePolygon, Transform) == 0x000010, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRevolvePolygon::Transform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRevolvePolygon, PolygonVertices) == 0x000070, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRevolvePolygon::PolygonVertices' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRevolvePolygon, RevolveOptions) == 0x000080, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRevolvePolygon::RevolveOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRevolvePolygon, Radius) == 0x000094, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRevolvePolygon::Radius' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRevolvePolygon, Steps) == 0x000098, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRevolvePolygon::Steps' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRevolvePolygon, Debug) == 0x0000A0, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRevolvePolygon::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRevolvePolygon, ReturnValue) == 0x0000A8, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRevolvePolygon::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshPrimitiveFunctions.AppendRoundRectangle_Compatibility_5_0
// 0x00A0 (0x00A0 - 0x0000)
struct GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangle_Compatibility_5_0 final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptPrimitiveOptions        PrimitiveOptions;                                  // 0x0008(0x0003)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DimensionX;                                        // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DimensionY;                                        // 0x0074(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CornerRadius;                                      // 0x0078(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StepsWidth;                                        // 0x007C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StepsHeight;                                       // 0x0080(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StepsRound;                                        // 0x0084(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0088(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangle_Compatibility_5_0) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangle_Compatibility_5_0");
static_assert(sizeof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangle_Compatibility_5_0) == 0x0000A0, "Wrong size on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangle_Compatibility_5_0");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangle_Compatibility_5_0, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangle_Compatibility_5_0::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangle_Compatibility_5_0, PrimitiveOptions) == 0x000008, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangle_Compatibility_5_0::PrimitiveOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangle_Compatibility_5_0, Transform) == 0x000010, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangle_Compatibility_5_0::Transform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangle_Compatibility_5_0, DimensionX) == 0x000070, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangle_Compatibility_5_0::DimensionX' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangle_Compatibility_5_0, DimensionY) == 0x000074, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangle_Compatibility_5_0::DimensionY' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangle_Compatibility_5_0, CornerRadius) == 0x000078, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangle_Compatibility_5_0::CornerRadius' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangle_Compatibility_5_0, StepsWidth) == 0x00007C, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangle_Compatibility_5_0::StepsWidth' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangle_Compatibility_5_0, StepsHeight) == 0x000080, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangle_Compatibility_5_0::StepsHeight' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangle_Compatibility_5_0, StepsRound) == 0x000084, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangle_Compatibility_5_0::StepsRound' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangle_Compatibility_5_0, Debug) == 0x000088, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangle_Compatibility_5_0::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangle_Compatibility_5_0, ReturnValue) == 0x000090, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangle_Compatibility_5_0::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshPrimitiveFunctions.AppendRoundRectangleXY
// 0x00A0 (0x00A0 - 0x0000)
struct GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangleXY final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptPrimitiveOptions        PrimitiveOptions;                                  // 0x0008(0x0003)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DimensionX;                                        // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DimensionY;                                        // 0x0074(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CornerRadius;                                      // 0x0078(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StepsWidth;                                        // 0x007C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StepsHeight;                                       // 0x0080(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StepsRound;                                        // 0x0084(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0088(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangleXY) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangleXY");
static_assert(sizeof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangleXY) == 0x0000A0, "Wrong size on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangleXY");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangleXY, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangleXY::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangleXY, PrimitiveOptions) == 0x000008, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangleXY::PrimitiveOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangleXY, Transform) == 0x000010, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangleXY::Transform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangleXY, DimensionX) == 0x000070, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangleXY::DimensionX' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangleXY, DimensionY) == 0x000074, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangleXY::DimensionY' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangleXY, CornerRadius) == 0x000078, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangleXY::CornerRadius' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangleXY, StepsWidth) == 0x00007C, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangleXY::StepsWidth' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangleXY, StepsHeight) == 0x000080, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangleXY::StepsHeight' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangleXY, StepsRound) == 0x000084, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangleXY::StepsRound' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangleXY, Debug) == 0x000088, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangleXY::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangleXY, ReturnValue) == 0x000090, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendRoundRectangleXY::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshPrimitiveFunctions.AppendSimpleCollisionShapes
// 0x0110 (0x0110 - 0x0000)
struct GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleCollisionShapes final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptPrimitiveOptions        PrimitiveOptions;                                  // 0x0008(0x0003)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptSimpleCollision         SimpleCollision;                                   // 0x0070(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometryScriptSimpleCollisionTriangulationOptions TriangulationOptions;                              // 0x00F0(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0100(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0108(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleCollisionShapes) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleCollisionShapes");
static_assert(sizeof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleCollisionShapes) == 0x000110, "Wrong size on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleCollisionShapes");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleCollisionShapes, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleCollisionShapes::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleCollisionShapes, PrimitiveOptions) == 0x000008, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleCollisionShapes::PrimitiveOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleCollisionShapes, Transform) == 0x000010, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleCollisionShapes::Transform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleCollisionShapes, SimpleCollision) == 0x000070, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleCollisionShapes::SimpleCollision' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleCollisionShapes, TriangulationOptions) == 0x0000F0, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleCollisionShapes::TriangulationOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleCollisionShapes, Debug) == 0x000100, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleCollisionShapes::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleCollisionShapes, ReturnValue) == 0x000108, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleCollisionShapes::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshPrimitiveFunctions.AppendSimpleExtrudePolygon
// 0x00A0 (0x00A0 - 0x0000)
struct GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleExtrudePolygon final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptPrimitiveOptions        PrimitiveOptions;                                  // 0x0008(0x0003)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      PolygonVertices;                                   // 0x0070(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0080(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeightSteps;                                       // 0x0084(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCapped;                                           // 0x0088(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptPrimitiveOriginMode            Origin;                                            // 0x0089(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A[0x6];                                       // 0x008A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0090(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0098(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleExtrudePolygon) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleExtrudePolygon");
static_assert(sizeof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleExtrudePolygon) == 0x0000A0, "Wrong size on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleExtrudePolygon");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleExtrudePolygon, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleExtrudePolygon::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleExtrudePolygon, PrimitiveOptions) == 0x000008, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleExtrudePolygon::PrimitiveOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleExtrudePolygon, Transform) == 0x000010, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleExtrudePolygon::Transform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleExtrudePolygon, PolygonVertices) == 0x000070, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleExtrudePolygon::PolygonVertices' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleExtrudePolygon, Height) == 0x000080, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleExtrudePolygon::Height' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleExtrudePolygon, HeightSteps) == 0x000084, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleExtrudePolygon::HeightSteps' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleExtrudePolygon, bCapped) == 0x000088, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleExtrudePolygon::bCapped' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleExtrudePolygon, Origin) == 0x000089, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleExtrudePolygon::Origin' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleExtrudePolygon, Debug) == 0x000090, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleExtrudePolygon::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleExtrudePolygon, ReturnValue) == 0x000098, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleExtrudePolygon::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshPrimitiveFunctions.AppendSimpleSweptPolygon
// 0x00B0 (0x00B0 - 0x0000)
struct GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleSweptPolygon final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptPrimitiveOptions        PrimitiveOptions;                                  // 0x0008(0x0003)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      PolygonVertices;                                   // 0x0070(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        SweepPath;                                         // 0x0080(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0090(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCapped;                                           // 0x0091(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0x2];                                       // 0x0092(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartScale;                                        // 0x0094(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndScale;                                          // 0x0098(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x00A0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleSweptPolygon) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleSweptPolygon");
static_assert(sizeof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleSweptPolygon) == 0x0000B0, "Wrong size on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleSweptPolygon");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleSweptPolygon, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleSweptPolygon::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleSweptPolygon, PrimitiveOptions) == 0x000008, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleSweptPolygon::PrimitiveOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleSweptPolygon, Transform) == 0x000010, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleSweptPolygon::Transform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleSweptPolygon, PolygonVertices) == 0x000070, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleSweptPolygon::PolygonVertices' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleSweptPolygon, SweepPath) == 0x000080, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleSweptPolygon::SweepPath' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleSweptPolygon, bLoop) == 0x000090, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleSweptPolygon::bLoop' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleSweptPolygon, bCapped) == 0x000091, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleSweptPolygon::bCapped' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleSweptPolygon, StartScale) == 0x000094, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleSweptPolygon::StartScale' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleSweptPolygon, EndScale) == 0x000098, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleSweptPolygon::EndScale' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleSweptPolygon, Debug) == 0x0000A0, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleSweptPolygon::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleSweptPolygon, ReturnValue) == 0x0000A8, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSimpleSweptPolygon::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshPrimitiveFunctions.AppendSphereBox
// 0x00A0 (0x00A0 - 0x0000)
struct GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereBox final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptPrimitiveOptions        PrimitiveOptions;                                  // 0x0008(0x0003)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StepsX;                                            // 0x0074(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StepsY;                                            // 0x0078(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StepsZ;                                            // 0x007C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptPrimitiveOriginMode            Origin;                                            // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0088(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereBox) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereBox");
static_assert(sizeof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereBox) == 0x0000A0, "Wrong size on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereBox");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereBox, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereBox::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereBox, PrimitiveOptions) == 0x000008, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereBox::PrimitiveOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereBox, Transform) == 0x000010, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereBox::Transform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereBox, Radius) == 0x000070, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereBox::Radius' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereBox, StepsX) == 0x000074, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereBox::StepsX' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereBox, StepsY) == 0x000078, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereBox::StepsY' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereBox, StepsZ) == 0x00007C, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereBox::StepsZ' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereBox, Origin) == 0x000080, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereBox::Origin' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereBox, Debug) == 0x000088, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereBox::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereBox, ReturnValue) == 0x000090, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereBox::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshPrimitiveFunctions.AppendSphereCovering
// 0x00A0 (0x00A0 - 0x0000)
struct GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereCovering final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptPrimitiveOptions        PrimitiveOptions;                                  // 0x0008(0x0003)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptSphereCovering          SphereCovering;                                    // 0x0070(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         StepsX;                                            // 0x0080(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StepsY;                                            // 0x0084(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StepsZ;                                            // 0x0088(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0090(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0098(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereCovering) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereCovering");
static_assert(sizeof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereCovering) == 0x0000A0, "Wrong size on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereCovering");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereCovering, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereCovering::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereCovering, PrimitiveOptions) == 0x000008, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereCovering::PrimitiveOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereCovering, Transform) == 0x000010, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereCovering::Transform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereCovering, SphereCovering) == 0x000070, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereCovering::SphereCovering' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereCovering, StepsX) == 0x000080, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereCovering::StepsX' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereCovering, StepsY) == 0x000084, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereCovering::StepsY' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereCovering, StepsZ) == 0x000088, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereCovering::StepsZ' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereCovering, Debug) == 0x000090, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereCovering::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereCovering, ReturnValue) == 0x000098, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereCovering::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshPrimitiveFunctions.AppendSphereLatLong
// 0x0090 (0x0090 - 0x0000)
struct GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereLatLong final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptPrimitiveOptions        PrimitiveOptions;                                  // 0x0008(0x0003)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StepsPhi;                                          // 0x0074(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StepsTheta;                                        // 0x0078(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptPrimitiveOriginMode            Origin;                                            // 0x007C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0080(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0088(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereLatLong) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereLatLong");
static_assert(sizeof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereLatLong) == 0x000090, "Wrong size on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereLatLong");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereLatLong, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereLatLong::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereLatLong, PrimitiveOptions) == 0x000008, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereLatLong::PrimitiveOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereLatLong, Transform) == 0x000010, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereLatLong::Transform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereLatLong, Radius) == 0x000070, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereLatLong::Radius' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereLatLong, StepsPhi) == 0x000074, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereLatLong::StepsPhi' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereLatLong, StepsTheta) == 0x000078, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereLatLong::StepsTheta' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereLatLong, Origin) == 0x00007C, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereLatLong::Origin' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereLatLong, Debug) == 0x000080, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereLatLong::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereLatLong, ReturnValue) == 0x000088, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSphereLatLong::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshPrimitiveFunctions.AppendSpiralRevolvePolygon
// 0x00B0 (0x00B0 - 0x0000)
struct GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSpiralRevolvePolygon final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptPrimitiveOptions        PrimitiveOptions;                                  // 0x0008(0x0003)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      PolygonVertices;                                   // 0x0070(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometryScriptRevolveOptions          RevolveOptions;                                    // 0x0080(0x0014)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0094(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Steps;                                             // 0x0098(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RisePerRevolution;                                 // 0x009C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x00A0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSpiralRevolvePolygon) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSpiralRevolvePolygon");
static_assert(sizeof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSpiralRevolvePolygon) == 0x0000B0, "Wrong size on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSpiralRevolvePolygon");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSpiralRevolvePolygon, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSpiralRevolvePolygon::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSpiralRevolvePolygon, PrimitiveOptions) == 0x000008, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSpiralRevolvePolygon::PrimitiveOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSpiralRevolvePolygon, Transform) == 0x000010, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSpiralRevolvePolygon::Transform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSpiralRevolvePolygon, PolygonVertices) == 0x000070, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSpiralRevolvePolygon::PolygonVertices' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSpiralRevolvePolygon, RevolveOptions) == 0x000080, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSpiralRevolvePolygon::RevolveOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSpiralRevolvePolygon, Radius) == 0x000094, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSpiralRevolvePolygon::Radius' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSpiralRevolvePolygon, Steps) == 0x000098, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSpiralRevolvePolygon::Steps' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSpiralRevolvePolygon, RisePerRevolution) == 0x00009C, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSpiralRevolvePolygon::RisePerRevolution' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSpiralRevolvePolygon, Debug) == 0x0000A0, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSpiralRevolvePolygon::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSpiralRevolvePolygon, ReturnValue) == 0x0000A8, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSpiralRevolvePolygon::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshPrimitiveFunctions.AppendSweepPolygon
// 0x00B0 (0x00B0 - 0x0000)
struct GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolygon final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptPrimitiveOptions        PrimitiveOptions;                                  // 0x0008(0x0003)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      PolygonVertices;                                   // 0x0070(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     SweepPath;                                         // 0x0080(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0090(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCapped;                                           // 0x0091(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0x2];                                       // 0x0092(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartScale;                                        // 0x0094(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndScale;                                          // 0x0098(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationAngleDeg;                                  // 0x009C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x00A0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolygon) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolygon");
static_assert(sizeof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolygon) == 0x0000B0, "Wrong size on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolygon");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolygon, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolygon::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolygon, PrimitiveOptions) == 0x000008, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolygon::PrimitiveOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolygon, Transform) == 0x000010, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolygon::Transform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolygon, PolygonVertices) == 0x000070, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolygon::PolygonVertices' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolygon, SweepPath) == 0x000080, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolygon::SweepPath' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolygon, bLoop) == 0x000090, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolygon::bLoop' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolygon, bCapped) == 0x000091, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolygon::bCapped' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolygon, StartScale) == 0x000094, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolygon::StartScale' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolygon, EndScale) == 0x000098, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolygon::EndScale' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolygon, RotationAngleDeg) == 0x00009C, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolygon::RotationAngleDeg' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolygon, Debug) == 0x0000A0, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolygon::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolygon, ReturnValue) == 0x0000A8, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolygon::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshPrimitiveFunctions.AppendSweepPolyline
// 0x00D0 (0x00D0 - 0x0000)
struct GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolyline final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptPrimitiveOptions        PrimitiveOptions;                                  // 0x0008(0x0003)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      PolylineVertices;                                  // 0x0070(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     SweepPath;                                         // 0x0080(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<float>                                 PolylineTexParamU;                                 // 0x0090(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<float>                                 SweepPathTexParamV;                                // 0x00A0(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x00B0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartScale;                                        // 0x00B4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndScale;                                          // 0x00B8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationAngleDeg;                                  // 0x00BC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x00C0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x00C8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolyline) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolyline");
static_assert(sizeof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolyline) == 0x0000D0, "Wrong size on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolyline");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolyline, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolyline::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolyline, PrimitiveOptions) == 0x000008, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolyline::PrimitiveOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolyline, Transform) == 0x000010, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolyline::Transform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolyline, PolylineVertices) == 0x000070, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolyline::PolylineVertices' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolyline, SweepPath) == 0x000080, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolyline::SweepPath' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolyline, PolylineTexParamU) == 0x000090, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolyline::PolylineTexParamU' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolyline, SweepPathTexParamV) == 0x0000A0, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolyline::SweepPathTexParamV' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolyline, bLoop) == 0x0000B0, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolyline::bLoop' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolyline, StartScale) == 0x0000B4, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolyline::StartScale' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolyline, EndScale) == 0x0000B8, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolyline::EndScale' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolyline, RotationAngleDeg) == 0x0000BC, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolyline::RotationAngleDeg' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolyline, Debug) == 0x0000C0, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolyline::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolyline, ReturnValue) == 0x0000C8, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendSweepPolyline::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshPrimitiveFunctions.AppendTorus
// 0x00B0 (0x00B0 - 0x0000)
struct GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTorus final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptPrimitiveOptions        PrimitiveOptions;                                  // 0x0008(0x0003)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptRevolveOptions          RevolveOptions;                                    // 0x0070(0x0014)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MajorRadius;                                       // 0x0084(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinorRadius;                                       // 0x0088(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MajorSteps;                                        // 0x008C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinorSteps;                                        // 0x0090(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptPrimitiveOriginMode            Origin;                                            // 0x0094(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0098(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x00A0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTorus) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTorus");
static_assert(sizeof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTorus) == 0x0000B0, "Wrong size on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTorus");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTorus, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTorus::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTorus, PrimitiveOptions) == 0x000008, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTorus::PrimitiveOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTorus, Transform) == 0x000010, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTorus::Transform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTorus, RevolveOptions) == 0x000070, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTorus::RevolveOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTorus, MajorRadius) == 0x000084, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTorus::MajorRadius' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTorus, MinorRadius) == 0x000088, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTorus::MinorRadius' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTorus, MajorSteps) == 0x00008C, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTorus::MajorSteps' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTorus, MinorSteps) == 0x000090, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTorus::MinorSteps' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTorus, Origin) == 0x000094, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTorus::Origin' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTorus, Debug) == 0x000098, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTorus::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTorus, ReturnValue) == 0x0000A0, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTorus::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshPrimitiveFunctions.AppendTriangulatedPolygon
// 0x00A0 (0x00A0 - 0x0000)
struct GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTriangulatedPolygon final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptPrimitiveOptions        PrimitiveOptions;                                  // 0x0008(0x0003)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      PolygonVertices;                                   // 0x0070(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bAllowSelfIntersections;                           // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0088(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTriangulatedPolygon) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTriangulatedPolygon");
static_assert(sizeof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTriangulatedPolygon) == 0x0000A0, "Wrong size on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTriangulatedPolygon");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTriangulatedPolygon, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTriangulatedPolygon::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTriangulatedPolygon, PrimitiveOptions) == 0x000008, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTriangulatedPolygon::PrimitiveOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTriangulatedPolygon, Transform) == 0x000010, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTriangulatedPolygon::Transform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTriangulatedPolygon, PolygonVertices) == 0x000070, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTriangulatedPolygon::PolygonVertices' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTriangulatedPolygon, bAllowSelfIntersections) == 0x000080, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTriangulatedPolygon::bAllowSelfIntersections' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTriangulatedPolygon, Debug) == 0x000088, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTriangulatedPolygon::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTriangulatedPolygon, ReturnValue) == 0x000090, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTriangulatedPolygon::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshPrimitiveFunctions.AppendTriangulatedPolygon3D
// 0x0090 (0x0090 - 0x0000)
struct GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTriangulatedPolygon3D final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptPrimitiveOptions        PrimitiveOptions;                                  // 0x0008(0x0003)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        PolygonVertices3D;                                 // 0x0070(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0080(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0088(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTriangulatedPolygon3D) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTriangulatedPolygon3D");
static_assert(sizeof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTriangulatedPolygon3D) == 0x000090, "Wrong size on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTriangulatedPolygon3D");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTriangulatedPolygon3D, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTriangulatedPolygon3D::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTriangulatedPolygon3D, PrimitiveOptions) == 0x000008, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTriangulatedPolygon3D::PrimitiveOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTriangulatedPolygon3D, Transform) == 0x000010, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTriangulatedPolygon3D::Transform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTriangulatedPolygon3D, PolygonVertices3D) == 0x000070, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTriangulatedPolygon3D::PolygonVertices3D' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTriangulatedPolygon3D, Debug) == 0x000080, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTriangulatedPolygon3D::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTriangulatedPolygon3D, ReturnValue) == 0x000088, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendTriangulatedPolygon3D::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshPrimitiveFunctions.AppendVoronoiDiagram2D
// 0x00F0 (0x00F0 - 0x0000)
struct GeometryScriptLibrary_MeshPrimitiveFunctions_AppendVoronoiDiagram2D final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptPrimitiveOptions        PrimitiveOptions;                                  // 0x0008(0x0003)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      VoronoiSites;                                      // 0x0070(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometryScriptVoronoiOptions          VoronoiOptions;                                    // 0x0080(0x0058)(Parm, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x00D8(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x00E0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendVoronoiDiagram2D) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendVoronoiDiagram2D");
static_assert(sizeof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendVoronoiDiagram2D) == 0x0000F0, "Wrong size on GeometryScriptLibrary_MeshPrimitiveFunctions_AppendVoronoiDiagram2D");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendVoronoiDiagram2D, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendVoronoiDiagram2D::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendVoronoiDiagram2D, PrimitiveOptions) == 0x000008, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendVoronoiDiagram2D::PrimitiveOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendVoronoiDiagram2D, Transform) == 0x000010, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendVoronoiDiagram2D::Transform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendVoronoiDiagram2D, VoronoiSites) == 0x000070, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendVoronoiDiagram2D::VoronoiSites' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendVoronoiDiagram2D, VoronoiOptions) == 0x000080, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendVoronoiDiagram2D::VoronoiOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendVoronoiDiagram2D, Debug) == 0x0000D8, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendVoronoiDiagram2D::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshPrimitiveFunctions_AppendVoronoiDiagram2D, ReturnValue) == 0x0000E0, "Member 'GeometryScriptLibrary_MeshPrimitiveFunctions_AppendVoronoiDiagram2D::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshQueryFunctions.ComputeTriangleBarycentricCoords
// 0x0090 (0x0090 - 0x0000)
struct GeometryScriptLibrary_MeshQueryFunctions_ComputeTriangleBarycentricCoords final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TriangleID;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValidTriangle;                                  // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Point;                                             // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Vertex1;                                           // 0x0028(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Vertex2;                                           // 0x0040(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Vertex3;                                           // 0x0058(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BarycentricCoords;                                 // 0x0070(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0088(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshQueryFunctions_ComputeTriangleBarycentricCoords) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshQueryFunctions_ComputeTriangleBarycentricCoords");
static_assert(sizeof(GeometryScriptLibrary_MeshQueryFunctions_ComputeTriangleBarycentricCoords) == 0x000090, "Wrong size on GeometryScriptLibrary_MeshQueryFunctions_ComputeTriangleBarycentricCoords");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_ComputeTriangleBarycentricCoords, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshQueryFunctions_ComputeTriangleBarycentricCoords::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_ComputeTriangleBarycentricCoords, TriangleID) == 0x000008, "Member 'GeometryScriptLibrary_MeshQueryFunctions_ComputeTriangleBarycentricCoords::TriangleID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_ComputeTriangleBarycentricCoords, bIsValidTriangle) == 0x00000C, "Member 'GeometryScriptLibrary_MeshQueryFunctions_ComputeTriangleBarycentricCoords::bIsValidTriangle' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_ComputeTriangleBarycentricCoords, Point) == 0x000010, "Member 'GeometryScriptLibrary_MeshQueryFunctions_ComputeTriangleBarycentricCoords::Point' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_ComputeTriangleBarycentricCoords, Vertex1) == 0x000028, "Member 'GeometryScriptLibrary_MeshQueryFunctions_ComputeTriangleBarycentricCoords::Vertex1' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_ComputeTriangleBarycentricCoords, Vertex2) == 0x000040, "Member 'GeometryScriptLibrary_MeshQueryFunctions_ComputeTriangleBarycentricCoords::Vertex2' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_ComputeTriangleBarycentricCoords, Vertex3) == 0x000058, "Member 'GeometryScriptLibrary_MeshQueryFunctions_ComputeTriangleBarycentricCoords::Vertex3' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_ComputeTriangleBarycentricCoords, BarycentricCoords) == 0x000070, "Member 'GeometryScriptLibrary_MeshQueryFunctions_ComputeTriangleBarycentricCoords::BarycentricCoords' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_ComputeTriangleBarycentricCoords, ReturnValue) == 0x000088, "Member 'GeometryScriptLibrary_MeshQueryFunctions_ComputeTriangleBarycentricCoords::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshQueryFunctions.GetAllSplitUVsAtVertex
// 0x0040 (0x0040 - 0x0000)
struct GeometryScriptLibrary_MeshQueryFunctions_GetAllSplitUVsAtVertex final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UvSetIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VertexID;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ElementIDs;                                        // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      ElementUVs;                                        // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bHaveValidUVs;                                     // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshQueryFunctions_GetAllSplitUVsAtVertex) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshQueryFunctions_GetAllSplitUVsAtVertex");
static_assert(sizeof(GeometryScriptLibrary_MeshQueryFunctions_GetAllSplitUVsAtVertex) == 0x000040, "Wrong size on GeometryScriptLibrary_MeshQueryFunctions_GetAllSplitUVsAtVertex");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetAllSplitUVsAtVertex, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetAllSplitUVsAtVertex::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetAllSplitUVsAtVertex, UvSetIndex) == 0x000008, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetAllSplitUVsAtVertex::UvSetIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetAllSplitUVsAtVertex, VertexID) == 0x00000C, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetAllSplitUVsAtVertex::VertexID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetAllSplitUVsAtVertex, ElementIDs) == 0x000010, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetAllSplitUVsAtVertex::ElementIDs' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetAllSplitUVsAtVertex, ElementUVs) == 0x000020, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetAllSplitUVsAtVertex::ElementUVs' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetAllSplitUVsAtVertex, bHaveValidUVs) == 0x000030, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetAllSplitUVsAtVertex::bHaveValidUVs' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetAllSplitUVsAtVertex, ReturnValue) == 0x000038, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetAllSplitUVsAtVertex::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshQueryFunctions.GetAllTriangleIDs
// 0x0030 (0x0030 - 0x0000)
struct GeometryScriptLibrary_MeshQueryFunctions_GetAllTriangleIDs final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptIndexList               TriangleIDList;                                    // 0x0008(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          bHasTriangleIDGaps;                                // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshQueryFunctions_GetAllTriangleIDs) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshQueryFunctions_GetAllTriangleIDs");
static_assert(sizeof(GeometryScriptLibrary_MeshQueryFunctions_GetAllTriangleIDs) == 0x000030, "Wrong size on GeometryScriptLibrary_MeshQueryFunctions_GetAllTriangleIDs");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetAllTriangleIDs, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetAllTriangleIDs::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetAllTriangleIDs, TriangleIDList) == 0x000008, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetAllTriangleIDs::TriangleIDList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetAllTriangleIDs, bHasTriangleIDGaps) == 0x000020, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetAllTriangleIDs::bHasTriangleIDGaps' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetAllTriangleIDs, ReturnValue) == 0x000028, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetAllTriangleIDs::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshQueryFunctions.GetAllTriangleIndices
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_MeshQueryFunctions_GetAllTriangleIndices final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptTriangleList            TriangleList;                                      // 0x0008(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          bSkipGaps;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasTriangleIDGaps;                                // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshQueryFunctions_GetAllTriangleIndices) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshQueryFunctions_GetAllTriangleIndices");
static_assert(sizeof(GeometryScriptLibrary_MeshQueryFunctions_GetAllTriangleIndices) == 0x000028, "Wrong size on GeometryScriptLibrary_MeshQueryFunctions_GetAllTriangleIndices");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetAllTriangleIndices, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetAllTriangleIndices::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetAllTriangleIndices, TriangleList) == 0x000008, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetAllTriangleIndices::TriangleList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetAllTriangleIndices, bSkipGaps) == 0x000018, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetAllTriangleIndices::bSkipGaps' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetAllTriangleIndices, bHasTriangleIDGaps) == 0x000019, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetAllTriangleIndices::bHasTriangleIDGaps' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetAllTriangleIndices, ReturnValue) == 0x000020, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetAllTriangleIndices::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshQueryFunctions.GetAllVertexIDs
// 0x0030 (0x0030 - 0x0000)
struct GeometryScriptLibrary_MeshQueryFunctions_GetAllVertexIDs final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptIndexList               VertexIDList;                                      // 0x0008(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          bHasVertexIDGaps;                                  // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshQueryFunctions_GetAllVertexIDs) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshQueryFunctions_GetAllVertexIDs");
static_assert(sizeof(GeometryScriptLibrary_MeshQueryFunctions_GetAllVertexIDs) == 0x000030, "Wrong size on GeometryScriptLibrary_MeshQueryFunctions_GetAllVertexIDs");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetAllVertexIDs, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetAllVertexIDs::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetAllVertexIDs, VertexIDList) == 0x000008, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetAllVertexIDs::VertexIDList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetAllVertexIDs, bHasVertexIDGaps) == 0x000020, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetAllVertexIDs::bHasVertexIDGaps' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetAllVertexIDs, ReturnValue) == 0x000028, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetAllVertexIDs::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshQueryFunctions.GetAllVertexPositions
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_MeshQueryFunctions_GetAllVertexPositions final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptVectorList              PositionList;                                      // 0x0008(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          bSkipGaps;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasVertexIDGaps;                                  // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshQueryFunctions_GetAllVertexPositions) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshQueryFunctions_GetAllVertexPositions");
static_assert(sizeof(GeometryScriptLibrary_MeshQueryFunctions_GetAllVertexPositions) == 0x000028, "Wrong size on GeometryScriptLibrary_MeshQueryFunctions_GetAllVertexPositions");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetAllVertexPositions, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetAllVertexPositions::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetAllVertexPositions, PositionList) == 0x000008, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetAllVertexPositions::PositionList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetAllVertexPositions, bSkipGaps) == 0x000018, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetAllVertexPositions::bSkipGaps' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetAllVertexPositions, bHasVertexIDGaps) == 0x000019, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetAllVertexPositions::bHasVertexIDGaps' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetAllVertexPositions, ReturnValue) == 0x000020, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetAllVertexPositions::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshQueryFunctions.GetHasMaterialIDs
// 0x0010 (0x0010 - 0x0000)
struct GeometryScriptLibrary_MeshQueryFunctions_GetHasMaterialIDs final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshQueryFunctions_GetHasMaterialIDs) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshQueryFunctions_GetHasMaterialIDs");
static_assert(sizeof(GeometryScriptLibrary_MeshQueryFunctions_GetHasMaterialIDs) == 0x000010, "Wrong size on GeometryScriptLibrary_MeshQueryFunctions_GetHasMaterialIDs");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetHasMaterialIDs, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetHasMaterialIDs::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetHasMaterialIDs, ReturnValue) == 0x000008, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetHasMaterialIDs::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshQueryFunctions.GetHasPolygroups
// 0x0010 (0x0010 - 0x0000)
struct GeometryScriptLibrary_MeshQueryFunctions_GetHasPolygroups final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshQueryFunctions_GetHasPolygroups) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshQueryFunctions_GetHasPolygroups");
static_assert(sizeof(GeometryScriptLibrary_MeshQueryFunctions_GetHasPolygroups) == 0x000010, "Wrong size on GeometryScriptLibrary_MeshQueryFunctions_GetHasPolygroups");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetHasPolygroups, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetHasPolygroups::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetHasPolygroups, ReturnValue) == 0x000008, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetHasPolygroups::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshQueryFunctions.GetHasTriangleIDGaps
// 0x0010 (0x0010 - 0x0000)
struct GeometryScriptLibrary_MeshQueryFunctions_GetHasTriangleIDGaps final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshQueryFunctions_GetHasTriangleIDGaps) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshQueryFunctions_GetHasTriangleIDGaps");
static_assert(sizeof(GeometryScriptLibrary_MeshQueryFunctions_GetHasTriangleIDGaps) == 0x000010, "Wrong size on GeometryScriptLibrary_MeshQueryFunctions_GetHasTriangleIDGaps");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetHasTriangleIDGaps, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetHasTriangleIDGaps::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetHasTriangleIDGaps, ReturnValue) == 0x000008, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetHasTriangleIDGaps::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshQueryFunctions.GetHasTriangleNormals
// 0x0010 (0x0010 - 0x0000)
struct GeometryScriptLibrary_MeshQueryFunctions_GetHasTriangleNormals final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshQueryFunctions_GetHasTriangleNormals) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshQueryFunctions_GetHasTriangleNormals");
static_assert(sizeof(GeometryScriptLibrary_MeshQueryFunctions_GetHasTriangleNormals) == 0x000010, "Wrong size on GeometryScriptLibrary_MeshQueryFunctions_GetHasTriangleNormals");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetHasTriangleNormals, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetHasTriangleNormals::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetHasTriangleNormals, ReturnValue) == 0x000008, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetHasTriangleNormals::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshQueryFunctions.GetHasVertexColors
// 0x0010 (0x0010 - 0x0000)
struct GeometryScriptLibrary_MeshQueryFunctions_GetHasVertexColors final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshQueryFunctions_GetHasVertexColors) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshQueryFunctions_GetHasVertexColors");
static_assert(sizeof(GeometryScriptLibrary_MeshQueryFunctions_GetHasVertexColors) == 0x000010, "Wrong size on GeometryScriptLibrary_MeshQueryFunctions_GetHasVertexColors");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetHasVertexColors, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetHasVertexColors::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetHasVertexColors, ReturnValue) == 0x000008, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetHasVertexColors::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshQueryFunctions.GetHasVertexIDGaps
// 0x0010 (0x0010 - 0x0000)
struct GeometryScriptLibrary_MeshQueryFunctions_GetHasVertexIDGaps final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshQueryFunctions_GetHasVertexIDGaps) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshQueryFunctions_GetHasVertexIDGaps");
static_assert(sizeof(GeometryScriptLibrary_MeshQueryFunctions_GetHasVertexIDGaps) == 0x000010, "Wrong size on GeometryScriptLibrary_MeshQueryFunctions_GetHasVertexIDGaps");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetHasVertexIDGaps, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetHasVertexIDGaps::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetHasVertexIDGaps, ReturnValue) == 0x000008, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetHasVertexIDGaps::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshQueryFunctions.GetInterpolatedTriangleNormal
// 0x0050 (0x0050 - 0x0000)
struct GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleNormal final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TriangleID;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BarycentricCoords;                                 // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTriHasValidNormals;                               // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InterpolatedNormal;                                // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleNormal) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleNormal");
static_assert(sizeof(GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleNormal) == 0x000050, "Wrong size on GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleNormal");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleNormal, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleNormal::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleNormal, TriangleID) == 0x000008, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleNormal::TriangleID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleNormal, BarycentricCoords) == 0x000010, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleNormal::BarycentricCoords' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleNormal, bTriHasValidNormals) == 0x000028, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleNormal::bTriHasValidNormals' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleNormal, InterpolatedNormal) == 0x000030, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleNormal::InterpolatedNormal' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleNormal, ReturnValue) == 0x000048, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleNormal::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshQueryFunctions.GetInterpolatedTriangleNormalTangents
// 0x0080 (0x0080 - 0x0000)
struct GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleNormalTangents final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TriangleID;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BarycentricCoords;                                 // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTriHasValidElements;                              // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InterpolatedNormal;                                // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InterpolatedTangent;                               // 0x0048(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InterpolatedBiTangent;                             // 0x0060(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleNormalTangents) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleNormalTangents");
static_assert(sizeof(GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleNormalTangents) == 0x000080, "Wrong size on GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleNormalTangents");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleNormalTangents, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleNormalTangents::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleNormalTangents, TriangleID) == 0x000008, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleNormalTangents::TriangleID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleNormalTangents, BarycentricCoords) == 0x000010, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleNormalTangents::BarycentricCoords' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleNormalTangents, bTriHasValidElements) == 0x000028, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleNormalTangents::bTriHasValidElements' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleNormalTangents, InterpolatedNormal) == 0x000030, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleNormalTangents::InterpolatedNormal' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleNormalTangents, InterpolatedTangent) == 0x000048, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleNormalTangents::InterpolatedTangent' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleNormalTangents, InterpolatedBiTangent) == 0x000060, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleNormalTangents::InterpolatedBiTangent' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleNormalTangents, ReturnValue) == 0x000078, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleNormalTangents::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshQueryFunctions.GetInterpolatedTrianglePosition
// 0x0050 (0x0050 - 0x0000)
struct GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTrianglePosition final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TriangleID;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BarycentricCoords;                                 // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValidTriangle;                                  // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InterpolatedPosition;                              // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTrianglePosition) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTrianglePosition");
static_assert(sizeof(GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTrianglePosition) == 0x000050, "Wrong size on GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTrianglePosition");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTrianglePosition, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTrianglePosition::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTrianglePosition, TriangleID) == 0x000008, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTrianglePosition::TriangleID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTrianglePosition, BarycentricCoords) == 0x000010, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTrianglePosition::BarycentricCoords' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTrianglePosition, bIsValidTriangle) == 0x000028, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTrianglePosition::bIsValidTriangle' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTrianglePosition, InterpolatedPosition) == 0x000030, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTrianglePosition::InterpolatedPosition' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTrianglePosition, ReturnValue) == 0x000048, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTrianglePosition::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshQueryFunctions.GetInterpolatedTriangleUV
// 0x0048 (0x0048 - 0x0000)
struct GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleUV final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UvSetIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TriangleID;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BarycentricCoords;                                 // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTriHasValidUVs;                                   // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              InterpolatedUV;                                    // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleUV) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleUV");
static_assert(sizeof(GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleUV) == 0x000048, "Wrong size on GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleUV");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleUV, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleUV::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleUV, UvSetIndex) == 0x000008, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleUV::UvSetIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleUV, TriangleID) == 0x00000C, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleUV::TriangleID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleUV, BarycentricCoords) == 0x000010, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleUV::BarycentricCoords' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleUV, bTriHasValidUVs) == 0x000028, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleUV::bTriHasValidUVs' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleUV, InterpolatedUV) == 0x000030, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleUV::InterpolatedUV' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleUV, ReturnValue) == 0x000040, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleUV::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshQueryFunctions.GetInterpolatedTriangleVertexColor
// 0x0058 (0x0058 - 0x0000)
struct GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleVertexColor final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TriangleID;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BarycentricCoords;                                 // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DefaultColor;                                      // 0x0028(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTriHasValidVertexColors;                          // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           InterpolatedColor;                                 // 0x003C(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleVertexColor) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleVertexColor");
static_assert(sizeof(GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleVertexColor) == 0x000058, "Wrong size on GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleVertexColor");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleVertexColor, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleVertexColor::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleVertexColor, TriangleID) == 0x000008, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleVertexColor::TriangleID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleVertexColor, BarycentricCoords) == 0x000010, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleVertexColor::BarycentricCoords' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleVertexColor, DefaultColor) == 0x000028, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleVertexColor::DefaultColor' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleVertexColor, bTriHasValidVertexColors) == 0x000038, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleVertexColor::bTriHasValidVertexColors' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleVertexColor, InterpolatedColor) == 0x00003C, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleVertexColor::InterpolatedColor' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleVertexColor, ReturnValue) == 0x000050, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetInterpolatedTriangleVertexColor::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshQueryFunctions.GetIsClosedMesh
// 0x0010 (0x0010 - 0x0000)
struct GeometryScriptLibrary_MeshQueryFunctions_GetIsClosedMesh final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshQueryFunctions_GetIsClosedMesh) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshQueryFunctions_GetIsClosedMesh");
static_assert(sizeof(GeometryScriptLibrary_MeshQueryFunctions_GetIsClosedMesh) == 0x000010, "Wrong size on GeometryScriptLibrary_MeshQueryFunctions_GetIsClosedMesh");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetIsClosedMesh, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetIsClosedMesh::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetIsClosedMesh, ReturnValue) == 0x000008, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetIsClosedMesh::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshQueryFunctions.GetIsDenseMesh
// 0x0010 (0x0010 - 0x0000)
struct GeometryScriptLibrary_MeshQueryFunctions_GetIsDenseMesh final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshQueryFunctions_GetIsDenseMesh) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshQueryFunctions_GetIsDenseMesh");
static_assert(sizeof(GeometryScriptLibrary_MeshQueryFunctions_GetIsDenseMesh) == 0x000010, "Wrong size on GeometryScriptLibrary_MeshQueryFunctions_GetIsDenseMesh");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetIsDenseMesh, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetIsDenseMesh::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetIsDenseMesh, ReturnValue) == 0x000008, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetIsDenseMesh::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshQueryFunctions.GetMeshBoundingBox
// 0x0040 (0x0040 - 0x0000)
struct GeometryScriptLibrary_MeshQueryFunctions_GetMeshBoundingBox final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   ReturnValue;                                       // 0x0008(0x0038)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshQueryFunctions_GetMeshBoundingBox) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshQueryFunctions_GetMeshBoundingBox");
static_assert(sizeof(GeometryScriptLibrary_MeshQueryFunctions_GetMeshBoundingBox) == 0x000040, "Wrong size on GeometryScriptLibrary_MeshQueryFunctions_GetMeshBoundingBox");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetMeshBoundingBox, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetMeshBoundingBox::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetMeshBoundingBox, ReturnValue) == 0x000008, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetMeshBoundingBox::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshQueryFunctions.GetMeshHasAttributeSet
// 0x0010 (0x0010 - 0x0000)
struct GeometryScriptLibrary_MeshQueryFunctions_GetMeshHasAttributeSet final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshQueryFunctions_GetMeshHasAttributeSet) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshQueryFunctions_GetMeshHasAttributeSet");
static_assert(sizeof(GeometryScriptLibrary_MeshQueryFunctions_GetMeshHasAttributeSet) == 0x000010, "Wrong size on GeometryScriptLibrary_MeshQueryFunctions_GetMeshHasAttributeSet");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetMeshHasAttributeSet, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetMeshHasAttributeSet::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetMeshHasAttributeSet, ReturnValue) == 0x000008, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetMeshHasAttributeSet::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshQueryFunctions.GetMeshInfoString
// 0x0018 (0x0018 - 0x0000)
struct GeometryScriptLibrary_MeshQueryFunctions_GetMeshInfoString final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshQueryFunctions_GetMeshInfoString) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshQueryFunctions_GetMeshInfoString");
static_assert(sizeof(GeometryScriptLibrary_MeshQueryFunctions_GetMeshInfoString) == 0x000018, "Wrong size on GeometryScriptLibrary_MeshQueryFunctions_GetMeshInfoString");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetMeshInfoString, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetMeshInfoString::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetMeshInfoString, ReturnValue) == 0x000008, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetMeshInfoString::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshQueryFunctions.GetMeshVolumeArea
// 0x0010 (0x0010 - 0x0000)
struct GeometryScriptLibrary_MeshQueryFunctions_GetMeshVolumeArea final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SurfaceArea;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshQueryFunctions_GetMeshVolumeArea) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshQueryFunctions_GetMeshVolumeArea");
static_assert(sizeof(GeometryScriptLibrary_MeshQueryFunctions_GetMeshVolumeArea) == 0x000010, "Wrong size on GeometryScriptLibrary_MeshQueryFunctions_GetMeshVolumeArea");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetMeshVolumeArea, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetMeshVolumeArea::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetMeshVolumeArea, SurfaceArea) == 0x000008, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetMeshVolumeArea::SurfaceArea' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetMeshVolumeArea, Volume) == 0x00000C, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetMeshVolumeArea::Volume' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshQueryFunctions.GetMeshVolumeAreaCenter
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_MeshQueryFunctions_GetMeshVolumeAreaCenter final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SurfaceArea;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CenterOfMass;                                      // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshQueryFunctions_GetMeshVolumeAreaCenter) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshQueryFunctions_GetMeshVolumeAreaCenter");
static_assert(sizeof(GeometryScriptLibrary_MeshQueryFunctions_GetMeshVolumeAreaCenter) == 0x000028, "Wrong size on GeometryScriptLibrary_MeshQueryFunctions_GetMeshVolumeAreaCenter");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetMeshVolumeAreaCenter, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetMeshVolumeAreaCenter::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetMeshVolumeAreaCenter, SurfaceArea) == 0x000008, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetMeshVolumeAreaCenter::SurfaceArea' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetMeshVolumeAreaCenter, Volume) == 0x00000C, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetMeshVolumeAreaCenter::Volume' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetMeshVolumeAreaCenter, CenterOfMass) == 0x000010, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetMeshVolumeAreaCenter::CenterOfMass' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshQueryFunctions.GetNumConnectedComponents
// 0x0010 (0x0010 - 0x0000)
struct GeometryScriptLibrary_MeshQueryFunctions_GetNumConnectedComponents final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshQueryFunctions_GetNumConnectedComponents) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshQueryFunctions_GetNumConnectedComponents");
static_assert(sizeof(GeometryScriptLibrary_MeshQueryFunctions_GetNumConnectedComponents) == 0x000010, "Wrong size on GeometryScriptLibrary_MeshQueryFunctions_GetNumConnectedComponents");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetNumConnectedComponents, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetNumConnectedComponents::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetNumConnectedComponents, ReturnValue) == 0x000008, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetNumConnectedComponents::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshQueryFunctions.GetNumExtendedPolygroupLayers
// 0x0010 (0x0010 - 0x0000)
struct GeometryScriptLibrary_MeshQueryFunctions_GetNumExtendedPolygroupLayers final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshQueryFunctions_GetNumExtendedPolygroupLayers) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshQueryFunctions_GetNumExtendedPolygroupLayers");
static_assert(sizeof(GeometryScriptLibrary_MeshQueryFunctions_GetNumExtendedPolygroupLayers) == 0x000010, "Wrong size on GeometryScriptLibrary_MeshQueryFunctions_GetNumExtendedPolygroupLayers");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetNumExtendedPolygroupLayers, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetNumExtendedPolygroupLayers::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetNumExtendedPolygroupLayers, ReturnValue) == 0x000008, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetNumExtendedPolygroupLayers::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshQueryFunctions.GetNumOpenBorderEdges
// 0x0010 (0x0010 - 0x0000)
struct GeometryScriptLibrary_MeshQueryFunctions_GetNumOpenBorderEdges final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshQueryFunctions_GetNumOpenBorderEdges) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshQueryFunctions_GetNumOpenBorderEdges");
static_assert(sizeof(GeometryScriptLibrary_MeshQueryFunctions_GetNumOpenBorderEdges) == 0x000010, "Wrong size on GeometryScriptLibrary_MeshQueryFunctions_GetNumOpenBorderEdges");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetNumOpenBorderEdges, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetNumOpenBorderEdges::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetNumOpenBorderEdges, ReturnValue) == 0x000008, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetNumOpenBorderEdges::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshQueryFunctions.GetNumOpenBorderLoops
// 0x0010 (0x0010 - 0x0000)
struct GeometryScriptLibrary_MeshQueryFunctions_GetNumOpenBorderLoops final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAmbiguousTopologyFound;                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshQueryFunctions_GetNumOpenBorderLoops) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshQueryFunctions_GetNumOpenBorderLoops");
static_assert(sizeof(GeometryScriptLibrary_MeshQueryFunctions_GetNumOpenBorderLoops) == 0x000010, "Wrong size on GeometryScriptLibrary_MeshQueryFunctions_GetNumOpenBorderLoops");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetNumOpenBorderLoops, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetNumOpenBorderLoops::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetNumOpenBorderLoops, bAmbiguousTopologyFound) == 0x000008, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetNumOpenBorderLoops::bAmbiguousTopologyFound' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetNumOpenBorderLoops, ReturnValue) == 0x00000C, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetNumOpenBorderLoops::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshQueryFunctions.GetNumTriangleIDs
// 0x0010 (0x0010 - 0x0000)
struct GeometryScriptLibrary_MeshQueryFunctions_GetNumTriangleIDs final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshQueryFunctions_GetNumTriangleIDs) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshQueryFunctions_GetNumTriangleIDs");
static_assert(sizeof(GeometryScriptLibrary_MeshQueryFunctions_GetNumTriangleIDs) == 0x000010, "Wrong size on GeometryScriptLibrary_MeshQueryFunctions_GetNumTriangleIDs");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetNumTriangleIDs, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetNumTriangleIDs::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetNumTriangleIDs, ReturnValue) == 0x000008, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetNumTriangleIDs::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshQueryFunctions.GetNumUVSets
// 0x0010 (0x0010 - 0x0000)
struct GeometryScriptLibrary_MeshQueryFunctions_GetNumUVSets final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshQueryFunctions_GetNumUVSets) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshQueryFunctions_GetNumUVSets");
static_assert(sizeof(GeometryScriptLibrary_MeshQueryFunctions_GetNumUVSets) == 0x000010, "Wrong size on GeometryScriptLibrary_MeshQueryFunctions_GetNumUVSets");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetNumUVSets, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetNumUVSets::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetNumUVSets, ReturnValue) == 0x000008, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetNumUVSets::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshQueryFunctions.GetNumVertexIDs
// 0x0010 (0x0010 - 0x0000)
struct GeometryScriptLibrary_MeshQueryFunctions_GetNumVertexIDs final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshQueryFunctions_GetNumVertexIDs) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshQueryFunctions_GetNumVertexIDs");
static_assert(sizeof(GeometryScriptLibrary_MeshQueryFunctions_GetNumVertexIDs) == 0x000010, "Wrong size on GeometryScriptLibrary_MeshQueryFunctions_GetNumVertexIDs");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetNumVertexIDs, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetNumVertexIDs::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetNumVertexIDs, ReturnValue) == 0x000008, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetNumVertexIDs::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshQueryFunctions.GetTriangleFaceNormal
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_MeshQueryFunctions_GetTriangleFaceNormal final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TriangleID;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValidTriangle;                                  // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshQueryFunctions_GetTriangleFaceNormal) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshQueryFunctions_GetTriangleFaceNormal");
static_assert(sizeof(GeometryScriptLibrary_MeshQueryFunctions_GetTriangleFaceNormal) == 0x000028, "Wrong size on GeometryScriptLibrary_MeshQueryFunctions_GetTriangleFaceNormal");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetTriangleFaceNormal, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetTriangleFaceNormal::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetTriangleFaceNormal, TriangleID) == 0x000008, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetTriangleFaceNormal::TriangleID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetTriangleFaceNormal, bIsValidTriangle) == 0x00000C, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetTriangleFaceNormal::bIsValidTriangle' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetTriangleFaceNormal, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetTriangleFaceNormal::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshQueryFunctions.GetTriangleIndices
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_MeshQueryFunctions_GetTriangleIndices final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TriangleID;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValidTriangle;                                  // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntVector                             ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshQueryFunctions_GetTriangleIndices) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshQueryFunctions_GetTriangleIndices");
static_assert(sizeof(GeometryScriptLibrary_MeshQueryFunctions_GetTriangleIndices) == 0x000020, "Wrong size on GeometryScriptLibrary_MeshQueryFunctions_GetTriangleIndices");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetTriangleIndices, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetTriangleIndices::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetTriangleIndices, TriangleID) == 0x000008, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetTriangleIndices::TriangleID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetTriangleIndices, bIsValidTriangle) == 0x00000C, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetTriangleIndices::bIsValidTriangle' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetTriangleIndices, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetTriangleIndices::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshQueryFunctions.GetTriangleNormals
// 0x0068 (0x0068 - 0x0000)
struct GeometryScriptLibrary_MeshQueryFunctions_GetTriangleNormals final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TriangleID;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Normal1;                                           // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal2;                                           // 0x0028(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal3;                                           // 0x0040(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTriHasValidNormals;                               // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshQueryFunctions_GetTriangleNormals) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshQueryFunctions_GetTriangleNormals");
static_assert(sizeof(GeometryScriptLibrary_MeshQueryFunctions_GetTriangleNormals) == 0x000068, "Wrong size on GeometryScriptLibrary_MeshQueryFunctions_GetTriangleNormals");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetTriangleNormals, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetTriangleNormals::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetTriangleNormals, TriangleID) == 0x000008, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetTriangleNormals::TriangleID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetTriangleNormals, Normal1) == 0x000010, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetTriangleNormals::Normal1' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetTriangleNormals, Normal2) == 0x000028, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetTriangleNormals::Normal2' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetTriangleNormals, Normal3) == 0x000040, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetTriangleNormals::Normal3' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetTriangleNormals, bTriHasValidNormals) == 0x000058, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetTriangleNormals::bTriHasValidNormals' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetTriangleNormals, ReturnValue) == 0x000060, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetTriangleNormals::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshQueryFunctions.GetTriangleNormalTangents
// 0x00F0 (0x00F0 - 0x0000)
struct GeometryScriptLibrary_MeshQueryFunctions_GetTriangleNormalTangents final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TriangleID;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTriHasValidElements;                              // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptTriangle                Normals;                                           // 0x0010(0x0048)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FGeometryScriptTriangle                Tangents;                                          // 0x0058(0x0048)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FGeometryScriptTriangle                BiTangents;                                        // 0x00A0(0x0048)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x00E8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshQueryFunctions_GetTriangleNormalTangents) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshQueryFunctions_GetTriangleNormalTangents");
static_assert(sizeof(GeometryScriptLibrary_MeshQueryFunctions_GetTriangleNormalTangents) == 0x0000F0, "Wrong size on GeometryScriptLibrary_MeshQueryFunctions_GetTriangleNormalTangents");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetTriangleNormalTangents, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetTriangleNormalTangents::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetTriangleNormalTangents, TriangleID) == 0x000008, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetTriangleNormalTangents::TriangleID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetTriangleNormalTangents, bTriHasValidElements) == 0x00000C, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetTriangleNormalTangents::bTriHasValidElements' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetTriangleNormalTangents, Normals) == 0x000010, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetTriangleNormalTangents::Normals' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetTriangleNormalTangents, Tangents) == 0x000058, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetTriangleNormalTangents::Tangents' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetTriangleNormalTangents, BiTangents) == 0x0000A0, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetTriangleNormalTangents::BiTangents' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetTriangleNormalTangents, ReturnValue) == 0x0000E8, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetTriangleNormalTangents::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshQueryFunctions.GetTrianglePositions
// 0x0058 (0x0058 - 0x0000)
struct GeometryScriptLibrary_MeshQueryFunctions_GetTrianglePositions final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TriangleID;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValidTriangle;                                  // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Vertex1;                                           // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Vertex2;                                           // 0x0028(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Vertex3;                                           // 0x0040(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshQueryFunctions_GetTrianglePositions) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshQueryFunctions_GetTrianglePositions");
static_assert(sizeof(GeometryScriptLibrary_MeshQueryFunctions_GetTrianglePositions) == 0x000058, "Wrong size on GeometryScriptLibrary_MeshQueryFunctions_GetTrianglePositions");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetTrianglePositions, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetTrianglePositions::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetTrianglePositions, TriangleID) == 0x000008, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetTrianglePositions::TriangleID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetTrianglePositions, bIsValidTriangle) == 0x00000C, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetTrianglePositions::bIsValidTriangle' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetTrianglePositions, Vertex1) == 0x000010, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetTrianglePositions::Vertex1' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetTrianglePositions, Vertex2) == 0x000028, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetTrianglePositions::Vertex2' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetTrianglePositions, Vertex3) == 0x000040, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetTrianglePositions::Vertex3' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshQueryFunctions.GetTriangleUVs
// 0x0048 (0x0048 - 0x0000)
struct GeometryScriptLibrary_MeshQueryFunctions_GetTriangleUVs final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UvSetIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TriangleID;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              UV1;                                               // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              UV2;                                               // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              UV3;                                               // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHaveValidUVs;                                     // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshQueryFunctions_GetTriangleUVs) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshQueryFunctions_GetTriangleUVs");
static_assert(sizeof(GeometryScriptLibrary_MeshQueryFunctions_GetTriangleUVs) == 0x000048, "Wrong size on GeometryScriptLibrary_MeshQueryFunctions_GetTriangleUVs");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetTriangleUVs, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetTriangleUVs::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetTriangleUVs, UvSetIndex) == 0x000008, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetTriangleUVs::UvSetIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetTriangleUVs, TriangleID) == 0x00000C, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetTriangleUVs::TriangleID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetTriangleUVs, UV1) == 0x000010, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetTriangleUVs::UV1' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetTriangleUVs, UV2) == 0x000020, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetTriangleUVs::UV2' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetTriangleUVs, UV3) == 0x000030, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetTriangleUVs::UV3' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetTriangleUVs, bHaveValidUVs) == 0x000040, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetTriangleUVs::bHaveValidUVs' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshQueryFunctions.GetTriangleVertexColors
// 0x0048 (0x0048 - 0x0000)
struct GeometryScriptLibrary_MeshQueryFunctions_GetTriangleVertexColors final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TriangleID;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color1;                                            // 0x000C(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color2;                                            // 0x001C(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color3;                                            // 0x002C(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTriHasValidVertexColors;                          // 0x003C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshQueryFunctions_GetTriangleVertexColors) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshQueryFunctions_GetTriangleVertexColors");
static_assert(sizeof(GeometryScriptLibrary_MeshQueryFunctions_GetTriangleVertexColors) == 0x000048, "Wrong size on GeometryScriptLibrary_MeshQueryFunctions_GetTriangleVertexColors");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetTriangleVertexColors, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetTriangleVertexColors::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetTriangleVertexColors, TriangleID) == 0x000008, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetTriangleVertexColors::TriangleID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetTriangleVertexColors, Color1) == 0x00000C, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetTriangleVertexColors::Color1' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetTriangleVertexColors, Color2) == 0x00001C, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetTriangleVertexColors::Color2' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetTriangleVertexColors, Color3) == 0x00002C, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetTriangleVertexColors::Color3' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetTriangleVertexColors, bTriHasValidVertexColors) == 0x00003C, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetTriangleVertexColors::bTriHasValidVertexColors' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetTriangleVertexColors, ReturnValue) == 0x000040, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetTriangleVertexColors::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshQueryFunctions.GetUVSetBoundingBox
// 0x0038 (0x0038 - 0x0000)
struct GeometryScriptLibrary_MeshQueryFunctions_GetUVSetBoundingBox final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UvSetIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValidUVSet;                                     // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUVSetIsEmpty;                                     // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBox2D                                 ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshQueryFunctions_GetUVSetBoundingBox) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshQueryFunctions_GetUVSetBoundingBox");
static_assert(sizeof(GeometryScriptLibrary_MeshQueryFunctions_GetUVSetBoundingBox) == 0x000038, "Wrong size on GeometryScriptLibrary_MeshQueryFunctions_GetUVSetBoundingBox");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetUVSetBoundingBox, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetUVSetBoundingBox::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetUVSetBoundingBox, UvSetIndex) == 0x000008, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetUVSetBoundingBox::UvSetIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetUVSetBoundingBox, bIsValidUVSet) == 0x00000C, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetUVSetBoundingBox::bIsValidUVSet' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetUVSetBoundingBox, bUVSetIsEmpty) == 0x00000D, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetUVSetBoundingBox::bUVSetIsEmpty' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetUVSetBoundingBox, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetUVSetBoundingBox::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshQueryFunctions.GetVertexConnectedTriangles
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_MeshQueryFunctions_GetVertexConnectedTriangles final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VertexID;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Triangles;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshQueryFunctions_GetVertexConnectedTriangles) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshQueryFunctions_GetVertexConnectedTriangles");
static_assert(sizeof(GeometryScriptLibrary_MeshQueryFunctions_GetVertexConnectedTriangles) == 0x000028, "Wrong size on GeometryScriptLibrary_MeshQueryFunctions_GetVertexConnectedTriangles");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetVertexConnectedTriangles, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetVertexConnectedTriangles::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetVertexConnectedTriangles, VertexID) == 0x000008, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetVertexConnectedTriangles::VertexID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetVertexConnectedTriangles, Triangles) == 0x000010, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetVertexConnectedTriangles::Triangles' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetVertexConnectedTriangles, ReturnValue) == 0x000020, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetVertexConnectedTriangles::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshQueryFunctions.GetVertexConnectedVertices
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_MeshQueryFunctions_GetVertexConnectedVertices final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VertexID;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Vertices;                                          // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshQueryFunctions_GetVertexConnectedVertices) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshQueryFunctions_GetVertexConnectedVertices");
static_assert(sizeof(GeometryScriptLibrary_MeshQueryFunctions_GetVertexConnectedVertices) == 0x000028, "Wrong size on GeometryScriptLibrary_MeshQueryFunctions_GetVertexConnectedVertices");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetVertexConnectedVertices, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetVertexConnectedVertices::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetVertexConnectedVertices, VertexID) == 0x000008, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetVertexConnectedVertices::VertexID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetVertexConnectedVertices, Vertices) == 0x000010, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetVertexConnectedVertices::Vertices' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetVertexConnectedVertices, ReturnValue) == 0x000020, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetVertexConnectedVertices::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshQueryFunctions.GetVertexCount
// 0x0010 (0x0010 - 0x0000)
struct GeometryScriptLibrary_MeshQueryFunctions_GetVertexCount final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshQueryFunctions_GetVertexCount) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshQueryFunctions_GetVertexCount");
static_assert(sizeof(GeometryScriptLibrary_MeshQueryFunctions_GetVertexCount) == 0x000010, "Wrong size on GeometryScriptLibrary_MeshQueryFunctions_GetVertexCount");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetVertexCount, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetVertexCount::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetVertexCount, ReturnValue) == 0x000008, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetVertexCount::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshQueryFunctions.GetVertexPosition
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_MeshQueryFunctions_GetVertexPosition final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VertexID;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValidVertex;                                    // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshQueryFunctions_GetVertexPosition) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshQueryFunctions_GetVertexPosition");
static_assert(sizeof(GeometryScriptLibrary_MeshQueryFunctions_GetVertexPosition) == 0x000028, "Wrong size on GeometryScriptLibrary_MeshQueryFunctions_GetVertexPosition");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetVertexPosition, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetVertexPosition::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetVertexPosition, VertexID) == 0x000008, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetVertexPosition::VertexID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetVertexPosition, bIsValidVertex) == 0x00000C, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetVertexPosition::bIsValidVertex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_GetVertexPosition, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_MeshQueryFunctions_GetVertexPosition::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshQueryFunctions.IsValidTriangleID
// 0x0010 (0x0010 - 0x0000)
struct GeometryScriptLibrary_MeshQueryFunctions_IsValidTriangleID final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TriangleID;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshQueryFunctions_IsValidTriangleID) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshQueryFunctions_IsValidTriangleID");
static_assert(sizeof(GeometryScriptLibrary_MeshQueryFunctions_IsValidTriangleID) == 0x000010, "Wrong size on GeometryScriptLibrary_MeshQueryFunctions_IsValidTriangleID");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_IsValidTriangleID, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshQueryFunctions_IsValidTriangleID::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_IsValidTriangleID, TriangleID) == 0x000008, "Member 'GeometryScriptLibrary_MeshQueryFunctions_IsValidTriangleID::TriangleID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_IsValidTriangleID, ReturnValue) == 0x00000C, "Member 'GeometryScriptLibrary_MeshQueryFunctions_IsValidTriangleID::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshQueryFunctions.IsValidVertexID
// 0x0010 (0x0010 - 0x0000)
struct GeometryScriptLibrary_MeshQueryFunctions_IsValidVertexID final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VertexID;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshQueryFunctions_IsValidVertexID) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshQueryFunctions_IsValidVertexID");
static_assert(sizeof(GeometryScriptLibrary_MeshQueryFunctions_IsValidVertexID) == 0x000010, "Wrong size on GeometryScriptLibrary_MeshQueryFunctions_IsValidVertexID");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_IsValidVertexID, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshQueryFunctions_IsValidVertexID::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_IsValidVertexID, VertexID) == 0x000008, "Member 'GeometryScriptLibrary_MeshQueryFunctions_IsValidVertexID::VertexID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshQueryFunctions_IsValidVertexID, ReturnValue) == 0x00000C, "Member 'GeometryScriptLibrary_MeshQueryFunctions_IsValidVertexID::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_RemeshingFunctions.ApplyUniformRemesh
// 0x0040 (0x0040 - 0x0000)
struct GeometryScriptLibrary_RemeshingFunctions_ApplyUniformRemesh final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptRemeshOptions           RemeshOptions;                                     // 0x0008(0x001C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FGeometryScriptUniformRemeshOptions    UniformOptions;                                    // 0x0024(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_RemeshingFunctions_ApplyUniformRemesh) == 0x000008, "Wrong alignment on GeometryScriptLibrary_RemeshingFunctions_ApplyUniformRemesh");
static_assert(sizeof(GeometryScriptLibrary_RemeshingFunctions_ApplyUniformRemesh) == 0x000040, "Wrong size on GeometryScriptLibrary_RemeshingFunctions_ApplyUniformRemesh");
static_assert(offsetof(GeometryScriptLibrary_RemeshingFunctions_ApplyUniformRemesh, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_RemeshingFunctions_ApplyUniformRemesh::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_RemeshingFunctions_ApplyUniformRemesh, RemeshOptions) == 0x000008, "Member 'GeometryScriptLibrary_RemeshingFunctions_ApplyUniformRemesh::RemeshOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_RemeshingFunctions_ApplyUniformRemesh, UniformOptions) == 0x000024, "Member 'GeometryScriptLibrary_RemeshingFunctions_ApplyUniformRemesh::UniformOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_RemeshingFunctions_ApplyUniformRemesh, Debug) == 0x000030, "Member 'GeometryScriptLibrary_RemeshingFunctions_ApplyUniformRemesh::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_RemeshingFunctions_ApplyUniformRemesh, ReturnValue) == 0x000038, "Member 'GeometryScriptLibrary_RemeshingFunctions_ApplyUniformRemesh::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshRepairFunctions.CompactMesh
// 0x0018 (0x0018 - 0x0000)
struct GeometryScriptLibrary_MeshRepairFunctions_CompactMesh final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshRepairFunctions_CompactMesh) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshRepairFunctions_CompactMesh");
static_assert(sizeof(GeometryScriptLibrary_MeshRepairFunctions_CompactMesh) == 0x000018, "Wrong size on GeometryScriptLibrary_MeshRepairFunctions_CompactMesh");
static_assert(offsetof(GeometryScriptLibrary_MeshRepairFunctions_CompactMesh, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshRepairFunctions_CompactMesh::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshRepairFunctions_CompactMesh, Debug) == 0x000008, "Member 'GeometryScriptLibrary_MeshRepairFunctions_CompactMesh::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshRepairFunctions_CompactMesh, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_MeshRepairFunctions_CompactMesh::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshRepairFunctions.FillAllMeshHoles
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_MeshRepairFunctions_FillAllMeshHoles final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptFillHolesOptions        FillOptions;                                       // 0x0008(0x0002)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumFilledHoles;                                    // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumFailedHoleFills;                                // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshRepairFunctions_FillAllMeshHoles) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshRepairFunctions_FillAllMeshHoles");
static_assert(sizeof(GeometryScriptLibrary_MeshRepairFunctions_FillAllMeshHoles) == 0x000028, "Wrong size on GeometryScriptLibrary_MeshRepairFunctions_FillAllMeshHoles");
static_assert(offsetof(GeometryScriptLibrary_MeshRepairFunctions_FillAllMeshHoles, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshRepairFunctions_FillAllMeshHoles::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshRepairFunctions_FillAllMeshHoles, FillOptions) == 0x000008, "Member 'GeometryScriptLibrary_MeshRepairFunctions_FillAllMeshHoles::FillOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshRepairFunctions_FillAllMeshHoles, NumFilledHoles) == 0x00000C, "Member 'GeometryScriptLibrary_MeshRepairFunctions_FillAllMeshHoles::NumFilledHoles' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshRepairFunctions_FillAllMeshHoles, NumFailedHoleFills) == 0x000010, "Member 'GeometryScriptLibrary_MeshRepairFunctions_FillAllMeshHoles::NumFailedHoleFills' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshRepairFunctions_FillAllMeshHoles, Debug) == 0x000018, "Member 'GeometryScriptLibrary_MeshRepairFunctions_FillAllMeshHoles::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshRepairFunctions_FillAllMeshHoles, ReturnValue) == 0x000020, "Member 'GeometryScriptLibrary_MeshRepairFunctions_FillAllMeshHoles::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshRepairFunctions.RemoveHiddenTriangles
// 0x0038 (0x0038 - 0x0000)
struct GeometryScriptLibrary_MeshRepairFunctions_RemoveHiddenTriangles final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptRemoveHiddenTrianglesOptions Options;                                           // 0x0008(0x001C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshRepairFunctions_RemoveHiddenTriangles) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshRepairFunctions_RemoveHiddenTriangles");
static_assert(sizeof(GeometryScriptLibrary_MeshRepairFunctions_RemoveHiddenTriangles) == 0x000038, "Wrong size on GeometryScriptLibrary_MeshRepairFunctions_RemoveHiddenTriangles");
static_assert(offsetof(GeometryScriptLibrary_MeshRepairFunctions_RemoveHiddenTriangles, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshRepairFunctions_RemoveHiddenTriangles::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshRepairFunctions_RemoveHiddenTriangles, Options) == 0x000008, "Member 'GeometryScriptLibrary_MeshRepairFunctions_RemoveHiddenTriangles::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshRepairFunctions_RemoveHiddenTriangles, Debug) == 0x000028, "Member 'GeometryScriptLibrary_MeshRepairFunctions_RemoveHiddenTriangles::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshRepairFunctions_RemoveHiddenTriangles, ReturnValue) == 0x000030, "Member 'GeometryScriptLibrary_MeshRepairFunctions_RemoveHiddenTriangles::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshRepairFunctions.RemoveSmallComponents
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_MeshRepairFunctions_RemoveSmallComponents final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptRemoveSmallComponentOptions Options;                                           // 0x0008(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshRepairFunctions_RemoveSmallComponents) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshRepairFunctions_RemoveSmallComponents");
static_assert(sizeof(GeometryScriptLibrary_MeshRepairFunctions_RemoveSmallComponents) == 0x000028, "Wrong size on GeometryScriptLibrary_MeshRepairFunctions_RemoveSmallComponents");
static_assert(offsetof(GeometryScriptLibrary_MeshRepairFunctions_RemoveSmallComponents, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshRepairFunctions_RemoveSmallComponents::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshRepairFunctions_RemoveSmallComponents, Options) == 0x000008, "Member 'GeometryScriptLibrary_MeshRepairFunctions_RemoveSmallComponents::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshRepairFunctions_RemoveSmallComponents, Debug) == 0x000018, "Member 'GeometryScriptLibrary_MeshRepairFunctions_RemoveSmallComponents::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshRepairFunctions_RemoveSmallComponents, ReturnValue) == 0x000020, "Member 'GeometryScriptLibrary_MeshRepairFunctions_RemoveSmallComponents::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshRepairFunctions.RemoveUnusedVertices
// 0x0018 (0x0018 - 0x0000)
struct GeometryScriptLibrary_MeshRepairFunctions_RemoveUnusedVertices final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshRepairFunctions_RemoveUnusedVertices) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshRepairFunctions_RemoveUnusedVertices");
static_assert(sizeof(GeometryScriptLibrary_MeshRepairFunctions_RemoveUnusedVertices) == 0x000018, "Wrong size on GeometryScriptLibrary_MeshRepairFunctions_RemoveUnusedVertices");
static_assert(offsetof(GeometryScriptLibrary_MeshRepairFunctions_RemoveUnusedVertices, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshRepairFunctions_RemoveUnusedVertices::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshRepairFunctions_RemoveUnusedVertices, Debug) == 0x000008, "Member 'GeometryScriptLibrary_MeshRepairFunctions_RemoveUnusedVertices::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshRepairFunctions_RemoveUnusedVertices, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_MeshRepairFunctions_RemoveUnusedVertices::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshRepairFunctions.RepairMeshDegenerateGeometry
// 0x0038 (0x0038 - 0x0000)
struct GeometryScriptLibrary_MeshRepairFunctions_RepairMeshDegenerateGeometry final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptDegenerateTriangleOptions Options;                                           // 0x0008(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshRepairFunctions_RepairMeshDegenerateGeometry) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshRepairFunctions_RepairMeshDegenerateGeometry");
static_assert(sizeof(GeometryScriptLibrary_MeshRepairFunctions_RepairMeshDegenerateGeometry) == 0x000038, "Wrong size on GeometryScriptLibrary_MeshRepairFunctions_RepairMeshDegenerateGeometry");
static_assert(offsetof(GeometryScriptLibrary_MeshRepairFunctions_RepairMeshDegenerateGeometry, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshRepairFunctions_RepairMeshDegenerateGeometry::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshRepairFunctions_RepairMeshDegenerateGeometry, Options) == 0x000008, "Member 'GeometryScriptLibrary_MeshRepairFunctions_RepairMeshDegenerateGeometry::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshRepairFunctions_RepairMeshDegenerateGeometry, Debug) == 0x000028, "Member 'GeometryScriptLibrary_MeshRepairFunctions_RepairMeshDegenerateGeometry::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshRepairFunctions_RepairMeshDegenerateGeometry, ReturnValue) == 0x000030, "Member 'GeometryScriptLibrary_MeshRepairFunctions_RepairMeshDegenerateGeometry::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshRepairFunctions.ResolveMeshTJunctions
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_MeshRepairFunctions_ResolveMeshTJunctions final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptResolveTJunctionOptions ResolveOptions;                                    // 0x0008(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshRepairFunctions_ResolveMeshTJunctions) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshRepairFunctions_ResolveMeshTJunctions");
static_assert(sizeof(GeometryScriptLibrary_MeshRepairFunctions_ResolveMeshTJunctions) == 0x000020, "Wrong size on GeometryScriptLibrary_MeshRepairFunctions_ResolveMeshTJunctions");
static_assert(offsetof(GeometryScriptLibrary_MeshRepairFunctions_ResolveMeshTJunctions, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshRepairFunctions_ResolveMeshTJunctions::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshRepairFunctions_ResolveMeshTJunctions, ResolveOptions) == 0x000008, "Member 'GeometryScriptLibrary_MeshRepairFunctions_ResolveMeshTJunctions::ResolveOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshRepairFunctions_ResolveMeshTJunctions, Debug) == 0x000010, "Member 'GeometryScriptLibrary_MeshRepairFunctions_ResolveMeshTJunctions::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshRepairFunctions_ResolveMeshTJunctions, ReturnValue) == 0x000018, "Member 'GeometryScriptLibrary_MeshRepairFunctions_ResolveMeshTJunctions::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshRepairFunctions.SplitMeshBowties
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_MeshRepairFunctions_SplitMeshBowties final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMeshBowties;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttributeBowties;                                 // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshRepairFunctions_SplitMeshBowties) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshRepairFunctions_SplitMeshBowties");
static_assert(sizeof(GeometryScriptLibrary_MeshRepairFunctions_SplitMeshBowties) == 0x000020, "Wrong size on GeometryScriptLibrary_MeshRepairFunctions_SplitMeshBowties");
static_assert(offsetof(GeometryScriptLibrary_MeshRepairFunctions_SplitMeshBowties, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshRepairFunctions_SplitMeshBowties::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshRepairFunctions_SplitMeshBowties, bMeshBowties) == 0x000008, "Member 'GeometryScriptLibrary_MeshRepairFunctions_SplitMeshBowties::bMeshBowties' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshRepairFunctions_SplitMeshBowties, bAttributeBowties) == 0x000009, "Member 'GeometryScriptLibrary_MeshRepairFunctions_SplitMeshBowties::bAttributeBowties' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshRepairFunctions_SplitMeshBowties, Debug) == 0x000010, "Member 'GeometryScriptLibrary_MeshRepairFunctions_SplitMeshBowties::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshRepairFunctions_SplitMeshBowties, ReturnValue) == 0x000018, "Member 'GeometryScriptLibrary_MeshRepairFunctions_SplitMeshBowties::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshRepairFunctions.WeldMeshEdges
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_MeshRepairFunctions_WeldMeshEdges final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptWeldEdgesOptions        WeldOptions;                                       // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshRepairFunctions_WeldMeshEdges) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshRepairFunctions_WeldMeshEdges");
static_assert(sizeof(GeometryScriptLibrary_MeshRepairFunctions_WeldMeshEdges) == 0x000020, "Wrong size on GeometryScriptLibrary_MeshRepairFunctions_WeldMeshEdges");
static_assert(offsetof(GeometryScriptLibrary_MeshRepairFunctions_WeldMeshEdges, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshRepairFunctions_WeldMeshEdges::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshRepairFunctions_WeldMeshEdges, WeldOptions) == 0x000008, "Member 'GeometryScriptLibrary_MeshRepairFunctions_WeldMeshEdges::WeldOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshRepairFunctions_WeldMeshEdges, Debug) == 0x000010, "Member 'GeometryScriptLibrary_MeshRepairFunctions_WeldMeshEdges::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshRepairFunctions_WeldMeshEdges, ReturnValue) == 0x000018, "Member 'GeometryScriptLibrary_MeshRepairFunctions_WeldMeshEdges::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshSamplingFunctions.ComputeNonUniformPointSampling
// 0x0080 (0x0080 - 0x0000)
struct GeometryScriptLibrary_MeshSamplingFunctions_ComputeNonUniformPointSampling final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshPointSamplingOptions Options;                                           // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FGeometryScriptNonUniformPointSamplingOptions NonUniformOptions;                                 // 0x0020(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     Samples;                                           // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<double>                                SampleRadii;                                       // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGeometryScriptIndexList               TriangleIDs;                                       // 0x0058(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0070(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshSamplingFunctions_ComputeNonUniformPointSampling) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshSamplingFunctions_ComputeNonUniformPointSampling");
static_assert(sizeof(GeometryScriptLibrary_MeshSamplingFunctions_ComputeNonUniformPointSampling) == 0x000080, "Wrong size on GeometryScriptLibrary_MeshSamplingFunctions_ComputeNonUniformPointSampling");
static_assert(offsetof(GeometryScriptLibrary_MeshSamplingFunctions_ComputeNonUniformPointSampling, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshSamplingFunctions_ComputeNonUniformPointSampling::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSamplingFunctions_ComputeNonUniformPointSampling, Options) == 0x000008, "Member 'GeometryScriptLibrary_MeshSamplingFunctions_ComputeNonUniformPointSampling::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSamplingFunctions_ComputeNonUniformPointSampling, NonUniformOptions) == 0x000020, "Member 'GeometryScriptLibrary_MeshSamplingFunctions_ComputeNonUniformPointSampling::NonUniformOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSamplingFunctions_ComputeNonUniformPointSampling, Samples) == 0x000038, "Member 'GeometryScriptLibrary_MeshSamplingFunctions_ComputeNonUniformPointSampling::Samples' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSamplingFunctions_ComputeNonUniformPointSampling, SampleRadii) == 0x000048, "Member 'GeometryScriptLibrary_MeshSamplingFunctions_ComputeNonUniformPointSampling::SampleRadii' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSamplingFunctions_ComputeNonUniformPointSampling, TriangleIDs) == 0x000058, "Member 'GeometryScriptLibrary_MeshSamplingFunctions_ComputeNonUniformPointSampling::TriangleIDs' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSamplingFunctions_ComputeNonUniformPointSampling, Debug) == 0x000070, "Member 'GeometryScriptLibrary_MeshSamplingFunctions_ComputeNonUniformPointSampling::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSamplingFunctions_ComputeNonUniformPointSampling, ReturnValue) == 0x000078, "Member 'GeometryScriptLibrary_MeshSamplingFunctions_ComputeNonUniformPointSampling::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshSamplingFunctions.ComputePointSampling
// 0x0058 (0x0058 - 0x0000)
struct GeometryScriptLibrary_MeshSamplingFunctions_ComputePointSampling final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshPointSamplingOptions Options;                                           // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     Samples;                                           // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGeometryScriptIndexList               TriangleIDs;                                       // 0x0030(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0048(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshSamplingFunctions_ComputePointSampling) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshSamplingFunctions_ComputePointSampling");
static_assert(sizeof(GeometryScriptLibrary_MeshSamplingFunctions_ComputePointSampling) == 0x000058, "Wrong size on GeometryScriptLibrary_MeshSamplingFunctions_ComputePointSampling");
static_assert(offsetof(GeometryScriptLibrary_MeshSamplingFunctions_ComputePointSampling, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshSamplingFunctions_ComputePointSampling::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSamplingFunctions_ComputePointSampling, Options) == 0x000008, "Member 'GeometryScriptLibrary_MeshSamplingFunctions_ComputePointSampling::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSamplingFunctions_ComputePointSampling, Samples) == 0x000020, "Member 'GeometryScriptLibrary_MeshSamplingFunctions_ComputePointSampling::Samples' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSamplingFunctions_ComputePointSampling, TriangleIDs) == 0x000030, "Member 'GeometryScriptLibrary_MeshSamplingFunctions_ComputePointSampling::TriangleIDs' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSamplingFunctions_ComputePointSampling, Debug) == 0x000048, "Member 'GeometryScriptLibrary_MeshSamplingFunctions_ComputePointSampling::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSamplingFunctions_ComputePointSampling, ReturnValue) == 0x000050, "Member 'GeometryScriptLibrary_MeshSamplingFunctions_ComputePointSampling::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshSamplingFunctions.ComputeRenderCaptureCamerasForBox
// 0x0078 (0x0078 - 0x0000)
struct GeometryScriptLibrary_MeshSamplingFunctions_ComputeRenderCaptureCamerasForBox final
{
public:
	TArray<struct FGeometryScriptRenderCaptureCamera> Cameras;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FBox                                   Box;                                               // 0x0010(0x0038)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FGeometryScriptRenderCaptureCamerasForBoxOptions Options;                                           // 0x0048(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0070(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshSamplingFunctions_ComputeRenderCaptureCamerasForBox) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshSamplingFunctions_ComputeRenderCaptureCamerasForBox");
static_assert(sizeof(GeometryScriptLibrary_MeshSamplingFunctions_ComputeRenderCaptureCamerasForBox) == 0x000078, "Wrong size on GeometryScriptLibrary_MeshSamplingFunctions_ComputeRenderCaptureCamerasForBox");
static_assert(offsetof(GeometryScriptLibrary_MeshSamplingFunctions_ComputeRenderCaptureCamerasForBox, Cameras) == 0x000000, "Member 'GeometryScriptLibrary_MeshSamplingFunctions_ComputeRenderCaptureCamerasForBox::Cameras' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSamplingFunctions_ComputeRenderCaptureCamerasForBox, Box) == 0x000010, "Member 'GeometryScriptLibrary_MeshSamplingFunctions_ComputeRenderCaptureCamerasForBox::Box' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSamplingFunctions_ComputeRenderCaptureCamerasForBox, Options) == 0x000048, "Member 'GeometryScriptLibrary_MeshSamplingFunctions_ComputeRenderCaptureCamerasForBox::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSamplingFunctions_ComputeRenderCaptureCamerasForBox, Debug) == 0x000070, "Member 'GeometryScriptLibrary_MeshSamplingFunctions_ComputeRenderCaptureCamerasForBox::Debug' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshSamplingFunctions.ComputeRenderCapturePointSampling
// 0x0038 (0x0038 - 0x0000)
struct GeometryScriptLibrary_MeshSamplingFunctions_ComputeRenderCapturePointSampling final
{
public:
	TArray<struct FTransform>                     Samples;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         Actors;                                            // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FGeometryScriptRenderCaptureCamera> Cameras;                                           // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshSamplingFunctions_ComputeRenderCapturePointSampling) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshSamplingFunctions_ComputeRenderCapturePointSampling");
static_assert(sizeof(GeometryScriptLibrary_MeshSamplingFunctions_ComputeRenderCapturePointSampling) == 0x000038, "Wrong size on GeometryScriptLibrary_MeshSamplingFunctions_ComputeRenderCapturePointSampling");
static_assert(offsetof(GeometryScriptLibrary_MeshSamplingFunctions_ComputeRenderCapturePointSampling, Samples) == 0x000000, "Member 'GeometryScriptLibrary_MeshSamplingFunctions_ComputeRenderCapturePointSampling::Samples' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSamplingFunctions_ComputeRenderCapturePointSampling, Actors) == 0x000010, "Member 'GeometryScriptLibrary_MeshSamplingFunctions_ComputeRenderCapturePointSampling::Actors' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSamplingFunctions_ComputeRenderCapturePointSampling, Cameras) == 0x000020, "Member 'GeometryScriptLibrary_MeshSamplingFunctions_ComputeRenderCapturePointSampling::Cameras' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSamplingFunctions_ComputeRenderCapturePointSampling, Debug) == 0x000030, "Member 'GeometryScriptLibrary_MeshSamplingFunctions_ComputeRenderCapturePointSampling::Debug' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshSamplingFunctions.ComputeVertexWeightedPointSampling
// 0x0090 (0x0090 - 0x0000)
struct GeometryScriptLibrary_MeshSamplingFunctions_ComputeVertexWeightedPointSampling final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshPointSamplingOptions Options;                                           // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FGeometryScriptNonUniformPointSamplingOptions NonUniformOptions;                                 // 0x0020(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FGeometryScriptScalarList              VertexWeights;                                     // 0x0038(0x0010)(Parm, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     Samples;                                           // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<double>                                SampleRadii;                                       // 0x0058(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGeometryScriptIndexList               TriangleIDs;                                       // 0x0068(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0080(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0088(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshSamplingFunctions_ComputeVertexWeightedPointSampling) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshSamplingFunctions_ComputeVertexWeightedPointSampling");
static_assert(sizeof(GeometryScriptLibrary_MeshSamplingFunctions_ComputeVertexWeightedPointSampling) == 0x000090, "Wrong size on GeometryScriptLibrary_MeshSamplingFunctions_ComputeVertexWeightedPointSampling");
static_assert(offsetof(GeometryScriptLibrary_MeshSamplingFunctions_ComputeVertexWeightedPointSampling, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshSamplingFunctions_ComputeVertexWeightedPointSampling::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSamplingFunctions_ComputeVertexWeightedPointSampling, Options) == 0x000008, "Member 'GeometryScriptLibrary_MeshSamplingFunctions_ComputeVertexWeightedPointSampling::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSamplingFunctions_ComputeVertexWeightedPointSampling, NonUniformOptions) == 0x000020, "Member 'GeometryScriptLibrary_MeshSamplingFunctions_ComputeVertexWeightedPointSampling::NonUniformOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSamplingFunctions_ComputeVertexWeightedPointSampling, VertexWeights) == 0x000038, "Member 'GeometryScriptLibrary_MeshSamplingFunctions_ComputeVertexWeightedPointSampling::VertexWeights' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSamplingFunctions_ComputeVertexWeightedPointSampling, Samples) == 0x000048, "Member 'GeometryScriptLibrary_MeshSamplingFunctions_ComputeVertexWeightedPointSampling::Samples' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSamplingFunctions_ComputeVertexWeightedPointSampling, SampleRadii) == 0x000058, "Member 'GeometryScriptLibrary_MeshSamplingFunctions_ComputeVertexWeightedPointSampling::SampleRadii' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSamplingFunctions_ComputeVertexWeightedPointSampling, TriangleIDs) == 0x000068, "Member 'GeometryScriptLibrary_MeshSamplingFunctions_ComputeVertexWeightedPointSampling::TriangleIDs' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSamplingFunctions_ComputeVertexWeightedPointSampling, Debug) == 0x000080, "Member 'GeometryScriptLibrary_MeshSamplingFunctions_ComputeVertexWeightedPointSampling::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSamplingFunctions_ComputeVertexWeightedPointSampling, ReturnValue) == 0x000088, "Member 'GeometryScriptLibrary_MeshSamplingFunctions_ComputeVertexWeightedPointSampling::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshSelectionFunctions.CombineMeshSelections
// 0x0038 (0x0038 - 0x0000)
struct GeometryScriptLibrary_MeshSelectionFunctions_CombineMeshSelections final
{
public:
	struct FGeometryScriptMeshSelection           SelectionA;                                        // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           SelectionB;                                        // 0x0010(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           ResultSelection;                                   // 0x0020(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	EGeometryScriptCombineSelectionMode           CombineMode;                                       // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshSelectionFunctions_CombineMeshSelections) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshSelectionFunctions_CombineMeshSelections");
static_assert(sizeof(GeometryScriptLibrary_MeshSelectionFunctions_CombineMeshSelections) == 0x000038, "Wrong size on GeometryScriptLibrary_MeshSelectionFunctions_CombineMeshSelections");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_CombineMeshSelections, SelectionA) == 0x000000, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_CombineMeshSelections::SelectionA' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_CombineMeshSelections, SelectionB) == 0x000010, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_CombineMeshSelections::SelectionB' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_CombineMeshSelections, ResultSelection) == 0x000020, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_CombineMeshSelections::ResultSelection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_CombineMeshSelections, CombineMode) == 0x000030, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_CombineMeshSelections::CombineMode' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshSelectionFunctions.ConvertIndexArrayToMeshSelection
// 0x0038 (0x0038 - 0x0000)
struct GeometryScriptLibrary_MeshSelectionFunctions_ConvertIndexArrayToMeshSelection final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 IndexArray;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EGeometryScriptMeshSelectionType              SelectionType;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0020(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshSelectionFunctions_ConvertIndexArrayToMeshSelection) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshSelectionFunctions_ConvertIndexArrayToMeshSelection");
static_assert(sizeof(GeometryScriptLibrary_MeshSelectionFunctions_ConvertIndexArrayToMeshSelection) == 0x000038, "Wrong size on GeometryScriptLibrary_MeshSelectionFunctions_ConvertIndexArrayToMeshSelection");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_ConvertIndexArrayToMeshSelection, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_ConvertIndexArrayToMeshSelection::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_ConvertIndexArrayToMeshSelection, IndexArray) == 0x000008, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_ConvertIndexArrayToMeshSelection::IndexArray' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_ConvertIndexArrayToMeshSelection, SelectionType) == 0x000018, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_ConvertIndexArrayToMeshSelection::SelectionType' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_ConvertIndexArrayToMeshSelection, Selection) == 0x000020, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_ConvertIndexArrayToMeshSelection::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_ConvertIndexArrayToMeshSelection, ReturnValue) == 0x000030, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_ConvertIndexArrayToMeshSelection::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshSelectionFunctions.ConvertIndexListToMeshSelection
// 0x0040 (0x0040 - 0x0000)
struct GeometryScriptLibrary_MeshSelectionFunctions_ConvertIndexListToMeshSelection final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptIndexList               IndexList;                                         // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	EGeometryScriptMeshSelectionType              SelectionType;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0028(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshSelectionFunctions_ConvertIndexListToMeshSelection) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshSelectionFunctions_ConvertIndexListToMeshSelection");
static_assert(sizeof(GeometryScriptLibrary_MeshSelectionFunctions_ConvertIndexListToMeshSelection) == 0x000040, "Wrong size on GeometryScriptLibrary_MeshSelectionFunctions_ConvertIndexListToMeshSelection");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_ConvertIndexListToMeshSelection, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_ConvertIndexListToMeshSelection::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_ConvertIndexListToMeshSelection, IndexList) == 0x000008, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_ConvertIndexListToMeshSelection::IndexList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_ConvertIndexListToMeshSelection, SelectionType) == 0x000020, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_ConvertIndexListToMeshSelection::SelectionType' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_ConvertIndexListToMeshSelection, Selection) == 0x000028, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_ConvertIndexListToMeshSelection::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_ConvertIndexListToMeshSelection, ReturnValue) == 0x000038, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_ConvertIndexListToMeshSelection::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshSelectionFunctions.ConvertIndexSetToMeshSelection
// 0x0078 (0x0078 - 0x0000)
struct GeometryScriptLibrary_MeshSelectionFunctions_ConvertIndexSetToMeshSelection final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<int32>                                   IndexSet;                                          // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EGeometryScriptMeshSelectionType              SelectionType;                                     // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0060(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshSelectionFunctions_ConvertIndexSetToMeshSelection) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshSelectionFunctions_ConvertIndexSetToMeshSelection");
static_assert(sizeof(GeometryScriptLibrary_MeshSelectionFunctions_ConvertIndexSetToMeshSelection) == 0x000078, "Wrong size on GeometryScriptLibrary_MeshSelectionFunctions_ConvertIndexSetToMeshSelection");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_ConvertIndexSetToMeshSelection, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_ConvertIndexSetToMeshSelection::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_ConvertIndexSetToMeshSelection, IndexSet) == 0x000008, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_ConvertIndexSetToMeshSelection::IndexSet' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_ConvertIndexSetToMeshSelection, SelectionType) == 0x000058, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_ConvertIndexSetToMeshSelection::SelectionType' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_ConvertIndexSetToMeshSelection, Selection) == 0x000060, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_ConvertIndexSetToMeshSelection::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_ConvertIndexSetToMeshSelection, ReturnValue) == 0x000070, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_ConvertIndexSetToMeshSelection::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshSelectionFunctions.ConvertMeshSelection
// 0x0038 (0x0038 - 0x0000)
struct GeometryScriptLibrary_MeshSelectionFunctions_ConvertMeshSelection final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           FromSelection;                                     // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           ToSelection;                                       // 0x0018(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	EGeometryScriptMeshSelectionType              NewType;                                           // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowPartialInclusion;                            // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshSelectionFunctions_ConvertMeshSelection) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshSelectionFunctions_ConvertMeshSelection");
static_assert(sizeof(GeometryScriptLibrary_MeshSelectionFunctions_ConvertMeshSelection) == 0x000038, "Wrong size on GeometryScriptLibrary_MeshSelectionFunctions_ConvertMeshSelection");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_ConvertMeshSelection, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_ConvertMeshSelection::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_ConvertMeshSelection, FromSelection) == 0x000008, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_ConvertMeshSelection::FromSelection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_ConvertMeshSelection, ToSelection) == 0x000018, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_ConvertMeshSelection::ToSelection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_ConvertMeshSelection, NewType) == 0x000028, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_ConvertMeshSelection::NewType' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_ConvertMeshSelection, bAllowPartialInclusion) == 0x000029, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_ConvertMeshSelection::bAllowPartialInclusion' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_ConvertMeshSelection, ReturnValue) == 0x000030, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_ConvertMeshSelection::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshSelectionFunctions.ConvertMeshSelectionToIndexArray
// 0x0038 (0x0038 - 0x0000)
struct GeometryScriptLibrary_MeshSelectionFunctions_ConvertMeshSelectionToIndexArray final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	TArray<int32>                                 IndexArray;                                        // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	EGeometryScriptMeshSelectionType              SelectionType;                                     // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshSelectionFunctions_ConvertMeshSelectionToIndexArray) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshSelectionFunctions_ConvertMeshSelectionToIndexArray");
static_assert(sizeof(GeometryScriptLibrary_MeshSelectionFunctions_ConvertMeshSelectionToIndexArray) == 0x000038, "Wrong size on GeometryScriptLibrary_MeshSelectionFunctions_ConvertMeshSelectionToIndexArray");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_ConvertMeshSelectionToIndexArray, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_ConvertMeshSelectionToIndexArray::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_ConvertMeshSelectionToIndexArray, Selection) == 0x000008, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_ConvertMeshSelectionToIndexArray::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_ConvertMeshSelectionToIndexArray, IndexArray) == 0x000018, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_ConvertMeshSelectionToIndexArray::IndexArray' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_ConvertMeshSelectionToIndexArray, SelectionType) == 0x000028, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_ConvertMeshSelectionToIndexArray::SelectionType' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_ConvertMeshSelectionToIndexArray, ReturnValue) == 0x000030, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_ConvertMeshSelectionToIndexArray::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshSelectionFunctions.ConvertMeshSelectionToIndexList
// 0x0040 (0x0040 - 0x0000)
struct GeometryScriptLibrary_MeshSelectionFunctions_ConvertMeshSelectionToIndexList final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptIndexList               IndexList;                                         // 0x0018(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	EGeometryScriptIndexType                      ResultListType;                                    // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptIndexType                      ConvertToType;                                     // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshSelectionFunctions_ConvertMeshSelectionToIndexList) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshSelectionFunctions_ConvertMeshSelectionToIndexList");
static_assert(sizeof(GeometryScriptLibrary_MeshSelectionFunctions_ConvertMeshSelectionToIndexList) == 0x000040, "Wrong size on GeometryScriptLibrary_MeshSelectionFunctions_ConvertMeshSelectionToIndexList");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_ConvertMeshSelectionToIndexList, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_ConvertMeshSelectionToIndexList::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_ConvertMeshSelectionToIndexList, Selection) == 0x000008, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_ConvertMeshSelectionToIndexList::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_ConvertMeshSelectionToIndexList, IndexList) == 0x000018, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_ConvertMeshSelectionToIndexList::IndexList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_ConvertMeshSelectionToIndexList, ResultListType) == 0x000030, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_ConvertMeshSelectionToIndexList::ResultListType' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_ConvertMeshSelectionToIndexList, ConvertToType) == 0x000031, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_ConvertMeshSelectionToIndexList::ConvertToType' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_ConvertMeshSelectionToIndexList, ReturnValue) == 0x000038, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_ConvertMeshSelectionToIndexList::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshSelectionFunctions.CreateSelectAllMeshSelection
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_MeshSelectionFunctions_CreateSelectAllMeshSelection final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0008(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	EGeometryScriptMeshSelectionType              SelectionType;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshSelectionFunctions_CreateSelectAllMeshSelection) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshSelectionFunctions_CreateSelectAllMeshSelection");
static_assert(sizeof(GeometryScriptLibrary_MeshSelectionFunctions_CreateSelectAllMeshSelection) == 0x000028, "Wrong size on GeometryScriptLibrary_MeshSelectionFunctions_CreateSelectAllMeshSelection");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_CreateSelectAllMeshSelection, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_CreateSelectAllMeshSelection::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_CreateSelectAllMeshSelection, Selection) == 0x000008, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_CreateSelectAllMeshSelection::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_CreateSelectAllMeshSelection, SelectionType) == 0x000018, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_CreateSelectAllMeshSelection::SelectionType' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_CreateSelectAllMeshSelection, ReturnValue) == 0x000020, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_CreateSelectAllMeshSelection::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshSelectionFunctions.DebugPrintMeshSelection
// 0x0018 (0x0018 - 0x0000)
struct GeometryScriptLibrary_MeshSelectionFunctions_DebugPrintMeshSelection final
{
public:
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	bool                                          bDisable;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshSelectionFunctions_DebugPrintMeshSelection) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshSelectionFunctions_DebugPrintMeshSelection");
static_assert(sizeof(GeometryScriptLibrary_MeshSelectionFunctions_DebugPrintMeshSelection) == 0x000018, "Wrong size on GeometryScriptLibrary_MeshSelectionFunctions_DebugPrintMeshSelection");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_DebugPrintMeshSelection, Selection) == 0x000000, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_DebugPrintMeshSelection::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_DebugPrintMeshSelection, bDisable) == 0x000010, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_DebugPrintMeshSelection::bDisable' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshSelectionFunctions.ExpandContractMeshSelection
// 0x0038 (0x0038 - 0x0000)
struct GeometryScriptLibrary_MeshSelectionFunctions_ExpandContractMeshSelection final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           NewSelection;                                      // 0x0018(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	int32                                         Iterations;                                        // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bContract;                                         // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyExpandToFaceNeighbours;                       // 0x002D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshSelectionFunctions_ExpandContractMeshSelection) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshSelectionFunctions_ExpandContractMeshSelection");
static_assert(sizeof(GeometryScriptLibrary_MeshSelectionFunctions_ExpandContractMeshSelection) == 0x000038, "Wrong size on GeometryScriptLibrary_MeshSelectionFunctions_ExpandContractMeshSelection");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_ExpandContractMeshSelection, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_ExpandContractMeshSelection::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_ExpandContractMeshSelection, Selection) == 0x000008, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_ExpandContractMeshSelection::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_ExpandContractMeshSelection, NewSelection) == 0x000018, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_ExpandContractMeshSelection::NewSelection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_ExpandContractMeshSelection, Iterations) == 0x000028, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_ExpandContractMeshSelection::Iterations' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_ExpandContractMeshSelection, bContract) == 0x00002C, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_ExpandContractMeshSelection::bContract' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_ExpandContractMeshSelection, bOnlyExpandToFaceNeighbours) == 0x00002D, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_ExpandContractMeshSelection::bOnlyExpandToFaceNeighbours' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_ExpandContractMeshSelection, ReturnValue) == 0x000030, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_ExpandContractMeshSelection::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshSelectionFunctions.ExpandMeshSelectionToConnected
// 0x0038 (0x0038 - 0x0000)
struct GeometryScriptLibrary_MeshSelectionFunctions_ExpandMeshSelectionToConnected final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           NewSelection;                                      // 0x0018(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	EGeometryScriptTopologyConnectionType         ConnectionType;                                    // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshSelectionFunctions_ExpandMeshSelectionToConnected) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshSelectionFunctions_ExpandMeshSelectionToConnected");
static_assert(sizeof(GeometryScriptLibrary_MeshSelectionFunctions_ExpandMeshSelectionToConnected) == 0x000038, "Wrong size on GeometryScriptLibrary_MeshSelectionFunctions_ExpandMeshSelectionToConnected");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_ExpandMeshSelectionToConnected, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_ExpandMeshSelectionToConnected::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_ExpandMeshSelectionToConnected, Selection) == 0x000008, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_ExpandMeshSelectionToConnected::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_ExpandMeshSelectionToConnected, NewSelection) == 0x000018, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_ExpandMeshSelectionToConnected::NewSelection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_ExpandMeshSelectionToConnected, ConnectionType) == 0x000028, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_ExpandMeshSelectionToConnected::ConnectionType' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_ExpandMeshSelectionToConnected, ReturnValue) == 0x000030, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_ExpandMeshSelectionToConnected::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshSelectionFunctions.GetMeshSelectionInfo
// 0x0018 (0x0018 - 0x0000)
struct GeometryScriptLibrary_MeshSelectionFunctions_GetMeshSelectionInfo final
{
public:
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	EGeometryScriptMeshSelectionType              SelectionType;                                     // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumSelected;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshSelectionFunctions_GetMeshSelectionInfo) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshSelectionFunctions_GetMeshSelectionInfo");
static_assert(sizeof(GeometryScriptLibrary_MeshSelectionFunctions_GetMeshSelectionInfo) == 0x000018, "Wrong size on GeometryScriptLibrary_MeshSelectionFunctions_GetMeshSelectionInfo");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_GetMeshSelectionInfo, Selection) == 0x000000, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_GetMeshSelectionInfo::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_GetMeshSelectionInfo, SelectionType) == 0x000010, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_GetMeshSelectionInfo::SelectionType' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_GetMeshSelectionInfo, NumSelected) == 0x000014, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_GetMeshSelectionInfo::NumSelected' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshSelectionFunctions.InvertMeshSelection
// 0x0038 (0x0038 - 0x0000)
struct GeometryScriptLibrary_MeshSelectionFunctions_InvertMeshSelection final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           NewSelection;                                      // 0x0018(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          bOnlyToConnected;                                  // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshSelectionFunctions_InvertMeshSelection) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshSelectionFunctions_InvertMeshSelection");
static_assert(sizeof(GeometryScriptLibrary_MeshSelectionFunctions_InvertMeshSelection) == 0x000038, "Wrong size on GeometryScriptLibrary_MeshSelectionFunctions_InvertMeshSelection");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_InvertMeshSelection, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_InvertMeshSelection::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_InvertMeshSelection, Selection) == 0x000008, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_InvertMeshSelection::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_InvertMeshSelection, NewSelection) == 0x000018, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_InvertMeshSelection::NewSelection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_InvertMeshSelection, bOnlyToConnected) == 0x000028, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_InvertMeshSelection::bOnlyToConnected' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_InvertMeshSelection, ReturnValue) == 0x000030, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_InvertMeshSelection::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshSelectionFunctions.SelectMeshElementsByNormalAngle
// 0x0048 (0x0048 - 0x0000)
struct GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsByNormalAngle final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0008(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MaxAngleDeg;                                       // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptMeshSelectionType              SelectionType;                                     // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvert;                                           // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinNumTrianglePoints;                              // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsByNormalAngle) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsByNormalAngle");
static_assert(sizeof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsByNormalAngle) == 0x000048, "Wrong size on GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsByNormalAngle");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsByNormalAngle, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsByNormalAngle::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsByNormalAngle, Selection) == 0x000008, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsByNormalAngle::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsByNormalAngle, Normal) == 0x000018, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsByNormalAngle::Normal' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsByNormalAngle, MaxAngleDeg) == 0x000030, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsByNormalAngle::MaxAngleDeg' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsByNormalAngle, SelectionType) == 0x000038, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsByNormalAngle::SelectionType' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsByNormalAngle, bInvert) == 0x000039, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsByNormalAngle::bInvert' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsByNormalAngle, MinNumTrianglePoints) == 0x00003C, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsByNormalAngle::MinNumTrianglePoints' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsByNormalAngle, ReturnValue) == 0x000040, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsByNormalAngle::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshSelectionFunctions.SelectMeshElementsInBox
// 0x0060 (0x0060 - 0x0000)
struct GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInBox final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0008(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FBox                                   Box;                                               // 0x0018(0x0038)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EGeometryScriptMeshSelectionType              SelectionType;                                     // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvert;                                           // 0x0051(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x2];                                       // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinNumTrianglePoints;                              // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInBox) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInBox");
static_assert(sizeof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInBox) == 0x000060, "Wrong size on GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInBox");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInBox, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInBox::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInBox, Selection) == 0x000008, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInBox::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInBox, Box) == 0x000018, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInBox::Box' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInBox, SelectionType) == 0x000050, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInBox::SelectionType' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInBox, bInvert) == 0x000051, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInBox::bInvert' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInBox, MinNumTrianglePoints) == 0x000054, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInBox::MinNumTrianglePoints' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInBox, ReturnValue) == 0x000058, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInBox::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshSelectionFunctions.SelectMeshElementsInsideMesh
// 0x00B0 (0x00B0 - 0x0000)
struct GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInsideMesh final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           SelectionMesh;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0010(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FTransform                             SelectionMeshTransform;                            // 0x0020(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptMeshSelectionType              SelectionType;                                     // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvert;                                           // 0x0081(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ShellDistance;                                     // 0x0088(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        WindingThreshold;                                  // 0x0090(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinNumTrianglePoints;                              // 0x0098(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           ReturnValue;                                       // 0x00A0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInsideMesh) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInsideMesh");
static_assert(sizeof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInsideMesh) == 0x0000B0, "Wrong size on GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInsideMesh");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInsideMesh, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInsideMesh::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInsideMesh, SelectionMesh) == 0x000008, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInsideMesh::SelectionMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInsideMesh, Selection) == 0x000010, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInsideMesh::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInsideMesh, SelectionMeshTransform) == 0x000020, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInsideMesh::SelectionMeshTransform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInsideMesh, SelectionType) == 0x000080, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInsideMesh::SelectionType' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInsideMesh, bInvert) == 0x000081, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInsideMesh::bInvert' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInsideMesh, ShellDistance) == 0x000088, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInsideMesh::ShellDistance' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInsideMesh, WindingThreshold) == 0x000090, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInsideMesh::WindingThreshold' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInsideMesh, MinNumTrianglePoints) == 0x000098, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInsideMesh::MinNumTrianglePoints' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInsideMesh, ReturnValue) == 0x0000A0, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInsideMesh::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshSelectionFunctions.SelectMeshElementsInSphere
// 0x0048 (0x0048 - 0x0000)
struct GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInSphere final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0008(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FVector                                SphereOrigin;                                      // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SphereRadius;                                      // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptMeshSelectionType              SelectionType;                                     // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvert;                                           // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinNumTrianglePoints;                              // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInSphere) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInSphere");
static_assert(sizeof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInSphere) == 0x000048, "Wrong size on GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInSphere");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInSphere, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInSphere::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInSphere, Selection) == 0x000008, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInSphere::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInSphere, SphereOrigin) == 0x000018, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInSphere::SphereOrigin' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInSphere, SphereRadius) == 0x000030, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInSphere::SphereRadius' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInSphere, SelectionType) == 0x000038, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInSphere::SelectionType' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInSphere, bInvert) == 0x000039, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInSphere::bInvert' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInSphere, MinNumTrianglePoints) == 0x00003C, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInSphere::MinNumTrianglePoints' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInSphere, ReturnValue) == 0x000040, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsInSphere::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshSelectionFunctions.SelectMeshElementsWithPlane
// 0x0058 (0x0058 - 0x0000)
struct GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsWithPlane final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0008(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FVector                                PlaneOrigin;                                       // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PlaneNormal;                                       // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptMeshSelectionType              SelectionType;                                     // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvert;                                           // 0x0049(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinNumTrianglePoints;                              // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsWithPlane) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsWithPlane");
static_assert(sizeof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsWithPlane) == 0x000058, "Wrong size on GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsWithPlane");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsWithPlane, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsWithPlane::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsWithPlane, Selection) == 0x000008, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsWithPlane::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsWithPlane, PlaneOrigin) == 0x000018, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsWithPlane::PlaneOrigin' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsWithPlane, PlaneNormal) == 0x000030, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsWithPlane::PlaneNormal' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsWithPlane, SelectionType) == 0x000048, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsWithPlane::SelectionType' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsWithPlane, bInvert) == 0x000049, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsWithPlane::bInvert' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsWithPlane, MinNumTrianglePoints) == 0x00004C, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsWithPlane::MinNumTrianglePoints' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsWithPlane, ReturnValue) == 0x000050, "Member 'GeometryScriptLibrary_MeshSelectionFunctions_SelectMeshElementsWithPlane::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshSelectionQueryFunctions.GetMeshSelectionBoundaryLoops
// 0x0050 (0x0050 - 0x0000)
struct GeometryScriptLibrary_MeshSelectionQueryFunctions_GetMeshSelectionBoundaryLoops final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	TArray<struct FGeometryScriptIndexList>       IndexLoops;                                        // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGeometryScriptPolyPath>        PathLoops;                                         // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         NumLoops;                                          // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFoundErrors;                                      // 0x003C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0040(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshSelectionQueryFunctions_GetMeshSelectionBoundaryLoops) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshSelectionQueryFunctions_GetMeshSelectionBoundaryLoops");
static_assert(sizeof(GeometryScriptLibrary_MeshSelectionQueryFunctions_GetMeshSelectionBoundaryLoops) == 0x000050, "Wrong size on GeometryScriptLibrary_MeshSelectionQueryFunctions_GetMeshSelectionBoundaryLoops");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionQueryFunctions_GetMeshSelectionBoundaryLoops, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshSelectionQueryFunctions_GetMeshSelectionBoundaryLoops::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionQueryFunctions_GetMeshSelectionBoundaryLoops, Selection) == 0x000008, "Member 'GeometryScriptLibrary_MeshSelectionQueryFunctions_GetMeshSelectionBoundaryLoops::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionQueryFunctions_GetMeshSelectionBoundaryLoops, IndexLoops) == 0x000018, "Member 'GeometryScriptLibrary_MeshSelectionQueryFunctions_GetMeshSelectionBoundaryLoops::IndexLoops' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionQueryFunctions_GetMeshSelectionBoundaryLoops, PathLoops) == 0x000028, "Member 'GeometryScriptLibrary_MeshSelectionQueryFunctions_GetMeshSelectionBoundaryLoops::PathLoops' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionQueryFunctions_GetMeshSelectionBoundaryLoops, NumLoops) == 0x000038, "Member 'GeometryScriptLibrary_MeshSelectionQueryFunctions_GetMeshSelectionBoundaryLoops::NumLoops' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionQueryFunctions_GetMeshSelectionBoundaryLoops, bFoundErrors) == 0x00003C, "Member 'GeometryScriptLibrary_MeshSelectionQueryFunctions_GetMeshSelectionBoundaryLoops::bFoundErrors' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionQueryFunctions_GetMeshSelectionBoundaryLoops, Debug) == 0x000040, "Member 'GeometryScriptLibrary_MeshSelectionQueryFunctions_GetMeshSelectionBoundaryLoops::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionQueryFunctions_GetMeshSelectionBoundaryLoops, ReturnValue) == 0x000048, "Member 'GeometryScriptLibrary_MeshSelectionQueryFunctions_GetMeshSelectionBoundaryLoops::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshSelectionQueryFunctions.GetMeshSelectionBoundingBox
// 0x0068 (0x0068 - 0x0000)
struct GeometryScriptLibrary_MeshSelectionQueryFunctions_GetMeshSelectionBoundingBox final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FBox                                   SelectionBounds;                                   // 0x0018(0x0038)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsEmpty;                                          // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0058(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshSelectionQueryFunctions_GetMeshSelectionBoundingBox) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshSelectionQueryFunctions_GetMeshSelectionBoundingBox");
static_assert(sizeof(GeometryScriptLibrary_MeshSelectionQueryFunctions_GetMeshSelectionBoundingBox) == 0x000068, "Wrong size on GeometryScriptLibrary_MeshSelectionQueryFunctions_GetMeshSelectionBoundingBox");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionQueryFunctions_GetMeshSelectionBoundingBox, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshSelectionQueryFunctions_GetMeshSelectionBoundingBox::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionQueryFunctions_GetMeshSelectionBoundingBox, Selection) == 0x000008, "Member 'GeometryScriptLibrary_MeshSelectionQueryFunctions_GetMeshSelectionBoundingBox::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionQueryFunctions_GetMeshSelectionBoundingBox, SelectionBounds) == 0x000018, "Member 'GeometryScriptLibrary_MeshSelectionQueryFunctions_GetMeshSelectionBoundingBox::SelectionBounds' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionQueryFunctions_GetMeshSelectionBoundingBox, bIsEmpty) == 0x000050, "Member 'GeometryScriptLibrary_MeshSelectionQueryFunctions_GetMeshSelectionBoundingBox::bIsEmpty' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionQueryFunctions_GetMeshSelectionBoundingBox, Debug) == 0x000058, "Member 'GeometryScriptLibrary_MeshSelectionQueryFunctions_GetMeshSelectionBoundingBox::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSelectionQueryFunctions_GetMeshSelectionBoundingBox, ReturnValue) == 0x000060, "Member 'GeometryScriptLibrary_MeshSelectionQueryFunctions_GetMeshSelectionBoundingBox::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshSimplifyFunctions.ApplySimplifyToPlanar
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToPlanar final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptPlanarSimplifyOptions   Options;                                           // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToPlanar) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToPlanar");
static_assert(sizeof(GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToPlanar) == 0x000020, "Wrong size on GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToPlanar");
static_assert(offsetof(GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToPlanar, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToPlanar::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToPlanar, Options) == 0x000008, "Member 'GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToPlanar::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToPlanar, Debug) == 0x000010, "Member 'GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToPlanar::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToPlanar, ReturnValue) == 0x000018, "Member 'GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToPlanar::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshSimplifyFunctions.ApplySimplifyToPolygroupTopology
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToPolygroupTopology final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptPolygroupSimplifyOptions Options;                                           // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FGeometryScriptGroupLayer              GroupLayer;                                        // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToPolygroupTopology) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToPolygroupTopology");
static_assert(sizeof(GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToPolygroupTopology) == 0x000028, "Wrong size on GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToPolygroupTopology");
static_assert(offsetof(GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToPolygroupTopology, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToPolygroupTopology::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToPolygroupTopology, Options) == 0x000008, "Member 'GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToPolygroupTopology::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToPolygroupTopology, GroupLayer) == 0x000010, "Member 'GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToPolygroupTopology::GroupLayer' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToPolygroupTopology, Debug) == 0x000018, "Member 'GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToPolygroupTopology::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToPolygroupTopology, ReturnValue) == 0x000020, "Member 'GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToPolygroupTopology::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshSimplifyFunctions.ApplySimplifyToTolerance
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToTolerance final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tolerance;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptSimplifyMeshOptions     Options;                                           // 0x000C(0x0007)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToTolerance) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToTolerance");
static_assert(sizeof(GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToTolerance) == 0x000028, "Wrong size on GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToTolerance");
static_assert(offsetof(GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToTolerance, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToTolerance::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToTolerance, Tolerance) == 0x000008, "Member 'GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToTolerance::Tolerance' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToTolerance, Options) == 0x00000C, "Member 'GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToTolerance::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToTolerance, Debug) == 0x000018, "Member 'GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToTolerance::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToTolerance, ReturnValue) == 0x000020, "Member 'GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToTolerance::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshSimplifyFunctions.ApplySimplifyToTriangleCount
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToTriangleCount final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TriangleCount;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptSimplifyMeshOptions     Options;                                           // 0x000C(0x0007)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToTriangleCount) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToTriangleCount");
static_assert(sizeof(GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToTriangleCount) == 0x000028, "Wrong size on GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToTriangleCount");
static_assert(offsetof(GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToTriangleCount, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToTriangleCount::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToTriangleCount, TriangleCount) == 0x000008, "Member 'GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToTriangleCount::TriangleCount' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToTriangleCount, Options) == 0x00000C, "Member 'GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToTriangleCount::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToTriangleCount, Debug) == 0x000018, "Member 'GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToTriangleCount::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToTriangleCount, ReturnValue) == 0x000020, "Member 'GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToTriangleCount::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshSimplifyFunctions.ApplySimplifyToVertexCount
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToVertexCount final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VertexCount;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptSimplifyMeshOptions     Options;                                           // 0x000C(0x0007)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToVertexCount) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToVertexCount");
static_assert(sizeof(GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToVertexCount) == 0x000028, "Wrong size on GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToVertexCount");
static_assert(offsetof(GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToVertexCount, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToVertexCount::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToVertexCount, VertexCount) == 0x000008, "Member 'GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToVertexCount::VertexCount' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToVertexCount, Options) == 0x00000C, "Member 'GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToVertexCount::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToVertexCount, Debug) == 0x000018, "Member 'GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToVertexCount::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToVertexCount, ReturnValue) == 0x000020, "Member 'GeometryScriptLibrary_MeshSimplifyFunctions_ApplySimplifyToVertexCount::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshSpatial.BuildBVHForMesh
// 0x0038 (0x0038 - 0x0000)
struct GeometryScriptLibrary_MeshSpatial_BuildBVHForMesh final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptDynamicMeshBVH          OutputBVH;                                         // 0x0008(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshSpatial_BuildBVHForMesh) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshSpatial_BuildBVHForMesh");
static_assert(sizeof(GeometryScriptLibrary_MeshSpatial_BuildBVHForMesh) == 0x000038, "Wrong size on GeometryScriptLibrary_MeshSpatial_BuildBVHForMesh");
static_assert(offsetof(GeometryScriptLibrary_MeshSpatial_BuildBVHForMesh, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshSpatial_BuildBVHForMesh::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSpatial_BuildBVHForMesh, OutputBVH) == 0x000008, "Member 'GeometryScriptLibrary_MeshSpatial_BuildBVHForMesh::OutputBVH' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSpatial_BuildBVHForMesh, Debug) == 0x000028, "Member 'GeometryScriptLibrary_MeshSpatial_BuildBVHForMesh::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSpatial_BuildBVHForMesh, ReturnValue) == 0x000030, "Member 'GeometryScriptLibrary_MeshSpatial_BuildBVHForMesh::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshSpatial.FindNearestPointOnMesh
// 0x00A0 (0x00A0 - 0x0000)
struct GeometryScriptLibrary_MeshSpatial_FindNearestPointOnMesh final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptDynamicMeshBVH          QueryBVH;                                          // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                QueryPoint;                                        // 0x0028(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptSpatialQueryOptions     Options;                                           // 0x0040(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptTrianglePoint           NearestResult;                                     // 0x0050(0x0038)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	EGeometryScriptSearchOutcomePins              Outcome;                                           // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0090(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0098(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshSpatial_FindNearestPointOnMesh) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshSpatial_FindNearestPointOnMesh");
static_assert(sizeof(GeometryScriptLibrary_MeshSpatial_FindNearestPointOnMesh) == 0x0000A0, "Wrong size on GeometryScriptLibrary_MeshSpatial_FindNearestPointOnMesh");
static_assert(offsetof(GeometryScriptLibrary_MeshSpatial_FindNearestPointOnMesh, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshSpatial_FindNearestPointOnMesh::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSpatial_FindNearestPointOnMesh, QueryBVH) == 0x000008, "Member 'GeometryScriptLibrary_MeshSpatial_FindNearestPointOnMesh::QueryBVH' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSpatial_FindNearestPointOnMesh, QueryPoint) == 0x000028, "Member 'GeometryScriptLibrary_MeshSpatial_FindNearestPointOnMesh::QueryPoint' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSpatial_FindNearestPointOnMesh, Options) == 0x000040, "Member 'GeometryScriptLibrary_MeshSpatial_FindNearestPointOnMesh::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSpatial_FindNearestPointOnMesh, NearestResult) == 0x000050, "Member 'GeometryScriptLibrary_MeshSpatial_FindNearestPointOnMesh::NearestResult' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSpatial_FindNearestPointOnMesh, Outcome) == 0x000088, "Member 'GeometryScriptLibrary_MeshSpatial_FindNearestPointOnMesh::Outcome' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSpatial_FindNearestPointOnMesh, Debug) == 0x000090, "Member 'GeometryScriptLibrary_MeshSpatial_FindNearestPointOnMesh::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSpatial_FindNearestPointOnMesh, ReturnValue) == 0x000098, "Member 'GeometryScriptLibrary_MeshSpatial_FindNearestPointOnMesh::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshSpatial.FindNearestRayIntersectionWithMesh
// 0x00C0 (0x00C0 - 0x0000)
struct GeometryScriptLibrary_MeshSpatial_FindNearestRayIntersectionWithMesh final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptDynamicMeshBVH          QueryBVH;                                          // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                RayOrigin;                                         // 0x0028(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RayDirection;                                      // 0x0040(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptSpatialQueryOptions     Options;                                           // 0x0058(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptRayHitResult            HitResult;                                         // 0x0068(0x0040)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	EGeometryScriptSearchOutcomePins              Outcome;                                           // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x00B0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x00B8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshSpatial_FindNearestRayIntersectionWithMesh) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshSpatial_FindNearestRayIntersectionWithMesh");
static_assert(sizeof(GeometryScriptLibrary_MeshSpatial_FindNearestRayIntersectionWithMesh) == 0x0000C0, "Wrong size on GeometryScriptLibrary_MeshSpatial_FindNearestRayIntersectionWithMesh");
static_assert(offsetof(GeometryScriptLibrary_MeshSpatial_FindNearestRayIntersectionWithMesh, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshSpatial_FindNearestRayIntersectionWithMesh::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSpatial_FindNearestRayIntersectionWithMesh, QueryBVH) == 0x000008, "Member 'GeometryScriptLibrary_MeshSpatial_FindNearestRayIntersectionWithMesh::QueryBVH' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSpatial_FindNearestRayIntersectionWithMesh, RayOrigin) == 0x000028, "Member 'GeometryScriptLibrary_MeshSpatial_FindNearestRayIntersectionWithMesh::RayOrigin' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSpatial_FindNearestRayIntersectionWithMesh, RayDirection) == 0x000040, "Member 'GeometryScriptLibrary_MeshSpatial_FindNearestRayIntersectionWithMesh::RayDirection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSpatial_FindNearestRayIntersectionWithMesh, Options) == 0x000058, "Member 'GeometryScriptLibrary_MeshSpatial_FindNearestRayIntersectionWithMesh::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSpatial_FindNearestRayIntersectionWithMesh, HitResult) == 0x000068, "Member 'GeometryScriptLibrary_MeshSpatial_FindNearestRayIntersectionWithMesh::HitResult' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSpatial_FindNearestRayIntersectionWithMesh, Outcome) == 0x0000A8, "Member 'GeometryScriptLibrary_MeshSpatial_FindNearestRayIntersectionWithMesh::Outcome' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSpatial_FindNearestRayIntersectionWithMesh, Debug) == 0x0000B0, "Member 'GeometryScriptLibrary_MeshSpatial_FindNearestRayIntersectionWithMesh::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSpatial_FindNearestRayIntersectionWithMesh, ReturnValue) == 0x0000B8, "Member 'GeometryScriptLibrary_MeshSpatial_FindNearestRayIntersectionWithMesh::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshSpatial.IsBVHValidForMesh
// 0x0040 (0x0040 - 0x0000)
struct GeometryScriptLibrary_MeshSpatial_IsBVHValidForMesh final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptDynamicMeshBVH          TestBVH;                                           // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshSpatial_IsBVHValidForMesh) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshSpatial_IsBVHValidForMesh");
static_assert(sizeof(GeometryScriptLibrary_MeshSpatial_IsBVHValidForMesh) == 0x000040, "Wrong size on GeometryScriptLibrary_MeshSpatial_IsBVHValidForMesh");
static_assert(offsetof(GeometryScriptLibrary_MeshSpatial_IsBVHValidForMesh, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshSpatial_IsBVHValidForMesh::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSpatial_IsBVHValidForMesh, TestBVH) == 0x000008, "Member 'GeometryScriptLibrary_MeshSpatial_IsBVHValidForMesh::TestBVH' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSpatial_IsBVHValidForMesh, bIsValid) == 0x000028, "Member 'GeometryScriptLibrary_MeshSpatial_IsBVHValidForMesh::bIsValid' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSpatial_IsBVHValidForMesh, Debug) == 0x000030, "Member 'GeometryScriptLibrary_MeshSpatial_IsBVHValidForMesh::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSpatial_IsBVHValidForMesh, ReturnValue) == 0x000038, "Member 'GeometryScriptLibrary_MeshSpatial_IsBVHValidForMesh::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshSpatial.IsPointInsideMesh
// 0x0060 (0x0060 - 0x0000)
struct GeometryScriptLibrary_MeshSpatial_IsPointInsideMesh final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptDynamicMeshBVH          QueryBVH;                                          // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                QueryPoint;                                        // 0x0028(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptSpatialQueryOptions     Options;                                           // 0x0040(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsInside;                                         // 0x004C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptContainmentOutcomePins         Outcome;                                           // 0x004D(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0050(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshSpatial_IsPointInsideMesh) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshSpatial_IsPointInsideMesh");
static_assert(sizeof(GeometryScriptLibrary_MeshSpatial_IsPointInsideMesh) == 0x000060, "Wrong size on GeometryScriptLibrary_MeshSpatial_IsPointInsideMesh");
static_assert(offsetof(GeometryScriptLibrary_MeshSpatial_IsPointInsideMesh, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshSpatial_IsPointInsideMesh::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSpatial_IsPointInsideMesh, QueryBVH) == 0x000008, "Member 'GeometryScriptLibrary_MeshSpatial_IsPointInsideMesh::QueryBVH' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSpatial_IsPointInsideMesh, QueryPoint) == 0x000028, "Member 'GeometryScriptLibrary_MeshSpatial_IsPointInsideMesh::QueryPoint' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSpatial_IsPointInsideMesh, Options) == 0x000040, "Member 'GeometryScriptLibrary_MeshSpatial_IsPointInsideMesh::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSpatial_IsPointInsideMesh, bIsInside) == 0x00004C, "Member 'GeometryScriptLibrary_MeshSpatial_IsPointInsideMesh::bIsInside' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSpatial_IsPointInsideMesh, Outcome) == 0x00004D, "Member 'GeometryScriptLibrary_MeshSpatial_IsPointInsideMesh::Outcome' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSpatial_IsPointInsideMesh, Debug) == 0x000050, "Member 'GeometryScriptLibrary_MeshSpatial_IsPointInsideMesh::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSpatial_IsPointInsideMesh, ReturnValue) == 0x000058, "Member 'GeometryScriptLibrary_MeshSpatial_IsPointInsideMesh::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshSpatial.RebuildBVHForMesh
// 0x0040 (0x0040 - 0x0000)
struct GeometryScriptLibrary_MeshSpatial_RebuildBVHForMesh final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptDynamicMeshBVH          UpdateBVH;                                         // 0x0008(0x0020)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bOnlyIfInvalid;                                    // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshSpatial_RebuildBVHForMesh) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshSpatial_RebuildBVHForMesh");
static_assert(sizeof(GeometryScriptLibrary_MeshSpatial_RebuildBVHForMesh) == 0x000040, "Wrong size on GeometryScriptLibrary_MeshSpatial_RebuildBVHForMesh");
static_assert(offsetof(GeometryScriptLibrary_MeshSpatial_RebuildBVHForMesh, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshSpatial_RebuildBVHForMesh::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSpatial_RebuildBVHForMesh, UpdateBVH) == 0x000008, "Member 'GeometryScriptLibrary_MeshSpatial_RebuildBVHForMesh::UpdateBVH' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSpatial_RebuildBVHForMesh, bOnlyIfInvalid) == 0x000028, "Member 'GeometryScriptLibrary_MeshSpatial_RebuildBVHForMesh::bOnlyIfInvalid' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSpatial_RebuildBVHForMesh, Debug) == 0x000030, "Member 'GeometryScriptLibrary_MeshSpatial_RebuildBVHForMesh::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSpatial_RebuildBVHForMesh, ReturnValue) == 0x000038, "Member 'GeometryScriptLibrary_MeshSpatial_RebuildBVHForMesh::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshSpatial.ResetBVH
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_MeshSpatial_ResetBVH final
{
public:
	struct FGeometryScriptDynamicMeshBVH          ResetBVH_0;                                        // 0x0000(0x0020)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshSpatial_ResetBVH) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshSpatial_ResetBVH");
static_assert(sizeof(GeometryScriptLibrary_MeshSpatial_ResetBVH) == 0x000020, "Wrong size on GeometryScriptLibrary_MeshSpatial_ResetBVH");
static_assert(offsetof(GeometryScriptLibrary_MeshSpatial_ResetBVH, ResetBVH_0) == 0x000000, "Member 'GeometryScriptLibrary_MeshSpatial_ResetBVH::ResetBVH_0' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshSpatial.SelectMeshElementsInBoxWithBVH
// 0x0098 (0x0098 - 0x0000)
struct GeometryScriptLibrary_MeshSpatial_SelectMeshElementsInBoxWithBVH final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptDynamicMeshBVH          QueryBVH;                                          // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FBox                                   QueryBox;                                          // 0x0028(0x0038)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FGeometryScriptSpatialQueryOptions     Options;                                           // 0x0060(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0070(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	EGeometryScriptMeshSelectionType              SelectionType;                                     // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinNumTrianglePoints;                              // 0x0084(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0088(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshSpatial_SelectMeshElementsInBoxWithBVH) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshSpatial_SelectMeshElementsInBoxWithBVH");
static_assert(sizeof(GeometryScriptLibrary_MeshSpatial_SelectMeshElementsInBoxWithBVH) == 0x000098, "Wrong size on GeometryScriptLibrary_MeshSpatial_SelectMeshElementsInBoxWithBVH");
static_assert(offsetof(GeometryScriptLibrary_MeshSpatial_SelectMeshElementsInBoxWithBVH, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshSpatial_SelectMeshElementsInBoxWithBVH::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSpatial_SelectMeshElementsInBoxWithBVH, QueryBVH) == 0x000008, "Member 'GeometryScriptLibrary_MeshSpatial_SelectMeshElementsInBoxWithBVH::QueryBVH' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSpatial_SelectMeshElementsInBoxWithBVH, QueryBox) == 0x000028, "Member 'GeometryScriptLibrary_MeshSpatial_SelectMeshElementsInBoxWithBVH::QueryBox' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSpatial_SelectMeshElementsInBoxWithBVH, Options) == 0x000060, "Member 'GeometryScriptLibrary_MeshSpatial_SelectMeshElementsInBoxWithBVH::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSpatial_SelectMeshElementsInBoxWithBVH, Selection) == 0x000070, "Member 'GeometryScriptLibrary_MeshSpatial_SelectMeshElementsInBoxWithBVH::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSpatial_SelectMeshElementsInBoxWithBVH, SelectionType) == 0x000080, "Member 'GeometryScriptLibrary_MeshSpatial_SelectMeshElementsInBoxWithBVH::SelectionType' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSpatial_SelectMeshElementsInBoxWithBVH, MinNumTrianglePoints) == 0x000084, "Member 'GeometryScriptLibrary_MeshSpatial_SelectMeshElementsInBoxWithBVH::MinNumTrianglePoints' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSpatial_SelectMeshElementsInBoxWithBVH, Debug) == 0x000088, "Member 'GeometryScriptLibrary_MeshSpatial_SelectMeshElementsInBoxWithBVH::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSpatial_SelectMeshElementsInBoxWithBVH, ReturnValue) == 0x000090, "Member 'GeometryScriptLibrary_MeshSpatial_SelectMeshElementsInBoxWithBVH::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshSubdivideFunctions.ApplyPNTessellation
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_MeshSubdivideFunctions_ApplyPNTessellation final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptPNTessellateOptions     Options;                                           // 0x0008(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TessellationLevel;                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshSubdivideFunctions_ApplyPNTessellation) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshSubdivideFunctions_ApplyPNTessellation");
static_assert(sizeof(GeometryScriptLibrary_MeshSubdivideFunctions_ApplyPNTessellation) == 0x000020, "Wrong size on GeometryScriptLibrary_MeshSubdivideFunctions_ApplyPNTessellation");
static_assert(offsetof(GeometryScriptLibrary_MeshSubdivideFunctions_ApplyPNTessellation, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshSubdivideFunctions_ApplyPNTessellation::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSubdivideFunctions_ApplyPNTessellation, Options) == 0x000008, "Member 'GeometryScriptLibrary_MeshSubdivideFunctions_ApplyPNTessellation::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSubdivideFunctions_ApplyPNTessellation, TessellationLevel) == 0x00000C, "Member 'GeometryScriptLibrary_MeshSubdivideFunctions_ApplyPNTessellation::TessellationLevel' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSubdivideFunctions_ApplyPNTessellation, Debug) == 0x000010, "Member 'GeometryScriptLibrary_MeshSubdivideFunctions_ApplyPNTessellation::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSubdivideFunctions_ApplyPNTessellation, ReturnValue) == 0x000018, "Member 'GeometryScriptLibrary_MeshSubdivideFunctions_ApplyPNTessellation::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshSubdivideFunctions.ApplySelectiveTessellation
// 0x0038 (0x0038 - 0x0000)
struct GeometryScriptLibrary_MeshSubdivideFunctions_ApplySelectiveTessellation final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptSelectiveTessellateOptions Options;                                           // 0x0018(0x0002)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TessellationLevel;                                 // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESelectiveTessellatePatternType               PatternType;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshSubdivideFunctions_ApplySelectiveTessellation) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshSubdivideFunctions_ApplySelectiveTessellation");
static_assert(sizeof(GeometryScriptLibrary_MeshSubdivideFunctions_ApplySelectiveTessellation) == 0x000038, "Wrong size on GeometryScriptLibrary_MeshSubdivideFunctions_ApplySelectiveTessellation");
static_assert(offsetof(GeometryScriptLibrary_MeshSubdivideFunctions_ApplySelectiveTessellation, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshSubdivideFunctions_ApplySelectiveTessellation::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSubdivideFunctions_ApplySelectiveTessellation, Selection) == 0x000008, "Member 'GeometryScriptLibrary_MeshSubdivideFunctions_ApplySelectiveTessellation::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSubdivideFunctions_ApplySelectiveTessellation, Options) == 0x000018, "Member 'GeometryScriptLibrary_MeshSubdivideFunctions_ApplySelectiveTessellation::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSubdivideFunctions_ApplySelectiveTessellation, TessellationLevel) == 0x00001C, "Member 'GeometryScriptLibrary_MeshSubdivideFunctions_ApplySelectiveTessellation::TessellationLevel' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSubdivideFunctions_ApplySelectiveTessellation, PatternType) == 0x000020, "Member 'GeometryScriptLibrary_MeshSubdivideFunctions_ApplySelectiveTessellation::PatternType' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSubdivideFunctions_ApplySelectiveTessellation, Debug) == 0x000028, "Member 'GeometryScriptLibrary_MeshSubdivideFunctions_ApplySelectiveTessellation::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSubdivideFunctions_ApplySelectiveTessellation, ReturnValue) == 0x000030, "Member 'GeometryScriptLibrary_MeshSubdivideFunctions_ApplySelectiveTessellation::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshSubdivideFunctions.ApplyUniformTessellation
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_MeshSubdivideFunctions_ApplyUniformTessellation final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TessellationLevel;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshSubdivideFunctions_ApplyUniformTessellation) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshSubdivideFunctions_ApplyUniformTessellation");
static_assert(sizeof(GeometryScriptLibrary_MeshSubdivideFunctions_ApplyUniformTessellation) == 0x000020, "Wrong size on GeometryScriptLibrary_MeshSubdivideFunctions_ApplyUniformTessellation");
static_assert(offsetof(GeometryScriptLibrary_MeshSubdivideFunctions_ApplyUniformTessellation, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshSubdivideFunctions_ApplyUniformTessellation::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSubdivideFunctions_ApplyUniformTessellation, TessellationLevel) == 0x000008, "Member 'GeometryScriptLibrary_MeshSubdivideFunctions_ApplyUniformTessellation::TessellationLevel' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSubdivideFunctions_ApplyUniformTessellation, Debug) == 0x000010, "Member 'GeometryScriptLibrary_MeshSubdivideFunctions_ApplyUniformTessellation::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshSubdivideFunctions_ApplyUniformTessellation, ReturnValue) == 0x000018, "Member 'GeometryScriptLibrary_MeshSubdivideFunctions_ApplyUniformTessellation::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshTransformFunctions.RotateMesh
// 0x0048 (0x0048 - 0x0000)
struct GeometryScriptLibrary_MeshTransformFunctions_RotateMesh final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                RotationOrigin;                                    // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshTransformFunctions_RotateMesh) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshTransformFunctions_RotateMesh");
static_assert(sizeof(GeometryScriptLibrary_MeshTransformFunctions_RotateMesh) == 0x000048, "Wrong size on GeometryScriptLibrary_MeshTransformFunctions_RotateMesh");
static_assert(offsetof(GeometryScriptLibrary_MeshTransformFunctions_RotateMesh, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshTransformFunctions_RotateMesh::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshTransformFunctions_RotateMesh, Rotation) == 0x000008, "Member 'GeometryScriptLibrary_MeshTransformFunctions_RotateMesh::Rotation' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshTransformFunctions_RotateMesh, RotationOrigin) == 0x000020, "Member 'GeometryScriptLibrary_MeshTransformFunctions_RotateMesh::RotationOrigin' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshTransformFunctions_RotateMesh, Debug) == 0x000038, "Member 'GeometryScriptLibrary_MeshTransformFunctions_RotateMesh::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshTransformFunctions_RotateMesh, ReturnValue) == 0x000040, "Member 'GeometryScriptLibrary_MeshTransformFunctions_RotateMesh::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshTransformFunctions.RotateMeshSelection
// 0x0058 (0x0058 - 0x0000)
struct GeometryScriptLibrary_MeshTransformFunctions_RotateMeshSelection final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                RotationOrigin;                                    // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0048(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshTransformFunctions_RotateMeshSelection) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshTransformFunctions_RotateMeshSelection");
static_assert(sizeof(GeometryScriptLibrary_MeshTransformFunctions_RotateMeshSelection) == 0x000058, "Wrong size on GeometryScriptLibrary_MeshTransformFunctions_RotateMeshSelection");
static_assert(offsetof(GeometryScriptLibrary_MeshTransformFunctions_RotateMeshSelection, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshTransformFunctions_RotateMeshSelection::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshTransformFunctions_RotateMeshSelection, Selection) == 0x000008, "Member 'GeometryScriptLibrary_MeshTransformFunctions_RotateMeshSelection::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshTransformFunctions_RotateMeshSelection, Rotation) == 0x000018, "Member 'GeometryScriptLibrary_MeshTransformFunctions_RotateMeshSelection::Rotation' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshTransformFunctions_RotateMeshSelection, RotationOrigin) == 0x000030, "Member 'GeometryScriptLibrary_MeshTransformFunctions_RotateMeshSelection::RotationOrigin' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshTransformFunctions_RotateMeshSelection, Debug) == 0x000048, "Member 'GeometryScriptLibrary_MeshTransformFunctions_RotateMeshSelection::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshTransformFunctions_RotateMeshSelection, ReturnValue) == 0x000050, "Member 'GeometryScriptLibrary_MeshTransformFunctions_RotateMeshSelection::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshTransformFunctions.ScaleMesh
// 0x0050 (0x0050 - 0x0000)
struct GeometryScriptLibrary_MeshTransformFunctions_ScaleMesh final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ScaleOrigin;                                       // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFixOrientationForNegativeScale;                   // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0040(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshTransformFunctions_ScaleMesh) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshTransformFunctions_ScaleMesh");
static_assert(sizeof(GeometryScriptLibrary_MeshTransformFunctions_ScaleMesh) == 0x000050, "Wrong size on GeometryScriptLibrary_MeshTransformFunctions_ScaleMesh");
static_assert(offsetof(GeometryScriptLibrary_MeshTransformFunctions_ScaleMesh, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshTransformFunctions_ScaleMesh::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshTransformFunctions_ScaleMesh, Scale) == 0x000008, "Member 'GeometryScriptLibrary_MeshTransformFunctions_ScaleMesh::Scale' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshTransformFunctions_ScaleMesh, ScaleOrigin) == 0x000020, "Member 'GeometryScriptLibrary_MeshTransformFunctions_ScaleMesh::ScaleOrigin' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshTransformFunctions_ScaleMesh, bFixOrientationForNegativeScale) == 0x000038, "Member 'GeometryScriptLibrary_MeshTransformFunctions_ScaleMesh::bFixOrientationForNegativeScale' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshTransformFunctions_ScaleMesh, Debug) == 0x000040, "Member 'GeometryScriptLibrary_MeshTransformFunctions_ScaleMesh::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshTransformFunctions_ScaleMesh, ReturnValue) == 0x000048, "Member 'GeometryScriptLibrary_MeshTransformFunctions_ScaleMesh::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshTransformFunctions.ScaleMeshSelection
// 0x0058 (0x0058 - 0x0000)
struct GeometryScriptLibrary_MeshTransformFunctions_ScaleMeshSelection final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ScaleOrigin;                                       // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0048(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshTransformFunctions_ScaleMeshSelection) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshTransformFunctions_ScaleMeshSelection");
static_assert(sizeof(GeometryScriptLibrary_MeshTransformFunctions_ScaleMeshSelection) == 0x000058, "Wrong size on GeometryScriptLibrary_MeshTransformFunctions_ScaleMeshSelection");
static_assert(offsetof(GeometryScriptLibrary_MeshTransformFunctions_ScaleMeshSelection, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshTransformFunctions_ScaleMeshSelection::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshTransformFunctions_ScaleMeshSelection, Selection) == 0x000008, "Member 'GeometryScriptLibrary_MeshTransformFunctions_ScaleMeshSelection::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshTransformFunctions_ScaleMeshSelection, Scale) == 0x000018, "Member 'GeometryScriptLibrary_MeshTransformFunctions_ScaleMeshSelection::Scale' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshTransformFunctions_ScaleMeshSelection, ScaleOrigin) == 0x000030, "Member 'GeometryScriptLibrary_MeshTransformFunctions_ScaleMeshSelection::ScaleOrigin' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshTransformFunctions_ScaleMeshSelection, Debug) == 0x000048, "Member 'GeometryScriptLibrary_MeshTransformFunctions_ScaleMeshSelection::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshTransformFunctions_ScaleMeshSelection, ReturnValue) == 0x000050, "Member 'GeometryScriptLibrary_MeshTransformFunctions_ScaleMeshSelection::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshTransformFunctions.TransformMesh
// 0x0090 (0x0090 - 0x0000)
struct GeometryScriptLibrary_MeshTransformFunctions_TransformMesh final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFixOrientationForNegativeScale;                   // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0078(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0080(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshTransformFunctions_TransformMesh) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshTransformFunctions_TransformMesh");
static_assert(sizeof(GeometryScriptLibrary_MeshTransformFunctions_TransformMesh) == 0x000090, "Wrong size on GeometryScriptLibrary_MeshTransformFunctions_TransformMesh");
static_assert(offsetof(GeometryScriptLibrary_MeshTransformFunctions_TransformMesh, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshTransformFunctions_TransformMesh::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshTransformFunctions_TransformMesh, Transform) == 0x000010, "Member 'GeometryScriptLibrary_MeshTransformFunctions_TransformMesh::Transform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshTransformFunctions_TransformMesh, bFixOrientationForNegativeScale) == 0x000070, "Member 'GeometryScriptLibrary_MeshTransformFunctions_TransformMesh::bFixOrientationForNegativeScale' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshTransformFunctions_TransformMesh, Debug) == 0x000078, "Member 'GeometryScriptLibrary_MeshTransformFunctions_TransformMesh::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshTransformFunctions_TransformMesh, ReturnValue) == 0x000080, "Member 'GeometryScriptLibrary_MeshTransformFunctions_TransformMesh::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshTransformFunctions.TransformMeshSelection
// 0x0090 (0x0090 - 0x0000)
struct GeometryScriptLibrary_MeshTransformFunctions_TransformMeshSelection final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0020(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0080(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0088(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshTransformFunctions_TransformMeshSelection) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshTransformFunctions_TransformMeshSelection");
static_assert(sizeof(GeometryScriptLibrary_MeshTransformFunctions_TransformMeshSelection) == 0x000090, "Wrong size on GeometryScriptLibrary_MeshTransformFunctions_TransformMeshSelection");
static_assert(offsetof(GeometryScriptLibrary_MeshTransformFunctions_TransformMeshSelection, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshTransformFunctions_TransformMeshSelection::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshTransformFunctions_TransformMeshSelection, Selection) == 0x000008, "Member 'GeometryScriptLibrary_MeshTransformFunctions_TransformMeshSelection::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshTransformFunctions_TransformMeshSelection, Transform) == 0x000020, "Member 'GeometryScriptLibrary_MeshTransformFunctions_TransformMeshSelection::Transform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshTransformFunctions_TransformMeshSelection, Debug) == 0x000080, "Member 'GeometryScriptLibrary_MeshTransformFunctions_TransformMeshSelection::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshTransformFunctions_TransformMeshSelection, ReturnValue) == 0x000088, "Member 'GeometryScriptLibrary_MeshTransformFunctions_TransformMeshSelection::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshTransformFunctions.TranslateMesh
// 0x0030 (0x0030 - 0x0000)
struct GeometryScriptLibrary_MeshTransformFunctions_TranslateMesh final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Translation;                                       // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshTransformFunctions_TranslateMesh) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshTransformFunctions_TranslateMesh");
static_assert(sizeof(GeometryScriptLibrary_MeshTransformFunctions_TranslateMesh) == 0x000030, "Wrong size on GeometryScriptLibrary_MeshTransformFunctions_TranslateMesh");
static_assert(offsetof(GeometryScriptLibrary_MeshTransformFunctions_TranslateMesh, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshTransformFunctions_TranslateMesh::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshTransformFunctions_TranslateMesh, Translation) == 0x000008, "Member 'GeometryScriptLibrary_MeshTransformFunctions_TranslateMesh::Translation' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshTransformFunctions_TranslateMesh, Debug) == 0x000020, "Member 'GeometryScriptLibrary_MeshTransformFunctions_TranslateMesh::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshTransformFunctions_TranslateMesh, ReturnValue) == 0x000028, "Member 'GeometryScriptLibrary_MeshTransformFunctions_TranslateMesh::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshTransformFunctions.TranslateMeshSelection
// 0x0040 (0x0040 - 0x0000)
struct GeometryScriptLibrary_MeshTransformFunctions_TranslateMeshSelection final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FVector                                Translation;                                       // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshTransformFunctions_TranslateMeshSelection) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshTransformFunctions_TranslateMeshSelection");
static_assert(sizeof(GeometryScriptLibrary_MeshTransformFunctions_TranslateMeshSelection) == 0x000040, "Wrong size on GeometryScriptLibrary_MeshTransformFunctions_TranslateMeshSelection");
static_assert(offsetof(GeometryScriptLibrary_MeshTransformFunctions_TranslateMeshSelection, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshTransformFunctions_TranslateMeshSelection::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshTransformFunctions_TranslateMeshSelection, Selection) == 0x000008, "Member 'GeometryScriptLibrary_MeshTransformFunctions_TranslateMeshSelection::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshTransformFunctions_TranslateMeshSelection, Translation) == 0x000018, "Member 'GeometryScriptLibrary_MeshTransformFunctions_TranslateMeshSelection::Translation' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshTransformFunctions_TranslateMeshSelection, Debug) == 0x000030, "Member 'GeometryScriptLibrary_MeshTransformFunctions_TranslateMeshSelection::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshTransformFunctions_TranslateMeshSelection, ReturnValue) == 0x000038, "Member 'GeometryScriptLibrary_MeshTransformFunctions_TranslateMeshSelection::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshTransformFunctions.TranslatePivotToLocation
// 0x0030 (0x0030 - 0x0000)
struct GeometryScriptLibrary_MeshTransformFunctions_TranslatePivotToLocation final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PivotLocation;                                     // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshTransformFunctions_TranslatePivotToLocation) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshTransformFunctions_TranslatePivotToLocation");
static_assert(sizeof(GeometryScriptLibrary_MeshTransformFunctions_TranslatePivotToLocation) == 0x000030, "Wrong size on GeometryScriptLibrary_MeshTransformFunctions_TranslatePivotToLocation");
static_assert(offsetof(GeometryScriptLibrary_MeshTransformFunctions_TranslatePivotToLocation, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshTransformFunctions_TranslatePivotToLocation::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshTransformFunctions_TranslatePivotToLocation, PivotLocation) == 0x000008, "Member 'GeometryScriptLibrary_MeshTransformFunctions_TranslatePivotToLocation::PivotLocation' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshTransformFunctions_TranslatePivotToLocation, Debug) == 0x000020, "Member 'GeometryScriptLibrary_MeshTransformFunctions_TranslatePivotToLocation::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshTransformFunctions_TranslatePivotToLocation, ReturnValue) == 0x000028, "Member 'GeometryScriptLibrary_MeshTransformFunctions_TranslatePivotToLocation::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshUVFunctions.AddUVElementToMesh
// 0x0030 (0x0030 - 0x0000)
struct GeometryScriptLibrary_MeshUVFunctions_AddUVElementToMesh final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UvSetIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              NewUVPosition;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewUVElementID;                                    // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValidUVSet;                                     // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeferChangeNotifications;                         // 0x0025(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshUVFunctions_AddUVElementToMesh) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshUVFunctions_AddUVElementToMesh");
static_assert(sizeof(GeometryScriptLibrary_MeshUVFunctions_AddUVElementToMesh) == 0x000030, "Wrong size on GeometryScriptLibrary_MeshUVFunctions_AddUVElementToMesh");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_AddUVElementToMesh, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshUVFunctions_AddUVElementToMesh::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_AddUVElementToMesh, UvSetIndex) == 0x000008, "Member 'GeometryScriptLibrary_MeshUVFunctions_AddUVElementToMesh::UvSetIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_AddUVElementToMesh, NewUVPosition) == 0x000010, "Member 'GeometryScriptLibrary_MeshUVFunctions_AddUVElementToMesh::NewUVPosition' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_AddUVElementToMesh, NewUVElementID) == 0x000020, "Member 'GeometryScriptLibrary_MeshUVFunctions_AddUVElementToMesh::NewUVElementID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_AddUVElementToMesh, bIsValidUVSet) == 0x000024, "Member 'GeometryScriptLibrary_MeshUVFunctions_AddUVElementToMesh::bIsValidUVSet' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_AddUVElementToMesh, bDeferChangeNotifications) == 0x000025, "Member 'GeometryScriptLibrary_MeshUVFunctions_AddUVElementToMesh::bDeferChangeNotifications' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_AddUVElementToMesh, ReturnValue) == 0x000028, "Member 'GeometryScriptLibrary_MeshUVFunctions_AddUVElementToMesh::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshUVFunctions.AutoGeneratePatchBuilderMeshUVs
// 0x0050 (0x0050 - 0x0000)
struct GeometryScriptLibrary_MeshUVFunctions_AutoGeneratePatchBuilderMeshUVs final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UvSetIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptPatchBuilderOptions     Options;                                           // 0x000C(0x0034)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0040(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshUVFunctions_AutoGeneratePatchBuilderMeshUVs) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshUVFunctions_AutoGeneratePatchBuilderMeshUVs");
static_assert(sizeof(GeometryScriptLibrary_MeshUVFunctions_AutoGeneratePatchBuilderMeshUVs) == 0x000050, "Wrong size on GeometryScriptLibrary_MeshUVFunctions_AutoGeneratePatchBuilderMeshUVs");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_AutoGeneratePatchBuilderMeshUVs, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshUVFunctions_AutoGeneratePatchBuilderMeshUVs::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_AutoGeneratePatchBuilderMeshUVs, UvSetIndex) == 0x000008, "Member 'GeometryScriptLibrary_MeshUVFunctions_AutoGeneratePatchBuilderMeshUVs::UvSetIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_AutoGeneratePatchBuilderMeshUVs, Options) == 0x00000C, "Member 'GeometryScriptLibrary_MeshUVFunctions_AutoGeneratePatchBuilderMeshUVs::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_AutoGeneratePatchBuilderMeshUVs, Debug) == 0x000040, "Member 'GeometryScriptLibrary_MeshUVFunctions_AutoGeneratePatchBuilderMeshUVs::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_AutoGeneratePatchBuilderMeshUVs, ReturnValue) == 0x000048, "Member 'GeometryScriptLibrary_MeshUVFunctions_AutoGeneratePatchBuilderMeshUVs::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshUVFunctions.AutoGenerateXAtlasMeshUVs
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_MeshUVFunctions_AutoGenerateXAtlasMeshUVs final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UvSetIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptXAtlasOptions           Options;                                           // 0x000C(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshUVFunctions_AutoGenerateXAtlasMeshUVs) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshUVFunctions_AutoGenerateXAtlasMeshUVs");
static_assert(sizeof(GeometryScriptLibrary_MeshUVFunctions_AutoGenerateXAtlasMeshUVs) == 0x000020, "Wrong size on GeometryScriptLibrary_MeshUVFunctions_AutoGenerateXAtlasMeshUVs");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_AutoGenerateXAtlasMeshUVs, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshUVFunctions_AutoGenerateXAtlasMeshUVs::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_AutoGenerateXAtlasMeshUVs, UvSetIndex) == 0x000008, "Member 'GeometryScriptLibrary_MeshUVFunctions_AutoGenerateXAtlasMeshUVs::UvSetIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_AutoGenerateXAtlasMeshUVs, Options) == 0x00000C, "Member 'GeometryScriptLibrary_MeshUVFunctions_AutoGenerateXAtlasMeshUVs::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_AutoGenerateXAtlasMeshUVs, Debug) == 0x000010, "Member 'GeometryScriptLibrary_MeshUVFunctions_AutoGenerateXAtlasMeshUVs::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_AutoGenerateXAtlasMeshUVs, ReturnValue) == 0x000018, "Member 'GeometryScriptLibrary_MeshUVFunctions_AutoGenerateXAtlasMeshUVs::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshUVFunctions.ComputeMeshLocalUVParam
// 0x0088 (0x0088 - 0x0000)
struct GeometryScriptLibrary_MeshUVFunctions_ComputeMeshLocalUVParam final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CenterPoint;                                       // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CenterPointTriangleID;                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 VertexIDs;                                         // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      VertexUVs;                                         // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	double                                        Radius;                                            // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseInterpolatedNormal;                            // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TangentYDirection;                                 // 0x0058(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        UVRotationDeg;                                     // 0x0070(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0078(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0080(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshUVFunctions_ComputeMeshLocalUVParam) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshUVFunctions_ComputeMeshLocalUVParam");
static_assert(sizeof(GeometryScriptLibrary_MeshUVFunctions_ComputeMeshLocalUVParam) == 0x000088, "Wrong size on GeometryScriptLibrary_MeshUVFunctions_ComputeMeshLocalUVParam");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_ComputeMeshLocalUVParam, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshUVFunctions_ComputeMeshLocalUVParam::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_ComputeMeshLocalUVParam, CenterPoint) == 0x000008, "Member 'GeometryScriptLibrary_MeshUVFunctions_ComputeMeshLocalUVParam::CenterPoint' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_ComputeMeshLocalUVParam, CenterPointTriangleID) == 0x000020, "Member 'GeometryScriptLibrary_MeshUVFunctions_ComputeMeshLocalUVParam::CenterPointTriangleID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_ComputeMeshLocalUVParam, VertexIDs) == 0x000028, "Member 'GeometryScriptLibrary_MeshUVFunctions_ComputeMeshLocalUVParam::VertexIDs' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_ComputeMeshLocalUVParam, VertexUVs) == 0x000038, "Member 'GeometryScriptLibrary_MeshUVFunctions_ComputeMeshLocalUVParam::VertexUVs' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_ComputeMeshLocalUVParam, Radius) == 0x000048, "Member 'GeometryScriptLibrary_MeshUVFunctions_ComputeMeshLocalUVParam::Radius' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_ComputeMeshLocalUVParam, bUseInterpolatedNormal) == 0x000050, "Member 'GeometryScriptLibrary_MeshUVFunctions_ComputeMeshLocalUVParam::bUseInterpolatedNormal' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_ComputeMeshLocalUVParam, TangentYDirection) == 0x000058, "Member 'GeometryScriptLibrary_MeshUVFunctions_ComputeMeshLocalUVParam::TangentYDirection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_ComputeMeshLocalUVParam, UVRotationDeg) == 0x000070, "Member 'GeometryScriptLibrary_MeshUVFunctions_ComputeMeshLocalUVParam::UVRotationDeg' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_ComputeMeshLocalUVParam, Debug) == 0x000078, "Member 'GeometryScriptLibrary_MeshUVFunctions_ComputeMeshLocalUVParam::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_ComputeMeshLocalUVParam, ReturnValue) == 0x000080, "Member 'GeometryScriptLibrary_MeshUVFunctions_ComputeMeshLocalUVParam::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshUVFunctions.CopyMeshToMeshUVLayer
// 0x0038 (0x0038 - 0x0000)
struct GeometryScriptLibrary_MeshUVFunctions_CopyMeshToMeshUVLayer final
{
public:
	class UDynamicMesh*                           CopyFromUVMesh;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ToUVSetIndex;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           CopyToMesh;                                        // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           CopyToMeshOut;                                     // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFoundTopologyErrors;                              // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValidUVSet;                                     // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyUVPositions;                                  // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshUVFunctions_CopyMeshToMeshUVLayer) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshUVFunctions_CopyMeshToMeshUVLayer");
static_assert(sizeof(GeometryScriptLibrary_MeshUVFunctions_CopyMeshToMeshUVLayer) == 0x000038, "Wrong size on GeometryScriptLibrary_MeshUVFunctions_CopyMeshToMeshUVLayer");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_CopyMeshToMeshUVLayer, CopyFromUVMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshUVFunctions_CopyMeshToMeshUVLayer::CopyFromUVMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_CopyMeshToMeshUVLayer, ToUVSetIndex) == 0x000008, "Member 'GeometryScriptLibrary_MeshUVFunctions_CopyMeshToMeshUVLayer::ToUVSetIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_CopyMeshToMeshUVLayer, CopyToMesh) == 0x000010, "Member 'GeometryScriptLibrary_MeshUVFunctions_CopyMeshToMeshUVLayer::CopyToMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_CopyMeshToMeshUVLayer, CopyToMeshOut) == 0x000018, "Member 'GeometryScriptLibrary_MeshUVFunctions_CopyMeshToMeshUVLayer::CopyToMeshOut' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_CopyMeshToMeshUVLayer, bFoundTopologyErrors) == 0x000020, "Member 'GeometryScriptLibrary_MeshUVFunctions_CopyMeshToMeshUVLayer::bFoundTopologyErrors' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_CopyMeshToMeshUVLayer, bIsValidUVSet) == 0x000021, "Member 'GeometryScriptLibrary_MeshUVFunctions_CopyMeshToMeshUVLayer::bIsValidUVSet' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_CopyMeshToMeshUVLayer, bOnlyUVPositions) == 0x000022, "Member 'GeometryScriptLibrary_MeshUVFunctions_CopyMeshToMeshUVLayer::bOnlyUVPositions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_CopyMeshToMeshUVLayer, Debug) == 0x000028, "Member 'GeometryScriptLibrary_MeshUVFunctions_CopyMeshToMeshUVLayer::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_CopyMeshToMeshUVLayer, ReturnValue) == 0x000030, "Member 'GeometryScriptLibrary_MeshUVFunctions_CopyMeshToMeshUVLayer::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshUVFunctions.CopyMeshUVLayerToMesh
// 0x0038 (0x0038 - 0x0000)
struct GeometryScriptLibrary_MeshUVFunctions_CopyMeshUVLayerToMesh final
{
public:
	class UDynamicMesh*                           CopyFromMesh;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UvSetIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           CopyToUVMesh;                                      // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           CopyToUVMeshOut;                                   // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvalidTopology;                                  // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValidUVSet;                                     // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshUVFunctions_CopyMeshUVLayerToMesh) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshUVFunctions_CopyMeshUVLayerToMesh");
static_assert(sizeof(GeometryScriptLibrary_MeshUVFunctions_CopyMeshUVLayerToMesh) == 0x000038, "Wrong size on GeometryScriptLibrary_MeshUVFunctions_CopyMeshUVLayerToMesh");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_CopyMeshUVLayerToMesh, CopyFromMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshUVFunctions_CopyMeshUVLayerToMesh::CopyFromMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_CopyMeshUVLayerToMesh, UvSetIndex) == 0x000008, "Member 'GeometryScriptLibrary_MeshUVFunctions_CopyMeshUVLayerToMesh::UvSetIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_CopyMeshUVLayerToMesh, CopyToUVMesh) == 0x000010, "Member 'GeometryScriptLibrary_MeshUVFunctions_CopyMeshUVLayerToMesh::CopyToUVMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_CopyMeshUVLayerToMesh, CopyToUVMeshOut) == 0x000018, "Member 'GeometryScriptLibrary_MeshUVFunctions_CopyMeshUVLayerToMesh::CopyToUVMeshOut' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_CopyMeshUVLayerToMesh, bInvalidTopology) == 0x000020, "Member 'GeometryScriptLibrary_MeshUVFunctions_CopyMeshUVLayerToMesh::bInvalidTopology' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_CopyMeshUVLayerToMesh, bIsValidUVSet) == 0x000021, "Member 'GeometryScriptLibrary_MeshUVFunctions_CopyMeshUVLayerToMesh::bIsValidUVSet' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_CopyMeshUVLayerToMesh, Debug) == 0x000028, "Member 'GeometryScriptLibrary_MeshUVFunctions_CopyMeshUVLayerToMesh::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_CopyMeshUVLayerToMesh, ReturnValue) == 0x000030, "Member 'GeometryScriptLibrary_MeshUVFunctions_CopyMeshUVLayerToMesh::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshUVFunctions.CopyUVSet
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_MeshUVFunctions_CopyUVSet final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FromUVSet;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ToUVSet;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshUVFunctions_CopyUVSet) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshUVFunctions_CopyUVSet");
static_assert(sizeof(GeometryScriptLibrary_MeshUVFunctions_CopyUVSet) == 0x000020, "Wrong size on GeometryScriptLibrary_MeshUVFunctions_CopyUVSet");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_CopyUVSet, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshUVFunctions_CopyUVSet::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_CopyUVSet, FromUVSet) == 0x000008, "Member 'GeometryScriptLibrary_MeshUVFunctions_CopyUVSet::FromUVSet' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_CopyUVSet, ToUVSet) == 0x00000C, "Member 'GeometryScriptLibrary_MeshUVFunctions_CopyUVSet::ToUVSet' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_CopyUVSet, Debug) == 0x000010, "Member 'GeometryScriptLibrary_MeshUVFunctions_CopyUVSet::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_CopyUVSet, ReturnValue) == 0x000018, "Member 'GeometryScriptLibrary_MeshUVFunctions_CopyUVSet::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshUVFunctions.GetMeshPerVertexUVs
// 0x0038 (0x0038 - 0x0000)
struct GeometryScriptLibrary_MeshUVFunctions_GetMeshPerVertexUVs final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UvSetIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptUVList                  UVList;                                            // 0x0010(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          bIsValidUVSet;                                     // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasVertexIDGaps;                                  // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasSplitUVs;                                      // 0x0022(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshUVFunctions_GetMeshPerVertexUVs) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshUVFunctions_GetMeshPerVertexUVs");
static_assert(sizeof(GeometryScriptLibrary_MeshUVFunctions_GetMeshPerVertexUVs) == 0x000038, "Wrong size on GeometryScriptLibrary_MeshUVFunctions_GetMeshPerVertexUVs");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_GetMeshPerVertexUVs, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshUVFunctions_GetMeshPerVertexUVs::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_GetMeshPerVertexUVs, UvSetIndex) == 0x000008, "Member 'GeometryScriptLibrary_MeshUVFunctions_GetMeshPerVertexUVs::UvSetIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_GetMeshPerVertexUVs, UVList) == 0x000010, "Member 'GeometryScriptLibrary_MeshUVFunctions_GetMeshPerVertexUVs::UVList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_GetMeshPerVertexUVs, bIsValidUVSet) == 0x000020, "Member 'GeometryScriptLibrary_MeshUVFunctions_GetMeshPerVertexUVs::bIsValidUVSet' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_GetMeshPerVertexUVs, bHasVertexIDGaps) == 0x000021, "Member 'GeometryScriptLibrary_MeshUVFunctions_GetMeshPerVertexUVs::bHasVertexIDGaps' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_GetMeshPerVertexUVs, bHasSplitUVs) == 0x000022, "Member 'GeometryScriptLibrary_MeshUVFunctions_GetMeshPerVertexUVs::bHasSplitUVs' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_GetMeshPerVertexUVs, Debug) == 0x000028, "Member 'GeometryScriptLibrary_MeshUVFunctions_GetMeshPerVertexUVs::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_GetMeshPerVertexUVs, ReturnValue) == 0x000030, "Member 'GeometryScriptLibrary_MeshUVFunctions_GetMeshPerVertexUVs::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshUVFunctions.GetMeshTriangleUVElementIDs
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_MeshUVFunctions_GetMeshTriangleUVElementIDs final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UvSetIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TriangleID;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             TriangleUVElements;                                // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHaveValidUVs;                                     // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshUVFunctions_GetMeshTriangleUVElementIDs) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshUVFunctions_GetMeshTriangleUVElementIDs");
static_assert(sizeof(GeometryScriptLibrary_MeshUVFunctions_GetMeshTriangleUVElementIDs) == 0x000028, "Wrong size on GeometryScriptLibrary_MeshUVFunctions_GetMeshTriangleUVElementIDs");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_GetMeshTriangleUVElementIDs, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshUVFunctions_GetMeshTriangleUVElementIDs::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_GetMeshTriangleUVElementIDs, UvSetIndex) == 0x000008, "Member 'GeometryScriptLibrary_MeshUVFunctions_GetMeshTriangleUVElementIDs::UvSetIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_GetMeshTriangleUVElementIDs, TriangleID) == 0x00000C, "Member 'GeometryScriptLibrary_MeshUVFunctions_GetMeshTriangleUVElementIDs::TriangleID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_GetMeshTriangleUVElementIDs, TriangleUVElements) == 0x000010, "Member 'GeometryScriptLibrary_MeshUVFunctions_GetMeshTriangleUVElementIDs::TriangleUVElements' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_GetMeshTriangleUVElementIDs, bHaveValidUVs) == 0x00001C, "Member 'GeometryScriptLibrary_MeshUVFunctions_GetMeshTriangleUVElementIDs::bHaveValidUVs' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_GetMeshTriangleUVElementIDs, ReturnValue) == 0x000020, "Member 'GeometryScriptLibrary_MeshUVFunctions_GetMeshTriangleUVElementIDs::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshUVFunctions.GetMeshUVElementPosition
// 0x0030 (0x0030 - 0x0000)
struct GeometryScriptLibrary_MeshUVFunctions_GetMeshUVElementPosition final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UvSetIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ElementID;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              UVPosition;                                        // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValidElementID;                                 // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshUVFunctions_GetMeshUVElementPosition) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshUVFunctions_GetMeshUVElementPosition");
static_assert(sizeof(GeometryScriptLibrary_MeshUVFunctions_GetMeshUVElementPosition) == 0x000030, "Wrong size on GeometryScriptLibrary_MeshUVFunctions_GetMeshUVElementPosition");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_GetMeshUVElementPosition, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshUVFunctions_GetMeshUVElementPosition::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_GetMeshUVElementPosition, UvSetIndex) == 0x000008, "Member 'GeometryScriptLibrary_MeshUVFunctions_GetMeshUVElementPosition::UvSetIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_GetMeshUVElementPosition, ElementID) == 0x00000C, "Member 'GeometryScriptLibrary_MeshUVFunctions_GetMeshUVElementPosition::ElementID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_GetMeshUVElementPosition, UVPosition) == 0x000010, "Member 'GeometryScriptLibrary_MeshUVFunctions_GetMeshUVElementPosition::UVPosition' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_GetMeshUVElementPosition, bIsValidElementID) == 0x000020, "Member 'GeometryScriptLibrary_MeshUVFunctions_GetMeshUVElementPosition::bIsValidElementID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_GetMeshUVElementPosition, ReturnValue) == 0x000028, "Member 'GeometryScriptLibrary_MeshUVFunctions_GetMeshUVElementPosition::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshUVFunctions.GetMeshUVSizeInfo
// 0x00A8 (0x00A8 - 0x0000)
struct GeometryScriptLibrary_MeshUVFunctions_GetMeshUVSizeInfo final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UvSetIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0010(0x0010)(Parm, NativeAccessSpecifierPublic)
	double                                        MeshArea;                                          // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        UVArea;                                            // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   MeshBounds;                                        // 0x0030(0x0038)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FBox2D                                 UVBounds;                                          // 0x0068(0x0028)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsValidUVSet;                                     // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFoundUnsetUVs;                                    // 0x0091(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyIncludeValidUVTris;                           // 0x0092(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_93[0x5];                                       // 0x0093(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0098(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x00A0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshUVFunctions_GetMeshUVSizeInfo) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshUVFunctions_GetMeshUVSizeInfo");
static_assert(sizeof(GeometryScriptLibrary_MeshUVFunctions_GetMeshUVSizeInfo) == 0x0000A8, "Wrong size on GeometryScriptLibrary_MeshUVFunctions_GetMeshUVSizeInfo");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_GetMeshUVSizeInfo, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshUVFunctions_GetMeshUVSizeInfo::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_GetMeshUVSizeInfo, UvSetIndex) == 0x000008, "Member 'GeometryScriptLibrary_MeshUVFunctions_GetMeshUVSizeInfo::UvSetIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_GetMeshUVSizeInfo, Selection) == 0x000010, "Member 'GeometryScriptLibrary_MeshUVFunctions_GetMeshUVSizeInfo::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_GetMeshUVSizeInfo, MeshArea) == 0x000020, "Member 'GeometryScriptLibrary_MeshUVFunctions_GetMeshUVSizeInfo::MeshArea' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_GetMeshUVSizeInfo, UVArea) == 0x000028, "Member 'GeometryScriptLibrary_MeshUVFunctions_GetMeshUVSizeInfo::UVArea' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_GetMeshUVSizeInfo, MeshBounds) == 0x000030, "Member 'GeometryScriptLibrary_MeshUVFunctions_GetMeshUVSizeInfo::MeshBounds' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_GetMeshUVSizeInfo, UVBounds) == 0x000068, "Member 'GeometryScriptLibrary_MeshUVFunctions_GetMeshUVSizeInfo::UVBounds' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_GetMeshUVSizeInfo, bIsValidUVSet) == 0x000090, "Member 'GeometryScriptLibrary_MeshUVFunctions_GetMeshUVSizeInfo::bIsValidUVSet' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_GetMeshUVSizeInfo, bFoundUnsetUVs) == 0x000091, "Member 'GeometryScriptLibrary_MeshUVFunctions_GetMeshUVSizeInfo::bFoundUnsetUVs' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_GetMeshUVSizeInfo, bOnlyIncludeValidUVTris) == 0x000092, "Member 'GeometryScriptLibrary_MeshUVFunctions_GetMeshUVSizeInfo::bOnlyIncludeValidUVTris' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_GetMeshUVSizeInfo, Debug) == 0x000098, "Member 'GeometryScriptLibrary_MeshUVFunctions_GetMeshUVSizeInfo::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_GetMeshUVSizeInfo, ReturnValue) == 0x0000A0, "Member 'GeometryScriptLibrary_MeshUVFunctions_GetMeshUVSizeInfo::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshUVFunctions.RecomputeMeshUVs
// 0x0048 (0x0048 - 0x0000)
struct GeometryScriptLibrary_MeshUVFunctions_RecomputeMeshUVs final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UvSetIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptRecomputeUVsOptions     Options;                                           // 0x000C(0x001C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0028(0x0010)(Parm, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshUVFunctions_RecomputeMeshUVs) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshUVFunctions_RecomputeMeshUVs");
static_assert(sizeof(GeometryScriptLibrary_MeshUVFunctions_RecomputeMeshUVs) == 0x000048, "Wrong size on GeometryScriptLibrary_MeshUVFunctions_RecomputeMeshUVs");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_RecomputeMeshUVs, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshUVFunctions_RecomputeMeshUVs::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_RecomputeMeshUVs, UvSetIndex) == 0x000008, "Member 'GeometryScriptLibrary_MeshUVFunctions_RecomputeMeshUVs::UvSetIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_RecomputeMeshUVs, Options) == 0x00000C, "Member 'GeometryScriptLibrary_MeshUVFunctions_RecomputeMeshUVs::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_RecomputeMeshUVs, Selection) == 0x000028, "Member 'GeometryScriptLibrary_MeshUVFunctions_RecomputeMeshUVs::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_RecomputeMeshUVs, Debug) == 0x000038, "Member 'GeometryScriptLibrary_MeshUVFunctions_RecomputeMeshUVs::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_RecomputeMeshUVs, ReturnValue) == 0x000040, "Member 'GeometryScriptLibrary_MeshUVFunctions_RecomputeMeshUVs::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshUVFunctions.RepackMeshUVs
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_MeshUVFunctions_RepackMeshUVs final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UvSetIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptRepackUVsOptions        RepackOptions;                                     // 0x000C(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshUVFunctions_RepackMeshUVs) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshUVFunctions_RepackMeshUVs");
static_assert(sizeof(GeometryScriptLibrary_MeshUVFunctions_RepackMeshUVs) == 0x000028, "Wrong size on GeometryScriptLibrary_MeshUVFunctions_RepackMeshUVs");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_RepackMeshUVs, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshUVFunctions_RepackMeshUVs::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_RepackMeshUVs, UvSetIndex) == 0x000008, "Member 'GeometryScriptLibrary_MeshUVFunctions_RepackMeshUVs::UvSetIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_RepackMeshUVs, RepackOptions) == 0x00000C, "Member 'GeometryScriptLibrary_MeshUVFunctions_RepackMeshUVs::RepackOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_RepackMeshUVs, Debug) == 0x000018, "Member 'GeometryScriptLibrary_MeshUVFunctions_RepackMeshUVs::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_RepackMeshUVs, ReturnValue) == 0x000020, "Member 'GeometryScriptLibrary_MeshUVFunctions_RepackMeshUVs::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshUVFunctions.RotateMeshUVs
// 0x0040 (0x0040 - 0x0000)
struct GeometryScriptLibrary_MeshUVFunctions_RotateMeshUVs final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UvSetIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationAngle;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RotationOrigin;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0020(0x0010)(Parm, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshUVFunctions_RotateMeshUVs) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshUVFunctions_RotateMeshUVs");
static_assert(sizeof(GeometryScriptLibrary_MeshUVFunctions_RotateMeshUVs) == 0x000040, "Wrong size on GeometryScriptLibrary_MeshUVFunctions_RotateMeshUVs");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_RotateMeshUVs, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshUVFunctions_RotateMeshUVs::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_RotateMeshUVs, UvSetIndex) == 0x000008, "Member 'GeometryScriptLibrary_MeshUVFunctions_RotateMeshUVs::UvSetIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_RotateMeshUVs, RotationAngle) == 0x00000C, "Member 'GeometryScriptLibrary_MeshUVFunctions_RotateMeshUVs::RotationAngle' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_RotateMeshUVs, RotationOrigin) == 0x000010, "Member 'GeometryScriptLibrary_MeshUVFunctions_RotateMeshUVs::RotationOrigin' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_RotateMeshUVs, Selection) == 0x000020, "Member 'GeometryScriptLibrary_MeshUVFunctions_RotateMeshUVs::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_RotateMeshUVs, Debug) == 0x000030, "Member 'GeometryScriptLibrary_MeshUVFunctions_RotateMeshUVs::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_RotateMeshUVs, ReturnValue) == 0x000038, "Member 'GeometryScriptLibrary_MeshUVFunctions_RotateMeshUVs::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshUVFunctions.ScaleMeshUVs
// 0x0050 (0x0050 - 0x0000)
struct GeometryScriptLibrary_MeshUVFunctions_ScaleMeshUVs final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UvSetIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Scale;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ScaleOrigin;                                       // 0x0020(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0030(0x0010)(Parm, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0040(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshUVFunctions_ScaleMeshUVs) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshUVFunctions_ScaleMeshUVs");
static_assert(sizeof(GeometryScriptLibrary_MeshUVFunctions_ScaleMeshUVs) == 0x000050, "Wrong size on GeometryScriptLibrary_MeshUVFunctions_ScaleMeshUVs");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_ScaleMeshUVs, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshUVFunctions_ScaleMeshUVs::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_ScaleMeshUVs, UvSetIndex) == 0x000008, "Member 'GeometryScriptLibrary_MeshUVFunctions_ScaleMeshUVs::UvSetIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_ScaleMeshUVs, Scale) == 0x000010, "Member 'GeometryScriptLibrary_MeshUVFunctions_ScaleMeshUVs::Scale' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_ScaleMeshUVs, ScaleOrigin) == 0x000020, "Member 'GeometryScriptLibrary_MeshUVFunctions_ScaleMeshUVs::ScaleOrigin' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_ScaleMeshUVs, Selection) == 0x000030, "Member 'GeometryScriptLibrary_MeshUVFunctions_ScaleMeshUVs::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_ScaleMeshUVs, Debug) == 0x000040, "Member 'GeometryScriptLibrary_MeshUVFunctions_ScaleMeshUVs::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_ScaleMeshUVs, ReturnValue) == 0x000048, "Member 'GeometryScriptLibrary_MeshUVFunctions_ScaleMeshUVs::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshUVFunctions.SetMeshTriangleUVElementIDs
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_MeshUVFunctions_SetMeshTriangleUVElementIDs final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UvSetIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TriangleID;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             TriangleUVElements;                                // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValidTriangle;                                  // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeferChangeNotifications;                         // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshUVFunctions_SetMeshTriangleUVElementIDs) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshUVFunctions_SetMeshTriangleUVElementIDs");
static_assert(sizeof(GeometryScriptLibrary_MeshUVFunctions_SetMeshTriangleUVElementIDs) == 0x000028, "Wrong size on GeometryScriptLibrary_MeshUVFunctions_SetMeshTriangleUVElementIDs");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_SetMeshTriangleUVElementIDs, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshUVFunctions_SetMeshTriangleUVElementIDs::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_SetMeshTriangleUVElementIDs, UvSetIndex) == 0x000008, "Member 'GeometryScriptLibrary_MeshUVFunctions_SetMeshTriangleUVElementIDs::UvSetIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_SetMeshTriangleUVElementIDs, TriangleID) == 0x00000C, "Member 'GeometryScriptLibrary_MeshUVFunctions_SetMeshTriangleUVElementIDs::TriangleID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_SetMeshTriangleUVElementIDs, TriangleUVElements) == 0x000010, "Member 'GeometryScriptLibrary_MeshUVFunctions_SetMeshTriangleUVElementIDs::TriangleUVElements' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_SetMeshTriangleUVElementIDs, bIsValidTriangle) == 0x00001C, "Member 'GeometryScriptLibrary_MeshUVFunctions_SetMeshTriangleUVElementIDs::bIsValidTriangle' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_SetMeshTriangleUVElementIDs, bDeferChangeNotifications) == 0x00001D, "Member 'GeometryScriptLibrary_MeshUVFunctions_SetMeshTriangleUVElementIDs::bDeferChangeNotifications' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_SetMeshTriangleUVElementIDs, ReturnValue) == 0x000020, "Member 'GeometryScriptLibrary_MeshUVFunctions_SetMeshTriangleUVElementIDs::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshUVFunctions.SetMeshTriangleUVs
// 0x0050 (0x0050 - 0x0000)
struct GeometryScriptLibrary_MeshUVFunctions_SetMeshTriangleUVs final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UvSetIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TriangleID;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptUVTriangle              UVs;                                               // 0x0010(0x0030)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsValidTriangle;                                  // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeferChangeNotifications;                         // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshUVFunctions_SetMeshTriangleUVs) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshUVFunctions_SetMeshTriangleUVs");
static_assert(sizeof(GeometryScriptLibrary_MeshUVFunctions_SetMeshTriangleUVs) == 0x000050, "Wrong size on GeometryScriptLibrary_MeshUVFunctions_SetMeshTriangleUVs");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_SetMeshTriangleUVs, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshUVFunctions_SetMeshTriangleUVs::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_SetMeshTriangleUVs, UvSetIndex) == 0x000008, "Member 'GeometryScriptLibrary_MeshUVFunctions_SetMeshTriangleUVs::UvSetIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_SetMeshTriangleUVs, TriangleID) == 0x00000C, "Member 'GeometryScriptLibrary_MeshUVFunctions_SetMeshTriangleUVs::TriangleID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_SetMeshTriangleUVs, UVs) == 0x000010, "Member 'GeometryScriptLibrary_MeshUVFunctions_SetMeshTriangleUVs::UVs' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_SetMeshTriangleUVs, bIsValidTriangle) == 0x000040, "Member 'GeometryScriptLibrary_MeshUVFunctions_SetMeshTriangleUVs::bIsValidTriangle' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_SetMeshTriangleUVs, bDeferChangeNotifications) == 0x000041, "Member 'GeometryScriptLibrary_MeshUVFunctions_SetMeshTriangleUVs::bDeferChangeNotifications' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_SetMeshTriangleUVs, ReturnValue) == 0x000048, "Member 'GeometryScriptLibrary_MeshUVFunctions_SetMeshTriangleUVs::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshUVFunctions.SetMeshUVElementPosition
// 0x0030 (0x0030 - 0x0000)
struct GeometryScriptLibrary_MeshUVFunctions_SetMeshUVElementPosition final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UvSetIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ElementID;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NewUVPosition;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValidElementID;                                 // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeferChangeNotifications;                         // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshUVFunctions_SetMeshUVElementPosition) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshUVFunctions_SetMeshUVElementPosition");
static_assert(sizeof(GeometryScriptLibrary_MeshUVFunctions_SetMeshUVElementPosition) == 0x000030, "Wrong size on GeometryScriptLibrary_MeshUVFunctions_SetMeshUVElementPosition");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_SetMeshUVElementPosition, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshUVFunctions_SetMeshUVElementPosition::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_SetMeshUVElementPosition, UvSetIndex) == 0x000008, "Member 'GeometryScriptLibrary_MeshUVFunctions_SetMeshUVElementPosition::UvSetIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_SetMeshUVElementPosition, ElementID) == 0x00000C, "Member 'GeometryScriptLibrary_MeshUVFunctions_SetMeshUVElementPosition::ElementID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_SetMeshUVElementPosition, NewUVPosition) == 0x000010, "Member 'GeometryScriptLibrary_MeshUVFunctions_SetMeshUVElementPosition::NewUVPosition' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_SetMeshUVElementPosition, bIsValidElementID) == 0x000020, "Member 'GeometryScriptLibrary_MeshUVFunctions_SetMeshUVElementPosition::bIsValidElementID' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_SetMeshUVElementPosition, bDeferChangeNotifications) == 0x000021, "Member 'GeometryScriptLibrary_MeshUVFunctions_SetMeshUVElementPosition::bDeferChangeNotifications' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_SetMeshUVElementPosition, ReturnValue) == 0x000028, "Member 'GeometryScriptLibrary_MeshUVFunctions_SetMeshUVElementPosition::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshUVFunctions.SetMeshUVsFromBoxProjection
// 0x00A0 (0x00A0 - 0x0000)
struct GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromBoxProjection final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UvSetIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             BoxTransform;                                      // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0070(0x0010)(Parm, NativeAccessSpecifierPublic)
	int32                                         MinIslandTriCount;                                 // 0x0080(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0088(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromBoxProjection) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromBoxProjection");
static_assert(sizeof(GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromBoxProjection) == 0x0000A0, "Wrong size on GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromBoxProjection");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromBoxProjection, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromBoxProjection::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromBoxProjection, UvSetIndex) == 0x000008, "Member 'GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromBoxProjection::UvSetIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromBoxProjection, BoxTransform) == 0x000010, "Member 'GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromBoxProjection::BoxTransform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromBoxProjection, Selection) == 0x000070, "Member 'GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromBoxProjection::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromBoxProjection, MinIslandTriCount) == 0x000080, "Member 'GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromBoxProjection::MinIslandTriCount' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromBoxProjection, Debug) == 0x000088, "Member 'GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromBoxProjection::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromBoxProjection, ReturnValue) == 0x000090, "Member 'GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromBoxProjection::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshUVFunctions.SetMeshUVsFromCylinderProjection
// 0x00A0 (0x00A0 - 0x0000)
struct GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromCylinderProjection final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UvSetIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CylinderTransform;                                 // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0070(0x0010)(Parm, NativeAccessSpecifierPublic)
	float                                         SplitAngle;                                        // 0x0080(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0088(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromCylinderProjection) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromCylinderProjection");
static_assert(sizeof(GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromCylinderProjection) == 0x0000A0, "Wrong size on GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromCylinderProjection");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromCylinderProjection, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromCylinderProjection::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromCylinderProjection, UvSetIndex) == 0x000008, "Member 'GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromCylinderProjection::UvSetIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromCylinderProjection, CylinderTransform) == 0x000010, "Member 'GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromCylinderProjection::CylinderTransform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromCylinderProjection, Selection) == 0x000070, "Member 'GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromCylinderProjection::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromCylinderProjection, SplitAngle) == 0x000080, "Member 'GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromCylinderProjection::SplitAngle' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromCylinderProjection, Debug) == 0x000088, "Member 'GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromCylinderProjection::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromCylinderProjection, ReturnValue) == 0x000090, "Member 'GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromCylinderProjection::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshUVFunctions.SetMeshUVsFromPlanarProjection
// 0x0090 (0x0090 - 0x0000)
struct GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromPlanarProjection final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UvSetIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             PlaneTransform;                                    // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0070(0x0010)(Parm, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0080(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0088(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromPlanarProjection) == 0x000010, "Wrong alignment on GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromPlanarProjection");
static_assert(sizeof(GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromPlanarProjection) == 0x000090, "Wrong size on GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromPlanarProjection");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromPlanarProjection, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromPlanarProjection::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromPlanarProjection, UvSetIndex) == 0x000008, "Member 'GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromPlanarProjection::UvSetIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromPlanarProjection, PlaneTransform) == 0x000010, "Member 'GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromPlanarProjection::PlaneTransform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromPlanarProjection, Selection) == 0x000070, "Member 'GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromPlanarProjection::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromPlanarProjection, Debug) == 0x000080, "Member 'GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromPlanarProjection::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromPlanarProjection, ReturnValue) == 0x000088, "Member 'GeometryScriptLibrary_MeshUVFunctions_SetMeshUVsFromPlanarProjection::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshUVFunctions.SetNumUVSets
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_MeshUVFunctions_SetNumUVSets final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumUVSets;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshUVFunctions_SetNumUVSets) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshUVFunctions_SetNumUVSets");
static_assert(sizeof(GeometryScriptLibrary_MeshUVFunctions_SetNumUVSets) == 0x000020, "Wrong size on GeometryScriptLibrary_MeshUVFunctions_SetNumUVSets");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_SetNumUVSets, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshUVFunctions_SetNumUVSets::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_SetNumUVSets, NumUVSets) == 0x000008, "Member 'GeometryScriptLibrary_MeshUVFunctions_SetNumUVSets::NumUVSets' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_SetNumUVSets, Debug) == 0x000010, "Member 'GeometryScriptLibrary_MeshUVFunctions_SetNumUVSets::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_SetNumUVSets, ReturnValue) == 0x000018, "Member 'GeometryScriptLibrary_MeshUVFunctions_SetNumUVSets::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshUVFunctions.TranslateMeshUVs
// 0x0040 (0x0040 - 0x0000)
struct GeometryScriptLibrary_MeshUVFunctions_TranslateMeshUVs final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UvSetIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Translation;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0020(0x0010)(Parm, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshUVFunctions_TranslateMeshUVs) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshUVFunctions_TranslateMeshUVs");
static_assert(sizeof(GeometryScriptLibrary_MeshUVFunctions_TranslateMeshUVs) == 0x000040, "Wrong size on GeometryScriptLibrary_MeshUVFunctions_TranslateMeshUVs");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_TranslateMeshUVs, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshUVFunctions_TranslateMeshUVs::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_TranslateMeshUVs, UvSetIndex) == 0x000008, "Member 'GeometryScriptLibrary_MeshUVFunctions_TranslateMeshUVs::UvSetIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_TranslateMeshUVs, Translation) == 0x000010, "Member 'GeometryScriptLibrary_MeshUVFunctions_TranslateMeshUVs::Translation' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_TranslateMeshUVs, Selection) == 0x000020, "Member 'GeometryScriptLibrary_MeshUVFunctions_TranslateMeshUVs::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_TranslateMeshUVs, Debug) == 0x000030, "Member 'GeometryScriptLibrary_MeshUVFunctions_TranslateMeshUVs::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshUVFunctions_TranslateMeshUVs, ReturnValue) == 0x000038, "Member 'GeometryScriptLibrary_MeshUVFunctions_TranslateMeshUVs::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshVertexColorFunctions.BlurMeshVertexColors
// 0x0040 (0x0040 - 0x0000)
struct GeometryScriptLibrary_MeshVertexColorFunctions_BlurMeshVertexColors final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	int32                                         NumIterations;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Strength;                                          // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptBlurColorMode                  BlurMode;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptBlurMeshVertexColorsOptions Options;                                           // 0x0029(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshVertexColorFunctions_BlurMeshVertexColors) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshVertexColorFunctions_BlurMeshVertexColors");
static_assert(sizeof(GeometryScriptLibrary_MeshVertexColorFunctions_BlurMeshVertexColors) == 0x000040, "Wrong size on GeometryScriptLibrary_MeshVertexColorFunctions_BlurMeshVertexColors");
static_assert(offsetof(GeometryScriptLibrary_MeshVertexColorFunctions_BlurMeshVertexColors, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshVertexColorFunctions_BlurMeshVertexColors::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshVertexColorFunctions_BlurMeshVertexColors, Selection) == 0x000008, "Member 'GeometryScriptLibrary_MeshVertexColorFunctions_BlurMeshVertexColors::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshVertexColorFunctions_BlurMeshVertexColors, NumIterations) == 0x000018, "Member 'GeometryScriptLibrary_MeshVertexColorFunctions_BlurMeshVertexColors::NumIterations' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshVertexColorFunctions_BlurMeshVertexColors, Strength) == 0x000020, "Member 'GeometryScriptLibrary_MeshVertexColorFunctions_BlurMeshVertexColors::Strength' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshVertexColorFunctions_BlurMeshVertexColors, BlurMode) == 0x000028, "Member 'GeometryScriptLibrary_MeshVertexColorFunctions_BlurMeshVertexColors::BlurMode' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshVertexColorFunctions_BlurMeshVertexColors, Options) == 0x000029, "Member 'GeometryScriptLibrary_MeshVertexColorFunctions_BlurMeshVertexColors::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshVertexColorFunctions_BlurMeshVertexColors, Debug) == 0x000030, "Member 'GeometryScriptLibrary_MeshVertexColorFunctions_BlurMeshVertexColors::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshVertexColorFunctions_BlurMeshVertexColors, ReturnValue) == 0x000038, "Member 'GeometryScriptLibrary_MeshVertexColorFunctions_BlurMeshVertexColors::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshVertexColorFunctions.ConvertMeshVertexColorsLinearToSRGB
// 0x0018 (0x0018 - 0x0000)
struct GeometryScriptLibrary_MeshVertexColorFunctions_ConvertMeshVertexColorsLinearToSRGB final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshVertexColorFunctions_ConvertMeshVertexColorsLinearToSRGB) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshVertexColorFunctions_ConvertMeshVertexColorsLinearToSRGB");
static_assert(sizeof(GeometryScriptLibrary_MeshVertexColorFunctions_ConvertMeshVertexColorsLinearToSRGB) == 0x000018, "Wrong size on GeometryScriptLibrary_MeshVertexColorFunctions_ConvertMeshVertexColorsLinearToSRGB");
static_assert(offsetof(GeometryScriptLibrary_MeshVertexColorFunctions_ConvertMeshVertexColorsLinearToSRGB, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshVertexColorFunctions_ConvertMeshVertexColorsLinearToSRGB::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshVertexColorFunctions_ConvertMeshVertexColorsLinearToSRGB, Debug) == 0x000008, "Member 'GeometryScriptLibrary_MeshVertexColorFunctions_ConvertMeshVertexColorsLinearToSRGB::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshVertexColorFunctions_ConvertMeshVertexColorsLinearToSRGB, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_MeshVertexColorFunctions_ConvertMeshVertexColorsLinearToSRGB::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshVertexColorFunctions.ConvertMeshVertexColorsSRGBToLinear
// 0x0018 (0x0018 - 0x0000)
struct GeometryScriptLibrary_MeshVertexColorFunctions_ConvertMeshVertexColorsSRGBToLinear final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshVertexColorFunctions_ConvertMeshVertexColorsSRGBToLinear) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshVertexColorFunctions_ConvertMeshVertexColorsSRGBToLinear");
static_assert(sizeof(GeometryScriptLibrary_MeshVertexColorFunctions_ConvertMeshVertexColorsSRGBToLinear) == 0x000018, "Wrong size on GeometryScriptLibrary_MeshVertexColorFunctions_ConvertMeshVertexColorsSRGBToLinear");
static_assert(offsetof(GeometryScriptLibrary_MeshVertexColorFunctions_ConvertMeshVertexColorsSRGBToLinear, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshVertexColorFunctions_ConvertMeshVertexColorsSRGBToLinear::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshVertexColorFunctions_ConvertMeshVertexColorsSRGBToLinear, Debug) == 0x000008, "Member 'GeometryScriptLibrary_MeshVertexColorFunctions_ConvertMeshVertexColorsSRGBToLinear::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshVertexColorFunctions_ConvertMeshVertexColorsSRGBToLinear, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_MeshVertexColorFunctions_ConvertMeshVertexColorsSRGBToLinear::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshVertexColorFunctions.GetMeshPerVertexColors
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_MeshVertexColorFunctions_GetMeshPerVertexColors final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptColorList               ColorList;                                         // 0x0008(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          bIsValidColorSet;                                  // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasVertexIDGaps;                                  // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlendSplitVertexValues;                           // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshVertexColorFunctions_GetMeshPerVertexColors) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshVertexColorFunctions_GetMeshPerVertexColors");
static_assert(sizeof(GeometryScriptLibrary_MeshVertexColorFunctions_GetMeshPerVertexColors) == 0x000028, "Wrong size on GeometryScriptLibrary_MeshVertexColorFunctions_GetMeshPerVertexColors");
static_assert(offsetof(GeometryScriptLibrary_MeshVertexColorFunctions_GetMeshPerVertexColors, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshVertexColorFunctions_GetMeshPerVertexColors::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshVertexColorFunctions_GetMeshPerVertexColors, ColorList) == 0x000008, "Member 'GeometryScriptLibrary_MeshVertexColorFunctions_GetMeshPerVertexColors::ColorList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshVertexColorFunctions_GetMeshPerVertexColors, bIsValidColorSet) == 0x000018, "Member 'GeometryScriptLibrary_MeshVertexColorFunctions_GetMeshPerVertexColors::bIsValidColorSet' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshVertexColorFunctions_GetMeshPerVertexColors, bHasVertexIDGaps) == 0x000019, "Member 'GeometryScriptLibrary_MeshVertexColorFunctions_GetMeshPerVertexColors::bHasVertexIDGaps' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshVertexColorFunctions_GetMeshPerVertexColors, bBlendSplitVertexValues) == 0x00001A, "Member 'GeometryScriptLibrary_MeshVertexColorFunctions_GetMeshPerVertexColors::bBlendSplitVertexValues' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshVertexColorFunctions_GetMeshPerVertexColors, ReturnValue) == 0x000020, "Member 'GeometryScriptLibrary_MeshVertexColorFunctions_GetMeshPerVertexColors::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshVertexColorFunctions.SetMeshConstantVertexColor
// 0x0030 (0x0030 - 0x0000)
struct GeometryScriptLibrary_MeshVertexColorFunctions_SetMeshConstantVertexColor final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptColorFlags              Flags_0;                                           // 0x0018(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bClearExisting;                                    // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshVertexColorFunctions_SetMeshConstantVertexColor) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshVertexColorFunctions_SetMeshConstantVertexColor");
static_assert(sizeof(GeometryScriptLibrary_MeshVertexColorFunctions_SetMeshConstantVertexColor) == 0x000030, "Wrong size on GeometryScriptLibrary_MeshVertexColorFunctions_SetMeshConstantVertexColor");
static_assert(offsetof(GeometryScriptLibrary_MeshVertexColorFunctions_SetMeshConstantVertexColor, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshVertexColorFunctions_SetMeshConstantVertexColor::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshVertexColorFunctions_SetMeshConstantVertexColor, Color) == 0x000008, "Member 'GeometryScriptLibrary_MeshVertexColorFunctions_SetMeshConstantVertexColor::Color' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshVertexColorFunctions_SetMeshConstantVertexColor, Flags_0) == 0x000018, "Member 'GeometryScriptLibrary_MeshVertexColorFunctions_SetMeshConstantVertexColor::Flags_0' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshVertexColorFunctions_SetMeshConstantVertexColor, bClearExisting) == 0x00001C, "Member 'GeometryScriptLibrary_MeshVertexColorFunctions_SetMeshConstantVertexColor::bClearExisting' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshVertexColorFunctions_SetMeshConstantVertexColor, Debug) == 0x000020, "Member 'GeometryScriptLibrary_MeshVertexColorFunctions_SetMeshConstantVertexColor::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshVertexColorFunctions_SetMeshConstantVertexColor, ReturnValue) == 0x000028, "Member 'GeometryScriptLibrary_MeshVertexColorFunctions_SetMeshConstantVertexColor::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshVertexColorFunctions.SetMeshPerVertexColors
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_MeshVertexColorFunctions_SetMeshPerVertexColors final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptColorList               VertexColorList;                                   // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshVertexColorFunctions_SetMeshPerVertexColors) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshVertexColorFunctions_SetMeshPerVertexColors");
static_assert(sizeof(GeometryScriptLibrary_MeshVertexColorFunctions_SetMeshPerVertexColors) == 0x000028, "Wrong size on GeometryScriptLibrary_MeshVertexColorFunctions_SetMeshPerVertexColors");
static_assert(offsetof(GeometryScriptLibrary_MeshVertexColorFunctions_SetMeshPerVertexColors, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshVertexColorFunctions_SetMeshPerVertexColors::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshVertexColorFunctions_SetMeshPerVertexColors, VertexColorList) == 0x000008, "Member 'GeometryScriptLibrary_MeshVertexColorFunctions_SetMeshPerVertexColors::VertexColorList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshVertexColorFunctions_SetMeshPerVertexColors, Debug) == 0x000018, "Member 'GeometryScriptLibrary_MeshVertexColorFunctions_SetMeshPerVertexColors::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshVertexColorFunctions_SetMeshPerVertexColors, ReturnValue) == 0x000020, "Member 'GeometryScriptLibrary_MeshVertexColorFunctions_SetMeshPerVertexColors::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshVertexColorFunctions.SetMeshSelectionVertexColor
// 0x0040 (0x0040 - 0x0000)
struct GeometryScriptLibrary_MeshVertexColorFunctions_SetMeshSelectionVertexColor final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMeshSelection           Selection;                                         // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0018(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptColorFlags              Flags_0;                                           // 0x0028(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bCreateColorSeam;                                  // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshVertexColorFunctions_SetMeshSelectionVertexColor) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshVertexColorFunctions_SetMeshSelectionVertexColor");
static_assert(sizeof(GeometryScriptLibrary_MeshVertexColorFunctions_SetMeshSelectionVertexColor) == 0x000040, "Wrong size on GeometryScriptLibrary_MeshVertexColorFunctions_SetMeshSelectionVertexColor");
static_assert(offsetof(GeometryScriptLibrary_MeshVertexColorFunctions_SetMeshSelectionVertexColor, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshVertexColorFunctions_SetMeshSelectionVertexColor::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshVertexColorFunctions_SetMeshSelectionVertexColor, Selection) == 0x000008, "Member 'GeometryScriptLibrary_MeshVertexColorFunctions_SetMeshSelectionVertexColor::Selection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshVertexColorFunctions_SetMeshSelectionVertexColor, Color) == 0x000018, "Member 'GeometryScriptLibrary_MeshVertexColorFunctions_SetMeshSelectionVertexColor::Color' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshVertexColorFunctions_SetMeshSelectionVertexColor, Flags_0) == 0x000028, "Member 'GeometryScriptLibrary_MeshVertexColorFunctions_SetMeshSelectionVertexColor::Flags_0' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshVertexColorFunctions_SetMeshSelectionVertexColor, bCreateColorSeam) == 0x00002C, "Member 'GeometryScriptLibrary_MeshVertexColorFunctions_SetMeshSelectionVertexColor::bCreateColorSeam' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshVertexColorFunctions_SetMeshSelectionVertexColor, Debug) == 0x000030, "Member 'GeometryScriptLibrary_MeshVertexColorFunctions_SetMeshSelectionVertexColor::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshVertexColorFunctions_SetMeshSelectionVertexColor, ReturnValue) == 0x000038, "Member 'GeometryScriptLibrary_MeshVertexColorFunctions_SetMeshSelectionVertexColor::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshVoxelFunctions.ApplyMeshMorphology
// 0x0040 (0x0040 - 0x0000)
struct GeometryScriptLibrary_MeshVoxelFunctions_ApplyMeshMorphology final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptMorphologyOptions       Options;                                           // 0x0008(0x0024)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshVoxelFunctions_ApplyMeshMorphology) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshVoxelFunctions_ApplyMeshMorphology");
static_assert(sizeof(GeometryScriptLibrary_MeshVoxelFunctions_ApplyMeshMorphology) == 0x000040, "Wrong size on GeometryScriptLibrary_MeshVoxelFunctions_ApplyMeshMorphology");
static_assert(offsetof(GeometryScriptLibrary_MeshVoxelFunctions_ApplyMeshMorphology, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshVoxelFunctions_ApplyMeshMorphology::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshVoxelFunctions_ApplyMeshMorphology, Options) == 0x000008, "Member 'GeometryScriptLibrary_MeshVoxelFunctions_ApplyMeshMorphology::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshVoxelFunctions_ApplyMeshMorphology, Debug) == 0x000030, "Member 'GeometryScriptLibrary_MeshVoxelFunctions_ApplyMeshMorphology::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshVoxelFunctions_ApplyMeshMorphology, ReturnValue) == 0x000038, "Member 'GeometryScriptLibrary_MeshVoxelFunctions_ApplyMeshMorphology::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_MeshVoxelFunctions.ApplyMeshSolidify
// 0x0040 (0x0040 - 0x0000)
struct GeometryScriptLibrary_MeshVoxelFunctions_ApplyMeshSolidify final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptSolidifyOptions         Options;                                           // 0x0008(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_MeshVoxelFunctions_ApplyMeshSolidify) == 0x000008, "Wrong alignment on GeometryScriptLibrary_MeshVoxelFunctions_ApplyMeshSolidify");
static_assert(sizeof(GeometryScriptLibrary_MeshVoxelFunctions_ApplyMeshSolidify) == 0x000040, "Wrong size on GeometryScriptLibrary_MeshVoxelFunctions_ApplyMeshSolidify");
static_assert(offsetof(GeometryScriptLibrary_MeshVoxelFunctions_ApplyMeshSolidify, TargetMesh) == 0x000000, "Member 'GeometryScriptLibrary_MeshVoxelFunctions_ApplyMeshSolidify::TargetMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshVoxelFunctions_ApplyMeshSolidify, Options) == 0x000008, "Member 'GeometryScriptLibrary_MeshVoxelFunctions_ApplyMeshSolidify::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshVoxelFunctions_ApplyMeshSolidify, Debug) == 0x000030, "Member 'GeometryScriptLibrary_MeshVoxelFunctions_ApplyMeshSolidify::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_MeshVoxelFunctions_ApplyMeshSolidify, ReturnValue) == 0x000038, "Member 'GeometryScriptLibrary_MeshVoxelFunctions_ApplyMeshSolidify::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PointSetSamplingFunctions.DownsamplePoints
// 0x0050 (0x0050 - 0x0000)
struct GeometryScriptLibrary_PointSetSamplingFunctions_DownsamplePoints final
{
public:
	TArray<struct FVector>                        Points;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometryScriptPointPriorityOptions    Options;                                           // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometryScriptIndexList               DownsampledIndices;                                // 0x0028(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	int32                                         KeepNumPoints;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0048(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_PointSetSamplingFunctions_DownsamplePoints) == 0x000008, "Wrong alignment on GeometryScriptLibrary_PointSetSamplingFunctions_DownsamplePoints");
static_assert(sizeof(GeometryScriptLibrary_PointSetSamplingFunctions_DownsamplePoints) == 0x000050, "Wrong size on GeometryScriptLibrary_PointSetSamplingFunctions_DownsamplePoints");
static_assert(offsetof(GeometryScriptLibrary_PointSetSamplingFunctions_DownsamplePoints, Points) == 0x000000, "Member 'GeometryScriptLibrary_PointSetSamplingFunctions_DownsamplePoints::Points' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PointSetSamplingFunctions_DownsamplePoints, Options) == 0x000010, "Member 'GeometryScriptLibrary_PointSetSamplingFunctions_DownsamplePoints::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PointSetSamplingFunctions_DownsamplePoints, DownsampledIndices) == 0x000028, "Member 'GeometryScriptLibrary_PointSetSamplingFunctions_DownsamplePoints::DownsampledIndices' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PointSetSamplingFunctions_DownsamplePoints, KeepNumPoints) == 0x000040, "Member 'GeometryScriptLibrary_PointSetSamplingFunctions_DownsamplePoints::KeepNumPoints' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PointSetSamplingFunctions_DownsamplePoints, Debug) == 0x000048, "Member 'GeometryScriptLibrary_PointSetSamplingFunctions_DownsamplePoints::Debug' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PointSetSamplingFunctions.FlattenPoints
// 0x0090 (0x0090 - 0x0000)
struct GeometryScriptLibrary_PointSetSamplingFunctions_FlattenPoints final
{
public:
	TArray<struct FVector>                        PointsIn3D;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      PointsIn2D;                                        // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGeometryScriptPointFlatteningOptions  Options;                                           // 0x0020(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_PointSetSamplingFunctions_FlattenPoints) == 0x000010, "Wrong alignment on GeometryScriptLibrary_PointSetSamplingFunctions_FlattenPoints");
static_assert(sizeof(GeometryScriptLibrary_PointSetSamplingFunctions_FlattenPoints) == 0x000090, "Wrong size on GeometryScriptLibrary_PointSetSamplingFunctions_FlattenPoints");
static_assert(offsetof(GeometryScriptLibrary_PointSetSamplingFunctions_FlattenPoints, PointsIn3D) == 0x000000, "Member 'GeometryScriptLibrary_PointSetSamplingFunctions_FlattenPoints::PointsIn3D' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PointSetSamplingFunctions_FlattenPoints, PointsIn2D) == 0x000010, "Member 'GeometryScriptLibrary_PointSetSamplingFunctions_FlattenPoints::PointsIn2D' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PointSetSamplingFunctions_FlattenPoints, Options) == 0x000020, "Member 'GeometryScriptLibrary_PointSetSamplingFunctions_FlattenPoints::Options' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PointSetSamplingFunctions.GetPointsFromIndexList
// 0x0038 (0x0038 - 0x0000)
struct GeometryScriptLibrary_PointSetSamplingFunctions_GetPointsFromIndexList final
{
public:
	TArray<struct FVector>                        AllPoints;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometryScriptIndexList               Indices;                                           // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        SelectedPoints;                                    // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_PointSetSamplingFunctions_GetPointsFromIndexList) == 0x000008, "Wrong alignment on GeometryScriptLibrary_PointSetSamplingFunctions_GetPointsFromIndexList");
static_assert(sizeof(GeometryScriptLibrary_PointSetSamplingFunctions_GetPointsFromIndexList) == 0x000038, "Wrong size on GeometryScriptLibrary_PointSetSamplingFunctions_GetPointsFromIndexList");
static_assert(offsetof(GeometryScriptLibrary_PointSetSamplingFunctions_GetPointsFromIndexList, AllPoints) == 0x000000, "Member 'GeometryScriptLibrary_PointSetSamplingFunctions_GetPointsFromIndexList::AllPoints' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PointSetSamplingFunctions_GetPointsFromIndexList, Indices) == 0x000010, "Member 'GeometryScriptLibrary_PointSetSamplingFunctions_GetPointsFromIndexList::Indices' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PointSetSamplingFunctions_GetPointsFromIndexList, SelectedPoints) == 0x000028, "Member 'GeometryScriptLibrary_PointSetSamplingFunctions_GetPointsFromIndexList::SelectedPoints' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PointSetSamplingFunctions.KMeansClusterToArrays
// 0x0040 (0x0040 - 0x0000)
struct GeometryScriptLibrary_PointSetSamplingFunctions_KMeansClusterToArrays final
{
public:
	TArray<struct FVector>                        Points;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometryScriptPointClusteringOptions  Options;                                           // 0x0010(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FGeometryScriptIndexList>       ClusterIDToLists;                                  // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_PointSetSamplingFunctions_KMeansClusterToArrays) == 0x000008, "Wrong alignment on GeometryScriptLibrary_PointSetSamplingFunctions_KMeansClusterToArrays");
static_assert(sizeof(GeometryScriptLibrary_PointSetSamplingFunctions_KMeansClusterToArrays) == 0x000040, "Wrong size on GeometryScriptLibrary_PointSetSamplingFunctions_KMeansClusterToArrays");
static_assert(offsetof(GeometryScriptLibrary_PointSetSamplingFunctions_KMeansClusterToArrays, Points) == 0x000000, "Member 'GeometryScriptLibrary_PointSetSamplingFunctions_KMeansClusterToArrays::Points' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PointSetSamplingFunctions_KMeansClusterToArrays, Options) == 0x000010, "Member 'GeometryScriptLibrary_PointSetSamplingFunctions_KMeansClusterToArrays::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PointSetSamplingFunctions_KMeansClusterToArrays, ClusterIDToLists) == 0x000030, "Member 'GeometryScriptLibrary_PointSetSamplingFunctions_KMeansClusterToArrays::ClusterIDToLists' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PointSetSamplingFunctions.KMeansClusterToIDs
// 0x0040 (0x0040 - 0x0000)
struct GeometryScriptLibrary_PointSetSamplingFunctions_KMeansClusterToIDs final
{
public:
	TArray<struct FVector>                        Points;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometryScriptPointClusteringOptions  Options;                                           // 0x0010(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 PointClusterIndices;                               // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_PointSetSamplingFunctions_KMeansClusterToIDs) == 0x000008, "Wrong alignment on GeometryScriptLibrary_PointSetSamplingFunctions_KMeansClusterToIDs");
static_assert(sizeof(GeometryScriptLibrary_PointSetSamplingFunctions_KMeansClusterToIDs) == 0x000040, "Wrong size on GeometryScriptLibrary_PointSetSamplingFunctions_KMeansClusterToIDs");
static_assert(offsetof(GeometryScriptLibrary_PointSetSamplingFunctions_KMeansClusterToIDs, Points) == 0x000000, "Member 'GeometryScriptLibrary_PointSetSamplingFunctions_KMeansClusterToIDs::Points' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PointSetSamplingFunctions_KMeansClusterToIDs, Options) == 0x000010, "Member 'GeometryScriptLibrary_PointSetSamplingFunctions_KMeansClusterToIDs::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PointSetSamplingFunctions_KMeansClusterToIDs, PointClusterIndices) == 0x000030, "Member 'GeometryScriptLibrary_PointSetSamplingFunctions_KMeansClusterToIDs::PointClusterIndices' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PointSetSamplingFunctions.MakeBoundingBoxFromPoints
// 0x0050 (0x0050 - 0x0000)
struct GeometryScriptLibrary_PointSetSamplingFunctions_MakeBoundingBoxFromPoints final
{
public:
	TArray<struct FVector>                        Points;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	double                                        ExpandBy;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   ReturnValue;                                       // 0x0018(0x0038)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_PointSetSamplingFunctions_MakeBoundingBoxFromPoints) == 0x000008, "Wrong alignment on GeometryScriptLibrary_PointSetSamplingFunctions_MakeBoundingBoxFromPoints");
static_assert(sizeof(GeometryScriptLibrary_PointSetSamplingFunctions_MakeBoundingBoxFromPoints) == 0x000050, "Wrong size on GeometryScriptLibrary_PointSetSamplingFunctions_MakeBoundingBoxFromPoints");
static_assert(offsetof(GeometryScriptLibrary_PointSetSamplingFunctions_MakeBoundingBoxFromPoints, Points) == 0x000000, "Member 'GeometryScriptLibrary_PointSetSamplingFunctions_MakeBoundingBoxFromPoints::Points' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PointSetSamplingFunctions_MakeBoundingBoxFromPoints, ExpandBy) == 0x000010, "Member 'GeometryScriptLibrary_PointSetSamplingFunctions_MakeBoundingBoxFromPoints::ExpandBy' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PointSetSamplingFunctions_MakeBoundingBoxFromPoints, ReturnValue) == 0x000018, "Member 'GeometryScriptLibrary_PointSetSamplingFunctions_MakeBoundingBoxFromPoints::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PointSetSamplingFunctions.OffsetTransforms
// 0x0038 (0x0038 - 0x0000)
struct GeometryScriptLibrary_PointSetSamplingFunctions_OffsetTransforms final
{
public:
	TArray<struct FTransform>                     Transforms;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	double                                        Offset;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptCoordinateSpace                Space;                                             // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_PointSetSamplingFunctions_OffsetTransforms) == 0x000008, "Wrong alignment on GeometryScriptLibrary_PointSetSamplingFunctions_OffsetTransforms");
static_assert(sizeof(GeometryScriptLibrary_PointSetSamplingFunctions_OffsetTransforms) == 0x000038, "Wrong size on GeometryScriptLibrary_PointSetSamplingFunctions_OffsetTransforms");
static_assert(offsetof(GeometryScriptLibrary_PointSetSamplingFunctions_OffsetTransforms, Transforms) == 0x000000, "Member 'GeometryScriptLibrary_PointSetSamplingFunctions_OffsetTransforms::Transforms' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PointSetSamplingFunctions_OffsetTransforms, Offset) == 0x000010, "Member 'GeometryScriptLibrary_PointSetSamplingFunctions_OffsetTransforms::Offset' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PointSetSamplingFunctions_OffsetTransforms, Direction) == 0x000018, "Member 'GeometryScriptLibrary_PointSetSamplingFunctions_OffsetTransforms::Direction' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PointSetSamplingFunctions_OffsetTransforms, Space) == 0x000030, "Member 'GeometryScriptLibrary_PointSetSamplingFunctions_OffsetTransforms::Space' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PointSetSamplingFunctions.TransformsToPoints
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_PointSetSamplingFunctions_TransformsToPoints final
{
public:
	TArray<struct FTransform>                     Transforms;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        Points;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_PointSetSamplingFunctions_TransformsToPoints) == 0x000008, "Wrong alignment on GeometryScriptLibrary_PointSetSamplingFunctions_TransformsToPoints");
static_assert(sizeof(GeometryScriptLibrary_PointSetSamplingFunctions_TransformsToPoints) == 0x000020, "Wrong size on GeometryScriptLibrary_PointSetSamplingFunctions_TransformsToPoints");
static_assert(offsetof(GeometryScriptLibrary_PointSetSamplingFunctions_TransformsToPoints, Transforms) == 0x000000, "Member 'GeometryScriptLibrary_PointSetSamplingFunctions_TransformsToPoints::Transforms' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PointSetSamplingFunctions_TransformsToPoints, Points) == 0x000010, "Member 'GeometryScriptLibrary_PointSetSamplingFunctions_TransformsToPoints::Points' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PointSetSamplingFunctions.UnflattenPoints
// 0x00A0 (0x00A0 - 0x0000)
struct GeometryScriptLibrary_PointSetSamplingFunctions_UnflattenPoints final
{
public:
	TArray<struct FVector2D>                      PointsIn2D;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        PointsIn3D;                                        // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGeometryScriptPointFlatteningOptions  Options;                                           // 0x0020(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	double                                        Height;                                            // 0x0090(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_PointSetSamplingFunctions_UnflattenPoints) == 0x000010, "Wrong alignment on GeometryScriptLibrary_PointSetSamplingFunctions_UnflattenPoints");
static_assert(sizeof(GeometryScriptLibrary_PointSetSamplingFunctions_UnflattenPoints) == 0x0000A0, "Wrong size on GeometryScriptLibrary_PointSetSamplingFunctions_UnflattenPoints");
static_assert(offsetof(GeometryScriptLibrary_PointSetSamplingFunctions_UnflattenPoints, PointsIn2D) == 0x000000, "Member 'GeometryScriptLibrary_PointSetSamplingFunctions_UnflattenPoints::PointsIn2D' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PointSetSamplingFunctions_UnflattenPoints, PointsIn3D) == 0x000010, "Member 'GeometryScriptLibrary_PointSetSamplingFunctions_UnflattenPoints::PointsIn3D' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PointSetSamplingFunctions_UnflattenPoints, Options) == 0x000020, "Member 'GeometryScriptLibrary_PointSetSamplingFunctions_UnflattenPoints::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PointSetSamplingFunctions_UnflattenPoints, Height) == 0x000090, "Member 'GeometryScriptLibrary_PointSetSamplingFunctions_UnflattenPoints::Height' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_SimplePolygonFunctions.AddPolygonVertex
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_SimplePolygonFunctions_AddPolygonVertex final
{
public:
	struct FGeometryScriptSimplePolygon           Polygon;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector2D                              Position;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_SimplePolygonFunctions_AddPolygonVertex) == 0x000008, "Wrong alignment on GeometryScriptLibrary_SimplePolygonFunctions_AddPolygonVertex");
static_assert(sizeof(GeometryScriptLibrary_SimplePolygonFunctions_AddPolygonVertex) == 0x000028, "Wrong size on GeometryScriptLibrary_SimplePolygonFunctions_AddPolygonVertex");
static_assert(offsetof(GeometryScriptLibrary_SimplePolygonFunctions_AddPolygonVertex, Polygon) == 0x000000, "Member 'GeometryScriptLibrary_SimplePolygonFunctions_AddPolygonVertex::Polygon' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_SimplePolygonFunctions_AddPolygonVertex, Position) == 0x000010, "Member 'GeometryScriptLibrary_SimplePolygonFunctions_AddPolygonVertex::Position' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_SimplePolygonFunctions_AddPolygonVertex, ReturnValue) == 0x000020, "Member 'GeometryScriptLibrary_SimplePolygonFunctions_AddPolygonVertex::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_SimplePolygonFunctions.Conv_ArrayOfVector2DToGeometryScriptSimplePolygon
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_SimplePolygonFunctions_Conv_ArrayOfVector2DToGeometryScriptSimplePolygon final
{
public:
	TArray<struct FVector2D>                      PathVertices;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometryScriptSimplePolygon           ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_SimplePolygonFunctions_Conv_ArrayOfVector2DToGeometryScriptSimplePolygon) == 0x000008, "Wrong alignment on GeometryScriptLibrary_SimplePolygonFunctions_Conv_ArrayOfVector2DToGeometryScriptSimplePolygon");
static_assert(sizeof(GeometryScriptLibrary_SimplePolygonFunctions_Conv_ArrayOfVector2DToGeometryScriptSimplePolygon) == 0x000020, "Wrong size on GeometryScriptLibrary_SimplePolygonFunctions_Conv_ArrayOfVector2DToGeometryScriptSimplePolygon");
static_assert(offsetof(GeometryScriptLibrary_SimplePolygonFunctions_Conv_ArrayOfVector2DToGeometryScriptSimplePolygon, PathVertices) == 0x000000, "Member 'GeometryScriptLibrary_SimplePolygonFunctions_Conv_ArrayOfVector2DToGeometryScriptSimplePolygon::PathVertices' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_SimplePolygonFunctions_Conv_ArrayOfVector2DToGeometryScriptSimplePolygon, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_SimplePolygonFunctions_Conv_ArrayOfVector2DToGeometryScriptSimplePolygon::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_SimplePolygonFunctions.Conv_ArrayToGeometryScriptSimplePolygon
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_SimplePolygonFunctions_Conv_ArrayToGeometryScriptSimplePolygon final
{
public:
	TArray<struct FVector>                        PathVertices;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometryScriptSimplePolygon           ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_SimplePolygonFunctions_Conv_ArrayToGeometryScriptSimplePolygon) == 0x000008, "Wrong alignment on GeometryScriptLibrary_SimplePolygonFunctions_Conv_ArrayToGeometryScriptSimplePolygon");
static_assert(sizeof(GeometryScriptLibrary_SimplePolygonFunctions_Conv_ArrayToGeometryScriptSimplePolygon) == 0x000020, "Wrong size on GeometryScriptLibrary_SimplePolygonFunctions_Conv_ArrayToGeometryScriptSimplePolygon");
static_assert(offsetof(GeometryScriptLibrary_SimplePolygonFunctions_Conv_ArrayToGeometryScriptSimplePolygon, PathVertices) == 0x000000, "Member 'GeometryScriptLibrary_SimplePolygonFunctions_Conv_ArrayToGeometryScriptSimplePolygon::PathVertices' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_SimplePolygonFunctions_Conv_ArrayToGeometryScriptSimplePolygon, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_SimplePolygonFunctions_Conv_ArrayToGeometryScriptSimplePolygon::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_SimplePolygonFunctions.Conv_GeometryScriptSimplePolygonToArray
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_SimplePolygonFunctions_Conv_GeometryScriptSimplePolygonToArray final
{
public:
	struct FGeometryScriptSimplePolygon           Polygon;                                           // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_SimplePolygonFunctions_Conv_GeometryScriptSimplePolygonToArray) == 0x000008, "Wrong alignment on GeometryScriptLibrary_SimplePolygonFunctions_Conv_GeometryScriptSimplePolygonToArray");
static_assert(sizeof(GeometryScriptLibrary_SimplePolygonFunctions_Conv_GeometryScriptSimplePolygonToArray) == 0x000020, "Wrong size on GeometryScriptLibrary_SimplePolygonFunctions_Conv_GeometryScriptSimplePolygonToArray");
static_assert(offsetof(GeometryScriptLibrary_SimplePolygonFunctions_Conv_GeometryScriptSimplePolygonToArray, Polygon) == 0x000000, "Member 'GeometryScriptLibrary_SimplePolygonFunctions_Conv_GeometryScriptSimplePolygonToArray::Polygon' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_SimplePolygonFunctions_Conv_GeometryScriptSimplePolygonToArray, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_SimplePolygonFunctions_Conv_GeometryScriptSimplePolygonToArray::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_SimplePolygonFunctions.Conv_GeometryScriptSimplePolygonToArrayOfVector2D
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_SimplePolygonFunctions_Conv_GeometryScriptSimplePolygonToArrayOfVector2D final
{
public:
	struct FGeometryScriptSimplePolygon           Polygon;                                           // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_SimplePolygonFunctions_Conv_GeometryScriptSimplePolygonToArrayOfVector2D) == 0x000008, "Wrong alignment on GeometryScriptLibrary_SimplePolygonFunctions_Conv_GeometryScriptSimplePolygonToArrayOfVector2D");
static_assert(sizeof(GeometryScriptLibrary_SimplePolygonFunctions_Conv_GeometryScriptSimplePolygonToArrayOfVector2D) == 0x000020, "Wrong size on GeometryScriptLibrary_SimplePolygonFunctions_Conv_GeometryScriptSimplePolygonToArrayOfVector2D");
static_assert(offsetof(GeometryScriptLibrary_SimplePolygonFunctions_Conv_GeometryScriptSimplePolygonToArrayOfVector2D, Polygon) == 0x000000, "Member 'GeometryScriptLibrary_SimplePolygonFunctions_Conv_GeometryScriptSimplePolygonToArrayOfVector2D::Polygon' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_SimplePolygonFunctions_Conv_GeometryScriptSimplePolygonToArrayOfVector2D, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_SimplePolygonFunctions_Conv_GeometryScriptSimplePolygonToArrayOfVector2D::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_SimplePolygonFunctions.ConvertSplineToPolygon
// 0x0030 (0x0030 - 0x0000)
struct GeometryScriptLibrary_SimplePolygonFunctions_ConvertSplineToPolygon final
{
public:
	const class USplineComponent*                 Spline;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptSimplePolygon           Polygon;                                           // 0x0008(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FGeometryScriptSplineSamplingOptions   SamplingOptions;                                   // 0x0018(0x0014)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EGeometryScriptAxis                           DropAxis;                                          // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_SimplePolygonFunctions_ConvertSplineToPolygon) == 0x000008, "Wrong alignment on GeometryScriptLibrary_SimplePolygonFunctions_ConvertSplineToPolygon");
static_assert(sizeof(GeometryScriptLibrary_SimplePolygonFunctions_ConvertSplineToPolygon) == 0x000030, "Wrong size on GeometryScriptLibrary_SimplePolygonFunctions_ConvertSplineToPolygon");
static_assert(offsetof(GeometryScriptLibrary_SimplePolygonFunctions_ConvertSplineToPolygon, Spline) == 0x000000, "Member 'GeometryScriptLibrary_SimplePolygonFunctions_ConvertSplineToPolygon::Spline' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_SimplePolygonFunctions_ConvertSplineToPolygon, Polygon) == 0x000008, "Member 'GeometryScriptLibrary_SimplePolygonFunctions_ConvertSplineToPolygon::Polygon' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_SimplePolygonFunctions_ConvertSplineToPolygon, SamplingOptions) == 0x000018, "Member 'GeometryScriptLibrary_SimplePolygonFunctions_ConvertSplineToPolygon::SamplingOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_SimplePolygonFunctions_ConvertSplineToPolygon, DropAxis) == 0x00002C, "Member 'GeometryScriptLibrary_SimplePolygonFunctions_ConvertSplineToPolygon::DropAxis' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_SimplePolygonFunctions.GetPolygonArcLength
// 0x0018 (0x0018 - 0x0000)
struct GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonArcLength final
{
public:
	struct FGeometryScriptSimplePolygon           Polygon;                                           // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonArcLength) == 0x000008, "Wrong alignment on GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonArcLength");
static_assert(sizeof(GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonArcLength) == 0x000018, "Wrong size on GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonArcLength");
static_assert(offsetof(GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonArcLength, Polygon) == 0x000000, "Member 'GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonArcLength::Polygon' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonArcLength, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonArcLength::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_SimplePolygonFunctions.GetPolygonArea
// 0x0018 (0x0018 - 0x0000)
struct GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonArea final
{
public:
	struct FGeometryScriptSimplePolygon           Polygon;                                           // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonArea) == 0x000008, "Wrong alignment on GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonArea");
static_assert(sizeof(GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonArea) == 0x000018, "Wrong size on GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonArea");
static_assert(offsetof(GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonArea, Polygon) == 0x000000, "Member 'GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonArea::Polygon' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonArea, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonArea::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_SimplePolygonFunctions.GetPolygonBounds
// 0x0038 (0x0038 - 0x0000)
struct GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonBounds final
{
public:
	struct FGeometryScriptSimplePolygon           Polygon;                                           // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FBox2D                                 ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonBounds) == 0x000008, "Wrong alignment on GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonBounds");
static_assert(sizeof(GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonBounds) == 0x000038, "Wrong size on GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonBounds");
static_assert(offsetof(GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonBounds, Polygon) == 0x000000, "Member 'GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonBounds::Polygon' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonBounds, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonBounds::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_SimplePolygonFunctions.GetPolygonTangent
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonTangent final
{
public:
	struct FGeometryScriptSimplePolygon           Polygon;                                           // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	int32                                         VertexIndex;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPolygonIsEmpty;                                   // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonTangent) == 0x000008, "Wrong alignment on GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonTangent");
static_assert(sizeof(GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonTangent) == 0x000028, "Wrong size on GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonTangent");
static_assert(offsetof(GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonTangent, Polygon) == 0x000000, "Member 'GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonTangent::Polygon' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonTangent, VertexIndex) == 0x000010, "Member 'GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonTangent::VertexIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonTangent, bPolygonIsEmpty) == 0x000014, "Member 'GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonTangent::bPolygonIsEmpty' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonTangent, ReturnValue) == 0x000018, "Member 'GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonTangent::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_SimplePolygonFunctions.GetPolygonVertex
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonVertex final
{
public:
	struct FGeometryScriptSimplePolygon           Polygon;                                           // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	int32                                         VertexIndex;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPolygonIsEmpty;                                   // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonVertex) == 0x000008, "Wrong alignment on GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonVertex");
static_assert(sizeof(GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonVertex) == 0x000028, "Wrong size on GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonVertex");
static_assert(offsetof(GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonVertex, Polygon) == 0x000000, "Member 'GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonVertex::Polygon' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonVertex, VertexIndex) == 0x000010, "Member 'GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonVertex::VertexIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonVertex, bPolygonIsEmpty) == 0x000014, "Member 'GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonVertex::bPolygonIsEmpty' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonVertex, ReturnValue) == 0x000018, "Member 'GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonVertex::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_SimplePolygonFunctions.GetPolygonVertexCount
// 0x0018 (0x0018 - 0x0000)
struct GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonVertexCount final
{
public:
	struct FGeometryScriptSimplePolygon           Polygon;                                           // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonVertexCount) == 0x000008, "Wrong alignment on GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonVertexCount");
static_assert(sizeof(GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonVertexCount) == 0x000018, "Wrong size on GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonVertexCount");
static_assert(offsetof(GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonVertexCount, Polygon) == 0x000000, "Member 'GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonVertexCount::Polygon' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonVertexCount, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_SimplePolygonFunctions_GetPolygonVertexCount::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_SimplePolygonFunctions.SetPolygonVertex
// 0x0030 (0x0030 - 0x0000)
struct GeometryScriptLibrary_SimplePolygonFunctions_SetPolygonVertex final
{
public:
	struct FGeometryScriptSimplePolygon           Polygon;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         VertexIndex;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Position;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPolygonIsEmpty;                                   // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_SimplePolygonFunctions_SetPolygonVertex) == 0x000008, "Wrong alignment on GeometryScriptLibrary_SimplePolygonFunctions_SetPolygonVertex");
static_assert(sizeof(GeometryScriptLibrary_SimplePolygonFunctions_SetPolygonVertex) == 0x000030, "Wrong size on GeometryScriptLibrary_SimplePolygonFunctions_SetPolygonVertex");
static_assert(offsetof(GeometryScriptLibrary_SimplePolygonFunctions_SetPolygonVertex, Polygon) == 0x000000, "Member 'GeometryScriptLibrary_SimplePolygonFunctions_SetPolygonVertex::Polygon' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_SimplePolygonFunctions_SetPolygonVertex, VertexIndex) == 0x000010, "Member 'GeometryScriptLibrary_SimplePolygonFunctions_SetPolygonVertex::VertexIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_SimplePolygonFunctions_SetPolygonVertex, Position) == 0x000018, "Member 'GeometryScriptLibrary_SimplePolygonFunctions_SetPolygonVertex::Position' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_SimplePolygonFunctions_SetPolygonVertex, bPolygonIsEmpty) == 0x000028, "Member 'GeometryScriptLibrary_SimplePolygonFunctions_SetPolygonVertex::bPolygonIsEmpty' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PolygonListFunctions.AddPolygonToList
// 0x0038 (0x0038 - 0x0000)
struct GeometryScriptLibrary_PolygonListFunctions_AddPolygonToList final
{
public:
	struct FGeometryScriptGeneralPolygonList      PolygonList;                                       // 0x0000(0x0010)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometryScriptSimplePolygon           OuterPolygon;                                      // 0x0010(0x0010)(Parm, NativeAccessSpecifierPublic)
	TArray<struct FGeometryScriptSimplePolygon>   HolePolygons;                                      // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bFixHoleOrientations;                              // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0034(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_PolygonListFunctions_AddPolygonToList) == 0x000008, "Wrong alignment on GeometryScriptLibrary_PolygonListFunctions_AddPolygonToList");
static_assert(sizeof(GeometryScriptLibrary_PolygonListFunctions_AddPolygonToList) == 0x000038, "Wrong size on GeometryScriptLibrary_PolygonListFunctions_AddPolygonToList");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_AddPolygonToList, PolygonList) == 0x000000, "Member 'GeometryScriptLibrary_PolygonListFunctions_AddPolygonToList::PolygonList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_AddPolygonToList, OuterPolygon) == 0x000010, "Member 'GeometryScriptLibrary_PolygonListFunctions_AddPolygonToList::OuterPolygon' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_AddPolygonToList, HolePolygons) == 0x000020, "Member 'GeometryScriptLibrary_PolygonListFunctions_AddPolygonToList::HolePolygons' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_AddPolygonToList, bFixHoleOrientations) == 0x000030, "Member 'GeometryScriptLibrary_PolygonListFunctions_AddPolygonToList::bFixHoleOrientations' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_AddPolygonToList, ReturnValue) == 0x000034, "Member 'GeometryScriptLibrary_PolygonListFunctions_AddPolygonToList::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PolygonListFunctions.AppendPolygonList
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_PolygonListFunctions_AppendPolygonList final
{
public:
	struct FGeometryScriptGeneralPolygonList      PolygonList;                                       // 0x0000(0x0010)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometryScriptGeneralPolygonList      PolygonsToAppend;                                  // 0x0010(0x0010)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_PolygonListFunctions_AppendPolygonList) == 0x000008, "Wrong alignment on GeometryScriptLibrary_PolygonListFunctions_AppendPolygonList");
static_assert(sizeof(GeometryScriptLibrary_PolygonListFunctions_AppendPolygonList) == 0x000020, "Wrong size on GeometryScriptLibrary_PolygonListFunctions_AppendPolygonList");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_AppendPolygonList, PolygonList) == 0x000000, "Member 'GeometryScriptLibrary_PolygonListFunctions_AppendPolygonList::PolygonList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_AppendPolygonList, PolygonsToAppend) == 0x000010, "Member 'GeometryScriptLibrary_PolygonListFunctions_AppendPolygonList::PolygonsToAppend' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PolygonListFunctions.CreatePolygonListFromSimplePolygons
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_PolygonListFunctions_CreatePolygonListFromSimplePolygons final
{
public:
	TArray<struct FGeometryScriptSimplePolygon>   OuterPolygons;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometryScriptGeneralPolygonList      ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_PolygonListFunctions_CreatePolygonListFromSimplePolygons) == 0x000008, "Wrong alignment on GeometryScriptLibrary_PolygonListFunctions_CreatePolygonListFromSimplePolygons");
static_assert(sizeof(GeometryScriptLibrary_PolygonListFunctions_CreatePolygonListFromSimplePolygons) == 0x000020, "Wrong size on GeometryScriptLibrary_PolygonListFunctions_CreatePolygonListFromSimplePolygons");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_CreatePolygonListFromSimplePolygons, OuterPolygons) == 0x000000, "Member 'GeometryScriptLibrary_PolygonListFunctions_CreatePolygonListFromSimplePolygons::OuterPolygons' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_CreatePolygonListFromSimplePolygons, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_PolygonListFunctions_CreatePolygonListFromSimplePolygons::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PolygonListFunctions.CreatePolygonListFromSinglePolygon
// 0x0038 (0x0038 - 0x0000)
struct GeometryScriptLibrary_PolygonListFunctions_CreatePolygonListFromSinglePolygon final
{
public:
	struct FGeometryScriptSimplePolygon           OuterPolygon;                                      // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	TArray<struct FGeometryScriptSimplePolygon>   HolePolygons;                                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bFixHoleOrientations;                              // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptGeneralPolygonList      ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_PolygonListFunctions_CreatePolygonListFromSinglePolygon) == 0x000008, "Wrong alignment on GeometryScriptLibrary_PolygonListFunctions_CreatePolygonListFromSinglePolygon");
static_assert(sizeof(GeometryScriptLibrary_PolygonListFunctions_CreatePolygonListFromSinglePolygon) == 0x000038, "Wrong size on GeometryScriptLibrary_PolygonListFunctions_CreatePolygonListFromSinglePolygon");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_CreatePolygonListFromSinglePolygon, OuterPolygon) == 0x000000, "Member 'GeometryScriptLibrary_PolygonListFunctions_CreatePolygonListFromSinglePolygon::OuterPolygon' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_CreatePolygonListFromSinglePolygon, HolePolygons) == 0x000010, "Member 'GeometryScriptLibrary_PolygonListFunctions_CreatePolygonListFromSinglePolygon::HolePolygons' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_CreatePolygonListFromSinglePolygon, bFixHoleOrientations) == 0x000020, "Member 'GeometryScriptLibrary_PolygonListFunctions_CreatePolygonListFromSinglePolygon::bFixHoleOrientations' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_CreatePolygonListFromSinglePolygon, ReturnValue) == 0x000028, "Member 'GeometryScriptLibrary_PolygonListFunctions_CreatePolygonListFromSinglePolygon::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PolygonListFunctions.CreatePolygonsFromOpenPolyPathsOffset
// 0x0058 (0x0058 - 0x0000)
struct GeometryScriptLibrary_PolygonListFunctions_CreatePolygonsFromOpenPolyPathsOffset final
{
public:
	TArray<struct FGeometryScriptPolyPath>        PolyPaths;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGeometryScriptOpenPathOffsetOptions   OffsetOptions;                                     // 0x0010(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	double                                        Offset;                                            // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOperationSuccess;                                 // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCopyInputOnFailure;                               // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptGeneralPolygonList      ReturnValue;                                       // 0x0048(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_PolygonListFunctions_CreatePolygonsFromOpenPolyPathsOffset) == 0x000008, "Wrong alignment on GeometryScriptLibrary_PolygonListFunctions_CreatePolygonsFromOpenPolyPathsOffset");
static_assert(sizeof(GeometryScriptLibrary_PolygonListFunctions_CreatePolygonsFromOpenPolyPathsOffset) == 0x000058, "Wrong size on GeometryScriptLibrary_PolygonListFunctions_CreatePolygonsFromOpenPolyPathsOffset");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_CreatePolygonsFromOpenPolyPathsOffset, PolyPaths) == 0x000000, "Member 'GeometryScriptLibrary_PolygonListFunctions_CreatePolygonsFromOpenPolyPathsOffset::PolyPaths' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_CreatePolygonsFromOpenPolyPathsOffset, OffsetOptions) == 0x000010, "Member 'GeometryScriptLibrary_PolygonListFunctions_CreatePolygonsFromOpenPolyPathsOffset::OffsetOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_CreatePolygonsFromOpenPolyPathsOffset, Offset) == 0x000038, "Member 'GeometryScriptLibrary_PolygonListFunctions_CreatePolygonsFromOpenPolyPathsOffset::Offset' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_CreatePolygonsFromOpenPolyPathsOffset, bOperationSuccess) == 0x000040, "Member 'GeometryScriptLibrary_PolygonListFunctions_CreatePolygonsFromOpenPolyPathsOffset::bOperationSuccess' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_CreatePolygonsFromOpenPolyPathsOffset, bCopyInputOnFailure) == 0x000041, "Member 'GeometryScriptLibrary_PolygonListFunctions_CreatePolygonsFromOpenPolyPathsOffset::bCopyInputOnFailure' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_CreatePolygonsFromOpenPolyPathsOffset, ReturnValue) == 0x000048, "Member 'GeometryScriptLibrary_PolygonListFunctions_CreatePolygonsFromOpenPolyPathsOffset::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PolygonListFunctions.CreatePolygonsFromPathOffset
// 0x0058 (0x0058 - 0x0000)
struct GeometryScriptLibrary_PolygonListFunctions_CreatePolygonsFromPathOffset final
{
public:
	TArray<struct FVector2D>                      Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGeometryScriptOpenPathOffsetOptions   OffsetOptions;                                     // 0x0010(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	double                                        Offset;                                            // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOperationSuccess;                                 // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCopyInputOnFailure;                               // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptGeneralPolygonList      ReturnValue;                                       // 0x0048(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_PolygonListFunctions_CreatePolygonsFromPathOffset) == 0x000008, "Wrong alignment on GeometryScriptLibrary_PolygonListFunctions_CreatePolygonsFromPathOffset");
static_assert(sizeof(GeometryScriptLibrary_PolygonListFunctions_CreatePolygonsFromPathOffset) == 0x000058, "Wrong size on GeometryScriptLibrary_PolygonListFunctions_CreatePolygonsFromPathOffset");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_CreatePolygonsFromPathOffset, Path) == 0x000000, "Member 'GeometryScriptLibrary_PolygonListFunctions_CreatePolygonsFromPathOffset::Path' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_CreatePolygonsFromPathOffset, OffsetOptions) == 0x000010, "Member 'GeometryScriptLibrary_PolygonListFunctions_CreatePolygonsFromPathOffset::OffsetOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_CreatePolygonsFromPathOffset, Offset) == 0x000038, "Member 'GeometryScriptLibrary_PolygonListFunctions_CreatePolygonsFromPathOffset::Offset' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_CreatePolygonsFromPathOffset, bOperationSuccess) == 0x000040, "Member 'GeometryScriptLibrary_PolygonListFunctions_CreatePolygonsFromPathOffset::bOperationSuccess' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_CreatePolygonsFromPathOffset, bCopyInputOnFailure) == 0x000041, "Member 'GeometryScriptLibrary_PolygonListFunctions_CreatePolygonsFromPathOffset::bCopyInputOnFailure' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_CreatePolygonsFromPathOffset, ReturnValue) == 0x000048, "Member 'GeometryScriptLibrary_PolygonListFunctions_CreatePolygonsFromPathOffset::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PolygonListFunctions.GetPolygonArea
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_PolygonListFunctions_GetPolygonArea final
{
public:
	struct FGeometryScriptGeneralPolygonList      PolygonList;                                       // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	bool                                          bValidIndex;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PolygonIndex;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonArea) == 0x000008, "Wrong alignment on GeometryScriptLibrary_PolygonListFunctions_GetPolygonArea");
static_assert(sizeof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonArea) == 0x000020, "Wrong size on GeometryScriptLibrary_PolygonListFunctions_GetPolygonArea");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonArea, PolygonList) == 0x000000, "Member 'GeometryScriptLibrary_PolygonListFunctions_GetPolygonArea::PolygonList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonArea, bValidIndex) == 0x000010, "Member 'GeometryScriptLibrary_PolygonListFunctions_GetPolygonArea::bValidIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonArea, PolygonIndex) == 0x000014, "Member 'GeometryScriptLibrary_PolygonListFunctions_GetPolygonArea::PolygonIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonArea, ReturnValue) == 0x000018, "Member 'GeometryScriptLibrary_PolygonListFunctions_GetPolygonArea::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PolygonListFunctions.GetPolygonBounds
// 0x0040 (0x0040 - 0x0000)
struct GeometryScriptLibrary_PolygonListFunctions_GetPolygonBounds final
{
public:
	struct FGeometryScriptGeneralPolygonList      PolygonList;                                       // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	bool                                          bValidIndex;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PolygonIndex;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox2D                                 ReturnValue;                                       // 0x0018(0x0028)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonBounds) == 0x000008, "Wrong alignment on GeometryScriptLibrary_PolygonListFunctions_GetPolygonBounds");
static_assert(sizeof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonBounds) == 0x000040, "Wrong size on GeometryScriptLibrary_PolygonListFunctions_GetPolygonBounds");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonBounds, PolygonList) == 0x000000, "Member 'GeometryScriptLibrary_PolygonListFunctions_GetPolygonBounds::PolygonList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonBounds, bValidIndex) == 0x000010, "Member 'GeometryScriptLibrary_PolygonListFunctions_GetPolygonBounds::bValidIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonBounds, PolygonIndex) == 0x000014, "Member 'GeometryScriptLibrary_PolygonListFunctions_GetPolygonBounds::PolygonIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonBounds, ReturnValue) == 0x000018, "Member 'GeometryScriptLibrary_PolygonListFunctions_GetPolygonBounds::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PolygonListFunctions.GetPolygonCount
// 0x0018 (0x0018 - 0x0000)
struct GeometryScriptLibrary_PolygonListFunctions_GetPolygonCount final
{
public:
	struct FGeometryScriptGeneralPolygonList      PolygonList;                                       // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonCount) == 0x000008, "Wrong alignment on GeometryScriptLibrary_PolygonListFunctions_GetPolygonCount");
static_assert(sizeof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonCount) == 0x000018, "Wrong size on GeometryScriptLibrary_PolygonListFunctions_GetPolygonCount");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonCount, PolygonList) == 0x000000, "Member 'GeometryScriptLibrary_PolygonListFunctions_GetPolygonCount::PolygonList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonCount, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_PolygonListFunctions_GetPolygonCount::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PolygonListFunctions.GetPolygonHoleCount
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_PolygonListFunctions_GetPolygonHoleCount final
{
public:
	struct FGeometryScriptGeneralPolygonList      PolygonList;                                       // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	bool                                          bValidIndex;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PolygonIndex;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonHoleCount) == 0x000008, "Wrong alignment on GeometryScriptLibrary_PolygonListFunctions_GetPolygonHoleCount");
static_assert(sizeof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonHoleCount) == 0x000020, "Wrong size on GeometryScriptLibrary_PolygonListFunctions_GetPolygonHoleCount");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonHoleCount, PolygonList) == 0x000000, "Member 'GeometryScriptLibrary_PolygonListFunctions_GetPolygonHoleCount::PolygonList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonHoleCount, bValidIndex) == 0x000010, "Member 'GeometryScriptLibrary_PolygonListFunctions_GetPolygonHoleCount::bValidIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonHoleCount, PolygonIndex) == 0x000014, "Member 'GeometryScriptLibrary_PolygonListFunctions_GetPolygonHoleCount::PolygonIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonHoleCount, ReturnValue) == 0x000018, "Member 'GeometryScriptLibrary_PolygonListFunctions_GetPolygonHoleCount::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PolygonListFunctions.GetPolygonListArea
// 0x0018 (0x0018 - 0x0000)
struct GeometryScriptLibrary_PolygonListFunctions_GetPolygonListArea final
{
public:
	struct FGeometryScriptGeneralPolygonList      PolygonList;                                       // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonListArea) == 0x000008, "Wrong alignment on GeometryScriptLibrary_PolygonListFunctions_GetPolygonListArea");
static_assert(sizeof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonListArea) == 0x000018, "Wrong size on GeometryScriptLibrary_PolygonListFunctions_GetPolygonListArea");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonListArea, PolygonList) == 0x000000, "Member 'GeometryScriptLibrary_PolygonListFunctions_GetPolygonListArea::PolygonList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonListArea, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_PolygonListFunctions_GetPolygonListArea::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PolygonListFunctions.GetPolygonListBounds
// 0x0038 (0x0038 - 0x0000)
struct GeometryScriptLibrary_PolygonListFunctions_GetPolygonListBounds final
{
public:
	struct FGeometryScriptGeneralPolygonList      PolygonList;                                       // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FBox2D                                 ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonListBounds) == 0x000008, "Wrong alignment on GeometryScriptLibrary_PolygonListFunctions_GetPolygonListBounds");
static_assert(sizeof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonListBounds) == 0x000038, "Wrong size on GeometryScriptLibrary_PolygonListFunctions_GetPolygonListBounds");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonListBounds, PolygonList) == 0x000000, "Member 'GeometryScriptLibrary_PolygonListFunctions_GetPolygonListBounds::PolygonList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonListBounds, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_PolygonListFunctions_GetPolygonListBounds::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PolygonListFunctions.GetPolygonVertex
// 0x0030 (0x0030 - 0x0000)
struct GeometryScriptLibrary_PolygonListFunctions_GetPolygonVertex final
{
public:
	struct FGeometryScriptGeneralPolygonList      PolygonList;                                       // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	bool                                          bIsValidVertex;                                    // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VertexIndex;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PolygonIndex;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HoleIndex;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonVertex) == 0x000008, "Wrong alignment on GeometryScriptLibrary_PolygonListFunctions_GetPolygonVertex");
static_assert(sizeof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonVertex) == 0x000030, "Wrong size on GeometryScriptLibrary_PolygonListFunctions_GetPolygonVertex");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonVertex, PolygonList) == 0x000000, "Member 'GeometryScriptLibrary_PolygonListFunctions_GetPolygonVertex::PolygonList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonVertex, bIsValidVertex) == 0x000010, "Member 'GeometryScriptLibrary_PolygonListFunctions_GetPolygonVertex::bIsValidVertex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonVertex, VertexIndex) == 0x000014, "Member 'GeometryScriptLibrary_PolygonListFunctions_GetPolygonVertex::VertexIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonVertex, PolygonIndex) == 0x000018, "Member 'GeometryScriptLibrary_PolygonListFunctions_GetPolygonVertex::PolygonIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonVertex, HoleIndex) == 0x00001C, "Member 'GeometryScriptLibrary_PolygonListFunctions_GetPolygonVertex::HoleIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonVertex, ReturnValue) == 0x000020, "Member 'GeometryScriptLibrary_PolygonListFunctions_GetPolygonVertex::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PolygonListFunctions.GetPolygonVertexCount
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_PolygonListFunctions_GetPolygonVertexCount final
{
public:
	struct FGeometryScriptGeneralPolygonList      PolygonList;                                       // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	bool                                          bValidIndices;                                     // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PolygonIndex;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HoleIndex;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonVertexCount) == 0x000008, "Wrong alignment on GeometryScriptLibrary_PolygonListFunctions_GetPolygonVertexCount");
static_assert(sizeof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonVertexCount) == 0x000020, "Wrong size on GeometryScriptLibrary_PolygonListFunctions_GetPolygonVertexCount");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonVertexCount, PolygonList) == 0x000000, "Member 'GeometryScriptLibrary_PolygonListFunctions_GetPolygonVertexCount::PolygonList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonVertexCount, bValidIndices) == 0x000010, "Member 'GeometryScriptLibrary_PolygonListFunctions_GetPolygonVertexCount::bValidIndices' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonVertexCount, PolygonIndex) == 0x000014, "Member 'GeometryScriptLibrary_PolygonListFunctions_GetPolygonVertexCount::PolygonIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonVertexCount, HoleIndex) == 0x000018, "Member 'GeometryScriptLibrary_PolygonListFunctions_GetPolygonVertexCount::HoleIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonVertexCount, ReturnValue) == 0x00001C, "Member 'GeometryScriptLibrary_PolygonListFunctions_GetPolygonVertexCount::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PolygonListFunctions.GetPolygonVertices
// 0x0030 (0x0030 - 0x0000)
struct GeometryScriptLibrary_PolygonListFunctions_GetPolygonVertices final
{
public:
	struct FGeometryScriptGeneralPolygonList      PolygonList;                                       // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      OutVertices;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bValidIndices;                                     // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PolygonIndex;                                      // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HoleIndex;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonVertices) == 0x000008, "Wrong alignment on GeometryScriptLibrary_PolygonListFunctions_GetPolygonVertices");
static_assert(sizeof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonVertices) == 0x000030, "Wrong size on GeometryScriptLibrary_PolygonListFunctions_GetPolygonVertices");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonVertices, PolygonList) == 0x000000, "Member 'GeometryScriptLibrary_PolygonListFunctions_GetPolygonVertices::PolygonList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonVertices, OutVertices) == 0x000010, "Member 'GeometryScriptLibrary_PolygonListFunctions_GetPolygonVertices::OutVertices' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonVertices, bValidIndices) == 0x000020, "Member 'GeometryScriptLibrary_PolygonListFunctions_GetPolygonVertices::bValidIndices' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonVertices, PolygonIndex) == 0x000024, "Member 'GeometryScriptLibrary_PolygonListFunctions_GetPolygonVertices::PolygonIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_GetPolygonVertices, HoleIndex) == 0x000028, "Member 'GeometryScriptLibrary_PolygonListFunctions_GetPolygonVertices::HoleIndex' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PolygonListFunctions.GetSimplePolygon
// 0x0030 (0x0030 - 0x0000)
struct GeometryScriptLibrary_PolygonListFunctions_GetSimplePolygon final
{
public:
	struct FGeometryScriptGeneralPolygonList      PolygonList;                                       // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	bool                                          bValidIndices;                                     // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PolygonIndex;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HoleIndex;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptSimplePolygon           ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_PolygonListFunctions_GetSimplePolygon) == 0x000008, "Wrong alignment on GeometryScriptLibrary_PolygonListFunctions_GetSimplePolygon");
static_assert(sizeof(GeometryScriptLibrary_PolygonListFunctions_GetSimplePolygon) == 0x000030, "Wrong size on GeometryScriptLibrary_PolygonListFunctions_GetSimplePolygon");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_GetSimplePolygon, PolygonList) == 0x000000, "Member 'GeometryScriptLibrary_PolygonListFunctions_GetSimplePolygon::PolygonList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_GetSimplePolygon, bValidIndices) == 0x000010, "Member 'GeometryScriptLibrary_PolygonListFunctions_GetSimplePolygon::bValidIndices' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_GetSimplePolygon, PolygonIndex) == 0x000014, "Member 'GeometryScriptLibrary_PolygonListFunctions_GetSimplePolygon::PolygonIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_GetSimplePolygon, HoleIndex) == 0x000018, "Member 'GeometryScriptLibrary_PolygonListFunctions_GetSimplePolygon::HoleIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_GetSimplePolygon, ReturnValue) == 0x000020, "Member 'GeometryScriptLibrary_PolygonListFunctions_GetSimplePolygon::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PolygonListFunctions.PolygonsDifference
// 0x0030 (0x0030 - 0x0000)
struct GeometryScriptLibrary_PolygonListFunctions_PolygonsDifference final
{
public:
	struct FGeometryScriptGeneralPolygonList      PolygonList;                                       // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptGeneralPolygonList      PolygonsToSubtract;                                // 0x0010(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptGeneralPolygonList      ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_PolygonListFunctions_PolygonsDifference) == 0x000008, "Wrong alignment on GeometryScriptLibrary_PolygonListFunctions_PolygonsDifference");
static_assert(sizeof(GeometryScriptLibrary_PolygonListFunctions_PolygonsDifference) == 0x000030, "Wrong size on GeometryScriptLibrary_PolygonListFunctions_PolygonsDifference");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_PolygonsDifference, PolygonList) == 0x000000, "Member 'GeometryScriptLibrary_PolygonListFunctions_PolygonsDifference::PolygonList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_PolygonsDifference, PolygonsToSubtract) == 0x000010, "Member 'GeometryScriptLibrary_PolygonListFunctions_PolygonsDifference::PolygonsToSubtract' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_PolygonsDifference, ReturnValue) == 0x000020, "Member 'GeometryScriptLibrary_PolygonListFunctions_PolygonsDifference::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PolygonListFunctions.PolygonsExclusiveOr
// 0x0030 (0x0030 - 0x0000)
struct GeometryScriptLibrary_PolygonListFunctions_PolygonsExclusiveOr final
{
public:
	struct FGeometryScriptGeneralPolygonList      PolygonList;                                       // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptGeneralPolygonList      PolygonsToExclusiveOr;                             // 0x0010(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptGeneralPolygonList      ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_PolygonListFunctions_PolygonsExclusiveOr) == 0x000008, "Wrong alignment on GeometryScriptLibrary_PolygonListFunctions_PolygonsExclusiveOr");
static_assert(sizeof(GeometryScriptLibrary_PolygonListFunctions_PolygonsExclusiveOr) == 0x000030, "Wrong size on GeometryScriptLibrary_PolygonListFunctions_PolygonsExclusiveOr");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_PolygonsExclusiveOr, PolygonList) == 0x000000, "Member 'GeometryScriptLibrary_PolygonListFunctions_PolygonsExclusiveOr::PolygonList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_PolygonsExclusiveOr, PolygonsToExclusiveOr) == 0x000010, "Member 'GeometryScriptLibrary_PolygonListFunctions_PolygonsExclusiveOr::PolygonsToExclusiveOr' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_PolygonsExclusiveOr, ReturnValue) == 0x000020, "Member 'GeometryScriptLibrary_PolygonListFunctions_PolygonsExclusiveOr::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PolygonListFunctions.PolygonsIntersection
// 0x0030 (0x0030 - 0x0000)
struct GeometryScriptLibrary_PolygonListFunctions_PolygonsIntersection final
{
public:
	struct FGeometryScriptGeneralPolygonList      PolygonList;                                       // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptGeneralPolygonList      PolygonsToIntersect;                               // 0x0010(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptGeneralPolygonList      ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_PolygonListFunctions_PolygonsIntersection) == 0x000008, "Wrong alignment on GeometryScriptLibrary_PolygonListFunctions_PolygonsIntersection");
static_assert(sizeof(GeometryScriptLibrary_PolygonListFunctions_PolygonsIntersection) == 0x000030, "Wrong size on GeometryScriptLibrary_PolygonListFunctions_PolygonsIntersection");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_PolygonsIntersection, PolygonList) == 0x000000, "Member 'GeometryScriptLibrary_PolygonListFunctions_PolygonsIntersection::PolygonList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_PolygonsIntersection, PolygonsToIntersect) == 0x000010, "Member 'GeometryScriptLibrary_PolygonListFunctions_PolygonsIntersection::PolygonsToIntersect' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_PolygonsIntersection, ReturnValue) == 0x000020, "Member 'GeometryScriptLibrary_PolygonListFunctions_PolygonsIntersection::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PolygonListFunctions.PolygonsMorphologyClose
// 0x0058 (0x0058 - 0x0000)
struct GeometryScriptLibrary_PolygonListFunctions_PolygonsMorphologyClose final
{
public:
	struct FGeometryScriptGeneralPolygonList      PolygonList;                                       // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptPolygonOffsetOptions    OffsetOptions;                                     // 0x0010(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	double                                        Offset;                                            // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOperationSuccess;                                 // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCopyInputOnFailure;                               // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptGeneralPolygonList      ReturnValue;                                       // 0x0048(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_PolygonListFunctions_PolygonsMorphologyClose) == 0x000008, "Wrong alignment on GeometryScriptLibrary_PolygonListFunctions_PolygonsMorphologyClose");
static_assert(sizeof(GeometryScriptLibrary_PolygonListFunctions_PolygonsMorphologyClose) == 0x000058, "Wrong size on GeometryScriptLibrary_PolygonListFunctions_PolygonsMorphologyClose");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_PolygonsMorphologyClose, PolygonList) == 0x000000, "Member 'GeometryScriptLibrary_PolygonListFunctions_PolygonsMorphologyClose::PolygonList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_PolygonsMorphologyClose, OffsetOptions) == 0x000010, "Member 'GeometryScriptLibrary_PolygonListFunctions_PolygonsMorphologyClose::OffsetOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_PolygonsMorphologyClose, Offset) == 0x000038, "Member 'GeometryScriptLibrary_PolygonListFunctions_PolygonsMorphologyClose::Offset' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_PolygonsMorphologyClose, bOperationSuccess) == 0x000040, "Member 'GeometryScriptLibrary_PolygonListFunctions_PolygonsMorphologyClose::bOperationSuccess' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_PolygonsMorphologyClose, bCopyInputOnFailure) == 0x000041, "Member 'GeometryScriptLibrary_PolygonListFunctions_PolygonsMorphologyClose::bCopyInputOnFailure' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_PolygonsMorphologyClose, ReturnValue) == 0x000048, "Member 'GeometryScriptLibrary_PolygonListFunctions_PolygonsMorphologyClose::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PolygonListFunctions.PolygonsMorphologyOpen
// 0x0058 (0x0058 - 0x0000)
struct GeometryScriptLibrary_PolygonListFunctions_PolygonsMorphologyOpen final
{
public:
	struct FGeometryScriptGeneralPolygonList      PolygonList;                                       // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptPolygonOffsetOptions    OffsetOptions;                                     // 0x0010(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	double                                        Offset;                                            // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOperationSuccess;                                 // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCopyInputOnFailure;                               // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptGeneralPolygonList      ReturnValue;                                       // 0x0048(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_PolygonListFunctions_PolygonsMorphologyOpen) == 0x000008, "Wrong alignment on GeometryScriptLibrary_PolygonListFunctions_PolygonsMorphologyOpen");
static_assert(sizeof(GeometryScriptLibrary_PolygonListFunctions_PolygonsMorphologyOpen) == 0x000058, "Wrong size on GeometryScriptLibrary_PolygonListFunctions_PolygonsMorphologyOpen");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_PolygonsMorphologyOpen, PolygonList) == 0x000000, "Member 'GeometryScriptLibrary_PolygonListFunctions_PolygonsMorphologyOpen::PolygonList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_PolygonsMorphologyOpen, OffsetOptions) == 0x000010, "Member 'GeometryScriptLibrary_PolygonListFunctions_PolygonsMorphologyOpen::OffsetOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_PolygonsMorphologyOpen, Offset) == 0x000038, "Member 'GeometryScriptLibrary_PolygonListFunctions_PolygonsMorphologyOpen::Offset' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_PolygonsMorphologyOpen, bOperationSuccess) == 0x000040, "Member 'GeometryScriptLibrary_PolygonListFunctions_PolygonsMorphologyOpen::bOperationSuccess' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_PolygonsMorphologyOpen, bCopyInputOnFailure) == 0x000041, "Member 'GeometryScriptLibrary_PolygonListFunctions_PolygonsMorphologyOpen::bCopyInputOnFailure' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_PolygonsMorphologyOpen, ReturnValue) == 0x000048, "Member 'GeometryScriptLibrary_PolygonListFunctions_PolygonsMorphologyOpen::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PolygonListFunctions.PolygonsOffset
// 0x0058 (0x0058 - 0x0000)
struct GeometryScriptLibrary_PolygonListFunctions_PolygonsOffset final
{
public:
	struct FGeometryScriptGeneralPolygonList      PolygonList;                                       // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptPolygonOffsetOptions    OffsetOptions;                                     // 0x0010(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	double                                        Offset;                                            // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOperationSuccess;                                 // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCopyInputOnFailure;                               // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptGeneralPolygonList      ReturnValue;                                       // 0x0048(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_PolygonListFunctions_PolygonsOffset) == 0x000008, "Wrong alignment on GeometryScriptLibrary_PolygonListFunctions_PolygonsOffset");
static_assert(sizeof(GeometryScriptLibrary_PolygonListFunctions_PolygonsOffset) == 0x000058, "Wrong size on GeometryScriptLibrary_PolygonListFunctions_PolygonsOffset");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_PolygonsOffset, PolygonList) == 0x000000, "Member 'GeometryScriptLibrary_PolygonListFunctions_PolygonsOffset::PolygonList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_PolygonsOffset, OffsetOptions) == 0x000010, "Member 'GeometryScriptLibrary_PolygonListFunctions_PolygonsOffset::OffsetOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_PolygonsOffset, Offset) == 0x000038, "Member 'GeometryScriptLibrary_PolygonListFunctions_PolygonsOffset::Offset' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_PolygonsOffset, bOperationSuccess) == 0x000040, "Member 'GeometryScriptLibrary_PolygonListFunctions_PolygonsOffset::bOperationSuccess' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_PolygonsOffset, bCopyInputOnFailure) == 0x000041, "Member 'GeometryScriptLibrary_PolygonListFunctions_PolygonsOffset::bCopyInputOnFailure' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_PolygonsOffset, ReturnValue) == 0x000048, "Member 'GeometryScriptLibrary_PolygonListFunctions_PolygonsOffset::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PolygonListFunctions.PolygonsOffsets
// 0x0060 (0x0060 - 0x0000)
struct GeometryScriptLibrary_PolygonListFunctions_PolygonsOffsets final
{
public:
	struct FGeometryScriptGeneralPolygonList      PolygonList;                                       // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptPolygonOffsetOptions    OffsetOptions;                                     // 0x0010(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	double                                        FirstOffset;                                       // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SecondOffset;                                      // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOperationSuccess;                                 // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCopyInputOnFailure;                               // 0x0049(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptGeneralPolygonList      ReturnValue;                                       // 0x0050(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_PolygonListFunctions_PolygonsOffsets) == 0x000008, "Wrong alignment on GeometryScriptLibrary_PolygonListFunctions_PolygonsOffsets");
static_assert(sizeof(GeometryScriptLibrary_PolygonListFunctions_PolygonsOffsets) == 0x000060, "Wrong size on GeometryScriptLibrary_PolygonListFunctions_PolygonsOffsets");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_PolygonsOffsets, PolygonList) == 0x000000, "Member 'GeometryScriptLibrary_PolygonListFunctions_PolygonsOffsets::PolygonList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_PolygonsOffsets, OffsetOptions) == 0x000010, "Member 'GeometryScriptLibrary_PolygonListFunctions_PolygonsOffsets::OffsetOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_PolygonsOffsets, FirstOffset) == 0x000038, "Member 'GeometryScriptLibrary_PolygonListFunctions_PolygonsOffsets::FirstOffset' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_PolygonsOffsets, SecondOffset) == 0x000040, "Member 'GeometryScriptLibrary_PolygonListFunctions_PolygonsOffsets::SecondOffset' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_PolygonsOffsets, bOperationSuccess) == 0x000048, "Member 'GeometryScriptLibrary_PolygonListFunctions_PolygonsOffsets::bOperationSuccess' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_PolygonsOffsets, bCopyInputOnFailure) == 0x000049, "Member 'GeometryScriptLibrary_PolygonListFunctions_PolygonsOffsets::bCopyInputOnFailure' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_PolygonsOffsets, ReturnValue) == 0x000050, "Member 'GeometryScriptLibrary_PolygonListFunctions_PolygonsOffsets::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PolygonListFunctions.PolygonsUnion
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_PolygonListFunctions_PolygonsUnion final
{
public:
	struct FGeometryScriptGeneralPolygonList      PolygonList;                                       // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	bool                                          bCopyInputOnFailure;                               // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptGeneralPolygonList      ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_PolygonListFunctions_PolygonsUnion) == 0x000008, "Wrong alignment on GeometryScriptLibrary_PolygonListFunctions_PolygonsUnion");
static_assert(sizeof(GeometryScriptLibrary_PolygonListFunctions_PolygonsUnion) == 0x000028, "Wrong size on GeometryScriptLibrary_PolygonListFunctions_PolygonsUnion");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_PolygonsUnion, PolygonList) == 0x000000, "Member 'GeometryScriptLibrary_PolygonListFunctions_PolygonsUnion::PolygonList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_PolygonsUnion, bCopyInputOnFailure) == 0x000010, "Member 'GeometryScriptLibrary_PolygonListFunctions_PolygonsUnion::bCopyInputOnFailure' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolygonListFunctions_PolygonsUnion, ReturnValue) == 0x000018, "Member 'GeometryScriptLibrary_PolygonListFunctions_PolygonsUnion::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PolyPathFunctions.Conv_ArrayOfVector2DToGeometryScriptPolyPath
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_PolyPathFunctions_Conv_ArrayOfVector2DToGeometryScriptPolyPath final
{
public:
	TArray<struct FVector2D>                      PathVertices;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometryScriptPolyPath                ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_PolyPathFunctions_Conv_ArrayOfVector2DToGeometryScriptPolyPath) == 0x000008, "Wrong alignment on GeometryScriptLibrary_PolyPathFunctions_Conv_ArrayOfVector2DToGeometryScriptPolyPath");
static_assert(sizeof(GeometryScriptLibrary_PolyPathFunctions_Conv_ArrayOfVector2DToGeometryScriptPolyPath) == 0x000028, "Wrong size on GeometryScriptLibrary_PolyPathFunctions_Conv_ArrayOfVector2DToGeometryScriptPolyPath");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_Conv_ArrayOfVector2DToGeometryScriptPolyPath, PathVertices) == 0x000000, "Member 'GeometryScriptLibrary_PolyPathFunctions_Conv_ArrayOfVector2DToGeometryScriptPolyPath::PathVertices' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_Conv_ArrayOfVector2DToGeometryScriptPolyPath, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_PolyPathFunctions_Conv_ArrayOfVector2DToGeometryScriptPolyPath::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PolyPathFunctions.Conv_ArrayToGeometryScriptPolyPath
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_PolyPathFunctions_Conv_ArrayToGeometryScriptPolyPath final
{
public:
	TArray<struct FVector>                        PathVertices;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometryScriptPolyPath                ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_PolyPathFunctions_Conv_ArrayToGeometryScriptPolyPath) == 0x000008, "Wrong alignment on GeometryScriptLibrary_PolyPathFunctions_Conv_ArrayToGeometryScriptPolyPath");
static_assert(sizeof(GeometryScriptLibrary_PolyPathFunctions_Conv_ArrayToGeometryScriptPolyPath) == 0x000028, "Wrong size on GeometryScriptLibrary_PolyPathFunctions_Conv_ArrayToGeometryScriptPolyPath");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_Conv_ArrayToGeometryScriptPolyPath, PathVertices) == 0x000000, "Member 'GeometryScriptLibrary_PolyPathFunctions_Conv_ArrayToGeometryScriptPolyPath::PathVertices' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_Conv_ArrayToGeometryScriptPolyPath, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_PolyPathFunctions_Conv_ArrayToGeometryScriptPolyPath::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PolyPathFunctions.Conv_GeometryScriptPolyPathToArray
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_PolyPathFunctions_Conv_GeometryScriptPolyPathToArray final
{
public:
	struct FGeometryScriptPolyPath                PolyPath;                                          // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_PolyPathFunctions_Conv_GeometryScriptPolyPathToArray) == 0x000008, "Wrong alignment on GeometryScriptLibrary_PolyPathFunctions_Conv_GeometryScriptPolyPathToArray");
static_assert(sizeof(GeometryScriptLibrary_PolyPathFunctions_Conv_GeometryScriptPolyPathToArray) == 0x000028, "Wrong size on GeometryScriptLibrary_PolyPathFunctions_Conv_GeometryScriptPolyPathToArray");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_Conv_GeometryScriptPolyPathToArray, PolyPath) == 0x000000, "Member 'GeometryScriptLibrary_PolyPathFunctions_Conv_GeometryScriptPolyPathToArray::PolyPath' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_Conv_GeometryScriptPolyPathToArray, ReturnValue) == 0x000018, "Member 'GeometryScriptLibrary_PolyPathFunctions_Conv_GeometryScriptPolyPathToArray::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PolyPathFunctions.Conv_GeometryScriptPolyPathToArrayOfVector2D
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_PolyPathFunctions_Conv_GeometryScriptPolyPathToArrayOfVector2D final
{
public:
	struct FGeometryScriptPolyPath                PolyPath;                                          // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_PolyPathFunctions_Conv_GeometryScriptPolyPathToArrayOfVector2D) == 0x000008, "Wrong alignment on GeometryScriptLibrary_PolyPathFunctions_Conv_GeometryScriptPolyPathToArrayOfVector2D");
static_assert(sizeof(GeometryScriptLibrary_PolyPathFunctions_Conv_GeometryScriptPolyPathToArrayOfVector2D) == 0x000028, "Wrong size on GeometryScriptLibrary_PolyPathFunctions_Conv_GeometryScriptPolyPathToArrayOfVector2D");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_Conv_GeometryScriptPolyPathToArrayOfVector2D, PolyPath) == 0x000000, "Member 'GeometryScriptLibrary_PolyPathFunctions_Conv_GeometryScriptPolyPathToArrayOfVector2D::PolyPath' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_Conv_GeometryScriptPolyPathToArrayOfVector2D, ReturnValue) == 0x000018, "Member 'GeometryScriptLibrary_PolyPathFunctions_Conv_GeometryScriptPolyPathToArrayOfVector2D::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PolyPathFunctions.ConvertArrayOfVector2DToPolyPath
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_PolyPathFunctions_ConvertArrayOfVector2DToPolyPath final
{
public:
	TArray<struct FVector2D>                      VertexArray;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometryScriptPolyPath                PolyPath;                                          // 0x0010(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_PolyPathFunctions_ConvertArrayOfVector2DToPolyPath) == 0x000008, "Wrong alignment on GeometryScriptLibrary_PolyPathFunctions_ConvertArrayOfVector2DToPolyPath");
static_assert(sizeof(GeometryScriptLibrary_PolyPathFunctions_ConvertArrayOfVector2DToPolyPath) == 0x000028, "Wrong size on GeometryScriptLibrary_PolyPathFunctions_ConvertArrayOfVector2DToPolyPath");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_ConvertArrayOfVector2DToPolyPath, VertexArray) == 0x000000, "Member 'GeometryScriptLibrary_PolyPathFunctions_ConvertArrayOfVector2DToPolyPath::VertexArray' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_ConvertArrayOfVector2DToPolyPath, PolyPath) == 0x000010, "Member 'GeometryScriptLibrary_PolyPathFunctions_ConvertArrayOfVector2DToPolyPath::PolyPath' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PolyPathFunctions.ConvertArrayToPolyPath
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_PolyPathFunctions_ConvertArrayToPolyPath final
{
public:
	TArray<struct FVector>                        VertexArray;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometryScriptPolyPath                PolyPath;                                          // 0x0010(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_PolyPathFunctions_ConvertArrayToPolyPath) == 0x000008, "Wrong alignment on GeometryScriptLibrary_PolyPathFunctions_ConvertArrayToPolyPath");
static_assert(sizeof(GeometryScriptLibrary_PolyPathFunctions_ConvertArrayToPolyPath) == 0x000028, "Wrong size on GeometryScriptLibrary_PolyPathFunctions_ConvertArrayToPolyPath");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_ConvertArrayToPolyPath, VertexArray) == 0x000000, "Member 'GeometryScriptLibrary_PolyPathFunctions_ConvertArrayToPolyPath::VertexArray' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_ConvertArrayToPolyPath, PolyPath) == 0x000010, "Member 'GeometryScriptLibrary_PolyPathFunctions_ConvertArrayToPolyPath::PolyPath' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PolyPathFunctions.ConvertPolyPathToArray
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_PolyPathFunctions_ConvertPolyPathToArray final
{
public:
	struct FGeometryScriptPolyPath                PolyPath;                                          // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        VertexArray;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_PolyPathFunctions_ConvertPolyPathToArray) == 0x000008, "Wrong alignment on GeometryScriptLibrary_PolyPathFunctions_ConvertPolyPathToArray");
static_assert(sizeof(GeometryScriptLibrary_PolyPathFunctions_ConvertPolyPathToArray) == 0x000028, "Wrong size on GeometryScriptLibrary_PolyPathFunctions_ConvertPolyPathToArray");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_ConvertPolyPathToArray, PolyPath) == 0x000000, "Member 'GeometryScriptLibrary_PolyPathFunctions_ConvertPolyPathToArray::PolyPath' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_ConvertPolyPathToArray, VertexArray) == 0x000018, "Member 'GeometryScriptLibrary_PolyPathFunctions_ConvertPolyPathToArray::VertexArray' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PolyPathFunctions.ConvertPolyPathToArrayOfVector2D
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_PolyPathFunctions_ConvertPolyPathToArrayOfVector2D final
{
public:
	struct FGeometryScriptPolyPath                PolyPath;                                          // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      VertexArray;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_PolyPathFunctions_ConvertPolyPathToArrayOfVector2D) == 0x000008, "Wrong alignment on GeometryScriptLibrary_PolyPathFunctions_ConvertPolyPathToArrayOfVector2D");
static_assert(sizeof(GeometryScriptLibrary_PolyPathFunctions_ConvertPolyPathToArrayOfVector2D) == 0x000028, "Wrong size on GeometryScriptLibrary_PolyPathFunctions_ConvertPolyPathToArrayOfVector2D");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_ConvertPolyPathToArrayOfVector2D, PolyPath) == 0x000000, "Member 'GeometryScriptLibrary_PolyPathFunctions_ConvertPolyPathToArrayOfVector2D::PolyPath' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_ConvertPolyPathToArrayOfVector2D, VertexArray) == 0x000018, "Member 'GeometryScriptLibrary_PolyPathFunctions_ConvertPolyPathToArrayOfVector2D::VertexArray' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PolyPathFunctions.ConvertSplineToPolyPath
// 0x0038 (0x0038 - 0x0000)
struct GeometryScriptLibrary_PolyPathFunctions_ConvertSplineToPolyPath final
{
public:
	const class USplineComponent*                 Spline;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptPolyPath                PolyPath;                                          // 0x0008(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FGeometryScriptSplineSamplingOptions   SamplingOptions;                                   // 0x0020(0x0014)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_PolyPathFunctions_ConvertSplineToPolyPath) == 0x000008, "Wrong alignment on GeometryScriptLibrary_PolyPathFunctions_ConvertSplineToPolyPath");
static_assert(sizeof(GeometryScriptLibrary_PolyPathFunctions_ConvertSplineToPolyPath) == 0x000038, "Wrong size on GeometryScriptLibrary_PolyPathFunctions_ConvertSplineToPolyPath");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_ConvertSplineToPolyPath, Spline) == 0x000000, "Member 'GeometryScriptLibrary_PolyPathFunctions_ConvertSplineToPolyPath::Spline' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_ConvertSplineToPolyPath, PolyPath) == 0x000008, "Member 'GeometryScriptLibrary_PolyPathFunctions_ConvertSplineToPolyPath::PolyPath' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_ConvertSplineToPolyPath, SamplingOptions) == 0x000020, "Member 'GeometryScriptLibrary_PolyPathFunctions_ConvertSplineToPolyPath::SamplingOptions' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PolyPathFunctions.CreateArcPath2D
// 0x0038 (0x0038 - 0x0000)
struct GeometryScriptLibrary_PolyPathFunctions_CreateArcPath2D final
{
public:
	struct FVector2D                              Center;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumPoints;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartAngle;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndAngle;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptPolyPath                ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_PolyPathFunctions_CreateArcPath2D) == 0x000008, "Wrong alignment on GeometryScriptLibrary_PolyPathFunctions_CreateArcPath2D");
static_assert(sizeof(GeometryScriptLibrary_PolyPathFunctions_CreateArcPath2D) == 0x000038, "Wrong size on GeometryScriptLibrary_PolyPathFunctions_CreateArcPath2D");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_CreateArcPath2D, Center) == 0x000000, "Member 'GeometryScriptLibrary_PolyPathFunctions_CreateArcPath2D::Center' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_CreateArcPath2D, Radius) == 0x000010, "Member 'GeometryScriptLibrary_PolyPathFunctions_CreateArcPath2D::Radius' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_CreateArcPath2D, NumPoints) == 0x000014, "Member 'GeometryScriptLibrary_PolyPathFunctions_CreateArcPath2D::NumPoints' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_CreateArcPath2D, StartAngle) == 0x000018, "Member 'GeometryScriptLibrary_PolyPathFunctions_CreateArcPath2D::StartAngle' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_CreateArcPath2D, EndAngle) == 0x00001C, "Member 'GeometryScriptLibrary_PolyPathFunctions_CreateArcPath2D::EndAngle' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_CreateArcPath2D, ReturnValue) == 0x000020, "Member 'GeometryScriptLibrary_PolyPathFunctions_CreateArcPath2D::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PolyPathFunctions.CreateArcPath3D
// 0x0090 (0x0090 - 0x0000)
struct GeometryScriptLibrary_PolyPathFunctions_CreateArcPath3D final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumPoints;                                         // 0x0064(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartAngle;                                        // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndAngle;                                          // 0x006C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptPolyPath                ReturnValue;                                       // 0x0070(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_PolyPathFunctions_CreateArcPath3D) == 0x000010, "Wrong alignment on GeometryScriptLibrary_PolyPathFunctions_CreateArcPath3D");
static_assert(sizeof(GeometryScriptLibrary_PolyPathFunctions_CreateArcPath3D) == 0x000090, "Wrong size on GeometryScriptLibrary_PolyPathFunctions_CreateArcPath3D");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_CreateArcPath3D, Transform) == 0x000000, "Member 'GeometryScriptLibrary_PolyPathFunctions_CreateArcPath3D::Transform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_CreateArcPath3D, Radius) == 0x000060, "Member 'GeometryScriptLibrary_PolyPathFunctions_CreateArcPath3D::Radius' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_CreateArcPath3D, NumPoints) == 0x000064, "Member 'GeometryScriptLibrary_PolyPathFunctions_CreateArcPath3D::NumPoints' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_CreateArcPath3D, StartAngle) == 0x000068, "Member 'GeometryScriptLibrary_PolyPathFunctions_CreateArcPath3D::StartAngle' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_CreateArcPath3D, EndAngle) == 0x00006C, "Member 'GeometryScriptLibrary_PolyPathFunctions_CreateArcPath3D::EndAngle' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_CreateArcPath3D, ReturnValue) == 0x000070, "Member 'GeometryScriptLibrary_PolyPathFunctions_CreateArcPath3D::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PolyPathFunctions.CreateCirclePath2D
// 0x0030 (0x0030 - 0x0000)
struct GeometryScriptLibrary_PolyPathFunctions_CreateCirclePath2D final
{
public:
	struct FVector2D                              Center;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumPoints;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptPolyPath                ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_PolyPathFunctions_CreateCirclePath2D) == 0x000008, "Wrong alignment on GeometryScriptLibrary_PolyPathFunctions_CreateCirclePath2D");
static_assert(sizeof(GeometryScriptLibrary_PolyPathFunctions_CreateCirclePath2D) == 0x000030, "Wrong size on GeometryScriptLibrary_PolyPathFunctions_CreateCirclePath2D");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_CreateCirclePath2D, Center) == 0x000000, "Member 'GeometryScriptLibrary_PolyPathFunctions_CreateCirclePath2D::Center' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_CreateCirclePath2D, Radius) == 0x000010, "Member 'GeometryScriptLibrary_PolyPathFunctions_CreateCirclePath2D::Radius' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_CreateCirclePath2D, NumPoints) == 0x000014, "Member 'GeometryScriptLibrary_PolyPathFunctions_CreateCirclePath2D::NumPoints' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_CreateCirclePath2D, ReturnValue) == 0x000018, "Member 'GeometryScriptLibrary_PolyPathFunctions_CreateCirclePath2D::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PolyPathFunctions.CreateCirclePath3D
// 0x0080 (0x0080 - 0x0000)
struct GeometryScriptLibrary_PolyPathFunctions_CreateCirclePath3D final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumPoints;                                         // 0x0064(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptPolyPath                ReturnValue;                                       // 0x0068(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_PolyPathFunctions_CreateCirclePath3D) == 0x000010, "Wrong alignment on GeometryScriptLibrary_PolyPathFunctions_CreateCirclePath3D");
static_assert(sizeof(GeometryScriptLibrary_PolyPathFunctions_CreateCirclePath3D) == 0x000080, "Wrong size on GeometryScriptLibrary_PolyPathFunctions_CreateCirclePath3D");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_CreateCirclePath3D, Transform) == 0x000000, "Member 'GeometryScriptLibrary_PolyPathFunctions_CreateCirclePath3D::Transform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_CreateCirclePath3D, Radius) == 0x000060, "Member 'GeometryScriptLibrary_PolyPathFunctions_CreateCirclePath3D::Radius' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_CreateCirclePath3D, NumPoints) == 0x000064, "Member 'GeometryScriptLibrary_PolyPathFunctions_CreateCirclePath3D::NumPoints' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_CreateCirclePath3D, ReturnValue) == 0x000068, "Member 'GeometryScriptLibrary_PolyPathFunctions_CreateCirclePath3D::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PolyPathFunctions.FlattenTo2DOnAxis
// 0x0038 (0x0038 - 0x0000)
struct GeometryScriptLibrary_PolyPathFunctions_FlattenTo2DOnAxis final
{
public:
	struct FGeometryScriptPolyPath                PolyPath;                                          // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	EGeometryScriptAxis                           DropAxis;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptPolyPath                ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_PolyPathFunctions_FlattenTo2DOnAxis) == 0x000008, "Wrong alignment on GeometryScriptLibrary_PolyPathFunctions_FlattenTo2DOnAxis");
static_assert(sizeof(GeometryScriptLibrary_PolyPathFunctions_FlattenTo2DOnAxis) == 0x000038, "Wrong size on GeometryScriptLibrary_PolyPathFunctions_FlattenTo2DOnAxis");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_FlattenTo2DOnAxis, PolyPath) == 0x000000, "Member 'GeometryScriptLibrary_PolyPathFunctions_FlattenTo2DOnAxis::PolyPath' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_FlattenTo2DOnAxis, DropAxis) == 0x000018, "Member 'GeometryScriptLibrary_PolyPathFunctions_FlattenTo2DOnAxis::DropAxis' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_FlattenTo2DOnAxis, ReturnValue) == 0x000020, "Member 'GeometryScriptLibrary_PolyPathFunctions_FlattenTo2DOnAxis::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PolyPathFunctions.GetNearestVertexIndex
// 0x0038 (0x0038 - 0x0000)
struct GeometryScriptLibrary_PolyPathFunctions_GetNearestVertexIndex final
{
public:
	struct FGeometryScriptPolyPath                PolyPath;                                          // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_PolyPathFunctions_GetNearestVertexIndex) == 0x000008, "Wrong alignment on GeometryScriptLibrary_PolyPathFunctions_GetNearestVertexIndex");
static_assert(sizeof(GeometryScriptLibrary_PolyPathFunctions_GetNearestVertexIndex) == 0x000038, "Wrong size on GeometryScriptLibrary_PolyPathFunctions_GetNearestVertexIndex");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_GetNearestVertexIndex, PolyPath) == 0x000000, "Member 'GeometryScriptLibrary_PolyPathFunctions_GetNearestVertexIndex::PolyPath' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_GetNearestVertexIndex, Point) == 0x000018, "Member 'GeometryScriptLibrary_PolyPathFunctions_GetNearestVertexIndex::Point' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_GetNearestVertexIndex, ReturnValue) == 0x000030, "Member 'GeometryScriptLibrary_PolyPathFunctions_GetNearestVertexIndex::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PolyPathFunctions.GetPolyPathArcLength
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_PolyPathFunctions_GetPolyPathArcLength final
{
public:
	struct FGeometryScriptPolyPath                PolyPath;                                          // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_PolyPathFunctions_GetPolyPathArcLength) == 0x000008, "Wrong alignment on GeometryScriptLibrary_PolyPathFunctions_GetPolyPathArcLength");
static_assert(sizeof(GeometryScriptLibrary_PolyPathFunctions_GetPolyPathArcLength) == 0x000020, "Wrong size on GeometryScriptLibrary_PolyPathFunctions_GetPolyPathArcLength");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_GetPolyPathArcLength, PolyPath) == 0x000000, "Member 'GeometryScriptLibrary_PolyPathFunctions_GetPolyPathArcLength::PolyPath' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_GetPolyPathArcLength, ReturnValue) == 0x000018, "Member 'GeometryScriptLibrary_PolyPathFunctions_GetPolyPathArcLength::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PolyPathFunctions.GetPolyPathLastIndex
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_PolyPathFunctions_GetPolyPathLastIndex final
{
public:
	struct FGeometryScriptPolyPath                PolyPath;                                          // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_PolyPathFunctions_GetPolyPathLastIndex) == 0x000008, "Wrong alignment on GeometryScriptLibrary_PolyPathFunctions_GetPolyPathLastIndex");
static_assert(sizeof(GeometryScriptLibrary_PolyPathFunctions_GetPolyPathLastIndex) == 0x000020, "Wrong size on GeometryScriptLibrary_PolyPathFunctions_GetPolyPathLastIndex");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_GetPolyPathLastIndex, PolyPath) == 0x000000, "Member 'GeometryScriptLibrary_PolyPathFunctions_GetPolyPathLastIndex::PolyPath' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_GetPolyPathLastIndex, ReturnValue) == 0x000018, "Member 'GeometryScriptLibrary_PolyPathFunctions_GetPolyPathLastIndex::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PolyPathFunctions.GetPolyPathNumVertices
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_PolyPathFunctions_GetPolyPathNumVertices final
{
public:
	struct FGeometryScriptPolyPath                PolyPath;                                          // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_PolyPathFunctions_GetPolyPathNumVertices) == 0x000008, "Wrong alignment on GeometryScriptLibrary_PolyPathFunctions_GetPolyPathNumVertices");
static_assert(sizeof(GeometryScriptLibrary_PolyPathFunctions_GetPolyPathNumVertices) == 0x000020, "Wrong size on GeometryScriptLibrary_PolyPathFunctions_GetPolyPathNumVertices");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_GetPolyPathNumVertices, PolyPath) == 0x000000, "Member 'GeometryScriptLibrary_PolyPathFunctions_GetPolyPathNumVertices::PolyPath' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_GetPolyPathNumVertices, ReturnValue) == 0x000018, "Member 'GeometryScriptLibrary_PolyPathFunctions_GetPolyPathNumVertices::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PolyPathFunctions.GetPolyPathTangent
// 0x0038 (0x0038 - 0x0000)
struct GeometryScriptLibrary_PolyPathFunctions_GetPolyPathTangent final
{
public:
	struct FGeometryScriptPolyPath                PolyPath;                                          // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValidIndex;                                     // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_PolyPathFunctions_GetPolyPathTangent) == 0x000008, "Wrong alignment on GeometryScriptLibrary_PolyPathFunctions_GetPolyPathTangent");
static_assert(sizeof(GeometryScriptLibrary_PolyPathFunctions_GetPolyPathTangent) == 0x000038, "Wrong size on GeometryScriptLibrary_PolyPathFunctions_GetPolyPathTangent");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_GetPolyPathTangent, PolyPath) == 0x000000, "Member 'GeometryScriptLibrary_PolyPathFunctions_GetPolyPathTangent::PolyPath' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_GetPolyPathTangent, Index_0) == 0x000018, "Member 'GeometryScriptLibrary_PolyPathFunctions_GetPolyPathTangent::Index_0' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_GetPolyPathTangent, bIsValidIndex) == 0x00001C, "Member 'GeometryScriptLibrary_PolyPathFunctions_GetPolyPathTangent::bIsValidIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_GetPolyPathTangent, ReturnValue) == 0x000020, "Member 'GeometryScriptLibrary_PolyPathFunctions_GetPolyPathTangent::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PolyPathFunctions.GetPolyPathVertex
// 0x0038 (0x0038 - 0x0000)
struct GeometryScriptLibrary_PolyPathFunctions_GetPolyPathVertex final
{
public:
	struct FGeometryScriptPolyPath                PolyPath;                                          // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValidIndex;                                     // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_PolyPathFunctions_GetPolyPathVertex) == 0x000008, "Wrong alignment on GeometryScriptLibrary_PolyPathFunctions_GetPolyPathVertex");
static_assert(sizeof(GeometryScriptLibrary_PolyPathFunctions_GetPolyPathVertex) == 0x000038, "Wrong size on GeometryScriptLibrary_PolyPathFunctions_GetPolyPathVertex");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_GetPolyPathVertex, PolyPath) == 0x000000, "Member 'GeometryScriptLibrary_PolyPathFunctions_GetPolyPathVertex::PolyPath' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_GetPolyPathVertex, Index_0) == 0x000018, "Member 'GeometryScriptLibrary_PolyPathFunctions_GetPolyPathVertex::Index_0' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_GetPolyPathVertex, bIsValidIndex) == 0x00001C, "Member 'GeometryScriptLibrary_PolyPathFunctions_GetPolyPathVertex::bIsValidIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_GetPolyPathVertex, ReturnValue) == 0x000020, "Member 'GeometryScriptLibrary_PolyPathFunctions_GetPolyPathVertex::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_PolyPathFunctions.SampleSplineToTransforms
// 0x00B0 (0x00B0 - 0x0000)
struct GeometryScriptLibrary_PolyPathFunctions_SampleSplineToTransforms final
{
public:
	const class USplineComponent*                 Spline;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     Frames;                                            // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<double>                                FrameTimes;                                        // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGeometryScriptSplineSamplingOptions   SamplingOptions;                                   // 0x0028(0x0014)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RelativeTransform;                                 // 0x0040(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeScale;                                     // 0x00A0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A1(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A2[0xE];                                       // 0x00A2(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_PolyPathFunctions_SampleSplineToTransforms) == 0x000010, "Wrong alignment on GeometryScriptLibrary_PolyPathFunctions_SampleSplineToTransforms");
static_assert(sizeof(GeometryScriptLibrary_PolyPathFunctions_SampleSplineToTransforms) == 0x0000B0, "Wrong size on GeometryScriptLibrary_PolyPathFunctions_SampleSplineToTransforms");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_SampleSplineToTransforms, Spline) == 0x000000, "Member 'GeometryScriptLibrary_PolyPathFunctions_SampleSplineToTransforms::Spline' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_SampleSplineToTransforms, Frames) == 0x000008, "Member 'GeometryScriptLibrary_PolyPathFunctions_SampleSplineToTransforms::Frames' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_SampleSplineToTransforms, FrameTimes) == 0x000018, "Member 'GeometryScriptLibrary_PolyPathFunctions_SampleSplineToTransforms::FrameTimes' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_SampleSplineToTransforms, SamplingOptions) == 0x000028, "Member 'GeometryScriptLibrary_PolyPathFunctions_SampleSplineToTransforms::SamplingOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_SampleSplineToTransforms, RelativeTransform) == 0x000040, "Member 'GeometryScriptLibrary_PolyPathFunctions_SampleSplineToTransforms::RelativeTransform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_SampleSplineToTransforms, bIncludeScale) == 0x0000A0, "Member 'GeometryScriptLibrary_PolyPathFunctions_SampleSplineToTransforms::bIncludeScale' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_PolyPathFunctions_SampleSplineToTransforms, ReturnValue) == 0x0000A1, "Member 'GeometryScriptLibrary_PolyPathFunctions_SampleSplineToTransforms::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_SceneUtilityFunctions.CopyCollisionMeshesFromObject
// 0x00A0 (0x00A0 - 0x0000)
struct GeometryScriptLibrary_SceneUtilityFunctions_CopyCollisionMeshesFromObject final
{
public:
	class UObject*                                FromObject;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ToDynamicMesh;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTransformToWorld;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0xF];                                       // 0x0011(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             LocalToWorld;                                      // 0x0020(0x0060)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptOutcomePins                    Outcome;                                           // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseComplexCollision;                              // 0x0081(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x2];                                       // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SphereResolution;                                  // 0x0084(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0088(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_SceneUtilityFunctions_CopyCollisionMeshesFromObject) == 0x000010, "Wrong alignment on GeometryScriptLibrary_SceneUtilityFunctions_CopyCollisionMeshesFromObject");
static_assert(sizeof(GeometryScriptLibrary_SceneUtilityFunctions_CopyCollisionMeshesFromObject) == 0x0000A0, "Wrong size on GeometryScriptLibrary_SceneUtilityFunctions_CopyCollisionMeshesFromObject");
static_assert(offsetof(GeometryScriptLibrary_SceneUtilityFunctions_CopyCollisionMeshesFromObject, FromObject) == 0x000000, "Member 'GeometryScriptLibrary_SceneUtilityFunctions_CopyCollisionMeshesFromObject::FromObject' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_SceneUtilityFunctions_CopyCollisionMeshesFromObject, ToDynamicMesh) == 0x000008, "Member 'GeometryScriptLibrary_SceneUtilityFunctions_CopyCollisionMeshesFromObject::ToDynamicMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_SceneUtilityFunctions_CopyCollisionMeshesFromObject, bTransformToWorld) == 0x000010, "Member 'GeometryScriptLibrary_SceneUtilityFunctions_CopyCollisionMeshesFromObject::bTransformToWorld' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_SceneUtilityFunctions_CopyCollisionMeshesFromObject, LocalToWorld) == 0x000020, "Member 'GeometryScriptLibrary_SceneUtilityFunctions_CopyCollisionMeshesFromObject::LocalToWorld' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_SceneUtilityFunctions_CopyCollisionMeshesFromObject, Outcome) == 0x000080, "Member 'GeometryScriptLibrary_SceneUtilityFunctions_CopyCollisionMeshesFromObject::Outcome' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_SceneUtilityFunctions_CopyCollisionMeshesFromObject, bUseComplexCollision) == 0x000081, "Member 'GeometryScriptLibrary_SceneUtilityFunctions_CopyCollisionMeshesFromObject::bUseComplexCollision' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_SceneUtilityFunctions_CopyCollisionMeshesFromObject, SphereResolution) == 0x000084, "Member 'GeometryScriptLibrary_SceneUtilityFunctions_CopyCollisionMeshesFromObject::SphereResolution' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_SceneUtilityFunctions_CopyCollisionMeshesFromObject, Debug) == 0x000088, "Member 'GeometryScriptLibrary_SceneUtilityFunctions_CopyCollisionMeshesFromObject::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_SceneUtilityFunctions_CopyCollisionMeshesFromObject, ReturnValue) == 0x000090, "Member 'GeometryScriptLibrary_SceneUtilityFunctions_CopyCollisionMeshesFromObject::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_SceneUtilityFunctions.CopyMeshFromComponent
// 0x00A0 (0x00A0 - 0x0000)
struct GeometryScriptLibrary_SceneUtilityFunctions_CopyMeshFromComponent final
{
public:
	class USceneComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ToDynamicMesh;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptCopyMeshFromComponentOptions Options;                                           // 0x0010(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bTransformToWorld;                                 // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             LocalToWorld;                                      // 0x0020(0x0060)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptOutcomePins                    Outcome;                                           // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0088(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_SceneUtilityFunctions_CopyMeshFromComponent) == 0x000010, "Wrong alignment on GeometryScriptLibrary_SceneUtilityFunctions_CopyMeshFromComponent");
static_assert(sizeof(GeometryScriptLibrary_SceneUtilityFunctions_CopyMeshFromComponent) == 0x0000A0, "Wrong size on GeometryScriptLibrary_SceneUtilityFunctions_CopyMeshFromComponent");
static_assert(offsetof(GeometryScriptLibrary_SceneUtilityFunctions_CopyMeshFromComponent, Component) == 0x000000, "Member 'GeometryScriptLibrary_SceneUtilityFunctions_CopyMeshFromComponent::Component' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_SceneUtilityFunctions_CopyMeshFromComponent, ToDynamicMesh) == 0x000008, "Member 'GeometryScriptLibrary_SceneUtilityFunctions_CopyMeshFromComponent::ToDynamicMesh' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_SceneUtilityFunctions_CopyMeshFromComponent, Options) == 0x000010, "Member 'GeometryScriptLibrary_SceneUtilityFunctions_CopyMeshFromComponent::Options' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_SceneUtilityFunctions_CopyMeshFromComponent, bTransformToWorld) == 0x00001C, "Member 'GeometryScriptLibrary_SceneUtilityFunctions_CopyMeshFromComponent::bTransformToWorld' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_SceneUtilityFunctions_CopyMeshFromComponent, LocalToWorld) == 0x000020, "Member 'GeometryScriptLibrary_SceneUtilityFunctions_CopyMeshFromComponent::LocalToWorld' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_SceneUtilityFunctions_CopyMeshFromComponent, Outcome) == 0x000080, "Member 'GeometryScriptLibrary_SceneUtilityFunctions_CopyMeshFromComponent::Outcome' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_SceneUtilityFunctions_CopyMeshFromComponent, Debug) == 0x000088, "Member 'GeometryScriptLibrary_SceneUtilityFunctions_CopyMeshFromComponent::Debug' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_SceneUtilityFunctions_CopyMeshFromComponent, ReturnValue) == 0x000090, "Member 'GeometryScriptLibrary_SceneUtilityFunctions_CopyMeshFromComponent::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_SceneUtilityFunctions.CreateDynamicMeshPool
// 0x0008 (0x0008 - 0x0000)
struct GeometryScriptLibrary_SceneUtilityFunctions_CreateDynamicMeshPool final
{
public:
	class UDynamicMeshPool*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_SceneUtilityFunctions_CreateDynamicMeshPool) == 0x000008, "Wrong alignment on GeometryScriptLibrary_SceneUtilityFunctions_CreateDynamicMeshPool");
static_assert(sizeof(GeometryScriptLibrary_SceneUtilityFunctions_CreateDynamicMeshPool) == 0x000008, "Wrong size on GeometryScriptLibrary_SceneUtilityFunctions_CreateDynamicMeshPool");
static_assert(offsetof(GeometryScriptLibrary_SceneUtilityFunctions_CreateDynamicMeshPool, ReturnValue) == 0x000000, "Member 'GeometryScriptLibrary_SceneUtilityFunctions_CreateDynamicMeshPool::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_SceneUtilityFunctions.DetermineMeshOcclusion
// 0x0098 (0x0098 - 0x0000)
struct GeometryScriptLibrary_SceneUtilityFunctions_DetermineMeshOcclusion final
{
public:
	TArray<class UDynamicMesh*>                   SourceMeshes;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     SourceMeshTransforms;                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<bool>                                  OutMeshIsHidden;                                   // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UDynamicMesh*>                   TransparentMeshes;                                 // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     TransparentMeshTransforms;                         // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<bool>                                  OutTransparentMeshIsHidden;                        // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UDynamicMesh*>                   OccludeMeshes;                                     // 0x0060(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     OccludeMeshTransforms;                             // 0x0070(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometryScriptDetermineMeshOcclusionOptions OcclusionOptions;                                  // 0x0080(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0090(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_SceneUtilityFunctions_DetermineMeshOcclusion) == 0x000008, "Wrong alignment on GeometryScriptLibrary_SceneUtilityFunctions_DetermineMeshOcclusion");
static_assert(sizeof(GeometryScriptLibrary_SceneUtilityFunctions_DetermineMeshOcclusion) == 0x000098, "Wrong size on GeometryScriptLibrary_SceneUtilityFunctions_DetermineMeshOcclusion");
static_assert(offsetof(GeometryScriptLibrary_SceneUtilityFunctions_DetermineMeshOcclusion, SourceMeshes) == 0x000000, "Member 'GeometryScriptLibrary_SceneUtilityFunctions_DetermineMeshOcclusion::SourceMeshes' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_SceneUtilityFunctions_DetermineMeshOcclusion, SourceMeshTransforms) == 0x000010, "Member 'GeometryScriptLibrary_SceneUtilityFunctions_DetermineMeshOcclusion::SourceMeshTransforms' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_SceneUtilityFunctions_DetermineMeshOcclusion, OutMeshIsHidden) == 0x000020, "Member 'GeometryScriptLibrary_SceneUtilityFunctions_DetermineMeshOcclusion::OutMeshIsHidden' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_SceneUtilityFunctions_DetermineMeshOcclusion, TransparentMeshes) == 0x000030, "Member 'GeometryScriptLibrary_SceneUtilityFunctions_DetermineMeshOcclusion::TransparentMeshes' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_SceneUtilityFunctions_DetermineMeshOcclusion, TransparentMeshTransforms) == 0x000040, "Member 'GeometryScriptLibrary_SceneUtilityFunctions_DetermineMeshOcclusion::TransparentMeshTransforms' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_SceneUtilityFunctions_DetermineMeshOcclusion, OutTransparentMeshIsHidden) == 0x000050, "Member 'GeometryScriptLibrary_SceneUtilityFunctions_DetermineMeshOcclusion::OutTransparentMeshIsHidden' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_SceneUtilityFunctions_DetermineMeshOcclusion, OccludeMeshes) == 0x000060, "Member 'GeometryScriptLibrary_SceneUtilityFunctions_DetermineMeshOcclusion::OccludeMeshes' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_SceneUtilityFunctions_DetermineMeshOcclusion, OccludeMeshTransforms) == 0x000070, "Member 'GeometryScriptLibrary_SceneUtilityFunctions_DetermineMeshOcclusion::OccludeMeshTransforms' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_SceneUtilityFunctions_DetermineMeshOcclusion, OcclusionOptions) == 0x000080, "Member 'GeometryScriptLibrary_SceneUtilityFunctions_DetermineMeshOcclusion::OcclusionOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_SceneUtilityFunctions_DetermineMeshOcclusion, Debug) == 0x000090, "Member 'GeometryScriptLibrary_SceneUtilityFunctions_DetermineMeshOcclusion::Debug' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_SceneUtilityFunctions.SetComponentMaterialList
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_SceneUtilityFunctions_SetComponentMaterialList final
{
public:
	class UPrimitiveComponent*                    Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             MaterialList;                                      // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_SceneUtilityFunctions_SetComponentMaterialList) == 0x000008, "Wrong alignment on GeometryScriptLibrary_SceneUtilityFunctions_SetComponentMaterialList");
static_assert(sizeof(GeometryScriptLibrary_SceneUtilityFunctions_SetComponentMaterialList) == 0x000020, "Wrong size on GeometryScriptLibrary_SceneUtilityFunctions_SetComponentMaterialList");
static_assert(offsetof(GeometryScriptLibrary_SceneUtilityFunctions_SetComponentMaterialList, Component) == 0x000000, "Member 'GeometryScriptLibrary_SceneUtilityFunctions_SetComponentMaterialList::Component' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_SceneUtilityFunctions_SetComponentMaterialList, MaterialList) == 0x000008, "Member 'GeometryScriptLibrary_SceneUtilityFunctions_SetComponentMaterialList::MaterialList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_SceneUtilityFunctions_SetComponentMaterialList, Debug) == 0x000018, "Member 'GeometryScriptLibrary_SceneUtilityFunctions_SetComponentMaterialList::Debug' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_TransformFunctions.GetTransformAxisPlane
// 0x0090 (0x0090 - 0x0000)
struct GeometryScriptLibrary_TransformFunctions_GetTransformAxisPlane final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptAxis                           Axis;                                              // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0xF];                                       // 0x0061(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlane                                 ReturnValue;                                       // 0x0070(0x0020)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_TransformFunctions_GetTransformAxisPlane) == 0x000010, "Wrong alignment on GeometryScriptLibrary_TransformFunctions_GetTransformAxisPlane");
static_assert(sizeof(GeometryScriptLibrary_TransformFunctions_GetTransformAxisPlane) == 0x000090, "Wrong size on GeometryScriptLibrary_TransformFunctions_GetTransformAxisPlane");
static_assert(offsetof(GeometryScriptLibrary_TransformFunctions_GetTransformAxisPlane, Transform) == 0x000000, "Member 'GeometryScriptLibrary_TransformFunctions_GetTransformAxisPlane::Transform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_TransformFunctions_GetTransformAxisPlane, Axis) == 0x000060, "Member 'GeometryScriptLibrary_TransformFunctions_GetTransformAxisPlane::Axis' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_TransformFunctions_GetTransformAxisPlane, ReturnValue) == 0x000070, "Member 'GeometryScriptLibrary_TransformFunctions_GetTransformAxisPlane::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_TransformFunctions.GetTransformAxisRay
// 0x00A0 (0x00A0 - 0x0000)
struct GeometryScriptLibrary_TransformFunctions_GetTransformAxisRay final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptAxis                           Axis;                                              // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRay                                   ReturnValue;                                       // 0x0068(0x0030)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_TransformFunctions_GetTransformAxisRay) == 0x000010, "Wrong alignment on GeometryScriptLibrary_TransformFunctions_GetTransformAxisRay");
static_assert(sizeof(GeometryScriptLibrary_TransformFunctions_GetTransformAxisRay) == 0x0000A0, "Wrong size on GeometryScriptLibrary_TransformFunctions_GetTransformAxisRay");
static_assert(offsetof(GeometryScriptLibrary_TransformFunctions_GetTransformAxisRay, Transform) == 0x000000, "Member 'GeometryScriptLibrary_TransformFunctions_GetTransformAxisRay::Transform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_TransformFunctions_GetTransformAxisRay, Axis) == 0x000060, "Member 'GeometryScriptLibrary_TransformFunctions_GetTransformAxisRay::Axis' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_TransformFunctions_GetTransformAxisRay, ReturnValue) == 0x000068, "Member 'GeometryScriptLibrary_TransformFunctions_GetTransformAxisRay::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_TransformFunctions.GetTransformAxisVector
// 0x0080 (0x0080 - 0x0000)
struct GeometryScriptLibrary_TransformFunctions_GetTransformAxisVector final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptAxis                           Axis;                                              // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0068(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_TransformFunctions_GetTransformAxisVector) == 0x000010, "Wrong alignment on GeometryScriptLibrary_TransformFunctions_GetTransformAxisVector");
static_assert(sizeof(GeometryScriptLibrary_TransformFunctions_GetTransformAxisVector) == 0x000080, "Wrong size on GeometryScriptLibrary_TransformFunctions_GetTransformAxisVector");
static_assert(offsetof(GeometryScriptLibrary_TransformFunctions_GetTransformAxisVector, Transform) == 0x000000, "Member 'GeometryScriptLibrary_TransformFunctions_GetTransformAxisVector::Transform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_TransformFunctions_GetTransformAxisVector, Axis) == 0x000060, "Member 'GeometryScriptLibrary_TransformFunctions_GetTransformAxisVector::Axis' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_TransformFunctions_GetTransformAxisVector, ReturnValue) == 0x000068, "Member 'GeometryScriptLibrary_TransformFunctions_GetTransformAxisVector::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_TransformFunctions.MakeTransformFromAxes
// 0x00B0 (0x00B0 - 0x0000)
struct GeometryScriptLibrary_TransformFunctions_MakeTransformFromAxes final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ZAxis;                                             // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TangentAxis;                                       // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTangentIsX;                                       // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0050(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_TransformFunctions_MakeTransformFromAxes) == 0x000010, "Wrong alignment on GeometryScriptLibrary_TransformFunctions_MakeTransformFromAxes");
static_assert(sizeof(GeometryScriptLibrary_TransformFunctions_MakeTransformFromAxes) == 0x0000B0, "Wrong size on GeometryScriptLibrary_TransformFunctions_MakeTransformFromAxes");
static_assert(offsetof(GeometryScriptLibrary_TransformFunctions_MakeTransformFromAxes, Location) == 0x000000, "Member 'GeometryScriptLibrary_TransformFunctions_MakeTransformFromAxes::Location' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_TransformFunctions_MakeTransformFromAxes, ZAxis) == 0x000018, "Member 'GeometryScriptLibrary_TransformFunctions_MakeTransformFromAxes::ZAxis' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_TransformFunctions_MakeTransformFromAxes, TangentAxis) == 0x000030, "Member 'GeometryScriptLibrary_TransformFunctions_MakeTransformFromAxes::TangentAxis' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_TransformFunctions_MakeTransformFromAxes, bTangentIsX) == 0x000048, "Member 'GeometryScriptLibrary_TransformFunctions_MakeTransformFromAxes::bTangentIsX' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_TransformFunctions_MakeTransformFromAxes, ReturnValue) == 0x000050, "Member 'GeometryScriptLibrary_TransformFunctions_MakeTransformFromAxes::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_TransformFunctions.MakeTransformFromZAxis
// 0x0090 (0x0090 - 0x0000)
struct GeometryScriptLibrary_TransformFunctions_MakeTransformFromZAxis final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ZAxis;                                             // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x0030(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_TransformFunctions_MakeTransformFromZAxis) == 0x000010, "Wrong alignment on GeometryScriptLibrary_TransformFunctions_MakeTransformFromZAxis");
static_assert(sizeof(GeometryScriptLibrary_TransformFunctions_MakeTransformFromZAxis) == 0x000090, "Wrong size on GeometryScriptLibrary_TransformFunctions_MakeTransformFromZAxis");
static_assert(offsetof(GeometryScriptLibrary_TransformFunctions_MakeTransformFromZAxis, Location) == 0x000000, "Member 'GeometryScriptLibrary_TransformFunctions_MakeTransformFromZAxis::Location' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_TransformFunctions_MakeTransformFromZAxis, ZAxis) == 0x000018, "Member 'GeometryScriptLibrary_TransformFunctions_MakeTransformFromZAxis::ZAxis' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_TransformFunctions_MakeTransformFromZAxis, ReturnValue) == 0x000030, "Member 'GeometryScriptLibrary_TransformFunctions_MakeTransformFromZAxis::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_RayFunctions.GetRayBoxIntersection
// 0x0078 (0x0078 - 0x0000)
struct GeometryScriptLibrary_RayFunctions_GetRayBoxIntersection final
{
public:
	struct FRay                                   Ray;                                               // 0x0000(0x0030)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FBox                                   Box;                                               // 0x0030(0x0038)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	double                                        HitDistance;                                       // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_RayFunctions_GetRayBoxIntersection) == 0x000008, "Wrong alignment on GeometryScriptLibrary_RayFunctions_GetRayBoxIntersection");
static_assert(sizeof(GeometryScriptLibrary_RayFunctions_GetRayBoxIntersection) == 0x000078, "Wrong size on GeometryScriptLibrary_RayFunctions_GetRayBoxIntersection");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetRayBoxIntersection, Ray) == 0x000000, "Member 'GeometryScriptLibrary_RayFunctions_GetRayBoxIntersection::Ray' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetRayBoxIntersection, Box) == 0x000030, "Member 'GeometryScriptLibrary_RayFunctions_GetRayBoxIntersection::Box' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetRayBoxIntersection, HitDistance) == 0x000068, "Member 'GeometryScriptLibrary_RayFunctions_GetRayBoxIntersection::HitDistance' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetRayBoxIntersection, ReturnValue) == 0x000070, "Member 'GeometryScriptLibrary_RayFunctions_GetRayBoxIntersection::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_RayFunctions.GetRayClosestPoint
// 0x0060 (0x0060 - 0x0000)
struct GeometryScriptLibrary_RayFunctions_GetRayClosestPoint final
{
public:
	struct FRay                                   Ray;                                               // 0x0000(0x0030)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0048(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_RayFunctions_GetRayClosestPoint) == 0x000008, "Wrong alignment on GeometryScriptLibrary_RayFunctions_GetRayClosestPoint");
static_assert(sizeof(GeometryScriptLibrary_RayFunctions_GetRayClosestPoint) == 0x000060, "Wrong size on GeometryScriptLibrary_RayFunctions_GetRayClosestPoint");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetRayClosestPoint, Ray) == 0x000000, "Member 'GeometryScriptLibrary_RayFunctions_GetRayClosestPoint::Ray' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetRayClosestPoint, Point) == 0x000030, "Member 'GeometryScriptLibrary_RayFunctions_GetRayClosestPoint::Point' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetRayClosestPoint, ReturnValue) == 0x000048, "Member 'GeometryScriptLibrary_RayFunctions_GetRayClosestPoint::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_RayFunctions.GetRayLineClosestPoint
// 0x00A8 (0x00A8 - 0x0000)
struct GeometryScriptLibrary_RayFunctions_GetRayLineClosestPoint final
{
public:
	struct FRay                                   Ray;                                               // 0x0000(0x0030)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                LineOrigin;                                        // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LineDirection;                                     // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        RayParameter;                                      // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RayPoint;                                          // 0x0068(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        LineParameter;                                     // 0x0080(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LinePoint;                                         // 0x0088(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x00A0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_RayFunctions_GetRayLineClosestPoint) == 0x000008, "Wrong alignment on GeometryScriptLibrary_RayFunctions_GetRayLineClosestPoint");
static_assert(sizeof(GeometryScriptLibrary_RayFunctions_GetRayLineClosestPoint) == 0x0000A8, "Wrong size on GeometryScriptLibrary_RayFunctions_GetRayLineClosestPoint");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetRayLineClosestPoint, Ray) == 0x000000, "Member 'GeometryScriptLibrary_RayFunctions_GetRayLineClosestPoint::Ray' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetRayLineClosestPoint, LineOrigin) == 0x000030, "Member 'GeometryScriptLibrary_RayFunctions_GetRayLineClosestPoint::LineOrigin' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetRayLineClosestPoint, LineDirection) == 0x000048, "Member 'GeometryScriptLibrary_RayFunctions_GetRayLineClosestPoint::LineDirection' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetRayLineClosestPoint, RayParameter) == 0x000060, "Member 'GeometryScriptLibrary_RayFunctions_GetRayLineClosestPoint::RayParameter' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetRayLineClosestPoint, RayPoint) == 0x000068, "Member 'GeometryScriptLibrary_RayFunctions_GetRayLineClosestPoint::RayPoint' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetRayLineClosestPoint, LineParameter) == 0x000080, "Member 'GeometryScriptLibrary_RayFunctions_GetRayLineClosestPoint::LineParameter' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetRayLineClosestPoint, LinePoint) == 0x000088, "Member 'GeometryScriptLibrary_RayFunctions_GetRayLineClosestPoint::LinePoint' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetRayLineClosestPoint, ReturnValue) == 0x0000A0, "Member 'GeometryScriptLibrary_RayFunctions_GetRayLineClosestPoint::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_RayFunctions.GetRayParameter
// 0x0050 (0x0050 - 0x0000)
struct GeometryScriptLibrary_RayFunctions_GetRayParameter final
{
public:
	struct FRay                                   Ray;                                               // 0x0000(0x0030)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_RayFunctions_GetRayParameter) == 0x000008, "Wrong alignment on GeometryScriptLibrary_RayFunctions_GetRayParameter");
static_assert(sizeof(GeometryScriptLibrary_RayFunctions_GetRayParameter) == 0x000050, "Wrong size on GeometryScriptLibrary_RayFunctions_GetRayParameter");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetRayParameter, Ray) == 0x000000, "Member 'GeometryScriptLibrary_RayFunctions_GetRayParameter::Ray' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetRayParameter, Point) == 0x000030, "Member 'GeometryScriptLibrary_RayFunctions_GetRayParameter::Point' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetRayParameter, ReturnValue) == 0x000048, "Member 'GeometryScriptLibrary_RayFunctions_GetRayParameter::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_RayFunctions.GetRayPlaneIntersection
// 0x0060 (0x0060 - 0x0000)
struct GeometryScriptLibrary_RayFunctions_GetRayPlaneIntersection final
{
public:
	struct FRay                                   Ray;                                               // 0x0000(0x0030)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPlane                                 Plane;                                             // 0x0030(0x0020)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        HitDistance;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_RayFunctions_GetRayPlaneIntersection) == 0x000010, "Wrong alignment on GeometryScriptLibrary_RayFunctions_GetRayPlaneIntersection");
static_assert(sizeof(GeometryScriptLibrary_RayFunctions_GetRayPlaneIntersection) == 0x000060, "Wrong size on GeometryScriptLibrary_RayFunctions_GetRayPlaneIntersection");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetRayPlaneIntersection, Ray) == 0x000000, "Member 'GeometryScriptLibrary_RayFunctions_GetRayPlaneIntersection::Ray' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetRayPlaneIntersection, Plane) == 0x000030, "Member 'GeometryScriptLibrary_RayFunctions_GetRayPlaneIntersection::Plane' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetRayPlaneIntersection, HitDistance) == 0x000050, "Member 'GeometryScriptLibrary_RayFunctions_GetRayPlaneIntersection::HitDistance' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetRayPlaneIntersection, ReturnValue) == 0x000058, "Member 'GeometryScriptLibrary_RayFunctions_GetRayPlaneIntersection::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_RayFunctions.GetRayPoint
// 0x0050 (0x0050 - 0x0000)
struct GeometryScriptLibrary_RayFunctions_GetRayPoint final
{
public:
	struct FRay                                   Ray;                                               // 0x0000(0x0030)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	double                                        Distance;                                          // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0038(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_RayFunctions_GetRayPoint) == 0x000008, "Wrong alignment on GeometryScriptLibrary_RayFunctions_GetRayPoint");
static_assert(sizeof(GeometryScriptLibrary_RayFunctions_GetRayPoint) == 0x000050, "Wrong size on GeometryScriptLibrary_RayFunctions_GetRayPoint");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetRayPoint, Ray) == 0x000000, "Member 'GeometryScriptLibrary_RayFunctions_GetRayPoint::Ray' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetRayPoint, Distance) == 0x000030, "Member 'GeometryScriptLibrary_RayFunctions_GetRayPoint::Distance' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetRayPoint, ReturnValue) == 0x000038, "Member 'GeometryScriptLibrary_RayFunctions_GetRayPoint::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_RayFunctions.GetRayPointDistance
// 0x0050 (0x0050 - 0x0000)
struct GeometryScriptLibrary_RayFunctions_GetRayPointDistance final
{
public:
	struct FRay                                   Ray;                                               // 0x0000(0x0030)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_RayFunctions_GetRayPointDistance) == 0x000008, "Wrong alignment on GeometryScriptLibrary_RayFunctions_GetRayPointDistance");
static_assert(sizeof(GeometryScriptLibrary_RayFunctions_GetRayPointDistance) == 0x000050, "Wrong size on GeometryScriptLibrary_RayFunctions_GetRayPointDistance");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetRayPointDistance, Ray) == 0x000000, "Member 'GeometryScriptLibrary_RayFunctions_GetRayPointDistance::Ray' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetRayPointDistance, Point) == 0x000030, "Member 'GeometryScriptLibrary_RayFunctions_GetRayPointDistance::Point' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetRayPointDistance, ReturnValue) == 0x000048, "Member 'GeometryScriptLibrary_RayFunctions_GetRayPointDistance::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_RayFunctions.GetRaySegmentClosestPoint
// 0x00A0 (0x00A0 - 0x0000)
struct GeometryScriptLibrary_RayFunctions_GetRaySegmentClosestPoint final
{
public:
	struct FRay                                   Ray;                                               // 0x0000(0x0030)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                SegStartPoint;                                     // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SegEndPoint;                                       // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        RayParameter;                                      // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RayPoint;                                          // 0x0068(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SegPoint;                                          // 0x0080(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0098(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_RayFunctions_GetRaySegmentClosestPoint) == 0x000008, "Wrong alignment on GeometryScriptLibrary_RayFunctions_GetRaySegmentClosestPoint");
static_assert(sizeof(GeometryScriptLibrary_RayFunctions_GetRaySegmentClosestPoint) == 0x0000A0, "Wrong size on GeometryScriptLibrary_RayFunctions_GetRaySegmentClosestPoint");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetRaySegmentClosestPoint, Ray) == 0x000000, "Member 'GeometryScriptLibrary_RayFunctions_GetRaySegmentClosestPoint::Ray' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetRaySegmentClosestPoint, SegStartPoint) == 0x000030, "Member 'GeometryScriptLibrary_RayFunctions_GetRaySegmentClosestPoint::SegStartPoint' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetRaySegmentClosestPoint, SegEndPoint) == 0x000048, "Member 'GeometryScriptLibrary_RayFunctions_GetRaySegmentClosestPoint::SegEndPoint' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetRaySegmentClosestPoint, RayParameter) == 0x000060, "Member 'GeometryScriptLibrary_RayFunctions_GetRaySegmentClosestPoint::RayParameter' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetRaySegmentClosestPoint, RayPoint) == 0x000068, "Member 'GeometryScriptLibrary_RayFunctions_GetRaySegmentClosestPoint::RayPoint' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetRaySegmentClosestPoint, SegPoint) == 0x000080, "Member 'GeometryScriptLibrary_RayFunctions_GetRaySegmentClosestPoint::SegPoint' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetRaySegmentClosestPoint, ReturnValue) == 0x000098, "Member 'GeometryScriptLibrary_RayFunctions_GetRaySegmentClosestPoint::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_RayFunctions.GetRaySphereIntersection
// 0x0068 (0x0068 - 0x0000)
struct GeometryScriptLibrary_RayFunctions_GetRaySphereIntersection final
{
public:
	struct FRay                                   Ray;                                               // 0x0000(0x0030)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                SphereCenter;                                      // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SphereRadius;                                      // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Distance1;                                         // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Distance2;                                         // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_RayFunctions_GetRaySphereIntersection) == 0x000008, "Wrong alignment on GeometryScriptLibrary_RayFunctions_GetRaySphereIntersection");
static_assert(sizeof(GeometryScriptLibrary_RayFunctions_GetRaySphereIntersection) == 0x000068, "Wrong size on GeometryScriptLibrary_RayFunctions_GetRaySphereIntersection");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetRaySphereIntersection, Ray) == 0x000000, "Member 'GeometryScriptLibrary_RayFunctions_GetRaySphereIntersection::Ray' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetRaySphereIntersection, SphereCenter) == 0x000030, "Member 'GeometryScriptLibrary_RayFunctions_GetRaySphereIntersection::SphereCenter' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetRaySphereIntersection, SphereRadius) == 0x000048, "Member 'GeometryScriptLibrary_RayFunctions_GetRaySphereIntersection::SphereRadius' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetRaySphereIntersection, Distance1) == 0x000050, "Member 'GeometryScriptLibrary_RayFunctions_GetRaySphereIntersection::Distance1' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetRaySphereIntersection, Distance2) == 0x000058, "Member 'GeometryScriptLibrary_RayFunctions_GetRaySphereIntersection::Distance2' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetRaySphereIntersection, ReturnValue) == 0x000060, "Member 'GeometryScriptLibrary_RayFunctions_GetRaySphereIntersection::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_RayFunctions.GetRayStartEnd
// 0x0070 (0x0070 - 0x0000)
struct GeometryScriptLibrary_RayFunctions_GetRayStartEnd final
{
public:
	struct FRay                                   Ray;                                               // 0x0000(0x0030)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	double                                        StartDistance;                                     // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        EndDistance;                                       // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartPoint;                                        // 0x0040(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndPoint;                                          // 0x0058(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_RayFunctions_GetRayStartEnd) == 0x000008, "Wrong alignment on GeometryScriptLibrary_RayFunctions_GetRayStartEnd");
static_assert(sizeof(GeometryScriptLibrary_RayFunctions_GetRayStartEnd) == 0x000070, "Wrong size on GeometryScriptLibrary_RayFunctions_GetRayStartEnd");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetRayStartEnd, Ray) == 0x000000, "Member 'GeometryScriptLibrary_RayFunctions_GetRayStartEnd::Ray' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetRayStartEnd, StartDistance) == 0x000030, "Member 'GeometryScriptLibrary_RayFunctions_GetRayStartEnd::StartDistance' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetRayStartEnd, EndDistance) == 0x000038, "Member 'GeometryScriptLibrary_RayFunctions_GetRayStartEnd::EndDistance' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetRayStartEnd, StartPoint) == 0x000040, "Member 'GeometryScriptLibrary_RayFunctions_GetRayStartEnd::StartPoint' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetRayStartEnd, EndPoint) == 0x000058, "Member 'GeometryScriptLibrary_RayFunctions_GetRayStartEnd::EndPoint' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_RayFunctions.GetTransformedRay
// 0x00D0 (0x00D0 - 0x0000)
struct GeometryScriptLibrary_RayFunctions_GetTransformedRay final
{
public:
	struct FRay                                   Ray;                                               // 0x0000(0x0030)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             Transform;                                         // 0x0030(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvert;                                           // 0x0090(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRay                                   ReturnValue;                                       // 0x0098(0x0030)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_RayFunctions_GetTransformedRay) == 0x000010, "Wrong alignment on GeometryScriptLibrary_RayFunctions_GetTransformedRay");
static_assert(sizeof(GeometryScriptLibrary_RayFunctions_GetTransformedRay) == 0x0000D0, "Wrong size on GeometryScriptLibrary_RayFunctions_GetTransformedRay");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetTransformedRay, Ray) == 0x000000, "Member 'GeometryScriptLibrary_RayFunctions_GetTransformedRay::Ray' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetTransformedRay, Transform) == 0x000030, "Member 'GeometryScriptLibrary_RayFunctions_GetTransformedRay::Transform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetTransformedRay, bInvert) == 0x000090, "Member 'GeometryScriptLibrary_RayFunctions_GetTransformedRay::bInvert' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_GetTransformedRay, ReturnValue) == 0x000098, "Member 'GeometryScriptLibrary_RayFunctions_GetTransformedRay::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_RayFunctions.MakeRayFromPointDirection
// 0x0068 (0x0068 - 0x0000)
struct GeometryScriptLibrary_RayFunctions_MakeRayFromPointDirection final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirectionIsNormalized;                            // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRay                                   ReturnValue;                                       // 0x0038(0x0030)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_RayFunctions_MakeRayFromPointDirection) == 0x000008, "Wrong alignment on GeometryScriptLibrary_RayFunctions_MakeRayFromPointDirection");
static_assert(sizeof(GeometryScriptLibrary_RayFunctions_MakeRayFromPointDirection) == 0x000068, "Wrong size on GeometryScriptLibrary_RayFunctions_MakeRayFromPointDirection");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_MakeRayFromPointDirection, Origin) == 0x000000, "Member 'GeometryScriptLibrary_RayFunctions_MakeRayFromPointDirection::Origin' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_MakeRayFromPointDirection, Direction) == 0x000018, "Member 'GeometryScriptLibrary_RayFunctions_MakeRayFromPointDirection::Direction' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_MakeRayFromPointDirection, bDirectionIsNormalized) == 0x000030, "Member 'GeometryScriptLibrary_RayFunctions_MakeRayFromPointDirection::bDirectionIsNormalized' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_MakeRayFromPointDirection, ReturnValue) == 0x000038, "Member 'GeometryScriptLibrary_RayFunctions_MakeRayFromPointDirection::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_RayFunctions.MakeRayFromPoints
// 0x0060 (0x0060 - 0x0000)
struct GeometryScriptLibrary_RayFunctions_MakeRayFromPoints final
{
public:
	struct FVector                                A;                                                 // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                B;                                                 // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRay                                   ReturnValue;                                       // 0x0030(0x0030)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_RayFunctions_MakeRayFromPoints) == 0x000008, "Wrong alignment on GeometryScriptLibrary_RayFunctions_MakeRayFromPoints");
static_assert(sizeof(GeometryScriptLibrary_RayFunctions_MakeRayFromPoints) == 0x000060, "Wrong size on GeometryScriptLibrary_RayFunctions_MakeRayFromPoints");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_MakeRayFromPoints, A) == 0x000000, "Member 'GeometryScriptLibrary_RayFunctions_MakeRayFromPoints::A' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_MakeRayFromPoints, B) == 0x000018, "Member 'GeometryScriptLibrary_RayFunctions_MakeRayFromPoints::B' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_RayFunctions_MakeRayFromPoints, ReturnValue) == 0x000030, "Member 'GeometryScriptLibrary_RayFunctions_MakeRayFromPoints::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_BoxFunctions.FindBoxBoxIntersection
// 0x00B0 (0x00B0 - 0x0000)
struct GeometryScriptLibrary_BoxFunctions_FindBoxBoxIntersection final
{
public:
	struct FBox                                   Box1;                                              // 0x0000(0x0038)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FBox                                   Box2;                                              // 0x0038(0x0038)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsIntersecting;                                   // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBox                                   ReturnValue;                                       // 0x0078(0x0038)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_BoxFunctions_FindBoxBoxIntersection) == 0x000008, "Wrong alignment on GeometryScriptLibrary_BoxFunctions_FindBoxBoxIntersection");
static_assert(sizeof(GeometryScriptLibrary_BoxFunctions_FindBoxBoxIntersection) == 0x0000B0, "Wrong size on GeometryScriptLibrary_BoxFunctions_FindBoxBoxIntersection");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_FindBoxBoxIntersection, Box1) == 0x000000, "Member 'GeometryScriptLibrary_BoxFunctions_FindBoxBoxIntersection::Box1' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_FindBoxBoxIntersection, Box2) == 0x000038, "Member 'GeometryScriptLibrary_BoxFunctions_FindBoxBoxIntersection::Box2' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_FindBoxBoxIntersection, bIsIntersecting) == 0x000070, "Member 'GeometryScriptLibrary_BoxFunctions_FindBoxBoxIntersection::bIsIntersecting' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_FindBoxBoxIntersection, ReturnValue) == 0x000078, "Member 'GeometryScriptLibrary_BoxFunctions_FindBoxBoxIntersection::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_BoxFunctions.FindClosestPointOnBox
// 0x0070 (0x0070 - 0x0000)
struct GeometryScriptLibrary_BoxFunctions_FindClosestPointOnBox final
{
public:
	struct FBox                                   Box;                                               // 0x0000(0x0038)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x0038(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInside;                                         // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0058(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_BoxFunctions_FindClosestPointOnBox) == 0x000008, "Wrong alignment on GeometryScriptLibrary_BoxFunctions_FindClosestPointOnBox");
static_assert(sizeof(GeometryScriptLibrary_BoxFunctions_FindClosestPointOnBox) == 0x000070, "Wrong size on GeometryScriptLibrary_BoxFunctions_FindClosestPointOnBox");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_FindClosestPointOnBox, Box) == 0x000000, "Member 'GeometryScriptLibrary_BoxFunctions_FindClosestPointOnBox::Box' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_FindClosestPointOnBox, Point) == 0x000038, "Member 'GeometryScriptLibrary_BoxFunctions_FindClosestPointOnBox::Point' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_FindClosestPointOnBox, bIsInside) == 0x000050, "Member 'GeometryScriptLibrary_BoxFunctions_FindClosestPointOnBox::bIsInside' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_FindClosestPointOnBox, ReturnValue) == 0x000058, "Member 'GeometryScriptLibrary_BoxFunctions_FindClosestPointOnBox::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_BoxFunctions.GetBoxBoxDistance
// 0x0078 (0x0078 - 0x0000)
struct GeometryScriptLibrary_BoxFunctions_GetBoxBoxDistance final
{
public:
	struct FBox                                   Box1;                                              // 0x0000(0x0038)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FBox                                   Box2;                                              // 0x0038(0x0038)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_BoxFunctions_GetBoxBoxDistance) == 0x000008, "Wrong alignment on GeometryScriptLibrary_BoxFunctions_GetBoxBoxDistance");
static_assert(sizeof(GeometryScriptLibrary_BoxFunctions_GetBoxBoxDistance) == 0x000078, "Wrong size on GeometryScriptLibrary_BoxFunctions_GetBoxBoxDistance");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_GetBoxBoxDistance, Box1) == 0x000000, "Member 'GeometryScriptLibrary_BoxFunctions_GetBoxBoxDistance::Box1' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_GetBoxBoxDistance, Box2) == 0x000038, "Member 'GeometryScriptLibrary_BoxFunctions_GetBoxBoxDistance::Box2' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_GetBoxBoxDistance, ReturnValue) == 0x000070, "Member 'GeometryScriptLibrary_BoxFunctions_GetBoxBoxDistance::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_BoxFunctions.GetBoxCenterSize
// 0x0068 (0x0068 - 0x0000)
struct GeometryScriptLibrary_BoxFunctions_GetBoxCenterSize final
{
public:
	struct FBox                                   Box;                                               // 0x0000(0x0038)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Center;                                            // 0x0038(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Dimensions;                                        // 0x0050(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_BoxFunctions_GetBoxCenterSize) == 0x000008, "Wrong alignment on GeometryScriptLibrary_BoxFunctions_GetBoxCenterSize");
static_assert(sizeof(GeometryScriptLibrary_BoxFunctions_GetBoxCenterSize) == 0x000068, "Wrong size on GeometryScriptLibrary_BoxFunctions_GetBoxCenterSize");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_GetBoxCenterSize, Box) == 0x000000, "Member 'GeometryScriptLibrary_BoxFunctions_GetBoxCenterSize::Box' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_GetBoxCenterSize, Center) == 0x000038, "Member 'GeometryScriptLibrary_BoxFunctions_GetBoxCenterSize::Center' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_GetBoxCenterSize, Dimensions) == 0x000050, "Member 'GeometryScriptLibrary_BoxFunctions_GetBoxCenterSize::Dimensions' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_BoxFunctions.GetBoxCorner
// 0x0058 (0x0058 - 0x0000)
struct GeometryScriptLibrary_BoxFunctions_GetBoxCorner final
{
public:
	struct FBox                                   Box;                                               // 0x0000(0x0038)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         CornerIndex;                                       // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0040(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_BoxFunctions_GetBoxCorner) == 0x000008, "Wrong alignment on GeometryScriptLibrary_BoxFunctions_GetBoxCorner");
static_assert(sizeof(GeometryScriptLibrary_BoxFunctions_GetBoxCorner) == 0x000058, "Wrong size on GeometryScriptLibrary_BoxFunctions_GetBoxCorner");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_GetBoxCorner, Box) == 0x000000, "Member 'GeometryScriptLibrary_BoxFunctions_GetBoxCorner::Box' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_GetBoxCorner, CornerIndex) == 0x000038, "Member 'GeometryScriptLibrary_BoxFunctions_GetBoxCorner::CornerIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_GetBoxCorner, ReturnValue) == 0x000040, "Member 'GeometryScriptLibrary_BoxFunctions_GetBoxCorner::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_BoxFunctions.GetBoxFaceCenter
// 0x0070 (0x0070 - 0x0000)
struct GeometryScriptLibrary_BoxFunctions_GetBoxFaceCenter final
{
public:
	struct FBox                                   Box;                                               // 0x0000(0x0038)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         FaceIndex;                                         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                FaceNormal;                                        // 0x0040(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0058(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_BoxFunctions_GetBoxFaceCenter) == 0x000008, "Wrong alignment on GeometryScriptLibrary_BoxFunctions_GetBoxFaceCenter");
static_assert(sizeof(GeometryScriptLibrary_BoxFunctions_GetBoxFaceCenter) == 0x000070, "Wrong size on GeometryScriptLibrary_BoxFunctions_GetBoxFaceCenter");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_GetBoxFaceCenter, Box) == 0x000000, "Member 'GeometryScriptLibrary_BoxFunctions_GetBoxFaceCenter::Box' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_GetBoxFaceCenter, FaceIndex) == 0x000038, "Member 'GeometryScriptLibrary_BoxFunctions_GetBoxFaceCenter::FaceIndex' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_GetBoxFaceCenter, FaceNormal) == 0x000040, "Member 'GeometryScriptLibrary_BoxFunctions_GetBoxFaceCenter::FaceNormal' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_GetBoxFaceCenter, ReturnValue) == 0x000058, "Member 'GeometryScriptLibrary_BoxFunctions_GetBoxFaceCenter::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_BoxFunctions.GetBoxPointDistance
// 0x0058 (0x0058 - 0x0000)
struct GeometryScriptLibrary_BoxFunctions_GetBoxPointDistance final
{
public:
	struct FBox                                   Box;                                               // 0x0000(0x0038)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x0038(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_BoxFunctions_GetBoxPointDistance) == 0x000008, "Wrong alignment on GeometryScriptLibrary_BoxFunctions_GetBoxPointDistance");
static_assert(sizeof(GeometryScriptLibrary_BoxFunctions_GetBoxPointDistance) == 0x000058, "Wrong size on GeometryScriptLibrary_BoxFunctions_GetBoxPointDistance");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_GetBoxPointDistance, Box) == 0x000000, "Member 'GeometryScriptLibrary_BoxFunctions_GetBoxPointDistance::Box' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_GetBoxPointDistance, Point) == 0x000038, "Member 'GeometryScriptLibrary_BoxFunctions_GetBoxPointDistance::Point' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_GetBoxPointDistance, ReturnValue) == 0x000050, "Member 'GeometryScriptLibrary_BoxFunctions_GetBoxPointDistance::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_BoxFunctions.GetBoxVolumeArea
// 0x0048 (0x0048 - 0x0000)
struct GeometryScriptLibrary_BoxFunctions_GetBoxVolumeArea final
{
public:
	struct FBox                                   Box;                                               // 0x0000(0x0038)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	double                                        Volume;                                            // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SurfaceArea;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_BoxFunctions_GetBoxVolumeArea) == 0x000008, "Wrong alignment on GeometryScriptLibrary_BoxFunctions_GetBoxVolumeArea");
static_assert(sizeof(GeometryScriptLibrary_BoxFunctions_GetBoxVolumeArea) == 0x000048, "Wrong size on GeometryScriptLibrary_BoxFunctions_GetBoxVolumeArea");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_GetBoxVolumeArea, Box) == 0x000000, "Member 'GeometryScriptLibrary_BoxFunctions_GetBoxVolumeArea::Box' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_GetBoxVolumeArea, Volume) == 0x000038, "Member 'GeometryScriptLibrary_BoxFunctions_GetBoxVolumeArea::Volume' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_GetBoxVolumeArea, SurfaceArea) == 0x000040, "Member 'GeometryScriptLibrary_BoxFunctions_GetBoxVolumeArea::SurfaceArea' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_BoxFunctions.GetExpandedBox
// 0x0088 (0x0088 - 0x0000)
struct GeometryScriptLibrary_BoxFunctions_GetExpandedBox final
{
public:
	struct FBox                                   Box;                                               // 0x0000(0x0038)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ExpandBy;                                          // 0x0038(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   ReturnValue;                                       // 0x0050(0x0038)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_BoxFunctions_GetExpandedBox) == 0x000008, "Wrong alignment on GeometryScriptLibrary_BoxFunctions_GetExpandedBox");
static_assert(sizeof(GeometryScriptLibrary_BoxFunctions_GetExpandedBox) == 0x000088, "Wrong size on GeometryScriptLibrary_BoxFunctions_GetExpandedBox");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_GetExpandedBox, Box) == 0x000000, "Member 'GeometryScriptLibrary_BoxFunctions_GetExpandedBox::Box' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_GetExpandedBox, ExpandBy) == 0x000038, "Member 'GeometryScriptLibrary_BoxFunctions_GetExpandedBox::ExpandBy' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_GetExpandedBox, ReturnValue) == 0x000050, "Member 'GeometryScriptLibrary_BoxFunctions_GetExpandedBox::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_BoxFunctions.GetTransformedBox
// 0x00E0 (0x00E0 - 0x0000)
struct GeometryScriptLibrary_BoxFunctions_GetTransformedBox final
{
public:
	struct FBox                                   Box;                                               // 0x0000(0x0038)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0040(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   ReturnValue;                                       // 0x00A0(0x0038)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_BoxFunctions_GetTransformedBox) == 0x000010, "Wrong alignment on GeometryScriptLibrary_BoxFunctions_GetTransformedBox");
static_assert(sizeof(GeometryScriptLibrary_BoxFunctions_GetTransformedBox) == 0x0000E0, "Wrong size on GeometryScriptLibrary_BoxFunctions_GetTransformedBox");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_GetTransformedBox, Box) == 0x000000, "Member 'GeometryScriptLibrary_BoxFunctions_GetTransformedBox::Box' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_GetTransformedBox, Transform) == 0x000040, "Member 'GeometryScriptLibrary_BoxFunctions_GetTransformedBox::Transform' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_GetTransformedBox, ReturnValue) == 0x0000A0, "Member 'GeometryScriptLibrary_BoxFunctions_GetTransformedBox::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_BoxFunctions.MakeBoxFromCenterExtents
// 0x0068 (0x0068 - 0x0000)
struct GeometryScriptLibrary_BoxFunctions_MakeBoxFromCenterExtents final
{
public:
	struct FVector                                Center;                                            // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Extents;                                           // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   ReturnValue;                                       // 0x0030(0x0038)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_BoxFunctions_MakeBoxFromCenterExtents) == 0x000008, "Wrong alignment on GeometryScriptLibrary_BoxFunctions_MakeBoxFromCenterExtents");
static_assert(sizeof(GeometryScriptLibrary_BoxFunctions_MakeBoxFromCenterExtents) == 0x000068, "Wrong size on GeometryScriptLibrary_BoxFunctions_MakeBoxFromCenterExtents");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_MakeBoxFromCenterExtents, Center) == 0x000000, "Member 'GeometryScriptLibrary_BoxFunctions_MakeBoxFromCenterExtents::Center' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_MakeBoxFromCenterExtents, Extents) == 0x000018, "Member 'GeometryScriptLibrary_BoxFunctions_MakeBoxFromCenterExtents::Extents' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_MakeBoxFromCenterExtents, ReturnValue) == 0x000030, "Member 'GeometryScriptLibrary_BoxFunctions_MakeBoxFromCenterExtents::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_BoxFunctions.MakeBoxFromCenterSize
// 0x0068 (0x0068 - 0x0000)
struct GeometryScriptLibrary_BoxFunctions_MakeBoxFromCenterSize final
{
public:
	struct FVector                                Center;                                            // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Dimensions;                                        // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   ReturnValue;                                       // 0x0030(0x0038)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_BoxFunctions_MakeBoxFromCenterSize) == 0x000008, "Wrong alignment on GeometryScriptLibrary_BoxFunctions_MakeBoxFromCenterSize");
static_assert(sizeof(GeometryScriptLibrary_BoxFunctions_MakeBoxFromCenterSize) == 0x000068, "Wrong size on GeometryScriptLibrary_BoxFunctions_MakeBoxFromCenterSize");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_MakeBoxFromCenterSize, Center) == 0x000000, "Member 'GeometryScriptLibrary_BoxFunctions_MakeBoxFromCenterSize::Center' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_MakeBoxFromCenterSize, Dimensions) == 0x000018, "Member 'GeometryScriptLibrary_BoxFunctions_MakeBoxFromCenterSize::Dimensions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_MakeBoxFromCenterSize, ReturnValue) == 0x000030, "Member 'GeometryScriptLibrary_BoxFunctions_MakeBoxFromCenterSize::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_BoxFunctions.TestBoxBoxIntersection
// 0x0078 (0x0078 - 0x0000)
struct GeometryScriptLibrary_BoxFunctions_TestBoxBoxIntersection final
{
public:
	struct FBox                                   Box1;                                              // 0x0000(0x0038)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FBox                                   Box2;                                              // 0x0038(0x0038)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_BoxFunctions_TestBoxBoxIntersection) == 0x000008, "Wrong alignment on GeometryScriptLibrary_BoxFunctions_TestBoxBoxIntersection");
static_assert(sizeof(GeometryScriptLibrary_BoxFunctions_TestBoxBoxIntersection) == 0x000078, "Wrong size on GeometryScriptLibrary_BoxFunctions_TestBoxBoxIntersection");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_TestBoxBoxIntersection, Box1) == 0x000000, "Member 'GeometryScriptLibrary_BoxFunctions_TestBoxBoxIntersection::Box1' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_TestBoxBoxIntersection, Box2) == 0x000038, "Member 'GeometryScriptLibrary_BoxFunctions_TestBoxBoxIntersection::Box2' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_TestBoxBoxIntersection, ReturnValue) == 0x000070, "Member 'GeometryScriptLibrary_BoxFunctions_TestBoxBoxIntersection::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_BoxFunctions.TestBoxSphereIntersection
// 0x0060 (0x0060 - 0x0000)
struct GeometryScriptLibrary_BoxFunctions_TestBoxSphereIntersection final
{
public:
	struct FBox                                   Box;                                               // 0x0000(0x0038)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                SphereCenter;                                      // 0x0038(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SphereRadius;                                      // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_BoxFunctions_TestBoxSphereIntersection) == 0x000008, "Wrong alignment on GeometryScriptLibrary_BoxFunctions_TestBoxSphereIntersection");
static_assert(sizeof(GeometryScriptLibrary_BoxFunctions_TestBoxSphereIntersection) == 0x000060, "Wrong size on GeometryScriptLibrary_BoxFunctions_TestBoxSphereIntersection");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_TestBoxSphereIntersection, Box) == 0x000000, "Member 'GeometryScriptLibrary_BoxFunctions_TestBoxSphereIntersection::Box' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_TestBoxSphereIntersection, SphereCenter) == 0x000038, "Member 'GeometryScriptLibrary_BoxFunctions_TestBoxSphereIntersection::SphereCenter' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_TestBoxSphereIntersection, SphereRadius) == 0x000050, "Member 'GeometryScriptLibrary_BoxFunctions_TestBoxSphereIntersection::SphereRadius' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_TestBoxSphereIntersection, ReturnValue) == 0x000058, "Member 'GeometryScriptLibrary_BoxFunctions_TestBoxSphereIntersection::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_BoxFunctions.TestPointInsideBox
// 0x0058 (0x0058 - 0x0000)
struct GeometryScriptLibrary_BoxFunctions_TestPointInsideBox final
{
public:
	struct FBox                                   Box;                                               // 0x0000(0x0038)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x0038(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConsiderOnBoxAsInside;                            // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0051(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryScriptLibrary_BoxFunctions_TestPointInsideBox) == 0x000008, "Wrong alignment on GeometryScriptLibrary_BoxFunctions_TestPointInsideBox");
static_assert(sizeof(GeometryScriptLibrary_BoxFunctions_TestPointInsideBox) == 0x000058, "Wrong size on GeometryScriptLibrary_BoxFunctions_TestPointInsideBox");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_TestPointInsideBox, Box) == 0x000000, "Member 'GeometryScriptLibrary_BoxFunctions_TestPointInsideBox::Box' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_TestPointInsideBox, Point) == 0x000038, "Member 'GeometryScriptLibrary_BoxFunctions_TestPointInsideBox::Point' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_TestPointInsideBox, bConsiderOnBoxAsInside) == 0x000050, "Member 'GeometryScriptLibrary_BoxFunctions_TestPointInsideBox::bConsiderOnBoxAsInside' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_BoxFunctions_TestPointInsideBox, ReturnValue) == 0x000051, "Member 'GeometryScriptLibrary_BoxFunctions_TestPointInsideBox::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_TextureMapFunctions.SampleTexture2DAtUVPositions
// 0x0058 (0x0058 - 0x0000)
struct GeometryScriptLibrary_TextureMapFunctions_SampleTexture2DAtUVPositions final
{
public:
	struct FGeometryScriptUVList                  UVList;                                            // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	class UTexture2D*                             Texture;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptSampleTextureOptions    SampleOptions;                                     // 0x0018(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FGeometryScriptColorList               ColorList;                                         // 0x0040(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0050(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_TextureMapFunctions_SampleTexture2DAtUVPositions) == 0x000008, "Wrong alignment on GeometryScriptLibrary_TextureMapFunctions_SampleTexture2DAtUVPositions");
static_assert(sizeof(GeometryScriptLibrary_TextureMapFunctions_SampleTexture2DAtUVPositions) == 0x000058, "Wrong size on GeometryScriptLibrary_TextureMapFunctions_SampleTexture2DAtUVPositions");
static_assert(offsetof(GeometryScriptLibrary_TextureMapFunctions_SampleTexture2DAtUVPositions, UVList) == 0x000000, "Member 'GeometryScriptLibrary_TextureMapFunctions_SampleTexture2DAtUVPositions::UVList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_TextureMapFunctions_SampleTexture2DAtUVPositions, Texture) == 0x000010, "Member 'GeometryScriptLibrary_TextureMapFunctions_SampleTexture2DAtUVPositions::Texture' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_TextureMapFunctions_SampleTexture2DAtUVPositions, SampleOptions) == 0x000018, "Member 'GeometryScriptLibrary_TextureMapFunctions_SampleTexture2DAtUVPositions::SampleOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_TextureMapFunctions_SampleTexture2DAtUVPositions, ColorList) == 0x000040, "Member 'GeometryScriptLibrary_TextureMapFunctions_SampleTexture2DAtUVPositions::ColorList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_TextureMapFunctions_SampleTexture2DAtUVPositions, Debug) == 0x000050, "Member 'GeometryScriptLibrary_TextureMapFunctions_SampleTexture2DAtUVPositions::Debug' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_TextureMapFunctions.SampleTextureRenderTarget2DAtUVPositions
// 0x0058 (0x0058 - 0x0000)
struct GeometryScriptLibrary_TextureMapFunctions_SampleTextureRenderTarget2DAtUVPositions final
{
public:
	struct FGeometryScriptUVList                  UVList;                                            // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 Texture;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptSampleTextureOptions    SampleOptions;                                     // 0x0018(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FGeometryScriptColorList               ColorList;                                         // 0x0040(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	class UGeometryScriptDebug*                   Debug;                                             // 0x0050(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_TextureMapFunctions_SampleTextureRenderTarget2DAtUVPositions) == 0x000008, "Wrong alignment on GeometryScriptLibrary_TextureMapFunctions_SampleTextureRenderTarget2DAtUVPositions");
static_assert(sizeof(GeometryScriptLibrary_TextureMapFunctions_SampleTextureRenderTarget2DAtUVPositions) == 0x000058, "Wrong size on GeometryScriptLibrary_TextureMapFunctions_SampleTextureRenderTarget2DAtUVPositions");
static_assert(offsetof(GeometryScriptLibrary_TextureMapFunctions_SampleTextureRenderTarget2DAtUVPositions, UVList) == 0x000000, "Member 'GeometryScriptLibrary_TextureMapFunctions_SampleTextureRenderTarget2DAtUVPositions::UVList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_TextureMapFunctions_SampleTextureRenderTarget2DAtUVPositions, Texture) == 0x000010, "Member 'GeometryScriptLibrary_TextureMapFunctions_SampleTextureRenderTarget2DAtUVPositions::Texture' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_TextureMapFunctions_SampleTextureRenderTarget2DAtUVPositions, SampleOptions) == 0x000018, "Member 'GeometryScriptLibrary_TextureMapFunctions_SampleTextureRenderTarget2DAtUVPositions::SampleOptions' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_TextureMapFunctions_SampleTextureRenderTarget2DAtUVPositions, ColorList) == 0x000040, "Member 'GeometryScriptLibrary_TextureMapFunctions_SampleTextureRenderTarget2DAtUVPositions::ColorList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_TextureMapFunctions_SampleTextureRenderTarget2DAtUVPositions, Debug) == 0x000050, "Member 'GeometryScriptLibrary_TextureMapFunctions_SampleTextureRenderTarget2DAtUVPositions::Debug' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_VectorMathFunctions.ConstantScalarMultiply
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_VectorMathFunctions_ConstantScalarMultiply final
{
public:
	double                                        Constant;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptScalarList              ScalarList;                                        // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptScalarList              ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_VectorMathFunctions_ConstantScalarMultiply) == 0x000008, "Wrong alignment on GeometryScriptLibrary_VectorMathFunctions_ConstantScalarMultiply");
static_assert(sizeof(GeometryScriptLibrary_VectorMathFunctions_ConstantScalarMultiply) == 0x000028, "Wrong size on GeometryScriptLibrary_VectorMathFunctions_ConstantScalarMultiply");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_ConstantScalarMultiply, Constant) == 0x000000, "Member 'GeometryScriptLibrary_VectorMathFunctions_ConstantScalarMultiply::Constant' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_ConstantScalarMultiply, ScalarList) == 0x000008, "Member 'GeometryScriptLibrary_VectorMathFunctions_ConstantScalarMultiply::ScalarList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_ConstantScalarMultiply, ReturnValue) == 0x000018, "Member 'GeometryScriptLibrary_VectorMathFunctions_ConstantScalarMultiply::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_VectorMathFunctions.ConstantScalarMultiplyInPlace
// 0x0018 (0x0018 - 0x0000)
struct GeometryScriptLibrary_VectorMathFunctions_ConstantScalarMultiplyInPlace final
{
public:
	double                                        Constant;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptScalarList              ScalarList;                                        // 0x0008(0x0010)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_VectorMathFunctions_ConstantScalarMultiplyInPlace) == 0x000008, "Wrong alignment on GeometryScriptLibrary_VectorMathFunctions_ConstantScalarMultiplyInPlace");
static_assert(sizeof(GeometryScriptLibrary_VectorMathFunctions_ConstantScalarMultiplyInPlace) == 0x000018, "Wrong size on GeometryScriptLibrary_VectorMathFunctions_ConstantScalarMultiplyInPlace");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_ConstantScalarMultiplyInPlace, Constant) == 0x000000, "Member 'GeometryScriptLibrary_VectorMathFunctions_ConstantScalarMultiplyInPlace::Constant' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_ConstantScalarMultiplyInPlace, ScalarList) == 0x000008, "Member 'GeometryScriptLibrary_VectorMathFunctions_ConstantScalarMultiplyInPlace::ScalarList' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_VectorMathFunctions.ConstantVectorMultiply
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_VectorMathFunctions_ConstantVectorMultiply final
{
public:
	double                                        Constant;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptVectorList              VectorList;                                        // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptVectorList              ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_VectorMathFunctions_ConstantVectorMultiply) == 0x000008, "Wrong alignment on GeometryScriptLibrary_VectorMathFunctions_ConstantVectorMultiply");
static_assert(sizeof(GeometryScriptLibrary_VectorMathFunctions_ConstantVectorMultiply) == 0x000028, "Wrong size on GeometryScriptLibrary_VectorMathFunctions_ConstantVectorMultiply");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_ConstantVectorMultiply, Constant) == 0x000000, "Member 'GeometryScriptLibrary_VectorMathFunctions_ConstantVectorMultiply::Constant' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_ConstantVectorMultiply, VectorList) == 0x000008, "Member 'GeometryScriptLibrary_VectorMathFunctions_ConstantVectorMultiply::VectorList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_ConstantVectorMultiply, ReturnValue) == 0x000018, "Member 'GeometryScriptLibrary_VectorMathFunctions_ConstantVectorMultiply::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_VectorMathFunctions.ConstantVectorMultiplyInPlace
// 0x0018 (0x0018 - 0x0000)
struct GeometryScriptLibrary_VectorMathFunctions_ConstantVectorMultiplyInPlace final
{
public:
	double                                        Constant;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptVectorList              VectorList;                                        // 0x0008(0x0010)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_VectorMathFunctions_ConstantVectorMultiplyInPlace) == 0x000008, "Wrong alignment on GeometryScriptLibrary_VectorMathFunctions_ConstantVectorMultiplyInPlace");
static_assert(sizeof(GeometryScriptLibrary_VectorMathFunctions_ConstantVectorMultiplyInPlace) == 0x000018, "Wrong size on GeometryScriptLibrary_VectorMathFunctions_ConstantVectorMultiplyInPlace");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_ConstantVectorMultiplyInPlace, Constant) == 0x000000, "Member 'GeometryScriptLibrary_VectorMathFunctions_ConstantVectorMultiplyInPlace::Constant' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_ConstantVectorMultiplyInPlace, VectorList) == 0x000008, "Member 'GeometryScriptLibrary_VectorMathFunctions_ConstantVectorMultiplyInPlace::VectorList' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_VectorMathFunctions.ScalarBlend
// 0x0040 (0x0040 - 0x0000)
struct GeometryScriptLibrary_VectorMathFunctions_ScalarBlend final
{
public:
	struct FGeometryScriptScalarList              ScalarListA;                                       // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptScalarList              ScalarListB;                                       // 0x0010(0x0010)(Parm, NativeAccessSpecifierPublic)
	double                                        ConstantA;                                         // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ConstantB;                                         // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptScalarList              ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_VectorMathFunctions_ScalarBlend) == 0x000008, "Wrong alignment on GeometryScriptLibrary_VectorMathFunctions_ScalarBlend");
static_assert(sizeof(GeometryScriptLibrary_VectorMathFunctions_ScalarBlend) == 0x000040, "Wrong size on GeometryScriptLibrary_VectorMathFunctions_ScalarBlend");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_ScalarBlend, ScalarListA) == 0x000000, "Member 'GeometryScriptLibrary_VectorMathFunctions_ScalarBlend::ScalarListA' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_ScalarBlend, ScalarListB) == 0x000010, "Member 'GeometryScriptLibrary_VectorMathFunctions_ScalarBlend::ScalarListB' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_ScalarBlend, ConstantA) == 0x000020, "Member 'GeometryScriptLibrary_VectorMathFunctions_ScalarBlend::ConstantA' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_ScalarBlend, ConstantB) == 0x000028, "Member 'GeometryScriptLibrary_VectorMathFunctions_ScalarBlend::ConstantB' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_ScalarBlend, ReturnValue) == 0x000030, "Member 'GeometryScriptLibrary_VectorMathFunctions_ScalarBlend::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_VectorMathFunctions.ScalarBlendInPlace
// 0x0030 (0x0030 - 0x0000)
struct GeometryScriptLibrary_VectorMathFunctions_ScalarBlendInPlace final
{
public:
	struct FGeometryScriptScalarList              ScalarListA;                                       // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptScalarList              ScalarListB;                                       // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	double                                        ConstantA;                                         // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ConstantB;                                         // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_VectorMathFunctions_ScalarBlendInPlace) == 0x000008, "Wrong alignment on GeometryScriptLibrary_VectorMathFunctions_ScalarBlendInPlace");
static_assert(sizeof(GeometryScriptLibrary_VectorMathFunctions_ScalarBlendInPlace) == 0x000030, "Wrong size on GeometryScriptLibrary_VectorMathFunctions_ScalarBlendInPlace");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_ScalarBlendInPlace, ScalarListA) == 0x000000, "Member 'GeometryScriptLibrary_VectorMathFunctions_ScalarBlendInPlace::ScalarListA' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_ScalarBlendInPlace, ScalarListB) == 0x000010, "Member 'GeometryScriptLibrary_VectorMathFunctions_ScalarBlendInPlace::ScalarListB' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_ScalarBlendInPlace, ConstantA) == 0x000020, "Member 'GeometryScriptLibrary_VectorMathFunctions_ScalarBlendInPlace::ConstantA' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_ScalarBlendInPlace, ConstantB) == 0x000028, "Member 'GeometryScriptLibrary_VectorMathFunctions_ScalarBlendInPlace::ConstantB' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_VectorMathFunctions.ScalarInvert
// 0x0038 (0x0038 - 0x0000)
struct GeometryScriptLibrary_VectorMathFunctions_ScalarInvert final
{
public:
	struct FGeometryScriptScalarList              ScalarList;                                        // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	double                                        Numerator;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SetOnFailure;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Epsilon;                                           // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptScalarList              ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_VectorMathFunctions_ScalarInvert) == 0x000008, "Wrong alignment on GeometryScriptLibrary_VectorMathFunctions_ScalarInvert");
static_assert(sizeof(GeometryScriptLibrary_VectorMathFunctions_ScalarInvert) == 0x000038, "Wrong size on GeometryScriptLibrary_VectorMathFunctions_ScalarInvert");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_ScalarInvert, ScalarList) == 0x000000, "Member 'GeometryScriptLibrary_VectorMathFunctions_ScalarInvert::ScalarList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_ScalarInvert, Numerator) == 0x000010, "Member 'GeometryScriptLibrary_VectorMathFunctions_ScalarInvert::Numerator' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_ScalarInvert, SetOnFailure) == 0x000018, "Member 'GeometryScriptLibrary_VectorMathFunctions_ScalarInvert::SetOnFailure' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_ScalarInvert, Epsilon) == 0x000020, "Member 'GeometryScriptLibrary_VectorMathFunctions_ScalarInvert::Epsilon' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_ScalarInvert, ReturnValue) == 0x000028, "Member 'GeometryScriptLibrary_VectorMathFunctions_ScalarInvert::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_VectorMathFunctions.ScalarInvertInPlace
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_VectorMathFunctions_ScalarInvertInPlace final
{
public:
	struct FGeometryScriptScalarList              ScalarList;                                        // 0x0000(0x0010)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	double                                        Numerator;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SetOnFailure;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Epsilon;                                           // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_VectorMathFunctions_ScalarInvertInPlace) == 0x000008, "Wrong alignment on GeometryScriptLibrary_VectorMathFunctions_ScalarInvertInPlace");
static_assert(sizeof(GeometryScriptLibrary_VectorMathFunctions_ScalarInvertInPlace) == 0x000028, "Wrong size on GeometryScriptLibrary_VectorMathFunctions_ScalarInvertInPlace");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_ScalarInvertInPlace, ScalarList) == 0x000000, "Member 'GeometryScriptLibrary_VectorMathFunctions_ScalarInvertInPlace::ScalarList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_ScalarInvertInPlace, Numerator) == 0x000010, "Member 'GeometryScriptLibrary_VectorMathFunctions_ScalarInvertInPlace::Numerator' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_ScalarInvertInPlace, SetOnFailure) == 0x000018, "Member 'GeometryScriptLibrary_VectorMathFunctions_ScalarInvertInPlace::SetOnFailure' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_ScalarInvertInPlace, Epsilon) == 0x000020, "Member 'GeometryScriptLibrary_VectorMathFunctions_ScalarInvertInPlace::Epsilon' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_VectorMathFunctions.ScalarMultiply
// 0x0038 (0x0038 - 0x0000)
struct GeometryScriptLibrary_VectorMathFunctions_ScalarMultiply final
{
public:
	struct FGeometryScriptScalarList              ScalarListA;                                       // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptScalarList              ScalarListB;                                       // 0x0010(0x0010)(Parm, NativeAccessSpecifierPublic)
	double                                        ConstantMultiplier;                                // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptScalarList              ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_VectorMathFunctions_ScalarMultiply) == 0x000008, "Wrong alignment on GeometryScriptLibrary_VectorMathFunctions_ScalarMultiply");
static_assert(sizeof(GeometryScriptLibrary_VectorMathFunctions_ScalarMultiply) == 0x000038, "Wrong size on GeometryScriptLibrary_VectorMathFunctions_ScalarMultiply");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_ScalarMultiply, ScalarListA) == 0x000000, "Member 'GeometryScriptLibrary_VectorMathFunctions_ScalarMultiply::ScalarListA' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_ScalarMultiply, ScalarListB) == 0x000010, "Member 'GeometryScriptLibrary_VectorMathFunctions_ScalarMultiply::ScalarListB' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_ScalarMultiply, ConstantMultiplier) == 0x000020, "Member 'GeometryScriptLibrary_VectorMathFunctions_ScalarMultiply::ConstantMultiplier' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_ScalarMultiply, ReturnValue) == 0x000028, "Member 'GeometryScriptLibrary_VectorMathFunctions_ScalarMultiply::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_VectorMathFunctions.ScalarMultiplyInPlace
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_VectorMathFunctions_ScalarMultiplyInPlace final
{
public:
	struct FGeometryScriptScalarList              ScalarListA;                                       // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptScalarList              ScalarListB;                                       // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	double                                        ConstantMultiplier;                                // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_VectorMathFunctions_ScalarMultiplyInPlace) == 0x000008, "Wrong alignment on GeometryScriptLibrary_VectorMathFunctions_ScalarMultiplyInPlace");
static_assert(sizeof(GeometryScriptLibrary_VectorMathFunctions_ScalarMultiplyInPlace) == 0x000028, "Wrong size on GeometryScriptLibrary_VectorMathFunctions_ScalarMultiplyInPlace");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_ScalarMultiplyInPlace, ScalarListA) == 0x000000, "Member 'GeometryScriptLibrary_VectorMathFunctions_ScalarMultiplyInPlace::ScalarListA' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_ScalarMultiplyInPlace, ScalarListB) == 0x000010, "Member 'GeometryScriptLibrary_VectorMathFunctions_ScalarMultiplyInPlace::ScalarListB' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_ScalarMultiplyInPlace, ConstantMultiplier) == 0x000020, "Member 'GeometryScriptLibrary_VectorMathFunctions_ScalarMultiplyInPlace::ConstantMultiplier' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_VectorMathFunctions.ScalarVectorMultiply
// 0x0038 (0x0038 - 0x0000)
struct GeometryScriptLibrary_VectorMathFunctions_ScalarVectorMultiply final
{
public:
	struct FGeometryScriptScalarList              ScalarList;                                        // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptVectorList              VectorList;                                        // 0x0010(0x0010)(Parm, NativeAccessSpecifierPublic)
	double                                        ScalarMultiplier;                                  // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptVectorList              ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_VectorMathFunctions_ScalarVectorMultiply) == 0x000008, "Wrong alignment on GeometryScriptLibrary_VectorMathFunctions_ScalarVectorMultiply");
static_assert(sizeof(GeometryScriptLibrary_VectorMathFunctions_ScalarVectorMultiply) == 0x000038, "Wrong size on GeometryScriptLibrary_VectorMathFunctions_ScalarVectorMultiply");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_ScalarVectorMultiply, ScalarList) == 0x000000, "Member 'GeometryScriptLibrary_VectorMathFunctions_ScalarVectorMultiply::ScalarList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_ScalarVectorMultiply, VectorList) == 0x000010, "Member 'GeometryScriptLibrary_VectorMathFunctions_ScalarVectorMultiply::VectorList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_ScalarVectorMultiply, ScalarMultiplier) == 0x000020, "Member 'GeometryScriptLibrary_VectorMathFunctions_ScalarVectorMultiply::ScalarMultiplier' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_ScalarVectorMultiply, ReturnValue) == 0x000028, "Member 'GeometryScriptLibrary_VectorMathFunctions_ScalarVectorMultiply::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_VectorMathFunctions.ScalarVectorMultiplyInPlace
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_VectorMathFunctions_ScalarVectorMultiplyInPlace final
{
public:
	struct FGeometryScriptScalarList              ScalarList;                                        // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptVectorList              VectorList;                                        // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	double                                        ScalarMultiplier;                                  // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_VectorMathFunctions_ScalarVectorMultiplyInPlace) == 0x000008, "Wrong alignment on GeometryScriptLibrary_VectorMathFunctions_ScalarVectorMultiplyInPlace");
static_assert(sizeof(GeometryScriptLibrary_VectorMathFunctions_ScalarVectorMultiplyInPlace) == 0x000028, "Wrong size on GeometryScriptLibrary_VectorMathFunctions_ScalarVectorMultiplyInPlace");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_ScalarVectorMultiplyInPlace, ScalarList) == 0x000000, "Member 'GeometryScriptLibrary_VectorMathFunctions_ScalarVectorMultiplyInPlace::ScalarList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_ScalarVectorMultiplyInPlace, VectorList) == 0x000010, "Member 'GeometryScriptLibrary_VectorMathFunctions_ScalarVectorMultiplyInPlace::VectorList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_ScalarVectorMultiplyInPlace, ScalarMultiplier) == 0x000020, "Member 'GeometryScriptLibrary_VectorMathFunctions_ScalarVectorMultiplyInPlace::ScalarMultiplier' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_VectorMathFunctions.VectorBlend
// 0x0040 (0x0040 - 0x0000)
struct GeometryScriptLibrary_VectorMathFunctions_VectorBlend final
{
public:
	struct FGeometryScriptVectorList              VectorListA;                                       // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptVectorList              VectorListB;                                       // 0x0010(0x0010)(Parm, NativeAccessSpecifierPublic)
	double                                        ConstantA;                                         // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ConstantB;                                         // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptVectorList              ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_VectorMathFunctions_VectorBlend) == 0x000008, "Wrong alignment on GeometryScriptLibrary_VectorMathFunctions_VectorBlend");
static_assert(sizeof(GeometryScriptLibrary_VectorMathFunctions_VectorBlend) == 0x000040, "Wrong size on GeometryScriptLibrary_VectorMathFunctions_VectorBlend");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_VectorBlend, VectorListA) == 0x000000, "Member 'GeometryScriptLibrary_VectorMathFunctions_VectorBlend::VectorListA' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_VectorBlend, VectorListB) == 0x000010, "Member 'GeometryScriptLibrary_VectorMathFunctions_VectorBlend::VectorListB' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_VectorBlend, ConstantA) == 0x000020, "Member 'GeometryScriptLibrary_VectorMathFunctions_VectorBlend::ConstantA' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_VectorBlend, ConstantB) == 0x000028, "Member 'GeometryScriptLibrary_VectorMathFunctions_VectorBlend::ConstantB' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_VectorBlend, ReturnValue) == 0x000030, "Member 'GeometryScriptLibrary_VectorMathFunctions_VectorBlend::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_VectorMathFunctions.VectorBlendInPlace
// 0x0030 (0x0030 - 0x0000)
struct GeometryScriptLibrary_VectorMathFunctions_VectorBlendInPlace final
{
public:
	struct FGeometryScriptVectorList              VectorListA;                                       // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptVectorList              VectorListB;                                       // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	double                                        ConstantA;                                         // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ConstantB;                                         // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_VectorMathFunctions_VectorBlendInPlace) == 0x000008, "Wrong alignment on GeometryScriptLibrary_VectorMathFunctions_VectorBlendInPlace");
static_assert(sizeof(GeometryScriptLibrary_VectorMathFunctions_VectorBlendInPlace) == 0x000030, "Wrong size on GeometryScriptLibrary_VectorMathFunctions_VectorBlendInPlace");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_VectorBlendInPlace, VectorListA) == 0x000000, "Member 'GeometryScriptLibrary_VectorMathFunctions_VectorBlendInPlace::VectorListA' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_VectorBlendInPlace, VectorListB) == 0x000010, "Member 'GeometryScriptLibrary_VectorMathFunctions_VectorBlendInPlace::VectorListB' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_VectorBlendInPlace, ConstantA) == 0x000020, "Member 'GeometryScriptLibrary_VectorMathFunctions_VectorBlendInPlace::ConstantA' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_VectorBlendInPlace, ConstantB) == 0x000028, "Member 'GeometryScriptLibrary_VectorMathFunctions_VectorBlendInPlace::ConstantB' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_VectorMathFunctions.VectorCross
// 0x0030 (0x0030 - 0x0000)
struct GeometryScriptLibrary_VectorMathFunctions_VectorCross final
{
public:
	struct FGeometryScriptVectorList              VectorListA;                                       // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptVectorList              VectorListB;                                       // 0x0010(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptVectorList              ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_VectorMathFunctions_VectorCross) == 0x000008, "Wrong alignment on GeometryScriptLibrary_VectorMathFunctions_VectorCross");
static_assert(sizeof(GeometryScriptLibrary_VectorMathFunctions_VectorCross) == 0x000030, "Wrong size on GeometryScriptLibrary_VectorMathFunctions_VectorCross");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_VectorCross, VectorListA) == 0x000000, "Member 'GeometryScriptLibrary_VectorMathFunctions_VectorCross::VectorListA' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_VectorCross, VectorListB) == 0x000010, "Member 'GeometryScriptLibrary_VectorMathFunctions_VectorCross::VectorListB' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_VectorCross, ReturnValue) == 0x000020, "Member 'GeometryScriptLibrary_VectorMathFunctions_VectorCross::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_VectorMathFunctions.VectorDot
// 0x0030 (0x0030 - 0x0000)
struct GeometryScriptLibrary_VectorMathFunctions_VectorDot final
{
public:
	struct FGeometryScriptVectorList              VectorListA;                                       // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptVectorList              VectorListB;                                       // 0x0010(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptScalarList              ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_VectorMathFunctions_VectorDot) == 0x000008, "Wrong alignment on GeometryScriptLibrary_VectorMathFunctions_VectorDot");
static_assert(sizeof(GeometryScriptLibrary_VectorMathFunctions_VectorDot) == 0x000030, "Wrong size on GeometryScriptLibrary_VectorMathFunctions_VectorDot");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_VectorDot, VectorListA) == 0x000000, "Member 'GeometryScriptLibrary_VectorMathFunctions_VectorDot::VectorListA' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_VectorDot, VectorListB) == 0x000010, "Member 'GeometryScriptLibrary_VectorMathFunctions_VectorDot::VectorListB' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_VectorDot, ReturnValue) == 0x000020, "Member 'GeometryScriptLibrary_VectorMathFunctions_VectorDot::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_VectorMathFunctions.VectorLength
// 0x0020 (0x0020 - 0x0000)
struct GeometryScriptLibrary_VectorMathFunctions_VectorLength final
{
public:
	struct FGeometryScriptVectorList              VectorList;                                        // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGeometryScriptScalarList              ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_VectorMathFunctions_VectorLength) == 0x000008, "Wrong alignment on GeometryScriptLibrary_VectorMathFunctions_VectorLength");
static_assert(sizeof(GeometryScriptLibrary_VectorMathFunctions_VectorLength) == 0x000020, "Wrong size on GeometryScriptLibrary_VectorMathFunctions_VectorLength");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_VectorLength, VectorList) == 0x000000, "Member 'GeometryScriptLibrary_VectorMathFunctions_VectorLength::VectorList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_VectorLength, ReturnValue) == 0x000010, "Member 'GeometryScriptLibrary_VectorMathFunctions_VectorLength::ReturnValue' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_VectorMathFunctions.VectorNormalizeInPlace
// 0x0028 (0x0028 - 0x0000)
struct GeometryScriptLibrary_VectorMathFunctions_VectorNormalizeInPlace final
{
public:
	struct FGeometryScriptVectorList              VectorList;                                        // 0x0000(0x0010)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                SetOnFailure;                                      // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_VectorMathFunctions_VectorNormalizeInPlace) == 0x000008, "Wrong alignment on GeometryScriptLibrary_VectorMathFunctions_VectorNormalizeInPlace");
static_assert(sizeof(GeometryScriptLibrary_VectorMathFunctions_VectorNormalizeInPlace) == 0x000028, "Wrong size on GeometryScriptLibrary_VectorMathFunctions_VectorNormalizeInPlace");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_VectorNormalizeInPlace, VectorList) == 0x000000, "Member 'GeometryScriptLibrary_VectorMathFunctions_VectorNormalizeInPlace::VectorList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_VectorNormalizeInPlace, SetOnFailure) == 0x000010, "Member 'GeometryScriptLibrary_VectorMathFunctions_VectorNormalizeInPlace::SetOnFailure' has a wrong offset!");

// Function GeometryScriptingCore.GeometryScriptLibrary_VectorMathFunctions.VectorToScalar
// 0x0038 (0x0038 - 0x0000)
struct GeometryScriptLibrary_VectorMathFunctions_VectorToScalar final
{
public:
	struct FGeometryScriptVectorList              VectorList;                                        // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	double                                        ConstantX;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ConstantY;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ConstantZ;                                         // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptScalarList              ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryScriptLibrary_VectorMathFunctions_VectorToScalar) == 0x000008, "Wrong alignment on GeometryScriptLibrary_VectorMathFunctions_VectorToScalar");
static_assert(sizeof(GeometryScriptLibrary_VectorMathFunctions_VectorToScalar) == 0x000038, "Wrong size on GeometryScriptLibrary_VectorMathFunctions_VectorToScalar");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_VectorToScalar, VectorList) == 0x000000, "Member 'GeometryScriptLibrary_VectorMathFunctions_VectorToScalar::VectorList' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_VectorToScalar, ConstantX) == 0x000010, "Member 'GeometryScriptLibrary_VectorMathFunctions_VectorToScalar::ConstantX' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_VectorToScalar, ConstantY) == 0x000018, "Member 'GeometryScriptLibrary_VectorMathFunctions_VectorToScalar::ConstantY' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_VectorToScalar, ConstantZ) == 0x000020, "Member 'GeometryScriptLibrary_VectorMathFunctions_VectorToScalar::ConstantZ' has a wrong offset!");
static_assert(offsetof(GeometryScriptLibrary_VectorMathFunctions_VectorToScalar, ReturnValue) == 0x000028, "Member 'GeometryScriptLibrary_VectorMathFunctions_VectorToScalar::ReturnValue' has a wrong offset!");

}

