#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_TeamLogo

#include "Basic.hpp"

#include "ETeamID_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WB_TeamLogo.WB_TeamLogo_C.ExecuteUbergraph_WB_TeamLogo
// 0x0100 (0x0100 - 0x0000)
struct WB_TeamLogo_C_ExecuteUbergraph_WB_TeamLogo final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_392E[0xC];                                     // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            CallFunc_Get_Logo_Brush_0_ReturnValue;             // 0x0010(0x00D0)()
	class FText                                   CallFunc_Get_Name_Text_0_ReturnValue;              // 0x00E0(0x0018)()
	bool                                          K2Node_Event_IsDesignTime;                         // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_TeamLogo_C_ExecuteUbergraph_WB_TeamLogo) == 0x000010, "Wrong alignment on WB_TeamLogo_C_ExecuteUbergraph_WB_TeamLogo");
static_assert(sizeof(WB_TeamLogo_C_ExecuteUbergraph_WB_TeamLogo) == 0x000100, "Wrong size on WB_TeamLogo_C_ExecuteUbergraph_WB_TeamLogo");
static_assert(offsetof(WB_TeamLogo_C_ExecuteUbergraph_WB_TeamLogo, EntryPoint) == 0x000000, "Member 'WB_TeamLogo_C_ExecuteUbergraph_WB_TeamLogo::EntryPoint' has a wrong offset!");
static_assert(offsetof(WB_TeamLogo_C_ExecuteUbergraph_WB_TeamLogo, CallFunc_Get_Logo_Brush_0_ReturnValue) == 0x000010, "Member 'WB_TeamLogo_C_ExecuteUbergraph_WB_TeamLogo::CallFunc_Get_Logo_Brush_0_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_TeamLogo_C_ExecuteUbergraph_WB_TeamLogo, CallFunc_Get_Name_Text_0_ReturnValue) == 0x0000E0, "Member 'WB_TeamLogo_C_ExecuteUbergraph_WB_TeamLogo::CallFunc_Get_Name_Text_0_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_TeamLogo_C_ExecuteUbergraph_WB_TeamLogo, K2Node_Event_IsDesignTime) == 0x0000F8, "Member 'WB_TeamLogo_C_ExecuteUbergraph_WB_TeamLogo::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function WB_TeamLogo.WB_TeamLogo_C.Get_Logo_Brush_0
// 0x01D0 (0x01D0 - 0x0000)
struct WB_TeamLogo_C_Get_Logo_Brush_0 final
{
public:
	struct FSlateBrush                            ReturnValue;                                       // 0x0000(0x00D0)(Parm, OutParm, ReturnParm)
	ETeamID                                       Temp_byte_Variable;                                // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_392F[0x7];                                     // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable;                              // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_1;                            // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_2;                            // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default;                             // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3930[0x8];                                     // 0x00F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            CallFunc_MakeBrushFromTexture_ReturnValue;         // 0x0100(0x00D0)()
};
static_assert(alignof(WB_TeamLogo_C_Get_Logo_Brush_0) == 0x000010, "Wrong alignment on WB_TeamLogo_C_Get_Logo_Brush_0");
static_assert(sizeof(WB_TeamLogo_C_Get_Logo_Brush_0) == 0x0001D0, "Wrong size on WB_TeamLogo_C_Get_Logo_Brush_0");
static_assert(offsetof(WB_TeamLogo_C_Get_Logo_Brush_0, ReturnValue) == 0x000000, "Member 'WB_TeamLogo_C_Get_Logo_Brush_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_TeamLogo_C_Get_Logo_Brush_0, Temp_byte_Variable) == 0x0000D0, "Member 'WB_TeamLogo_C_Get_Logo_Brush_0::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WB_TeamLogo_C_Get_Logo_Brush_0, Temp_object_Variable) == 0x0000D8, "Member 'WB_TeamLogo_C_Get_Logo_Brush_0::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(WB_TeamLogo_C_Get_Logo_Brush_0, Temp_object_Variable_1) == 0x0000E0, "Member 'WB_TeamLogo_C_Get_Logo_Brush_0::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(WB_TeamLogo_C_Get_Logo_Brush_0, Temp_object_Variable_2) == 0x0000E8, "Member 'WB_TeamLogo_C_Get_Logo_Brush_0::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(WB_TeamLogo_C_Get_Logo_Brush_0, K2Node_Select_Default) == 0x0000F0, "Member 'WB_TeamLogo_C_Get_Logo_Brush_0::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WB_TeamLogo_C_Get_Logo_Brush_0, CallFunc_MakeBrushFromTexture_ReturnValue) == 0x000100, "Member 'WB_TeamLogo_C_Get_Logo_Brush_0::CallFunc_MakeBrushFromTexture_ReturnValue' has a wrong offset!");

// Function WB_TeamLogo.WB_TeamLogo_C.Get_Name_Text_0
// 0x0080 (0x0080 - 0x0000)
struct WB_TeamLogo_C_Get_Name_Text_0 final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm)
	ETeamID                                       Temp_byte_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3931[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0020(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0038(0x0018)()
	class FText                                   Temp_text_Variable_2;                              // 0x0050(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x0068(0x0018)()
};
static_assert(alignof(WB_TeamLogo_C_Get_Name_Text_0) == 0x000008, "Wrong alignment on WB_TeamLogo_C_Get_Name_Text_0");
static_assert(sizeof(WB_TeamLogo_C_Get_Name_Text_0) == 0x000080, "Wrong size on WB_TeamLogo_C_Get_Name_Text_0");
static_assert(offsetof(WB_TeamLogo_C_Get_Name_Text_0, ReturnValue) == 0x000000, "Member 'WB_TeamLogo_C_Get_Name_Text_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_TeamLogo_C_Get_Name_Text_0, Temp_byte_Variable) == 0x000018, "Member 'WB_TeamLogo_C_Get_Name_Text_0::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WB_TeamLogo_C_Get_Name_Text_0, Temp_text_Variable) == 0x000020, "Member 'WB_TeamLogo_C_Get_Name_Text_0::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(WB_TeamLogo_C_Get_Name_Text_0, Temp_text_Variable_1) == 0x000038, "Member 'WB_TeamLogo_C_Get_Name_Text_0::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(WB_TeamLogo_C_Get_Name_Text_0, Temp_text_Variable_2) == 0x000050, "Member 'WB_TeamLogo_C_Get_Name_Text_0::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(WB_TeamLogo_C_Get_Name_Text_0, K2Node_Select_Default) == 0x000068, "Member 'WB_TeamLogo_C_Get_Name_Text_0::K2Node_Select_Default' has a wrong offset!");

// Function WB_TeamLogo.WB_TeamLogo_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WB_TeamLogo_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_TeamLogo_C_PreConstruct) == 0x000001, "Wrong alignment on WB_TeamLogo_C_PreConstruct");
static_assert(sizeof(WB_TeamLogo_C_PreConstruct) == 0x000001, "Wrong size on WB_TeamLogo_C_PreConstruct");
static_assert(offsetof(WB_TeamLogo_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WB_TeamLogo_C_PreConstruct::IsDesignTime' has a wrong offset!");

}

