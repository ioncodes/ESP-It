#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_InventoryManager

#include "Basic.hpp"

#include "B_InventoryManager_classes.hpp"
#include "B_InventoryManager_parameters.hpp"


namespace SDK
{

// Function B_InventoryManager.B_InventoryManager_C.OnUpdatedFromSteam__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UB_InventoryManager_C::OnUpdatedFromSteam__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "OnUpdatedFromSteam__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_InventoryManager.B_InventoryManager_C.OnItemCrafted__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// EItemCraftResult                        ItemCraftResult                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_InventoryManager_C::OnItemCrafted__DelegateSignature(EItemCraftResult ItemCraftResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "OnItemCrafted__DelegateSignature");

	Params::B_InventoryManager_C_OnItemCrafted__DelegateSignature Parms{};

	Parms.ItemCraftResult = ItemCraftResult;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_InventoryManager.B_InventoryManager_C.AddGrantedItems
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FBlueprintOnlineItem>     NewItems                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UB_InventoryManager_C::AddGrantedItems(TArray<struct FBlueprintOnlineItem>& NewItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "AddGrantedItems");

	Params::B_InventoryManager_C_AddGrantedItems Parms{};

	Parms.NewItems = std::move(NewItems);

	UObject::ProcessEvent(Func, &Parms);

	NewItems = std::move(Parms.NewItems);
}


// Function B_InventoryManager.B_InventoryManager_C.CheckAndConsumeAfterEventItems
// (BlueprintCallable, BlueprintEvent)

void UB_InventoryManager_C::CheckAndConsumeAfterEventItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "CheckAndConsumeAfterEventItems");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_InventoryManager.B_InventoryManager_C.CheckItemValidity
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   ItemId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_InventoryManager_C::CheckItemValidity(int32 ItemId, bool* IsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "CheckItemValidity");

	Params::B_InventoryManager_C_CheckItemValidity Parms{};

	Parms.ItemId = ItemId;

	UObject::ProcessEvent(Func, &Parms);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;
}


// Function B_InventoryManager.B_InventoryManager_C.CheckNotifyState
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FS_ItemInfo>              Items                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    NewItems                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewHunter                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewWitch                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewIcon                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_InventoryManager_C::CheckNotifyState(TArray<struct FS_ItemInfo>& Items, bool* NewItems, bool* NewHunter, bool* NewWitch, bool* NewIcon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "CheckNotifyState");

	Params::B_InventoryManager_C_CheckNotifyState Parms{};

	Parms.Items = std::move(Items);

	UObject::ProcessEvent(Func, &Parms);

	Items = std::move(Parms.Items);

	if (NewItems != nullptr)
		*NewItems = Parms.NewItems;

	if (NewHunter != nullptr)
		*NewHunter = Parms.NewHunter;

	if (NewWitch != nullptr)
		*NewWitch = Parms.NewWitch;

	if (NewIcon != nullptr)
		*NewIcon = Parms.NewIcon;
}


// Function B_InventoryManager.B_InventoryManager_C.CheckSetNotifyState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           SetIds                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    New                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_InventoryManager_C::CheckSetNotifyState(TArray<int32>& SetIds, bool* New)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "CheckSetNotifyState");

	Params::B_InventoryManager_C_CheckSetNotifyState Parms{};

	Parms.SetIds = std::move(SetIds);

	UObject::ProcessEvent(Func, &Parms);

	SetIds = std::move(Parms.SetIds);

	if (New != nullptr)
		*New = Parms.New;
}


// Function B_InventoryManager.B_InventoryManager_C.CollectSkinUnlocks
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           UnlockedItemIds                                        (Parm, OutParm)

void UB_InventoryManager_C::CollectSkinUnlocks(TArray<int32>* UnlockedItemIds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "CollectSkinUnlocks");

	Params::B_InventoryManager_C_CollectSkinUnlocks Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (UnlockedItemIds != nullptr)
		*UnlockedItemIds = std::move(Parms.UnlockedItemIds);
}


// Function B_InventoryManager.B_InventoryManager_C.ConsumeNextEventItem
// (BlueprintCallable, BlueprintEvent)

void UB_InventoryManager_C::ConsumeNextEventItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "ConsumeNextEventItem");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_InventoryManager.B_InventoryManager_C.CountItemToQuantity
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FBlueprintOnlineItem             Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)

void UB_InventoryManager_C::CountItemToQuantity(struct FBlueprintOnlineItem& Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "CountItemToQuantity");

	Params::B_InventoryManager_C_CountItemToQuantity Parms{};

	Parms.Item = std::move(Item);

	UObject::ProcessEvent(Func, &Parms);

	Item = std::move(Parms.Item);
}


// Function B_InventoryManager.B_InventoryManager_C.CraftItem
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           ItemsToCraft_0                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<int32>                           ReagentIDs_0                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   AmountToCraft_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_InventoryManager_C::CraftItem(const TArray<int32>& ItemsToCraft_0, const TArray<int32>& ReagentIDs_0, int32 AmountToCraft_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "CraftItem");

	Params::B_InventoryManager_C_CraftItem Parms{};

	Parms.ItemsToCraft_0 = std::move(ItemsToCraft_0);
	Parms.ReagentIDs_0 = std::move(ReagentIDs_0);
	Parms.AmountToCraft_0 = AmountToCraft_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_InventoryManager.B_InventoryManager_C.DevGrantAllItems
// (BlueprintCallable, BlueprintEvent)

void UB_InventoryManager_C::DevGrantAllItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "DevGrantAllItems");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_InventoryManager.B_InventoryManager_C.ExecuteUbergraph_B_InventoryManager
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_InventoryManager_C::ExecuteUbergraph_B_InventoryManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "ExecuteUbergraph_B_InventoryManager");

	Params::B_InventoryManager_C_ExecuteUbergraph_B_InventoryManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_InventoryManager.B_InventoryManager_C.FastReloadItems
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FBlueprintOnlineItem>     UpdatedItems                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FBlueprintOnlineItem>     NewItems                                               (Parm, OutParm)

void UB_InventoryManager_C::FastReloadItems(TArray<struct FBlueprintOnlineItem>& UpdatedItems, TArray<struct FBlueprintOnlineItem>* NewItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "FastReloadItems");

	Params::B_InventoryManager_C_FastReloadItems Parms{};

	Parms.UpdatedItems = std::move(UpdatedItems);

	UObject::ProcessEvent(Func, &Parms);

	UpdatedItems = std::move(Parms.UpdatedItems);

	if (NewItems != nullptr)
		*NewItems = std::move(Parms.NewItems);
}


// Function B_InventoryManager.B_InventoryManager_C.GetAllItemsBySlot
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_Slot                                  Slot                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FS_ItemInfo>              ItemInfos                                              (Parm, OutParm)

void UB_InventoryManager_C::GetAllItemsBySlot(E_Slot Slot, TArray<struct FS_ItemInfo>* ItemInfos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "GetAllItemsBySlot");

	Params::B_InventoryManager_C_GetAllItemsBySlot Parms{};

	Parms.Slot = Slot;

	UObject::ProcessEvent(Func, &Parms);

	if (ItemInfos != nullptr)
		*ItemInfos = std::move(Parms.ItemInfos);
}


// Function B_InventoryManager.B_InventoryManager_C.GetAllOwningRecipes
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FS_RecipeInfo>            ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<struct FS_RecipeInfo> UB_InventoryManager_C::GetAllOwningRecipes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "GetAllOwningRecipes");

	Params::B_InventoryManager_C_GetAllOwningRecipes Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_InventoryManager.B_InventoryManager_C.GetItemQuantity
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   ItemId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UB_InventoryManager_C::GetItemQuantity(int32 ItemId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "GetItemQuantity");

	Params::B_InventoryManager_C_GetItemQuantity Parms{};

	Parms.ItemId = ItemId;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_InventoryManager.B_InventoryManager_C.GetOwnedIngredientItems
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<int32>                           IngredientDefinitionIds                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FBlueprintOnlineItem>     IngredientItems                                        (Parm, OutParm)

void UB_InventoryManager_C::GetOwnedIngredientItems(TArray<int32>& IngredientDefinitionIds, TArray<struct FBlueprintOnlineItem>* IngredientItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "GetOwnedIngredientItems");

	Params::B_InventoryManager_C_GetOwnedIngredientItems Parms{};

	Parms.IngredientDefinitionIds = std::move(IngredientDefinitionIds);

	UObject::ProcessEvent(Func, &Parms);

	IngredientDefinitionIds = std::move(Parms.IngredientDefinitionIds);

	if (IngredientItems != nullptr)
		*IngredientItems = std::move(Parms.IngredientItems);
}


// Function B_InventoryManager.B_InventoryManager_C.GetPlayerController
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UB_InventoryManager_C::GetPlayerController(class APlayerController** PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "GetPlayerController");

	Params::B_InventoryManager_C_GetPlayerController Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PlayerController != nullptr)
		*PlayerController = Parms.PlayerController;
}


// Function B_InventoryManager.B_InventoryManager_C.GetRecipe
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   RecipeId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_RecipeInfo                    ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash)

struct FS_RecipeInfo UB_InventoryManager_C::GetRecipe(int32 RecipeId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "GetRecipe");

	Params::B_InventoryManager_C_GetRecipe Parms{};

	Parms.RecipeId = RecipeId;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_InventoryManager.B_InventoryManager_C.GetRecipes
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FS_RecipeInfo>            ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<struct FS_RecipeInfo> UB_InventoryManager_C::GetRecipes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "GetRecipes");

	Params::B_InventoryManager_C_GetRecipes Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_InventoryManager.B_InventoryManager_C.GetSkinItem
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   ItemId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_ItemInfo                      ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash)
// bool                                    Found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FS_ItemInfo UB_InventoryManager_C::GetSkinItem(int32 ItemId, bool* Found)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "GetSkinItem");

	Params::B_InventoryManager_C_GetSkinItem Parms{};

	Parms.ItemId = ItemId;

	UObject::ProcessEvent(Func, &Parms);

	if (Found != nullptr)
		*Found = Parms.Found;

	return Parms.ReturnValue;
}


// Function B_InventoryManager.B_InventoryManager_C.GetSkinItemIdBySoftReference
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TSoftClassPtr<class UClass>             SkinItem                                               (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UB_InventoryManager_C::GetSkinItemIdBySoftReference(TSoftClassPtr<class UClass> SkinItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "GetSkinItemIdBySoftReference");

	Params::B_InventoryManager_C_GetSkinItemIdBySoftReference Parms{};

	Parms.SkinItem = SkinItem;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_InventoryManager.B_InventoryManager_C.GetSkinItems
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FS_ItemInfo>              ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<struct FS_ItemInfo> UB_InventoryManager_C::GetSkinItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "GetSkinItems");

	Params::B_InventoryManager_C_GetSkinItems Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_InventoryManager.B_InventoryManager_C.GetSkinItemSets
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// ETeamID                                 Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FS_ItemSetInfo>           ItemSets                                               (Parm, OutParm)

void UB_InventoryManager_C::GetSkinItemSets(ETeamID Team, TArray<struct FS_ItemSetInfo>* ItemSets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "GetSkinItemSets");

	Params::B_InventoryManager_C_GetSkinItemSets Parms{};

	Parms.Team = Team;

	UObject::ProcessEvent(Func, &Parms);

	if (ItemSets != nullptr)
		*ItemSets = std::move(Parms.ItemSets);
}


// Function B_InventoryManager.B_InventoryManager_C.GetSkinSoftReference
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   ItemId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TSoftClassPtr<class UClass>             ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash)

TSoftClassPtr<class UClass> UB_InventoryManager_C::GetSkinSoftReference(int32 ItemId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "GetSkinSoftReference");

	Params::B_InventoryManager_C_GetSkinSoftReference Parms{};

	Parms.ItemId = ItemId;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_InventoryManager.B_InventoryManager_C.GetSteamItemData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FBlueprintOnlineItem             Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
// bool                                    IsFastReload                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_InventoryManager_C::GetSteamItemData(struct FBlueprintOnlineItem& Item, bool IsFastReload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "GetSteamItemData");

	Params::B_InventoryManager_C_GetSteamItemData Parms{};

	Parms.Item = std::move(Item);
	Parms.IsFastReload = IsFastReload;

	UObject::ProcessEvent(Func, &Parms);

	Item = std::move(Parms.Item);
}


// Function B_InventoryManager.B_InventoryManager_C.GetSteamItemDef
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   ItemId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FB_SteamItemDef                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

struct FB_SteamItemDef UB_InventoryManager_C::GetSteamItemDef(int32 ItemId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "GetSteamItemDef");

	Params::B_InventoryManager_C_GetSteamItemDef Parms{};

	Parms.ItemId = ItemId;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_InventoryManager.B_InventoryManager_C.GetUnownedItemIDs
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           Unowned_Item_IDs                                       (Parm, OutParm)

void UB_InventoryManager_C::GetUnownedItemIDs(TArray<int32>* Unowned_Item_IDs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "GetUnownedItemIDs");

	Params::B_InventoryManager_C_GetUnownedItemIDs Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Unowned_Item_IDs != nullptr)
		*Unowned_Item_IDs = std::move(Parms.Unowned_Item_IDs);
}


// Function B_InventoryManager.B_InventoryManager_C.InitAllRecipes
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UB_InventoryManager_C::InitAllRecipes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "InitAllRecipes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_InventoryManager.B_InventoryManager_C.InitAllSkinItems
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UB_InventoryManager_C::InitAllSkinItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "InitAllSkinItems");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_InventoryManager.B_InventoryManager_C.IsEquippedItemValid
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UClass*                           SkinItemClass                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// E_Slot                                  Slot                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UB_InventoryManager_C::IsEquippedItemValid(class UClass* SkinItemClass, E_Slot Slot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "IsEquippedItemValid");

	Params::B_InventoryManager_C_IsEquippedItemValid Parms{};

	Parms.SkinItemClass = SkinItemClass;
	Parms.Slot = Slot;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_InventoryManager.B_InventoryManager_C.IsItemIdValid
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   ItemId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UB_InventoryManager_C::IsItemIdValid(int32 ItemId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "IsItemIdValid");

	Params::B_InventoryManager_C_IsItemIdValid Parms{};

	Parms.ItemId = ItemId;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_InventoryManager.B_InventoryManager_C.IsItemToBeConsumed
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FBlueprintOnlineItem             OnlineItem                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UB_InventoryManager_C::IsItemToBeConsumed(const struct FBlueprintOnlineItem& OnlineItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "IsItemToBeConsumed");

	Params::B_InventoryManager_C_IsItemToBeConsumed Parms{};

	Parms.OnlineItem = std::move(OnlineItem);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_InventoryManager.B_InventoryManager_C.IsNewItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   ItemId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    New                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_InventoryManager_C::IsNewItem(int32 ItemId, bool* New)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "IsNewItem");

	Params::B_InventoryManager_C_IsNewItem Parms{};

	Parms.ItemId = ItemId;

	UObject::ProcessEvent(Func, &Parms);

	if (New != nullptr)
		*New = Parms.New;
}


// Function B_InventoryManager.B_InventoryManager_C.IsRecipeIdValid
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   RecipeId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UB_InventoryManager_C::IsRecipeIdValid(int32 RecipeId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "IsRecipeIdValid");

	Params::B_InventoryManager_C_IsRecipeIdValid Parms{};

	Parms.RecipeId = RecipeId;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_InventoryManager.B_InventoryManager_C.IsSteamValid
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UB_InventoryManager_C::IsSteamValid()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "IsSteamValid");

	Params::B_InventoryManager_C_IsSteamValid Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_InventoryManager.B_InventoryManager_C.IsUpdating
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsUpdating_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_InventoryManager_C::IsUpdating(bool* IsUpdating_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "IsUpdating");

	Params::B_InventoryManager_C_IsUpdating Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsUpdating_0 != nullptr)
		*IsUpdating_0 = Parms.IsUpdating_0;
}


// Function B_InventoryManager.B_InventoryManager_C.OnFailure_0AD4911A4B4941B8D52F1FA4362F425C
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FBlueprintOnlineItem>     Items                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UB_InventoryManager_C::OnFailure_0AD4911A4B4941B8D52F1FA4362F425C(const TArray<struct FBlueprintOnlineItem>& Items)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "OnFailure_0AD4911A4B4941B8D52F1FA4362F425C");

	Params::B_InventoryManager_C_OnFailure_0AD4911A4B4941B8D52F1FA4362F425C Parms{};

	Parms.Items = std::move(Items);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_InventoryManager.B_InventoryManager_C.OnFailure_1D916844485D6967DF5F0B9383799404
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FBlueprintOnlineItem>     Items                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UB_InventoryManager_C::OnFailure_1D916844485D6967DF5F0B9383799404(const TArray<struct FBlueprintOnlineItem>& Items)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "OnFailure_1D916844485D6967DF5F0B9383799404");

	Params::B_InventoryManager_C_OnFailure_1D916844485D6967DF5F0B9383799404 Parms{};

	Parms.Items = std::move(Items);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_InventoryManager.B_InventoryManager_C.OnFailure_5EC28FB942A3EDA48879C180300AF41E
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FBlueprintOnlineItem>     Items                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UB_InventoryManager_C::OnFailure_5EC28FB942A3EDA48879C180300AF41E(const TArray<struct FBlueprintOnlineItem>& Items)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "OnFailure_5EC28FB942A3EDA48879C180300AF41E");

	Params::B_InventoryManager_C_OnFailure_5EC28FB942A3EDA48879C180300AF41E Parms{};

	Parms.Items = std::move(Items);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_InventoryManager.B_InventoryManager_C.OnFailure_714A7F9C4C48267E57464A9EB1BF3720
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FBlueprintOnlineItem>     Items                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UB_InventoryManager_C::OnFailure_714A7F9C4C48267E57464A9EB1BF3720(const TArray<struct FBlueprintOnlineItem>& Items)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "OnFailure_714A7F9C4C48267E57464A9EB1BF3720");

	Params::B_InventoryManager_C_OnFailure_714A7F9C4C48267E57464A9EB1BF3720 Parms{};

	Parms.Items = std::move(Items);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_InventoryManager.B_InventoryManager_C.OnFailure_718E7D4147DDB29D64156ABBF9C28E26
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FBlueprintOnlineItem>     Items                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UB_InventoryManager_C::OnFailure_718E7D4147DDB29D64156ABBF9C28E26(const TArray<struct FBlueprintOnlineItem>& Items)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "OnFailure_718E7D4147DDB29D64156ABBF9C28E26");

	Params::B_InventoryManager_C_OnFailure_718E7D4147DDB29D64156ABBF9C28E26 Parms{};

	Parms.Items = std::move(Items);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_InventoryManager.B_InventoryManager_C.OnFailure_865DFE1643EC4C6F3D78B8AD7A69B144
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FBlueprintOnlineItem>     Items                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UB_InventoryManager_C::OnFailure_865DFE1643EC4C6F3D78B8AD7A69B144(const TArray<struct FBlueprintOnlineItem>& Items)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "OnFailure_865DFE1643EC4C6F3D78B8AD7A69B144");

	Params::B_InventoryManager_C_OnFailure_865DFE1643EC4C6F3D78B8AD7A69B144 Parms{};

	Parms.Items = std::move(Items);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_InventoryManager.B_InventoryManager_C.OnFailure_A37949614F8D29539A38D5A00318FD74
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FBlueprintOnlineItem>     Items                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UB_InventoryManager_C::OnFailure_A37949614F8D29539A38D5A00318FD74(const TArray<struct FBlueprintOnlineItem>& Items)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "OnFailure_A37949614F8D29539A38D5A00318FD74");

	Params::B_InventoryManager_C_OnFailure_A37949614F8D29539A38D5A00318FD74 Parms{};

	Parms.Items = std::move(Items);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_InventoryManager.B_InventoryManager_C.OnFailure_B4A9F58142D273010A63E5BC8DEC5CC6
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FBlueprintOnlineItem>     Items                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UB_InventoryManager_C::OnFailure_B4A9F58142D273010A63E5BC8DEC5CC6(const TArray<struct FBlueprintOnlineItem>& Items)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "OnFailure_B4A9F58142D273010A63E5BC8DEC5CC6");

	Params::B_InventoryManager_C_OnFailure_B4A9F58142D273010A63E5BC8DEC5CC6 Parms{};

	Parms.Items = std::move(Items);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_InventoryManager.B_InventoryManager_C.OnFailure_E89308694B33FF2811EE8A8208A57050
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FBlueprintOnlineItem>     Items                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UB_InventoryManager_C::OnFailure_E89308694B33FF2811EE8A8208A57050(const TArray<struct FBlueprintOnlineItem>& Items)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "OnFailure_E89308694B33FF2811EE8A8208A57050");

	Params::B_InventoryManager_C_OnFailure_E89308694B33FF2811EE8A8208A57050 Parms{};

	Parms.Items = std::move(Items);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_InventoryManager.B_InventoryManager_C.OnFailure_EDAC6D924408692EE5962598A11B2935
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FBlueprintOnlineItem>     Items                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UB_InventoryManager_C::OnFailure_EDAC6D924408692EE5962598A11B2935(const TArray<struct FBlueprintOnlineItem>& Items)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "OnFailure_EDAC6D924408692EE5962598A11B2935");

	Params::B_InventoryManager_C_OnFailure_EDAC6D924408692EE5962598A11B2935 Parms{};

	Parms.Items = std::move(Items);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_InventoryManager.B_InventoryManager_C.OnSuccess_0AD4911A4B4941B8D52F1FA4362F425C
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FBlueprintOnlineItem>     Items                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UB_InventoryManager_C::OnSuccess_0AD4911A4B4941B8D52F1FA4362F425C(const TArray<struct FBlueprintOnlineItem>& Items)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "OnSuccess_0AD4911A4B4941B8D52F1FA4362F425C");

	Params::B_InventoryManager_C_OnSuccess_0AD4911A4B4941B8D52F1FA4362F425C Parms{};

	Parms.Items = std::move(Items);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_InventoryManager.B_InventoryManager_C.OnSuccess_1D916844485D6967DF5F0B9383799404
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FBlueprintOnlineItem>     Items                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UB_InventoryManager_C::OnSuccess_1D916844485D6967DF5F0B9383799404(const TArray<struct FBlueprintOnlineItem>& Items)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "OnSuccess_1D916844485D6967DF5F0B9383799404");

	Params::B_InventoryManager_C_OnSuccess_1D916844485D6967DF5F0B9383799404 Parms{};

	Parms.Items = std::move(Items);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_InventoryManager.B_InventoryManager_C.OnSuccess_5EC28FB942A3EDA48879C180300AF41E
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FBlueprintOnlineItem>     Items                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UB_InventoryManager_C::OnSuccess_5EC28FB942A3EDA48879C180300AF41E(const TArray<struct FBlueprintOnlineItem>& Items)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "OnSuccess_5EC28FB942A3EDA48879C180300AF41E");

	Params::B_InventoryManager_C_OnSuccess_5EC28FB942A3EDA48879C180300AF41E Parms{};

	Parms.Items = std::move(Items);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_InventoryManager.B_InventoryManager_C.OnSuccess_714A7F9C4C48267E57464A9EB1BF3720
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FBlueprintOnlineItem>     Items                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UB_InventoryManager_C::OnSuccess_714A7F9C4C48267E57464A9EB1BF3720(const TArray<struct FBlueprintOnlineItem>& Items)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "OnSuccess_714A7F9C4C48267E57464A9EB1BF3720");

	Params::B_InventoryManager_C_OnSuccess_714A7F9C4C48267E57464A9EB1BF3720 Parms{};

	Parms.Items = std::move(Items);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_InventoryManager.B_InventoryManager_C.OnSuccess_718E7D4147DDB29D64156ABBF9C28E26
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FBlueprintOnlineItem>     Items                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UB_InventoryManager_C::OnSuccess_718E7D4147DDB29D64156ABBF9C28E26(const TArray<struct FBlueprintOnlineItem>& Items)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "OnSuccess_718E7D4147DDB29D64156ABBF9C28E26");

	Params::B_InventoryManager_C_OnSuccess_718E7D4147DDB29D64156ABBF9C28E26 Parms{};

	Parms.Items = std::move(Items);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_InventoryManager.B_InventoryManager_C.OnSuccess_865DFE1643EC4C6F3D78B8AD7A69B144
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FBlueprintOnlineItem>     Items                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UB_InventoryManager_C::OnSuccess_865DFE1643EC4C6F3D78B8AD7A69B144(const TArray<struct FBlueprintOnlineItem>& Items)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "OnSuccess_865DFE1643EC4C6F3D78B8AD7A69B144");

	Params::B_InventoryManager_C_OnSuccess_865DFE1643EC4C6F3D78B8AD7A69B144 Parms{};

	Parms.Items = std::move(Items);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_InventoryManager.B_InventoryManager_C.OnSuccess_A37949614F8D29539A38D5A00318FD74
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FBlueprintOnlineItem>     Items                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UB_InventoryManager_C::OnSuccess_A37949614F8D29539A38D5A00318FD74(const TArray<struct FBlueprintOnlineItem>& Items)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "OnSuccess_A37949614F8D29539A38D5A00318FD74");

	Params::B_InventoryManager_C_OnSuccess_A37949614F8D29539A38D5A00318FD74 Parms{};

	Parms.Items = std::move(Items);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_InventoryManager.B_InventoryManager_C.OnSuccess_B4A9F58142D273010A63E5BC8DEC5CC6
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FBlueprintOnlineItem>     Items                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UB_InventoryManager_C::OnSuccess_B4A9F58142D273010A63E5BC8DEC5CC6(const TArray<struct FBlueprintOnlineItem>& Items)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "OnSuccess_B4A9F58142D273010A63E5BC8DEC5CC6");

	Params::B_InventoryManager_C_OnSuccess_B4A9F58142D273010A63E5BC8DEC5CC6 Parms{};

	Parms.Items = std::move(Items);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_InventoryManager.B_InventoryManager_C.OnSuccess_E89308694B33FF2811EE8A8208A57050
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FBlueprintOnlineItem>     Items                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UB_InventoryManager_C::OnSuccess_E89308694B33FF2811EE8A8208A57050(const TArray<struct FBlueprintOnlineItem>& Items)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "OnSuccess_E89308694B33FF2811EE8A8208A57050");

	Params::B_InventoryManager_C_OnSuccess_E89308694B33FF2811EE8A8208A57050 Parms{};

	Parms.Items = std::move(Items);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_InventoryManager.B_InventoryManager_C.OnSuccess_EDAC6D924408692EE5962598A11B2935
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FBlueprintOnlineItem>     Items                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UB_InventoryManager_C::OnSuccess_EDAC6D924408692EE5962598A11B2935(const TArray<struct FBlueprintOnlineItem>& Items)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "OnSuccess_EDAC6D924408692EE5962598A11B2935");

	Params::B_InventoryManager_C_OnSuccess_EDAC6D924408692EE5962598A11B2935 Parms{};

	Parms.Items = std::move(Items);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_InventoryManager.B_InventoryManager_C.ReloadValidItems
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UB_InventoryManager_C::ReloadValidItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "ReloadValidItems");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_InventoryManager.B_InventoryManager_C.SelectedPlayerIconWasChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ItemDefId                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_InventoryManager_C::SelectedPlayerIconWasChanged(int32 ItemDefId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "SelectedPlayerIconWasChanged");

	Params::B_InventoryManager_C_SelectedPlayerIconWasChanged Parms{};

	Parms.ItemDefId = ItemDefId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_InventoryManager.B_InventoryManager_C.SetupAllItemsToConsume
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FBlueprintOnlineItem>     AllItems                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UB_InventoryManager_C::SetupAllItemsToConsume(TArray<struct FBlueprintOnlineItem>& AllItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "SetupAllItemsToConsume");

	Params::B_InventoryManager_C_SetupAllItemsToConsume Parms{};

	Parms.AllItems = std::move(AllItems);

	UObject::ProcessEvent(Func, &Parms);

	AllItems = std::move(Parms.AllItems);
}


// Function B_InventoryManager.B_InventoryManager_C.UpdateInventory
// (BlueprintCallable, BlueprintEvent)

void UB_InventoryManager_C::UpdateInventory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "UpdateInventory");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_InventoryManager.B_InventoryManager_C.UpdateItemDrop
// (BlueprintCallable, BlueprintEvent)

void UB_InventoryManager_C::UpdateItemDrop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "UpdateItemDrop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_InventoryManager.B_InventoryManager_C.UpdateUnlocks
// (BlueprintCallable, BlueprintEvent)

void UB_InventoryManager_C::UpdateUnlocks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "UpdateUnlocks");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_InventoryManager.B_InventoryManager_C.UpdateUnlocksAndDrops
// (BlueprintCallable, BlueprintEvent)

void UB_InventoryManager_C::UpdateUnlocksAndDrops()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "UpdateUnlocksAndDrops");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_InventoryManager.B_InventoryManager_C.UpdateValidItems
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UB_InventoryManager_C::UpdateValidItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "UpdateValidItems");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_InventoryManager.B_InventoryManager_C.Verifiy Skin Items
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// ETeamID                                 Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UB_GameInstance_C*                B_GameInstance                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UB_SkinSelection_C*               Skin_Save                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UB_InventoryManager_C::Verifiy_Skin_Items(ETeamID Team, class UB_GameInstance_C* B_GameInstance, class UB_SkinSelection_C* Skin_Save)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "Verifiy Skin Items");

	Params::B_InventoryManager_C_Verifiy_Skin_Items Parms{};

	Parms.Team = Team;
	Parms.B_GameInstance = B_GameInstance;
	Parms.Skin_Save = Skin_Save;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_InventoryManager.B_InventoryManager_C.Verify All Equipped Items
// (Public, BlueprintCallable, BlueprintEvent)

void UB_InventoryManager_C::Verify_All_Equipped_Items()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "Verify All Equipped Items");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_InventoryManager.B_InventoryManager_C.VerifySaveGame
// (BlueprintCallable, BlueprintEvent)

void UB_InventoryManager_C::VerifySaveGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "VerifySaveGame");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_InventoryManager.B_InventoryManager_C.OwnsItemByDefId
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   ItemDefId                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bOwnsItem                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_InventoryManager_C::OwnsItemByDefId(int32 ItemDefId, bool* bOwnsItem) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InventoryManager_C", "OwnsItemByDefId");

	Params::B_InventoryManager_C_OwnsItemByDefId Parms{};

	Parms.ItemDefId = ItemDefId;

	UObject::ProcessEvent(Func, &Parms);

	if (bOwnsItem != nullptr)
		*bOwnsItem = Parms.bOwnsItem;
}

}

